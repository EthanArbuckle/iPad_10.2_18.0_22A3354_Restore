void sub_1E0969D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;

  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v29 & 1) == 0)
LABEL_10:
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v28);
  goto LABEL_10;
}

_QWORD *MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Bf16,signed char>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X4>, unint64_t **a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD *result;
  unint64_t v16;
  uint64_t v17;
  int v18;
  float Float;
  float v20;
  MIL::Bf16 *v21;
  uint64_t v22;
  uint64_t v23;
  std::string::size_type v24;
  std::string::size_type v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  float v29;
  MIL::Bf16 *Int;
  uint64_t v31;
  uint64_t Data;
  unint64_t v33;
  uint64_t v34;
  char v35;
  float v36;
  MIL::Bf16 *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char v42;
  float v43;
  unsigned int v44;
  MIL::Bf16 *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  float v51;
  float v52;
  MIL::Bf16 *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char v58;
  float v59;
  MIL::Bf16 *v60;
  uint64_t v61;
  uint64_t v62;
  std::string::size_type v63;
  std::string::size_type v64;
  unint64_t v65;
  unint64_t v66;
  int v67;
  float v68;
  MIL::Bf16 *v69;
  uint64_t v70;
  std::runtime_error *exception;
  std::string *v72;
  __int128 v73;
  std::string *v74;
  __int128 v75;
  std::string v76;
  std::string v77;
  std::string v78;

  v12 = (*(uint64_t (**)(uint64_t *))(**a4 + 32))(*a4);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 88))(v12);
  switch(v13)
  {
    case 4:
      v14 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(*a4);
      result = std::vector<MIL::Bf16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v16 = 0;
        do
        {
          v17 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v16);
          v18 = *(char *)(a1 + v16);
          Float = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v17));
          v20 = MIL::Fp16::GetFloat((MIL::Fp16 *)(v14 + 2 * v17));
          result = (_QWORD *)MIL::Bf16::FromFloat(v21, Float * (float)((float)v18 - v20));
          v22 = *a6;
          *(_WORD *)(*a6 + 2 * v16++) = (_WORD)result;
        }
        while (v16 < (a6[1] - v22) >> 1);
      }
      break;
    case 5:
      Data = MIL::IRTensorValue::GetDataView<float>(*a4);
      result = std::vector<MIL::Bf16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v33 = 0;
        do
        {
          v34 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v33);
          v35 = *(_BYTE *)(a1 + v33);
          v36 = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v34));
          result = (_QWORD *)MIL::Bf16::FromFloat(v37, v36 * (float)((float)v35 - *(float *)(Data + 4 * v34)));
          v38 = *a6;
          *(_WORD *)(*a6 + 2 * v33++) = (_WORD)result;
        }
        while (v33 < (a6[1] - v38) >> 1);
      }
      break;
    case 7:
      v47 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(*a4);
      result = std::vector<MIL::Bf16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v48 = 0;
        do
        {
          v49 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v48);
          v50 = *(char *)(a1 + v48);
          v51 = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v49));
          v52 = MIL::Bf16::GetFloat((MIL::Bf16 *)(v47 + 2 * v49));
          result = (_QWORD *)MIL::Bf16::FromFloat(v53, v51 * (float)((float)v50 - v52));
          v54 = *a6;
          *(_WORD *)(*a6 + 2 * v48++) = (_WORD)result;
        }
        while (v48 < (a6[1] - v54) >> 1);
      }
      break;
    case 9:
      v55 = MIL::IRTensorValue::GetDataView<signed char>(*a4);
      result = std::vector<MIL::Bf16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v56 = 0;
        do
        {
          v57 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v56);
          v58 = *(_BYTE *)(a1 + v56);
          v59 = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v57));
          result = (_QWORD *)MIL::Bf16::FromFloat(v60, v59 * (float)((float)v58 - (float)*(char *)(v55 + v57)));
          v61 = *a6;
          *(_WORD *)(*a6 + 2 * v56++) = (_WORD)result;
        }
        while (v56 < (a6[1] - v61) >> 1);
      }
      break;
    case 13:
      v23 = MIL::IRTensorValue::GetDataView<MIL::Int4>(*a4);
      v25 = v24;
      result = std::vector<MIL::Bf16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v26 = 0;
        do
        {
          v27 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v26);
          v28 = *(char *)(a1 + v26);
          v29 = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v27));
          v78.__r_.__value_.__r.__words[0] = v23;
          v78.__r_.__value_.__l.__size_ = v25;
          v77.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::Int4 const,18446744073709551615ul>::ValueAt(&v78, v27);
          Int = (MIL::Bf16 *)MIL::Int4::GetInt((MIL::Int4 *)&v77);
          result = (_QWORD *)MIL::Bf16::FromFloat(Int, v29 * (float)((float)v28 - (float)(int)Int));
          v31 = *a6;
          *(_WORD *)(*a6 + 2 * v26++) = (_WORD)result;
        }
        while (v26 < (a6[1] - v31) >> 1);
      }
      break;
    case 14:
      v39 = MIL::IRTensorValue::GetDataView<unsigned char>(*a4);
      result = std::vector<MIL::Bf16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v40 = 0;
        do
        {
          v41 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v40);
          v42 = *(_BYTE *)(a1 + v40);
          v43 = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v41));
          LOBYTE(v44) = *(_BYTE *)(v39 + v41);
          result = (_QWORD *)MIL::Bf16::FromFloat(v45, v43 * (float)((float)v42 - (float)v44));
          v46 = *a6;
          *(_WORD *)(*a6 + 2 * v40++) = (_WORD)result;
        }
        while (v40 < (a6[1] - v46) >> 1);
      }
      break;
    case 20:
      v62 = MIL::IRTensorValue::GetDataView<MIL::UInt4>(*a4);
      v64 = v63;
      result = std::vector<MIL::Bf16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v65 = 0;
        do
        {
          v66 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v65);
          v67 = *(char *)(a1 + v65);
          v68 = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v66));
          v78.__r_.__value_.__r.__words[0] = v62;
          v78.__r_.__value_.__l.__size_ = v64;
          v77.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(&v78, v66);
          v69 = (MIL::Bf16 *)MIL::UInt4::GetInt((MIL::UInt4 *)&v77);
          result = (_QWORD *)MIL::Bf16::FromFloat(v69, v68 * (float)((float)v67 - (float)(int)v69));
          v70 = *a6;
          *(_WORD *)(*a6 + 2 * v65++) = (_WORD)result;
        }
        while (v65 < (a6[1] - v70) >> 1);
      }
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      MIL::IRDataTypeToString(v13, &v76);
      v72 = std::string::insert(&v76, 0, "Unsupported dType (");
      v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
      v77.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v73;
      v72->__r_.__value_.__l.__size_ = 0;
      v72->__r_.__value_.__r.__words[2] = 0;
      v72->__r_.__value_.__r.__words[0] = 0;
      v74 = std::string::append(&v77, ") for offset.");
      v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
      v78.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v75;
      v74->__r_.__value_.__l.__size_ = 0;
      v74->__r_.__value_.__r.__words[2] = 0;
      v74->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v78);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1E096A32C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;

  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v29 & 1) == 0)
LABEL_10:
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v28);
  goto LABEL_10;
}

_QWORD *MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Bf16,unsigned char>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X4>, unint64_t **a5@<X5>, uint64_t *a6@<X8>)
{
  unsigned int v6;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD *result;
  unint64_t v17;
  uint64_t v18;
  float Float;
  float v20;
  MIL::Bf16 *v21;
  uint64_t v22;
  uint64_t v23;
  std::string::size_type v24;
  std::string::size_type v25;
  unint64_t v26;
  unint64_t v27;
  float v28;
  MIL::Bf16 *Int;
  uint64_t v30;
  uint64_t Data;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  float v35;
  MIL::Bf16 *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int v41;
  float v42;
  unsigned int v43;
  MIL::Bf16 *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  float v49;
  float v50;
  MIL::Bf16 *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unsigned int v56;
  float v57;
  MIL::Bf16 *v58;
  uint64_t v59;
  uint64_t v60;
  std::string::size_type v61;
  std::string::size_type v62;
  unint64_t v63;
  unint64_t v64;
  float v65;
  MIL::Bf16 *v66;
  uint64_t v67;
  std::runtime_error *exception;
  std::string *v69;
  __int128 v70;
  std::string *v71;
  __int128 v72;
  std::string v73;
  std::string v74;
  std::string v75;

  v13 = (*(uint64_t (**)(uint64_t *))(**a4 + 32))(*a4);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 88))(v13);
  switch(v14)
  {
    case 4:
      v15 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(*a4);
      result = std::vector<MIL::Bf16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v17 = 0;
        do
        {
          v18 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v17);
          LOBYTE(v6) = *(_BYTE *)(a1 + v17);
          Float = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v18));
          v20 = MIL::Fp16::GetFloat((MIL::Fp16 *)(v15 + 2 * v18));
          result = (_QWORD *)MIL::Bf16::FromFloat(v21, Float * (float)((float)v6 - v20));
          v22 = *a6;
          *(_WORD *)(*a6 + 2 * v17++) = (_WORD)result;
        }
        while (v17 < (a6[1] - v22) >> 1);
      }
      break;
    case 5:
      Data = MIL::IRTensorValue::GetDataView<float>(*a4);
      result = std::vector<MIL::Bf16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v32 = 0;
        do
        {
          v33 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v32);
          v34 = *(unsigned __int8 *)(a1 + v32);
          v35 = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v33));
          result = (_QWORD *)MIL::Bf16::FromFloat(v36, v35 * (float)((float)v34 - *(float *)(Data + 4 * v33)));
          v37 = *a6;
          *(_WORD *)(*a6 + 2 * v32++) = (_WORD)result;
        }
        while (v32 < (a6[1] - v37) >> 1);
      }
      break;
    case 7:
      v46 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(*a4);
      result = std::vector<MIL::Bf16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v47 = 0;
        do
        {
          v48 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v47);
          LOBYTE(v6) = *(_BYTE *)(a1 + v47);
          v49 = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v48));
          v50 = MIL::Bf16::GetFloat((MIL::Bf16 *)(v46 + 2 * v48));
          result = (_QWORD *)MIL::Bf16::FromFloat(v51, v49 * (float)((float)v6 - v50));
          v52 = *a6;
          *(_WORD *)(*a6 + 2 * v47++) = (_WORD)result;
        }
        while (v47 < (a6[1] - v52) >> 1);
      }
      break;
    case 9:
      v53 = MIL::IRTensorValue::GetDataView<signed char>(*a4);
      result = std::vector<MIL::Bf16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v54 = 0;
        do
        {
          v55 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v54);
          v56 = *(unsigned __int8 *)(a1 + v54);
          v57 = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v55));
          result = (_QWORD *)MIL::Bf16::FromFloat(v58, v57 * (float)((float)v56 - (float)*(char *)(v53 + v55)));
          v59 = *a6;
          *(_WORD *)(*a6 + 2 * v54++) = (_WORD)result;
        }
        while (v54 < (a6[1] - v59) >> 1);
      }
      break;
    case 13:
      v23 = MIL::IRTensorValue::GetDataView<MIL::Int4>(*a4);
      v25 = v24;
      result = std::vector<MIL::Bf16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v26 = 0;
        do
        {
          v27 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v26);
          LOBYTE(v6) = *(_BYTE *)(a1 + v26);
          v28 = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v27));
          v75.__r_.__value_.__r.__words[0] = v23;
          v75.__r_.__value_.__l.__size_ = v25;
          v74.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::Int4 const,18446744073709551615ul>::ValueAt(&v75, v27);
          Int = (MIL::Bf16 *)MIL::Int4::GetInt((MIL::Int4 *)&v74);
          result = (_QWORD *)MIL::Bf16::FromFloat(Int, v28 * (float)((float)v6 - (float)(int)Int));
          v30 = *a6;
          *(_WORD *)(*a6 + 2 * v26++) = (_WORD)result;
        }
        while (v26 < (a6[1] - v30) >> 1);
      }
      break;
    case 14:
      v38 = MIL::IRTensorValue::GetDataView<unsigned char>(*a4);
      result = std::vector<MIL::Bf16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v39 = 0;
        do
        {
          v40 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v39);
          v41 = *(unsigned __int8 *)(a1 + v39);
          v42 = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v40));
          LOBYTE(v43) = *(_BYTE *)(v38 + v40);
          result = (_QWORD *)MIL::Bf16::FromFloat(v44, v42 * (float)((float)v41 - (float)v43));
          v45 = *a6;
          *(_WORD *)(*a6 + 2 * v39++) = (_WORD)result;
        }
        while (v39 < (a6[1] - v45) >> 1);
      }
      break;
    case 20:
      v60 = MIL::IRTensorValue::GetDataView<MIL::UInt4>(*a4);
      v62 = v61;
      result = std::vector<MIL::Bf16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v63 = 0;
        do
        {
          v64 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v63);
          LOBYTE(v6) = *(_BYTE *)(a1 + v63);
          v65 = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v64));
          v75.__r_.__value_.__r.__words[0] = v60;
          v75.__r_.__value_.__l.__size_ = v62;
          v74.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(&v75, v64);
          v66 = (MIL::Bf16 *)MIL::UInt4::GetInt((MIL::UInt4 *)&v74);
          result = (_QWORD *)MIL::Bf16::FromFloat(v66, v65 * (float)((float)v6 - (float)(int)v66));
          v67 = *a6;
          *(_WORD *)(*a6 + 2 * v63++) = (_WORD)result;
        }
        while (v63 < (a6[1] - v67) >> 1);
      }
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      MIL::IRDataTypeToString(v14, &v73);
      v69 = std::string::insert(&v73, 0, "Unsupported dType (");
      v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
      v74.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v70;
      v69->__r_.__value_.__l.__size_ = 0;
      v69->__r_.__value_.__r.__words[2] = 0;
      v69->__r_.__value_.__r.__words[0] = 0;
      v71 = std::string::append(&v74, ") for offset.");
      v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
      v75.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v72;
      v71->__r_.__value_.__l.__size_ = 0;
      v71->__r_.__value_.__r.__words[2] = 0;
      v71->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v75);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1E096A8D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;

  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v29 & 1) == 0)
LABEL_10:
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v28);
  goto LABEL_10;
}

_QWORD *MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Bf16,MIL::Bf16>@<X0>(MIL::Bf16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X4>, unint64_t **a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD *result;
  unint64_t v16;
  uint64_t v17;
  float Float;
  float v19;
  float v20;
  MIL::Bf16 *v21;
  uint64_t v22;
  uint64_t v23;
  std::string::size_type v24;
  std::string::size_type v25;
  unint64_t v26;
  unint64_t v27;
  float v28;
  float v29;
  MIL::Bf16 *Int;
  uint64_t v31;
  uint64_t Data;
  unint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  MIL::Bf16 *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  float v42;
  float v43;
  unsigned int v44;
  MIL::Bf16 *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  float v50;
  float v51;
  float v52;
  MIL::Bf16 *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  float v58;
  float v59;
  MIL::Bf16 *v60;
  uint64_t v61;
  uint64_t v62;
  std::string::size_type v63;
  std::string::size_type v64;
  unint64_t v65;
  unint64_t v66;
  float v67;
  float v68;
  MIL::Bf16 *v69;
  uint64_t v70;
  std::runtime_error *exception;
  std::string *v72;
  __int128 v73;
  std::string *v74;
  __int128 v75;
  std::string v76;
  std::string v77;
  std::string v78;

  v12 = (*(uint64_t (**)(uint64_t *))(**a4 + 32))(*a4);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 88))(v12);
  switch(v13)
  {
    case 4:
      v14 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(*a4);
      result = std::vector<MIL::Bf16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v16 = 0;
        do
        {
          v17 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v16);
          Float = MIL::Bf16::GetFloat(a1);
          v19 = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v17));
          v20 = MIL::Fp16::GetFloat((MIL::Fp16 *)(v14 + 2 * v17));
          result = (_QWORD *)MIL::Bf16::FromFloat(v21, v19 * (float)(Float - v20));
          v22 = *a6;
          *(_WORD *)(*a6 + 2 * v16++) = (_WORD)result;
          a1 = (MIL::Bf16 *)((char *)a1 + 2);
        }
        while (v16 < (a6[1] - v22) >> 1);
      }
      break;
    case 5:
      Data = MIL::IRTensorValue::GetDataView<float>(*a4);
      result = std::vector<MIL::Bf16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v33 = 0;
        do
        {
          v34 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v33);
          v35 = MIL::Bf16::GetFloat(a1);
          v36 = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v34));
          result = (_QWORD *)MIL::Bf16::FromFloat(v37, v36 * (float)(v35 - *(float *)(Data + 4 * v34)));
          v38 = *a6;
          *(_WORD *)(*a6 + 2 * v33++) = (_WORD)result;
          a1 = (MIL::Bf16 *)((char *)a1 + 2);
        }
        while (v33 < (a6[1] - v38) >> 1);
      }
      break;
    case 7:
      v47 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(*a4);
      result = std::vector<MIL::Bf16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v48 = 0;
        do
        {
          v49 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v48);
          v50 = MIL::Bf16::GetFloat(a1);
          v51 = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v49));
          v52 = MIL::Bf16::GetFloat((MIL::Bf16 *)(v47 + 2 * v49));
          result = (_QWORD *)MIL::Bf16::FromFloat(v53, v51 * (float)(v50 - v52));
          v54 = *a6;
          *(_WORD *)(*a6 + 2 * v48++) = (_WORD)result;
          a1 = (MIL::Bf16 *)((char *)a1 + 2);
        }
        while (v48 < (a6[1] - v54) >> 1);
      }
      break;
    case 9:
      v55 = MIL::IRTensorValue::GetDataView<signed char>(*a4);
      result = std::vector<MIL::Bf16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v56 = 0;
        do
        {
          v57 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v56);
          v58 = MIL::Bf16::GetFloat(a1);
          v59 = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v57));
          result = (_QWORD *)MIL::Bf16::FromFloat(v60, v59 * (float)(v58 - (float)*(char *)(v55 + v57)));
          v61 = *a6;
          *(_WORD *)(*a6 + 2 * v56++) = (_WORD)result;
          a1 = (MIL::Bf16 *)((char *)a1 + 2);
        }
        while (v56 < (a6[1] - v61) >> 1);
      }
      break;
    case 13:
      v23 = MIL::IRTensorValue::GetDataView<MIL::Int4>(*a4);
      v25 = v24;
      result = std::vector<MIL::Bf16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v26 = 0;
        do
        {
          v27 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v26);
          v28 = MIL::Bf16::GetFloat(a1);
          v29 = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v27));
          v78.__r_.__value_.__r.__words[0] = v23;
          v78.__r_.__value_.__l.__size_ = v25;
          v77.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::Int4 const,18446744073709551615ul>::ValueAt(&v78, v27);
          Int = (MIL::Bf16 *)MIL::Int4::GetInt((MIL::Int4 *)&v77);
          result = (_QWORD *)MIL::Bf16::FromFloat(Int, v29 * (float)(v28 - (float)(int)Int));
          v31 = *a6;
          *(_WORD *)(*a6 + 2 * v26++) = (_WORD)result;
          a1 = (MIL::Bf16 *)((char *)a1 + 2);
        }
        while (v26 < (a6[1] - v31) >> 1);
      }
      break;
    case 14:
      v39 = MIL::IRTensorValue::GetDataView<unsigned char>(*a4);
      result = std::vector<MIL::Bf16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v40 = 0;
        do
        {
          v41 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v40);
          v42 = MIL::Bf16::GetFloat(a1);
          v43 = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v41));
          LOBYTE(v44) = *(_BYTE *)(v39 + v41);
          result = (_QWORD *)MIL::Bf16::FromFloat(v45, v43 * (float)(v42 - (float)v44));
          v46 = *a6;
          *(_WORD *)(*a6 + 2 * v40++) = (_WORD)result;
          a1 = (MIL::Bf16 *)((char *)a1 + 2);
        }
        while (v40 < (a6[1] - v46) >> 1);
      }
      break;
    case 20:
      v62 = MIL::IRTensorValue::GetDataView<MIL::UInt4>(*a4);
      v64 = v63;
      result = std::vector<MIL::Bf16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v65 = 0;
        do
        {
          v66 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v65);
          v67 = MIL::Bf16::GetFloat(a1);
          v68 = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v66));
          v78.__r_.__value_.__r.__words[0] = v62;
          v78.__r_.__value_.__l.__size_ = v64;
          v77.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(&v78, v66);
          v69 = (MIL::Bf16 *)MIL::UInt4::GetInt((MIL::UInt4 *)&v77);
          result = (_QWORD *)MIL::Bf16::FromFloat(v69, v68 * (float)(v67 - (float)(int)v69));
          v70 = *a6;
          *(_WORD *)(*a6 + 2 * v65++) = (_WORD)result;
          a1 = (MIL::Bf16 *)((char *)a1 + 2);
        }
        while (v65 < (a6[1] - v70) >> 1);
      }
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      MIL::IRDataTypeToString(v13, &v76);
      v72 = std::string::insert(&v76, 0, "Unsupported dType (");
      v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
      v77.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v73;
      v72->__r_.__value_.__l.__size_ = 0;
      v72->__r_.__value_.__r.__words[2] = 0;
      v72->__r_.__value_.__r.__words[0] = 0;
      v74 = std::string::append(&v77, ") for offset.");
      v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
      v78.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v75;
      v74->__r_.__value_.__l.__size_ = 0;
      v74->__r_.__value_.__r.__words[2] = 0;
      v74->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v78);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1E096AEAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;

  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v29 & 1) == 0)
LABEL_10:
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v28);
  goto LABEL_10;
}

_QWORD *MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Bf16,MIL::Fp16>@<X0>(MIL::Fp16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X4>, unint64_t **a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD *result;
  unint64_t v16;
  uint64_t v17;
  float Float;
  float v19;
  float v20;
  MIL::Bf16 *v21;
  uint64_t v22;
  uint64_t v23;
  std::string::size_type v24;
  std::string::size_type v25;
  unint64_t v26;
  unint64_t v27;
  float v28;
  float v29;
  MIL::Bf16 *Int;
  uint64_t v31;
  uint64_t Data;
  unint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  MIL::Bf16 *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  float v42;
  float v43;
  unsigned int v44;
  MIL::Bf16 *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  float v50;
  float v51;
  float v52;
  MIL::Bf16 *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  float v58;
  float v59;
  MIL::Bf16 *v60;
  uint64_t v61;
  uint64_t v62;
  std::string::size_type v63;
  std::string::size_type v64;
  unint64_t v65;
  unint64_t v66;
  float v67;
  float v68;
  MIL::Bf16 *v69;
  uint64_t v70;
  std::runtime_error *exception;
  std::string *v72;
  __int128 v73;
  std::string *v74;
  __int128 v75;
  std::string v76;
  std::string v77;
  std::string v78;

  v12 = (*(uint64_t (**)(uint64_t *))(**a4 + 32))(*a4);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 88))(v12);
  switch(v13)
  {
    case 4:
      v14 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(*a4);
      result = std::vector<MIL::Bf16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v16 = 0;
        do
        {
          v17 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v16);
          Float = MIL::Fp16::GetFloat(a1);
          v19 = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v17));
          v20 = MIL::Fp16::GetFloat((MIL::Fp16 *)(v14 + 2 * v17));
          result = (_QWORD *)MIL::Bf16::FromFloat(v21, v19 * (float)(Float - v20));
          v22 = *a6;
          *(_WORD *)(*a6 + 2 * v16++) = (_WORD)result;
          a1 = (MIL::Fp16 *)((char *)a1 + 2);
        }
        while (v16 < (a6[1] - v22) >> 1);
      }
      break;
    case 5:
      Data = MIL::IRTensorValue::GetDataView<float>(*a4);
      result = std::vector<MIL::Bf16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v33 = 0;
        do
        {
          v34 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v33);
          v35 = MIL::Fp16::GetFloat(a1);
          v36 = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v34));
          result = (_QWORD *)MIL::Bf16::FromFloat(v37, v36 * (float)(v35 - *(float *)(Data + 4 * v34)));
          v38 = *a6;
          *(_WORD *)(*a6 + 2 * v33++) = (_WORD)result;
          a1 = (MIL::Fp16 *)((char *)a1 + 2);
        }
        while (v33 < (a6[1] - v38) >> 1);
      }
      break;
    case 7:
      v47 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(*a4);
      result = std::vector<MIL::Bf16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v48 = 0;
        do
        {
          v49 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v48);
          v50 = MIL::Fp16::GetFloat(a1);
          v51 = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v49));
          v52 = MIL::Bf16::GetFloat((MIL::Bf16 *)(v47 + 2 * v49));
          result = (_QWORD *)MIL::Bf16::FromFloat(v53, v51 * (float)(v50 - v52));
          v54 = *a6;
          *(_WORD *)(*a6 + 2 * v48++) = (_WORD)result;
          a1 = (MIL::Fp16 *)((char *)a1 + 2);
        }
        while (v48 < (a6[1] - v54) >> 1);
      }
      break;
    case 9:
      v55 = MIL::IRTensorValue::GetDataView<signed char>(*a4);
      result = std::vector<MIL::Bf16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v56 = 0;
        do
        {
          v57 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v56);
          v58 = MIL::Fp16::GetFloat(a1);
          v59 = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v57));
          result = (_QWORD *)MIL::Bf16::FromFloat(v60, v59 * (float)(v58 - (float)*(char *)(v55 + v57)));
          v61 = *a6;
          *(_WORD *)(*a6 + 2 * v56++) = (_WORD)result;
          a1 = (MIL::Fp16 *)((char *)a1 + 2);
        }
        while (v56 < (a6[1] - v61) >> 1);
      }
      break;
    case 13:
      v23 = MIL::IRTensorValue::GetDataView<MIL::Int4>(*a4);
      v25 = v24;
      result = std::vector<MIL::Bf16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v26 = 0;
        do
        {
          v27 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v26);
          v28 = MIL::Fp16::GetFloat(a1);
          v29 = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v27));
          v78.__r_.__value_.__r.__words[0] = v23;
          v78.__r_.__value_.__l.__size_ = v25;
          v77.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::Int4 const,18446744073709551615ul>::ValueAt(&v78, v27);
          Int = (MIL::Bf16 *)MIL::Int4::GetInt((MIL::Int4 *)&v77);
          result = (_QWORD *)MIL::Bf16::FromFloat(Int, v29 * (float)(v28 - (float)(int)Int));
          v31 = *a6;
          *(_WORD *)(*a6 + 2 * v26++) = (_WORD)result;
          a1 = (MIL::Fp16 *)((char *)a1 + 2);
        }
        while (v26 < (a6[1] - v31) >> 1);
      }
      break;
    case 14:
      v39 = MIL::IRTensorValue::GetDataView<unsigned char>(*a4);
      result = std::vector<MIL::Bf16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v40 = 0;
        do
        {
          v41 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v40);
          v42 = MIL::Fp16::GetFloat(a1);
          v43 = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v41));
          LOBYTE(v44) = *(_BYTE *)(v39 + v41);
          result = (_QWORD *)MIL::Bf16::FromFloat(v45, v43 * (float)(v42 - (float)v44));
          v46 = *a6;
          *(_WORD *)(*a6 + 2 * v40++) = (_WORD)result;
          a1 = (MIL::Fp16 *)((char *)a1 + 2);
        }
        while (v40 < (a6[1] - v46) >> 1);
      }
      break;
    case 20:
      v62 = MIL::IRTensorValue::GetDataView<MIL::UInt4>(*a4);
      v64 = v63;
      result = std::vector<MIL::Bf16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v65 = 0;
        do
        {
          v66 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v65);
          v67 = MIL::Fp16::GetFloat(a1);
          v68 = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v66));
          v78.__r_.__value_.__r.__words[0] = v62;
          v78.__r_.__value_.__l.__size_ = v64;
          v77.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(&v78, v66);
          v69 = (MIL::Bf16 *)MIL::UInt4::GetInt((MIL::UInt4 *)&v77);
          result = (_QWORD *)MIL::Bf16::FromFloat(v69, v68 * (float)(v67 - (float)(int)v69));
          v70 = *a6;
          *(_WORD *)(*a6 + 2 * v65++) = (_WORD)result;
          a1 = (MIL::Fp16 *)((char *)a1 + 2);
        }
        while (v65 < (a6[1] - v70) >> 1);
      }
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      MIL::IRDataTypeToString(v13, &v76);
      v72 = std::string::insert(&v76, 0, "Unsupported dType (");
      v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
      v77.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v73;
      v72->__r_.__value_.__l.__size_ = 0;
      v72->__r_.__value_.__r.__words[2] = 0;
      v72->__r_.__value_.__r.__words[0] = 0;
      v74 = std::string::append(&v77, ") for offset.");
      v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
      v78.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v75;
      v74->__r_.__value_.__l.__size_ = 0;
      v74->__r_.__value_.__r.__words[2] = 0;
      v74->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v78);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1E096B488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;

  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v29 & 1) == 0)
LABEL_10:
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v28);
  goto LABEL_10;
}

_QWORD *MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Bf16,float>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X4>, unint64_t **a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD *result;
  unint64_t v16;
  uint64_t v17;
  float v18;
  float Float;
  float v20;
  MIL::Bf16 *v21;
  uint64_t v22;
  uint64_t v23;
  std::string::size_type v24;
  std::string::size_type v25;
  unint64_t v26;
  unint64_t v27;
  float v28;
  float v29;
  MIL::Bf16 *Int;
  uint64_t v31;
  uint64_t Data;
  unint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  MIL::Bf16 *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  float v42;
  float v43;
  unsigned int v44;
  MIL::Bf16 *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  float v50;
  float v51;
  float v52;
  MIL::Bf16 *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  float v58;
  float v59;
  MIL::Bf16 *v60;
  uint64_t v61;
  uint64_t v62;
  std::string::size_type v63;
  std::string::size_type v64;
  unint64_t v65;
  unint64_t v66;
  float v67;
  float v68;
  MIL::Bf16 *v69;
  uint64_t v70;
  std::runtime_error *exception;
  std::string *v72;
  __int128 v73;
  std::string *v74;
  __int128 v75;
  std::string v76;
  std::string v77;
  std::string v78;

  v12 = (*(uint64_t (**)(uint64_t *))(**a4 + 32))(*a4);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 88))(v12);
  switch(v13)
  {
    case 4:
      v14 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(*a4);
      result = std::vector<MIL::Bf16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v16 = 0;
        do
        {
          v17 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v16);
          v18 = *(float *)(a1 + 4 * v16);
          Float = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v17));
          v20 = MIL::Fp16::GetFloat((MIL::Fp16 *)(v14 + 2 * v17));
          result = (_QWORD *)MIL::Bf16::FromFloat(v21, Float * (float)(v18 - v20));
          v22 = *a6;
          *(_WORD *)(*a6 + 2 * v16++) = (_WORD)result;
        }
        while (v16 < (a6[1] - v22) >> 1);
      }
      break;
    case 5:
      Data = MIL::IRTensorValue::GetDataView<float>(*a4);
      result = std::vector<MIL::Bf16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v33 = 0;
        do
        {
          v34 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v33);
          v35 = *(float *)(a1 + 4 * v33);
          v36 = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v34));
          result = (_QWORD *)MIL::Bf16::FromFloat(v37, v36 * (float)(v35 - *(float *)(Data + 4 * v34)));
          v38 = *a6;
          *(_WORD *)(*a6 + 2 * v33++) = (_WORD)result;
        }
        while (v33 < (a6[1] - v38) >> 1);
      }
      break;
    case 7:
      v47 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(*a4);
      result = std::vector<MIL::Bf16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v48 = 0;
        do
        {
          v49 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v48);
          v50 = *(float *)(a1 + 4 * v48);
          v51 = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v49));
          v52 = MIL::Bf16::GetFloat((MIL::Bf16 *)(v47 + 2 * v49));
          result = (_QWORD *)MIL::Bf16::FromFloat(v53, v51 * (float)(v50 - v52));
          v54 = *a6;
          *(_WORD *)(*a6 + 2 * v48++) = (_WORD)result;
        }
        while (v48 < (a6[1] - v54) >> 1);
      }
      break;
    case 9:
      v55 = MIL::IRTensorValue::GetDataView<signed char>(*a4);
      result = std::vector<MIL::Bf16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v56 = 0;
        do
        {
          v57 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v56);
          v58 = *(float *)(a1 + 4 * v56);
          v59 = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v57));
          result = (_QWORD *)MIL::Bf16::FromFloat(v60, v59 * (float)(v58 - (float)*(char *)(v55 + v57)));
          v61 = *a6;
          *(_WORD *)(*a6 + 2 * v56++) = (_WORD)result;
        }
        while (v56 < (a6[1] - v61) >> 1);
      }
      break;
    case 13:
      v23 = MIL::IRTensorValue::GetDataView<MIL::Int4>(*a4);
      v25 = v24;
      result = std::vector<MIL::Bf16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v26 = 0;
        do
        {
          v27 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v26);
          v28 = *(float *)(a1 + 4 * v26);
          v29 = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v27));
          v78.__r_.__value_.__r.__words[0] = v23;
          v78.__r_.__value_.__l.__size_ = v25;
          v77.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::Int4 const,18446744073709551615ul>::ValueAt(&v78, v27);
          Int = (MIL::Bf16 *)MIL::Int4::GetInt((MIL::Int4 *)&v77);
          result = (_QWORD *)MIL::Bf16::FromFloat(Int, v29 * (float)(v28 - (float)(int)Int));
          v31 = *a6;
          *(_WORD *)(*a6 + 2 * v26++) = (_WORD)result;
        }
        while (v26 < (a6[1] - v31) >> 1);
      }
      break;
    case 14:
      v39 = MIL::IRTensorValue::GetDataView<unsigned char>(*a4);
      result = std::vector<MIL::Bf16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v40 = 0;
        do
        {
          v41 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v40);
          v42 = *(float *)(a1 + 4 * v40);
          v43 = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v41));
          LOBYTE(v44) = *(_BYTE *)(v39 + v41);
          result = (_QWORD *)MIL::Bf16::FromFloat(v45, v43 * (float)(v42 - (float)v44));
          v46 = *a6;
          *(_WORD *)(*a6 + 2 * v40++) = (_WORD)result;
        }
        while (v40 < (a6[1] - v46) >> 1);
      }
      break;
    case 20:
      v62 = MIL::IRTensorValue::GetDataView<MIL::UInt4>(*a4);
      v64 = v63;
      result = std::vector<MIL::Bf16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v65 = 0;
        do
        {
          v66 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v65);
          v67 = *(float *)(a1 + 4 * v65);
          v68 = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v66));
          v78.__r_.__value_.__r.__words[0] = v62;
          v78.__r_.__value_.__l.__size_ = v64;
          v77.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(&v78, v66);
          v69 = (MIL::Bf16 *)MIL::UInt4::GetInt((MIL::UInt4 *)&v77);
          result = (_QWORD *)MIL::Bf16::FromFloat(v69, v68 * (float)(v67 - (float)(int)v69));
          v70 = *a6;
          *(_WORD *)(*a6 + 2 * v65++) = (_WORD)result;
        }
        while (v65 < (a6[1] - v70) >> 1);
      }
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      MIL::IRDataTypeToString(v13, &v76);
      v72 = std::string::insert(&v76, 0, "Unsupported dType (");
      v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
      v77.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v73;
      v72->__r_.__value_.__l.__size_ = 0;
      v72->__r_.__value_.__r.__words[2] = 0;
      v72->__r_.__value_.__r.__words[0] = 0;
      v74 = std::string::append(&v77, ") for offset.");
      v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
      v78.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v75;
      v74->__r_.__value_.__l.__size_ = 0;
      v74->__r_.__value_.__r.__words[2] = 0;
      v74->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v78);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1E096BA10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;

  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v29 & 1) == 0)
LABEL_10:
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v28);
  goto LABEL_10;
}

_QWORD *MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Bf16,MIL::UInt4>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t **a4@<X4>, uint64_t *a5@<X8>)
{
  _QWORD *result;
  unint64_t v11;
  uint64_t v12;
  int Int;
  float Float;
  MIL::Bf16 *v15;
  uint64_t v16;
  char v17;
  _QWORD v18[2];

  result = std::vector<MIL::Bf16>::vector(a5, a2);
  if (a5[1] != *a5)
  {
    v11 = 0;
    do
    {
      v12 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a4, v11);
      v18[0] = a1;
      v18[1] = a2;
      v17 = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(v18, v11);
      Int = MIL::UInt4::GetInt((MIL::UInt4 *)&v17);
      Float = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v12));
      result = (_QWORD *)MIL::Bf16::FromFloat(v15, Float * (float)Int);
      v16 = *a5;
      *(_WORD *)(*a5 + 2 * v11++) = (_WORD)result;
    }
    while (v11 < (a5[1] - v16) >> 1);
  }
  return result;
}

void sub_1E096BB9C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Bf16,MIL::Int4>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t **a4@<X4>, uint64_t *a5@<X8>)
{
  _QWORD *result;
  unint64_t v11;
  uint64_t v12;
  int Int;
  float Float;
  MIL::Bf16 *v15;
  uint64_t v16;
  char v17;
  _QWORD v18[2];

  result = std::vector<MIL::Bf16>::vector(a5, a2);
  if (a5[1] != *a5)
  {
    v11 = 0;
    do
    {
      v12 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a4, v11);
      v18[0] = a1;
      v18[1] = a2;
      v17 = MIL::Util::Span<MIL::Int4 const,18446744073709551615ul>::ValueAt(v18, v11);
      Int = MIL::Int4::GetInt((MIL::Int4 *)&v17);
      Float = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v12));
      result = (_QWORD *)MIL::Bf16::FromFloat(v15, Float * (float)Int);
      v16 = *a5;
      *(_WORD *)(*a5 + 2 * v11++) = (_WORD)result;
    }
    while (v11 < (a5[1] - v16) >> 1);
  }
  return result;
}

void sub_1E096BC80(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Bf16,signed char>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t **a4@<X4>, uint64_t *a5@<X8>)
{
  _QWORD *result;
  unint64_t v10;
  uint64_t v11;
  char v12;
  float Float;
  MIL::Bf16 *v14;
  uint64_t v15;
  uint64_t v16;

  result = std::vector<MIL::Bf16>::vector(a5, a2);
  if (a5[1] != *a5)
  {
    v10 = 0;
    do
    {
      v11 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a4, v10);
      v12 = *(_BYTE *)(a1 + v10);
      Float = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v11));
      result = (_QWORD *)MIL::Bf16::FromFloat(v14, Float * (float)v12);
      v15 = *a5;
      v16 = a5[1];
      *(_WORD *)(*a5 + 2 * v10++) = (_WORD)result;
    }
    while (v10 < (v16 - v15) >> 1);
  }
  return result;
}

void sub_1E096BD30(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Bf16,unsigned char>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t **a4@<X4>, uint64_t *a5@<X8>)
{
  _QWORD *result;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  float Float;
  MIL::Bf16 *v14;
  uint64_t v15;
  uint64_t v16;

  result = std::vector<MIL::Bf16>::vector(a5, a2);
  if (a5[1] != *a5)
  {
    v10 = 0;
    do
    {
      v11 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a4, v10);
      v12 = *(unsigned __int8 *)(a1 + v10);
      Float = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v11));
      result = (_QWORD *)MIL::Bf16::FromFloat(v14, Float * (float)v12);
      v15 = *a5;
      v16 = a5[1];
      *(_WORD *)(*a5 + 2 * v10++) = (_WORD)result;
    }
    while (v10 < (v16 - v15) >> 1);
  }
  return result;
}

void sub_1E096BDDC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Bf16,MIL::Bf16>@<X0>(MIL::Bf16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t **a4@<X4>, uint64_t *a5@<X8>)
{
  _QWORD *result;
  unint64_t v10;
  uint64_t v11;
  float Float;
  float v13;
  MIL::Bf16 *v14;
  uint64_t v15;
  uint64_t v16;

  result = std::vector<MIL::Bf16>::vector(a5, a2);
  if (a5[1] != *a5)
  {
    v10 = 0;
    do
    {
      v11 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a4, v10);
      Float = MIL::Bf16::GetFloat(a1);
      v13 = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v11));
      result = (_QWORD *)MIL::Bf16::FromFloat(v14, Float * v13);
      v15 = *a5;
      v16 = a5[1];
      *(_WORD *)(*a5 + 2 * v10++) = (_WORD)result;
      a1 = (MIL::Bf16 *)((char *)a1 + 2);
    }
    while (v10 < (v16 - v15) >> 1);
  }
  return result;
}

void sub_1E096BE9C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Bf16,MIL::Fp16>@<X0>(MIL::Fp16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t **a4@<X4>, uint64_t *a5@<X8>)
{
  _QWORD *result;
  unint64_t v10;
  uint64_t v11;
  float Float;
  float v13;
  MIL::Bf16 *v14;
  uint64_t v15;
  uint64_t v16;

  result = std::vector<MIL::Bf16>::vector(a5, a2);
  if (a5[1] != *a5)
  {
    v10 = 0;
    do
    {
      v11 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a4, v10);
      Float = MIL::Fp16::GetFloat(a1);
      v13 = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v11));
      result = (_QWORD *)MIL::Bf16::FromFloat(v14, Float * v13);
      v15 = *a5;
      v16 = a5[1];
      *(_WORD *)(*a5 + 2 * v10++) = (_WORD)result;
      a1 = (MIL::Fp16 *)((char *)a1 + 2);
    }
    while (v10 < (v16 - v15) >> 1);
  }
  return result;
}

void sub_1E096BF5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Bf16,float>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t **a4@<X4>, uint64_t *a5@<X8>)
{
  _QWORD *result;
  unint64_t v10;
  uint64_t v11;
  float v12;
  float Float;
  MIL::Bf16 *v14;
  uint64_t v15;
  uint64_t v16;

  result = std::vector<MIL::Bf16>::vector(a5, a2);
  if (a5[1] != *a5)
  {
    v10 = 0;
    do
    {
      v11 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a4, v10);
      v12 = *(float *)(a1 + 4 * v10);
      Float = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v11));
      result = (_QWORD *)MIL::Bf16::FromFloat(v14, v12 * Float);
      v15 = *a5;
      v16 = a5[1];
      *(_WORD *)(*a5 + 2 * v10++) = (_WORD)result;
    }
    while (v10 < (v16 - v15) >> 1);
  }
  return result;
}

void sub_1E096C00C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::BlockwiseShiftScaleIndexConverter(_QWORD *a1, uint64_t **a2, unint64_t **a3)
{
  MIL::Operators::Common::Shared::ConstExprs::GetBlockSizes(a2, a3, a1);
  MIL::Operators::Common::Shared::ConstExprs::GetStrides(a2, a1 + 3);
  MIL::Operators::Common::Shared::ConstExprs::GetStrides(a3, a1 + 6);
  return a1;
}

void sub_1E096C088(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(unint64_t **this, unint64_t a2)
{
  unint64_t *v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *__p;
  _BYTE *v13;
  void *v14[3];

  MIL::Operators::Common::Shared::ConstExprs::UnravelIndex(a2, this + 3, v14);
  std::vector<unsigned long>::vector(&__p, this[7] - this[6]);
  v3 = (unint64_t *)__p;
  if (v13 != __p)
  {
    v4 = (v13 - (_BYTE *)__p) >> 3;
    v5 = (uint64_t *)v14[0];
    v6 = *this;
    if (v4 <= 1)
      v4 = 1;
    do
    {
      v8 = *v5++;
      v7 = v8;
      v9 = *v6++;
      *v3++ = v7 / v9;
      --v4;
    }
    while (v4);
  }
  v10 = MIL::Operators::Common::Shared::ConstExprs::RavelIndex((uint64_t **)&__p, (uint64_t)(this + 6));
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
  if (v14[0])
  {
    v14[1] = v14[0];
    operator delete(v14[0]);
  }
  return v10;
}

void sub_1E096C178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

_QWORD *MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Fp16,MIL::UInt4>@<X0>(std::string::size_type a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X4>, unint64_t **a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD *result;
  unint64_t v16;
  uint64_t v17;
  int Int;
  float Float;
  float v20;
  MIL::Fp16 *v21;
  uint64_t v22;
  uint64_t v23;
  std::string::size_type v24;
  std::string::size_type v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  float v29;
  MIL::Fp16 *v30;
  uint64_t v31;
  uint64_t Data;
  unint64_t v33;
  uint64_t v34;
  int v35;
  float v36;
  MIL::Fp16 *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  float v43;
  unsigned int v44;
  MIL::Fp16 *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  float v51;
  float v52;
  MIL::Fp16 *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  float v59;
  MIL::Fp16 *v60;
  uint64_t v61;
  uint64_t v62;
  std::string::size_type v63;
  std::string::size_type v64;
  unint64_t v65;
  unint64_t v66;
  int v67;
  float v68;
  MIL::Fp16 *v69;
  uint64_t v70;
  std::runtime_error *exception;
  std::string *v72;
  __int128 v73;
  std::string *v74;
  __int128 v75;
  std::string v76;
  std::string v77;
  std::string v78;

  v12 = (*(uint64_t (**)(uint64_t *))(**a4 + 32))(*a4);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 88))(v12);
  switch(v13)
  {
    case 4:
      v14 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(*a4);
      result = std::vector<MIL::Fp16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v16 = 0;
        do
        {
          v17 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v16);
          v78.__r_.__value_.__r.__words[0] = a1;
          v78.__r_.__value_.__l.__size_ = a2;
          v77.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(&v78, v16);
          Int = MIL::UInt4::GetInt((MIL::UInt4 *)&v77);
          Float = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v17));
          v20 = MIL::Fp16::GetFloat((MIL::Fp16 *)(v14 + 2 * v17));
          result = (_QWORD *)MIL::Fp16::FromFloat(v21, Float * (float)((float)Int - v20));
          v22 = *a6;
          *(_WORD *)(*a6 + 2 * v16++) = (_WORD)result;
        }
        while (v16 < (a6[1] - v22) >> 1);
      }
      break;
    case 5:
      Data = MIL::IRTensorValue::GetDataView<float>(*a4);
      result = std::vector<MIL::Fp16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v33 = 0;
        do
        {
          v34 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v33);
          v78.__r_.__value_.__r.__words[0] = a1;
          v78.__r_.__value_.__l.__size_ = a2;
          v77.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(&v78, v33);
          v35 = MIL::UInt4::GetInt((MIL::UInt4 *)&v77);
          v36 = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v34));
          result = (_QWORD *)MIL::Fp16::FromFloat(v37, v36 * (float)((float)v35 - *(float *)(Data + 4 * v34)));
          v38 = *a6;
          *(_WORD *)(*a6 + 2 * v33++) = (_WORD)result;
        }
        while (v33 < (a6[1] - v38) >> 1);
      }
      break;
    case 7:
      v47 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(*a4);
      result = std::vector<MIL::Fp16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v48 = 0;
        do
        {
          v49 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v48);
          v78.__r_.__value_.__r.__words[0] = a1;
          v78.__r_.__value_.__l.__size_ = a2;
          v77.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(&v78, v48);
          v50 = MIL::UInt4::GetInt((MIL::UInt4 *)&v77);
          v51 = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v49));
          v52 = MIL::Bf16::GetFloat((MIL::Bf16 *)(v47 + 2 * v49));
          result = (_QWORD *)MIL::Fp16::FromFloat(v53, v51 * (float)((float)v50 - v52));
          v54 = *a6;
          *(_WORD *)(*a6 + 2 * v48++) = (_WORD)result;
        }
        while (v48 < (a6[1] - v54) >> 1);
      }
      break;
    case 9:
      v55 = MIL::IRTensorValue::GetDataView<signed char>(*a4);
      result = std::vector<MIL::Fp16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v56 = 0;
        do
        {
          v57 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v56);
          v78.__r_.__value_.__r.__words[0] = a1;
          v78.__r_.__value_.__l.__size_ = a2;
          v77.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(&v78, v56);
          v58 = MIL::UInt4::GetInt((MIL::UInt4 *)&v77);
          v59 = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v57));
          result = (_QWORD *)MIL::Fp16::FromFloat(v60, v59 * (float)((float)v58 - (float)*(char *)(v55 + v57)));
          v61 = *a6;
          *(_WORD *)(*a6 + 2 * v56++) = (_WORD)result;
        }
        while (v56 < (a6[1] - v61) >> 1);
      }
      break;
    case 13:
      v23 = MIL::IRTensorValue::GetDataView<MIL::Int4>(*a4);
      v25 = v24;
      result = std::vector<MIL::Fp16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v26 = 0;
        do
        {
          v27 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v26);
          v78.__r_.__value_.__r.__words[0] = a1;
          v78.__r_.__value_.__l.__size_ = a2;
          v77.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(&v78, v26);
          v28 = MIL::UInt4::GetInt((MIL::UInt4 *)&v77);
          v29 = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v27));
          v78.__r_.__value_.__r.__words[0] = v23;
          v78.__r_.__value_.__l.__size_ = v25;
          v77.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::Int4 const,18446744073709551615ul>::ValueAt(&v78, v27);
          v30 = (MIL::Fp16 *)MIL::Int4::GetInt((MIL::Int4 *)&v77);
          result = (_QWORD *)MIL::Fp16::FromFloat(v30, v29 * (float)((float)v28 - (float)(int)v30));
          v31 = *a6;
          *(_WORD *)(*a6 + 2 * v26++) = (_WORD)result;
        }
        while (v26 < (a6[1] - v31) >> 1);
      }
      break;
    case 14:
      v39 = MIL::IRTensorValue::GetDataView<unsigned char>(*a4);
      result = std::vector<MIL::Fp16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v40 = 0;
        do
        {
          v41 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v40);
          v78.__r_.__value_.__r.__words[0] = a1;
          v78.__r_.__value_.__l.__size_ = a2;
          v77.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(&v78, v40);
          v42 = MIL::UInt4::GetInt((MIL::UInt4 *)&v77);
          v43 = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v41));
          LOBYTE(v44) = *(_BYTE *)(v39 + v41);
          result = (_QWORD *)MIL::Fp16::FromFloat(v45, v43 * (float)((float)v42 - (float)v44));
          v46 = *a6;
          *(_WORD *)(*a6 + 2 * v40++) = (_WORD)result;
        }
        while (v40 < (a6[1] - v46) >> 1);
      }
      break;
    case 20:
      v62 = MIL::IRTensorValue::GetDataView<MIL::UInt4>(*a4);
      v64 = v63;
      result = std::vector<MIL::Fp16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v65 = 0;
        do
        {
          v66 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v65);
          v78.__r_.__value_.__r.__words[0] = a1;
          v78.__r_.__value_.__l.__size_ = a2;
          v77.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(&v78, v65);
          v67 = MIL::UInt4::GetInt((MIL::UInt4 *)&v77);
          v68 = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v66));
          v78.__r_.__value_.__r.__words[0] = v62;
          v78.__r_.__value_.__l.__size_ = v64;
          v77.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(&v78, v66);
          v69 = (MIL::Fp16 *)MIL::UInt4::GetInt((MIL::UInt4 *)&v77);
          result = (_QWORD *)MIL::Fp16::FromFloat(v69, v68 * (float)((float)v67 - (float)(int)v69));
          v70 = *a6;
          *(_WORD *)(*a6 + 2 * v65++) = (_WORD)result;
        }
        while (v65 < (a6[1] - v70) >> 1);
      }
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      MIL::IRDataTypeToString(v13, &v76);
      v72 = std::string::insert(&v76, 0, "Unsupported dType (");
      v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
      v77.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v73;
      v72->__r_.__value_.__l.__size_ = 0;
      v72->__r_.__value_.__r.__words[2] = 0;
      v72->__r_.__value_.__r.__words[0] = 0;
      v74 = std::string::append(&v77, ") for offset.");
      v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
      v78.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v75;
      v74->__r_.__value_.__l.__size_ = 0;
      v74->__r_.__value_.__r.__words[2] = 0;
      v74->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v78);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1E096C754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;

  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v29 & 1) == 0)
LABEL_10:
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v28);
  goto LABEL_10;
}

_QWORD *MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Fp16,MIL::Int4>@<X0>(std::string::size_type a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X4>, unint64_t **a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD *result;
  unint64_t v16;
  uint64_t v17;
  int Int;
  float Float;
  float v20;
  MIL::Fp16 *v21;
  uint64_t v22;
  uint64_t v23;
  std::string::size_type v24;
  std::string::size_type v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  float v29;
  MIL::Fp16 *v30;
  uint64_t v31;
  uint64_t Data;
  unint64_t v33;
  uint64_t v34;
  int v35;
  float v36;
  MIL::Fp16 *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  float v43;
  unsigned int v44;
  MIL::Fp16 *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  float v51;
  float v52;
  MIL::Fp16 *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  float v59;
  MIL::Fp16 *v60;
  uint64_t v61;
  uint64_t v62;
  std::string::size_type v63;
  std::string::size_type v64;
  unint64_t v65;
  unint64_t v66;
  int v67;
  float v68;
  MIL::Fp16 *v69;
  uint64_t v70;
  std::runtime_error *exception;
  std::string *v72;
  __int128 v73;
  std::string *v74;
  __int128 v75;
  std::string v76;
  std::string v77;
  std::string v78;

  v12 = (*(uint64_t (**)(uint64_t *))(**a4 + 32))(*a4);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 88))(v12);
  switch(v13)
  {
    case 4:
      v14 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(*a4);
      result = std::vector<MIL::Fp16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v16 = 0;
        do
        {
          v17 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v16);
          v78.__r_.__value_.__r.__words[0] = a1;
          v78.__r_.__value_.__l.__size_ = a2;
          v77.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::Int4 const,18446744073709551615ul>::ValueAt(&v78, v16);
          Int = MIL::Int4::GetInt((MIL::Int4 *)&v77);
          Float = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v17));
          v20 = MIL::Fp16::GetFloat((MIL::Fp16 *)(v14 + 2 * v17));
          result = (_QWORD *)MIL::Fp16::FromFloat(v21, Float * (float)((float)Int - v20));
          v22 = *a6;
          *(_WORD *)(*a6 + 2 * v16++) = (_WORD)result;
        }
        while (v16 < (a6[1] - v22) >> 1);
      }
      break;
    case 5:
      Data = MIL::IRTensorValue::GetDataView<float>(*a4);
      result = std::vector<MIL::Fp16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v33 = 0;
        do
        {
          v34 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v33);
          v78.__r_.__value_.__r.__words[0] = a1;
          v78.__r_.__value_.__l.__size_ = a2;
          v77.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::Int4 const,18446744073709551615ul>::ValueAt(&v78, v33);
          v35 = MIL::Int4::GetInt((MIL::Int4 *)&v77);
          v36 = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v34));
          result = (_QWORD *)MIL::Fp16::FromFloat(v37, v36 * (float)((float)v35 - *(float *)(Data + 4 * v34)));
          v38 = *a6;
          *(_WORD *)(*a6 + 2 * v33++) = (_WORD)result;
        }
        while (v33 < (a6[1] - v38) >> 1);
      }
      break;
    case 7:
      v47 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(*a4);
      result = std::vector<MIL::Fp16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v48 = 0;
        do
        {
          v49 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v48);
          v78.__r_.__value_.__r.__words[0] = a1;
          v78.__r_.__value_.__l.__size_ = a2;
          v77.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::Int4 const,18446744073709551615ul>::ValueAt(&v78, v48);
          v50 = MIL::Int4::GetInt((MIL::Int4 *)&v77);
          v51 = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v49));
          v52 = MIL::Bf16::GetFloat((MIL::Bf16 *)(v47 + 2 * v49));
          result = (_QWORD *)MIL::Fp16::FromFloat(v53, v51 * (float)((float)v50 - v52));
          v54 = *a6;
          *(_WORD *)(*a6 + 2 * v48++) = (_WORD)result;
        }
        while (v48 < (a6[1] - v54) >> 1);
      }
      break;
    case 9:
      v55 = MIL::IRTensorValue::GetDataView<signed char>(*a4);
      result = std::vector<MIL::Fp16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v56 = 0;
        do
        {
          v57 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v56);
          v78.__r_.__value_.__r.__words[0] = a1;
          v78.__r_.__value_.__l.__size_ = a2;
          v77.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::Int4 const,18446744073709551615ul>::ValueAt(&v78, v56);
          v58 = MIL::Int4::GetInt((MIL::Int4 *)&v77);
          v59 = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v57));
          result = (_QWORD *)MIL::Fp16::FromFloat(v60, v59 * (float)((float)v58 - (float)*(char *)(v55 + v57)));
          v61 = *a6;
          *(_WORD *)(*a6 + 2 * v56++) = (_WORD)result;
        }
        while (v56 < (a6[1] - v61) >> 1);
      }
      break;
    case 13:
      v23 = MIL::IRTensorValue::GetDataView<MIL::Int4>(*a4);
      v25 = v24;
      result = std::vector<MIL::Fp16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v26 = 0;
        do
        {
          v27 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v26);
          v78.__r_.__value_.__r.__words[0] = a1;
          v78.__r_.__value_.__l.__size_ = a2;
          v77.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::Int4 const,18446744073709551615ul>::ValueAt(&v78, v26);
          v28 = MIL::Int4::GetInt((MIL::Int4 *)&v77);
          v29 = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v27));
          v78.__r_.__value_.__r.__words[0] = v23;
          v78.__r_.__value_.__l.__size_ = v25;
          v77.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::Int4 const,18446744073709551615ul>::ValueAt(&v78, v27);
          v30 = (MIL::Fp16 *)MIL::Int4::GetInt((MIL::Int4 *)&v77);
          result = (_QWORD *)MIL::Fp16::FromFloat(v30, v29 * (float)((float)v28 - (float)(int)v30));
          v31 = *a6;
          *(_WORD *)(*a6 + 2 * v26++) = (_WORD)result;
        }
        while (v26 < (a6[1] - v31) >> 1);
      }
      break;
    case 14:
      v39 = MIL::IRTensorValue::GetDataView<unsigned char>(*a4);
      result = std::vector<MIL::Fp16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v40 = 0;
        do
        {
          v41 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v40);
          v78.__r_.__value_.__r.__words[0] = a1;
          v78.__r_.__value_.__l.__size_ = a2;
          v77.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::Int4 const,18446744073709551615ul>::ValueAt(&v78, v40);
          v42 = MIL::Int4::GetInt((MIL::Int4 *)&v77);
          v43 = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v41));
          LOBYTE(v44) = *(_BYTE *)(v39 + v41);
          result = (_QWORD *)MIL::Fp16::FromFloat(v45, v43 * (float)((float)v42 - (float)v44));
          v46 = *a6;
          *(_WORD *)(*a6 + 2 * v40++) = (_WORD)result;
        }
        while (v40 < (a6[1] - v46) >> 1);
      }
      break;
    case 20:
      v62 = MIL::IRTensorValue::GetDataView<MIL::UInt4>(*a4);
      v64 = v63;
      result = std::vector<MIL::Fp16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v65 = 0;
        do
        {
          v66 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v65);
          v78.__r_.__value_.__r.__words[0] = a1;
          v78.__r_.__value_.__l.__size_ = a2;
          v77.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::Int4 const,18446744073709551615ul>::ValueAt(&v78, v65);
          v67 = MIL::Int4::GetInt((MIL::Int4 *)&v77);
          v68 = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v66));
          v78.__r_.__value_.__r.__words[0] = v62;
          v78.__r_.__value_.__l.__size_ = v64;
          v77.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(&v78, v66);
          v69 = (MIL::Fp16 *)MIL::UInt4::GetInt((MIL::UInt4 *)&v77);
          result = (_QWORD *)MIL::Fp16::FromFloat(v69, v68 * (float)((float)v67 - (float)(int)v69));
          v70 = *a6;
          *(_WORD *)(*a6 + 2 * v65++) = (_WORD)result;
        }
        while (v65 < (a6[1] - v70) >> 1);
      }
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      MIL::IRDataTypeToString(v13, &v76);
      v72 = std::string::insert(&v76, 0, "Unsupported dType (");
      v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
      v77.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v73;
      v72->__r_.__value_.__l.__size_ = 0;
      v72->__r_.__value_.__r.__words[2] = 0;
      v72->__r_.__value_.__r.__words[0] = 0;
      v74 = std::string::append(&v77, ") for offset.");
      v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
      v78.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v75;
      v74->__r_.__value_.__l.__size_ = 0;
      v74->__r_.__value_.__r.__words[2] = 0;
      v74->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v78);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1E096CDC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;

  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v29 & 1) == 0)
LABEL_10:
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v28);
  goto LABEL_10;
}

_QWORD *MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Fp16,signed char>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X4>, unint64_t **a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD *result;
  unint64_t v16;
  uint64_t v17;
  int v18;
  float Float;
  float v20;
  MIL::Fp16 *v21;
  uint64_t v22;
  uint64_t v23;
  std::string::size_type v24;
  std::string::size_type v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  float v29;
  MIL::Fp16 *Int;
  uint64_t v31;
  uint64_t Data;
  unint64_t v33;
  uint64_t v34;
  char v35;
  float v36;
  MIL::Fp16 *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char v42;
  float v43;
  unsigned int v44;
  MIL::Fp16 *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  float v51;
  float v52;
  MIL::Fp16 *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char v58;
  float v59;
  MIL::Fp16 *v60;
  uint64_t v61;
  uint64_t v62;
  std::string::size_type v63;
  std::string::size_type v64;
  unint64_t v65;
  unint64_t v66;
  int v67;
  float v68;
  MIL::Fp16 *v69;
  uint64_t v70;
  std::runtime_error *exception;
  std::string *v72;
  __int128 v73;
  std::string *v74;
  __int128 v75;
  std::string v76;
  std::string v77;
  std::string v78;

  v12 = (*(uint64_t (**)(uint64_t *))(**a4 + 32))(*a4);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 88))(v12);
  switch(v13)
  {
    case 4:
      v14 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(*a4);
      result = std::vector<MIL::Fp16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v16 = 0;
        do
        {
          v17 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v16);
          v18 = *(char *)(a1 + v16);
          Float = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v17));
          v20 = MIL::Fp16::GetFloat((MIL::Fp16 *)(v14 + 2 * v17));
          result = (_QWORD *)MIL::Fp16::FromFloat(v21, Float * (float)((float)v18 - v20));
          v22 = *a6;
          *(_WORD *)(*a6 + 2 * v16++) = (_WORD)result;
        }
        while (v16 < (a6[1] - v22) >> 1);
      }
      break;
    case 5:
      Data = MIL::IRTensorValue::GetDataView<float>(*a4);
      result = std::vector<MIL::Fp16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v33 = 0;
        do
        {
          v34 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v33);
          v35 = *(_BYTE *)(a1 + v33);
          v36 = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v34));
          result = (_QWORD *)MIL::Fp16::FromFloat(v37, v36 * (float)((float)v35 - *(float *)(Data + 4 * v34)));
          v38 = *a6;
          *(_WORD *)(*a6 + 2 * v33++) = (_WORD)result;
        }
        while (v33 < (a6[1] - v38) >> 1);
      }
      break;
    case 7:
      v47 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(*a4);
      result = std::vector<MIL::Fp16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v48 = 0;
        do
        {
          v49 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v48);
          v50 = *(char *)(a1 + v48);
          v51 = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v49));
          v52 = MIL::Bf16::GetFloat((MIL::Bf16 *)(v47 + 2 * v49));
          result = (_QWORD *)MIL::Fp16::FromFloat(v53, v51 * (float)((float)v50 - v52));
          v54 = *a6;
          *(_WORD *)(*a6 + 2 * v48++) = (_WORD)result;
        }
        while (v48 < (a6[1] - v54) >> 1);
      }
      break;
    case 9:
      v55 = MIL::IRTensorValue::GetDataView<signed char>(*a4);
      result = std::vector<MIL::Fp16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v56 = 0;
        do
        {
          v57 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v56);
          v58 = *(_BYTE *)(a1 + v56);
          v59 = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v57));
          result = (_QWORD *)MIL::Fp16::FromFloat(v60, v59 * (float)((float)v58 - (float)*(char *)(v55 + v57)));
          v61 = *a6;
          *(_WORD *)(*a6 + 2 * v56++) = (_WORD)result;
        }
        while (v56 < (a6[1] - v61) >> 1);
      }
      break;
    case 13:
      v23 = MIL::IRTensorValue::GetDataView<MIL::Int4>(*a4);
      v25 = v24;
      result = std::vector<MIL::Fp16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v26 = 0;
        do
        {
          v27 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v26);
          v28 = *(char *)(a1 + v26);
          v29 = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v27));
          v78.__r_.__value_.__r.__words[0] = v23;
          v78.__r_.__value_.__l.__size_ = v25;
          v77.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::Int4 const,18446744073709551615ul>::ValueAt(&v78, v27);
          Int = (MIL::Fp16 *)MIL::Int4::GetInt((MIL::Int4 *)&v77);
          result = (_QWORD *)MIL::Fp16::FromFloat(Int, v29 * (float)((float)v28 - (float)(int)Int));
          v31 = *a6;
          *(_WORD *)(*a6 + 2 * v26++) = (_WORD)result;
        }
        while (v26 < (a6[1] - v31) >> 1);
      }
      break;
    case 14:
      v39 = MIL::IRTensorValue::GetDataView<unsigned char>(*a4);
      result = std::vector<MIL::Fp16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v40 = 0;
        do
        {
          v41 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v40);
          v42 = *(_BYTE *)(a1 + v40);
          v43 = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v41));
          LOBYTE(v44) = *(_BYTE *)(v39 + v41);
          result = (_QWORD *)MIL::Fp16::FromFloat(v45, v43 * (float)((float)v42 - (float)v44));
          v46 = *a6;
          *(_WORD *)(*a6 + 2 * v40++) = (_WORD)result;
        }
        while (v40 < (a6[1] - v46) >> 1);
      }
      break;
    case 20:
      v62 = MIL::IRTensorValue::GetDataView<MIL::UInt4>(*a4);
      v64 = v63;
      result = std::vector<MIL::Fp16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v65 = 0;
        do
        {
          v66 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v65);
          v67 = *(char *)(a1 + v65);
          v68 = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v66));
          v78.__r_.__value_.__r.__words[0] = v62;
          v78.__r_.__value_.__l.__size_ = v64;
          v77.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(&v78, v66);
          v69 = (MIL::Fp16 *)MIL::UInt4::GetInt((MIL::UInt4 *)&v77);
          result = (_QWORD *)MIL::Fp16::FromFloat(v69, v68 * (float)((float)v67 - (float)(int)v69));
          v70 = *a6;
          *(_WORD *)(*a6 + 2 * v65++) = (_WORD)result;
        }
        while (v65 < (a6[1] - v70) >> 1);
      }
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      MIL::IRDataTypeToString(v13, &v76);
      v72 = std::string::insert(&v76, 0, "Unsupported dType (");
      v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
      v77.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v73;
      v72->__r_.__value_.__l.__size_ = 0;
      v72->__r_.__value_.__r.__words[2] = 0;
      v72->__r_.__value_.__r.__words[0] = 0;
      v74 = std::string::append(&v77, ") for offset.");
      v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
      v78.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v75;
      v74->__r_.__value_.__l.__size_ = 0;
      v74->__r_.__value_.__r.__words[2] = 0;
      v74->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v78);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1E096D37C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;

  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v29 & 1) == 0)
LABEL_10:
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v28);
  goto LABEL_10;
}

_QWORD *MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Fp16,unsigned char>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X4>, unint64_t **a5@<X5>, uint64_t *a6@<X8>)
{
  unsigned int v6;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD *result;
  unint64_t v17;
  uint64_t v18;
  float Float;
  float v20;
  MIL::Fp16 *v21;
  uint64_t v22;
  uint64_t v23;
  std::string::size_type v24;
  std::string::size_type v25;
  unint64_t v26;
  unint64_t v27;
  float v28;
  MIL::Fp16 *Int;
  uint64_t v30;
  uint64_t Data;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  float v35;
  MIL::Fp16 *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int v41;
  float v42;
  unsigned int v43;
  MIL::Fp16 *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  float v49;
  float v50;
  MIL::Fp16 *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unsigned int v56;
  float v57;
  MIL::Fp16 *v58;
  uint64_t v59;
  uint64_t v60;
  std::string::size_type v61;
  std::string::size_type v62;
  unint64_t v63;
  unint64_t v64;
  float v65;
  MIL::Fp16 *v66;
  uint64_t v67;
  std::runtime_error *exception;
  std::string *v69;
  __int128 v70;
  std::string *v71;
  __int128 v72;
  std::string v73;
  std::string v74;
  std::string v75;

  v13 = (*(uint64_t (**)(uint64_t *))(**a4 + 32))(*a4);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 88))(v13);
  switch(v14)
  {
    case 4:
      v15 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(*a4);
      result = std::vector<MIL::Fp16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v17 = 0;
        do
        {
          v18 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v17);
          LOBYTE(v6) = *(_BYTE *)(a1 + v17);
          Float = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v18));
          v20 = MIL::Fp16::GetFloat((MIL::Fp16 *)(v15 + 2 * v18));
          result = (_QWORD *)MIL::Fp16::FromFloat(v21, Float * (float)((float)v6 - v20));
          v22 = *a6;
          *(_WORD *)(*a6 + 2 * v17++) = (_WORD)result;
        }
        while (v17 < (a6[1] - v22) >> 1);
      }
      break;
    case 5:
      Data = MIL::IRTensorValue::GetDataView<float>(*a4);
      result = std::vector<MIL::Fp16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v32 = 0;
        do
        {
          v33 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v32);
          v34 = *(unsigned __int8 *)(a1 + v32);
          v35 = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v33));
          result = (_QWORD *)MIL::Fp16::FromFloat(v36, v35 * (float)((float)v34 - *(float *)(Data + 4 * v33)));
          v37 = *a6;
          *(_WORD *)(*a6 + 2 * v32++) = (_WORD)result;
        }
        while (v32 < (a6[1] - v37) >> 1);
      }
      break;
    case 7:
      v46 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(*a4);
      result = std::vector<MIL::Fp16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v47 = 0;
        do
        {
          v48 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v47);
          LOBYTE(v6) = *(_BYTE *)(a1 + v47);
          v49 = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v48));
          v50 = MIL::Bf16::GetFloat((MIL::Bf16 *)(v46 + 2 * v48));
          result = (_QWORD *)MIL::Fp16::FromFloat(v51, v49 * (float)((float)v6 - v50));
          v52 = *a6;
          *(_WORD *)(*a6 + 2 * v47++) = (_WORD)result;
        }
        while (v47 < (a6[1] - v52) >> 1);
      }
      break;
    case 9:
      v53 = MIL::IRTensorValue::GetDataView<signed char>(*a4);
      result = std::vector<MIL::Fp16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v54 = 0;
        do
        {
          v55 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v54);
          v56 = *(unsigned __int8 *)(a1 + v54);
          v57 = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v55));
          result = (_QWORD *)MIL::Fp16::FromFloat(v58, v57 * (float)((float)v56 - (float)*(char *)(v53 + v55)));
          v59 = *a6;
          *(_WORD *)(*a6 + 2 * v54++) = (_WORD)result;
        }
        while (v54 < (a6[1] - v59) >> 1);
      }
      break;
    case 13:
      v23 = MIL::IRTensorValue::GetDataView<MIL::Int4>(*a4);
      v25 = v24;
      result = std::vector<MIL::Fp16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v26 = 0;
        do
        {
          v27 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v26);
          LOBYTE(v6) = *(_BYTE *)(a1 + v26);
          v28 = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v27));
          v75.__r_.__value_.__r.__words[0] = v23;
          v75.__r_.__value_.__l.__size_ = v25;
          v74.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::Int4 const,18446744073709551615ul>::ValueAt(&v75, v27);
          Int = (MIL::Fp16 *)MIL::Int4::GetInt((MIL::Int4 *)&v74);
          result = (_QWORD *)MIL::Fp16::FromFloat(Int, v28 * (float)((float)v6 - (float)(int)Int));
          v30 = *a6;
          *(_WORD *)(*a6 + 2 * v26++) = (_WORD)result;
        }
        while (v26 < (a6[1] - v30) >> 1);
      }
      break;
    case 14:
      v38 = MIL::IRTensorValue::GetDataView<unsigned char>(*a4);
      result = std::vector<MIL::Fp16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v39 = 0;
        do
        {
          v40 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v39);
          v41 = *(unsigned __int8 *)(a1 + v39);
          v42 = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v40));
          LOBYTE(v43) = *(_BYTE *)(v38 + v40);
          result = (_QWORD *)MIL::Fp16::FromFloat(v44, v42 * (float)((float)v41 - (float)v43));
          v45 = *a6;
          *(_WORD *)(*a6 + 2 * v39++) = (_WORD)result;
        }
        while (v39 < (a6[1] - v45) >> 1);
      }
      break;
    case 20:
      v60 = MIL::IRTensorValue::GetDataView<MIL::UInt4>(*a4);
      v62 = v61;
      result = std::vector<MIL::Fp16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v63 = 0;
        do
        {
          v64 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v63);
          LOBYTE(v6) = *(_BYTE *)(a1 + v63);
          v65 = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v64));
          v75.__r_.__value_.__r.__words[0] = v60;
          v75.__r_.__value_.__l.__size_ = v62;
          v74.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(&v75, v64);
          v66 = (MIL::Fp16 *)MIL::UInt4::GetInt((MIL::UInt4 *)&v74);
          result = (_QWORD *)MIL::Fp16::FromFloat(v66, v65 * (float)((float)v6 - (float)(int)v66));
          v67 = *a6;
          *(_WORD *)(*a6 + 2 * v63++) = (_WORD)result;
        }
        while (v63 < (a6[1] - v67) >> 1);
      }
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      MIL::IRDataTypeToString(v14, &v73);
      v69 = std::string::insert(&v73, 0, "Unsupported dType (");
      v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
      v74.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v70;
      v69->__r_.__value_.__l.__size_ = 0;
      v69->__r_.__value_.__r.__words[2] = 0;
      v69->__r_.__value_.__r.__words[0] = 0;
      v71 = std::string::append(&v74, ") for offset.");
      v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
      v75.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v72;
      v71->__r_.__value_.__l.__size_ = 0;
      v71->__r_.__value_.__r.__words[2] = 0;
      v71->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v75);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1E096D920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;

  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v29 & 1) == 0)
LABEL_10:
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v28);
  goto LABEL_10;
}

_QWORD *MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Fp16,MIL::Bf16>@<X0>(MIL::Bf16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X4>, unint64_t **a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD *result;
  unint64_t v16;
  uint64_t v17;
  float Float;
  float v19;
  float v20;
  MIL::Fp16 *v21;
  uint64_t v22;
  uint64_t v23;
  std::string::size_type v24;
  std::string::size_type v25;
  unint64_t v26;
  unint64_t v27;
  float v28;
  float v29;
  MIL::Fp16 *Int;
  uint64_t v31;
  uint64_t Data;
  unint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  MIL::Fp16 *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  float v42;
  float v43;
  unsigned int v44;
  MIL::Fp16 *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  float v50;
  float v51;
  float v52;
  MIL::Fp16 *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  float v58;
  float v59;
  MIL::Fp16 *v60;
  uint64_t v61;
  uint64_t v62;
  std::string::size_type v63;
  std::string::size_type v64;
  unint64_t v65;
  unint64_t v66;
  float v67;
  float v68;
  MIL::Fp16 *v69;
  uint64_t v70;
  std::runtime_error *exception;
  std::string *v72;
  __int128 v73;
  std::string *v74;
  __int128 v75;
  std::string v76;
  std::string v77;
  std::string v78;

  v12 = (*(uint64_t (**)(uint64_t *))(**a4 + 32))(*a4);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 88))(v12);
  switch(v13)
  {
    case 4:
      v14 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(*a4);
      result = std::vector<MIL::Fp16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v16 = 0;
        do
        {
          v17 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v16);
          Float = MIL::Bf16::GetFloat(a1);
          v19 = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v17));
          v20 = MIL::Fp16::GetFloat((MIL::Fp16 *)(v14 + 2 * v17));
          result = (_QWORD *)MIL::Fp16::FromFloat(v21, v19 * (float)(Float - v20));
          v22 = *a6;
          *(_WORD *)(*a6 + 2 * v16++) = (_WORD)result;
          a1 = (MIL::Bf16 *)((char *)a1 + 2);
        }
        while (v16 < (a6[1] - v22) >> 1);
      }
      break;
    case 5:
      Data = MIL::IRTensorValue::GetDataView<float>(*a4);
      result = std::vector<MIL::Fp16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v33 = 0;
        do
        {
          v34 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v33);
          v35 = MIL::Bf16::GetFloat(a1);
          v36 = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v34));
          result = (_QWORD *)MIL::Fp16::FromFloat(v37, v36 * (float)(v35 - *(float *)(Data + 4 * v34)));
          v38 = *a6;
          *(_WORD *)(*a6 + 2 * v33++) = (_WORD)result;
          a1 = (MIL::Bf16 *)((char *)a1 + 2);
        }
        while (v33 < (a6[1] - v38) >> 1);
      }
      break;
    case 7:
      v47 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(*a4);
      result = std::vector<MIL::Fp16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v48 = 0;
        do
        {
          v49 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v48);
          v50 = MIL::Bf16::GetFloat(a1);
          v51 = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v49));
          v52 = MIL::Bf16::GetFloat((MIL::Bf16 *)(v47 + 2 * v49));
          result = (_QWORD *)MIL::Fp16::FromFloat(v53, v51 * (float)(v50 - v52));
          v54 = *a6;
          *(_WORD *)(*a6 + 2 * v48++) = (_WORD)result;
          a1 = (MIL::Bf16 *)((char *)a1 + 2);
        }
        while (v48 < (a6[1] - v54) >> 1);
      }
      break;
    case 9:
      v55 = MIL::IRTensorValue::GetDataView<signed char>(*a4);
      result = std::vector<MIL::Fp16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v56 = 0;
        do
        {
          v57 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v56);
          v58 = MIL::Bf16::GetFloat(a1);
          v59 = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v57));
          result = (_QWORD *)MIL::Fp16::FromFloat(v60, v59 * (float)(v58 - (float)*(char *)(v55 + v57)));
          v61 = *a6;
          *(_WORD *)(*a6 + 2 * v56++) = (_WORD)result;
          a1 = (MIL::Bf16 *)((char *)a1 + 2);
        }
        while (v56 < (a6[1] - v61) >> 1);
      }
      break;
    case 13:
      v23 = MIL::IRTensorValue::GetDataView<MIL::Int4>(*a4);
      v25 = v24;
      result = std::vector<MIL::Fp16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v26 = 0;
        do
        {
          v27 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v26);
          v28 = MIL::Bf16::GetFloat(a1);
          v29 = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v27));
          v78.__r_.__value_.__r.__words[0] = v23;
          v78.__r_.__value_.__l.__size_ = v25;
          v77.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::Int4 const,18446744073709551615ul>::ValueAt(&v78, v27);
          Int = (MIL::Fp16 *)MIL::Int4::GetInt((MIL::Int4 *)&v77);
          result = (_QWORD *)MIL::Fp16::FromFloat(Int, v29 * (float)(v28 - (float)(int)Int));
          v31 = *a6;
          *(_WORD *)(*a6 + 2 * v26++) = (_WORD)result;
          a1 = (MIL::Bf16 *)((char *)a1 + 2);
        }
        while (v26 < (a6[1] - v31) >> 1);
      }
      break;
    case 14:
      v39 = MIL::IRTensorValue::GetDataView<unsigned char>(*a4);
      result = std::vector<MIL::Fp16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v40 = 0;
        do
        {
          v41 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v40);
          v42 = MIL::Bf16::GetFloat(a1);
          v43 = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v41));
          LOBYTE(v44) = *(_BYTE *)(v39 + v41);
          result = (_QWORD *)MIL::Fp16::FromFloat(v45, v43 * (float)(v42 - (float)v44));
          v46 = *a6;
          *(_WORD *)(*a6 + 2 * v40++) = (_WORD)result;
          a1 = (MIL::Bf16 *)((char *)a1 + 2);
        }
        while (v40 < (a6[1] - v46) >> 1);
      }
      break;
    case 20:
      v62 = MIL::IRTensorValue::GetDataView<MIL::UInt4>(*a4);
      v64 = v63;
      result = std::vector<MIL::Fp16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v65 = 0;
        do
        {
          v66 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v65);
          v67 = MIL::Bf16::GetFloat(a1);
          v68 = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v66));
          v78.__r_.__value_.__r.__words[0] = v62;
          v78.__r_.__value_.__l.__size_ = v64;
          v77.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(&v78, v66);
          v69 = (MIL::Fp16 *)MIL::UInt4::GetInt((MIL::UInt4 *)&v77);
          result = (_QWORD *)MIL::Fp16::FromFloat(v69, v68 * (float)(v67 - (float)(int)v69));
          v70 = *a6;
          *(_WORD *)(*a6 + 2 * v65++) = (_WORD)result;
          a1 = (MIL::Bf16 *)((char *)a1 + 2);
        }
        while (v65 < (a6[1] - v70) >> 1);
      }
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      MIL::IRDataTypeToString(v13, &v76);
      v72 = std::string::insert(&v76, 0, "Unsupported dType (");
      v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
      v77.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v73;
      v72->__r_.__value_.__l.__size_ = 0;
      v72->__r_.__value_.__r.__words[2] = 0;
      v72->__r_.__value_.__r.__words[0] = 0;
      v74 = std::string::append(&v77, ") for offset.");
      v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
      v78.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v75;
      v74->__r_.__value_.__l.__size_ = 0;
      v74->__r_.__value_.__r.__words[2] = 0;
      v74->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v78);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1E096DEFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;

  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v29 & 1) == 0)
LABEL_10:
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v28);
  goto LABEL_10;
}

_QWORD *MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Fp16,MIL::Fp16>@<X0>(MIL::Fp16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X4>, unint64_t **a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD *result;
  unint64_t v16;
  uint64_t v17;
  float Float;
  float v19;
  float v20;
  MIL::Fp16 *v21;
  uint64_t v22;
  uint64_t v23;
  std::string::size_type v24;
  std::string::size_type v25;
  unint64_t v26;
  unint64_t v27;
  float v28;
  float v29;
  MIL::Fp16 *Int;
  uint64_t v31;
  uint64_t Data;
  unint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  MIL::Fp16 *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  float v42;
  float v43;
  unsigned int v44;
  MIL::Fp16 *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  float v50;
  float v51;
  float v52;
  MIL::Fp16 *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  float v58;
  float v59;
  MIL::Fp16 *v60;
  uint64_t v61;
  uint64_t v62;
  std::string::size_type v63;
  std::string::size_type v64;
  unint64_t v65;
  unint64_t v66;
  float v67;
  float v68;
  MIL::Fp16 *v69;
  uint64_t v70;
  std::runtime_error *exception;
  std::string *v72;
  __int128 v73;
  std::string *v74;
  __int128 v75;
  std::string v76;
  std::string v77;
  std::string v78;

  v12 = (*(uint64_t (**)(uint64_t *))(**a4 + 32))(*a4);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 88))(v12);
  switch(v13)
  {
    case 4:
      v14 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(*a4);
      result = std::vector<MIL::Fp16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v16 = 0;
        do
        {
          v17 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v16);
          Float = MIL::Fp16::GetFloat(a1);
          v19 = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v17));
          v20 = MIL::Fp16::GetFloat((MIL::Fp16 *)(v14 + 2 * v17));
          result = (_QWORD *)MIL::Fp16::FromFloat(v21, v19 * (float)(Float - v20));
          v22 = *a6;
          *(_WORD *)(*a6 + 2 * v16++) = (_WORD)result;
          a1 = (MIL::Fp16 *)((char *)a1 + 2);
        }
        while (v16 < (a6[1] - v22) >> 1);
      }
      break;
    case 5:
      Data = MIL::IRTensorValue::GetDataView<float>(*a4);
      result = std::vector<MIL::Fp16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v33 = 0;
        do
        {
          v34 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v33);
          v35 = MIL::Fp16::GetFloat(a1);
          v36 = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v34));
          result = (_QWORD *)MIL::Fp16::FromFloat(v37, v36 * (float)(v35 - *(float *)(Data + 4 * v34)));
          v38 = *a6;
          *(_WORD *)(*a6 + 2 * v33++) = (_WORD)result;
          a1 = (MIL::Fp16 *)((char *)a1 + 2);
        }
        while (v33 < (a6[1] - v38) >> 1);
      }
      break;
    case 7:
      v47 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(*a4);
      result = std::vector<MIL::Fp16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v48 = 0;
        do
        {
          v49 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v48);
          v50 = MIL::Fp16::GetFloat(a1);
          v51 = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v49));
          v52 = MIL::Bf16::GetFloat((MIL::Bf16 *)(v47 + 2 * v49));
          result = (_QWORD *)MIL::Fp16::FromFloat(v53, v51 * (float)(v50 - v52));
          v54 = *a6;
          *(_WORD *)(*a6 + 2 * v48++) = (_WORD)result;
          a1 = (MIL::Fp16 *)((char *)a1 + 2);
        }
        while (v48 < (a6[1] - v54) >> 1);
      }
      break;
    case 9:
      v55 = MIL::IRTensorValue::GetDataView<signed char>(*a4);
      result = std::vector<MIL::Fp16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v56 = 0;
        do
        {
          v57 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v56);
          v58 = MIL::Fp16::GetFloat(a1);
          v59 = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v57));
          result = (_QWORD *)MIL::Fp16::FromFloat(v60, v59 * (float)(v58 - (float)*(char *)(v55 + v57)));
          v61 = *a6;
          *(_WORD *)(*a6 + 2 * v56++) = (_WORD)result;
          a1 = (MIL::Fp16 *)((char *)a1 + 2);
        }
        while (v56 < (a6[1] - v61) >> 1);
      }
      break;
    case 13:
      v23 = MIL::IRTensorValue::GetDataView<MIL::Int4>(*a4);
      v25 = v24;
      result = std::vector<MIL::Fp16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v26 = 0;
        do
        {
          v27 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v26);
          v28 = MIL::Fp16::GetFloat(a1);
          v29 = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v27));
          v78.__r_.__value_.__r.__words[0] = v23;
          v78.__r_.__value_.__l.__size_ = v25;
          v77.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::Int4 const,18446744073709551615ul>::ValueAt(&v78, v27);
          Int = (MIL::Fp16 *)MIL::Int4::GetInt((MIL::Int4 *)&v77);
          result = (_QWORD *)MIL::Fp16::FromFloat(Int, v29 * (float)(v28 - (float)(int)Int));
          v31 = *a6;
          *(_WORD *)(*a6 + 2 * v26++) = (_WORD)result;
          a1 = (MIL::Fp16 *)((char *)a1 + 2);
        }
        while (v26 < (a6[1] - v31) >> 1);
      }
      break;
    case 14:
      v39 = MIL::IRTensorValue::GetDataView<unsigned char>(*a4);
      result = std::vector<MIL::Fp16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v40 = 0;
        do
        {
          v41 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v40);
          v42 = MIL::Fp16::GetFloat(a1);
          v43 = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v41));
          LOBYTE(v44) = *(_BYTE *)(v39 + v41);
          result = (_QWORD *)MIL::Fp16::FromFloat(v45, v43 * (float)(v42 - (float)v44));
          v46 = *a6;
          *(_WORD *)(*a6 + 2 * v40++) = (_WORD)result;
          a1 = (MIL::Fp16 *)((char *)a1 + 2);
        }
        while (v40 < (a6[1] - v46) >> 1);
      }
      break;
    case 20:
      v62 = MIL::IRTensorValue::GetDataView<MIL::UInt4>(*a4);
      v64 = v63;
      result = std::vector<MIL::Fp16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v65 = 0;
        do
        {
          v66 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v65);
          v67 = MIL::Fp16::GetFloat(a1);
          v68 = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v66));
          v78.__r_.__value_.__r.__words[0] = v62;
          v78.__r_.__value_.__l.__size_ = v64;
          v77.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(&v78, v66);
          v69 = (MIL::Fp16 *)MIL::UInt4::GetInt((MIL::UInt4 *)&v77);
          result = (_QWORD *)MIL::Fp16::FromFloat(v69, v68 * (float)(v67 - (float)(int)v69));
          v70 = *a6;
          *(_WORD *)(*a6 + 2 * v65++) = (_WORD)result;
          a1 = (MIL::Fp16 *)((char *)a1 + 2);
        }
        while (v65 < (a6[1] - v70) >> 1);
      }
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      MIL::IRDataTypeToString(v13, &v76);
      v72 = std::string::insert(&v76, 0, "Unsupported dType (");
      v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
      v77.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v73;
      v72->__r_.__value_.__l.__size_ = 0;
      v72->__r_.__value_.__r.__words[2] = 0;
      v72->__r_.__value_.__r.__words[0] = 0;
      v74 = std::string::append(&v77, ") for offset.");
      v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
      v78.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v75;
      v74->__r_.__value_.__l.__size_ = 0;
      v74->__r_.__value_.__r.__words[2] = 0;
      v74->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v78);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1E096E4D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;

  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v29 & 1) == 0)
LABEL_10:
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v28);
  goto LABEL_10;
}

_QWORD *MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Fp16,float>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X4>, unint64_t **a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD *result;
  unint64_t v16;
  uint64_t v17;
  float v18;
  float Float;
  float v20;
  MIL::Fp16 *v21;
  uint64_t v22;
  uint64_t v23;
  std::string::size_type v24;
  std::string::size_type v25;
  unint64_t v26;
  unint64_t v27;
  float v28;
  float v29;
  MIL::Fp16 *Int;
  uint64_t v31;
  uint64_t Data;
  unint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  MIL::Fp16 *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  float v42;
  float v43;
  unsigned int v44;
  MIL::Fp16 *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  float v50;
  float v51;
  float v52;
  MIL::Fp16 *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  float v58;
  float v59;
  MIL::Fp16 *v60;
  uint64_t v61;
  uint64_t v62;
  std::string::size_type v63;
  std::string::size_type v64;
  unint64_t v65;
  unint64_t v66;
  float v67;
  float v68;
  MIL::Fp16 *v69;
  uint64_t v70;
  std::runtime_error *exception;
  std::string *v72;
  __int128 v73;
  std::string *v74;
  __int128 v75;
  std::string v76;
  std::string v77;
  std::string v78;

  v12 = (*(uint64_t (**)(uint64_t *))(**a4 + 32))(*a4);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 88))(v12);
  switch(v13)
  {
    case 4:
      v14 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(*a4);
      result = std::vector<MIL::Fp16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v16 = 0;
        do
        {
          v17 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v16);
          v18 = *(float *)(a1 + 4 * v16);
          Float = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v17));
          v20 = MIL::Fp16::GetFloat((MIL::Fp16 *)(v14 + 2 * v17));
          result = (_QWORD *)MIL::Fp16::FromFloat(v21, Float * (float)(v18 - v20));
          v22 = *a6;
          *(_WORD *)(*a6 + 2 * v16++) = (_WORD)result;
        }
        while (v16 < (a6[1] - v22) >> 1);
      }
      break;
    case 5:
      Data = MIL::IRTensorValue::GetDataView<float>(*a4);
      result = std::vector<MIL::Fp16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v33 = 0;
        do
        {
          v34 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v33);
          v35 = *(float *)(a1 + 4 * v33);
          v36 = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v34));
          result = (_QWORD *)MIL::Fp16::FromFloat(v37, v36 * (float)(v35 - *(float *)(Data + 4 * v34)));
          v38 = *a6;
          *(_WORD *)(*a6 + 2 * v33++) = (_WORD)result;
        }
        while (v33 < (a6[1] - v38) >> 1);
      }
      break;
    case 7:
      v47 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(*a4);
      result = std::vector<MIL::Fp16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v48 = 0;
        do
        {
          v49 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v48);
          v50 = *(float *)(a1 + 4 * v48);
          v51 = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v49));
          v52 = MIL::Bf16::GetFloat((MIL::Bf16 *)(v47 + 2 * v49));
          result = (_QWORD *)MIL::Fp16::FromFloat(v53, v51 * (float)(v50 - v52));
          v54 = *a6;
          *(_WORD *)(*a6 + 2 * v48++) = (_WORD)result;
        }
        while (v48 < (a6[1] - v54) >> 1);
      }
      break;
    case 9:
      v55 = MIL::IRTensorValue::GetDataView<signed char>(*a4);
      result = std::vector<MIL::Fp16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v56 = 0;
        do
        {
          v57 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v56);
          v58 = *(float *)(a1 + 4 * v56);
          v59 = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v57));
          result = (_QWORD *)MIL::Fp16::FromFloat(v60, v59 * (float)(v58 - (float)*(char *)(v55 + v57)));
          v61 = *a6;
          *(_WORD *)(*a6 + 2 * v56++) = (_WORD)result;
        }
        while (v56 < (a6[1] - v61) >> 1);
      }
      break;
    case 13:
      v23 = MIL::IRTensorValue::GetDataView<MIL::Int4>(*a4);
      v25 = v24;
      result = std::vector<MIL::Fp16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v26 = 0;
        do
        {
          v27 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v26);
          v28 = *(float *)(a1 + 4 * v26);
          v29 = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v27));
          v78.__r_.__value_.__r.__words[0] = v23;
          v78.__r_.__value_.__l.__size_ = v25;
          v77.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::Int4 const,18446744073709551615ul>::ValueAt(&v78, v27);
          Int = (MIL::Fp16 *)MIL::Int4::GetInt((MIL::Int4 *)&v77);
          result = (_QWORD *)MIL::Fp16::FromFloat(Int, v29 * (float)(v28 - (float)(int)Int));
          v31 = *a6;
          *(_WORD *)(*a6 + 2 * v26++) = (_WORD)result;
        }
        while (v26 < (a6[1] - v31) >> 1);
      }
      break;
    case 14:
      v39 = MIL::IRTensorValue::GetDataView<unsigned char>(*a4);
      result = std::vector<MIL::Fp16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v40 = 0;
        do
        {
          v41 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v40);
          v42 = *(float *)(a1 + 4 * v40);
          v43 = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v41));
          LOBYTE(v44) = *(_BYTE *)(v39 + v41);
          result = (_QWORD *)MIL::Fp16::FromFloat(v45, v43 * (float)(v42 - (float)v44));
          v46 = *a6;
          *(_WORD *)(*a6 + 2 * v40++) = (_WORD)result;
        }
        while (v40 < (a6[1] - v46) >> 1);
      }
      break;
    case 20:
      v62 = MIL::IRTensorValue::GetDataView<MIL::UInt4>(*a4);
      v64 = v63;
      result = std::vector<MIL::Fp16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v65 = 0;
        do
        {
          v66 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v65);
          v67 = *(float *)(a1 + 4 * v65);
          v68 = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v66));
          v78.__r_.__value_.__r.__words[0] = v62;
          v78.__r_.__value_.__l.__size_ = v64;
          v77.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(&v78, v66);
          v69 = (MIL::Fp16 *)MIL::UInt4::GetInt((MIL::UInt4 *)&v77);
          result = (_QWORD *)MIL::Fp16::FromFloat(v69, v68 * (float)(v67 - (float)(int)v69));
          v70 = *a6;
          *(_WORD *)(*a6 + 2 * v65++) = (_WORD)result;
        }
        while (v65 < (a6[1] - v70) >> 1);
      }
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      MIL::IRDataTypeToString(v13, &v76);
      v72 = std::string::insert(&v76, 0, "Unsupported dType (");
      v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
      v77.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v73;
      v72->__r_.__value_.__l.__size_ = 0;
      v72->__r_.__value_.__r.__words[2] = 0;
      v72->__r_.__value_.__r.__words[0] = 0;
      v74 = std::string::append(&v77, ") for offset.");
      v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
      v78.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v75;
      v74->__r_.__value_.__l.__size_ = 0;
      v74->__r_.__value_.__r.__words[2] = 0;
      v74->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v78);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1E096EA60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;

  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v29 & 1) == 0)
LABEL_10:
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v28);
  goto LABEL_10;
}

_QWORD *MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Fp16,MIL::UInt4>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t **a4@<X4>, uint64_t *a5@<X8>)
{
  _QWORD *result;
  unint64_t v11;
  uint64_t v12;
  int Int;
  float Float;
  MIL::Fp16 *v15;
  uint64_t v16;
  char v17;
  _QWORD v18[2];

  result = std::vector<MIL::Fp16>::vector(a5, a2);
  if (a5[1] != *a5)
  {
    v11 = 0;
    do
    {
      v12 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a4, v11);
      v18[0] = a1;
      v18[1] = a2;
      v17 = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(v18, v11);
      Int = MIL::UInt4::GetInt((MIL::UInt4 *)&v17);
      Float = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v12));
      result = (_QWORD *)MIL::Fp16::FromFloat(v15, Float * (float)Int);
      v16 = *a5;
      *(_WORD *)(*a5 + 2 * v11++) = (_WORD)result;
    }
    while (v11 < (a5[1] - v16) >> 1);
  }
  return result;
}

void sub_1E096EBEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Fp16,MIL::Int4>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t **a4@<X4>, uint64_t *a5@<X8>)
{
  _QWORD *result;
  unint64_t v11;
  uint64_t v12;
  int Int;
  float Float;
  MIL::Fp16 *v15;
  uint64_t v16;
  char v17;
  _QWORD v18[2];

  result = std::vector<MIL::Fp16>::vector(a5, a2);
  if (a5[1] != *a5)
  {
    v11 = 0;
    do
    {
      v12 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a4, v11);
      v18[0] = a1;
      v18[1] = a2;
      v17 = MIL::Util::Span<MIL::Int4 const,18446744073709551615ul>::ValueAt(v18, v11);
      Int = MIL::Int4::GetInt((MIL::Int4 *)&v17);
      Float = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v12));
      result = (_QWORD *)MIL::Fp16::FromFloat(v15, Float * (float)Int);
      v16 = *a5;
      *(_WORD *)(*a5 + 2 * v11++) = (_WORD)result;
    }
    while (v11 < (a5[1] - v16) >> 1);
  }
  return result;
}

void sub_1E096ECD0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Fp16,signed char>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t **a4@<X4>, uint64_t *a5@<X8>)
{
  _QWORD *result;
  unint64_t v10;
  uint64_t v11;
  char v12;
  float Float;
  MIL::Fp16 *v14;
  uint64_t v15;
  uint64_t v16;

  result = std::vector<MIL::Fp16>::vector(a5, a2);
  if (a5[1] != *a5)
  {
    v10 = 0;
    do
    {
      v11 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a4, v10);
      v12 = *(_BYTE *)(a1 + v10);
      Float = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v11));
      result = (_QWORD *)MIL::Fp16::FromFloat(v14, Float * (float)v12);
      v15 = *a5;
      v16 = a5[1];
      *(_WORD *)(*a5 + 2 * v10++) = (_WORD)result;
    }
    while (v10 < (v16 - v15) >> 1);
  }
  return result;
}

void sub_1E096ED80(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Fp16,unsigned char>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t **a4@<X4>, uint64_t *a5@<X8>)
{
  _QWORD *result;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  float Float;
  MIL::Fp16 *v14;
  uint64_t v15;
  uint64_t v16;

  result = std::vector<MIL::Fp16>::vector(a5, a2);
  if (a5[1] != *a5)
  {
    v10 = 0;
    do
    {
      v11 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a4, v10);
      v12 = *(unsigned __int8 *)(a1 + v10);
      Float = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v11));
      result = (_QWORD *)MIL::Fp16::FromFloat(v14, Float * (float)v12);
      v15 = *a5;
      v16 = a5[1];
      *(_WORD *)(*a5 + 2 * v10++) = (_WORD)result;
    }
    while (v10 < (v16 - v15) >> 1);
  }
  return result;
}

void sub_1E096EE2C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Fp16,MIL::Bf16>@<X0>(MIL::Bf16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t **a4@<X4>, uint64_t *a5@<X8>)
{
  _QWORD *result;
  unint64_t v10;
  uint64_t v11;
  float Float;
  float v13;
  MIL::Fp16 *v14;
  uint64_t v15;
  uint64_t v16;

  result = std::vector<MIL::Fp16>::vector(a5, a2);
  if (a5[1] != *a5)
  {
    v10 = 0;
    do
    {
      v11 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a4, v10);
      Float = MIL::Bf16::GetFloat(a1);
      v13 = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v11));
      result = (_QWORD *)MIL::Fp16::FromFloat(v14, Float * v13);
      v15 = *a5;
      v16 = a5[1];
      *(_WORD *)(*a5 + 2 * v10++) = (_WORD)result;
      a1 = (MIL::Bf16 *)((char *)a1 + 2);
    }
    while (v10 < (v16 - v15) >> 1);
  }
  return result;
}

void sub_1E096EEEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Fp16,MIL::Fp16>@<X0>(MIL::Fp16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t **a4@<X4>, uint64_t *a5@<X8>)
{
  _QWORD *result;
  unint64_t v10;
  uint64_t v11;
  float Float;
  float v13;
  MIL::Fp16 *v14;
  uint64_t v15;
  uint64_t v16;

  result = std::vector<MIL::Fp16>::vector(a5, a2);
  if (a5[1] != *a5)
  {
    v10 = 0;
    do
    {
      v11 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a4, v10);
      Float = MIL::Fp16::GetFloat(a1);
      v13 = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v11));
      result = (_QWORD *)MIL::Fp16::FromFloat(v14, Float * v13);
      v15 = *a5;
      v16 = a5[1];
      *(_WORD *)(*a5 + 2 * v10++) = (_WORD)result;
      a1 = (MIL::Fp16 *)((char *)a1 + 2);
    }
    while (v10 < (v16 - v15) >> 1);
  }
  return result;
}

void sub_1E096EFAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Fp16,float>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t **a4@<X4>, uint64_t *a5@<X8>)
{
  _QWORD *result;
  unint64_t v10;
  uint64_t v11;
  float v12;
  float Float;
  MIL::Fp16 *v14;
  uint64_t v15;
  uint64_t v16;

  result = std::vector<MIL::Fp16>::vector(a5, a2);
  if (a5[1] != *a5)
  {
    v10 = 0;
    do
    {
      v11 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a4, v10);
      v12 = *(float *)(a1 + 4 * v10);
      Float = MIL::Fp16::GetFloat((MIL::Fp16 *)(a3 + 2 * v11));
      result = (_QWORD *)MIL::Fp16::FromFloat(v14, v12 * Float);
      v15 = *a5;
      v16 = a5[1];
      *(_WORD *)(*a5 + 2 * v10++) = (_WORD)result;
    }
    while (v10 < (v16 - v15) >> 1);
  }
  return result;
}

void sub_1E096F05C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<float,MIL::UInt4>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X4>, unint64_t **a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int Int;
  float v18;
  float Float;
  uint64_t v20;
  uint64_t v21;
  std::string::size_type v22;
  std::string::size_type v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  float v27;
  int v28;
  uint64_t v29;
  uint64_t Data;
  unint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  float v45;
  float v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  std::string::size_type v54;
  std::string::size_type v55;
  unint64_t v56;
  unint64_t v57;
  int v58;
  float v59;
  int v60;
  uint64_t v61;
  std::runtime_error *exception;
  std::string *v63;
  __int128 v64;
  std::string *v65;
  __int128 v66;
  std::string v67;
  std::string v68;
  std::string v69;

  v12 = (*(uint64_t (**)(uint64_t *))(**a4 + 32))(*a4);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 88))(v12);
  switch(v13)
  {
    case 4:
      v14 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(*a4);
      std::vector<float>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v15 = 0;
        do
        {
          v16 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v15);
          v69.__r_.__value_.__r.__words[0] = a1;
          v69.__r_.__value_.__l.__size_ = a2;
          v68.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(&v69, v15);
          Int = MIL::UInt4::GetInt((MIL::UInt4 *)&v68);
          v18 = *(float *)(a3 + 4 * v16);
          Float = MIL::Fp16::GetFloat((MIL::Fp16 *)(v14 + 2 * v16));
          v20 = *a6;
          *(float *)(*a6 + 4 * v15++) = v18 * (float)((float)Int - Float);
        }
        while (v15 < (a6[1] - v20) >> 2);
      }
      break;
    case 5:
      Data = MIL::IRTensorValue::GetDataView<float>(*a4);
      std::vector<float>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v31 = 0;
        do
        {
          v32 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v31);
          v69.__r_.__value_.__r.__words[0] = a1;
          v69.__r_.__value_.__l.__size_ = a2;
          v68.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(&v69, v31);
          v33 = MIL::UInt4::GetInt((MIL::UInt4 *)&v68);
          v34 = *a6;
          *(float *)(*a6 + 4 * v31++) = *(float *)(a3 + 4 * v32) * (float)((float)v33 - *(float *)(Data + 4 * v32));
        }
        while (v31 < (a6[1] - v34) >> 2);
      }
      break;
    case 7:
      v41 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(*a4);
      std::vector<float>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v42 = 0;
        do
        {
          v43 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v42);
          v69.__r_.__value_.__r.__words[0] = a1;
          v69.__r_.__value_.__l.__size_ = a2;
          v68.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(&v69, v42);
          v44 = MIL::UInt4::GetInt((MIL::UInt4 *)&v68);
          v45 = *(float *)(a3 + 4 * v43);
          v46 = MIL::Bf16::GetFloat((MIL::Bf16 *)(v41 + 2 * v43));
          v47 = *a6;
          *(float *)(*a6 + 4 * v42++) = v45 * (float)((float)v44 - v46);
        }
        while (v42 < (a6[1] - v47) >> 2);
      }
      break;
    case 9:
      v48 = MIL::IRTensorValue::GetDataView<signed char>(*a4);
      std::vector<float>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v49 = 0;
        do
        {
          v50 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v49);
          v69.__r_.__value_.__r.__words[0] = a1;
          v69.__r_.__value_.__l.__size_ = a2;
          v68.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(&v69, v49);
          v51 = MIL::UInt4::GetInt((MIL::UInt4 *)&v68);
          v52 = *a6;
          *(float *)(*a6 + 4 * v49++) = *(float *)(a3 + 4 * v50) * (float)((float)v51 - (float)*(char *)(v48 + v50));
        }
        while (v49 < (a6[1] - v52) >> 2);
      }
      break;
    case 13:
      v21 = MIL::IRTensorValue::GetDataView<MIL::Int4>(*a4);
      v23 = v22;
      std::vector<float>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v24 = 0;
        do
        {
          v25 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v24);
          v69.__r_.__value_.__r.__words[0] = a1;
          v69.__r_.__value_.__l.__size_ = a2;
          v68.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(&v69, v24);
          v26 = MIL::UInt4::GetInt((MIL::UInt4 *)&v68);
          v27 = *(float *)(a3 + 4 * v25);
          v69.__r_.__value_.__r.__words[0] = v21;
          v69.__r_.__value_.__l.__size_ = v23;
          v68.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::Int4 const,18446744073709551615ul>::ValueAt(&v69, v25);
          v28 = MIL::Int4::GetInt((MIL::Int4 *)&v68);
          v29 = *a6;
          *(float *)(*a6 + 4 * v24++) = v27 * (float)((float)v26 - (float)v28);
        }
        while (v24 < (a6[1] - v29) >> 2);
      }
      break;
    case 14:
      v35 = MIL::IRTensorValue::GetDataView<unsigned char>(*a4);
      std::vector<float>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v36 = 0;
        do
        {
          v37 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v36);
          v69.__r_.__value_.__r.__words[0] = a1;
          v69.__r_.__value_.__l.__size_ = a2;
          v68.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(&v69, v36);
          v38 = MIL::UInt4::GetInt((MIL::UInt4 *)&v68);
          LOBYTE(v39) = *(_BYTE *)(v35 + v37);
          v40 = *a6;
          *(float *)(*a6 + 4 * v36++) = *(float *)(a3 + 4 * v37) * (float)((float)v38 - (float)v39);
        }
        while (v36 < (a6[1] - v40) >> 2);
      }
      break;
    case 20:
      v53 = MIL::IRTensorValue::GetDataView<MIL::UInt4>(*a4);
      v55 = v54;
      std::vector<float>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v56 = 0;
        do
        {
          v57 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v56);
          v69.__r_.__value_.__r.__words[0] = a1;
          v69.__r_.__value_.__l.__size_ = a2;
          v68.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(&v69, v56);
          v58 = MIL::UInt4::GetInt((MIL::UInt4 *)&v68);
          v59 = *(float *)(a3 + 4 * v57);
          v69.__r_.__value_.__r.__words[0] = v53;
          v69.__r_.__value_.__l.__size_ = v55;
          v68.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(&v69, v57);
          v60 = MIL::UInt4::GetInt((MIL::UInt4 *)&v68);
          v61 = *a6;
          *(float *)(*a6 + 4 * v56++) = v59 * (float)((float)v58 - (float)v60);
        }
        while (v56 < (a6[1] - v61) >> 2);
      }
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      MIL::IRDataTypeToString(v13, &v67);
      v63 = std::string::insert(&v67, 0, "Unsupported dType (");
      v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
      v68.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v64;
      v63->__r_.__value_.__l.__size_ = 0;
      v63->__r_.__value_.__r.__words[2] = 0;
      v63->__r_.__value_.__r.__words[0] = 0;
      v65 = std::string::append(&v68, ") for offset.");
      v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
      v69.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v66;
      v65->__r_.__value_.__l.__size_ = 0;
      v65->__r_.__value_.__r.__words[2] = 0;
      v65->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v69);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
}

void sub_1E096F5D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;

  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v29 & 1) == 0)
LABEL_10:
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v28);
  goto LABEL_10;
}

void MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<float,MIL::Int4>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X4>, unint64_t **a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int Int;
  float v18;
  float Float;
  uint64_t v20;
  uint64_t v21;
  std::string::size_type v22;
  std::string::size_type v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  float v27;
  int v28;
  uint64_t v29;
  uint64_t Data;
  unint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  float v45;
  float v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  std::string::size_type v54;
  std::string::size_type v55;
  unint64_t v56;
  unint64_t v57;
  int v58;
  float v59;
  int v60;
  uint64_t v61;
  std::runtime_error *exception;
  std::string *v63;
  __int128 v64;
  std::string *v65;
  __int128 v66;
  std::string v67;
  std::string v68;
  std::string v69;

  v12 = (*(uint64_t (**)(uint64_t *))(**a4 + 32))(*a4);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 88))(v12);
  switch(v13)
  {
    case 4:
      v14 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(*a4);
      std::vector<float>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v15 = 0;
        do
        {
          v16 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v15);
          v69.__r_.__value_.__r.__words[0] = a1;
          v69.__r_.__value_.__l.__size_ = a2;
          v68.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::Int4 const,18446744073709551615ul>::ValueAt(&v69, v15);
          Int = MIL::Int4::GetInt((MIL::Int4 *)&v68);
          v18 = *(float *)(a3 + 4 * v16);
          Float = MIL::Fp16::GetFloat((MIL::Fp16 *)(v14 + 2 * v16));
          v20 = *a6;
          *(float *)(*a6 + 4 * v15++) = v18 * (float)((float)Int - Float);
        }
        while (v15 < (a6[1] - v20) >> 2);
      }
      break;
    case 5:
      Data = MIL::IRTensorValue::GetDataView<float>(*a4);
      std::vector<float>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v31 = 0;
        do
        {
          v32 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v31);
          v69.__r_.__value_.__r.__words[0] = a1;
          v69.__r_.__value_.__l.__size_ = a2;
          v68.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::Int4 const,18446744073709551615ul>::ValueAt(&v69, v31);
          v33 = MIL::Int4::GetInt((MIL::Int4 *)&v68);
          v34 = *a6;
          *(float *)(*a6 + 4 * v31++) = *(float *)(a3 + 4 * v32) * (float)((float)v33 - *(float *)(Data + 4 * v32));
        }
        while (v31 < (a6[1] - v34) >> 2);
      }
      break;
    case 7:
      v41 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(*a4);
      std::vector<float>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v42 = 0;
        do
        {
          v43 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v42);
          v69.__r_.__value_.__r.__words[0] = a1;
          v69.__r_.__value_.__l.__size_ = a2;
          v68.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::Int4 const,18446744073709551615ul>::ValueAt(&v69, v42);
          v44 = MIL::Int4::GetInt((MIL::Int4 *)&v68);
          v45 = *(float *)(a3 + 4 * v43);
          v46 = MIL::Bf16::GetFloat((MIL::Bf16 *)(v41 + 2 * v43));
          v47 = *a6;
          *(float *)(*a6 + 4 * v42++) = v45 * (float)((float)v44 - v46);
        }
        while (v42 < (a6[1] - v47) >> 2);
      }
      break;
    case 9:
      v48 = MIL::IRTensorValue::GetDataView<signed char>(*a4);
      std::vector<float>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v49 = 0;
        do
        {
          v50 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v49);
          v69.__r_.__value_.__r.__words[0] = a1;
          v69.__r_.__value_.__l.__size_ = a2;
          v68.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::Int4 const,18446744073709551615ul>::ValueAt(&v69, v49);
          v51 = MIL::Int4::GetInt((MIL::Int4 *)&v68);
          v52 = *a6;
          *(float *)(*a6 + 4 * v49++) = *(float *)(a3 + 4 * v50) * (float)((float)v51 - (float)*(char *)(v48 + v50));
        }
        while (v49 < (a6[1] - v52) >> 2);
      }
      break;
    case 13:
      v21 = MIL::IRTensorValue::GetDataView<MIL::Int4>(*a4);
      v23 = v22;
      std::vector<float>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v24 = 0;
        do
        {
          v25 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v24);
          v69.__r_.__value_.__r.__words[0] = a1;
          v69.__r_.__value_.__l.__size_ = a2;
          v68.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::Int4 const,18446744073709551615ul>::ValueAt(&v69, v24);
          v26 = MIL::Int4::GetInt((MIL::Int4 *)&v68);
          v27 = *(float *)(a3 + 4 * v25);
          v69.__r_.__value_.__r.__words[0] = v21;
          v69.__r_.__value_.__l.__size_ = v23;
          v68.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::Int4 const,18446744073709551615ul>::ValueAt(&v69, v25);
          v28 = MIL::Int4::GetInt((MIL::Int4 *)&v68);
          v29 = *a6;
          *(float *)(*a6 + 4 * v24++) = v27 * (float)((float)v26 - (float)v28);
        }
        while (v24 < (a6[1] - v29) >> 2);
      }
      break;
    case 14:
      v35 = MIL::IRTensorValue::GetDataView<unsigned char>(*a4);
      std::vector<float>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v36 = 0;
        do
        {
          v37 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v36);
          v69.__r_.__value_.__r.__words[0] = a1;
          v69.__r_.__value_.__l.__size_ = a2;
          v68.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::Int4 const,18446744073709551615ul>::ValueAt(&v69, v36);
          v38 = MIL::Int4::GetInt((MIL::Int4 *)&v68);
          LOBYTE(v39) = *(_BYTE *)(v35 + v37);
          v40 = *a6;
          *(float *)(*a6 + 4 * v36++) = *(float *)(a3 + 4 * v37) * (float)((float)v38 - (float)v39);
        }
        while (v36 < (a6[1] - v40) >> 2);
      }
      break;
    case 20:
      v53 = MIL::IRTensorValue::GetDataView<MIL::UInt4>(*a4);
      v55 = v54;
      std::vector<float>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v56 = 0;
        do
        {
          v57 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v56);
          v69.__r_.__value_.__r.__words[0] = a1;
          v69.__r_.__value_.__l.__size_ = a2;
          v68.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::Int4 const,18446744073709551615ul>::ValueAt(&v69, v56);
          v58 = MIL::Int4::GetInt((MIL::Int4 *)&v68);
          v59 = *(float *)(a3 + 4 * v57);
          v69.__r_.__value_.__r.__words[0] = v53;
          v69.__r_.__value_.__l.__size_ = v55;
          v68.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(&v69, v57);
          v60 = MIL::UInt4::GetInt((MIL::UInt4 *)&v68);
          v61 = *a6;
          *(float *)(*a6 + 4 * v56++) = v59 * (float)((float)v58 - (float)v60);
        }
        while (v56 < (a6[1] - v61) >> 2);
      }
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      MIL::IRDataTypeToString(v13, &v67);
      v63 = std::string::insert(&v67, 0, "Unsupported dType (");
      v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
      v68.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v64;
      v63->__r_.__value_.__l.__size_ = 0;
      v63->__r_.__value_.__r.__words[2] = 0;
      v63->__r_.__value_.__r.__words[0] = 0;
      v65 = std::string::append(&v68, ") for offset.");
      v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
      v69.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v66;
      v65->__r_.__value_.__l.__size_ = 0;
      v65->__r_.__value_.__r.__words[2] = 0;
      v65->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v69);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
}

void sub_1E096FBD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;

  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v29 & 1) == 0)
LABEL_10:
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v28);
  goto LABEL_10;
}

void MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<float,signed char>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X4>, unint64_t **a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  float v18;
  float Float;
  uint64_t v20;
  uint64_t v21;
  std::string::size_type v22;
  std::string::size_type v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  float v27;
  int Int;
  uint64_t v29;
  uint64_t Data;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char v42;
  float v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  std::string::size_type v51;
  std::string::size_type v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  float v56;
  int v57;
  uint64_t v58;
  std::runtime_error *exception;
  std::string *v60;
  __int128 v61;
  std::string *v62;
  __int128 v63;
  std::string v64;
  std::string v65;
  std::string v66;

  v12 = (*(uint64_t (**)(uint64_t *))(**a4 + 32))(*a4);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 88))(v12);
  switch(v13)
  {
    case 4:
      v14 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(*a4);
      std::vector<float>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v15 = 0;
        do
        {
          v16 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v15);
          v17 = *(_BYTE *)(a1 + v15);
          v18 = *(float *)(a3 + 4 * v16);
          Float = MIL::Fp16::GetFloat((MIL::Fp16 *)(v14 + 2 * v16));
          v20 = *a6;
          *(float *)(*a6 + 4 * v15++) = v18 * (float)((float)v17 - Float);
        }
        while (v15 < (a6[1] - v20) >> 2);
      }
      break;
    case 5:
      Data = MIL::IRTensorValue::GetDataView<float>(*a4);
      std::vector<float>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v31 = 0;
        do
        {
          v32 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v31);
          v33 = *a6;
          *(float *)(*a6 + 4 * v31) = *(float *)(a3 + 4 * v32)
                                    * (float)((float)*(char *)(a1 + v31) - *(float *)(Data + 4 * v32));
          ++v31;
        }
        while (v31 < (a6[1] - v33) >> 2);
      }
      break;
    case 7:
      v39 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(*a4);
      std::vector<float>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v40 = 0;
        do
        {
          v41 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v40);
          v42 = *(_BYTE *)(a1 + v40);
          v43 = *(float *)(a3 + 4 * v41);
          v44 = MIL::Bf16::GetFloat((MIL::Bf16 *)(v39 + 2 * v41));
          v45 = *a6;
          *(float *)(*a6 + 4 * v40++) = v43 * (float)((float)v42 - v44);
        }
        while (v40 < (a6[1] - v45) >> 2);
      }
      break;
    case 9:
      v46 = MIL::IRTensorValue::GetDataView<signed char>(*a4);
      std::vector<float>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v47 = 0;
        do
        {
          v48 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v47);
          v49 = *a6;
          *(float *)(*a6 + 4 * v47) = *(float *)(a3 + 4 * v48)
                                    * (float)((float)*(char *)(a1 + v47) - (float)*(char *)(v46 + v48));
          ++v47;
        }
        while (v47 < (a6[1] - v49) >> 2);
      }
      break;
    case 13:
      v21 = MIL::IRTensorValue::GetDataView<MIL::Int4>(*a4);
      v23 = v22;
      std::vector<float>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v24 = 0;
        do
        {
          v25 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v24);
          v26 = *(char *)(a1 + v24);
          v27 = *(float *)(a3 + 4 * v25);
          v66.__r_.__value_.__r.__words[0] = v21;
          v66.__r_.__value_.__l.__size_ = v23;
          v65.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::Int4 const,18446744073709551615ul>::ValueAt(&v66, v25);
          Int = MIL::Int4::GetInt((MIL::Int4 *)&v65);
          v29 = *a6;
          *(float *)(*a6 + 4 * v24++) = v27 * (float)((float)v26 - (float)Int);
        }
        while (v24 < (a6[1] - v29) >> 2);
      }
      break;
    case 14:
      v34 = MIL::IRTensorValue::GetDataView<unsigned char>(*a4);
      std::vector<float>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v35 = 0;
        do
        {
          v36 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v35);
          LOBYTE(v37) = *(_BYTE *)(v34 + v36);
          v38 = *a6;
          *(float *)(*a6 + 4 * v35) = *(float *)(a3 + 4 * v36) * (float)((float)*(char *)(a1 + v35) - (float)v37);
          ++v35;
        }
        while (v35 < (a6[1] - v38) >> 2);
      }
      break;
    case 20:
      v50 = MIL::IRTensorValue::GetDataView<MIL::UInt4>(*a4);
      v52 = v51;
      std::vector<float>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v53 = 0;
        do
        {
          v54 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v53);
          v55 = *(char *)(a1 + v53);
          v56 = *(float *)(a3 + 4 * v54);
          v66.__r_.__value_.__r.__words[0] = v50;
          v66.__r_.__value_.__l.__size_ = v52;
          v65.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(&v66, v54);
          v57 = MIL::UInt4::GetInt((MIL::UInt4 *)&v65);
          v58 = *a6;
          *(float *)(*a6 + 4 * v53++) = v56 * (float)((float)v55 - (float)v57);
        }
        while (v53 < (a6[1] - v58) >> 2);
      }
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      MIL::IRDataTypeToString(v13, &v64);
      v60 = std::string::insert(&v64, 0, "Unsupported dType (");
      v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v61;
      v60->__r_.__value_.__l.__size_ = 0;
      v60->__r_.__value_.__r.__words[2] = 0;
      v60->__r_.__value_.__r.__words[0] = 0;
      v62 = std::string::append(&v65, ") for offset.");
      v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
      v66.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v63;
      v62->__r_.__value_.__l.__size_ = 0;
      v62->__r_.__value_.__r.__words[2] = 0;
      v62->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v66);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
}

void sub_1E09700FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;

  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v29 & 1) == 0)
LABEL_10:
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v28);
  goto LABEL_10;
}

void MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<float,unsigned char>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X4>, unint64_t **a5@<X5>, uint64_t *a6@<X8>)
{
  unsigned int v6;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  float v19;
  float Float;
  uint64_t v21;
  uint64_t v22;
  std::string::size_type v23;
  std::string::size_type v24;
  unint64_t v25;
  unint64_t v26;
  float v27;
  int Int;
  uint64_t v29;
  uint64_t Data;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int v44;
  float v45;
  float v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  std::string::size_type v54;
  std::string::size_type v55;
  unint64_t v56;
  unint64_t v57;
  float v58;
  int v59;
  uint64_t v60;
  std::runtime_error *exception;
  std::string *v62;
  __int128 v63;
  std::string *v64;
  __int128 v65;
  std::string v66;
  std::string v67;
  std::string v68;

  v13 = (*(uint64_t (**)(uint64_t *))(**a4 + 32))(*a4);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 88))(v13);
  switch(v14)
  {
    case 4:
      v15 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(*a4);
      std::vector<float>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v16 = 0;
        do
        {
          v17 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v16);
          v18 = *(unsigned __int8 *)(a1 + v16);
          v19 = *(float *)(a3 + 4 * v17);
          Float = MIL::Fp16::GetFloat((MIL::Fp16 *)(v15 + 2 * v17));
          v21 = *a6;
          *(float *)(*a6 + 4 * v16++) = v19 * (float)((float)v18 - Float);
        }
        while (v16 < (a6[1] - v21) >> 2);
      }
      break;
    case 5:
      Data = MIL::IRTensorValue::GetDataView<float>(*a4);
      std::vector<float>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v31 = 0;
        do
        {
          v32 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v31);
          LOBYTE(v33) = *(_BYTE *)(a1 + v31);
          v34 = *a6;
          *(float *)(*a6 + 4 * v31++) = *(float *)(a3 + 4 * v32) * (float)((float)v33 - *(float *)(Data + 4 * v32));
        }
        while (v31 < (a6[1] - v34) >> 2);
      }
      break;
    case 7:
      v41 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(*a4);
      std::vector<float>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v42 = 0;
        do
        {
          v43 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v42);
          v44 = *(unsigned __int8 *)(a1 + v42);
          v45 = *(float *)(a3 + 4 * v43);
          v46 = MIL::Bf16::GetFloat((MIL::Bf16 *)(v41 + 2 * v43));
          v47 = *a6;
          *(float *)(*a6 + 4 * v42++) = v45 * (float)((float)v44 - v46);
        }
        while (v42 < (a6[1] - v47) >> 2);
      }
      break;
    case 9:
      v48 = MIL::IRTensorValue::GetDataView<signed char>(*a4);
      std::vector<float>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v49 = 0;
        do
        {
          v50 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v49);
          LOBYTE(v51) = *(_BYTE *)(a1 + v49);
          v52 = *a6;
          *(float *)(*a6 + 4 * v49++) = *(float *)(a3 + 4 * v50) * (float)((float)v51 - (float)*(char *)(v48 + v50));
        }
        while (v49 < (a6[1] - v52) >> 2);
      }
      break;
    case 13:
      v22 = MIL::IRTensorValue::GetDataView<MIL::Int4>(*a4);
      v24 = v23;
      std::vector<float>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v25 = 0;
        do
        {
          v26 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v25);
          LOBYTE(v6) = *(_BYTE *)(a1 + v25);
          v27 = *(float *)(a3 + 4 * v26);
          v68.__r_.__value_.__r.__words[0] = v22;
          v68.__r_.__value_.__l.__size_ = v24;
          v67.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::Int4 const,18446744073709551615ul>::ValueAt(&v68, v26);
          Int = MIL::Int4::GetInt((MIL::Int4 *)&v67);
          v29 = *a6;
          *(float *)(*a6 + 4 * v25++) = v27 * (float)((float)v6 - (float)Int);
        }
        while (v25 < (a6[1] - v29) >> 2);
      }
      break;
    case 14:
      v35 = MIL::IRTensorValue::GetDataView<unsigned char>(*a4);
      std::vector<float>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v36 = 0;
        do
        {
          v37 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v36);
          LOBYTE(v38) = *(_BYTE *)(a1 + v36);
          LOBYTE(v39) = *(_BYTE *)(v35 + v37);
          v40 = *a6;
          *(float *)(*a6 + 4 * v36++) = *(float *)(a3 + 4 * v37) * (float)((float)v38 - (float)v39);
        }
        while (v36 < (a6[1] - v40) >> 2);
      }
      break;
    case 20:
      v53 = MIL::IRTensorValue::GetDataView<MIL::UInt4>(*a4);
      v55 = v54;
      std::vector<float>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v56 = 0;
        do
        {
          v57 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v56);
          LOBYTE(v6) = *(_BYTE *)(a1 + v56);
          v58 = *(float *)(a3 + 4 * v57);
          v68.__r_.__value_.__r.__words[0] = v53;
          v68.__r_.__value_.__l.__size_ = v55;
          v67.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(&v68, v57);
          v59 = MIL::UInt4::GetInt((MIL::UInt4 *)&v67);
          v60 = *a6;
          *(float *)(*a6 + 4 * v56++) = v58 * (float)((float)v6 - (float)v59);
        }
        while (v56 < (a6[1] - v60) >> 2);
      }
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      MIL::IRDataTypeToString(v14, &v66);
      v62 = std::string::insert(&v66, 0, "Unsupported dType (");
      v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
      v67.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v63;
      v62->__r_.__value_.__l.__size_ = 0;
      v62->__r_.__value_.__r.__words[2] = 0;
      v62->__r_.__value_.__r.__words[0] = 0;
      v64 = std::string::append(&v67, ") for offset.");
      v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
      v68.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v65;
      v64->__r_.__value_.__l.__size_ = 0;
      v64->__r_.__value_.__r.__words[2] = 0;
      v64->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v68);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
}

void sub_1E0970620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;

  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v29 & 1) == 0)
LABEL_10:
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v28);
  goto LABEL_10;
}

void MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<float,MIL::Bf16>(MIL::Bf16 *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X4>, unint64_t **a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  float Float;
  float v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  std::string::size_type v22;
  std::string::size_type v23;
  unint64_t v24;
  unint64_t v25;
  float v26;
  float v27;
  int Int;
  uint64_t v29;
  uint64_t Data;
  unint64_t v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  float v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  float v44;
  float v45;
  float v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  float v51;
  uint64_t v52;
  uint64_t v53;
  std::string::size_type v54;
  std::string::size_type v55;
  unint64_t v56;
  unint64_t v57;
  float v58;
  float v59;
  int v60;
  uint64_t v61;
  std::runtime_error *exception;
  std::string *v63;
  __int128 v64;
  std::string *v65;
  __int128 v66;
  std::string v67;
  std::string v68;
  std::string v69;

  v12 = (*(uint64_t (**)(uint64_t *))(**a4 + 32))(*a4);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 88))(v12);
  switch(v13)
  {
    case 4:
      v14 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(*a4);
      std::vector<float>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v15 = 0;
        do
        {
          v16 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v15);
          Float = MIL::Bf16::GetFloat(a1);
          v18 = *(float *)(a3 + 4 * v16);
          v19 = MIL::Fp16::GetFloat((MIL::Fp16 *)(v14 + 2 * v16));
          v20 = *a6;
          *(float *)(*a6 + 4 * v15++) = v18 * (float)(Float - v19);
          a1 = (MIL::Bf16 *)((char *)a1 + 2);
        }
        while (v15 < (a6[1] - v20) >> 2);
      }
      break;
    case 5:
      Data = MIL::IRTensorValue::GetDataView<float>(*a4);
      std::vector<float>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v31 = 0;
        do
        {
          v32 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v31);
          v33 = MIL::Bf16::GetFloat(a1);
          v34 = *a6;
          *(float *)(*a6 + 4 * v31++) = *(float *)(a3 + 4 * v32) * (float)(v33 - *(float *)(Data + 4 * v32));
          a1 = (MIL::Bf16 *)((char *)a1 + 2);
        }
        while (v31 < (a6[1] - v34) >> 2);
      }
      break;
    case 7:
      v41 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(*a4);
      std::vector<float>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v42 = 0;
        do
        {
          v43 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v42);
          v44 = MIL::Bf16::GetFloat(a1);
          v45 = *(float *)(a3 + 4 * v43);
          v46 = MIL::Bf16::GetFloat((MIL::Bf16 *)(v41 + 2 * v43));
          v47 = *a6;
          *(float *)(*a6 + 4 * v42++) = v45 * (float)(v44 - v46);
          a1 = (MIL::Bf16 *)((char *)a1 + 2);
        }
        while (v42 < (a6[1] - v47) >> 2);
      }
      break;
    case 9:
      v48 = MIL::IRTensorValue::GetDataView<signed char>(*a4);
      std::vector<float>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v49 = 0;
        do
        {
          v50 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v49);
          v51 = MIL::Bf16::GetFloat(a1);
          v52 = *a6;
          *(float *)(*a6 + 4 * v49++) = *(float *)(a3 + 4 * v50) * (float)(v51 - (float)*(char *)(v48 + v50));
          a1 = (MIL::Bf16 *)((char *)a1 + 2);
        }
        while (v49 < (a6[1] - v52) >> 2);
      }
      break;
    case 13:
      v21 = MIL::IRTensorValue::GetDataView<MIL::Int4>(*a4);
      v23 = v22;
      std::vector<float>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v24 = 0;
        do
        {
          v25 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v24);
          v26 = MIL::Bf16::GetFloat(a1);
          v27 = *(float *)(a3 + 4 * v25);
          v69.__r_.__value_.__r.__words[0] = v21;
          v69.__r_.__value_.__l.__size_ = v23;
          v68.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::Int4 const,18446744073709551615ul>::ValueAt(&v69, v25);
          Int = MIL::Int4::GetInt((MIL::Int4 *)&v68);
          v29 = *a6;
          *(float *)(*a6 + 4 * v24++) = v27 * (float)(v26 - (float)Int);
          a1 = (MIL::Bf16 *)((char *)a1 + 2);
        }
        while (v24 < (a6[1] - v29) >> 2);
      }
      break;
    case 14:
      v35 = MIL::IRTensorValue::GetDataView<unsigned char>(*a4);
      std::vector<float>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v36 = 0;
        do
        {
          v37 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v36);
          v38 = MIL::Bf16::GetFloat(a1);
          LOBYTE(v39) = *(_BYTE *)(v35 + v37);
          v40 = *a6;
          *(float *)(*a6 + 4 * v36++) = *(float *)(a3 + 4 * v37) * (float)(v38 - (float)v39);
          a1 = (MIL::Bf16 *)((char *)a1 + 2);
        }
        while (v36 < (a6[1] - v40) >> 2);
      }
      break;
    case 20:
      v53 = MIL::IRTensorValue::GetDataView<MIL::UInt4>(*a4);
      v55 = v54;
      std::vector<float>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v56 = 0;
        do
        {
          v57 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v56);
          v58 = MIL::Bf16::GetFloat(a1);
          v59 = *(float *)(a3 + 4 * v57);
          v69.__r_.__value_.__r.__words[0] = v53;
          v69.__r_.__value_.__l.__size_ = v55;
          v68.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(&v69, v57);
          v60 = MIL::UInt4::GetInt((MIL::UInt4 *)&v68);
          v61 = *a6;
          *(float *)(*a6 + 4 * v56++) = v59 * (float)(v58 - (float)v60);
          a1 = (MIL::Bf16 *)((char *)a1 + 2);
        }
        while (v56 < (a6[1] - v61) >> 2);
      }
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      MIL::IRDataTypeToString(v13, &v67);
      v63 = std::string::insert(&v67, 0, "Unsupported dType (");
      v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
      v68.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v64;
      v63->__r_.__value_.__l.__size_ = 0;
      v63->__r_.__value_.__r.__words[2] = 0;
      v63->__r_.__value_.__r.__words[0] = 0;
      v65 = std::string::append(&v68, ") for offset.");
      v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
      v69.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v66;
      v65->__r_.__value_.__l.__size_ = 0;
      v65->__r_.__value_.__r.__words[2] = 0;
      v65->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v69);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
}

void sub_1E0970B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;

  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v29 & 1) == 0)
LABEL_10:
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v28);
  goto LABEL_10;
}

void MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<float,MIL::Fp16>(MIL::Fp16 *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X4>, unint64_t **a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  float Float;
  float v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  std::string::size_type v22;
  std::string::size_type v23;
  unint64_t v24;
  unint64_t v25;
  float v26;
  float v27;
  int Int;
  uint64_t v29;
  uint64_t Data;
  unint64_t v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  float v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  float v44;
  float v45;
  float v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  float v51;
  uint64_t v52;
  uint64_t v53;
  std::string::size_type v54;
  std::string::size_type v55;
  unint64_t v56;
  unint64_t v57;
  float v58;
  float v59;
  int v60;
  uint64_t v61;
  std::runtime_error *exception;
  std::string *v63;
  __int128 v64;
  std::string *v65;
  __int128 v66;
  std::string v67;
  std::string v68;
  std::string v69;

  v12 = (*(uint64_t (**)(uint64_t *))(**a4 + 32))(*a4);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 88))(v12);
  switch(v13)
  {
    case 4:
      v14 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(*a4);
      std::vector<float>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v15 = 0;
        do
        {
          v16 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v15);
          Float = MIL::Fp16::GetFloat(a1);
          v18 = *(float *)(a3 + 4 * v16);
          v19 = MIL::Fp16::GetFloat((MIL::Fp16 *)(v14 + 2 * v16));
          v20 = *a6;
          *(float *)(*a6 + 4 * v15++) = v18 * (float)(Float - v19);
          a1 = (MIL::Fp16 *)((char *)a1 + 2);
        }
        while (v15 < (a6[1] - v20) >> 2);
      }
      break;
    case 5:
      Data = MIL::IRTensorValue::GetDataView<float>(*a4);
      std::vector<float>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v31 = 0;
        do
        {
          v32 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v31);
          v33 = MIL::Fp16::GetFloat(a1);
          v34 = *a6;
          *(float *)(*a6 + 4 * v31++) = *(float *)(a3 + 4 * v32) * (float)(v33 - *(float *)(Data + 4 * v32));
          a1 = (MIL::Fp16 *)((char *)a1 + 2);
        }
        while (v31 < (a6[1] - v34) >> 2);
      }
      break;
    case 7:
      v41 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(*a4);
      std::vector<float>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v42 = 0;
        do
        {
          v43 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v42);
          v44 = MIL::Fp16::GetFloat(a1);
          v45 = *(float *)(a3 + 4 * v43);
          v46 = MIL::Bf16::GetFloat((MIL::Bf16 *)(v41 + 2 * v43));
          v47 = *a6;
          *(float *)(*a6 + 4 * v42++) = v45 * (float)(v44 - v46);
          a1 = (MIL::Fp16 *)((char *)a1 + 2);
        }
        while (v42 < (a6[1] - v47) >> 2);
      }
      break;
    case 9:
      v48 = MIL::IRTensorValue::GetDataView<signed char>(*a4);
      std::vector<float>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v49 = 0;
        do
        {
          v50 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v49);
          v51 = MIL::Fp16::GetFloat(a1);
          v52 = *a6;
          *(float *)(*a6 + 4 * v49++) = *(float *)(a3 + 4 * v50) * (float)(v51 - (float)*(char *)(v48 + v50));
          a1 = (MIL::Fp16 *)((char *)a1 + 2);
        }
        while (v49 < (a6[1] - v52) >> 2);
      }
      break;
    case 13:
      v21 = MIL::IRTensorValue::GetDataView<MIL::Int4>(*a4);
      v23 = v22;
      std::vector<float>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v24 = 0;
        do
        {
          v25 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v24);
          v26 = MIL::Fp16::GetFloat(a1);
          v27 = *(float *)(a3 + 4 * v25);
          v69.__r_.__value_.__r.__words[0] = v21;
          v69.__r_.__value_.__l.__size_ = v23;
          v68.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::Int4 const,18446744073709551615ul>::ValueAt(&v69, v25);
          Int = MIL::Int4::GetInt((MIL::Int4 *)&v68);
          v29 = *a6;
          *(float *)(*a6 + 4 * v24++) = v27 * (float)(v26 - (float)Int);
          a1 = (MIL::Fp16 *)((char *)a1 + 2);
        }
        while (v24 < (a6[1] - v29) >> 2);
      }
      break;
    case 14:
      v35 = MIL::IRTensorValue::GetDataView<unsigned char>(*a4);
      std::vector<float>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v36 = 0;
        do
        {
          v37 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v36);
          v38 = MIL::Fp16::GetFloat(a1);
          LOBYTE(v39) = *(_BYTE *)(v35 + v37);
          v40 = *a6;
          *(float *)(*a6 + 4 * v36++) = *(float *)(a3 + 4 * v37) * (float)(v38 - (float)v39);
          a1 = (MIL::Fp16 *)((char *)a1 + 2);
        }
        while (v36 < (a6[1] - v40) >> 2);
      }
      break;
    case 20:
      v53 = MIL::IRTensorValue::GetDataView<MIL::UInt4>(*a4);
      v55 = v54;
      std::vector<float>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v56 = 0;
        do
        {
          v57 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v56);
          v58 = MIL::Fp16::GetFloat(a1);
          v59 = *(float *)(a3 + 4 * v57);
          v69.__r_.__value_.__r.__words[0] = v53;
          v69.__r_.__value_.__l.__size_ = v55;
          v68.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(&v69, v57);
          v60 = MIL::UInt4::GetInt((MIL::UInt4 *)&v68);
          v61 = *a6;
          *(float *)(*a6 + 4 * v56++) = v59 * (float)(v58 - (float)v60);
          a1 = (MIL::Fp16 *)((char *)a1 + 2);
        }
        while (v56 < (a6[1] - v61) >> 2);
      }
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      MIL::IRDataTypeToString(v13, &v67);
      v63 = std::string::insert(&v67, 0, "Unsupported dType (");
      v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
      v68.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v64;
      v63->__r_.__value_.__l.__size_ = 0;
      v63->__r_.__value_.__r.__words[2] = 0;
      v63->__r_.__value_.__r.__words[0] = 0;
      v65 = std::string::append(&v68, ") for offset.");
      v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
      v69.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v66;
      v65->__r_.__value_.__l.__size_ = 0;
      v65->__r_.__value_.__r.__words[2] = 0;
      v65->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v69);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
}

void sub_1E09710F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;

  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v29 & 1) == 0)
LABEL_10:
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v28);
  goto LABEL_10;
}

void MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<float,float>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X4>, unint64_t **a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  float Float;
  uint64_t v20;
  uint64_t v21;
  std::string::size_type v22;
  std::string::size_type v23;
  unint64_t v24;
  unint64_t v25;
  float v26;
  float v27;
  int Int;
  uint64_t v29;
  uint64_t Data;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  float v42;
  float v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  std::string::size_type v51;
  std::string::size_type v52;
  unint64_t v53;
  unint64_t v54;
  float v55;
  float v56;
  int v57;
  uint64_t v58;
  std::runtime_error *exception;
  std::string *v60;
  __int128 v61;
  std::string *v62;
  __int128 v63;
  std::string v64;
  std::string v65;
  std::string v66;

  v12 = (*(uint64_t (**)(uint64_t *))(**a4 + 32))(*a4);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 88))(v12);
  switch(v13)
  {
    case 4:
      v14 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(*a4);
      std::vector<float>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v15 = 0;
        do
        {
          v16 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v15);
          v17 = *(float *)(a1 + 4 * v15);
          v18 = *(float *)(a3 + 4 * v16);
          Float = MIL::Fp16::GetFloat((MIL::Fp16 *)(v14 + 2 * v16));
          v20 = *a6;
          *(float *)(*a6 + 4 * v15++) = v18 * (float)(v17 - Float);
        }
        while (v15 < (a6[1] - v20) >> 2);
      }
      break;
    case 5:
      Data = MIL::IRTensorValue::GetDataView<float>(*a4);
      std::vector<float>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v31 = 0;
        do
        {
          v32 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v31);
          v33 = *a6;
          *(float *)(*a6 + 4 * v31) = *(float *)(a3 + 4 * v32)
                                    * (float)(*(float *)(a1 + 4 * v31) - *(float *)(Data + 4 * v32));
          ++v31;
        }
        while (v31 < (a6[1] - v33) >> 2);
      }
      break;
    case 7:
      v39 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(*a4);
      std::vector<float>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v40 = 0;
        do
        {
          v41 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v40);
          v42 = *(float *)(a1 + 4 * v40);
          v43 = *(float *)(a3 + 4 * v41);
          v44 = MIL::Bf16::GetFloat((MIL::Bf16 *)(v39 + 2 * v41));
          v45 = *a6;
          *(float *)(*a6 + 4 * v40++) = v43 * (float)(v42 - v44);
        }
        while (v40 < (a6[1] - v45) >> 2);
      }
      break;
    case 9:
      v46 = MIL::IRTensorValue::GetDataView<signed char>(*a4);
      std::vector<float>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v47 = 0;
        do
        {
          v48 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v47);
          v49 = *a6;
          *(float *)(*a6 + 4 * v47) = *(float *)(a3 + 4 * v48)
                                    * (float)(*(float *)(a1 + 4 * v47) - (float)*(char *)(v46 + v48));
          ++v47;
        }
        while (v47 < (a6[1] - v49) >> 2);
      }
      break;
    case 13:
      v21 = MIL::IRTensorValue::GetDataView<MIL::Int4>(*a4);
      v23 = v22;
      std::vector<float>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v24 = 0;
        do
        {
          v25 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v24);
          v26 = *(float *)(a1 + 4 * v24);
          v27 = *(float *)(a3 + 4 * v25);
          v66.__r_.__value_.__r.__words[0] = v21;
          v66.__r_.__value_.__l.__size_ = v23;
          v65.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::Int4 const,18446744073709551615ul>::ValueAt(&v66, v25);
          Int = MIL::Int4::GetInt((MIL::Int4 *)&v65);
          v29 = *a6;
          *(float *)(*a6 + 4 * v24++) = v27 * (float)(v26 - (float)Int);
        }
        while (v24 < (a6[1] - v29) >> 2);
      }
      break;
    case 14:
      v34 = MIL::IRTensorValue::GetDataView<unsigned char>(*a4);
      std::vector<float>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v35 = 0;
        do
        {
          v36 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v35);
          LOBYTE(v37) = *(_BYTE *)(v34 + v36);
          v38 = *a6;
          *(float *)(*a6 + 4 * v35) = *(float *)(a3 + 4 * v36) * (float)(*(float *)(a1 + 4 * v35) - (float)v37);
          ++v35;
        }
        while (v35 < (a6[1] - v38) >> 2);
      }
      break;
    case 20:
      v50 = MIL::IRTensorValue::GetDataView<MIL::UInt4>(*a4);
      v52 = v51;
      std::vector<float>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v53 = 0;
        do
        {
          v54 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v53);
          v55 = *(float *)(a1 + 4 * v53);
          v56 = *(float *)(a3 + 4 * v54);
          v66.__r_.__value_.__r.__words[0] = v50;
          v66.__r_.__value_.__l.__size_ = v52;
          v65.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(&v66, v54);
          v57 = MIL::UInt4::GetInt((MIL::UInt4 *)&v65);
          v58 = *a6;
          *(float *)(*a6 + 4 * v53++) = v56 * (float)(v55 - (float)v57);
        }
        while (v53 < (a6[1] - v58) >> 2);
      }
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      MIL::IRDataTypeToString(v13, &v64);
      v60 = std::string::insert(&v64, 0, "Unsupported dType (");
      v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v61;
      v60->__r_.__value_.__l.__size_ = 0;
      v60->__r_.__value_.__r.__words[2] = 0;
      v60->__r_.__value_.__r.__words[0] = 0;
      v62 = std::string::append(&v65, ") for offset.");
      v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
      v66.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v63;
      v62->__r_.__value_.__l.__size_ = 0;
      v62->__r_.__value_.__r.__words[2] = 0;
      v62->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v66);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
}

void sub_1E0971600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;

  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v29 & 1) == 0)
LABEL_10:
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v28);
  goto LABEL_10;
}

float MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<float,MIL::UInt4>@<S0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t **a4@<X4>, uint64_t *a5@<X8>)
{
  float result;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _QWORD v15[2];

  std::vector<float>::vector(a5, a2);
  if (a5[1] != *a5)
  {
    v11 = 0;
    do
    {
      v12 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a4, v11);
      v15[0] = a1;
      v15[1] = a2;
      v14 = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(v15, v11);
      result = *(float *)(a3 + 4 * v12) * (float)(int)MIL::UInt4::GetInt((MIL::UInt4 *)&v14);
      v13 = *a5;
      *(float *)(*a5 + 4 * v11++) = result;
    }
    while (v11 < (a5[1] - v13) >> 2);
  }
  return result;
}

void sub_1E0971764(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<float,MIL::Int4>@<S0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t **a4@<X4>, uint64_t *a5@<X8>)
{
  float result;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _QWORD v15[2];

  std::vector<float>::vector(a5, a2);
  if (a5[1] != *a5)
  {
    v11 = 0;
    do
    {
      v12 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a4, v11);
      v15[0] = a1;
      v15[1] = a2;
      v14 = MIL::Util::Span<MIL::Int4 const,18446744073709551615ul>::ValueAt(v15, v11);
      result = *(float *)(a3 + 4 * v12) * (float)(int)MIL::Int4::GetInt((MIL::Int4 *)&v14);
      v13 = *a5;
      *(float *)(*a5 + 4 * v11++) = result;
    }
    while (v11 < (a5[1] - v13) >> 2);
  }
  return result;
}

void sub_1E0971838(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<float,signed char>@<S0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t **a4@<X4>, uint64_t *a5@<X8>)
{
  float result;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  std::vector<float>::vector(a5, a2);
  if (a5[1] != *a5)
  {
    v10 = 0;
    do
    {
      result = *(float *)(a3
                        + 4
                        * MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a4, v10))* (float)*(char *)(a1 + v10);
      v11 = *a5;
      v12 = a5[1];
      *(float *)(*a5 + 4 * v10++) = result;
    }
    while (v10 < (v12 - v11) >> 2);
  }
  return result;
}

void sub_1E09718D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<float,unsigned char>@<S0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t **a4@<X4>, uint64_t *a5@<X8>)
{
  float result;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;

  std::vector<float>::vector(a5, a2);
  if (a5[1] != *a5)
  {
    v10 = 0;
    do
    {
      v11 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a4, v10);
      LOBYTE(v12) = *(_BYTE *)(a1 + v10);
      result = *(float *)(a3 + 4 * v11) * (float)v12;
      v13 = *a5;
      v14 = a5[1];
      *(float *)(*a5 + 4 * v10++) = result;
    }
    while (v10 < (v14 - v13) >> 2);
  }
  return result;
}

void sub_1E0971978(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<float,MIL::Bf16>@<S0>(MIL::Bf16 *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t **a4@<X4>, uint64_t *a5@<X8>)
{
  float result;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  std::vector<float>::vector(a5, a2);
  if (a5[1] != *a5)
  {
    v10 = 0;
    do
    {
      v11 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a4, v10);
      result = MIL::Bf16::GetFloat(a1) * *(float *)(a3 + 4 * v11);
      v12 = *a5;
      v13 = a5[1];
      *(float *)(*a5 + 4 * v10++) = result;
      a1 = (MIL::Bf16 *)((char *)a1 + 2);
    }
    while (v10 < (v13 - v12) >> 2);
  }
  return result;
}

void sub_1E0971A20(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<float,MIL::Fp16>@<S0>(MIL::Fp16 *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t **a4@<X4>, uint64_t *a5@<X8>)
{
  float result;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  std::vector<float>::vector(a5, a2);
  if (a5[1] != *a5)
  {
    v10 = 0;
    do
    {
      v11 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a4, v10);
      result = MIL::Fp16::GetFloat(a1) * *(float *)(a3 + 4 * v11);
      v12 = *a5;
      v13 = a5[1];
      *(float *)(*a5 + 4 * v10++) = result;
      a1 = (MIL::Fp16 *)((char *)a1 + 2);
    }
    while (v10 < (v13 - v12) >> 2);
  }
  return result;
}

void sub_1E0971AC8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<float,float>@<S0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t **a4@<X4>, uint64_t *a5@<X8>)
{
  float result;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  std::vector<float>::vector(a5, a2);
  if (a5[1] != *a5)
  {
    v10 = 0;
    do
    {
      result = *(float *)(a1 + 4 * v10)
             * *(float *)(a3
                        + 4
                        * MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a4, v10));
      v11 = *a5;
      v12 = a5[1];
      *(float *)(*a5 + 4 * v10++) = result;
    }
    while (v10 < (v12 - v11) >> 2);
  }
  return result;
}

void sub_1E0971B64(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::default_delete<MIL::Operators::Common::ios18::ConstExprs::BlockwiseShiftScale::Impl>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](a2 + 40);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](a2 + 24);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](a2 + 8);
    JUMPOUT(0x1E0C023A0);
  }
}

uint64_t MIL::Operators::Common::ios18::ConstExprs::SparseBlockwiseShiftScale::Impl::Impl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a4;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)a5;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)a6;
  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)a7;
  *(_QWORD *)a7 = 0;
  *(_QWORD *)(a7 + 8) = 0;
  MIL::Operators::Common::ios18::ConstExprs::SparseBlockwiseShiftScale::Impl::ValidateArgsAndTypeConstraints((MIL::Operators::Common::ios18::ConstExprs::SparseBlockwiseShiftScale::Impl *)a1);
  return a1;
}

void sub_1E0971C48(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v4);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::ConstExprs::SparseBlockwiseShiftScale::Impl::ValidateArgsAndTypeConstraints(MIL::Operators::Common::ios18::ConstExprs::SparseBlockwiseShiftScale::Impl *this)
{
  uint64_t v2;
  uint64_t v3;
  MIL::IRTensorValueType *v4;
  MIL::IRTensorValueType *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  MIL::IRDimension **v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type size;
  std::string *v23;
  __int128 v24;
  std::runtime_error *exception;
  void *__p;
  char v27;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;
  void *v32;
  void *v33;
  uint64_t v34;
  MIL::IRDimension **v35;
  MIL::IRDimension **v36;
  uint64_t v37;

  std::string::basic_string[abi:ne180100]<0>(&__p, "Constexpr-SparseBlockwiseShiftScale");
  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2));
  std::string::basic_string[abi:ne180100]<0>(&v35, "mask");
  MIL::Operators::Common::Shared::ConstExprs::AssertIsShapeConstant(v2, (uint64_t)&v35);
  if (SHIBYTE(v37) < 0)
    operator delete(v35);
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 32))(*((_QWORD *)this + 6));
  std::string::basic_string[abi:ne180100]<0>(&v35, "scale");
  MIL::Operators::Common::Shared::ConstExprs::AssertIsShapeConstant(v3, (uint64_t)&v35);
  if (SHIBYTE(v37) < 0)
    operator delete(v35);
  v4 = (MIL::IRTensorValueType *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2));
  v5 = (MIL::IRTensorValueType *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 32))(*((_QWORD *)this + 6));
  std::string::basic_string[abi:ne180100]<0>(&v35, "mask");
  std::string::basic_string[abi:ne180100]<0>(&v32, "scale");
  MIL::Operators::Common::Shared::ConstExprs::AssertSameRank(v4, v5, (uint64_t)&v35, (uint64_t)&v32);
  if (SHIBYTE(v34) < 0)
    operator delete(v32);
  if (SHIBYTE(v37) < 0)
    operator delete(v35);
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2));
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 96))(v6);
  v35 = 0;
  v36 = 0;
  v37 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v35, *(const void **)v7, *(_QWORD *)(v7 + 8), (uint64_t)(*(_QWORD *)(v7 + 8) - *(_QWORD *)v7) >> 3);
  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 32))(*((_QWORD *)this + 6));
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 96))(v8);
  v32 = 0;
  v33 = 0;
  v34 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v32, *(const void **)v9, *(_QWORD *)(v9 + 8), (uint64_t)(*(_QWORD *)(v9 + 8) - *(_QWORD *)v9) >> 3);
  v10 = v36;
  if (v36 != v35)
  {
    v11 = 0;
    v10 = v35;
    do
    {
      v12 = MIL::IRDimension::AsConstant(v10[v11]);
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 48))(v12);
      v14 = MIL::IRDimension::AsConstant(*((MIL::IRDimension **)v32 + v11));
      if (v13 % (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 48))(v14))
      {
        std::operator+<char>();
        v19 = std::string::append(&v29, ", number of scales along each dimension should be a factor of corresponding dimension size of data. Assertion error along dimension ");
        v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        v30.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v28, v11);
        if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v21 = &v28;
        else
          v21 = (std::string *)v28.__r_.__value_.__r.__words[0];
        if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
        else
          size = v28.__r_.__value_.__l.__size_;
        v23 = std::string::append(&v30, (const std::string::value_type *)v21, size);
        v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v31.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v28.__r_.__value_.__l.__data_);
        if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v30.__r_.__value_.__l.__data_);
        if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v29.__r_.__value_.__l.__data_);
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, &v31);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      ++v11;
      v10 = v35;
    }
    while (v11 < v36 - v35);
  }
  if (v32)
  {
    v33 = v32;
    operator delete(v32);
    v10 = v35;
  }
  if (v10)
  {
    v36 = v10;
    operator delete(v10);
  }
  v15 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 32))(*((_QWORD *)this + 6));
  MIL::Operators::Common::Shared::ConstExprs::AssertExpectedOutputDType(v15, *((_QWORD *)this + 1));
  v16 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2));
  MIL::Operators::Common::Shared::ConstExprs::AssertExpectedOutputShape(v16, *(_QWORD *)this);
  if (*((_QWORD *)this + 8))
  {
    v17 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 32))(*((_QWORD *)this + 6));
    v18 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 32))(*((_QWORD *)this + 8));
    std::string::basic_string[abi:ne180100]<0>(&v35, "scale");
    std::string::basic_string[abi:ne180100]<0>(&v32, "offset");
    MIL::Operators::Common::Shared::ConstExprs::AssertConstantAndSameShape(v17, v18, (uint64_t)&v35, (uint64_t)&v32);
    if (SHIBYTE(v34) < 0)
      operator delete(v32);
    if (SHIBYTE(v37) < 0)
      operator delete(v35);
  }
  if (v27 < 0)
    operator delete(__p);
}

void sub_1E0972064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;
  void *v42;
  void *v43;

  if (a40 < 0)
    operator delete(__p);
  v42 = *(void **)(v40 - 80);
  if (v42)
  {
    *(_QWORD *)(v40 - 72) = v42;
    operator delete(v42);
  }
  v43 = *(void **)(v40 - 56);
  if (v43)
  {
    *(_QWORD *)(v40 - 48) = v43;
    operator delete(v43);
  }
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios18::ConstExprs::SparseBlockwiseShiftScale::Impl::ComputeOutput(MIL::Operators::Common::ios18::ConstExprs::SparseBlockwiseShiftScale::Impl *this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  const void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  std::string::size_type v25;
  uint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  MIL::Fp16 *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  const void *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  uint64_t *v60;
  unint64_t *v61;
  unint64_t v62;
  std::string::size_type v63;
  uint64_t *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  MIL::Fp16 *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  const void *v89;
  std::__shared_weak_count *v90;
  unint64_t *p_shared_owners;
  unint64_t v92;
  std::__shared_weak_count *v93;
  uint64_t *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  uint64_t *v98;
  unint64_t *v99;
  unint64_t v100;
  std::string::size_type v101;
  uint64_t *v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  MIL::Fp16 *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  MIL::Fp16 *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  MIL::Fp16 *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  MIL::Fp16 *v143;
  uint64_t v144;
  size_t v145;
  size_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  std::string::size_type v152;
  unint64_t v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  unint64_t *v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  unint64_t *v172;
  uint64_t v173;
  size_t v174;
  size_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  std::string::size_type v181;
  std::string::size_type v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  unint64_t *v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t Data;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t *v196;
  unint64_t v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  unint64_t *v201;
  uint64_t v202;
  size_t v203;
  size_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  unint64_t *v209;
  unint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  unint64_t *v214;
  uint64_t v215;
  size_t v216;
  size_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  std::string::size_type v223;
  std::string::size_type v224;
  unint64_t *v225;
  unint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  unint64_t *v230;
  uint64_t v231;
  unint64_t v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t *v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  unint64_t *v243;
  uint64_t v244;
  size_t v245;
  size_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t *v251;
  unint64_t v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  unint64_t *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  MIL::Bf16 *v263;
  unint64_t *v264;
  unint64_t v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  unint64_t *v269;
  uint64_t v270;
  size_t v271;
  size_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t *v277;
  unint64_t v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  unint64_t *v282;
  uint64_t v283;
  size_t v284;
  size_t v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  uint64_t v289;
  unint64_t *v290;
  unint64_t v291;
  std::__shared_weak_count *v292;
  unint64_t *v293;
  unint64_t v294;
  unint64_t *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  MIL::Bf16 *v302;
  unint64_t *v303;
  unint64_t v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  unint64_t *v308;
  uint64_t v309;
  size_t v310;
  size_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  unint64_t *v316;
  unint64_t v317;
  std::__shared_weak_count *v318;
  unint64_t *v319;
  unint64_t v320;
  unint64_t *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  MIL::Bf16 *v328;
  unint64_t *v329;
  unint64_t v330;
  std::__shared_weak_count *v331;
  unint64_t *v332;
  unint64_t v333;
  unint64_t *v334;
  uint64_t v335;
  size_t v336;
  size_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  unint64_t *v342;
  unint64_t v343;
  std::__shared_weak_count *v344;
  unint64_t *v345;
  unint64_t v346;
  unint64_t *v347;
  uint64_t v348;
  size_t v349;
  size_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  std::string::size_type v356;
  unint64_t v357;
  unint64_t *v358;
  unint64_t v359;
  std::__shared_weak_count *v360;
  unint64_t *v361;
  unint64_t v362;
  unint64_t *v363;
  uint64_t v364;
  size_t v365;
  size_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  std::string::size_type v372;
  std::string::size_type v373;
  unint64_t *v374;
  unint64_t v375;
  std::__shared_weak_count *v376;
  unint64_t *v377;
  unint64_t v378;
  unint64_t *v379;
  uint64_t v380;
  size_t v381;
  size_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  std::string::size_type v388;
  std::string::size_type v389;
  unint64_t *v390;
  unint64_t v391;
  std::__shared_weak_count *v392;
  unint64_t *v393;
  unint64_t v394;
  unint64_t *v395;
  uint64_t v396;
  size_t v397;
  size_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  unint64_t v405;
  uint64_t v406;
  unint64_t v407;
  unint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  size_t v413;
  size_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  unint64_t v423;
  unint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  size_t v429;
  size_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  size_t v435;
  size_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  unint64_t v445;
  unint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  size_t v451;
  size_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  MIL::Bf16 *v461;
  uint64_t v462;
  size_t v463;
  size_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  size_t v469;
  size_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  MIL::Bf16 *v479;
  uint64_t v480;
  size_t v481;
  size_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  MIL::Bf16 *v491;
  uint64_t v492;
  size_t v493;
  size_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  size_t v499;
  size_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  unint64_t v507;
  uint64_t v508;
  _QWORD *v509;
  uint64_t v510;
  unint64_t *v511;
  unint64_t v512;
  unint64_t *v513;
  unint64_t v514;
  unint64_t *v515;
  unint64_t v516;
  std::__shared_weak_count *v517;
  unint64_t *v518;
  unint64_t v519;
  uint64_t v520;
  size_t v521;
  size_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  _QWORD *v531;
  uint64_t v532;
  unint64_t *v533;
  unint64_t v534;
  unint64_t *v535;
  unint64_t v536;
  unint64_t *v537;
  unint64_t v538;
  unint64_t *v539;
  uint64_t v540;
  size_t v541;
  size_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  _QWORD *v551;
  uint64_t v552;
  unint64_t *v553;
  unint64_t v554;
  unint64_t *v555;
  unint64_t v556;
  unint64_t *v557;
  unint64_t v558;
  unint64_t *v559;
  std::runtime_error *exception;
  std::runtime_error *v561;
  std::string *v562;
  std::string::size_type size;
  std::string *v564;
  __int128 v565;
  std::string *v566;
  __int128 v567;
  std::runtime_error *v568;
  std::string *v569;
  std::string::size_type v570;
  std::string *v571;
  __int128 v572;
  std::string *v573;
  __int128 v574;
  std::runtime_error *v575;
  std::string *v576;
  __int128 v577;
  std::string *v578;
  __int128 v579;
  std::runtime_error *v580;
  std::string *v581;
  __int128 v582;
  std::string *v583;
  __int128 v584;
  std::runtime_error *v585;
  std::string *v586;
  __int128 v587;
  std::string *v588;
  __int128 v589;
  std::runtime_error *v590;
  std::string *v591;
  __int128 v592;
  std::string *v593;
  __int128 v594;
  std::runtime_error *v595;
  std::string *v596;
  __int128 v597;
  std::string *v598;
  __int128 v599;
  std::runtime_error *v600;
  std::string *v601;
  __int128 v602;
  std::string *v603;
  __int128 v604;
  std::__shared_weak_count *v605;
  std::__shared_weak_count *v606;
  std::__shared_weak_count *v607;
  std::__shared_weak_count *v608;
  std::__shared_weak_count *v609;
  std::__shared_weak_count *v610;
  std::__shared_weak_count *v611;
  std::__shared_weak_count *v612;
  std::__shared_weak_count *v613;
  std::__shared_weak_count *v614;
  std::__shared_weak_count *v615;
  std::__shared_weak_count *v616;
  void *v617;
  void *v618;
  uint64_t v619;
  void *v620[2];
  char v621;
  uint64_t *v622;
  std::__shared_weak_count *v623;
  std::string v624;
  void *v625;
  void *v626;
  void *__p;
  void *v628;
  unint64_t *v629;
  unint64_t *v630;
  uint64_t *v631;
  uint64_t *v632;
  uint64_t *v633;
  std::__shared_weak_count *v634;
  std::string v635;
  std::string v636;
  std::string v637;

  std::string::basic_string[abi:ne180100]<0>(v620, "Constexpr-SparseBlockwiseShiftScale");
  if (a2 != 1)
  {
    if (a2)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" has two outputs, index i cannot be larger than 1.", (const void **)v620, (void **)&v624.__r_.__value_.__l.__data_);
      std::runtime_error::runtime_error(exception, &v624);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 88))(*(_QWORD *)this);
    if (v6 != 21)
    {
      v561 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(": Unsupported dtype ", (const void **)v620, (void **)&v636.__r_.__value_.__l.__data_);
      MIL::IRDataTypeToString(v6, &v635);
      if ((v635.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v562 = &v635;
      else
        v562 = (std::string *)v635.__r_.__value_.__r.__words[0];
      if ((v635.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v635.__r_.__value_.__r.__words[2]);
      else
        size = v635.__r_.__value_.__l.__size_;
      v564 = std::string::append(&v636, (const std::string::value_type *)v562, size);
      v565 = *(_OWORD *)&v564->__r_.__value_.__l.__data_;
      v637.__r_.__value_.__r.__words[2] = v564->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v637.__r_.__value_.__l.__data_ = v565;
      v564->__r_.__value_.__l.__size_ = 0;
      v564->__r_.__value_.__r.__words[2] = 0;
      v564->__r_.__value_.__r.__words[0] = 0;
      v566 = std::string::append(&v637, " for mask output");
      v567 = *(_OWORD *)&v566->__r_.__value_.__l.__data_;
      v624.__r_.__value_.__r.__words[2] = v566->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v624.__r_.__value_.__l.__data_ = v567;
      v566->__r_.__value_.__l.__size_ = 0;
      v566->__r_.__value_.__r.__words[2] = 0;
      v566->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v561, &v624);
      __cxa_throw(v561, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v7 = *((_QWORD *)this + 3);
    *a3 = *((_QWORD *)this + 2);
    a3[1] = v7;
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    goto LABEL_675;
  }
  v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 88))(*((_QWORD *)this + 1));
  v11 = v10;
  if (v10 == 4)
  {
    v88 = *((_QWORD *)this + 1);
    v89 = (const void *)*((_QWORD *)this + 2);
    v90 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    v612 = v90;
    if (v90)
    {
      p_shared_owners = (unint64_t *)&v90->__shared_owners_;
      do
        v92 = __ldxr(p_shared_owners);
      while (__stxr(v92 + 1, p_shared_owners));
    }
    v94 = (uint64_t *)*((_QWORD *)this + 4);
    v93 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
    v611 = v93;
    if (v93)
    {
      v95 = (unint64_t *)&v93->__shared_owners_;
      do
        v96 = __ldxr(v95);
      while (__stxr(v96 + 1, v95));
    }
    v98 = (uint64_t *)*((_QWORD *)this + 6);
    v97 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
    v610 = v97;
    if (v97)
    {
      v99 = (unint64_t *)&v97->__shared_owners_;
      do
        v100 = __ldxr(v99);
      while (__stxr(v100 + 1, v99));
    }
    v102 = (uint64_t *)*((_QWORD *)this + 8);
    v101 = *((_QWORD *)this + 9);
    v609 = (std::__shared_weak_count *)v101;
    if (v101)
    {
      v103 = (unint64_t *)(v101 + 8);
      do
        v104 = __ldxr(v103);
      while (__stxr(v104 + 1, v103));
    }
    v105 = (*(uint64_t (**)(const void *))(*(_QWORD *)v89 + 32))(v89);
    v106 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v105 + 96))(v105);
    MIL::Operators::Common::Shared::ConstExprs::ShapeToVector(v106, &v631);
    v107 = (*(uint64_t (**)(uint64_t *))(*v98 + 32))(v98);
    v108 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v107 + 96))(v107);
    MIL::Operators::Common::Shared::ConstExprs::ShapeToVector(v108, &v629);
    MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::BlockwiseShiftScaleIndexConverter(&v624, &v631, &v629);
    v109 = (*(uint64_t (**)(uint64_t *))(*v94 + 32))(v94);
    v110 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v109 + 88))(v109);
    if (v102)
    {
      switch(v110)
      {
        case 4:
          v111 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v89);
          v113 = v112;
          v114 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(v94);
          v115 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(v98);
          v633 = v102;
          v634 = (std::__shared_weak_count *)v101;
          v609 = 0;
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::Fp16>(v114, v111, v113, (uint64_t *)&v637);
          v116 = (uint64_t)(v637.__r_.__value_.__l.__size_ - v637.__r_.__value_.__r.__words[0]) >> 1;
          if (v637.__r_.__value_.__l.__size_ == v637.__r_.__value_.__r.__words[0])
            v117 = 0;
          else
            v117 = (MIL::Fp16 *)v637.__r_.__value_.__r.__words[0];
          v635.__r_.__value_.__r.__words[0] = (std::string::size_type)v102;
          v635.__r_.__value_.__l.__size_ = v101;
          if (v101)
          {
            v118 = (unint64_t *)(v101 + 8);
            do
              v119 = __ldxr(v118);
            while (__stxr(v119 + 1, v118));
          }
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Fp16,MIL::Fp16>(v117, v116, v115, (uint64_t **)&v635, (unint64_t **)&v624, (uint64_t *)&v636);
          v120 = (std::__shared_weak_count *)v635.__r_.__value_.__l.__size_;
          if (v635.__r_.__value_.__l.__size_)
          {
            v121 = (unint64_t *)(v635.__r_.__value_.__l.__size_ + 8);
            do
              v122 = __ldaxr(v121);
            while (__stlxr(v122 - 1, v121));
            if (!v122)
            {
              ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
              std::__shared_weak_count::__release_weak(v120);
            }
          }
          MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<MIL::Fp16>((uint64_t *)&v636, v111, v113, (char **)&v617);
          if (v636.__r_.__value_.__r.__words[0])
          {
            v636.__r_.__value_.__l.__size_ = v636.__r_.__value_.__r.__words[0];
            operator delete(v636.__r_.__value_.__l.__data_);
          }
          if (v637.__r_.__value_.__r.__words[0])
          {
            v637.__r_.__value_.__l.__size_ = v637.__r_.__value_.__r.__words[0];
            operator delete(v637.__r_.__value_.__l.__data_);
          }
          v123 = v634;
          if (!v634)
            goto LABEL_596;
          v124 = (unint64_t *)&v634->__shared_owners_;
          do
            v125 = __ldaxr(v124);
          while (__stlxr(v125 - 1, v124));
          break;
        case 5:
          v189 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v89);
          v191 = v190;
          Data = MIL::IRTensorValue::GetDataView<float>(v94);
          v193 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(v98);
          v633 = v102;
          v634 = (std::__shared_weak_count *)v101;
          v609 = 0;
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<float>(Data, v189, v191, (uint64_t *)&v637);
          v194 = (uint64_t)(v637.__r_.__value_.__l.__size_ - v637.__r_.__value_.__r.__words[0]) >> 2;
          if (v637.__r_.__value_.__l.__size_ == v637.__r_.__value_.__r.__words[0])
            v195 = 0;
          else
            v195 = v637.__r_.__value_.__r.__words[0];
          v635.__r_.__value_.__r.__words[0] = (std::string::size_type)v102;
          v635.__r_.__value_.__l.__size_ = v101;
          if (v101)
          {
            v196 = (unint64_t *)(v101 + 8);
            do
              v197 = __ldxr(v196);
            while (__stxr(v197 + 1, v196));
          }
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Fp16,float>(v195, v194, v193, (uint64_t **)&v635, (unint64_t **)&v624, (uint64_t *)&v636);
          v198 = (std::__shared_weak_count *)v635.__r_.__value_.__l.__size_;
          if (v635.__r_.__value_.__l.__size_)
          {
            v199 = (unint64_t *)(v635.__r_.__value_.__l.__size_ + 8);
            do
              v200 = __ldaxr(v199);
            while (__stlxr(v200 - 1, v199));
            if (!v200)
            {
              ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
              std::__shared_weak_count::__release_weak(v198);
            }
          }
          MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<MIL::Fp16>((uint64_t *)&v636, v189, v191, (char **)&v617);
          if (v636.__r_.__value_.__r.__words[0])
          {
            v636.__r_.__value_.__l.__size_ = v636.__r_.__value_.__r.__words[0];
            operator delete(v636.__r_.__value_.__l.__data_);
          }
          if (v637.__r_.__value_.__r.__words[0])
          {
            v637.__r_.__value_.__l.__size_ = v637.__r_.__value_.__r.__words[0];
            operator delete(v637.__r_.__value_.__l.__data_);
          }
          v123 = v634;
          if (!v634)
            goto LABEL_596;
          v201 = (unint64_t *)&v634->__shared_owners_;
          do
            v125 = __ldaxr(v201);
          while (__stlxr(v125 - 1, v201));
          break;
        case 7:
          v296 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v89);
          v298 = v297;
          v299 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(v94);
          v300 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(v98);
          v633 = v102;
          v634 = (std::__shared_weak_count *)v101;
          v609 = 0;
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::Bf16>(v299, v296, v298, (uint64_t *)&v637);
          v301 = (uint64_t)(v637.__r_.__value_.__l.__size_ - v637.__r_.__value_.__r.__words[0]) >> 1;
          if (v637.__r_.__value_.__l.__size_ == v637.__r_.__value_.__r.__words[0])
            v302 = 0;
          else
            v302 = (MIL::Bf16 *)v637.__r_.__value_.__r.__words[0];
          v635.__r_.__value_.__r.__words[0] = (std::string::size_type)v102;
          v635.__r_.__value_.__l.__size_ = v101;
          if (v101)
          {
            v303 = (unint64_t *)(v101 + 8);
            do
              v304 = __ldxr(v303);
            while (__stxr(v304 + 1, v303));
          }
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Fp16,MIL::Bf16>(v302, v301, v300, (uint64_t **)&v635, (unint64_t **)&v624, (uint64_t *)&v636);
          v305 = (std::__shared_weak_count *)v635.__r_.__value_.__l.__size_;
          if (v635.__r_.__value_.__l.__size_)
          {
            v306 = (unint64_t *)(v635.__r_.__value_.__l.__size_ + 8);
            do
              v307 = __ldaxr(v306);
            while (__stlxr(v307 - 1, v306));
            if (!v307)
            {
              ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
              std::__shared_weak_count::__release_weak(v305);
            }
          }
          MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<MIL::Fp16>((uint64_t *)&v636, v296, v298, (char **)&v617);
          if (v636.__r_.__value_.__r.__words[0])
          {
            v636.__r_.__value_.__l.__size_ = v636.__r_.__value_.__r.__words[0];
            operator delete(v636.__r_.__value_.__l.__data_);
          }
          if (v637.__r_.__value_.__r.__words[0])
          {
            v637.__r_.__value_.__l.__size_ = v637.__r_.__value_.__r.__words[0];
            operator delete(v637.__r_.__value_.__l.__data_);
          }
          v123 = v634;
          if (!v634)
            goto LABEL_596;
          v308 = (unint64_t *)&v634->__shared_owners_;
          do
            v125 = __ldaxr(v308);
          while (__stlxr(v125 - 1, v308));
          break;
        case 9:
          v309 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v89);
          v311 = v310;
          v312 = MIL::IRTensorValue::GetDataView<signed char>(v94);
          v313 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(v98);
          v633 = v102;
          v634 = (std::__shared_weak_count *)v101;
          v609 = 0;
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<signed char>(v312, v309, v311, &v637);
          v314 = v637.__r_.__value_.__l.__size_ - v637.__r_.__value_.__r.__words[0];
          if (v637.__r_.__value_.__l.__size_ == v637.__r_.__value_.__r.__words[0])
            v315 = 0;
          else
            v315 = v637.__r_.__value_.__r.__words[0];
          v635.__r_.__value_.__r.__words[0] = (std::string::size_type)v102;
          v635.__r_.__value_.__l.__size_ = v101;
          if (v101)
          {
            v316 = (unint64_t *)(v101 + 8);
            do
              v317 = __ldxr(v316);
            while (__stxr(v317 + 1, v316));
          }
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Fp16,signed char>(v315, v314, v313, (uint64_t **)&v635, (unint64_t **)&v624, (uint64_t *)&v636);
          v318 = (std::__shared_weak_count *)v635.__r_.__value_.__l.__size_;
          if (v635.__r_.__value_.__l.__size_)
          {
            v319 = (unint64_t *)(v635.__r_.__value_.__l.__size_ + 8);
            do
              v320 = __ldaxr(v319);
            while (__stlxr(v320 - 1, v319));
            if (!v320)
            {
              ((void (*)(std::__shared_weak_count *))v318->__on_zero_shared)(v318);
              std::__shared_weak_count::__release_weak(v318);
            }
          }
          MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<MIL::Fp16>((uint64_t *)&v636, v309, v311, (char **)&v617);
          if (v636.__r_.__value_.__r.__words[0])
          {
            v636.__r_.__value_.__l.__size_ = v636.__r_.__value_.__r.__words[0];
            operator delete(v636.__r_.__value_.__l.__data_);
          }
          if (v637.__r_.__value_.__r.__words[0])
          {
            v637.__r_.__value_.__l.__size_ = v637.__r_.__value_.__r.__words[0];
            operator delete(v637.__r_.__value_.__l.__data_);
          }
          v123 = v634;
          if (!v634)
            goto LABEL_596;
          v321 = (unint64_t *)&v634->__shared_owners_;
          do
            v125 = __ldaxr(v321);
          while (__stlxr(v125 - 1, v321));
          break;
        case 13:
          v173 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v89);
          v175 = v174;
          v176 = MIL::IRTensorValue::GetDataView<MIL::Int4>(v94);
          v178 = v177;
          v179 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(v98);
          v622 = v102;
          v623 = (std::__shared_weak_count *)v101;
          v609 = 0;
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::Int4>(v176, v178, v173, v175, &v637);
          MIL::PackSubByteVec((uint64_t *)&v637, &v636);
          if (v636.__r_.__value_.__l.__size_ == v636.__r_.__value_.__r.__words[0])
            v180 = 0;
          else
            v180 = v636.__r_.__value_.__r.__words[0];
          MIL::Util::CastToBitSpan<MIL::Int4 const,unsigned char,true>(v180, v636.__r_.__value_.__l.__size_ - v636.__r_.__value_.__r.__words[0], v637.__r_.__value_.__l.__size_ - v637.__r_.__value_.__r.__words[0]);
          v633 = v102;
          v634 = (std::__shared_weak_count *)v101;
          if (v101)
          {
            v183 = (unint64_t *)(v101 + 8);
            do
              v184 = __ldxr(v183);
            while (__stxr(v184 + 1, v183));
          }
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Fp16,MIL::Int4>(v181, v182, v179, &v633, (unint64_t **)&v624, (uint64_t *)&v635);
          v185 = v634;
          if (v634)
          {
            v186 = (unint64_t *)&v634->__shared_owners_;
            do
              v187 = __ldaxr(v186);
            while (__stlxr(v187 - 1, v186));
            if (!v187)
            {
              ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
              std::__shared_weak_count::__release_weak(v185);
            }
          }
          MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<MIL::Fp16>((uint64_t *)&v635, v173, v175, (char **)&v617);
          if (v635.__r_.__value_.__r.__words[0])
          {
            v635.__r_.__value_.__l.__size_ = v635.__r_.__value_.__r.__words[0];
            operator delete(v635.__r_.__value_.__l.__data_);
          }
          if (v636.__r_.__value_.__r.__words[0])
          {
            v636.__r_.__value_.__l.__size_ = v636.__r_.__value_.__r.__words[0];
            operator delete(v636.__r_.__value_.__l.__data_);
          }
          if (v637.__r_.__value_.__r.__words[0])
          {
            v637.__r_.__value_.__l.__size_ = v637.__r_.__value_.__r.__words[0];
            operator delete(v637.__r_.__value_.__l.__data_);
          }
          v123 = v623;
          if (!v623)
            goto LABEL_596;
          v188 = (unint64_t *)&v623->__shared_owners_;
          do
            v125 = __ldaxr(v188);
          while (__stlxr(v125 - 1, v188));
          break;
        case 14:
          v244 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v89);
          v246 = v245;
          v247 = MIL::IRTensorValue::GetDataView<unsigned char>(v94);
          v248 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(v98);
          v633 = v102;
          v634 = (std::__shared_weak_count *)v101;
          v609 = 0;
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<unsigned char>(v247, v244, v246, &v637);
          v249 = v637.__r_.__value_.__l.__size_ - v637.__r_.__value_.__r.__words[0];
          if (v637.__r_.__value_.__l.__size_ == v637.__r_.__value_.__r.__words[0])
            v250 = 0;
          else
            v250 = v637.__r_.__value_.__r.__words[0];
          v635.__r_.__value_.__r.__words[0] = (std::string::size_type)v102;
          v635.__r_.__value_.__l.__size_ = v101;
          if (v101)
          {
            v251 = (unint64_t *)(v101 + 8);
            do
              v252 = __ldxr(v251);
            while (__stxr(v252 + 1, v251));
          }
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Fp16,unsigned char>(v250, v249, v248, (uint64_t **)&v635, (unint64_t **)&v624, (uint64_t *)&v636);
          v253 = (std::__shared_weak_count *)v635.__r_.__value_.__l.__size_;
          if (v635.__r_.__value_.__l.__size_)
          {
            v254 = (unint64_t *)(v635.__r_.__value_.__l.__size_ + 8);
            do
              v255 = __ldaxr(v254);
            while (__stlxr(v255 - 1, v254));
            if (!v255)
            {
              ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
              std::__shared_weak_count::__release_weak(v253);
            }
          }
          MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<MIL::Fp16>((uint64_t *)&v636, v244, v246, (char **)&v617);
          if (v636.__r_.__value_.__r.__words[0])
          {
            v636.__r_.__value_.__l.__size_ = v636.__r_.__value_.__r.__words[0];
            operator delete(v636.__r_.__value_.__l.__data_);
          }
          if (v637.__r_.__value_.__r.__words[0])
          {
            v637.__r_.__value_.__l.__size_ = v637.__r_.__value_.__r.__words[0];
            operator delete(v637.__r_.__value_.__l.__data_);
          }
          v123 = v634;
          if (!v634)
            goto LABEL_596;
          v256 = (unint64_t *)&v634->__shared_owners_;
          do
            v125 = __ldaxr(v256);
          while (__stlxr(v125 - 1, v256));
          break;
        case 20:
          v364 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v89);
          v366 = v365;
          v367 = MIL::IRTensorValue::GetDataView<MIL::UInt4>(v94);
          v369 = v368;
          v370 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(v98);
          v622 = v102;
          v623 = (std::__shared_weak_count *)v101;
          v609 = 0;
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::UInt4>(v367, v369, v364, v366, &v637);
          MIL::PackSubByteVec((uint64_t *)&v637, &v636);
          if (v636.__r_.__value_.__l.__size_ == v636.__r_.__value_.__r.__words[0])
            v371 = 0;
          else
            v371 = v636.__r_.__value_.__r.__words[0];
          MIL::Util::CastToBitSpan<MIL::UInt4 const,unsigned char,true>(v371, v636.__r_.__value_.__l.__size_ - v636.__r_.__value_.__r.__words[0], v637.__r_.__value_.__l.__size_ - v637.__r_.__value_.__r.__words[0]);
          v633 = v102;
          v634 = (std::__shared_weak_count *)v101;
          if (v101)
          {
            v374 = (unint64_t *)(v101 + 8);
            do
              v375 = __ldxr(v374);
            while (__stxr(v375 + 1, v374));
          }
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Fp16,MIL::UInt4>(v372, v373, v370, &v633, (unint64_t **)&v624, (uint64_t *)&v635);
          v376 = v634;
          if (v634)
          {
            v377 = (unint64_t *)&v634->__shared_owners_;
            do
              v378 = __ldaxr(v377);
            while (__stlxr(v378 - 1, v377));
            if (!v378)
            {
              ((void (*)(std::__shared_weak_count *))v376->__on_zero_shared)(v376);
              std::__shared_weak_count::__release_weak(v376);
            }
          }
          MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<MIL::Fp16>((uint64_t *)&v635, v364, v366, (char **)&v617);
          if (v635.__r_.__value_.__r.__words[0])
          {
            v635.__r_.__value_.__l.__size_ = v635.__r_.__value_.__r.__words[0];
            operator delete(v635.__r_.__value_.__l.__data_);
          }
          if (v636.__r_.__value_.__r.__words[0])
          {
            v636.__r_.__value_.__l.__size_ = v636.__r_.__value_.__r.__words[0];
            operator delete(v636.__r_.__value_.__l.__data_);
          }
          if (v637.__r_.__value_.__r.__words[0])
          {
            v637.__r_.__value_.__l.__size_ = v637.__r_.__value_.__r.__words[0];
            operator delete(v637.__r_.__value_.__l.__data_);
          }
          v123 = v623;
          if (!v623)
            goto LABEL_596;
          v379 = (unint64_t *)&v623->__shared_owners_;
          do
            v125 = __ldaxr(v379);
          while (__stlxr(v125 - 1, v379));
          break;
        default:
          v580 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          MIL::IRDataTypeToString(v110, &v635);
          v581 = std::string::insert(&v635, 0, "Constexpr-SparseBlockwiseShiftScale: Unsupported dType (");
          v582 = *(_OWORD *)&v581->__r_.__value_.__l.__data_;
          v636.__r_.__value_.__r.__words[2] = v581->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v636.__r_.__value_.__l.__data_ = v582;
          v581->__r_.__value_.__l.__size_ = 0;
          v581->__r_.__value_.__r.__words[2] = 0;
          v581->__r_.__value_.__r.__words[0] = 0;
          v583 = std::string::append(&v636, ") for data.");
          v584 = *(_OWORD *)&v583->__r_.__value_.__l.__data_;
          v637.__r_.__value_.__r.__words[2] = v583->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v637.__r_.__value_.__l.__data_ = v584;
          v583->__r_.__value_.__l.__size_ = 0;
          v583->__r_.__value_.__r.__words[2] = 0;
          v583->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v580, &v637);
          __cxa_throw(v580, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      if (!v125)
      {
        ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
        std::__shared_weak_count::__release_weak(v123);
      }
    }
    else
    {
      switch(v110)
      {
        case 4:
          v132 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v89);
          v134 = v133;
          v135 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(v94);
          v136 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(v98);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::Fp16>(v135, v132, v134, (uint64_t *)&v637);
          if (v637.__r_.__value_.__l.__size_ == v637.__r_.__value_.__r.__words[0])
            v137 = 0;
          else
            v137 = (MIL::Fp16 *)v637.__r_.__value_.__r.__words[0];
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Fp16,MIL::Fp16>(v137, (uint64_t)(v637.__r_.__value_.__l.__size_ - v637.__r_.__value_.__r.__words[0]) >> 1, v136, (unint64_t **)&v624, (uint64_t *)&v636);
          MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<MIL::Fp16>((uint64_t *)&v636, v132, v134, (char **)&v617);
          goto LABEL_592;
        case 5:
          v422 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v89);
          v424 = v423;
          v425 = MIL::IRTensorValue::GetDataView<float>(v94);
          v426 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(v98);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<float>(v425, v422, v424, (uint64_t *)&v637);
          if (v637.__r_.__value_.__l.__size_ == v637.__r_.__value_.__r.__words[0])
            v427 = 0;
          else
            v427 = v637.__r_.__value_.__r.__words[0];
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Fp16,float>(v427, (uint64_t)(v637.__r_.__value_.__l.__size_ - v637.__r_.__value_.__r.__words[0]) >> 2, v426, (unint64_t **)&v624, (uint64_t *)&v636);
          MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<MIL::Fp16>((uint64_t *)&v636, v422, v424, (char **)&v617);
          goto LABEL_592;
        case 7:
          v474 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v89);
          v476 = v475;
          v477 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(v94);
          v478 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(v98);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::Bf16>(v477, v474, v476, (uint64_t *)&v637);
          if (v637.__r_.__value_.__l.__size_ == v637.__r_.__value_.__r.__words[0])
            v479 = 0;
          else
            v479 = (MIL::Bf16 *)v637.__r_.__value_.__r.__words[0];
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Fp16,MIL::Bf16>(v479, (uint64_t)(v637.__r_.__value_.__l.__size_ - v637.__r_.__value_.__r.__words[0]) >> 1, v478, (unint64_t **)&v624, (uint64_t *)&v636);
          MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<MIL::Fp16>((uint64_t *)&v636, v474, v476, (char **)&v617);
          goto LABEL_592;
        case 9:
          v480 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v89);
          v482 = v481;
          v483 = MIL::IRTensorValue::GetDataView<signed char>(v94);
          v484 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(v98);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<signed char>(v483, v480, v482, &v637);
          if (v637.__r_.__value_.__l.__size_ == v637.__r_.__value_.__r.__words[0])
            v485 = 0;
          else
            v485 = v637.__r_.__value_.__r.__words[0];
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Fp16,signed char>(v485, v637.__r_.__value_.__l.__size_ - v637.__r_.__value_.__r.__words[0], v484, (unint64_t **)&v624, (uint64_t *)&v636);
          MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<MIL::Fp16>((uint64_t *)&v636, v480, v482, (char **)&v617);
          goto LABEL_592;
        case 13:
          v412 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v89);
          v414 = v413;
          v415 = MIL::IRTensorValue::GetDataView<MIL::Int4>(v94);
          v417 = v416;
          v418 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(v98);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::Int4>(v415, v417, v412, v414, &v637);
          MIL::PackSubByteVec((uint64_t *)&v637, &v636);
          if (v636.__r_.__value_.__l.__size_ == v636.__r_.__value_.__r.__words[0])
            v419 = 0;
          else
            v419 = v636.__r_.__value_.__r.__words[0];
          MIL::Util::CastToBitSpan<MIL::Int4 const,unsigned char,true>(v419, v636.__r_.__value_.__l.__size_ - v636.__r_.__value_.__r.__words[0], v637.__r_.__value_.__l.__size_ - v637.__r_.__value_.__r.__words[0]);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Fp16,MIL::Int4>(v420, v421, v418, (unint64_t **)&v624, (uint64_t *)&v635);
          MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<MIL::Fp16>((uint64_t *)&v635, v412, v414, (char **)&v617);
          goto LABEL_590;
        case 14:
          v450 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v89);
          v452 = v451;
          v453 = MIL::IRTensorValue::GetDataView<unsigned char>(v94);
          v454 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(v98);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<unsigned char>(v453, v450, v452, &v637);
          if (v637.__r_.__value_.__l.__size_ == v637.__r_.__value_.__r.__words[0])
            v455 = 0;
          else
            v455 = v637.__r_.__value_.__r.__words[0];
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Fp16,unsigned char>(v455, v637.__r_.__value_.__l.__size_ - v637.__r_.__value_.__r.__words[0], v454, (unint64_t **)&v624, (uint64_t *)&v636);
          MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<MIL::Fp16>((uint64_t *)&v636, v450, v452, (char **)&v617);
          goto LABEL_592;
        case 20:
          v520 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v89);
          v522 = v521;
          v523 = MIL::IRTensorValue::GetDataView<MIL::UInt4>(v94);
          v525 = v524;
          v526 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(v98);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::UInt4>(v523, v525, v520, v522, &v637);
          MIL::PackSubByteVec((uint64_t *)&v637, &v636);
          if (v636.__r_.__value_.__l.__size_ == v636.__r_.__value_.__r.__words[0])
            v527 = 0;
          else
            v527 = v636.__r_.__value_.__r.__words[0];
          MIL::Util::CastToBitSpan<MIL::UInt4 const,unsigned char,true>(v527, v636.__r_.__value_.__l.__size_ - v636.__r_.__value_.__r.__words[0], v637.__r_.__value_.__l.__size_ - v637.__r_.__value_.__r.__words[0]);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Fp16,MIL::UInt4>(v528, v529, v526, (unint64_t **)&v624, (uint64_t *)&v635);
          MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<MIL::Fp16>((uint64_t *)&v635, v520, v522, (char **)&v617);
LABEL_590:
          if (v635.__r_.__value_.__r.__words[0])
          {
            v635.__r_.__value_.__l.__size_ = v635.__r_.__value_.__r.__words[0];
            operator delete(v635.__r_.__value_.__l.__data_);
          }
LABEL_592:
          if (v636.__r_.__value_.__r.__words[0])
          {
            v636.__r_.__value_.__l.__size_ = v636.__r_.__value_.__r.__words[0];
            operator delete(v636.__r_.__value_.__l.__data_);
          }
          if (v637.__r_.__value_.__r.__words[0])
          {
            v637.__r_.__value_.__l.__size_ = v637.__r_.__value_.__r.__words[0];
            operator delete(v637.__r_.__value_.__l.__data_);
          }
          break;
        default:
          v595 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          MIL::IRDataTypeToString(v110, &v635);
          v596 = std::string::insert(&v635, 0, "Constexpr-SparseBlockwiseShiftScale: Unsupported dType (");
          v597 = *(_OWORD *)&v596->__r_.__value_.__l.__data_;
          v636.__r_.__value_.__r.__words[2] = v596->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v636.__r_.__value_.__l.__data_ = v597;
          v596->__r_.__value_.__l.__size_ = 0;
          v596->__r_.__value_.__r.__words[2] = 0;
          v596->__r_.__value_.__r.__words[0] = 0;
          v598 = std::string::append(&v636, ") for data.");
          v599 = *(_OWORD *)&v598->__r_.__value_.__l.__data_;
          v637.__r_.__value_.__r.__words[2] = v598->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v637.__r_.__value_.__l.__data_ = v599;
          v598->__r_.__value_.__l.__size_ = 0;
          v598->__r_.__value_.__r.__words[2] = 0;
          v598->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v595, &v637);
          __cxa_throw(v595, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
    }
LABEL_596:
    if (__p)
    {
      v628 = __p;
      operator delete(__p);
    }
    if (v625)
    {
      v626 = v625;
      operator delete(v625);
    }
    if (v624.__r_.__value_.__r.__words[0])
    {
      v624.__r_.__value_.__l.__size_ = v624.__r_.__value_.__r.__words[0];
      operator delete(v624.__r_.__value_.__l.__data_);
    }
    if (v629)
    {
      v630 = v629;
      operator delete(v629);
    }
    if (v631)
    {
      v632 = v631;
      operator delete(v631);
    }
    MIL::IRTensorValueType::MakeFloat16Value(v88, (uint64_t)&v617, &v619);
    v530 = v619;
    *a3 = v619;
    if (v530)
    {
      v531 = (_QWORD *)operator new();
      v532 = v619;
      *v531 = &unk_1EA992A68;
      v531[1] = 0;
      v531[2] = 0;
      v531[3] = v532;
    }
    else
    {
      v531 = 0;
    }
    a3[1] = v531;
    v619 = 0;
    if (v617)
    {
      v618 = v617;
      operator delete(v617);
    }
    if (v609)
    {
      v533 = (unint64_t *)&v609->__shared_owners_;
      do
        v534 = __ldaxr(v533);
      while (__stlxr(v534 - 1, v533));
      if (!v534)
      {
        ((void (*)(std::__shared_weak_count *))v609->__on_zero_shared)(v609);
        std::__shared_weak_count::__release_weak(v609);
      }
    }
    if (v610)
    {
      v535 = (unint64_t *)&v610->__shared_owners_;
      do
        v536 = __ldaxr(v535);
      while (__stlxr(v536 - 1, v535));
      if (!v536)
      {
        ((void (*)(std::__shared_weak_count *))v610->__on_zero_shared)(v610);
        std::__shared_weak_count::__release_weak(v610);
      }
    }
    if (v611)
    {
      v537 = (unint64_t *)&v611->__shared_owners_;
      do
        v538 = __ldaxr(v537);
      while (__stlxr(v538 - 1, v537));
      if (!v538)
      {
        ((void (*)(std::__shared_weak_count *))v611->__on_zero_shared)(v611);
        std::__shared_weak_count::__release_weak(v611);
      }
    }
    v517 = v612;
    if (!v612)
      goto LABEL_675;
    v539 = (unint64_t *)&v612->__shared_owners_;
    do
      v519 = __ldaxr(v539);
    while (__stlxr(v519 - 1, v539));
LABEL_673:
    if (!v519)
    {
      ((void (*)(std::__shared_weak_count *))v517->__on_zero_shared)(v517);
      std::__shared_weak_count::__release_weak(v517);
    }
    goto LABEL_675;
  }
  if (v10 == 5)
  {
    v50 = *((_QWORD *)this + 1);
    v51 = (const void *)*((_QWORD *)this + 2);
    v52 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    v608 = v52;
    if (v52)
    {
      v53 = (unint64_t *)&v52->__shared_owners_;
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    v56 = (uint64_t *)*((_QWORD *)this + 4);
    v55 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
    v607 = v55;
    if (v55)
    {
      v57 = (unint64_t *)&v55->__shared_owners_;
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
    }
    v60 = (uint64_t *)*((_QWORD *)this + 6);
    v59 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
    v606 = v59;
    if (v59)
    {
      v61 = (unint64_t *)&v59->__shared_owners_;
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
    }
    v64 = (uint64_t *)*((_QWORD *)this + 8);
    v63 = *((_QWORD *)this + 9);
    v605 = (std::__shared_weak_count *)v63;
    if (v63)
    {
      v65 = (unint64_t *)(v63 + 8);
      do
        v66 = __ldxr(v65);
      while (__stxr(v66 + 1, v65));
    }
    v67 = (*(uint64_t (**)(const void *))(*(_QWORD *)v51 + 32))(v51);
    v68 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 96))(v67);
    MIL::Operators::Common::Shared::ConstExprs::ShapeToVector(v68, &v631);
    v69 = (*(uint64_t (**)(uint64_t *))(*v60 + 32))(v60);
    v70 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v69 + 96))(v69);
    MIL::Operators::Common::Shared::ConstExprs::ShapeToVector(v70, &v629);
    MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::BlockwiseShiftScaleIndexConverter(&v624, &v631, &v629);
    v71 = (*(uint64_t (**)(uint64_t *))(*v56 + 32))(v56);
    v72 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v71 + 88))(v71);
    if (v64)
    {
      switch(v72)
      {
        case 4:
          v73 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v51);
          v75 = v74;
          v76 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(v56);
          v77 = MIL::IRTensorValue::GetDataView<float>(v60);
          v633 = v64;
          v634 = (std::__shared_weak_count *)v63;
          v605 = 0;
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::Fp16>(v76, v73, v75, (uint64_t *)&v637);
          v78 = (uint64_t)(v637.__r_.__value_.__l.__size_ - v637.__r_.__value_.__r.__words[0]) >> 1;
          if (v637.__r_.__value_.__l.__size_ == v637.__r_.__value_.__r.__words[0])
            v79 = 0;
          else
            v79 = (MIL::Fp16 *)v637.__r_.__value_.__r.__words[0];
          v635.__r_.__value_.__r.__words[0] = (std::string::size_type)v64;
          v635.__r_.__value_.__l.__size_ = v63;
          if (v63)
          {
            v80 = (unint64_t *)(v63 + 8);
            do
              v81 = __ldxr(v80);
            while (__stxr(v81 + 1, v80));
          }
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<float,MIL::Fp16>(v79, v78, v77, (uint64_t **)&v635, (unint64_t **)&v624, (uint64_t *)&v636);
          v82 = (std::__shared_weak_count *)v635.__r_.__value_.__l.__size_;
          if (v635.__r_.__value_.__l.__size_)
          {
            v83 = (unint64_t *)(v635.__r_.__value_.__l.__size_ + 8);
            do
              v84 = __ldaxr(v83);
            while (__stlxr(v84 - 1, v83));
            if (!v84)
            {
              ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
              std::__shared_weak_count::__release_weak(v82);
            }
          }
          MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<float>((uint64_t *)&v636, v73, v75, (char **)&v617);
          if (v636.__r_.__value_.__r.__words[0])
          {
            v636.__r_.__value_.__l.__size_ = v636.__r_.__value_.__r.__words[0];
            operator delete(v636.__r_.__value_.__l.__data_);
          }
          if (v637.__r_.__value_.__r.__words[0])
          {
            v637.__r_.__value_.__l.__size_ = v637.__r_.__value_.__r.__words[0];
            operator delete(v637.__r_.__value_.__l.__data_);
          }
          v85 = v634;
          if (!v634)
            goto LABEL_552;
          v86 = (unint64_t *)&v634->__shared_owners_;
          do
            v87 = __ldaxr(v86);
          while (__stlxr(v87 - 1, v86));
          break;
        case 5:
          v160 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v51);
          v162 = v161;
          v163 = MIL::IRTensorValue::GetDataView<float>(v56);
          v164 = MIL::IRTensorValue::GetDataView<float>(v60);
          v633 = v64;
          v634 = (std::__shared_weak_count *)v63;
          v605 = 0;
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<float>(v163, v160, v162, (uint64_t *)&v637);
          v165 = (uint64_t)(v637.__r_.__value_.__l.__size_ - v637.__r_.__value_.__r.__words[0]) >> 2;
          if (v637.__r_.__value_.__l.__size_ == v637.__r_.__value_.__r.__words[0])
            v166 = 0;
          else
            v166 = v637.__r_.__value_.__r.__words[0];
          v635.__r_.__value_.__r.__words[0] = (std::string::size_type)v64;
          v635.__r_.__value_.__l.__size_ = v63;
          if (v63)
          {
            v167 = (unint64_t *)(v63 + 8);
            do
              v168 = __ldxr(v167);
            while (__stxr(v168 + 1, v167));
          }
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<float,float>(v166, v165, v164, (uint64_t **)&v635, (unint64_t **)&v624, (uint64_t *)&v636);
          v169 = (std::__shared_weak_count *)v635.__r_.__value_.__l.__size_;
          if (v635.__r_.__value_.__l.__size_)
          {
            v170 = (unint64_t *)(v635.__r_.__value_.__l.__size_ + 8);
            do
              v171 = __ldaxr(v170);
            while (__stlxr(v171 - 1, v170));
            if (!v171)
            {
              ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
              std::__shared_weak_count::__release_weak(v169);
            }
          }
          MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<float>((uint64_t *)&v636, v160, v162, (char **)&v617);
          if (v636.__r_.__value_.__r.__words[0])
          {
            v636.__r_.__value_.__l.__size_ = v636.__r_.__value_.__r.__words[0];
            operator delete(v636.__r_.__value_.__l.__data_);
          }
          if (v637.__r_.__value_.__r.__words[0])
          {
            v637.__r_.__value_.__l.__size_ = v637.__r_.__value_.__r.__words[0];
            operator delete(v637.__r_.__value_.__l.__data_);
          }
          v85 = v634;
          if (!v634)
            goto LABEL_552;
          v172 = (unint64_t *)&v634->__shared_owners_;
          do
            v87 = __ldaxr(v172);
          while (__stlxr(v87 - 1, v172));
          break;
        case 7:
          v257 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v51);
          v259 = v258;
          v260 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(v56);
          v261 = MIL::IRTensorValue::GetDataView<float>(v60);
          v633 = v64;
          v634 = (std::__shared_weak_count *)v63;
          v605 = 0;
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::Bf16>(v260, v257, v259, (uint64_t *)&v637);
          v262 = (uint64_t)(v637.__r_.__value_.__l.__size_ - v637.__r_.__value_.__r.__words[0]) >> 1;
          if (v637.__r_.__value_.__l.__size_ == v637.__r_.__value_.__r.__words[0])
            v263 = 0;
          else
            v263 = (MIL::Bf16 *)v637.__r_.__value_.__r.__words[0];
          v635.__r_.__value_.__r.__words[0] = (std::string::size_type)v64;
          v635.__r_.__value_.__l.__size_ = v63;
          if (v63)
          {
            v264 = (unint64_t *)(v63 + 8);
            do
              v265 = __ldxr(v264);
            while (__stxr(v265 + 1, v264));
          }
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<float,MIL::Bf16>(v263, v262, v261, (uint64_t **)&v635, (unint64_t **)&v624, (uint64_t *)&v636);
          v266 = (std::__shared_weak_count *)v635.__r_.__value_.__l.__size_;
          if (v635.__r_.__value_.__l.__size_)
          {
            v267 = (unint64_t *)(v635.__r_.__value_.__l.__size_ + 8);
            do
              v268 = __ldaxr(v267);
            while (__stlxr(v268 - 1, v267));
            if (!v268)
            {
              ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
              std::__shared_weak_count::__release_weak(v266);
            }
          }
          MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<float>((uint64_t *)&v636, v257, v259, (char **)&v617);
          if (v636.__r_.__value_.__r.__words[0])
          {
            v636.__r_.__value_.__l.__size_ = v636.__r_.__value_.__r.__words[0];
            operator delete(v636.__r_.__value_.__l.__data_);
          }
          if (v637.__r_.__value_.__r.__words[0])
          {
            v637.__r_.__value_.__l.__size_ = v637.__r_.__value_.__r.__words[0];
            operator delete(v637.__r_.__value_.__l.__data_);
          }
          v85 = v634;
          if (!v634)
            goto LABEL_552;
          v269 = (unint64_t *)&v634->__shared_owners_;
          do
            v87 = __ldaxr(v269);
          while (__stlxr(v87 - 1, v269));
          break;
        case 9:
          v283 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v51);
          v285 = v284;
          v286 = MIL::IRTensorValue::GetDataView<signed char>(v56);
          v287 = MIL::IRTensorValue::GetDataView<float>(v60);
          v633 = v64;
          v634 = (std::__shared_weak_count *)v63;
          v605 = 0;
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<signed char>(v286, v283, v285, &v637);
          v288 = v637.__r_.__value_.__l.__size_ - v637.__r_.__value_.__r.__words[0];
          if (v637.__r_.__value_.__l.__size_ == v637.__r_.__value_.__r.__words[0])
            v289 = 0;
          else
            v289 = v637.__r_.__value_.__r.__words[0];
          v635.__r_.__value_.__r.__words[0] = (std::string::size_type)v64;
          v635.__r_.__value_.__l.__size_ = v63;
          if (v63)
          {
            v290 = (unint64_t *)(v63 + 8);
            do
              v291 = __ldxr(v290);
            while (__stxr(v291 + 1, v290));
          }
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<float,signed char>(v289, v288, v287, (uint64_t **)&v635, (unint64_t **)&v624, (uint64_t *)&v636);
          v292 = (std::__shared_weak_count *)v635.__r_.__value_.__l.__size_;
          if (v635.__r_.__value_.__l.__size_)
          {
            v293 = (unint64_t *)(v635.__r_.__value_.__l.__size_ + 8);
            do
              v294 = __ldaxr(v293);
            while (__stlxr(v294 - 1, v293));
            if (!v294)
            {
              ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
              std::__shared_weak_count::__release_weak(v292);
            }
          }
          MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<float>((uint64_t *)&v636, v283, v285, (char **)&v617);
          if (v636.__r_.__value_.__r.__words[0])
          {
            v636.__r_.__value_.__l.__size_ = v636.__r_.__value_.__r.__words[0];
            operator delete(v636.__r_.__value_.__l.__data_);
          }
          if (v637.__r_.__value_.__r.__words[0])
          {
            v637.__r_.__value_.__l.__size_ = v637.__r_.__value_.__r.__words[0];
            operator delete(v637.__r_.__value_.__l.__data_);
          }
          v85 = v634;
          if (!v634)
            goto LABEL_552;
          v295 = (unint64_t *)&v634->__shared_owners_;
          do
            v87 = __ldaxr(v295);
          while (__stlxr(v87 - 1, v295));
          break;
        case 13:
          v144 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v51);
          v146 = v145;
          v147 = MIL::IRTensorValue::GetDataView<MIL::Int4>(v56);
          v149 = v148;
          v150 = MIL::IRTensorValue::GetDataView<float>(v60);
          v622 = v64;
          v623 = (std::__shared_weak_count *)v63;
          v605 = 0;
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::Int4>(v147, v149, v144, v146, &v637);
          MIL::PackSubByteVec((uint64_t *)&v637, &v636);
          if (v636.__r_.__value_.__l.__size_ == v636.__r_.__value_.__r.__words[0])
            v151 = 0;
          else
            v151 = v636.__r_.__value_.__r.__words[0];
          MIL::Util::CastToBitSpan<MIL::Int4 const,unsigned char,true>(v151, v636.__r_.__value_.__l.__size_ - v636.__r_.__value_.__r.__words[0], v637.__r_.__value_.__l.__size_ - v637.__r_.__value_.__r.__words[0]);
          v633 = v64;
          v634 = (std::__shared_weak_count *)v63;
          if (v63)
          {
            v154 = (unint64_t *)(v63 + 8);
            do
              v155 = __ldxr(v154);
            while (__stxr(v155 + 1, v154));
          }
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<float,MIL::Int4>(v152, v153, v150, &v633, (unint64_t **)&v624, (uint64_t *)&v635);
          v156 = v634;
          if (v634)
          {
            v157 = (unint64_t *)&v634->__shared_owners_;
            do
              v158 = __ldaxr(v157);
            while (__stlxr(v158 - 1, v157));
            if (!v158)
            {
              ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
              std::__shared_weak_count::__release_weak(v156);
            }
          }
          MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<float>((uint64_t *)&v635, v144, v146, (char **)&v617);
          if (v635.__r_.__value_.__r.__words[0])
          {
            v635.__r_.__value_.__l.__size_ = v635.__r_.__value_.__r.__words[0];
            operator delete(v635.__r_.__value_.__l.__data_);
          }
          if (v636.__r_.__value_.__r.__words[0])
          {
            v636.__r_.__value_.__l.__size_ = v636.__r_.__value_.__r.__words[0];
            operator delete(v636.__r_.__value_.__l.__data_);
          }
          if (v637.__r_.__value_.__r.__words[0])
          {
            v637.__r_.__value_.__l.__size_ = v637.__r_.__value_.__r.__words[0];
            operator delete(v637.__r_.__value_.__l.__data_);
          }
          v85 = v623;
          if (!v623)
            goto LABEL_552;
          v159 = (unint64_t *)&v623->__shared_owners_;
          do
            v87 = __ldaxr(v159);
          while (__stlxr(v87 - 1, v159));
          break;
        case 14:
          v202 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v51);
          v204 = v203;
          v205 = MIL::IRTensorValue::GetDataView<unsigned char>(v56);
          v206 = MIL::IRTensorValue::GetDataView<float>(v60);
          v633 = v64;
          v634 = (std::__shared_weak_count *)v63;
          v605 = 0;
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<unsigned char>(v205, v202, v204, &v637);
          v207 = v637.__r_.__value_.__l.__size_ - v637.__r_.__value_.__r.__words[0];
          if (v637.__r_.__value_.__l.__size_ == v637.__r_.__value_.__r.__words[0])
            v208 = 0;
          else
            v208 = v637.__r_.__value_.__r.__words[0];
          v635.__r_.__value_.__r.__words[0] = (std::string::size_type)v64;
          v635.__r_.__value_.__l.__size_ = v63;
          if (v63)
          {
            v209 = (unint64_t *)(v63 + 8);
            do
              v210 = __ldxr(v209);
            while (__stxr(v210 + 1, v209));
          }
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<float,unsigned char>(v208, v207, v206, (uint64_t **)&v635, (unint64_t **)&v624, (uint64_t *)&v636);
          v211 = (std::__shared_weak_count *)v635.__r_.__value_.__l.__size_;
          if (v635.__r_.__value_.__l.__size_)
          {
            v212 = (unint64_t *)(v635.__r_.__value_.__l.__size_ + 8);
            do
              v213 = __ldaxr(v212);
            while (__stlxr(v213 - 1, v212));
            if (!v213)
            {
              ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
              std::__shared_weak_count::__release_weak(v211);
            }
          }
          MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<float>((uint64_t *)&v636, v202, v204, (char **)&v617);
          if (v636.__r_.__value_.__r.__words[0])
          {
            v636.__r_.__value_.__l.__size_ = v636.__r_.__value_.__r.__words[0];
            operator delete(v636.__r_.__value_.__l.__data_);
          }
          if (v637.__r_.__value_.__r.__words[0])
          {
            v637.__r_.__value_.__l.__size_ = v637.__r_.__value_.__r.__words[0];
            operator delete(v637.__r_.__value_.__l.__data_);
          }
          v85 = v634;
          if (!v634)
            goto LABEL_552;
          v214 = (unint64_t *)&v634->__shared_owners_;
          do
            v87 = __ldaxr(v214);
          while (__stlxr(v87 - 1, v214));
          break;
        case 20:
          v348 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v51);
          v350 = v349;
          v351 = MIL::IRTensorValue::GetDataView<MIL::UInt4>(v56);
          v353 = v352;
          v354 = MIL::IRTensorValue::GetDataView<float>(v60);
          v622 = v64;
          v623 = (std::__shared_weak_count *)v63;
          v605 = 0;
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::UInt4>(v351, v353, v348, v350, &v637);
          MIL::PackSubByteVec((uint64_t *)&v637, &v636);
          if (v636.__r_.__value_.__l.__size_ == v636.__r_.__value_.__r.__words[0])
            v355 = 0;
          else
            v355 = v636.__r_.__value_.__r.__words[0];
          MIL::Util::CastToBitSpan<MIL::UInt4 const,unsigned char,true>(v355, v636.__r_.__value_.__l.__size_ - v636.__r_.__value_.__r.__words[0], v637.__r_.__value_.__l.__size_ - v637.__r_.__value_.__r.__words[0]);
          v633 = v64;
          v634 = (std::__shared_weak_count *)v63;
          if (v63)
          {
            v358 = (unint64_t *)(v63 + 8);
            do
              v359 = __ldxr(v358);
            while (__stxr(v359 + 1, v358));
          }
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<float,MIL::UInt4>(v356, v357, v354, &v633, (unint64_t **)&v624, (uint64_t *)&v635);
          v360 = v634;
          if (v634)
          {
            v361 = (unint64_t *)&v634->__shared_owners_;
            do
              v362 = __ldaxr(v361);
            while (__stlxr(v362 - 1, v361));
            if (!v362)
            {
              ((void (*)(std::__shared_weak_count *))v360->__on_zero_shared)(v360);
              std::__shared_weak_count::__release_weak(v360);
            }
          }
          MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<float>((uint64_t *)&v635, v348, v350, (char **)&v617);
          if (v635.__r_.__value_.__r.__words[0])
          {
            v635.__r_.__value_.__l.__size_ = v635.__r_.__value_.__r.__words[0];
            operator delete(v635.__r_.__value_.__l.__data_);
          }
          if (v636.__r_.__value_.__r.__words[0])
          {
            v636.__r_.__value_.__l.__size_ = v636.__r_.__value_.__r.__words[0];
            operator delete(v636.__r_.__value_.__l.__data_);
          }
          if (v637.__r_.__value_.__r.__words[0])
          {
            v637.__r_.__value_.__l.__size_ = v637.__r_.__value_.__r.__words[0];
            operator delete(v637.__r_.__value_.__l.__data_);
          }
          v85 = v623;
          if (!v623)
            goto LABEL_552;
          v363 = (unint64_t *)&v623->__shared_owners_;
          do
            v87 = __ldaxr(v363);
          while (__stlxr(v87 - 1, v363));
          break;
        default:
          v575 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          MIL::IRDataTypeToString(v72, &v635);
          v576 = std::string::insert(&v635, 0, "Constexpr-SparseBlockwiseShiftScale: Unsupported dType (");
          v577 = *(_OWORD *)&v576->__r_.__value_.__l.__data_;
          v636.__r_.__value_.__r.__words[2] = v576->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v636.__r_.__value_.__l.__data_ = v577;
          v576->__r_.__value_.__l.__size_ = 0;
          v576->__r_.__value_.__r.__words[2] = 0;
          v576->__r_.__value_.__r.__words[0] = 0;
          v578 = std::string::append(&v636, ") for data.");
          v579 = *(_OWORD *)&v578->__r_.__value_.__l.__data_;
          v637.__r_.__value_.__r.__words[2] = v578->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v637.__r_.__value_.__l.__data_ = v579;
          v578->__r_.__value_.__l.__size_ = 0;
          v578->__r_.__value_.__r.__words[2] = 0;
          v578->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v575, &v637);
          __cxa_throw(v575, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
    }
    else
    {
      switch(v72)
      {
        case 4:
          v126 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v51);
          v128 = v127;
          v129 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(v56);
          v130 = MIL::IRTensorValue::GetDataView<float>(v60);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::Fp16>(v129, v126, v128, (uint64_t *)&v637);
          if (v637.__r_.__value_.__l.__size_ == v637.__r_.__value_.__r.__words[0])
            v131 = 0;
          else
            v131 = (MIL::Fp16 *)v637.__r_.__value_.__r.__words[0];
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<float,MIL::Fp16>(v131, (uint64_t)(v637.__r_.__value_.__l.__size_ - v637.__r_.__value_.__r.__words[0]) >> 1, v130, (unint64_t **)&v624, (uint64_t *)&v636);
          MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<float>((uint64_t *)&v636, v126, v128, (char **)&v617);
          goto LABEL_548;
        case 5:
          v406 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v51);
          v408 = v407;
          v409 = MIL::IRTensorValue::GetDataView<float>(v56);
          v410 = MIL::IRTensorValue::GetDataView<float>(v60);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<float>(v409, v406, v408, (uint64_t *)&v637);
          if (v637.__r_.__value_.__l.__size_ == v637.__r_.__value_.__r.__words[0])
            v411 = 0;
          else
            v411 = v637.__r_.__value_.__r.__words[0];
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<float,float>(v411, (uint64_t)(v637.__r_.__value_.__l.__size_ - v637.__r_.__value_.__r.__words[0]) >> 2, v410, (unint64_t **)&v624, (uint64_t *)&v636);
          MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<float>((uint64_t *)&v636, v406, v408, (char **)&v617);
          goto LABEL_548;
        case 7:
          v456 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v51);
          v458 = v457;
          v459 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(v56);
          v460 = MIL::IRTensorValue::GetDataView<float>(v60);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::Bf16>(v459, v456, v458, (uint64_t *)&v637);
          if (v637.__r_.__value_.__l.__size_ == v637.__r_.__value_.__r.__words[0])
            v461 = 0;
          else
            v461 = (MIL::Bf16 *)v637.__r_.__value_.__r.__words[0];
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<float,MIL::Bf16>(v461, (uint64_t)(v637.__r_.__value_.__l.__size_ - v637.__r_.__value_.__r.__words[0]) >> 1, v460, (unint64_t **)&v624, (uint64_t *)&v636);
          MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<float>((uint64_t *)&v636, v456, v458, (char **)&v617);
          goto LABEL_548;
        case 9:
          v468 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v51);
          v470 = v469;
          v471 = MIL::IRTensorValue::GetDataView<signed char>(v56);
          v472 = MIL::IRTensorValue::GetDataView<float>(v60);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<signed char>(v471, v468, v470, &v637);
          if (v637.__r_.__value_.__l.__size_ == v637.__r_.__value_.__r.__words[0])
            v473 = 0;
          else
            v473 = v637.__r_.__value_.__r.__words[0];
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<float,signed char>(v473, v637.__r_.__value_.__l.__size_ - v637.__r_.__value_.__r.__words[0], v472, (unint64_t **)&v624, (uint64_t *)&v636);
          MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<float>((uint64_t *)&v636, v468, v470, (char **)&v617);
          goto LABEL_548;
        case 13:
          v396 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v51);
          v398 = v397;
          v399 = MIL::IRTensorValue::GetDataView<MIL::Int4>(v56);
          v401 = v400;
          v402 = MIL::IRTensorValue::GetDataView<float>(v60);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::Int4>(v399, v401, v396, v398, &v637);
          MIL::PackSubByteVec((uint64_t *)&v637, &v636);
          if (v636.__r_.__value_.__l.__size_ == v636.__r_.__value_.__r.__words[0])
            v403 = 0;
          else
            v403 = v636.__r_.__value_.__r.__words[0];
          MIL::Util::CastToBitSpan<MIL::Int4 const,unsigned char,true>(v403, v636.__r_.__value_.__l.__size_ - v636.__r_.__value_.__r.__words[0], v637.__r_.__value_.__l.__size_ - v637.__r_.__value_.__r.__words[0]);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<float,MIL::Int4>(v404, v405, v402, (unint64_t **)&v624, (uint64_t *)&v635);
          MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<float>((uint64_t *)&v635, v396, v398, (char **)&v617);
          goto LABEL_546;
        case 14:
          v428 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v51);
          v430 = v429;
          v431 = MIL::IRTensorValue::GetDataView<unsigned char>(v56);
          v432 = MIL::IRTensorValue::GetDataView<float>(v60);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<unsigned char>(v431, v428, v430, &v637);
          if (v637.__r_.__value_.__l.__size_ == v637.__r_.__value_.__r.__words[0])
            v433 = 0;
          else
            v433 = v637.__r_.__value_.__r.__words[0];
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<float,unsigned char>(v433, v637.__r_.__value_.__l.__size_ - v637.__r_.__value_.__r.__words[0], v432, (unint64_t **)&v624, (uint64_t *)&v636);
          MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<float>((uint64_t *)&v636, v428, v430, (char **)&v617);
          goto LABEL_548;
        case 20:
          v498 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v51);
          v500 = v499;
          v501 = MIL::IRTensorValue::GetDataView<MIL::UInt4>(v56);
          v503 = v502;
          v504 = MIL::IRTensorValue::GetDataView<float>(v60);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::UInt4>(v501, v503, v498, v500, &v637);
          MIL::PackSubByteVec((uint64_t *)&v637, &v636);
          if (v636.__r_.__value_.__l.__size_ == v636.__r_.__value_.__r.__words[0])
            v505 = 0;
          else
            v505 = v636.__r_.__value_.__r.__words[0];
          MIL::Util::CastToBitSpan<MIL::UInt4 const,unsigned char,true>(v505, v636.__r_.__value_.__l.__size_ - v636.__r_.__value_.__r.__words[0], v637.__r_.__value_.__l.__size_ - v637.__r_.__value_.__r.__words[0]);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<float,MIL::UInt4>(v506, v507, v504, (unint64_t **)&v624, (uint64_t *)&v635);
          MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<float>((uint64_t *)&v635, v498, v500, (char **)&v617);
LABEL_546:
          if (v635.__r_.__value_.__r.__words[0])
          {
            v635.__r_.__value_.__l.__size_ = v635.__r_.__value_.__r.__words[0];
            operator delete(v635.__r_.__value_.__l.__data_);
          }
LABEL_548:
          if (v636.__r_.__value_.__r.__words[0])
          {
            v636.__r_.__value_.__l.__size_ = v636.__r_.__value_.__r.__words[0];
            operator delete(v636.__r_.__value_.__l.__data_);
          }
          if (v637.__r_.__value_.__r.__words[0])
          {
            v637.__r_.__value_.__l.__size_ = v637.__r_.__value_.__r.__words[0];
            operator delete(v637.__r_.__value_.__l.__data_);
          }
          break;
        default:
          v590 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          MIL::IRDataTypeToString(v72, &v635);
          v591 = std::string::insert(&v635, 0, "Constexpr-SparseBlockwiseShiftScale: Unsupported dType (");
          v592 = *(_OWORD *)&v591->__r_.__value_.__l.__data_;
          v636.__r_.__value_.__r.__words[2] = v591->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v636.__r_.__value_.__l.__data_ = v592;
          v591->__r_.__value_.__l.__size_ = 0;
          v591->__r_.__value_.__r.__words[2] = 0;
          v591->__r_.__value_.__r.__words[0] = 0;
          v593 = std::string::append(&v636, ") for data.");
          v594 = *(_OWORD *)&v593->__r_.__value_.__l.__data_;
          v637.__r_.__value_.__r.__words[2] = v593->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v637.__r_.__value_.__l.__data_ = v594;
          v593->__r_.__value_.__l.__size_ = 0;
          v593->__r_.__value_.__r.__words[2] = 0;
          v593->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v590, &v637);
          __cxa_throw(v590, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
    }
LABEL_552:
    if (__p)
    {
      v628 = __p;
      operator delete(__p);
    }
    if (v625)
    {
      v626 = v625;
      operator delete(v625);
    }
    if (v624.__r_.__value_.__r.__words[0])
    {
      v624.__r_.__value_.__l.__size_ = v624.__r_.__value_.__r.__words[0];
      operator delete(v624.__r_.__value_.__l.__data_);
    }
    if (v629)
    {
      v630 = v629;
      operator delete(v629);
    }
    if (v631)
    {
      v632 = v631;
      operator delete(v631);
    }
    MIL::IRTensorValueType::MakeFloat32Value(v50, (uint64_t)&v617, &v619);
    v508 = v619;
    *a3 = v619;
    if (v508)
    {
      v509 = (_QWORD *)operator new();
      v510 = v619;
      *v509 = &unk_1EA992A68;
      v509[1] = 0;
      v509[2] = 0;
      v509[3] = v510;
    }
    else
    {
      v509 = 0;
    }
    a3[1] = v509;
    v619 = 0;
    if (v617)
    {
      v618 = v617;
      operator delete(v617);
    }
    if (v605)
    {
      v511 = (unint64_t *)&v605->__shared_owners_;
      do
        v512 = __ldaxr(v511);
      while (__stlxr(v512 - 1, v511));
      if (!v512)
      {
        ((void (*)(std::__shared_weak_count *))v605->__on_zero_shared)(v605);
        std::__shared_weak_count::__release_weak(v605);
      }
    }
    if (v606)
    {
      v513 = (unint64_t *)&v606->__shared_owners_;
      do
        v514 = __ldaxr(v513);
      while (__stlxr(v514 - 1, v513));
      if (!v514)
      {
        ((void (*)(std::__shared_weak_count *))v606->__on_zero_shared)(v606);
        std::__shared_weak_count::__release_weak(v606);
      }
    }
    if (v607)
    {
      v515 = (unint64_t *)&v607->__shared_owners_;
      do
        v516 = __ldaxr(v515);
      while (__stlxr(v516 - 1, v515));
      if (!v516)
      {
        ((void (*)(std::__shared_weak_count *))v607->__on_zero_shared)(v607);
        std::__shared_weak_count::__release_weak(v607);
      }
    }
    v517 = v608;
    if (!v608)
      goto LABEL_675;
    v518 = (unint64_t *)&v608->__shared_owners_;
    do
      v519 = __ldaxr(v518);
    while (__stlxr(v519 - 1, v518));
    goto LABEL_673;
  }
  if (v10 != 7)
  {
    v568 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(": Unsupported dtype ", (const void **)v620, (void **)&v636.__r_.__value_.__l.__data_);
    MIL::IRDataTypeToString(v11, &v635);
    if ((v635.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v569 = &v635;
    else
      v569 = (std::string *)v635.__r_.__value_.__r.__words[0];
    if ((v635.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v570 = HIBYTE(v635.__r_.__value_.__r.__words[2]);
    else
      v570 = v635.__r_.__value_.__l.__size_;
    v571 = std::string::append(&v636, (const std::string::value_type *)v569, v570);
    v572 = *(_OWORD *)&v571->__r_.__value_.__l.__data_;
    v637.__r_.__value_.__r.__words[2] = v571->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v637.__r_.__value_.__l.__data_ = v572;
    v571->__r_.__value_.__l.__size_ = 0;
    v571->__r_.__value_.__r.__words[2] = 0;
    v571->__r_.__value_.__r.__words[0] = 0;
    v573 = std::string::append(&v637, " for nonzero data output");
    v574 = *(_OWORD *)&v573->__r_.__value_.__l.__data_;
    v624.__r_.__value_.__r.__words[2] = v573->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v624.__r_.__value_.__l.__data_ = v574;
    v573->__r_.__value_.__l.__size_ = 0;
    v573->__r_.__value_.__r.__words[2] = 0;
    v573->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v568, &v624);
    __cxa_throw(v568, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v12 = *((_QWORD *)this + 1);
  v13 = (const void *)*((_QWORD *)this + 2);
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  v616 = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v18 = (uint64_t *)*((_QWORD *)this + 4);
  v17 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  v615 = v17;
  if (v17)
  {
    v19 = (unint64_t *)&v17->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v22 = (uint64_t *)*((_QWORD *)this + 6);
  v21 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  v614 = v21;
  if (v21)
  {
    v23 = (unint64_t *)&v21->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v26 = (uint64_t *)*((_QWORD *)this + 8);
  v25 = *((_QWORD *)this + 9);
  v613 = (std::__shared_weak_count *)v25;
  if (v25)
  {
    v27 = (unint64_t *)(v25 + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v29 = (*(uint64_t (**)(const void *))(*(_QWORD *)v13 + 32))(v13);
  v30 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 96))(v29);
  MIL::Operators::Common::Shared::ConstExprs::ShapeToVector(v30, &v631);
  v31 = (*(uint64_t (**)(uint64_t *))(*v22 + 32))(v22);
  v32 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 96))(v31);
  MIL::Operators::Common::Shared::ConstExprs::ShapeToVector(v32, &v629);
  MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::BlockwiseShiftScaleIndexConverter(&v624, &v631, &v629);
  v33 = (*(uint64_t (**)(uint64_t *))(*v18 + 32))(v18);
  v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 88))(v33);
  if (v26)
  {
    switch(v34)
    {
      case 4:
        v35 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v13);
        v37 = v36;
        v38 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(v18);
        v39 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(v22);
        v633 = v26;
        v634 = (std::__shared_weak_count *)v25;
        v613 = 0;
        MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::Fp16>(v38, v35, v37, (uint64_t *)&v637);
        v40 = (uint64_t)(v637.__r_.__value_.__l.__size_ - v637.__r_.__value_.__r.__words[0]) >> 1;
        if (v637.__r_.__value_.__l.__size_ == v637.__r_.__value_.__r.__words[0])
          v41 = 0;
        else
          v41 = (MIL::Fp16 *)v637.__r_.__value_.__r.__words[0];
        v635.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
        v635.__r_.__value_.__l.__size_ = v25;
        if (v25)
        {
          v42 = (unint64_t *)(v25 + 8);
          do
            v43 = __ldxr(v42);
          while (__stxr(v43 + 1, v42));
        }
        MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Bf16,MIL::Fp16>(v41, v40, v39, (uint64_t **)&v635, (unint64_t **)&v624, (uint64_t *)&v636);
        v44 = (std::__shared_weak_count *)v635.__r_.__value_.__l.__size_;
        if (v635.__r_.__value_.__l.__size_)
        {
          v45 = (unint64_t *)(v635.__r_.__value_.__l.__size_ + 8);
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<MIL::Bf16>((uint64_t *)&v636, v35, v37, (char **)&v617);
        if (v636.__r_.__value_.__r.__words[0])
        {
          v636.__r_.__value_.__l.__size_ = v636.__r_.__value_.__r.__words[0];
          operator delete(v636.__r_.__value_.__l.__data_);
        }
        if (v637.__r_.__value_.__r.__words[0])
        {
          v637.__r_.__value_.__l.__size_ = v637.__r_.__value_.__r.__words[0];
          operator delete(v637.__r_.__value_.__l.__data_);
        }
        v47 = v634;
        if (!v634)
          goto LABEL_640;
        v48 = (unint64_t *)&v634->__shared_owners_;
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        break;
      case 5:
        v231 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v13);
        v233 = v232;
        v234 = MIL::IRTensorValue::GetDataView<float>(v18);
        v235 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(v22);
        v633 = v26;
        v634 = (std::__shared_weak_count *)v25;
        v613 = 0;
        MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<float>(v234, v231, v233, (uint64_t *)&v637);
        v236 = (uint64_t)(v637.__r_.__value_.__l.__size_ - v637.__r_.__value_.__r.__words[0]) >> 2;
        if (v637.__r_.__value_.__l.__size_ == v637.__r_.__value_.__r.__words[0])
          v237 = 0;
        else
          v237 = v637.__r_.__value_.__r.__words[0];
        v635.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
        v635.__r_.__value_.__l.__size_ = v25;
        if (v25)
        {
          v238 = (unint64_t *)(v25 + 8);
          do
            v239 = __ldxr(v238);
          while (__stxr(v239 + 1, v238));
        }
        MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Bf16,float>(v237, v236, v235, (uint64_t **)&v635, (unint64_t **)&v624, (uint64_t *)&v636);
        v240 = (std::__shared_weak_count *)v635.__r_.__value_.__l.__size_;
        if (v635.__r_.__value_.__l.__size_)
        {
          v241 = (unint64_t *)(v635.__r_.__value_.__l.__size_ + 8);
          do
            v242 = __ldaxr(v241);
          while (__stlxr(v242 - 1, v241));
          if (!v242)
          {
            ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
            std::__shared_weak_count::__release_weak(v240);
          }
        }
        MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<MIL::Bf16>((uint64_t *)&v636, v231, v233, (char **)&v617);
        if (v636.__r_.__value_.__r.__words[0])
        {
          v636.__r_.__value_.__l.__size_ = v636.__r_.__value_.__r.__words[0];
          operator delete(v636.__r_.__value_.__l.__data_);
        }
        if (v637.__r_.__value_.__r.__words[0])
        {
          v637.__r_.__value_.__l.__size_ = v637.__r_.__value_.__r.__words[0];
          operator delete(v637.__r_.__value_.__l.__data_);
        }
        v47 = v634;
        if (!v634)
          goto LABEL_640;
        v243 = (unint64_t *)&v634->__shared_owners_;
        do
          v49 = __ldaxr(v243);
        while (__stlxr(v49 - 1, v243));
        break;
      case 7:
        v322 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v13);
        v324 = v323;
        v325 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(v18);
        v326 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(v22);
        v633 = v26;
        v634 = (std::__shared_weak_count *)v25;
        v613 = 0;
        MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::Bf16>(v325, v322, v324, (uint64_t *)&v637);
        v327 = (uint64_t)(v637.__r_.__value_.__l.__size_ - v637.__r_.__value_.__r.__words[0]) >> 1;
        if (v637.__r_.__value_.__l.__size_ == v637.__r_.__value_.__r.__words[0])
          v328 = 0;
        else
          v328 = (MIL::Bf16 *)v637.__r_.__value_.__r.__words[0];
        v635.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
        v635.__r_.__value_.__l.__size_ = v25;
        if (v25)
        {
          v329 = (unint64_t *)(v25 + 8);
          do
            v330 = __ldxr(v329);
          while (__stxr(v330 + 1, v329));
        }
        MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Bf16,MIL::Bf16>(v328, v327, v326, (uint64_t **)&v635, (unint64_t **)&v624, (uint64_t *)&v636);
        v331 = (std::__shared_weak_count *)v635.__r_.__value_.__l.__size_;
        if (v635.__r_.__value_.__l.__size_)
        {
          v332 = (unint64_t *)(v635.__r_.__value_.__l.__size_ + 8);
          do
            v333 = __ldaxr(v332);
          while (__stlxr(v333 - 1, v332));
          if (!v333)
          {
            ((void (*)(std::__shared_weak_count *))v331->__on_zero_shared)(v331);
            std::__shared_weak_count::__release_weak(v331);
          }
        }
        MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<MIL::Bf16>((uint64_t *)&v636, v322, v324, (char **)&v617);
        if (v636.__r_.__value_.__r.__words[0])
        {
          v636.__r_.__value_.__l.__size_ = v636.__r_.__value_.__r.__words[0];
          operator delete(v636.__r_.__value_.__l.__data_);
        }
        if (v637.__r_.__value_.__r.__words[0])
        {
          v637.__r_.__value_.__l.__size_ = v637.__r_.__value_.__r.__words[0];
          operator delete(v637.__r_.__value_.__l.__data_);
        }
        v47 = v634;
        if (!v634)
          goto LABEL_640;
        v334 = (unint64_t *)&v634->__shared_owners_;
        do
          v49 = __ldaxr(v334);
        while (__stlxr(v49 - 1, v334));
        break;
      case 9:
        v335 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v13);
        v337 = v336;
        v338 = MIL::IRTensorValue::GetDataView<signed char>(v18);
        v339 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(v22);
        v633 = v26;
        v634 = (std::__shared_weak_count *)v25;
        v613 = 0;
        MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<signed char>(v338, v335, v337, &v637);
        v340 = v637.__r_.__value_.__l.__size_ - v637.__r_.__value_.__r.__words[0];
        if (v637.__r_.__value_.__l.__size_ == v637.__r_.__value_.__r.__words[0])
          v341 = 0;
        else
          v341 = v637.__r_.__value_.__r.__words[0];
        v635.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
        v635.__r_.__value_.__l.__size_ = v25;
        if (v25)
        {
          v342 = (unint64_t *)(v25 + 8);
          do
            v343 = __ldxr(v342);
          while (__stxr(v343 + 1, v342));
        }
        MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Bf16,signed char>(v341, v340, v339, (uint64_t **)&v635, (unint64_t **)&v624, (uint64_t *)&v636);
        v344 = (std::__shared_weak_count *)v635.__r_.__value_.__l.__size_;
        if (v635.__r_.__value_.__l.__size_)
        {
          v345 = (unint64_t *)(v635.__r_.__value_.__l.__size_ + 8);
          do
            v346 = __ldaxr(v345);
          while (__stlxr(v346 - 1, v345));
          if (!v346)
          {
            ((void (*)(std::__shared_weak_count *))v344->__on_zero_shared)(v344);
            std::__shared_weak_count::__release_weak(v344);
          }
        }
        MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<MIL::Bf16>((uint64_t *)&v636, v335, v337, (char **)&v617);
        if (v636.__r_.__value_.__r.__words[0])
        {
          v636.__r_.__value_.__l.__size_ = v636.__r_.__value_.__r.__words[0];
          operator delete(v636.__r_.__value_.__l.__data_);
        }
        if (v637.__r_.__value_.__r.__words[0])
        {
          v637.__r_.__value_.__l.__size_ = v637.__r_.__value_.__r.__words[0];
          operator delete(v637.__r_.__value_.__l.__data_);
        }
        v47 = v634;
        if (!v634)
          goto LABEL_640;
        v347 = (unint64_t *)&v634->__shared_owners_;
        do
          v49 = __ldaxr(v347);
        while (__stlxr(v49 - 1, v347));
        break;
      case 13:
        v215 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v13);
        v217 = v216;
        v218 = MIL::IRTensorValue::GetDataView<MIL::Int4>(v18);
        v220 = v219;
        v221 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(v22);
        v622 = v26;
        v623 = (std::__shared_weak_count *)v25;
        v613 = 0;
        MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::Int4>(v218, v220, v215, v217, &v637);
        MIL::PackSubByteVec((uint64_t *)&v637, &v636);
        if (v636.__r_.__value_.__l.__size_ == v636.__r_.__value_.__r.__words[0])
          v222 = 0;
        else
          v222 = v636.__r_.__value_.__r.__words[0];
        MIL::Util::CastToBitSpan<MIL::Int4 const,unsigned char,true>(v222, v636.__r_.__value_.__l.__size_ - v636.__r_.__value_.__r.__words[0], v637.__r_.__value_.__l.__size_ - v637.__r_.__value_.__r.__words[0]);
        v633 = v26;
        v634 = (std::__shared_weak_count *)v25;
        if (v25)
        {
          v225 = (unint64_t *)(v25 + 8);
          do
            v226 = __ldxr(v225);
          while (__stxr(v226 + 1, v225));
        }
        MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Bf16,MIL::Int4>(v223, v224, v221, &v633, (unint64_t **)&v624, (uint64_t *)&v635);
        v227 = v634;
        if (v634)
        {
          v228 = (unint64_t *)&v634->__shared_owners_;
          do
            v229 = __ldaxr(v228);
          while (__stlxr(v229 - 1, v228));
          if (!v229)
          {
            ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
            std::__shared_weak_count::__release_weak(v227);
          }
        }
        MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<MIL::Bf16>((uint64_t *)&v635, v215, v217, (char **)&v617);
        if (v635.__r_.__value_.__r.__words[0])
        {
          v635.__r_.__value_.__l.__size_ = v635.__r_.__value_.__r.__words[0];
          operator delete(v635.__r_.__value_.__l.__data_);
        }
        if (v636.__r_.__value_.__r.__words[0])
        {
          v636.__r_.__value_.__l.__size_ = v636.__r_.__value_.__r.__words[0];
          operator delete(v636.__r_.__value_.__l.__data_);
        }
        if (v637.__r_.__value_.__r.__words[0])
        {
          v637.__r_.__value_.__l.__size_ = v637.__r_.__value_.__r.__words[0];
          operator delete(v637.__r_.__value_.__l.__data_);
        }
        v47 = v623;
        if (!v623)
          goto LABEL_640;
        v230 = (unint64_t *)&v623->__shared_owners_;
        do
          v49 = __ldaxr(v230);
        while (__stlxr(v49 - 1, v230));
        break;
      case 14:
        v270 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v13);
        v272 = v271;
        v273 = MIL::IRTensorValue::GetDataView<unsigned char>(v18);
        v274 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(v22);
        v633 = v26;
        v634 = (std::__shared_weak_count *)v25;
        v613 = 0;
        MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<unsigned char>(v273, v270, v272, &v637);
        v275 = v637.__r_.__value_.__l.__size_ - v637.__r_.__value_.__r.__words[0];
        if (v637.__r_.__value_.__l.__size_ == v637.__r_.__value_.__r.__words[0])
          v276 = 0;
        else
          v276 = v637.__r_.__value_.__r.__words[0];
        v635.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
        v635.__r_.__value_.__l.__size_ = v25;
        if (v25)
        {
          v277 = (unint64_t *)(v25 + 8);
          do
            v278 = __ldxr(v277);
          while (__stxr(v278 + 1, v277));
        }
        MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Bf16,unsigned char>(v276, v275, v274, (uint64_t **)&v635, (unint64_t **)&v624, (uint64_t *)&v636);
        v279 = (std::__shared_weak_count *)v635.__r_.__value_.__l.__size_;
        if (v635.__r_.__value_.__l.__size_)
        {
          v280 = (unint64_t *)(v635.__r_.__value_.__l.__size_ + 8);
          do
            v281 = __ldaxr(v280);
          while (__stlxr(v281 - 1, v280));
          if (!v281)
          {
            ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
            std::__shared_weak_count::__release_weak(v279);
          }
        }
        MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<MIL::Bf16>((uint64_t *)&v636, v270, v272, (char **)&v617);
        if (v636.__r_.__value_.__r.__words[0])
        {
          v636.__r_.__value_.__l.__size_ = v636.__r_.__value_.__r.__words[0];
          operator delete(v636.__r_.__value_.__l.__data_);
        }
        if (v637.__r_.__value_.__r.__words[0])
        {
          v637.__r_.__value_.__l.__size_ = v637.__r_.__value_.__r.__words[0];
          operator delete(v637.__r_.__value_.__l.__data_);
        }
        v47 = v634;
        if (!v634)
          goto LABEL_640;
        v282 = (unint64_t *)&v634->__shared_owners_;
        do
          v49 = __ldaxr(v282);
        while (__stlxr(v49 - 1, v282));
        break;
      case 20:
        v380 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v13);
        v382 = v381;
        v383 = MIL::IRTensorValue::GetDataView<MIL::UInt4>(v18);
        v385 = v384;
        v386 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(v22);
        v622 = v26;
        v623 = (std::__shared_weak_count *)v25;
        v613 = 0;
        MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::UInt4>(v383, v385, v380, v382, &v637);
        MIL::PackSubByteVec((uint64_t *)&v637, &v636);
        if (v636.__r_.__value_.__l.__size_ == v636.__r_.__value_.__r.__words[0])
          v387 = 0;
        else
          v387 = v636.__r_.__value_.__r.__words[0];
        MIL::Util::CastToBitSpan<MIL::UInt4 const,unsigned char,true>(v387, v636.__r_.__value_.__l.__size_ - v636.__r_.__value_.__r.__words[0], v637.__r_.__value_.__l.__size_ - v637.__r_.__value_.__r.__words[0]);
        v633 = v26;
        v634 = (std::__shared_weak_count *)v25;
        if (v25)
        {
          v390 = (unint64_t *)(v25 + 8);
          do
            v391 = __ldxr(v390);
          while (__stxr(v391 + 1, v390));
        }
        MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Bf16,MIL::UInt4>(v388, v389, v386, &v633, (unint64_t **)&v624, (uint64_t *)&v635);
        v392 = v634;
        if (v634)
        {
          v393 = (unint64_t *)&v634->__shared_owners_;
          do
            v394 = __ldaxr(v393);
          while (__stlxr(v394 - 1, v393));
          if (!v394)
          {
            ((void (*)(std::__shared_weak_count *))v392->__on_zero_shared)(v392);
            std::__shared_weak_count::__release_weak(v392);
          }
        }
        MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<MIL::Bf16>((uint64_t *)&v635, v380, v382, (char **)&v617);
        if (v635.__r_.__value_.__r.__words[0])
        {
          v635.__r_.__value_.__l.__size_ = v635.__r_.__value_.__r.__words[0];
          operator delete(v635.__r_.__value_.__l.__data_);
        }
        if (v636.__r_.__value_.__r.__words[0])
        {
          v636.__r_.__value_.__l.__size_ = v636.__r_.__value_.__r.__words[0];
          operator delete(v636.__r_.__value_.__l.__data_);
        }
        if (v637.__r_.__value_.__r.__words[0])
        {
          v637.__r_.__value_.__l.__size_ = v637.__r_.__value_.__r.__words[0];
          operator delete(v637.__r_.__value_.__l.__data_);
        }
        v47 = v623;
        if (!v623)
          goto LABEL_640;
        v395 = (unint64_t *)&v623->__shared_owners_;
        do
          v49 = __ldaxr(v395);
        while (__stlxr(v49 - 1, v395));
        break;
      default:
        v585 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        MIL::IRDataTypeToString(v34, &v635);
        v586 = std::string::insert(&v635, 0, "Constexpr-SparseBlockwiseShiftScale: Unsupported dType (");
        v587 = *(_OWORD *)&v586->__r_.__value_.__l.__data_;
        v636.__r_.__value_.__r.__words[2] = v586->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v636.__r_.__value_.__l.__data_ = v587;
        v586->__r_.__value_.__l.__size_ = 0;
        v586->__r_.__value_.__r.__words[2] = 0;
        v586->__r_.__value_.__r.__words[0] = 0;
        v588 = std::string::append(&v636, ") for data.");
        v589 = *(_OWORD *)&v588->__r_.__value_.__l.__data_;
        v637.__r_.__value_.__r.__words[2] = v588->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v637.__r_.__value_.__l.__data_ = v589;
        v588->__r_.__value_.__l.__size_ = 0;
        v588->__r_.__value_.__r.__words[2] = 0;
        v588->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v585, &v637);
        __cxa_throw(v585, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  else
  {
    switch(v34)
    {
      case 4:
        v138 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v13);
        v140 = v139;
        v141 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(v18);
        v142 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(v22);
        MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::Fp16>(v141, v138, v140, (uint64_t *)&v637);
        if (v637.__r_.__value_.__l.__size_ == v637.__r_.__value_.__r.__words[0])
          v143 = 0;
        else
          v143 = (MIL::Fp16 *)v637.__r_.__value_.__r.__words[0];
        MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Bf16,MIL::Fp16>(v143, (uint64_t)(v637.__r_.__value_.__l.__size_ - v637.__r_.__value_.__r.__words[0]) >> 1, v142, (unint64_t **)&v624, (uint64_t *)&v636);
        MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<MIL::Bf16>((uint64_t *)&v636, v138, v140, (char **)&v617);
        goto LABEL_636;
      case 5:
        v444 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v13);
        v446 = v445;
        v447 = MIL::IRTensorValue::GetDataView<float>(v18);
        v448 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(v22);
        MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<float>(v447, v444, v446, (uint64_t *)&v637);
        if (v637.__r_.__value_.__l.__size_ == v637.__r_.__value_.__r.__words[0])
          v449 = 0;
        else
          v449 = v637.__r_.__value_.__r.__words[0];
        MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Bf16,float>(v449, (uint64_t)(v637.__r_.__value_.__l.__size_ - v637.__r_.__value_.__r.__words[0]) >> 2, v448, (unint64_t **)&v624, (uint64_t *)&v636);
        MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<MIL::Bf16>((uint64_t *)&v636, v444, v446, (char **)&v617);
        goto LABEL_636;
      case 7:
        v486 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v13);
        v488 = v487;
        v489 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(v18);
        v490 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(v22);
        MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::Bf16>(v489, v486, v488, (uint64_t *)&v637);
        if (v637.__r_.__value_.__l.__size_ == v637.__r_.__value_.__r.__words[0])
          v491 = 0;
        else
          v491 = (MIL::Bf16 *)v637.__r_.__value_.__r.__words[0];
        MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Bf16,MIL::Bf16>(v491, (uint64_t)(v637.__r_.__value_.__l.__size_ - v637.__r_.__value_.__r.__words[0]) >> 1, v490, (unint64_t **)&v624, (uint64_t *)&v636);
        MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<MIL::Bf16>((uint64_t *)&v636, v486, v488, (char **)&v617);
        goto LABEL_636;
      case 9:
        v492 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v13);
        v494 = v493;
        v495 = MIL::IRTensorValue::GetDataView<signed char>(v18);
        v496 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(v22);
        MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<signed char>(v495, v492, v494, &v637);
        if (v637.__r_.__value_.__l.__size_ == v637.__r_.__value_.__r.__words[0])
          v497 = 0;
        else
          v497 = v637.__r_.__value_.__r.__words[0];
        MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Bf16,signed char>(v497, v637.__r_.__value_.__l.__size_ - v637.__r_.__value_.__r.__words[0], v496, (unint64_t **)&v624, (uint64_t *)&v636);
        MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<MIL::Bf16>((uint64_t *)&v636, v492, v494, (char **)&v617);
        goto LABEL_636;
      case 13:
        v434 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v13);
        v436 = v435;
        v437 = MIL::IRTensorValue::GetDataView<MIL::Int4>(v18);
        v439 = v438;
        v440 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(v22);
        MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::Int4>(v437, v439, v434, v436, &v637);
        MIL::PackSubByteVec((uint64_t *)&v637, &v636);
        if (v636.__r_.__value_.__l.__size_ == v636.__r_.__value_.__r.__words[0])
          v441 = 0;
        else
          v441 = v636.__r_.__value_.__r.__words[0];
        MIL::Util::CastToBitSpan<MIL::Int4 const,unsigned char,true>(v441, v636.__r_.__value_.__l.__size_ - v636.__r_.__value_.__r.__words[0], v637.__r_.__value_.__l.__size_ - v637.__r_.__value_.__r.__words[0]);
        MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Bf16,MIL::Int4>(v442, v443, v440, (unint64_t **)&v624, (uint64_t *)&v635);
        MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<MIL::Bf16>((uint64_t *)&v635, v434, v436, (char **)&v617);
        goto LABEL_634;
      case 14:
        v462 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v13);
        v464 = v463;
        v465 = MIL::IRTensorValue::GetDataView<unsigned char>(v18);
        v466 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(v22);
        MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<unsigned char>(v465, v462, v464, &v637);
        if (v637.__r_.__value_.__l.__size_ == v637.__r_.__value_.__r.__words[0])
          v467 = 0;
        else
          v467 = v637.__r_.__value_.__r.__words[0];
        MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Bf16,unsigned char>(v467, v637.__r_.__value_.__l.__size_ - v637.__r_.__value_.__r.__words[0], v466, (unint64_t **)&v624, (uint64_t *)&v636);
        MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<MIL::Bf16>((uint64_t *)&v636, v462, v464, (char **)&v617);
        goto LABEL_636;
      case 20:
        v540 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v13);
        v542 = v541;
        v543 = MIL::IRTensorValue::GetDataView<MIL::UInt4>(v18);
        v545 = v544;
        v546 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(v22);
        MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::UInt4>(v543, v545, v540, v542, &v637);
        MIL::PackSubByteVec((uint64_t *)&v637, &v636);
        if (v636.__r_.__value_.__l.__size_ == v636.__r_.__value_.__r.__words[0])
          v547 = 0;
        else
          v547 = v636.__r_.__value_.__r.__words[0];
        MIL::Util::CastToBitSpan<MIL::UInt4 const,unsigned char,true>(v547, v636.__r_.__value_.__l.__size_ - v636.__r_.__value_.__r.__words[0], v637.__r_.__value_.__l.__size_ - v637.__r_.__value_.__r.__words[0]);
        MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Bf16,MIL::UInt4>(v548, v549, v546, (unint64_t **)&v624, (uint64_t *)&v635);
        MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<MIL::Bf16>((uint64_t *)&v635, v540, v542, (char **)&v617);
LABEL_634:
        if (v635.__r_.__value_.__r.__words[0])
        {
          v635.__r_.__value_.__l.__size_ = v635.__r_.__value_.__r.__words[0];
          operator delete(v635.__r_.__value_.__l.__data_);
        }
LABEL_636:
        if (v636.__r_.__value_.__r.__words[0])
        {
          v636.__r_.__value_.__l.__size_ = v636.__r_.__value_.__r.__words[0];
          operator delete(v636.__r_.__value_.__l.__data_);
        }
        if (v637.__r_.__value_.__r.__words[0])
        {
          v637.__r_.__value_.__l.__size_ = v637.__r_.__value_.__r.__words[0];
          operator delete(v637.__r_.__value_.__l.__data_);
        }
        break;
      default:
        v600 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        MIL::IRDataTypeToString(v34, &v635);
        v601 = std::string::insert(&v635, 0, "Constexpr-SparseBlockwiseShiftScale: Unsupported dType (");
        v602 = *(_OWORD *)&v601->__r_.__value_.__l.__data_;
        v636.__r_.__value_.__r.__words[2] = v601->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v636.__r_.__value_.__l.__data_ = v602;
        v601->__r_.__value_.__l.__size_ = 0;
        v601->__r_.__value_.__r.__words[2] = 0;
        v601->__r_.__value_.__r.__words[0] = 0;
        v603 = std::string::append(&v636, ") for data.");
        v604 = *(_OWORD *)&v603->__r_.__value_.__l.__data_;
        v637.__r_.__value_.__r.__words[2] = v603->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v637.__r_.__value_.__l.__data_ = v604;
        v603->__r_.__value_.__l.__size_ = 0;
        v603->__r_.__value_.__r.__words[2] = 0;
        v603->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v600, &v637);
        __cxa_throw(v600, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
LABEL_640:
  if (__p)
  {
    v628 = __p;
    operator delete(__p);
  }
  if (v625)
  {
    v626 = v625;
    operator delete(v625);
  }
  if (v624.__r_.__value_.__r.__words[0])
  {
    v624.__r_.__value_.__l.__size_ = v624.__r_.__value_.__r.__words[0];
    operator delete(v624.__r_.__value_.__l.__data_);
  }
  if (v629)
  {
    v630 = v629;
    operator delete(v629);
  }
  if (v631)
  {
    v632 = v631;
    operator delete(v631);
  }
  MIL::IRTensorValueType::MakeBFloat16Value(v12, (uint64_t)&v617, &v619);
  v550 = v619;
  *a3 = v619;
  if (v550)
  {
    v551 = (_QWORD *)operator new();
    v552 = v619;
    *v551 = &unk_1EA992A68;
    v551[1] = 0;
    v551[2] = 0;
    v551[3] = v552;
  }
  else
  {
    v551 = 0;
  }
  a3[1] = v551;
  v619 = 0;
  if (v617)
  {
    v618 = v617;
    operator delete(v617);
  }
  if (v613)
  {
    v553 = (unint64_t *)&v613->__shared_owners_;
    do
      v554 = __ldaxr(v553);
    while (__stlxr(v554 - 1, v553));
    if (!v554)
    {
      ((void (*)(std::__shared_weak_count *))v613->__on_zero_shared)(v613);
      std::__shared_weak_count::__release_weak(v613);
    }
  }
  if (v614)
  {
    v555 = (unint64_t *)&v614->__shared_owners_;
    do
      v556 = __ldaxr(v555);
    while (__stlxr(v556 - 1, v555));
    if (!v556)
    {
      ((void (*)(std::__shared_weak_count *))v614->__on_zero_shared)(v614);
      std::__shared_weak_count::__release_weak(v614);
    }
  }
  if (v615)
  {
    v557 = (unint64_t *)&v615->__shared_owners_;
    do
      v558 = __ldaxr(v557);
    while (__stlxr(v558 - 1, v557));
    if (!v558)
    {
      ((void (*)(std::__shared_weak_count *))v615->__on_zero_shared)(v615);
      std::__shared_weak_count::__release_weak(v615);
    }
  }
  v517 = v616;
  if (v616)
  {
    v559 = (unint64_t *)&v616->__shared_owners_;
    do
      v519 = __ldaxr(v559);
    while (__stlxr(v519 - 1, v559));
    goto LABEL_673;
  }
LABEL_675:
  if (v621 < 0)
    operator delete(v620[0]);
}

void sub_1E09754A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  void *v51;
  int v52;
  uint64_t v53;
  void *v55;
  void *v56;

  if (*(char *)(v53 - 105) < 0)
    operator delete(*(void **)(v53 - 128));
  if (*(char *)(v53 - 137) < 0)
    operator delete(*(void **)(v53 - 160));
  if (*(char *)(v53 - 161) < 0)
  {
    operator delete(*(void **)(v53 - 184));
    if ((v52 & 1) == 0)
    {
LABEL_10:
      v55 = *(void **)(v53 - 248);
      if (v55)
      {
        *(_QWORD *)(v53 - 240) = v55;
        operator delete(v55);
      }
      v56 = *(void **)(v53 - 224);
      if (v56)
      {
        *(_QWORD *)(v53 - 216) = v56;
        operator delete(v56);
      }
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
      if (a43 < 0)
        operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  else if (!v52)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v51);
  goto LABEL_10;
}

void MIL::Operators::Common::ios18::ConstExprs::SparseBlockwiseShiftScale::~SparseBlockwiseShiftScale(MIL::Operators::Common::ios18::ConstExprs::SparseBlockwiseShiftScale::Impl **this)
{
  std::unique_ptr<MIL::Operators::Common::ios18::ConstExprs::SparseBlockwiseShiftScale::Impl>::reset[abi:ne180100](this + 1, 0);
  MIL::AbstractConstExpr::~AbstractConstExpr((MIL::AbstractConstExpr *)this);
}

{
  std::unique_ptr<MIL::Operators::Common::ios18::ConstExprs::SparseBlockwiseShiftScale::Impl>::reset[abi:ne180100](this + 1, 0);
  MIL::AbstractConstExpr::~AbstractConstExpr((MIL::AbstractConstExpr *)this);
}

{
  std::unique_ptr<MIL::Operators::Common::ios18::ConstExprs::SparseBlockwiseShiftScale::Impl>::reset[abi:ne180100](this + 1, 0);
  MIL::AbstractConstExpr::~AbstractConstExpr((MIL::AbstractConstExpr *)this);
  JUMPOUT(0x1E0C023A0);
}

_QWORD *MIL::Operators::Common::ios18::ConstExprs::SparseBlockwiseShiftScale::SparseBlockwiseShiftScale(_QWORD *a1, uint64_t a2, uint64_t a3, __int128 *a4, __int128 *a5, __int128 *a6, __int128 *a7)
{
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;

  v14 = a3;
  v15 = a2;
  v12 = MIL::AbstractConstExpr::AbstractConstExpr(a1);
  *v12 = &off_1EA9A1CC8;
  std::make_unique[abi:ne180100]<MIL::Operators::Common::ios18::ConstExprs::SparseBlockwiseShiftScale::Impl,MIL::IRTensorValueType const*&,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>>(&v15, &v14, a4, a5, a6, a7, v12 + 1);
  return a1;
}

void sub_1E0975E54(_Unwind_Exception *a1)
{
  MIL::AbstractConstExpr *v1;

  MIL::AbstractConstExpr::~AbstractConstExpr(v1);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<MIL::Operators::Common::ios18::ConstExprs::SparseBlockwiseShiftScale::Impl,MIL::IRTensorValueType const*&,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, __int128 *a5@<X4>, __int128 *a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  v14 = operator new();
  v15 = *a1;
  v16 = *a2;
  v17 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v33 = *a4;
  v34 = v17;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  v18 = *a5;
  *(_QWORD *)a5 = 0;
  *((_QWORD *)a5 + 1) = 0;
  v31 = *a6;
  v32 = v18;
  *(_QWORD *)a6 = 0;
  *((_QWORD *)a6 + 1) = 0;
  MIL::Operators::Common::ios18::ConstExprs::SparseBlockwiseShiftScale::Impl::Impl(v14, v15, v16, (uint64_t)&v34, (uint64_t)&v33, (uint64_t)&v32, (uint64_t)&v31);
  *a7 = v14;
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
  if (*((_QWORD *)&v31 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
  if (*((_QWORD *)&v32 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
  if (*((_QWORD *)&v33 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
  if (*((_QWORD *)&v34 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_1E0976018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  uint64_t v15;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  MEMORY[0x1E0C023A0](v15, 0x60C40DB410AEALL);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::ConstExprs::SparseBlockwiseShiftScale::ValidateArgsAndTypeConstraints(MIL::Operators::Common::ios18::ConstExprs::SparseBlockwiseShiftScale::Impl **this)
{
  MIL::Operators::Common::ios18::ConstExprs::SparseBlockwiseShiftScale::Impl::ValidateArgsAndTypeConstraints(this[1]);
}

void MIL::Operators::Common::ios18::ConstExprs::SparseBlockwiseShiftScale::ComputeOutput(MIL::Operators::Common::ios18::ConstExprs::SparseBlockwiseShiftScale *this)
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Cannot compute to get a single output since SparseBlockwiseShiftScale has two outputs.");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_1E09760A4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::ConstExprs::SparseBlockwiseShiftScale::ComputeOutput(MIL::Operators::Common::ios18::ConstExprs::SparseBlockwiseShiftScale::Impl **this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  MIL::Operators::Common::ios18::ConstExprs::SparseBlockwiseShiftScale::Impl::ComputeOutput(this[1], a2, a3);
}

void MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<MIL::Bf16>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char **a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  int Int;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int16 v22;
  std::runtime_error *exception;
  char v24;
  _QWORD v25[2];

  v25[0] = a2;
  v25[1] = a3;
  v6 = *a1;
  v5 = a1[1];
  if (a3 != (v5 - *a1) >> 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "It should be guaranteed that the sizes of the input data and mask are the same");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (v5 != v6)
  {
    v8 = 0;
    do
    {
      v24 = MIL::Util::Span<MIL::UInt1 const,18446744073709551615ul>::ValueAt(v25, v8);
      Int = MIL::UInt1::GetInt((MIL::UInt1 *)&v24);
      v10 = *a1;
      if (Int)
      {
        v12 = a4[1];
        v11 = (unint64_t)a4[2];
        if ((unint64_t)v12 >= v11)
        {
          v14 = *a4;
          v15 = v12 - *a4;
          if (v15 <= -3)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v16 = v15 >> 1;
          v17 = v11 - (_QWORD)v14;
          if (v17 <= (v15 >> 1) + 1)
            v18 = v16 + 1;
          else
            v18 = v17;
          if (v17 >= 0x7FFFFFFFFFFFFFFELL)
            v19 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v19 = v18;
          if (v19)
          {
            v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>((uint64_t)(a4 + 2), v19);
            v14 = *a4;
            v12 = a4[1];
          }
          else
          {
            v20 = 0;
          }
          v21 = &v20[2 * v16];
          *(_WORD *)v21 = *(_WORD *)(v10 + 2 * v8);
          v13 = v21 + 2;
          while (v12 != v14)
          {
            v22 = *((_WORD *)v12 - 1);
            v12 -= 2;
            *((_WORD *)v21 - 1) = v22;
            v21 -= 2;
          }
          *a4 = v21;
          a4[1] = v13;
          a4[2] = &v20[2 * v19];
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_WORD *)v12 = *(_WORD *)(v10 + 2 * v8);
          v13 = v12 + 2;
        }
        a4[1] = v13;
        v10 = *a1;
      }
      ++v8;
    }
    while (v8 < (a1[1] - v10) >> 1);
  }
}

void sub_1E0976248(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Util::CastToBitSpan<MIL::Int4 const,unsigned char,true>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::logic_error *exception;

  if (a2 != vcvtpd_u64_f64((double)(unint64_t)(4 * a3) * 0.125))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "BitSpanCast to sub-byte type span has invalid number of elements. Sub-byte span with NumElements requires exactly Span<uint8_t>.Size() bytes.");
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
}

void sub_1E09762EC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::Bf16>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  _QWORD *result;
  uint64_t v7;
  unint64_t v8;
  __int16 v9;
  uint64_t v10;
  char v11;
  _QWORD v12[2];

  v12[0] = a2;
  v12[1] = a3;
  result = std::vector<MIL::Bf16>::vector(a4, a3);
  if (a4[1] != *a4)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v11 = MIL::Util::Span<MIL::UInt1 const,18446744073709551615ul>::ValueAt(v12, v8);
      result = (_QWORD *)MIL::UInt1::GetInt((MIL::UInt1 *)&v11);
      if ((_DWORD)result)
      {
        v9 = *(_WORD *)(a1 + 2 * v7++);
        v10 = *a4;
        *(_WORD *)(*a4 + 2 * v8) = v9;
      }
      else
      {
        v10 = *a4;
        *(_WORD *)(*a4 + 2 * v8) = 0;
      }
      ++v8;
    }
    while (v8 < (a4[1] - v10) >> 1);
  }
  return result;
}

void sub_1E09763A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<MIL::Fp16>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char **a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  int Int;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int16 v22;
  std::runtime_error *exception;
  char v24;
  _QWORD v25[2];

  v25[0] = a2;
  v25[1] = a3;
  v6 = *a1;
  v5 = a1[1];
  if (a3 != (v5 - *a1) >> 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "It should be guaranteed that the sizes of the input data and mask are the same");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (v5 != v6)
  {
    v8 = 0;
    do
    {
      v24 = MIL::Util::Span<MIL::UInt1 const,18446744073709551615ul>::ValueAt(v25, v8);
      Int = MIL::UInt1::GetInt((MIL::UInt1 *)&v24);
      v10 = *a1;
      if (Int)
      {
        v12 = a4[1];
        v11 = (unint64_t)a4[2];
        if ((unint64_t)v12 >= v11)
        {
          v14 = *a4;
          v15 = v12 - *a4;
          if (v15 <= -3)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v16 = v15 >> 1;
          v17 = v11 - (_QWORD)v14;
          if (v17 <= (v15 >> 1) + 1)
            v18 = v16 + 1;
          else
            v18 = v17;
          if (v17 >= 0x7FFFFFFFFFFFFFFELL)
            v19 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v19 = v18;
          if (v19)
          {
            v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>((uint64_t)(a4 + 2), v19);
            v14 = *a4;
            v12 = a4[1];
          }
          else
          {
            v20 = 0;
          }
          v21 = &v20[2 * v16];
          *(_WORD *)v21 = *(_WORD *)(v10 + 2 * v8);
          v13 = v21 + 2;
          while (v12 != v14)
          {
            v22 = *((_WORD *)v12 - 1);
            v12 -= 2;
            *((_WORD *)v21 - 1) = v22;
            v21 -= 2;
          }
          *a4 = v21;
          a4[1] = v13;
          a4[2] = &v20[2 * v19];
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_WORD *)v12 = *(_WORD *)(v10 + 2 * v8);
          v13 = v12 + 2;
        }
        a4[1] = v13;
        v10 = *a1;
      }
      ++v8;
    }
    while (v8 < (a1[1] - v10) >> 1);
  }
}

void sub_1E0976544(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<float>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char **a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  int Int;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  int v21;
  std::runtime_error *exception;
  char v23;
  _QWORD v24[2];

  v24[0] = a2;
  v24[1] = a3;
  v6 = *a1;
  v5 = a1[1];
  if (a3 != (v5 - *a1) >> 2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "It should be guaranteed that the sizes of the input data and mask are the same");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (v5 != v6)
  {
    v8 = 0;
    do
    {
      v23 = MIL::Util::Span<MIL::UInt1 const,18446744073709551615ul>::ValueAt(v24, v8);
      Int = MIL::UInt1::GetInt((MIL::UInt1 *)&v23);
      v10 = *a1;
      if (Int)
      {
        v12 = a4[1];
        v11 = (unint64_t)a4[2];
        if ((unint64_t)v12 >= v11)
        {
          v14 = *a4;
          v15 = (v12 - *a4) >> 2;
          v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 62)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v17 = v11 - (_QWORD)v14;
          if (v17 >> 1 > v16)
            v16 = v17 >> 1;
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
            v18 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v18 = v16;
          if (v18)
          {
            v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a4 + 2), v18);
            v14 = *a4;
            v12 = a4[1];
          }
          else
          {
            v19 = 0;
          }
          v20 = &v19[4 * v15];
          *(_DWORD *)v20 = *(_DWORD *)(v10 + 4 * v8);
          v13 = v20 + 4;
          while (v12 != v14)
          {
            v21 = *((_DWORD *)v12 - 1);
            v12 -= 4;
            *((_DWORD *)v20 - 1) = v21;
            v20 -= 4;
          }
          *a4 = v20;
          a4[1] = v13;
          a4[2] = &v19[4 * v18];
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_DWORD *)v12 = *(_DWORD *)(v10 + 4 * v8);
          v13 = v12 + 4;
        }
        a4[1] = v13;
        v10 = *a1;
      }
      ++v8;
    }
    while (v8 < (a1[1] - v10) >> 2);
  }
}

void sub_1E0976704(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

MIL::Operators::Common::ios18::ConstExprs::SparseBlockwiseShiftScale::Impl *std::unique_ptr<MIL::Operators::Common::ios18::ConstExprs::SparseBlockwiseShiftScale::Impl>::reset[abi:ne180100](MIL::Operators::Common::ios18::ConstExprs::SparseBlockwiseShiftScale::Impl **a1, MIL::Operators::Common::ios18::ConstExprs::SparseBlockwiseShiftScale::Impl *a2)
{
  MIL::Operators::Common::ios18::ConstExprs::SparseBlockwiseShiftScale::Impl *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    MIL::Operators::Common::ios18::ConstExprs::SparseBlockwiseShiftScale::Impl::~Impl(result);
    JUMPOUT(0x1E0C023A0);
  }
  return result;
}

void MIL::Operators::Common::ios18::ConstExprs::SparseBlockwiseShiftScale::Impl::~Impl(MIL::Operators::Common::ios18::ConstExprs::SparseBlockwiseShiftScale::Impl *this)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)this + 64);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
}

uint64_t MIL::Operators::Common::ios18::Conv::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count_vtbl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count_vtbl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  std::__shared_weak_count_vtbl *v75;
  uint64_t v76;
  std::__shared_weak_count_vtbl *v77;
  uint64_t v78;
  _QWORD *v79;
  unsigned __int8 *v80;
  void *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  unsigned __int8 *v88;
  std::__shared_weak_count_vtbl *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  _QWORD *v93;
  unsigned __int8 *v94;
  void *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  _QWORD *v101;
  unsigned __int8 *v102;
  std::__shared_weak_count_vtbl *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  unsigned __int8 *v110;
  std::__shared_weak_count_vtbl *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  _QWORD *v115;
  unsigned __int8 *v116;
  void *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  std::__shared_weak_count_vtbl *v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  _QWORD *v128;
  void *v129;
  _QWORD *v130;
  void *v131;
  unint64_t v132;
  _QWORD *v133;
  _QWORD *v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  char *v139;
  uint64_t v140;
  char *v141;
  _QWORD *v142;
  _QWORD *v143;
  char *v144;
  __int128 v145;
  _QWORD *v146;
  uint64_t v147;
  void *v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  _QWORD *v154;
  void *v155;
  _QWORD *v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  _OWORD *v166;
  unsigned __int8 *v167;
  void *v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  uint64_t v172;
  std::__shared_weak_count_vtbl *v173;
  std::__shared_weak_count *v174;
  std::__shared_weak_count *v175;
  unint64_t *p_shared_owners;
  unint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  void *v181;
  std::__shared_weak_count *v182;
  std::__shared_weak_count_vtbl *v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count_vtbl *v187;
  void *v188;
  std::__shared_weak_count *v189;
  std::__shared_weak_count_vtbl *v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  std::__shared_weak_count_vtbl *v194;
  void *v195;
  std::__shared_weak_count *v196;
  std::__shared_weak_count_vtbl *v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  std::__shared_weak_count_vtbl *v201;
  void *v202;
  std::__shared_weak_count *v203;
  std::__shared_weak_count_vtbl *v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  std::__shared_weak_count_vtbl *v208;
  uint64_t v209;
  std::__shared_weak_count *v210;
  std::__shared_weak_count_vtbl *v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  void *v215;
  void *v216;
  std::__shared_weak_count *v217;
  std::__shared_weak_count_vtbl *v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  std::__shared_weak_count_vtbl *v222;
  uint64_t v223;
  std::__shared_weak_count *v224;
  std::__shared_weak_count_vtbl *v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  void *v229;
  void *v230;
  std::__shared_weak_count *v231;
  std::__shared_weak_count_vtbl *v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  std::__shared_weak_count_vtbl *v236;
  void *v237;
  std::__shared_weak_count *v238;
  std::__shared_weak_count_vtbl *v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  std::__shared_weak_count_vtbl *v243;
  void *v244;
  std::__shared_weak_count *v245;
  std::__shared_weak_count_vtbl *v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  std::__shared_weak_count_vtbl *v250;
  void *v251;
  std::__shared_weak_count *v252;
  std::__shared_weak_count_vtbl *v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  std::__shared_weak_count_vtbl *v257;
  void *v258;
  std::__shared_weak_count *v259;
  std::__shared_weak_count_vtbl *v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  std::__shared_weak_count_vtbl *v264;
  void *v265;
  std::__shared_weak_count *v266;
  std::__shared_weak_count_vtbl *v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  std::__shared_weak_count_vtbl *v271;
  uint64_t v272;
  std::__shared_weak_count *v273;
  std::__shared_weak_count_vtbl *v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  unint64_t v277;
  void *v278;
  void *v279;
  std::__shared_weak_count *v280;
  std::__shared_weak_count_vtbl *v281;
  uint64_t i;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  void *v286;
  void *v287;
  std::__shared_weak_count *v288;
  std::__shared_weak_count_vtbl *v289;
  uint64_t j;
  std::__shared_weak_count *v291;
  unint64_t *v292;
  unint64_t v293;
  void *v294;
  uint64_t v295;
  std::__shared_weak_count *v296;
  std::__shared_weak_count_vtbl *v297;
  std::__shared_weak_count *v298;
  unint64_t *v299;
  unint64_t v300;
  void *v301;
  uint64_t v302;
  uint64_t result;
  uint64_t v304;
  void *v305;
  std::__shared_weak_count *v306;
  void *v307[2];
  char v308;
  void *v309;
  std::__shared_weak_count *v310;
  void *v311[2];
  char v312;
  void *v313;
  std::__shared_weak_count *v314;
  void *v315;
  std::__shared_weak_count *v316;
  void *v317[2];
  char v318;
  void *v319[2];
  char v320;
  std::__shared_weak_count_vtbl *v321;
  std::__shared_weak_count *v322;
  void *v323[2];
  char v324;
  void *v325[2];
  char v326;
  std::__shared_weak_count_vtbl *v327;
  std::__shared_weak_count *v328;
  void *v329[2];
  char v330;
  void *v331[2];
  char v332;
  std::__shared_weak_count_vtbl *v333;
  std::__shared_weak_count *v334;
  void *v335[2];
  char v336;
  void *v337[2];
  char v338;
  std::__shared_weak_count_vtbl *v339;
  std::__shared_weak_count *v340;
  void *v341[2];
  char v342;
  void *v343[2];
  char v344;
  std::__shared_weak_count_vtbl *v345;
  std::__shared_weak_count *v346;
  void *v347[2];
  char v348;
  void *v349[2];
  char v350;
  std::__shared_weak_count_vtbl *v351;
  std::__shared_weak_count *v352;
  void *v353;
  std::__shared_weak_count *v354;
  void *v355[2];
  char v356;
  std::__shared_weak_count_vtbl *v357;
  std::__shared_weak_count *v358;
  void *v359;
  std::__shared_weak_count *v360;
  void *v361[2];
  char v362;
  std::__shared_weak_count_vtbl *v363;
  std::__shared_weak_count *v364;
  void *v365[2];
  char v366;
  void *v367[2];
  char v368;
  std::__shared_weak_count_vtbl *v369;
  std::__shared_weak_count *v370;
  void *v371[2];
  char v372;
  void *v373[2];
  char v374;
  std::__shared_weak_count_vtbl *v375;
  std::__shared_weak_count *v376;
  void *v377[2];
  char v378;
  void *v379[2];
  char v380;
  std::__shared_weak_count_vtbl *v381;
  std::__shared_weak_count *v382;
  std::__shared_weak_count_vtbl *v383;
  std::__shared_weak_count *v384;
  __n128 v385;
  __int128 v386;
  __int128 v387;
  void *v388[2];
  uint64_t v389;
  __n128 v390;
  __n128 v391;
  __n128 v392;
  __n128 v393;
  __n128 v394;
  __n128 v395;
  __n128 v396;
  void *v397;
  void *v398;
  _QWORD *v399;
  void *v400;
  void *v401;
  _QWORD *v402;
  void *v403;
  void *v404;
  _QWORD *v405;
  void *v406;
  void *v407;
  _QWORD *v408;
  void *v409;
  void *v410;
  _QWORD *v411;
  void *v412;
  void *v413;
  _QWORD *v414;
  __n128 v415;
  uint64_t v416;
  void *__p;
  void *v418;
  _QWORD *v419;
  __n128 v420;
  _QWORD *v421;
  void *v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  _QWORD v428[3];
  _QWORD v429[3];
  uint64_t v430[3];
  _QWORD v431[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_get_deleter;
  uint64_t v434;
  _QWORD v435[3];
  _QWORD *v436;
  _BYTE v437[24];
  _BYTE *v438;
  _QWORD v439[3];
  _QWORD *v440;
  std::__shared_weak_count_vtbl *v441;
  std::__shared_weak_count_vtbl *v442;
  _QWORD *v443;
  uint64_t v444;

  v444 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v421 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (uint64_t)&v10->__get_deleter;
  v434 = (uint64_t)&v10->__get_deleter;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v10->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  v10->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v9;
  Scalar = v10;
  v422 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  v442 = (std::__shared_weak_count_vtbl *)&v14->__get_deleter;
  v443 = &v14->__get_deleter;
  v14->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v11;
  v14->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v12;
  v14->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v13;
  v441 = v14;
  v423 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v441);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(0x18uLL);
  v419 = v18 + 3;
  *v18 = v15;
  v18[1] = v16;
  v18[2] = v17;
  __p = v18;
  v418 = v18 + 3;
  v424 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v422, 3, &v420);
  MIL::IRParameter::Make(&v420, (uint64_t *)&v412);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v412);
  v19 = v412;
  v412 = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = (std::__shared_weak_count *)v420.n128_u64[1];
  if (v420.n128_u64[1])
  {
    v21 = (unint64_t *)(v420.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (__p)
  {
    v418 = __p;
    operator delete(__p);
  }
  if (v441)
  {
    v442 = v441;
    operator delete(v441);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v23 = v421;
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = MIL::IRUnknownDimension::Make(a1, 0);
  v27 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (uint64_t)&v27->__get_deleter;
  v434 = (uint64_t)&v27->__get_deleter;
  v27->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v24;
  v27->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v25;
  v27->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v26;
  Scalar = v27;
  v422 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = MIL::IRUnknownDimension::Make(a1, 0);
  v30 = MIL::IRUnknownDimension::Make(a1, 0);
  v31 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  v442 = (std::__shared_weak_count_vtbl *)&v31->__get_deleter;
  v443 = &v31->__get_deleter;
  v31->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v28;
  v31->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v29;
  v31->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v30;
  v441 = v31;
  v423 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v441);
  v32 = MIL::IRUnknownDimension::Make(a1, 0);
  v33 = MIL::IRUnknownDimension::Make(a1, 0);
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = operator new(0x18uLL);
  v419 = v35 + 3;
  *v35 = v32;
  v35[1] = v33;
  v35[2] = v34;
  __p = v35;
  v418 = v35 + 3;
  v424 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v36 = MIL::IRUnknownDimension::Make(a1, 0);
  v37 = MIL::IRUnknownDimension::Make(a1, 0);
  v38 = MIL::IRUnknownDimension::Make(a1, 0);
  v39 = MIL::IRUnknownDimension::Make(a1, 0);
  v40 = operator new(0x20uLL);
  v414 = v40 + 4;
  *v40 = v36;
  v40[1] = v37;
  v40[2] = v38;
  v40[3] = v39;
  v412 = v40;
  v413 = v40 + 4;
  v425 = MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v412);
  v41 = MIL::IRUnknownDimension::Make(a1, 0);
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = MIL::IRUnknownDimension::Make(a1, 0);
  v44 = MIL::IRUnknownDimension::Make(a1, 0);
  v45 = operator new(0x20uLL);
  v411 = v45 + 4;
  *v45 = v41;
  v45[1] = v42;
  v45[2] = v43;
  v45[3] = v44;
  v409 = v45;
  v410 = v45 + 4;
  v426 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v409);
  v46 = MIL::IRUnknownDimension::Make(a1, 0);
  v47 = MIL::IRUnknownDimension::Make(a1, 0);
  v48 = MIL::IRUnknownDimension::Make(a1, 0);
  v49 = MIL::IRUnknownDimension::Make(a1, 0);
  v50 = operator new(0x20uLL);
  v408 = v50 + 4;
  *v50 = v46;
  v50[1] = v47;
  v50[2] = v48;
  v50[3] = v49;
  v406 = v50;
  v407 = v50 + 4;
  v427 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v406);
  v51 = MIL::IRUnknownDimension::Make(a1, 0);
  v52 = MIL::IRUnknownDimension::Make(a1, 0);
  v53 = MIL::IRUnknownDimension::Make(a1, 0);
  v54 = MIL::IRUnknownDimension::Make(a1, 0);
  v55 = MIL::IRUnknownDimension::Make(a1, 0);
  v56 = operator new(0x28uLL);
  v405 = v56 + 5;
  *v56 = v51;
  v56[1] = v52;
  v56[2] = v53;
  v56[3] = v54;
  v56[4] = v55;
  v403 = v56;
  v404 = v56 + 5;
  v428[0] = MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v403);
  v57 = MIL::IRUnknownDimension::Make(a1, 0);
  v58 = MIL::IRUnknownDimension::Make(a1, 0);
  v59 = MIL::IRUnknownDimension::Make(a1, 0);
  v60 = MIL::IRUnknownDimension::Make(a1, 0);
  v61 = MIL::IRUnknownDimension::Make(a1, 0);
  v62 = operator new(0x28uLL);
  v402 = v62 + 5;
  *v62 = v57;
  v62[1] = v58;
  v62[2] = v59;
  v62[3] = v60;
  v62[4] = v61;
  v400 = v62;
  v401 = v62 + 5;
  v428[1] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v400);
  v63 = MIL::IRUnknownDimension::Make(a1, 0);
  v64 = MIL::IRUnknownDimension::Make(a1, 0);
  v65 = MIL::IRUnknownDimension::Make(a1, 0);
  v66 = MIL::IRUnknownDimension::Make(a1, 0);
  v67 = MIL::IRUnknownDimension::Make(a1, 0);
  v68 = operator new(0x28uLL);
  v399 = v68 + 5;
  *v68 = v63;
  v68[1] = v64;
  v68[2] = v65;
  v68[3] = v66;
  v68[4] = v67;
  v397 = v68;
  v398 = v68 + 5;
  v428[2] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v397);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v422, 9, &v415);
  MIL::IRParameter::Make(&v415, &v416);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(v23, "weight", &v416);
  v69 = v416;
  v416 = 0;
  if (v69)
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
  v70 = (std::__shared_weak_count *)v415.n128_u64[1];
  if (v415.n128_u64[1])
  {
    v71 = (unint64_t *)(v415.n128_u64[1] + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (v397)
  {
    v398 = v397;
    operator delete(v397);
  }
  if (v400)
  {
    v401 = v400;
    operator delete(v400);
  }
  if (v403)
  {
    v404 = v403;
    operator delete(v403);
  }
  if (v406)
  {
    v407 = v406;
    operator delete(v406);
  }
  if (v409)
  {
    v410 = v409;
    operator delete(v409);
  }
  if (v412)
  {
    v413 = v412;
    operator delete(v412);
  }
  if (__p)
  {
    v418 = __p;
    operator delete(__p);
  }
  if (v441)
  {
    v442 = v441;
    operator delete(v441);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v73 = v421;
  v74 = MIL::IRUnknownDimension::Make(a1, 0);
  v75 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v75;
  v75->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v74;
  p_get_deleter = (uint64_t)&v75->~__shared_weak_count_0;
  v434 = (uint64_t)&v75->~__shared_weak_count_0;
  v422 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v76 = MIL::IRUnknownDimension::Make(a1, 0);
  v77 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v441 = v77;
  v77->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v76;
  v442 = (std::__shared_weak_count_vtbl *)&v77->~__shared_weak_count_0;
  v443 = &v77->~__shared_weak_count_0;
  v423 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v441);
  v78 = MIL::IRUnknownDimension::Make(a1, 0);
  v79 = operator new(8uLL);
  __p = v79;
  *v79 = v78;
  v419 = v79 + 1;
  v418 = v79 + 1;
  v424 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v422, 3, &v396);
  MIL::IRParameter::Make(&v396, (uint64_t *)&v412);
  v80 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v73, "bias", (uint64_t *)&v412);
  v81 = v412;
  v412 = 0;
  if (v81)
    (*(void (**)(void *))(*(_QWORD *)v81 + 8))(v81);
  v82 = (std::__shared_weak_count *)v396.n128_u64[1];
  if (v396.n128_u64[1])
  {
    v83 = (unint64_t *)(v396.n128_u64[1] + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  if (__p)
  {
    v418 = __p;
    operator delete(__p);
  }
  if (v441)
  {
    v442 = v441;
    operator delete(v441);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v80 + 5) + 48))(*((_QWORD *)v80 + 5), 1);
  v85 = v421;
  v86 = MIL::IRUnknownDimension::Make(a1, 0);
  v87 = operator new(8uLL);
  v422 = v87;
  *v87 = v86;
  v424 = (uint64_t)(v87 + 1);
  v423 = (uint64_t)(v87 + 1);
  v441 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v422);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v441, 1, &v395);
  MIL::IRParameter::Make(&v395, (uint64_t *)&Scalar);
  v88 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v85, "strides", (uint64_t *)&Scalar);
  v89 = Scalar;
  Scalar = 0;
  if (v89)
    (*((void (**)(std::__shared_weak_count_vtbl *))v89->~__shared_weak_count + 1))(v89);
  v90 = (std::__shared_weak_count *)v395.n128_u64[1];
  if (v395.n128_u64[1])
  {
    v91 = (unint64_t *)(v395.n128_u64[1] + 8);
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  if (v422)
  {
    v423 = (uint64_t)v422;
    operator delete(v422);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v88 + 5) + 32))(*((_QWORD *)v88 + 5), 1);
  v93 = v421;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v394);
  MIL::IRParameter::Make(&v394, (uint64_t *)&v422);
  v94 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v93, "pad_type", (uint64_t *)&v422);
  v95 = v422;
  v422 = 0;
  if (v95)
    (*(void (**)(void *))(*(_QWORD *)v95 + 8))(v95);
  v96 = (std::__shared_weak_count *)v394.n128_u64[1];
  if (v394.n128_u64[1])
  {
    v97 = (unint64_t *)(v394.n128_u64[1] + 8);
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v94 + 5) + 32))(*((_QWORD *)v94 + 5), 1);
  v99 = v421;
  v100 = MIL::IRUnknownDimension::Make(a1, 0);
  v101 = operator new(8uLL);
  v422 = v101;
  *v101 = v100;
  v424 = (uint64_t)(v101 + 1);
  v423 = (uint64_t)(v101 + 1);
  v441 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v422);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v441, 1, &v393);
  MIL::IRParameter::Make(&v393, (uint64_t *)&Scalar);
  v102 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[4],std::unique_ptr<MIL::IRParameter>>(v99, "pad", (uint64_t *)&Scalar);
  v103 = Scalar;
  Scalar = 0;
  if (v103)
    (*((void (**)(std::__shared_weak_count_vtbl *))v103->~__shared_weak_count + 1))(v103);
  v104 = (std::__shared_weak_count *)v393.n128_u64[1];
  if (v393.n128_u64[1])
  {
    v105 = (unint64_t *)(v393.n128_u64[1] + 8);
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  if (v422)
  {
    v423 = (uint64_t)v422;
    operator delete(v422);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v102 + 5) + 32))(*((_QWORD *)v102 + 5), 1);
  v107 = v421;
  v108 = MIL::IRUnknownDimension::Make(a1, 0);
  v109 = operator new(8uLL);
  v422 = v109;
  *v109 = v108;
  v424 = (uint64_t)(v109 + 1);
  v423 = (uint64_t)(v109 + 1);
  v441 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v422);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v441, 1, &v392);
  MIL::IRParameter::Make(&v392, (uint64_t *)&Scalar);
  v110 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v107, "dilations", (uint64_t *)&Scalar);
  v111 = Scalar;
  Scalar = 0;
  if (v111)
    (*((void (**)(std::__shared_weak_count_vtbl *))v111->~__shared_weak_count + 1))(v111);
  v112 = (std::__shared_weak_count *)v392.n128_u64[1];
  if (v392.n128_u64[1])
  {
    v113 = (unint64_t *)(v392.n128_u64[1] + 8);
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  if (v422)
  {
    v423 = (uint64_t)v422;
    operator delete(v422);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v110 + 5) + 32))(*((_QWORD *)v110 + 5), 1);
  v115 = v421;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v391);
  MIL::IRParameter::Make(&v391, (uint64_t *)&v422);
  v116 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(v115, "groups", (uint64_t *)&v422);
  v117 = v422;
  v422 = 0;
  if (v117)
    (*(void (**)(void *))(*(_QWORD *)v117 + 8))(v117);
  v118 = (std::__shared_weak_count *)v391.n128_u64[1];
  if (v391.n128_u64[1])
  {
    v119 = (unint64_t *)(v391.n128_u64[1] + 8);
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v116 + 5) + 32))(*((_QWORD *)v116 + 5), 1);
  v406 = 0;
  v121 = operator new();
  *(_QWORD *)v121 = 0;
  *(_QWORD *)(v121 + 8) = 0;
  *(_QWORD *)(v121 + 16) = 0;
  v422 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v406, (void **)v121);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v422, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)v406, 1uLL);
  v122 = v406;
  v123 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v124 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v441 = v124;
  v124->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v123;
  v442 = (std::__shared_weak_count_vtbl *)&v124->~__shared_weak_count_0;
  v443 = &v124->~__shared_weak_count_0;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v441);
  v125 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v126 = operator new(8uLL);
  __p = v126;
  *v126 = v125;
  v419 = v126 + 1;
  v418 = v126 + 1;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v127 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v128 = operator new(8uLL);
  v412 = v128;
  *v128 = v127;
  v414 = v128 + 1;
  v413 = v128 + 1;
  v434 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v412);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v390);
  MIL::IRParameter::Make(&v390, (uint64_t *)&v403);
  v129 = v403;
  v409 = v403;
  if (v403)
  {
    v130 = (_QWORD *)operator new();
    v131 = v403;
    *v130 = &unk_1EA99F888;
    v130[1] = 0;
    v130[2] = 0;
    v130[3] = v131;
  }
  else
  {
    v130 = 0;
  }
  v410 = v130;
  v403 = 0;
  v132 = v122[2];
  v133 = (_QWORD *)v122[1];
  if ((unint64_t)v133 >= v132)
  {
    v135 = ((uint64_t)v133 - *v122) >> 4;
    v136 = v135 + 1;
    if ((unint64_t)(v135 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v137 = v132 - *v122;
    if (v137 >> 3 > v136)
      v136 = v137 >> 3;
    if ((unint64_t)v137 >= 0x7FFFFFFFFFFFFFF0)
      v138 = 0xFFFFFFFFFFFFFFFLL;
    else
      v138 = v136;
    v426 = (uint64_t)(v122 + 2);
    v139 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v122 + 2), v138);
    v141 = &v139[16 * v135];
    *(_QWORD *)v141 = v129;
    *((_QWORD *)v141 + 1) = v130;
    v410 = 0;
    v409 = 0;
    v143 = (_QWORD *)*v122;
    v142 = (_QWORD *)v122[1];
    if (v142 == (_QWORD *)*v122)
    {
      v146 = (_QWORD *)v122[1];
      v144 = &v139[16 * v135];
    }
    else
    {
      v144 = &v139[16 * v135];
      do
      {
        v145 = *((_OWORD *)v142 - 1);
        v142 -= 2;
        *((_OWORD *)v144 - 1) = v145;
        v144 -= 16;
        *v142 = 0;
        v142[1] = 0;
      }
      while (v142 != v143);
      v146 = (_QWORD *)*v122;
      v142 = (_QWORD *)v122[1];
    }
    v134 = v141 + 16;
    *v122 = v144;
    v423 = (uint64_t)v146;
    v122[1] = v141 + 16;
    v424 = (uint64_t)v142;
    v147 = v122[2];
    v122[2] = &v139[16 * v140];
    v425 = v147;
    v422 = v146;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v422);
  }
  else
  {
    *v133 = v129;
    v133[1] = v130;
    v134 = v133 + 2;
    v410 = 0;
    v409 = 0;
  }
  v122[1] = v134;
  v148 = v403;
  v403 = 0;
  if (v148)
    (*(void (**)(void *))(*(_QWORD *)v148 + 8))(v148);
  v149 = (std::__shared_weak_count *)v390.n128_u64[1];
  if (v390.n128_u64[1])
  {
    v150 = (unint64_t *)(v390.n128_u64[1] + 8);
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  if (v412)
  {
    v413 = v412;
    operator delete(v412);
  }
  if (__p)
  {
    v418 = __p;
    operator delete(__p);
  }
  if (v441)
  {
    v442 = v441;
    operator delete(v441);
  }
  *(_OWORD *)v388 = *(_OWORD *)a2;
  v389 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v152 = (uint64_t)v421;
  *(_QWORD *)&v387 = v421;
  if (v421)
  {
    v153 = (_QWORD *)operator new();
    *v153 = &unk_1EA99F8E8;
    v153[1] = 0;
    v153[2] = 0;
    v153[3] = v152;
  }
  else
  {
    v153 = 0;
  }
  *((_QWORD *)&v387 + 1) = v153;
  v421 = 0;
  *(_QWORD *)&v386 = v406;
  if (v406)
  {
    v154 = (_QWORD *)operator new();
    v155 = v406;
    *v154 = &unk_1EA99F948;
    v154[1] = 0;
    v154[2] = 0;
    v154[3] = v155;
  }
  else
  {
    v154 = 0;
  }
  *((_QWORD *)&v386 + 1) = v154;
  v406 = 0;
  v439[0] = &unk_1EA99FAC8;
  v439[1] = MIL::Operators::Common::ios18::CustomValidators::ValidateConv;
  v440 = v439;
  v438 = 0;
  MIL::IROperator::Make((__int128 *)v388, &v387, &v386, (uint64_t)v439, (uint64_t)v437, a3);
  v156 = v438;
  if (v438 == v437)
  {
    v157 = 4;
    v156 = v437;
  }
  else
  {
    if (!v438)
      goto LABEL_134;
    v157 = 5;
  }
  (*(void (**)(void))(*v156 + 8 * v157))();
LABEL_134:
  v158 = v440;
  if (v440 == v439)
  {
    v159 = 4;
    v158 = v439;
    goto LABEL_138;
  }
  if (v440)
  {
    v159 = 5;
LABEL_138:
    (*(void (**)(void))(*v158 + 8 * v159))();
  }
  v160 = (std::__shared_weak_count *)*((_QWORD *)&v386 + 1);
  if (*((_QWORD *)&v386 + 1))
  {
    v161 = (unint64_t *)(*((_QWORD *)&v386 + 1) + 8);
    do
      v162 = __ldaxr(v161);
    while (__stlxr(v162 - 1, v161));
    if (!v162)
    {
      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
      std::__shared_weak_count::__release_weak(v160);
    }
  }
  v163 = (std::__shared_weak_count *)*((_QWORD *)&v387 + 1);
  if (*((_QWORD *)&v387 + 1))
  {
    v164 = (unint64_t *)(*((_QWORD *)&v387 + 1) + 8);
    do
      v165 = __ldaxr(v164);
    while (__stlxr(v165 - 1, v164));
    if (!v165)
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v163);
    }
  }
  if (SHIBYTE(v389) < 0)
    operator delete(v388[0]);
  v441 = 0;
  v166 = (_OWORD *)operator new();
  *v166 = 0u;
  v166[1] = 0u;
  *((_DWORD *)v166 + 8) = 1065353216;
  v441 = (std::__shared_weak_count_vtbl *)v166;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v385);
  MIL::IRParameter::Make(&v385, (uint64_t *)&v422);
  v167 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v166, "minimum_compute_type", (uint64_t *)&v422);
  v168 = v422;
  v422 = 0;
  if (v168)
    (*(void (**)(void *))(*(_QWORD *)v168 + 8))(v168);
  v169 = (std::__shared_weak_count *)v385.n128_u64[1];
  if (v385.n128_u64[1])
  {
    v170 = (unint64_t *)(v385.n128_u64[1] + 8);
    do
      v171 = __ldaxr(v170);
    while (__stlxr(v171 - 1, v170));
    if (!v171)
    {
      ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
      std::__shared_weak_count::__release_weak(v169);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v167 + 5) + 32))(*((_QWORD *)v167 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v167 + 5) + 48))(*((_QWORD *)v167 + 5), 1);
  v172 = *a3;
  v173 = v441;
  v383 = v441;
  if (v441)
  {
    v174 = (std::__shared_weak_count *)operator new();
    v174->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v174->__shared_owners_ = 0;
    v174->__shared_weak_owners_ = 0;
    v174[1].__vftable = v173;
  }
  else
  {
    v174 = 0;
  }
  v384 = v174;
  v441 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v172 + 184))(v172, &v383);
  v175 = v384;
  if (v384)
  {
    p_shared_owners = (unint64_t *)&v384->__shared_owners_;
    do
      v177 = __ldaxr(p_shared_owners);
    while (__stlxr(v177 - 1, p_shared_owners));
    if (!v177)
    {
      ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
      std::__shared_weak_count::__release_weak(v175);
    }
  }
  v178 = *a3;
  v435[0] = &off_1EA99FBD8;
  v435[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceConv;
  v436 = v435;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v178 + 200))(v178, v435);
  v179 = v436;
  if (v436 == v435)
  {
    v180 = 4;
    v179 = v435;
  }
  else
  {
    if (!v436)
      goto LABEL_171;
    v180 = 5;
  }
  (*(void (**)(void))(*v179 + 8 * v180))();
LABEL_171:
  MIL::Validation::TensorDTypeConstraints::Make(&v422);
  v181 = v422;
  std::string::basic_string[abi:ne180100]<0>(v379, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v379, 0, (uint64_t *)&Scalar);
  v381 = Scalar;
  if (Scalar)
  {
    v182 = (std::__shared_weak_count *)operator new();
    v183 = Scalar;
    v182->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v182->__shared_owners_ = 0;
    v182->__shared_weak_owners_ = 0;
    v182[1].__vftable = v183;
  }
  else
  {
    v182 = 0;
  }
  v382 = v182;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v377, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v181 + 24))(v181, &v381, v377);
  if (v378 < 0)
    operator delete(v377[0]);
  v184 = v382;
  if (v382)
  {
    v185 = (unint64_t *)&v382->__shared_owners_;
    do
      v186 = __ldaxr(v185);
    while (__stlxr(v186 - 1, v185));
    if (!v186)
    {
      ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
      std::__shared_weak_count::__release_weak(v184);
    }
  }
  v187 = Scalar;
  Scalar = 0;
  if (v187)
    (*((void (**)(std::__shared_weak_count_vtbl *))v187->~__shared_weak_count + 1))(v187);
  if (v380 < 0)
    operator delete(v379[0]);
  v188 = v422;
  std::string::basic_string[abi:ne180100]<0>(v373, "weight");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v373, 0, (uint64_t *)&Scalar);
  v375 = Scalar;
  if (Scalar)
  {
    v189 = (std::__shared_weak_count *)operator new();
    v190 = Scalar;
    v189->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v189->__shared_owners_ = 0;
    v189->__shared_weak_owners_ = 0;
    v189[1].__vftable = v190;
  }
  else
  {
    v189 = 0;
  }
  v376 = v189;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v371, "U");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v188 + 24))(v188, &v375, v371);
  if (v372 < 0)
    operator delete(v371[0]);
  v191 = v376;
  if (v376)
  {
    v192 = (unint64_t *)&v376->__shared_owners_;
    do
      v193 = __ldaxr(v192);
    while (__stlxr(v193 - 1, v192));
    if (!v193)
    {
      ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
      std::__shared_weak_count::__release_weak(v191);
    }
  }
  v194 = Scalar;
  Scalar = 0;
  if (v194)
    (*((void (**)(std::__shared_weak_count_vtbl *))v194->~__shared_weak_count + 1))(v194);
  if (v374 < 0)
    operator delete(v373[0]);
  v195 = v422;
  std::string::basic_string[abi:ne180100]<0>(v367, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v367, 1, (uint64_t *)&Scalar);
  v369 = Scalar;
  if (Scalar)
  {
    v196 = (std::__shared_weak_count *)operator new();
    v197 = Scalar;
    v196->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v196->__shared_owners_ = 0;
    v196->__shared_weak_owners_ = 0;
    v196[1].__vftable = v197;
  }
  else
  {
    v196 = 0;
  }
  v370 = v196;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v365, "U");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v195 + 24))(v195, &v369, v365);
  if (v366 < 0)
    operator delete(v365[0]);
  v198 = v370;
  if (v370)
  {
    v199 = (unint64_t *)&v370->__shared_owners_;
    do
      v200 = __ldaxr(v199);
    while (__stlxr(v200 - 1, v199));
    if (!v200)
    {
      ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
      std::__shared_weak_count::__release_weak(v198);
    }
  }
  v201 = Scalar;
  Scalar = 0;
  if (v201)
    (*((void (**)(std::__shared_weak_count_vtbl *))v201->~__shared_weak_count + 1))(v201);
  if (v368 < 0)
    operator delete(v367[0]);
  v202 = v422;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v363 = Scalar;
  if (Scalar)
  {
    v203 = (std::__shared_weak_count *)operator new();
    v204 = Scalar;
    v203->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v203->__shared_owners_ = 0;
    v203->__shared_weak_owners_ = 0;
    v203[1].__vftable = v204;
  }
  else
  {
    v203 = 0;
  }
  v364 = v203;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v361, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v202 + 24))(v202, &v363, v361);
  if (v362 < 0)
    operator delete(v361[0]);
  v205 = v364;
  if (v364)
  {
    v206 = (unint64_t *)&v364->__shared_owners_;
    do
      v207 = __ldaxr(v206);
    while (__stlxr(v207 - 1, v206));
    if (!v207)
    {
      ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
      std::__shared_weak_count::__release_weak(v205);
    }
  }
  v208 = Scalar;
  Scalar = 0;
  if (v208)
    (*((void (**)(std::__shared_weak_count_vtbl *))v208->~__shared_weak_count + 1))(v208);
  v209 = *a3;
  v359 = v422;
  if (v422)
  {
    v210 = (std::__shared_weak_count *)operator new();
    v211 = (std::__shared_weak_count_vtbl *)v422;
    v210->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v210->__shared_owners_ = 0;
    v210->__shared_weak_owners_ = 0;
    v210[1].__vftable = v211;
  }
  else
  {
    v210 = 0;
  }
  v360 = v210;
  v422 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v209 + 56))(v209, &v359);
  v212 = v360;
  if (v360)
  {
    v213 = (unint64_t *)&v360->__shared_owners_;
    do
      v214 = __ldaxr(v213);
    while (__stlxr(v214 - 1, v213));
    if (!v214)
    {
      ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
      std::__shared_weak_count::__release_weak(v212);
    }
  }
  v215 = v422;
  v422 = 0;
  if (v215)
    (*(void (**)(void *))(*(_QWORD *)v215 + 8))(v215);
  MIL::Validation::TensorRankValueConstraints::Make(&v422);
  v216 = v422;
  std::string::basic_string[abi:ne180100]<0>(v355, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v355, 0, (uint64_t *)&Scalar);
  v357 = Scalar;
  if (Scalar)
  {
    v217 = (std::__shared_weak_count *)operator new();
    v218 = Scalar;
    v217->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v217->__shared_owners_ = 0;
    v217->__shared_weak_owners_ = 0;
    v217[1].__vftable = v218;
  }
  else
  {
    v217 = 0;
  }
  v358 = v217;
  Scalar = 0;
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))(*(_QWORD *)v216 + 32))(v216, &v357, 3, 5);
  v219 = v358;
  if (v358)
  {
    v220 = (unint64_t *)&v358->__shared_owners_;
    do
      v221 = __ldaxr(v220);
    while (__stlxr(v221 - 1, v220));
    if (!v221)
    {
      ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
      std::__shared_weak_count::__release_weak(v219);
    }
  }
  v222 = Scalar;
  Scalar = 0;
  if (v222)
    (*((void (**)(std::__shared_weak_count_vtbl *))v222->~__shared_weak_count + 1))(v222);
  if (v356 < 0)
    operator delete(v355[0]);
  v223 = *a3;
  v353 = v422;
  if (v422)
  {
    v224 = (std::__shared_weak_count *)operator new();
    v225 = (std::__shared_weak_count_vtbl *)v422;
    v224->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FC78;
    v224->__shared_owners_ = 0;
    v224->__shared_weak_owners_ = 0;
    v224[1].__vftable = v225;
  }
  else
  {
    v224 = 0;
  }
  v354 = v224;
  v422 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v223 + 56))(v223, &v353);
  v226 = v354;
  if (v354)
  {
    v227 = (unint64_t *)&v354->__shared_owners_;
    do
      v228 = __ldaxr(v227);
    while (__stlxr(v228 - 1, v227));
    if (!v228)
    {
      ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
      std::__shared_weak_count::__release_weak(v226);
    }
  }
  v229 = v422;
  v422 = 0;
  if (v229)
    (*(void (**)(void *))(*(_QWORD *)v229 + 8))(v229);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v422);
  v230 = v422;
  std::string::basic_string[abi:ne180100]<0>(v349, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v349, 0, (uint64_t *)&Scalar);
  v351 = Scalar;
  if (Scalar)
  {
    v231 = (std::__shared_weak_count *)operator new();
    v232 = Scalar;
    v231->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v231->__shared_owners_ = 0;
    v231->__shared_weak_owners_ = 0;
    v231[1].__vftable = v232;
  }
  else
  {
    v231 = 0;
  }
  v352 = v231;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v347, "C_in");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v230 + 24))(v230, &v351, 1, v347);
  if (v348 < 0)
    operator delete(v347[0]);
  v233 = v352;
  if (v352)
  {
    v234 = (unint64_t *)&v352->__shared_owners_;
    do
      v235 = __ldaxr(v234);
    while (__stlxr(v235 - 1, v234));
    if (!v235)
    {
      ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
      std::__shared_weak_count::__release_weak(v233);
    }
  }
  v236 = Scalar;
  Scalar = 0;
  if (v236)
    (*((void (**)(std::__shared_weak_count_vtbl *))v236->~__shared_weak_count + 1))(v236);
  if (v350 < 0)
    operator delete(v349[0]);
  v237 = v422;
  std::string::basic_string[abi:ne180100]<0>(v343, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v343, 0, (uint64_t *)&Scalar);
  v345 = Scalar;
  if (Scalar)
  {
    v238 = (std::__shared_weak_count *)operator new();
    v239 = Scalar;
    v238->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v238->__shared_owners_ = 0;
    v238->__shared_weak_owners_ = 0;
    v238[1].__vftable = v239;
  }
  else
  {
    v238 = 0;
  }
  v346 = v238;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v341, "S");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, uint64_t, void **))(*(_QWORD *)v237 + 32))(v237, &v345, 2, -1, v341);
  if (v342 < 0)
    operator delete(v341[0]);
  v240 = v346;
  if (v346)
  {
    v241 = (unint64_t *)&v346->__shared_owners_;
    do
      v242 = __ldaxr(v241);
    while (__stlxr(v242 - 1, v241));
    if (!v242)
    {
      ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
      std::__shared_weak_count::__release_weak(v240);
    }
  }
  v243 = Scalar;
  Scalar = 0;
  if (v243)
    (*((void (**)(std::__shared_weak_count_vtbl *))v243->~__shared_weak_count + 1))(v243);
  if (v344 < 0)
    operator delete(v343[0]);
  v244 = v422;
  std::string::basic_string[abi:ne180100]<0>(v337, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v337, 1, (uint64_t *)&Scalar);
  v339 = Scalar;
  if (Scalar)
  {
    v245 = (std::__shared_weak_count *)operator new();
    v246 = Scalar;
    v245->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v245->__shared_owners_ = 0;
    v245->__shared_weak_owners_ = 0;
    v245[1].__vftable = v246;
  }
  else
  {
    v245 = 0;
  }
  v340 = v245;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v335, "C_out");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v244 + 24))(v244, &v339, 0, v335);
  if (v336 < 0)
    operator delete(v335[0]);
  v247 = v340;
  if (v340)
  {
    v248 = (unint64_t *)&v340->__shared_owners_;
    do
      v249 = __ldaxr(v248);
    while (__stlxr(v249 - 1, v248));
    if (!v249)
    {
      ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
      std::__shared_weak_count::__release_weak(v247);
    }
  }
  v250 = Scalar;
  Scalar = 0;
  if (v250)
    (*((void (**)(std::__shared_weak_count_vtbl *))v250->~__shared_weak_count + 1))(v250);
  if (v338 < 0)
    operator delete(v337[0]);
  v251 = v422;
  std::string::basic_string[abi:ne180100]<0>(v331, "strides");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v331, 0, (uint64_t *)&Scalar);
  v333 = Scalar;
  if (Scalar)
  {
    v252 = (std::__shared_weak_count *)operator new();
    v253 = Scalar;
    v252->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v252->__shared_owners_ = 0;
    v252->__shared_weak_owners_ = 0;
    v252[1].__vftable = v253;
  }
  else
  {
    v252 = 0;
  }
  v334 = v252;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v329, "S");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v251 + 24))(v251, &v333, 0, v329);
  if (v330 < 0)
    operator delete(v329[0]);
  v254 = v334;
  if (v334)
  {
    v255 = (unint64_t *)&v334->__shared_owners_;
    do
      v256 = __ldaxr(v255);
    while (__stlxr(v256 - 1, v255));
    if (!v256)
    {
      ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
      std::__shared_weak_count::__release_weak(v254);
    }
  }
  v257 = Scalar;
  Scalar = 0;
  if (v257)
    (*((void (**)(std::__shared_weak_count_vtbl *))v257->~__shared_weak_count + 1))(v257);
  if (v332 < 0)
    operator delete(v331[0]);
  v258 = v422;
  std::string::basic_string[abi:ne180100]<0>(v325, "pad");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v325, 0, (uint64_t *)&Scalar);
  v327 = Scalar;
  if (Scalar)
  {
    v259 = (std::__shared_weak_count *)operator new();
    v260 = Scalar;
    v259->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v259->__shared_owners_ = 0;
    v259->__shared_weak_owners_ = 0;
    v259[1].__vftable = v260;
  }
  else
  {
    v259 = 0;
  }
  v328 = v259;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v323, "P");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v258 + 24))(v258, &v327, 0, v323);
  if (v324 < 0)
    operator delete(v323[0]);
  v261 = v328;
  if (v328)
  {
    v262 = (unint64_t *)&v328->__shared_owners_;
    do
      v263 = __ldaxr(v262);
    while (__stlxr(v263 - 1, v262));
    if (!v263)
    {
      ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
      std::__shared_weak_count::__release_weak(v261);
    }
  }
  v264 = Scalar;
  Scalar = 0;
  if (v264)
    (*((void (**)(std::__shared_weak_count_vtbl *))v264->~__shared_weak_count + 1))(v264);
  if (v326 < 0)
    operator delete(v325[0]);
  v265 = v422;
  std::string::basic_string[abi:ne180100]<0>(v319, "dilations");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v319, 0, (uint64_t *)&Scalar);
  v321 = Scalar;
  if (Scalar)
  {
    v266 = (std::__shared_weak_count *)operator new();
    v267 = Scalar;
    v266->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v266->__shared_owners_ = 0;
    v266->__shared_weak_owners_ = 0;
    v266[1].__vftable = v267;
  }
  else
  {
    v266 = 0;
  }
  v322 = v266;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v317, "S");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v265 + 24))(v265, &v321, 0, v317);
  if (v318 < 0)
    operator delete(v317[0]);
  v268 = v322;
  if (v322)
  {
    v269 = (unint64_t *)&v322->__shared_owners_;
    do
      v270 = __ldaxr(v269);
    while (__stlxr(v270 - 1, v269));
    if (!v270)
    {
      ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
      std::__shared_weak_count::__release_weak(v268);
    }
  }
  v271 = Scalar;
  Scalar = 0;
  if (v271)
    (*((void (**)(std::__shared_weak_count_vtbl *))v271->~__shared_weak_count + 1))(v271);
  if (v320 < 0)
    operator delete(v319[0]);
  v272 = *a3;
  v315 = v422;
  if (v422)
  {
    v273 = (std::__shared_weak_count *)operator new();
    v274 = (std::__shared_weak_count_vtbl *)v422;
    v273->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v273->__shared_owners_ = 0;
    v273->__shared_weak_owners_ = 0;
    v273[1].__vftable = v274;
  }
  else
  {
    v273 = 0;
  }
  v316 = v273;
  v422 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v272 + 56))(v272, &v315);
  v275 = v316;
  if (v316)
  {
    v276 = (unint64_t *)&v316->__shared_owners_;
    do
      v277 = __ldaxr(v276);
    while (__stlxr(v277 - 1, v276));
    if (!v277)
    {
      ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
      std::__shared_weak_count::__release_weak(v275);
    }
  }
  v278 = v422;
  v422 = 0;
  if (v278)
    (*(void (**)(void *))(*(_QWORD *)v278 + 8))(v278);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v279 = __p;
  std::string::basic_string[abi:ne180100]<0>(v311, "pad_type");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v311, 0, (uint64_t *)&v412);
  v313 = v412;
  if (v412)
  {
    v280 = (std::__shared_weak_count *)operator new();
    v281 = (std::__shared_weak_count_vtbl *)v412;
    v280->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v280->__shared_owners_ = 0;
    v280->__shared_weak_owners_ = 0;
    v280[1].__vftable = v281;
  }
  else
  {
    v280 = 0;
  }
  v314 = v280;
  v412 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v422, "custom");
  std::string::basic_string[abi:ne180100]<0>(&v425, "same");
  std::string::basic_string[abi:ne180100]<0>(v428, "same_lower");
  std::string::basic_string[abi:ne180100]<0>(v429, "valid");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v422, 4);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v279 + 24))(v279, &v313, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v429[i + 2]) < 0)
      operator delete((void *)v429[i]);
  }
  v283 = v314;
  if (v314)
  {
    v284 = (unint64_t *)&v314->__shared_owners_;
    do
      v285 = __ldaxr(v284);
    while (__stlxr(v285 - 1, v284));
    if (!v285)
    {
      ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
      std::__shared_weak_count::__release_weak(v283);
    }
  }
  v286 = v412;
  v412 = 0;
  if (v286)
    (*(void (**)(void *))(*(_QWORD *)v286 + 8))(v286);
  if (v312 < 0)
    operator delete(v311[0]);
  v287 = __p;
  std::string::basic_string[abi:ne180100]<0>(v307, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v307, 1, (uint64_t *)&v412);
  v309 = v412;
  if (v412)
  {
    v288 = (std::__shared_weak_count *)operator new();
    v289 = (std::__shared_weak_count_vtbl *)v412;
    v288->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v288->__shared_owners_ = 0;
    v288->__shared_weak_owners_ = 0;
    v288[1].__vftable = v289;
  }
  else
  {
    v288 = 0;
  }
  v310 = v288;
  v412 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v422, "bf16");
  std::string::basic_string[abi:ne180100]<0>(&v425, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v428, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v429, "int32");
  std::string::basic_string[abi:ne180100]<0>(v430, "int8");
  std::string::basic_string[abi:ne180100]<0>(v431, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v422, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v287 + 24))(v287, &v309, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -18; j -= 3)
  {
    if (SHIBYTE(v431[j + 2]) < 0)
      operator delete((void *)v431[j]);
  }
  v291 = v310;
  if (v310)
  {
    v292 = (unint64_t *)&v310->__shared_owners_;
    do
      v293 = __ldaxr(v292);
    while (__stlxr(v293 - 1, v292));
    if (!v293)
    {
      ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
      std::__shared_weak_count::__release_weak(v291);
    }
  }
  v294 = v412;
  v412 = 0;
  if (v294)
    (*(void (**)(void *))(*(_QWORD *)v294 + 8))(v294);
  if (v308 < 0)
    operator delete(v307[0]);
  v295 = *a3;
  v305 = __p;
  if (__p)
  {
    v296 = (std::__shared_weak_count *)operator new();
    v297 = (std::__shared_weak_count_vtbl *)__p;
    v296->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v296->__shared_owners_ = 0;
    v296->__shared_weak_owners_ = 0;
    v296[1].__vftable = v297;
  }
  else
  {
    v296 = 0;
  }
  v306 = v296;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v295 + 56))(v295, &v305);
  v298 = v306;
  if (v306)
  {
    v299 = (unint64_t *)&v306->__shared_owners_;
    do
      v300 = __ldaxr(v299);
    while (__stlxr(v300 - 1, v299));
    if (!v300)
    {
      ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
      std::__shared_weak_count::__release_weak(v298);
    }
  }
  v301 = __p;
  __p = 0;
  if (v301)
    (*(void (**)(void *))(*(_QWORD *)v301 + 8))(v301);
  if (v441)
  {
    v302 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v441);
    MEMORY[0x1E0C023A0](v302, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v406, 0);
  result = (uint64_t)v421;
  if (v421)
  {
    v304 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v421);
    return MEMORY[0x1E0C023A0](v304, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0978CBC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;

  v4 = STACK[0x498];
  STACK[0x498] = 0;
  if (v4)
    (*(void (**)(unint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 112), 0);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x438], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x4C0], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::ConvTranspose::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count_vtbl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count_vtbl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  std::__shared_weak_count_vtbl *v75;
  uint64_t v76;
  std::__shared_weak_count_vtbl *v77;
  uint64_t v78;
  _QWORD *v79;
  unsigned __int8 *v80;
  void *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  unsigned __int8 *v88;
  std::__shared_weak_count_vtbl *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  _QWORD *v93;
  unsigned __int8 *v94;
  void *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  _QWORD *v101;
  unsigned __int8 *v102;
  std::__shared_weak_count_vtbl *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  unsigned __int8 *v110;
  std::__shared_weak_count_vtbl *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  _QWORD *v115;
  unsigned __int8 *v116;
  void *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  _QWORD *v123;
  unsigned __int8 *v124;
  std::__shared_weak_count_vtbl *v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  std::__shared_weak_count_vtbl *v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  _QWORD *v136;
  void *v137;
  _QWORD *v138;
  void *v139;
  unint64_t v140;
  _QWORD *v141;
  _QWORD *v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  char *v147;
  uint64_t v148;
  char *v149;
  _QWORD *v150;
  _QWORD *v151;
  char *v152;
  __int128 v153;
  _QWORD *v154;
  uint64_t v155;
  void *v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  _QWORD *v162;
  void *v163;
  _QWORD *v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  _OWORD *v174;
  unsigned __int8 *v175;
  void *v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  uint64_t v180;
  std::__shared_weak_count_vtbl *v181;
  std::__shared_weak_count *v182;
  std::__shared_weak_count *v183;
  unint64_t *p_shared_owners;
  unint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  void *v189;
  std::__shared_weak_count *v190;
  std::__shared_weak_count_vtbl *v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  std::__shared_weak_count_vtbl *v195;
  void *v196;
  std::__shared_weak_count *v197;
  std::__shared_weak_count_vtbl *v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count_vtbl *v202;
  void *v203;
  std::__shared_weak_count *v204;
  std::__shared_weak_count_vtbl *v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  std::__shared_weak_count_vtbl *v209;
  void *v210;
  std::__shared_weak_count *v211;
  std::__shared_weak_count_vtbl *v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  std::__shared_weak_count_vtbl *v216;
  uint64_t v217;
  std::__shared_weak_count *v218;
  std::__shared_weak_count_vtbl *v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  void *v223;
  void *v224;
  std::__shared_weak_count *v225;
  std::__shared_weak_count_vtbl *v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  std::__shared_weak_count_vtbl *v230;
  uint64_t v231;
  std::__shared_weak_count *v232;
  std::__shared_weak_count_vtbl *v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  void *v237;
  void *v238;
  std::__shared_weak_count *v239;
  std::__shared_weak_count_vtbl *v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  std::__shared_weak_count_vtbl *v244;
  void *v245;
  std::__shared_weak_count *v246;
  std::__shared_weak_count_vtbl *v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  std::__shared_weak_count_vtbl *v251;
  void *v252;
  std::__shared_weak_count *v253;
  std::__shared_weak_count_vtbl *v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  std::__shared_weak_count_vtbl *v258;
  void *v259;
  std::__shared_weak_count *v260;
  std::__shared_weak_count_vtbl *v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  std::__shared_weak_count_vtbl *v265;
  void *v266;
  std::__shared_weak_count *v267;
  std::__shared_weak_count_vtbl *v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  std::__shared_weak_count_vtbl *v272;
  void *v273;
  std::__shared_weak_count *v274;
  std::__shared_weak_count_vtbl *v275;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  std::__shared_weak_count_vtbl *v279;
  uint64_t v280;
  std::__shared_weak_count *v281;
  std::__shared_weak_count_vtbl *v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  void *v286;
  void *v287;
  std::__shared_weak_count *v288;
  std::__shared_weak_count_vtbl *v289;
  uint64_t i;
  std::__shared_weak_count *v291;
  unint64_t *v292;
  unint64_t v293;
  void *v294;
  void *v295;
  std::__shared_weak_count *v296;
  std::__shared_weak_count_vtbl *v297;
  uint64_t j;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  void *v302;
  uint64_t v303;
  std::__shared_weak_count *v304;
  std::__shared_weak_count_vtbl *v305;
  std::__shared_weak_count *v306;
  unint64_t *v307;
  unint64_t v308;
  void *v309;
  uint64_t v310;
  uint64_t result;
  uint64_t v312;
  void *v313;
  std::__shared_weak_count *v314;
  void *v315[2];
  char v316;
  void *v317;
  std::__shared_weak_count *v318;
  void *v319[2];
  char v320;
  void *v321;
  std::__shared_weak_count *v322;
  void *v323;
  std::__shared_weak_count *v324;
  void *v325[2];
  char v326;
  void *v327[2];
  char v328;
  std::__shared_weak_count_vtbl *v329;
  std::__shared_weak_count *v330;
  void *v331[2];
  char v332;
  void *v333[2];
  char v334;
  std::__shared_weak_count_vtbl *v335;
  std::__shared_weak_count *v336;
  void *v337[2];
  char v338;
  void *v339[2];
  char v340;
  std::__shared_weak_count_vtbl *v341;
  std::__shared_weak_count *v342;
  void *v343[2];
  char v344;
  void *v345[2];
  char v346;
  std::__shared_weak_count_vtbl *v347;
  std::__shared_weak_count *v348;
  void *v349[2];
  char v350;
  void *v351[2];
  char v352;
  std::__shared_weak_count_vtbl *v353;
  std::__shared_weak_count *v354;
  void *v355[2];
  char v356;
  void *v357[2];
  char v358;
  std::__shared_weak_count_vtbl *v359;
  std::__shared_weak_count *v360;
  void *v361;
  std::__shared_weak_count *v362;
  void *v363[2];
  char v364;
  std::__shared_weak_count_vtbl *v365;
  std::__shared_weak_count *v366;
  void *v367;
  std::__shared_weak_count *v368;
  void *v369[2];
  char v370;
  std::__shared_weak_count_vtbl *v371;
  std::__shared_weak_count *v372;
  void *v373[2];
  char v374;
  void *v375[2];
  char v376;
  std::__shared_weak_count_vtbl *v377;
  std::__shared_weak_count *v378;
  void *v379[2];
  char v380;
  void *v381[2];
  char v382;
  std::__shared_weak_count_vtbl *v383;
  std::__shared_weak_count *v384;
  void *v385[2];
  char v386;
  void *v387[2];
  char v388;
  std::__shared_weak_count_vtbl *v389;
  std::__shared_weak_count *v390;
  std::__shared_weak_count_vtbl *v391;
  std::__shared_weak_count *v392;
  __n128 v393;
  __int128 v394;
  __int128 v395;
  void *v396[2];
  uint64_t v397;
  __n128 v398;
  __n128 v399;
  __n128 v400;
  __n128 v401;
  __n128 v402;
  __n128 v403;
  __n128 v404;
  __n128 v405;
  void *v406;
  void *v407;
  _QWORD *v408;
  void *v409;
  void *v410;
  _QWORD *v411;
  void *v412;
  void *v413;
  _QWORD *v414;
  void *v415;
  void *v416;
  _QWORD *v417;
  void *v418;
  void *v419;
  _QWORD *v420;
  void *v421;
  void *v422;
  _QWORD *v423;
  __n128 v424;
  uint64_t v425;
  void *__p;
  void *v427;
  _QWORD *v428;
  __n128 v429;
  _QWORD *v430;
  void *v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  _QWORD v437[3];
  _QWORD v438[3];
  uint64_t v439[3];
  _QWORD v440[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_get_deleter;
  uint64_t v443;
  _QWORD v444[3];
  _QWORD *v445;
  _BYTE v446[24];
  _BYTE *v447;
  _QWORD v448[3];
  _QWORD *v449;
  std::__shared_weak_count_vtbl *v450;
  std::__shared_weak_count_vtbl *v451;
  _QWORD *v452;
  uint64_t v453;

  v453 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v430 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (uint64_t)&v10->__get_deleter;
  v443 = (uint64_t)&v10->__get_deleter;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v10->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  v10->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v9;
  Scalar = v10;
  v431 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  v451 = (std::__shared_weak_count_vtbl *)&v14->__get_deleter;
  v452 = &v14->__get_deleter;
  v14->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v11;
  v14->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v12;
  v14->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v13;
  v450 = v14;
  v432 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v450);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(0x18uLL);
  v428 = v18 + 3;
  *v18 = v15;
  v18[1] = v16;
  v18[2] = v17;
  __p = v18;
  v427 = v18 + 3;
  v433 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v431, 3, &v429);
  MIL::IRParameter::Make(&v429, (uint64_t *)&v421);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v421);
  v19 = v421;
  v421 = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = (std::__shared_weak_count *)v429.n128_u64[1];
  if (v429.n128_u64[1])
  {
    v21 = (unint64_t *)(v429.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (__p)
  {
    v427 = __p;
    operator delete(__p);
  }
  if (v450)
  {
    v451 = v450;
    operator delete(v450);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v23 = v430;
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = MIL::IRUnknownDimension::Make(a1, 0);
  v27 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (uint64_t)&v27->__get_deleter;
  v443 = (uint64_t)&v27->__get_deleter;
  v27->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v24;
  v27->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v25;
  v27->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v26;
  Scalar = v27;
  v431 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = MIL::IRUnknownDimension::Make(a1, 0);
  v30 = MIL::IRUnknownDimension::Make(a1, 0);
  v31 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  v451 = (std::__shared_weak_count_vtbl *)&v31->__get_deleter;
  v452 = &v31->__get_deleter;
  v31->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v28;
  v31->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v29;
  v31->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v30;
  v450 = v31;
  v432 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v450);
  v32 = MIL::IRUnknownDimension::Make(a1, 0);
  v33 = MIL::IRUnknownDimension::Make(a1, 0);
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = operator new(0x18uLL);
  v428 = v35 + 3;
  *v35 = v32;
  v35[1] = v33;
  v35[2] = v34;
  __p = v35;
  v427 = v35 + 3;
  v433 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v36 = MIL::IRUnknownDimension::Make(a1, 0);
  v37 = MIL::IRUnknownDimension::Make(a1, 0);
  v38 = MIL::IRUnknownDimension::Make(a1, 0);
  v39 = MIL::IRUnknownDimension::Make(a1, 0);
  v40 = operator new(0x20uLL);
  v423 = v40 + 4;
  *v40 = v36;
  v40[1] = v37;
  v40[2] = v38;
  v40[3] = v39;
  v421 = v40;
  v422 = v40 + 4;
  v434 = MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v421);
  v41 = MIL::IRUnknownDimension::Make(a1, 0);
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = MIL::IRUnknownDimension::Make(a1, 0);
  v44 = MIL::IRUnknownDimension::Make(a1, 0);
  v45 = operator new(0x20uLL);
  v420 = v45 + 4;
  *v45 = v41;
  v45[1] = v42;
  v45[2] = v43;
  v45[3] = v44;
  v418 = v45;
  v419 = v45 + 4;
  v435 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v418);
  v46 = MIL::IRUnknownDimension::Make(a1, 0);
  v47 = MIL::IRUnknownDimension::Make(a1, 0);
  v48 = MIL::IRUnknownDimension::Make(a1, 0);
  v49 = MIL::IRUnknownDimension::Make(a1, 0);
  v50 = operator new(0x20uLL);
  v417 = v50 + 4;
  *v50 = v46;
  v50[1] = v47;
  v50[2] = v48;
  v50[3] = v49;
  v415 = v50;
  v416 = v50 + 4;
  v436 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v415);
  v51 = MIL::IRUnknownDimension::Make(a1, 0);
  v52 = MIL::IRUnknownDimension::Make(a1, 0);
  v53 = MIL::IRUnknownDimension::Make(a1, 0);
  v54 = MIL::IRUnknownDimension::Make(a1, 0);
  v55 = MIL::IRUnknownDimension::Make(a1, 0);
  v56 = operator new(0x28uLL);
  v414 = v56 + 5;
  *v56 = v51;
  v56[1] = v52;
  v56[2] = v53;
  v56[3] = v54;
  v56[4] = v55;
  v412 = v56;
  v413 = v56 + 5;
  v437[0] = MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v412);
  v57 = MIL::IRUnknownDimension::Make(a1, 0);
  v58 = MIL::IRUnknownDimension::Make(a1, 0);
  v59 = MIL::IRUnknownDimension::Make(a1, 0);
  v60 = MIL::IRUnknownDimension::Make(a1, 0);
  v61 = MIL::IRUnknownDimension::Make(a1, 0);
  v62 = operator new(0x28uLL);
  v411 = v62 + 5;
  *v62 = v57;
  v62[1] = v58;
  v62[2] = v59;
  v62[3] = v60;
  v62[4] = v61;
  v409 = v62;
  v410 = v62 + 5;
  v437[1] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v409);
  v63 = MIL::IRUnknownDimension::Make(a1, 0);
  v64 = MIL::IRUnknownDimension::Make(a1, 0);
  v65 = MIL::IRUnknownDimension::Make(a1, 0);
  v66 = MIL::IRUnknownDimension::Make(a1, 0);
  v67 = MIL::IRUnknownDimension::Make(a1, 0);
  v68 = operator new(0x28uLL);
  v408 = v68 + 5;
  *v68 = v63;
  v68[1] = v64;
  v68[2] = v65;
  v68[3] = v66;
  v68[4] = v67;
  v406 = v68;
  v407 = v68 + 5;
  v437[2] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v406);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v431, 9, &v424);
  MIL::IRParameter::Make(&v424, &v425);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(v23, "weight", &v425);
  v69 = v425;
  v425 = 0;
  if (v69)
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
  v70 = (std::__shared_weak_count *)v424.n128_u64[1];
  if (v424.n128_u64[1])
  {
    v71 = (unint64_t *)(v424.n128_u64[1] + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (v406)
  {
    v407 = v406;
    operator delete(v406);
  }
  if (v409)
  {
    v410 = v409;
    operator delete(v409);
  }
  if (v412)
  {
    v413 = v412;
    operator delete(v412);
  }
  if (v415)
  {
    v416 = v415;
    operator delete(v415);
  }
  if (v418)
  {
    v419 = v418;
    operator delete(v418);
  }
  if (v421)
  {
    v422 = v421;
    operator delete(v421);
  }
  if (__p)
  {
    v427 = __p;
    operator delete(__p);
  }
  if (v450)
  {
    v451 = v450;
    operator delete(v450);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v73 = v430;
  v74 = MIL::IRUnknownDimension::Make(a1, 0);
  v75 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v75;
  v75->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v74;
  p_get_deleter = (uint64_t)&v75->~__shared_weak_count_0;
  v443 = (uint64_t)&v75->~__shared_weak_count_0;
  v431 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v76 = MIL::IRUnknownDimension::Make(a1, 0);
  v77 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v450 = v77;
  v77->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v76;
  v451 = (std::__shared_weak_count_vtbl *)&v77->~__shared_weak_count_0;
  v452 = &v77->~__shared_weak_count_0;
  v432 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v450);
  v78 = MIL::IRUnknownDimension::Make(a1, 0);
  v79 = operator new(8uLL);
  __p = v79;
  *v79 = v78;
  v428 = v79 + 1;
  v427 = v79 + 1;
  v433 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v431, 3, &v405);
  MIL::IRParameter::Make(&v405, (uint64_t *)&v421);
  v80 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v73, "bias", (uint64_t *)&v421);
  v81 = v421;
  v421 = 0;
  if (v81)
    (*(void (**)(void *))(*(_QWORD *)v81 + 8))(v81);
  v82 = (std::__shared_weak_count *)v405.n128_u64[1];
  if (v405.n128_u64[1])
  {
    v83 = (unint64_t *)(v405.n128_u64[1] + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  if (__p)
  {
    v427 = __p;
    operator delete(__p);
  }
  if (v450)
  {
    v451 = v450;
    operator delete(v450);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v80 + 5) + 48))(*((_QWORD *)v80 + 5), 1);
  v85 = v430;
  v86 = MIL::IRUnknownDimension::Make(a1, 0);
  v87 = operator new(8uLL);
  v431 = v87;
  *v87 = v86;
  v433 = (uint64_t)(v87 + 1);
  v432 = (uint64_t)(v87 + 1);
  v450 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v431);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v450, 1, &v404);
  MIL::IRParameter::Make(&v404, (uint64_t *)&Scalar);
  v88 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v85, "strides", (uint64_t *)&Scalar);
  v89 = Scalar;
  Scalar = 0;
  if (v89)
    (*((void (**)(std::__shared_weak_count_vtbl *))v89->~__shared_weak_count + 1))(v89);
  v90 = (std::__shared_weak_count *)v404.n128_u64[1];
  if (v404.n128_u64[1])
  {
    v91 = (unint64_t *)(v404.n128_u64[1] + 8);
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  if (v431)
  {
    v432 = (uint64_t)v431;
    operator delete(v431);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v88 + 5) + 32))(*((_QWORD *)v88 + 5), 1);
  v93 = v430;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v403);
  MIL::IRParameter::Make(&v403, (uint64_t *)&v431);
  v94 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v93, "pad_type", (uint64_t *)&v431);
  v95 = v431;
  v431 = 0;
  if (v95)
    (*(void (**)(void *))(*(_QWORD *)v95 + 8))(v95);
  v96 = (std::__shared_weak_count *)v403.n128_u64[1];
  if (v403.n128_u64[1])
  {
    v97 = (unint64_t *)(v403.n128_u64[1] + 8);
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v94 + 5) + 32))(*((_QWORD *)v94 + 5), 1);
  v99 = v430;
  v100 = MIL::IRUnknownDimension::Make(a1, 0);
  v101 = operator new(8uLL);
  v431 = v101;
  *v101 = v100;
  v433 = (uint64_t)(v101 + 1);
  v432 = (uint64_t)(v101 + 1);
  v450 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v431);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v450, 1, &v402);
  MIL::IRParameter::Make(&v402, (uint64_t *)&Scalar);
  v102 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[4],std::unique_ptr<MIL::IRParameter>>(v99, "pad", (uint64_t *)&Scalar);
  v103 = Scalar;
  Scalar = 0;
  if (v103)
    (*((void (**)(std::__shared_weak_count_vtbl *))v103->~__shared_weak_count + 1))(v103);
  v104 = (std::__shared_weak_count *)v402.n128_u64[1];
  if (v402.n128_u64[1])
  {
    v105 = (unint64_t *)(v402.n128_u64[1] + 8);
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  if (v431)
  {
    v432 = (uint64_t)v431;
    operator delete(v431);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v102 + 5) + 32))(*((_QWORD *)v102 + 5), 1);
  v107 = v430;
  v108 = MIL::IRUnknownDimension::Make(a1, 0);
  v109 = operator new(8uLL);
  v431 = v109;
  *v109 = v108;
  v433 = (uint64_t)(v109 + 1);
  v432 = (uint64_t)(v109 + 1);
  v450 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v431);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v450, 1, &v401);
  MIL::IRParameter::Make(&v401, (uint64_t *)&Scalar);
  v110 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v107, "dilations", (uint64_t *)&Scalar);
  v111 = Scalar;
  Scalar = 0;
  if (v111)
    (*((void (**)(std::__shared_weak_count_vtbl *))v111->~__shared_weak_count + 1))(v111);
  v112 = (std::__shared_weak_count *)v401.n128_u64[1];
  if (v401.n128_u64[1])
  {
    v113 = (unint64_t *)(v401.n128_u64[1] + 8);
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  if (v431)
  {
    v432 = (uint64_t)v431;
    operator delete(v431);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v110 + 5) + 32))(*((_QWORD *)v110 + 5), 1);
  v115 = v430;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v400);
  MIL::IRParameter::Make(&v400, (uint64_t *)&v431);
  v116 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(v115, "groups", (uint64_t *)&v431);
  v117 = v431;
  v431 = 0;
  if (v117)
    (*(void (**)(void *))(*(_QWORD *)v117 + 8))(v117);
  v118 = (std::__shared_weak_count *)v400.n128_u64[1];
  if (v400.n128_u64[1])
  {
    v119 = (unint64_t *)(v400.n128_u64[1] + 8);
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v116 + 5) + 32))(*((_QWORD *)v116 + 5), 1);
  v121 = v430;
  v122 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v123 = operator new(8uLL);
  v431 = v123;
  *v123 = v122;
  v433 = (uint64_t)(v123 + 1);
  v432 = (uint64_t)(v123 + 1);
  v450 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v431);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v450, 1, &v399);
  MIL::IRParameter::Make(&v399, (uint64_t *)&Scalar);
  v124 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v121, "output_shape", (uint64_t *)&Scalar);
  v125 = Scalar;
  Scalar = 0;
  if (v125)
    (*((void (**)(std::__shared_weak_count_vtbl *))v125->~__shared_weak_count + 1))(v125);
  v126 = (std::__shared_weak_count *)v399.n128_u64[1];
  if (v399.n128_u64[1])
  {
    v127 = (unint64_t *)(v399.n128_u64[1] + 8);
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  if (v431)
  {
    v432 = (uint64_t)v431;
    operator delete(v431);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v124 + 5) + 32))(*((_QWORD *)v124 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v124 + 5) + 48))(*((_QWORD *)v124 + 5), 1);
  v415 = 0;
  v129 = operator new();
  *(_QWORD *)v129 = 0;
  *(_QWORD *)(v129 + 8) = 0;
  *(_QWORD *)(v129 + 16) = 0;
  v431 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v415, (void **)v129);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v431, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)v415, 1uLL);
  v130 = v415;
  v131 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v132 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v450 = v132;
  v132->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v131;
  v451 = (std::__shared_weak_count_vtbl *)&v132->~__shared_weak_count_0;
  v452 = &v132->~__shared_weak_count_0;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v450);
  v133 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v134 = operator new(8uLL);
  __p = v134;
  *v134 = v133;
  v428 = v134 + 1;
  v427 = v134 + 1;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v135 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v136 = operator new(8uLL);
  v421 = v136;
  *v136 = v135;
  v423 = v136 + 1;
  v422 = v136 + 1;
  v443 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v421);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v398);
  MIL::IRParameter::Make(&v398, (uint64_t *)&v412);
  v137 = v412;
  v418 = v412;
  if (v412)
  {
    v138 = (_QWORD *)operator new();
    v139 = v412;
    *v138 = &unk_1EA99F888;
    v138[1] = 0;
    v138[2] = 0;
    v138[3] = v139;
  }
  else
  {
    v138 = 0;
  }
  v419 = v138;
  v412 = 0;
  v140 = v130[2];
  v141 = (_QWORD *)v130[1];
  if ((unint64_t)v141 >= v140)
  {
    v143 = ((uint64_t)v141 - *v130) >> 4;
    v144 = v143 + 1;
    if ((unint64_t)(v143 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v145 = v140 - *v130;
    if (v145 >> 3 > v144)
      v144 = v145 >> 3;
    if ((unint64_t)v145 >= 0x7FFFFFFFFFFFFFF0)
      v146 = 0xFFFFFFFFFFFFFFFLL;
    else
      v146 = v144;
    v435 = (uint64_t)(v130 + 2);
    v147 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v130 + 2), v146);
    v149 = &v147[16 * v143];
    *(_QWORD *)v149 = v137;
    *((_QWORD *)v149 + 1) = v138;
    v419 = 0;
    v418 = 0;
    v151 = (_QWORD *)*v130;
    v150 = (_QWORD *)v130[1];
    if (v150 == (_QWORD *)*v130)
    {
      v154 = (_QWORD *)v130[1];
      v152 = &v147[16 * v143];
    }
    else
    {
      v152 = &v147[16 * v143];
      do
      {
        v153 = *((_OWORD *)v150 - 1);
        v150 -= 2;
        *((_OWORD *)v152 - 1) = v153;
        v152 -= 16;
        *v150 = 0;
        v150[1] = 0;
      }
      while (v150 != v151);
      v154 = (_QWORD *)*v130;
      v150 = (_QWORD *)v130[1];
    }
    v142 = v149 + 16;
    *v130 = v152;
    v432 = (uint64_t)v154;
    v130[1] = v149 + 16;
    v433 = (uint64_t)v150;
    v155 = v130[2];
    v130[2] = &v147[16 * v148];
    v434 = v155;
    v431 = v154;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v431);
  }
  else
  {
    *v141 = v137;
    v141[1] = v138;
    v142 = v141 + 2;
    v419 = 0;
    v418 = 0;
  }
  v130[1] = v142;
  v156 = v412;
  v412 = 0;
  if (v156)
    (*(void (**)(void *))(*(_QWORD *)v156 + 8))(v156);
  v157 = (std::__shared_weak_count *)v398.n128_u64[1];
  if (v398.n128_u64[1])
  {
    v158 = (unint64_t *)(v398.n128_u64[1] + 8);
    do
      v159 = __ldaxr(v158);
    while (__stlxr(v159 - 1, v158));
    if (!v159)
    {
      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
      std::__shared_weak_count::__release_weak(v157);
    }
  }
  if (v421)
  {
    v422 = v421;
    operator delete(v421);
  }
  if (__p)
  {
    v427 = __p;
    operator delete(__p);
  }
  if (v450)
  {
    v451 = v450;
    operator delete(v450);
  }
  *(_OWORD *)v396 = *(_OWORD *)a2;
  v397 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v160 = (uint64_t)v430;
  *(_QWORD *)&v395 = v430;
  if (v430)
  {
    v161 = (_QWORD *)operator new();
    *v161 = &unk_1EA99F8E8;
    v161[1] = 0;
    v161[2] = 0;
    v161[3] = v160;
  }
  else
  {
    v161 = 0;
  }
  *((_QWORD *)&v395 + 1) = v161;
  v430 = 0;
  *(_QWORD *)&v394 = v415;
  if (v415)
  {
    v162 = (_QWORD *)operator new();
    v163 = v415;
    *v162 = &unk_1EA99F948;
    v162[1] = 0;
    v162[2] = 0;
    v162[3] = v163;
  }
  else
  {
    v162 = 0;
  }
  *((_QWORD *)&v394 + 1) = v162;
  v415 = 0;
  v448[0] = &unk_1EA99FAC8;
  v448[1] = MIL::Operators::Common::ios18::CustomValidators::ValidateConvTranspose;
  v449 = v448;
  v447 = 0;
  MIL::IROperator::Make((__int128 *)v396, &v395, &v394, (uint64_t)v448, (uint64_t)v446, a3);
  v164 = v447;
  if (v447 == v446)
  {
    v165 = 4;
    v164 = v446;
  }
  else
  {
    if (!v447)
      goto LABEL_143;
    v165 = 5;
  }
  (*(void (**)(void))(*v164 + 8 * v165))();
LABEL_143:
  v166 = v449;
  if (v449 == v448)
  {
    v167 = 4;
    v166 = v448;
    goto LABEL_147;
  }
  if (v449)
  {
    v167 = 5;
LABEL_147:
    (*(void (**)(void))(*v166 + 8 * v167))();
  }
  v168 = (std::__shared_weak_count *)*((_QWORD *)&v394 + 1);
  if (*((_QWORD *)&v394 + 1))
  {
    v169 = (unint64_t *)(*((_QWORD *)&v394 + 1) + 8);
    do
      v170 = __ldaxr(v169);
    while (__stlxr(v170 - 1, v169));
    if (!v170)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
  }
  v171 = (std::__shared_weak_count *)*((_QWORD *)&v395 + 1);
  if (*((_QWORD *)&v395 + 1))
  {
    v172 = (unint64_t *)(*((_QWORD *)&v395 + 1) + 8);
    do
      v173 = __ldaxr(v172);
    while (__stlxr(v173 - 1, v172));
    if (!v173)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
  }
  if (SHIBYTE(v397) < 0)
    operator delete(v396[0]);
  v450 = 0;
  v174 = (_OWORD *)operator new();
  *v174 = 0u;
  v174[1] = 0u;
  *((_DWORD *)v174 + 8) = 1065353216;
  v450 = (std::__shared_weak_count_vtbl *)v174;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v393);
  MIL::IRParameter::Make(&v393, (uint64_t *)&v431);
  v175 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v174, "minimum_compute_type", (uint64_t *)&v431);
  v176 = v431;
  v431 = 0;
  if (v176)
    (*(void (**)(void *))(*(_QWORD *)v176 + 8))(v176);
  v177 = (std::__shared_weak_count *)v393.n128_u64[1];
  if (v393.n128_u64[1])
  {
    v178 = (unint64_t *)(v393.n128_u64[1] + 8);
    do
      v179 = __ldaxr(v178);
    while (__stlxr(v179 - 1, v178));
    if (!v179)
    {
      ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
      std::__shared_weak_count::__release_weak(v177);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v175 + 5) + 32))(*((_QWORD *)v175 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v175 + 5) + 48))(*((_QWORD *)v175 + 5), 1);
  v180 = *a3;
  v181 = v450;
  v391 = v450;
  if (v450)
  {
    v182 = (std::__shared_weak_count *)operator new();
    v182->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v182->__shared_owners_ = 0;
    v182->__shared_weak_owners_ = 0;
    v182[1].__vftable = v181;
  }
  else
  {
    v182 = 0;
  }
  v392 = v182;
  v450 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v180 + 184))(v180, &v391);
  v183 = v392;
  if (v392)
  {
    p_shared_owners = (unint64_t *)&v392->__shared_owners_;
    do
      v185 = __ldaxr(p_shared_owners);
    while (__stlxr(v185 - 1, p_shared_owners));
    if (!v185)
    {
      ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
      std::__shared_weak_count::__release_weak(v183);
    }
  }
  v186 = *a3;
  v444[0] = &off_1EA99FBD8;
  v444[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceConvTranspose;
  v445 = v444;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v186 + 200))(v186, v444);
  v187 = v445;
  if (v445 == v444)
  {
    v188 = 4;
    v187 = v444;
  }
  else
  {
    if (!v445)
      goto LABEL_180;
    v188 = 5;
  }
  (*(void (**)(void))(*v187 + 8 * v188))();
LABEL_180:
  MIL::Validation::TensorDTypeConstraints::Make(&v431);
  v189 = v431;
  std::string::basic_string[abi:ne180100]<0>(v387, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v387, 0, (uint64_t *)&Scalar);
  v389 = Scalar;
  if (Scalar)
  {
    v190 = (std::__shared_weak_count *)operator new();
    v191 = Scalar;
    v190->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v190->__shared_owners_ = 0;
    v190->__shared_weak_owners_ = 0;
    v190[1].__vftable = v191;
  }
  else
  {
    v190 = 0;
  }
  v390 = v190;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v385, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v189 + 24))(v189, &v389, v385);
  if (v386 < 0)
    operator delete(v385[0]);
  v192 = v390;
  if (v390)
  {
    v193 = (unint64_t *)&v390->__shared_owners_;
    do
      v194 = __ldaxr(v193);
    while (__stlxr(v194 - 1, v193));
    if (!v194)
    {
      ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
      std::__shared_weak_count::__release_weak(v192);
    }
  }
  v195 = Scalar;
  Scalar = 0;
  if (v195)
    (*((void (**)(std::__shared_weak_count_vtbl *))v195->~__shared_weak_count + 1))(v195);
  if (v388 < 0)
    operator delete(v387[0]);
  v196 = v431;
  std::string::basic_string[abi:ne180100]<0>(v381, "weight");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v381, 0, (uint64_t *)&Scalar);
  v383 = Scalar;
  if (Scalar)
  {
    v197 = (std::__shared_weak_count *)operator new();
    v198 = Scalar;
    v197->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v197->__shared_owners_ = 0;
    v197->__shared_weak_owners_ = 0;
    v197[1].__vftable = v198;
  }
  else
  {
    v197 = 0;
  }
  v384 = v197;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v379, "U");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v196 + 24))(v196, &v383, v379);
  if (v380 < 0)
    operator delete(v379[0]);
  v199 = v384;
  if (v384)
  {
    v200 = (unint64_t *)&v384->__shared_owners_;
    do
      v201 = __ldaxr(v200);
    while (__stlxr(v201 - 1, v200));
    if (!v201)
    {
      ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
      std::__shared_weak_count::__release_weak(v199);
    }
  }
  v202 = Scalar;
  Scalar = 0;
  if (v202)
    (*((void (**)(std::__shared_weak_count_vtbl *))v202->~__shared_weak_count + 1))(v202);
  if (v382 < 0)
    operator delete(v381[0]);
  v203 = v431;
  std::string::basic_string[abi:ne180100]<0>(v375, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v375, 1, (uint64_t *)&Scalar);
  v377 = Scalar;
  if (Scalar)
  {
    v204 = (std::__shared_weak_count *)operator new();
    v205 = Scalar;
    v204->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v204->__shared_owners_ = 0;
    v204->__shared_weak_owners_ = 0;
    v204[1].__vftable = v205;
  }
  else
  {
    v204 = 0;
  }
  v378 = v204;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v373, "U");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v203 + 24))(v203, &v377, v373);
  if (v374 < 0)
    operator delete(v373[0]);
  v206 = v378;
  if (v378)
  {
    v207 = (unint64_t *)&v378->__shared_owners_;
    do
      v208 = __ldaxr(v207);
    while (__stlxr(v208 - 1, v207));
    if (!v208)
    {
      ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
      std::__shared_weak_count::__release_weak(v206);
    }
  }
  v209 = Scalar;
  Scalar = 0;
  if (v209)
    (*((void (**)(std::__shared_weak_count_vtbl *))v209->~__shared_weak_count + 1))(v209);
  if (v376 < 0)
    operator delete(v375[0]);
  v210 = v431;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v371 = Scalar;
  if (Scalar)
  {
    v211 = (std::__shared_weak_count *)operator new();
    v212 = Scalar;
    v211->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v211->__shared_owners_ = 0;
    v211->__shared_weak_owners_ = 0;
    v211[1].__vftable = v212;
  }
  else
  {
    v211 = 0;
  }
  v372 = v211;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v369, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v210 + 24))(v210, &v371, v369);
  if (v370 < 0)
    operator delete(v369[0]);
  v213 = v372;
  if (v372)
  {
    v214 = (unint64_t *)&v372->__shared_owners_;
    do
      v215 = __ldaxr(v214);
    while (__stlxr(v215 - 1, v214));
    if (!v215)
    {
      ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
      std::__shared_weak_count::__release_weak(v213);
    }
  }
  v216 = Scalar;
  Scalar = 0;
  if (v216)
    (*((void (**)(std::__shared_weak_count_vtbl *))v216->~__shared_weak_count + 1))(v216);
  v217 = *a3;
  v367 = v431;
  if (v431)
  {
    v218 = (std::__shared_weak_count *)operator new();
    v219 = (std::__shared_weak_count_vtbl *)v431;
    v218->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v218->__shared_owners_ = 0;
    v218->__shared_weak_owners_ = 0;
    v218[1].__vftable = v219;
  }
  else
  {
    v218 = 0;
  }
  v368 = v218;
  v431 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v217 + 56))(v217, &v367);
  v220 = v368;
  if (v368)
  {
    v221 = (unint64_t *)&v368->__shared_owners_;
    do
      v222 = __ldaxr(v221);
    while (__stlxr(v222 - 1, v221));
    if (!v222)
    {
      ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
      std::__shared_weak_count::__release_weak(v220);
    }
  }
  v223 = v431;
  v431 = 0;
  if (v223)
    (*(void (**)(void *))(*(_QWORD *)v223 + 8))(v223);
  MIL::Validation::TensorRankValueConstraints::Make(&v431);
  v224 = v431;
  std::string::basic_string[abi:ne180100]<0>(v363, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v363, 0, (uint64_t *)&Scalar);
  v365 = Scalar;
  if (Scalar)
  {
    v225 = (std::__shared_weak_count *)operator new();
    v226 = Scalar;
    v225->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v225->__shared_owners_ = 0;
    v225->__shared_weak_owners_ = 0;
    v225[1].__vftable = v226;
  }
  else
  {
    v225 = 0;
  }
  v366 = v225;
  Scalar = 0;
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))(*(_QWORD *)v224 + 32))(v224, &v365, 3, 5);
  v227 = v366;
  if (v366)
  {
    v228 = (unint64_t *)&v366->__shared_owners_;
    do
      v229 = __ldaxr(v228);
    while (__stlxr(v229 - 1, v228));
    if (!v229)
    {
      ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
      std::__shared_weak_count::__release_weak(v227);
    }
  }
  v230 = Scalar;
  Scalar = 0;
  if (v230)
    (*((void (**)(std::__shared_weak_count_vtbl *))v230->~__shared_weak_count + 1))(v230);
  if (v364 < 0)
    operator delete(v363[0]);
  v231 = *a3;
  v361 = v431;
  if (v431)
  {
    v232 = (std::__shared_weak_count *)operator new();
    v233 = (std::__shared_weak_count_vtbl *)v431;
    v232->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FC78;
    v232->__shared_owners_ = 0;
    v232->__shared_weak_owners_ = 0;
    v232[1].__vftable = v233;
  }
  else
  {
    v232 = 0;
  }
  v362 = v232;
  v431 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v231 + 56))(v231, &v361);
  v234 = v362;
  if (v362)
  {
    v235 = (unint64_t *)&v362->__shared_owners_;
    do
      v236 = __ldaxr(v235);
    while (__stlxr(v236 - 1, v235));
    if (!v236)
    {
      ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
      std::__shared_weak_count::__release_weak(v234);
    }
  }
  v237 = v431;
  v431 = 0;
  if (v237)
    (*(void (**)(void *))(*(_QWORD *)v237 + 8))(v237);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v431);
  v238 = v431;
  std::string::basic_string[abi:ne180100]<0>(v357, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v357, 0, (uint64_t *)&Scalar);
  v359 = Scalar;
  if (Scalar)
  {
    v239 = (std::__shared_weak_count *)operator new();
    v240 = Scalar;
    v239->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v239->__shared_owners_ = 0;
    v239->__shared_weak_owners_ = 0;
    v239[1].__vftable = v240;
  }
  else
  {
    v239 = 0;
  }
  v360 = v239;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v355, "C_in");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v238 + 24))(v238, &v359, 1, v355);
  if (v356 < 0)
    operator delete(v355[0]);
  v241 = v360;
  if (v360)
  {
    v242 = (unint64_t *)&v360->__shared_owners_;
    do
      v243 = __ldaxr(v242);
    while (__stlxr(v243 - 1, v242));
    if (!v243)
    {
      ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
      std::__shared_weak_count::__release_weak(v241);
    }
  }
  v244 = Scalar;
  Scalar = 0;
  if (v244)
    (*((void (**)(std::__shared_weak_count_vtbl *))v244->~__shared_weak_count + 1))(v244);
  if (v358 < 0)
    operator delete(v357[0]);
  v245 = v431;
  std::string::basic_string[abi:ne180100]<0>(v351, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v351, 0, (uint64_t *)&Scalar);
  v353 = Scalar;
  if (Scalar)
  {
    v246 = (std::__shared_weak_count *)operator new();
    v247 = Scalar;
    v246->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v246->__shared_owners_ = 0;
    v246->__shared_weak_owners_ = 0;
    v246[1].__vftable = v247;
  }
  else
  {
    v246 = 0;
  }
  v354 = v246;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v349, "S");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, uint64_t, void **))(*(_QWORD *)v245 + 32))(v245, &v353, 2, -1, v349);
  if (v350 < 0)
    operator delete(v349[0]);
  v248 = v354;
  if (v354)
  {
    v249 = (unint64_t *)&v354->__shared_owners_;
    do
      v250 = __ldaxr(v249);
    while (__stlxr(v250 - 1, v249));
    if (!v250)
    {
      ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
      std::__shared_weak_count::__release_weak(v248);
    }
  }
  v251 = Scalar;
  Scalar = 0;
  if (v251)
    (*((void (**)(std::__shared_weak_count_vtbl *))v251->~__shared_weak_count + 1))(v251);
  if (v352 < 0)
    operator delete(v351[0]);
  v252 = v431;
  std::string::basic_string[abi:ne180100]<0>(v345, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v345, 1, (uint64_t *)&Scalar);
  v347 = Scalar;
  if (Scalar)
  {
    v253 = (std::__shared_weak_count *)operator new();
    v254 = Scalar;
    v253->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v253->__shared_owners_ = 0;
    v253->__shared_weak_owners_ = 0;
    v253[1].__vftable = v254;
  }
  else
  {
    v253 = 0;
  }
  v348 = v253;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v343, "C_out");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v252 + 24))(v252, &v347, 0, v343);
  if (v344 < 0)
    operator delete(v343[0]);
  v255 = v348;
  if (v348)
  {
    v256 = (unint64_t *)&v348->__shared_owners_;
    do
      v257 = __ldaxr(v256);
    while (__stlxr(v257 - 1, v256));
    if (!v257)
    {
      ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
      std::__shared_weak_count::__release_weak(v255);
    }
  }
  v258 = Scalar;
  Scalar = 0;
  if (v258)
    (*((void (**)(std::__shared_weak_count_vtbl *))v258->~__shared_weak_count + 1))(v258);
  if (v346 < 0)
    operator delete(v345[0]);
  v259 = v431;
  std::string::basic_string[abi:ne180100]<0>(v339, "strides");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v339, 0, (uint64_t *)&Scalar);
  v341 = Scalar;
  if (Scalar)
  {
    v260 = (std::__shared_weak_count *)operator new();
    v261 = Scalar;
    v260->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v260->__shared_owners_ = 0;
    v260->__shared_weak_owners_ = 0;
    v260[1].__vftable = v261;
  }
  else
  {
    v260 = 0;
  }
  v342 = v260;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v337, "S");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v259 + 24))(v259, &v341, 0, v337);
  if (v338 < 0)
    operator delete(v337[0]);
  v262 = v342;
  if (v342)
  {
    v263 = (unint64_t *)&v342->__shared_owners_;
    do
      v264 = __ldaxr(v263);
    while (__stlxr(v264 - 1, v263));
    if (!v264)
    {
      ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
      std::__shared_weak_count::__release_weak(v262);
    }
  }
  v265 = Scalar;
  Scalar = 0;
  if (v265)
    (*((void (**)(std::__shared_weak_count_vtbl *))v265->~__shared_weak_count + 1))(v265);
  if (v340 < 0)
    operator delete(v339[0]);
  v266 = v431;
  std::string::basic_string[abi:ne180100]<0>(v333, "pad");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v333, 0, (uint64_t *)&Scalar);
  v335 = Scalar;
  if (Scalar)
  {
    v267 = (std::__shared_weak_count *)operator new();
    v268 = Scalar;
    v267->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v267->__shared_owners_ = 0;
    v267->__shared_weak_owners_ = 0;
    v267[1].__vftable = v268;
  }
  else
  {
    v267 = 0;
  }
  v336 = v267;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v331, "P");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v266 + 24))(v266, &v335, 0, v331);
  if (v332 < 0)
    operator delete(v331[0]);
  v269 = v336;
  if (v336)
  {
    v270 = (unint64_t *)&v336->__shared_owners_;
    do
      v271 = __ldaxr(v270);
    while (__stlxr(v271 - 1, v270));
    if (!v271)
    {
      ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
      std::__shared_weak_count::__release_weak(v269);
    }
  }
  v272 = Scalar;
  Scalar = 0;
  if (v272)
    (*((void (**)(std::__shared_weak_count_vtbl *))v272->~__shared_weak_count + 1))(v272);
  if (v334 < 0)
    operator delete(v333[0]);
  v273 = v431;
  std::string::basic_string[abi:ne180100]<0>(v327, "dilations");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v327, 0, (uint64_t *)&Scalar);
  v329 = Scalar;
  if (Scalar)
  {
    v274 = (std::__shared_weak_count *)operator new();
    v275 = Scalar;
    v274->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v274->__shared_owners_ = 0;
    v274->__shared_weak_owners_ = 0;
    v274[1].__vftable = v275;
  }
  else
  {
    v274 = 0;
  }
  v330 = v274;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v325, "S");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v273 + 24))(v273, &v329, 0, v325);
  if (v326 < 0)
    operator delete(v325[0]);
  v276 = v330;
  if (v330)
  {
    v277 = (unint64_t *)&v330->__shared_owners_;
    do
      v278 = __ldaxr(v277);
    while (__stlxr(v278 - 1, v277));
    if (!v278)
    {
      ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
      std::__shared_weak_count::__release_weak(v276);
    }
  }
  v279 = Scalar;
  Scalar = 0;
  if (v279)
    (*((void (**)(std::__shared_weak_count_vtbl *))v279->~__shared_weak_count + 1))(v279);
  if (v328 < 0)
    operator delete(v327[0]);
  v280 = *a3;
  v323 = v431;
  if (v431)
  {
    v281 = (std::__shared_weak_count *)operator new();
    v282 = (std::__shared_weak_count_vtbl *)v431;
    v281->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v281->__shared_owners_ = 0;
    v281->__shared_weak_owners_ = 0;
    v281[1].__vftable = v282;
  }
  else
  {
    v281 = 0;
  }
  v324 = v281;
  v431 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v280 + 56))(v280, &v323);
  v283 = v324;
  if (v324)
  {
    v284 = (unint64_t *)&v324->__shared_owners_;
    do
      v285 = __ldaxr(v284);
    while (__stlxr(v285 - 1, v284));
    if (!v285)
    {
      ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
      std::__shared_weak_count::__release_weak(v283);
    }
  }
  v286 = v431;
  v431 = 0;
  if (v286)
    (*(void (**)(void *))(*(_QWORD *)v286 + 8))(v286);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v287 = __p;
  std::string::basic_string[abi:ne180100]<0>(v319, "pad_type");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v319, 0, (uint64_t *)&v421);
  v321 = v421;
  if (v421)
  {
    v288 = (std::__shared_weak_count *)operator new();
    v289 = (std::__shared_weak_count_vtbl *)v421;
    v288->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v288->__shared_owners_ = 0;
    v288->__shared_weak_owners_ = 0;
    v288[1].__vftable = v289;
  }
  else
  {
    v288 = 0;
  }
  v322 = v288;
  v421 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v431, "custom");
  std::string::basic_string[abi:ne180100]<0>(&v434, "same");
  std::string::basic_string[abi:ne180100]<0>(v437, "same_lower");
  std::string::basic_string[abi:ne180100]<0>(v438, "valid");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v431, 4);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v287 + 24))(v287, &v321, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v438[i + 2]) < 0)
      operator delete((void *)v438[i]);
  }
  v291 = v322;
  if (v322)
  {
    v292 = (unint64_t *)&v322->__shared_owners_;
    do
      v293 = __ldaxr(v292);
    while (__stlxr(v293 - 1, v292));
    if (!v293)
    {
      ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
      std::__shared_weak_count::__release_weak(v291);
    }
  }
  v294 = v421;
  v421 = 0;
  if (v294)
    (*(void (**)(void *))(*(_QWORD *)v294 + 8))(v294);
  if (v320 < 0)
    operator delete(v319[0]);
  v295 = __p;
  std::string::basic_string[abi:ne180100]<0>(v315, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v315, 1, (uint64_t *)&v421);
  v317 = v421;
  if (v421)
  {
    v296 = (std::__shared_weak_count *)operator new();
    v297 = (std::__shared_weak_count_vtbl *)v421;
    v296->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v296->__shared_owners_ = 0;
    v296->__shared_weak_owners_ = 0;
    v296[1].__vftable = v297;
  }
  else
  {
    v296 = 0;
  }
  v318 = v296;
  v421 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v431, "bf16");
  std::string::basic_string[abi:ne180100]<0>(&v434, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v437, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v438, "int32");
  std::string::basic_string[abi:ne180100]<0>(v439, "int8");
  std::string::basic_string[abi:ne180100]<0>(v440, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v431, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v295 + 24))(v295, &v317, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -18; j -= 3)
  {
    if (SHIBYTE(v440[j + 2]) < 0)
      operator delete((void *)v440[j]);
  }
  v299 = v318;
  if (v318)
  {
    v300 = (unint64_t *)&v318->__shared_owners_;
    do
      v301 = __ldaxr(v300);
    while (__stlxr(v301 - 1, v300));
    if (!v301)
    {
      ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
      std::__shared_weak_count::__release_weak(v299);
    }
  }
  v302 = v421;
  v421 = 0;
  if (v302)
    (*(void (**)(void *))(*(_QWORD *)v302 + 8))(v302);
  if (v316 < 0)
    operator delete(v315[0]);
  v303 = *a3;
  v313 = __p;
  if (__p)
  {
    v304 = (std::__shared_weak_count *)operator new();
    v305 = (std::__shared_weak_count_vtbl *)__p;
    v304->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v304->__shared_owners_ = 0;
    v304->__shared_weak_owners_ = 0;
    v304[1].__vftable = v305;
  }
  else
  {
    v304 = 0;
  }
  v314 = v304;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v303 + 56))(v303, &v313);
  v306 = v314;
  if (v314)
  {
    v307 = (unint64_t *)&v314->__shared_owners_;
    do
      v308 = __ldaxr(v307);
    while (__stlxr(v308 - 1, v307));
    if (!v308)
    {
      ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
      std::__shared_weak_count::__release_weak(v306);
    }
  }
  v309 = __p;
  __p = 0;
  if (v309)
    (*(void (**)(void *))(*(_QWORD *)v309 + 8))(v309);
  if (v450)
  {
    v310 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v450);
    MEMORY[0x1E0C023A0](v310, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v415, 0);
  result = (uint64_t)v430;
  if (v430)
  {
    v312 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v430);
    return MEMORY[0x1E0C023A0](v312, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E097BDB8(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;

  v4 = STACK[0x4A8];
  STACK[0x4A8] = 0;
  if (v4)
    (*(void (**)(unint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 112), 0);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x448], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x4D0], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E097C96C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::ElementwiseBinary::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  char **v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t *v56;
  char *v57;
  char *v58;
  char *v59;
  __int128 v60;
  char *v61;
  char *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  char **v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  _OWORD *v81;
  unsigned __int8 *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  std::__shared_weak_count_vtbl *v88;
  std::__shared_weak_count *v89;
  std::__shared_weak_count *v90;
  unint64_t *p_shared_owners;
  unint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t i;
  uint64_t v97;
  std::__shared_weak_count *v98;
  std::string *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::string *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  std::string *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::string *v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  std::string *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::string *v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  std::__shared_weak_count_vtbl *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  void *v125;
  std::__shared_weak_count *v126;
  std::__shared_weak_count_vtbl *v127;
  uint64_t j;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  void *v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t result;
  uint64_t v142;
  void *v143;
  std::__shared_weak_count *v144;
  void *v145[2];
  char v146;
  void *v147;
  std::__shared_weak_count *v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  void *v151[2];
  char v152;
  std::string *v153;
  std::__shared_weak_count *v154;
  void *v155[2];
  char v156;
  void *v157[2];
  char v158;
  std::string *v159;
  std::__shared_weak_count *v160;
  void *v161[2];
  char v162;
  void *v163[2];
  char v164;
  std::string *v165;
  std::__shared_weak_count *v166;
  void *v167;
  std::__shared_weak_count *v168;
  __n128 v169;
  __int128 v170;
  __int128 v171;
  void *v172[2];
  uint64_t v173;
  void *v174;
  void *v175;
  _QWORD *v176;
  __n128 v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  char **v181;
  __n128 v182;
  void *__p;
  void *v184;
  _QWORD *v185;
  void *v186;
  void *v187;
  _QWORD *v188;
  void *p_Scalar;
  void *v190;
  _QWORD *v191;
  __n128 v192;
  _QWORD *v193;
  __int128 v194;
  uint64_t v195;
  _QWORD v196[3];
  __int128 v197;
  uint64_t v198[3];
  uint64_t v199[3];
  _QWORD v200[3];
  std::string *Scalar;
  std::string *v202;
  _QWORD v203[3];
  _BYTE v204[24];
  _BYTE *v205;
  _BYTE v206[24];
  _BYTE *v207;
  _BYTE v208[24];
  _BYTE *v209;
  uint64_t v210;

  v210 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v193 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v10;
  *(_QWORD *)v10 = v9;
  v202 = (std::string *)((char *)v10 + 8);
  v203[0] = (char *)v10 + 8;
  *(_QWORD *)&v194 = MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  p_Scalar = v12;
  *v12 = v11;
  v190 = v12 + 1;
  v191 = v12 + 1;
  *((_QWORD *)&v194 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&p_Scalar);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  v186 = v14;
  *v14 = v13;
  v187 = v14 + 1;
  v188 = v14 + 1;
  v195 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v186);
  v15 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v16 = operator new(8uLL);
  __p = v16;
  *v16 = v15;
  v184 = v16 + 1;
  v185 = v16 + 1;
  v196[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v194, 4, &v192);
  MIL::IRParameter::Make(&v192, (uint64_t *)&v174);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", (uint64_t *)&v174);
  v17 = v174;
  v174 = 0;
  if (v17)
    (*(void (**)(void *))(*(_QWORD *)v17 + 8))(v17);
  v18 = (std::__shared_weak_count *)v192.n128_u64[1];
  if (v192.n128_u64[1])
  {
    v19 = (unint64_t *)(v192.n128_u64[1] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (__p)
  {
    v184 = __p;
    operator delete(__p);
  }
  if (v186)
  {
    v187 = v186;
    operator delete(v186);
  }
  if (p_Scalar)
  {
    v190 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v202 = Scalar;
    operator delete(Scalar);
  }
  v21 = v193;
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v23;
  *(_QWORD *)v23 = v22;
  v202 = (std::string *)((char *)v23 + 8);
  v203[0] = (char *)v23 + 8;
  *(_QWORD *)&v194 = MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v24 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v25 = operator new(8uLL);
  p_Scalar = v25;
  *v25 = v24;
  v190 = v25 + 1;
  v191 = v25 + 1;
  *((_QWORD *)&v194 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&p_Scalar);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(8uLL);
  v186 = v27;
  *v27 = v26;
  v187 = v27 + 1;
  v188 = v27 + 1;
  v195 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v186);
  v28 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v29 = operator new(8uLL);
  __p = v29;
  *v29 = v28;
  v184 = v29 + 1;
  v185 = v29 + 1;
  v196[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v194, 4, &v182);
  MIL::IRParameter::Make(&v182, (uint64_t *)&v174);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v21, "y", (uint64_t *)&v174);
  v30 = v174;
  v174 = 0;
  if (v30)
    (*(void (**)(void *))(*(_QWORD *)v30 + 8))(v30);
  v31 = (std::__shared_weak_count *)v182.n128_u64[1];
  if (v182.n128_u64[1])
  {
    v32 = (unint64_t *)(v182.n128_u64[1] + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (__p)
  {
    v184 = __p;
    operator delete(__p);
  }
  if (v186)
  {
    v187 = v186;
    operator delete(v186);
  }
  if (p_Scalar)
  {
    v190 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v202 = Scalar;
    operator delete(Scalar);
  }
  v181 = 0;
  v34 = operator new();
  *(_QWORD *)v34 = 0;
  *(_QWORD *)(v34 + 8) = 0;
  *(_QWORD *)(v34 + 16) = 0;
  *(_QWORD *)&v194 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v181, (void **)v34);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v194, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v181, 1uLL);
  v35 = v181;
  v36 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v37 = operator new(8uLL);
  p_Scalar = v37;
  *v37 = v36;
  v190 = v37 + 1;
  v191 = v37 + 1;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&p_Scalar);
  v38 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v39 = operator new(8uLL);
  v186 = v39;
  *v39 = v38;
  v187 = v39 + 1;
  v188 = v39 + 1;
  v202 = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v186);
  v40 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v41 = operator new(8uLL);
  __p = v41;
  *v41 = v40;
  v184 = v41 + 1;
  v185 = v41 + 1;
  v203[0] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v42 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v43 = operator new(8uLL);
  v174 = v43;
  *v43 = v42;
  v175 = v43 + 1;
  v176 = v43 + 1;
  v203[1] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v174);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 4, &v177);
  MIL::IRParameter::Make(&v177, &v178);
  v44 = v178;
  v179 = v178;
  if (v178)
  {
    v45 = (_QWORD *)operator new();
    v46 = v178;
    *v45 = &unk_1EA99F888;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v46;
  }
  else
  {
    v45 = 0;
  }
  v180 = v45;
  v178 = 0;
  v47 = v35[2];
  v48 = v35[1];
  if (v48 >= v47)
  {
    v50 = (v48 - *v35) >> 4;
    v51 = v50 + 1;
    if ((unint64_t)(v50 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v52 = v47 - *v35;
    if (v52 >> 3 > v51)
      v51 = v52 >> 3;
    if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF0)
      v53 = 0xFFFFFFFFFFFFFFFLL;
    else
      v53 = v51;
    v196[1] = v35 + 2;
    v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v35 + 2), v53);
    v56 = (uint64_t *)&v54[16 * v50];
    *v56 = v44;
    v56[1] = (uint64_t)v45;
    v179 = 0;
    v180 = 0;
    v58 = *v35;
    v57 = v35[1];
    if (v57 == *v35)
    {
      v61 = v35[1];
      v59 = &v54[16 * v50];
    }
    else
    {
      v59 = &v54[16 * v50];
      do
      {
        v60 = *((_OWORD *)v57 - 1);
        v57 -= 16;
        *((_OWORD *)v59 - 1) = v60;
        v59 -= 16;
        *(_QWORD *)v57 = 0;
        *((_QWORD *)v57 + 1) = 0;
      }
      while (v57 != v58);
      v61 = *v35;
      v57 = v35[1];
    }
    v49 = (char *)(v56 + 2);
    *v35 = v59;
    *((_QWORD *)&v194 + 1) = v61;
    v35[1] = (char *)(v56 + 2);
    v195 = (uint64_t)v57;
    v62 = v35[2];
    v35[2] = &v54[16 * v55];
    v196[0] = v62;
    *(_QWORD *)&v194 = v61;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v194);
  }
  else
  {
    *(_QWORD *)v48 = v44;
    *((_QWORD *)v48 + 1) = v45;
    v49 = v48 + 16;
    v179 = 0;
    v180 = 0;
  }
  v35[1] = v49;
  v63 = v178;
  v178 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  v64 = (std::__shared_weak_count *)v177.n128_u64[1];
  if (v177.n128_u64[1])
  {
    v65 = (unint64_t *)(v177.n128_u64[1] + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  if (v174)
  {
    v175 = v174;
    operator delete(v174);
  }
  if (__p)
  {
    v184 = __p;
    operator delete(__p);
  }
  if (v186)
  {
    v187 = v186;
    operator delete(v186);
  }
  if (p_Scalar)
  {
    v190 = p_Scalar;
    operator delete(p_Scalar);
  }
  *(_OWORD *)v172 = *(_OWORD *)a2;
  v173 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v67 = (uint64_t)v193;
  *(_QWORD *)&v171 = v193;
  if (v193)
  {
    v68 = (_QWORD *)operator new();
    *v68 = &unk_1EA99F8E8;
    v68[1] = 0;
    v68[2] = 0;
    v68[3] = v67;
  }
  else
  {
    v68 = 0;
  }
  *((_QWORD *)&v171 + 1) = v68;
  v193 = 0;
  *(_QWORD *)&v170 = v181;
  if (v181)
  {
    v69 = (_QWORD *)operator new();
    v70 = v181;
    *v69 = &unk_1EA99F948;
    v69[1] = 0;
    v69[2] = 0;
    v69[3] = v70;
  }
  else
  {
    v69 = 0;
  }
  *((_QWORD *)&v170 + 1) = v69;
  v181 = 0;
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v208, a3);
  v207 = 0;
  MIL::IROperator::Make((__int128 *)v172, &v171, &v170, (uint64_t)v208, (uint64_t)v206, a4);
  v71 = v207;
  if (v207 == v206)
  {
    v72 = 4;
    v71 = v206;
  }
  else
  {
    if (!v207)
      goto LABEL_74;
    v72 = 5;
  }
  (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_74:
  v73 = v209;
  if (v209 == v208)
  {
    v74 = 4;
    v73 = v208;
    goto LABEL_78;
  }
  if (v209)
  {
    v74 = 5;
LABEL_78:
    (*(void (**)(void))(*v73 + 8 * v74))();
  }
  v75 = (std::__shared_weak_count *)*((_QWORD *)&v170 + 1);
  if (*((_QWORD *)&v170 + 1))
  {
    v76 = (unint64_t *)(*((_QWORD *)&v170 + 1) + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v78 = (std::__shared_weak_count *)*((_QWORD *)&v171 + 1);
  if (*((_QWORD *)&v171 + 1))
  {
    v79 = (unint64_t *)(*((_QWORD *)&v171 + 1) + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  if (SHIBYTE(v173) < 0)
    operator delete(v172[0]);
  v186 = 0;
  v81 = (_OWORD *)operator new();
  *v81 = 0u;
  v81[1] = 0u;
  *((_DWORD *)v81 + 8) = 1065353216;
  v186 = v81;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v169);
  MIL::IRParameter::Make(&v169, (uint64_t *)&v194);
  v82 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v81, "minimum_compute_type", (uint64_t *)&v194);
  v83 = v194;
  *(_QWORD *)&v194 = 0;
  if (v83)
    (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
  v84 = (std::__shared_weak_count *)v169.n128_u64[1];
  if (v169.n128_u64[1])
  {
    v85 = (unint64_t *)(v169.n128_u64[1] + 8);
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v82 + 5) + 32))(*((_QWORD *)v82 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v82 + 5) + 48))(*((_QWORD *)v82 + 5), 1);
  v87 = *a4;
  v88 = (std::__shared_weak_count_vtbl *)v186;
  v167 = v186;
  if (v186)
  {
    v89 = (std::__shared_weak_count *)operator new();
    v89->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v89->__shared_owners_ = 0;
    v89->__shared_weak_owners_ = 0;
    v89[1].__vftable = v88;
  }
  else
  {
    v89 = 0;
  }
  v168 = v89;
  v186 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v87 + 184))(v87, &v167);
  v90 = v168;
  if (v168)
  {
    p_shared_owners = (unint64_t *)&v168->__shared_owners_;
    do
      v92 = __ldaxr(p_shared_owners);
    while (__stlxr(v92 - 1, p_shared_owners));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = *a4;
  std::string::basic_string[abi:ne180100]<0>(&v194, "x");
  std::string::basic_string[abi:ne180100]<0>(v196, "y");
  Scalar = 0;
  v202 = 0;
  v203[0] = 0;
  p_Scalar = &Scalar;
  LOBYTE(v190) = 0;
  Scalar = (std::string *)operator new(0x30uLL);
  v202 = Scalar;
  v203[0] = Scalar + 2;
  v202 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v203, &v194, &v197, Scalar);
  MIL::ValueTypeInference::BroadcastFromInputs((__int128 **)&Scalar, (uint64_t)v204);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v93 + 200))(v93, v204);
  v94 = v205;
  if (v205 == v204)
  {
    v95 = 4;
    v94 = v204;
    goto LABEL_110;
  }
  if (v205)
  {
    v95 = 5;
LABEL_110:
    (*(void (**)(void))(*v94 + 8 * v95))();
  }
  p_Scalar = &Scalar;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_Scalar);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v196[i + 2]) < 0)
      operator delete((void *)v196[i]);
  }
  MIL::Validation::TensorDTypeConstraints::Make(&v194);
  v97 = v194;
  std::string::basic_string[abi:ne180100]<0>(v163, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v163, 0, (uint64_t *)&Scalar);
  v165 = Scalar;
  if (Scalar)
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = Scalar;
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = (std::__shared_weak_count_vtbl *)v99;
  }
  else
  {
    v98 = 0;
  }
  v166 = v98;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v161, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v97 + 24))(v97, &v165, v161);
  if (v162 < 0)
    operator delete(v161[0]);
  v100 = v166;
  if (v166)
  {
    v101 = (unint64_t *)&v166->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = Scalar;
  Scalar = 0;
  if (v103)
    (*(void (**)(std::string *))(v103->__r_.__value_.__r.__words[0] + 8))(v103);
  if (v164 < 0)
    operator delete(v163[0]);
  v104 = v194;
  std::string::basic_string[abi:ne180100]<0>(v157, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v157, 0, (uint64_t *)&Scalar);
  v159 = Scalar;
  if (Scalar)
  {
    v105 = (std::__shared_weak_count *)operator new();
    v106 = Scalar;
    v105->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v105->__shared_owners_ = 0;
    v105->__shared_weak_owners_ = 0;
    v105[1].__vftable = (std::__shared_weak_count_vtbl *)v106;
  }
  else
  {
    v105 = 0;
  }
  v160 = v105;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v155, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v104 + 24))(v104, &v159, v155);
  if (v156 < 0)
    operator delete(v155[0]);
  v107 = v160;
  if (v160)
  {
    v108 = (unint64_t *)&v160->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = Scalar;
  Scalar = 0;
  if (v110)
    (*(void (**)(std::string *))(v110->__r_.__value_.__r.__words[0] + 8))(v110);
  if (v158 < 0)
    operator delete(v157[0]);
  v111 = v194;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v153 = Scalar;
  if (Scalar)
  {
    v112 = (std::__shared_weak_count *)operator new();
    v113 = Scalar;
    v112->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v112->__shared_owners_ = 0;
    v112->__shared_weak_owners_ = 0;
    v112[1].__vftable = (std::__shared_weak_count_vtbl *)v113;
  }
  else
  {
    v112 = 0;
  }
  v154 = v112;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v151, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v111 + 24))(v111, &v153, v151);
  if (v152 < 0)
    operator delete(v151[0]);
  v114 = v154;
  if (v154)
  {
    v115 = (unint64_t *)&v154->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = Scalar;
  Scalar = 0;
  if (v117)
    (*(void (**)(std::string *))(v117->__r_.__value_.__r.__words[0] + 8))(v117);
  v118 = *a4;
  v149 = v194;
  if ((_QWORD)v194)
  {
    v119 = (std::__shared_weak_count *)operator new();
    v120 = (std::__shared_weak_count_vtbl *)v194;
    v119->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v119->__shared_owners_ = 0;
    v119->__shared_weak_owners_ = 0;
    v119[1].__vftable = v120;
  }
  else
  {
    v119 = 0;
  }
  v150 = v119;
  *(_QWORD *)&v194 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v118 + 56))(v118, &v149);
  v121 = v150;
  if (v150)
  {
    v122 = (unint64_t *)&v150->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = v194;
  *(_QWORD *)&v194 = 0;
  if (v124)
    (*(void (**)(uint64_t))(*(_QWORD *)v124 + 8))(v124);
  MIL::Validation::PossibleStringValuesConstraints::Make(&p_Scalar);
  v125 = p_Scalar;
  std::string::basic_string[abi:ne180100]<0>(v145, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v145, 1, (uint64_t *)&__p);
  v147 = __p;
  if (__p)
  {
    v126 = (std::__shared_weak_count *)operator new();
    v127 = (std::__shared_weak_count_vtbl *)__p;
    v126->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v126->__shared_owners_ = 0;
    v126->__shared_weak_owners_ = 0;
    v126[1].__vftable = v127;
  }
  else
  {
    v126 = 0;
  }
  v148 = v126;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&v194, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v196, "fp16");
  std::string::basic_string[abi:ne180100]<0>(&v197, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v198, "int32");
  std::string::basic_string[abi:ne180100]<0>(v199, "int8");
  std::string::basic_string[abi:ne180100]<0>(v200, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v194, 6);
  (*(void (**)(void *, void **, std::string **, uint64_t))(*(_QWORD *)v125 + 24))(v125, &v147, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -18; j -= 3)
  {
    if (SHIBYTE(v200[j + 2]) < 0)
      operator delete((void *)v200[j]);
  }
  v129 = v148;
  if (v148)
  {
    v130 = (unint64_t *)&v148->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v132 = __p;
  __p = 0;
  if (v132)
    (*(void (**)(void *))(*(_QWORD *)v132 + 8))(v132);
  if (v146 < 0)
    operator delete(v145[0]);
  v133 = *a4;
  v143 = p_Scalar;
  if (p_Scalar)
  {
    v134 = (std::__shared_weak_count *)operator new();
    v135 = (std::__shared_weak_count_vtbl *)p_Scalar;
    v134->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v134->__shared_owners_ = 0;
    v134->__shared_weak_owners_ = 0;
    v134[1].__vftable = v135;
  }
  else
  {
    v134 = 0;
  }
  v144 = v134;
  p_Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v133 + 56))(v133, &v143);
  v136 = v144;
  if (v144)
  {
    v137 = (unint64_t *)&v144->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  v139 = p_Scalar;
  p_Scalar = 0;
  if (v139)
    (*(void (**)(void *))(*(_QWORD *)v139 + 8))(v139);
  if (v186)
  {
    v140 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v186);
    MEMORY[0x1E0C023A0](v140, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v181, 0);
  result = (uint64_t)v193;
  if (v193)
  {
    v142 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v193);
    return MEMORY[0x1E0C023A0](v142, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E097DB14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  void *a67;
  uint64_t a72;
  uint64_t *v72;
  void *v74;
  uint64_t v75;

  v74 = a67;
  a67 = 0;
  if (v74)
    (*(void (**)(void *))(*(_QWORD *)v74 + 8))(v74);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a64, 0);
  v75 = *v72;
  *v72 = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a72, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::Add::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  __int128 *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  char **v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t *v54;
  char *v55;
  char *v56;
  char *v57;
  __int128 v58;
  char *v59;
  char *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  char **v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  _OWORD *v79;
  unsigned __int8 *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  std::__shared_weak_count_vtbl *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  unint64_t *p_shared_owners;
  unint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t i;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  std::string *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::string *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  std::string *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::string *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  std::string *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::string *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  std::__shared_weak_count_vtbl *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  void *v126;
  std::__shared_weak_count *v127;
  std::__shared_weak_count_vtbl *v128;
  uint64_t j;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  void *v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  std::__shared_weak_count_vtbl *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t result;
  uint64_t v143;
  void *v144;
  std::__shared_weak_count *v145;
  void *v146[2];
  char v147;
  void *v148;
  std::__shared_weak_count *v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  void *v152[2];
  char v153;
  std::string *v154;
  std::__shared_weak_count *v155;
  void *v156[2];
  char v157;
  void *v158[2];
  char v159;
  std::string *v160;
  std::__shared_weak_count *v161;
  void *v162[2];
  char v163;
  void *v164[2];
  char v165;
  std::string *v166;
  std::__shared_weak_count *v167;
  void *v168;
  std::__shared_weak_count *v169;
  __n128 v170;
  __int128 v171;
  __int128 v172;
  void *v173[2];
  uint64_t v174;
  void *v175;
  void *v176;
  _QWORD *v177;
  __n128 v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  char **v182;
  __n128 v183;
  void *__p;
  void *v185;
  _QWORD *v186;
  void *v187;
  void *v188;
  _QWORD *v189;
  void *p_Scalar;
  void *v191;
  _QWORD *v192;
  __n128 v193;
  _QWORD *v194;
  __int128 v195;
  uint64_t v196;
  _QWORD v197[3];
  __int128 v198;
  uint64_t v199[3];
  uint64_t v200[3];
  _QWORD v201[3];
  std::string *Scalar;
  std::string *v203;
  _QWORD v204[3];
  _QWORD v205[3];
  _QWORD *v206;
  _BYTE v207[24];
  _BYTE *v208;
  _BYTE v209[24];
  _BYTE *v210;
  _QWORD v211[3];
  _QWORD *v212;
  uint64_t v213;

  v213 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v194 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v8;
  *(_QWORD *)v8 = v7;
  v203 = (std::string *)((char *)v8 + 8);
  v204[0] = (char *)v8 + 8;
  *(_QWORD *)&v195 = MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  p_Scalar = v10;
  *v10 = v9;
  v191 = v10 + 1;
  v192 = v10 + 1;
  *((_QWORD *)&v195 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&p_Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v187 = v12;
  *v12 = v11;
  v188 = v12 + 1;
  v189 = v12 + 1;
  v196 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v187);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v185 = v14 + 1;
  v186 = v14 + 1;
  v197[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v195, 4, &v193);
  MIL::IRParameter::Make(&v193, (uint64_t *)&v175);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v175);
  v15 = v175;
  v175 = 0;
  if (v15)
    (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v193.n128_u64[1];
  if (v193.n128_u64[1])
  {
    v17 = (unint64_t *)(v193.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v185 = __p;
    operator delete(__p);
  }
  if (v187)
  {
    v188 = v187;
    operator delete(v187);
  }
  if (p_Scalar)
  {
    v191 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v203 = Scalar;
    operator delete(Scalar);
  }
  v19 = v194;
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v21;
  *(_QWORD *)v21 = v20;
  v203 = (std::string *)((char *)v21 + 8);
  v204[0] = (char *)v21 + 8;
  *(_QWORD *)&v195 = MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  p_Scalar = v23;
  *v23 = v22;
  v191 = v23 + 1;
  v192 = v23 + 1;
  *((_QWORD *)&v195 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&p_Scalar);
  v24 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v25 = operator new(8uLL);
  v187 = v25;
  *v25 = v24;
  v188 = v25 + 1;
  v189 = v25 + 1;
  v196 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v187);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(8uLL);
  __p = v27;
  *v27 = v26;
  v185 = v27 + 1;
  v186 = v27 + 1;
  v197[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v195, 4, &v183);
  MIL::IRParameter::Make(&v183, (uint64_t *)&v175);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v19, "y", (uint64_t *)&v175);
  v28 = v175;
  v175 = 0;
  if (v28)
    (*(void (**)(void *))(*(_QWORD *)v28 + 8))(v28);
  v29 = (std::__shared_weak_count *)v183.n128_u64[1];
  if (v183.n128_u64[1])
  {
    v30 = (unint64_t *)(v183.n128_u64[1] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (__p)
  {
    v185 = __p;
    operator delete(__p);
  }
  if (v187)
  {
    v188 = v187;
    operator delete(v187);
  }
  if (p_Scalar)
  {
    v191 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v203 = Scalar;
    operator delete(Scalar);
  }
  v182 = 0;
  v32 = operator new();
  *(_QWORD *)v32 = 0;
  *(_QWORD *)(v32 + 8) = 0;
  *(_QWORD *)(v32 + 16) = 0;
  *(_QWORD *)&v195 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v182, (void **)v32);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v195, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v182, 1uLL);
  v33 = v182;
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = operator new(8uLL);
  p_Scalar = v35;
  *v35 = v34;
  v191 = v35 + 1;
  v192 = v35 + 1;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&p_Scalar);
  v36 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v37 = operator new(8uLL);
  v187 = v37;
  *v37 = v36;
  v188 = v37 + 1;
  v189 = v37 + 1;
  v203 = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v187);
  v38 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v39 = operator new(8uLL);
  __p = v39;
  *v39 = v38;
  v185 = v39 + 1;
  v186 = v39 + 1;
  v204[0] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v40 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v41 = operator new(8uLL);
  v175 = v41;
  *v41 = v40;
  v176 = v41 + 1;
  v177 = v41 + 1;
  v204[1] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v175);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 4, &v178);
  MIL::IRParameter::Make(&v178, &v179);
  v42 = v179;
  v180 = v179;
  if (v179)
  {
    v43 = (_QWORD *)operator new();
    v44 = v179;
    *v43 = &unk_1EA99F888;
    v43[1] = 0;
    v43[2] = 0;
    v43[3] = v44;
  }
  else
  {
    v43 = 0;
  }
  v181 = v43;
  v179 = 0;
  v45 = v33[2];
  v46 = v33[1];
  if (v46 >= v45)
  {
    v48 = (v46 - *v33) >> 4;
    v49 = v48 + 1;
    if ((unint64_t)(v48 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v50 = v45 - *v33;
    if (v50 >> 3 > v49)
      v49 = v50 >> 3;
    if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF0)
      v51 = 0xFFFFFFFFFFFFFFFLL;
    else
      v51 = v49;
    v197[1] = v33 + 2;
    v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v33 + 2), v51);
    v54 = (uint64_t *)&v52[16 * v48];
    *v54 = v42;
    v54[1] = (uint64_t)v43;
    v180 = 0;
    v181 = 0;
    v56 = *v33;
    v55 = v33[1];
    if (v55 == *v33)
    {
      v59 = v33[1];
      v57 = &v52[16 * v48];
    }
    else
    {
      v57 = &v52[16 * v48];
      do
      {
        v58 = *((_OWORD *)v55 - 1);
        v55 -= 16;
        *((_OWORD *)v57 - 1) = v58;
        v57 -= 16;
        *(_QWORD *)v55 = 0;
        *((_QWORD *)v55 + 1) = 0;
      }
      while (v55 != v56);
      v59 = *v33;
      v55 = v33[1];
    }
    v47 = (char *)(v54 + 2);
    *v33 = v57;
    *((_QWORD *)&v195 + 1) = v59;
    v33[1] = (char *)(v54 + 2);
    v196 = (uint64_t)v55;
    v60 = v33[2];
    v33[2] = &v52[16 * v53];
    v197[0] = v60;
    *(_QWORD *)&v195 = v59;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v195);
  }
  else
  {
    *(_QWORD *)v46 = v42;
    *((_QWORD *)v46 + 1) = v43;
    v47 = v46 + 16;
    v180 = 0;
    v181 = 0;
  }
  v33[1] = v47;
  v61 = v179;
  v179 = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  v62 = (std::__shared_weak_count *)v178.n128_u64[1];
  if (v178.n128_u64[1])
  {
    v63 = (unint64_t *)(v178.n128_u64[1] + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  if (v175)
  {
    v176 = v175;
    operator delete(v175);
  }
  if (__p)
  {
    v185 = __p;
    operator delete(__p);
  }
  if (v187)
  {
    v188 = v187;
    operator delete(v187);
  }
  if (p_Scalar)
  {
    v191 = p_Scalar;
    operator delete(p_Scalar);
  }
  *(_OWORD *)v173 = *(_OWORD *)a2;
  v174 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v65 = (uint64_t)v194;
  *(_QWORD *)&v172 = v194;
  if (v194)
  {
    v66 = (_QWORD *)operator new();
    *v66 = &unk_1EA99F8E8;
    v66[1] = 0;
    v66[2] = 0;
    v66[3] = v65;
  }
  else
  {
    v66 = 0;
  }
  *((_QWORD *)&v172 + 1) = v66;
  v194 = 0;
  *(_QWORD *)&v171 = v182;
  if (v182)
  {
    v67 = (_QWORD *)operator new();
    v68 = v182;
    *v67 = &unk_1EA99F948;
    v67[1] = 0;
    v67[2] = 0;
    v67[3] = v68;
  }
  else
  {
    v67 = 0;
  }
  *((_QWORD *)&v171 + 1) = v67;
  v182 = 0;
  v211[0] = &unk_1EA99FAC8;
  v211[1] = MIL::Validation::ValidateViaTypeInference;
  v212 = v211;
  v210 = 0;
  MIL::IROperator::Make((__int128 *)v173, &v172, &v171, (uint64_t)v211, (uint64_t)v209, a3);
  v69 = v210;
  if (v210 == v209)
  {
    v70 = 4;
    v69 = v209;
  }
  else
  {
    if (!v210)
      goto LABEL_74;
    v70 = 5;
  }
  (*(void (**)(void))(*v69 + 8 * v70))();
LABEL_74:
  v71 = v212;
  if (v212 == v211)
  {
    v72 = 4;
    v71 = v211;
    goto LABEL_78;
  }
  if (v212)
  {
    v72 = 5;
LABEL_78:
    (*(void (**)(void))(*v71 + 8 * v72))();
  }
  v73 = (std::__shared_weak_count *)*((_QWORD *)&v171 + 1);
  if (*((_QWORD *)&v171 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v171 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = (std::__shared_weak_count *)*((_QWORD *)&v172 + 1);
  if (*((_QWORD *)&v172 + 1))
  {
    v77 = (unint64_t *)(*((_QWORD *)&v172 + 1) + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  if (SHIBYTE(v174) < 0)
    operator delete(v173[0]);
  v187 = 0;
  v79 = (_OWORD *)operator new();
  *v79 = 0u;
  v79[1] = 0u;
  *((_DWORD *)v79 + 8) = 1065353216;
  v187 = v79;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v170);
  MIL::IRParameter::Make(&v170, (uint64_t *)&v195);
  v80 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v79, "minimum_compute_type", (uint64_t *)&v195);
  v81 = v195;
  *(_QWORD *)&v195 = 0;
  if (v81)
    (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
  v82 = (std::__shared_weak_count *)v170.n128_u64[1];
  if (v170.n128_u64[1])
  {
    v83 = (unint64_t *)(v170.n128_u64[1] + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v80 + 5) + 32))(*((_QWORD *)v80 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v80 + 5) + 48))(*((_QWORD *)v80 + 5), 1);
  v85 = *a3;
  v86 = (std::__shared_weak_count_vtbl *)v187;
  v168 = v187;
  if (v187)
  {
    v87 = (std::__shared_weak_count *)operator new();
    v87->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v87->__shared_owners_ = 0;
    v87->__shared_weak_owners_ = 0;
    v87[1].__vftable = v86;
  }
  else
  {
    v87 = 0;
  }
  v169 = v87;
  v187 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v85 + 184))(v85, &v168);
  v88 = v169;
  if (v169)
  {
    p_shared_owners = (unint64_t *)&v169->__shared_owners_;
    do
      v90 = __ldaxr(p_shared_owners);
    while (__stlxr(v90 - 1, p_shared_owners));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v195, "x");
  std::string::basic_string[abi:ne180100]<0>(v197, "y");
  Scalar = 0;
  v203 = 0;
  v204[0] = 0;
  p_Scalar = &Scalar;
  LOBYTE(v191) = 0;
  Scalar = (std::string *)operator new(0x30uLL);
  v203 = Scalar;
  v204[0] = Scalar + 2;
  v203 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v204, &v195, &v198, Scalar);
  MIL::ValueTypeInference::BroadcastFromInputs((__int128 **)&Scalar, (uint64_t)v207);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v91 + 200))(v91, v207);
  v92 = v208;
  if (v208 == v207)
  {
    v93 = 4;
    v92 = v207;
    goto LABEL_110;
  }
  if (v208)
  {
    v93 = 5;
LABEL_110:
    (*(void (**)(void))(*v92 + 8 * v93))();
  }
  p_Scalar = &Scalar;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_Scalar);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v197[i + 2]) < 0)
      operator delete((void *)v197[i]);
  }
  v95 = *a3;
  v205[0] = &off_1EA9A00F8;
  v205[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceAdd;
  v206 = v205;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v95 + 216))(v95, v205);
  v96 = v206;
  if (v206 == v205)
  {
    v97 = 4;
    v96 = v205;
  }
  else
  {
    if (!v206)
      goto LABEL_120;
    v97 = 5;
  }
  (*(void (**)(void))(*v96 + 8 * v97))();
LABEL_120:
  MIL::Validation::TensorDTypeConstraints::Make(&v195);
  v98 = v195;
  std::string::basic_string[abi:ne180100]<0>(v164, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v164, 0, (uint64_t *)&Scalar);
  v166 = Scalar;
  if (Scalar)
  {
    v99 = (std::__shared_weak_count *)operator new();
    v100 = Scalar;
    v99->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v99->__shared_owners_ = 0;
    v99->__shared_weak_owners_ = 0;
    v99[1].__vftable = (std::__shared_weak_count_vtbl *)v100;
  }
  else
  {
    v99 = 0;
  }
  v167 = v99;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v162, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v98 + 24))(v98, &v166, v162);
  if (v163 < 0)
    operator delete(v162[0]);
  v101 = v167;
  if (v167)
  {
    v102 = (unint64_t *)&v167->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = Scalar;
  Scalar = 0;
  if (v104)
    (*(void (**)(std::string *))(v104->__r_.__value_.__r.__words[0] + 8))(v104);
  if (v165 < 0)
    operator delete(v164[0]);
  v105 = v195;
  std::string::basic_string[abi:ne180100]<0>(v158, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v158, 0, (uint64_t *)&Scalar);
  v160 = Scalar;
  if (Scalar)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = Scalar;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v161 = v106;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v156, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v105 + 24))(v105, &v160, v156);
  if (v157 < 0)
    operator delete(v156[0]);
  v108 = v161;
  if (v161)
  {
    v109 = (unint64_t *)&v161->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = Scalar;
  Scalar = 0;
  if (v111)
    (*(void (**)(std::string *))(v111->__r_.__value_.__r.__words[0] + 8))(v111);
  if (v159 < 0)
    operator delete(v158[0]);
  v112 = v195;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v154 = Scalar;
  if (Scalar)
  {
    v113 = (std::__shared_weak_count *)operator new();
    v114 = Scalar;
    v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v113->__shared_owners_ = 0;
    v113->__shared_weak_owners_ = 0;
    v113[1].__vftable = (std::__shared_weak_count_vtbl *)v114;
  }
  else
  {
    v113 = 0;
  }
  v155 = v113;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v152, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v112 + 24))(v112, &v154, v152);
  if (v153 < 0)
    operator delete(v152[0]);
  v115 = v155;
  if (v155)
  {
    v116 = (unint64_t *)&v155->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = Scalar;
  Scalar = 0;
  if (v118)
    (*(void (**)(std::string *))(v118->__r_.__value_.__r.__words[0] + 8))(v118);
  v119 = *a3;
  v150 = v195;
  if ((_QWORD)v195)
  {
    v120 = (std::__shared_weak_count *)operator new();
    v121 = (std::__shared_weak_count_vtbl *)v195;
    v120->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v120->__shared_owners_ = 0;
    v120->__shared_weak_owners_ = 0;
    v120[1].__vftable = v121;
  }
  else
  {
    v120 = 0;
  }
  v151 = v120;
  *(_QWORD *)&v195 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v119 + 56))(v119, &v150);
  v122 = v151;
  if (v151)
  {
    v123 = (unint64_t *)&v151->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v125 = v195;
  *(_QWORD *)&v195 = 0;
  if (v125)
    (*(void (**)(uint64_t))(*(_QWORD *)v125 + 8))(v125);
  MIL::Validation::PossibleStringValuesConstraints::Make(&p_Scalar);
  v126 = p_Scalar;
  std::string::basic_string[abi:ne180100]<0>(v146, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v146, 1, (uint64_t *)&__p);
  v148 = __p;
  if (__p)
  {
    v127 = (std::__shared_weak_count *)operator new();
    v128 = (std::__shared_weak_count_vtbl *)__p;
    v127->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v127->__shared_owners_ = 0;
    v127->__shared_weak_owners_ = 0;
    v127[1].__vftable = v128;
  }
  else
  {
    v127 = 0;
  }
  v149 = v127;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&v195, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v197, "fp16");
  std::string::basic_string[abi:ne180100]<0>(&v198, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v199, "int32");
  std::string::basic_string[abi:ne180100]<0>(v200, "int8");
  std::string::basic_string[abi:ne180100]<0>(v201, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v195, 6);
  (*(void (**)(void *, void **, std::string **, uint64_t))(*(_QWORD *)v126 + 24))(v126, &v148, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -18; j -= 3)
  {
    if (SHIBYTE(v201[j + 2]) < 0)
      operator delete((void *)v201[j]);
  }
  v130 = v149;
  if (v149)
  {
    v131 = (unint64_t *)&v149->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = __p;
  __p = 0;
  if (v133)
    (*(void (**)(void *))(*(_QWORD *)v133 + 8))(v133);
  if (v147 < 0)
    operator delete(v146[0]);
  v134 = *a3;
  v144 = p_Scalar;
  if (p_Scalar)
  {
    v135 = (std::__shared_weak_count *)operator new();
    v136 = (std::__shared_weak_count_vtbl *)p_Scalar;
    v135->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v135->__shared_owners_ = 0;
    v135->__shared_weak_owners_ = 0;
    v135[1].__vftable = v136;
  }
  else
  {
    v135 = 0;
  }
  v145 = v135;
  p_Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v134 + 56))(v134, &v144);
  v137 = v145;
  if (v145)
  {
    v138 = (unint64_t *)&v145->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v140 = p_Scalar;
  p_Scalar = 0;
  if (v140)
    (*(void (**)(void *))(*(_QWORD *)v140 + 8))(v140);
  if (v187)
  {
    v141 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v187);
    MEMORY[0x1E0C023A0](v141, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v182, 0);
  result = (uint64_t)v194;
  if (v194)
  {
    v143 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v194);
    return MEMORY[0x1E0C023A0](v143, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E097F2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  void *a67;
  uint64_t a72;
  uint64_t *v72;
  void *v74;
  uint64_t v75;

  v74 = a67;
  a67 = 0;
  if (v74)
    (*(void (**)(void *))(*(_QWORD *)v74 + 8))(v74);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a64, 0);
  v75 = *v72;
  *v72 = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a72, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::ElementwiseBinaryBoolOutput::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  std::__shared_weak_count_vtbl *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  void ***v35;
  uint64_t v36;
  std::__shared_weak_count_vtbl *v37;
  void *v38;
  _QWORD *v39;
  void *v40;
  unint64_t v41;
  void **v42;
  void **v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  void **v51;
  void **v52;
  char *v53;
  __int128 v54;
  void **v55;
  void **v56;
  void *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  void *v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  _OWORD *v75;
  unsigned __int8 *v76;
  void **v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  std::__shared_weak_count_vtbl *v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count *v84;
  unint64_t *p_shared_owners;
  unint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  void **v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count_vtbl *v96;
  void **v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count_vtbl *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count_vtbl *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  void **v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  void **v110;
  void *v111;
  std::__shared_weak_count *v112;
  uint64_t v113;
  uint64_t i;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  std::__shared_weak_count_vtbl *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t result;
  uint64_t v128;
  void *v129;
  std::__shared_weak_count *v130;
  void *v131[2];
  char v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  void **v135;
  std::__shared_weak_count *v136;
  void *v137[2];
  char v138;
  void *v139[2];
  char v140;
  std::__shared_weak_count_vtbl *v141;
  std::__shared_weak_count *v142;
  void *v143[2];
  char v144;
  void *v145[2];
  char v146;
  std::__shared_weak_count_vtbl *v147;
  std::__shared_weak_count *v148;
  void *v149;
  std::__shared_weak_count *v150;
  __n128 v151;
  __int128 v152;
  __int128 v153;
  void *v154[2];
  uint64_t v155;
  __n128 v156;
  __n128 v157;
  void *__p;
  void *v159;
  _QWORD *v160;
  void *v161;
  void *v162;
  _QWORD *v163;
  void *v164;
  void *v165;
  _QWORD *v166;
  __n128 v167;
  _QWORD *v168;
  void **v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD v172[3];
  uint64_t v173[3];
  uint64_t v174[3];
  uint64_t v175[3];
  _QWORD v176[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *v178;
  void (__cdecl **v179)(std::__shared_weak_count *__hidden);
  _QWORD v180[3];
  _QWORD *v181;
  _BYTE v182[24];
  _BYTE *v183;
  _BYTE v184[24];
  _BYTE *v185;
  uint64_t v186[2];

  v186[1] = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v168 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v10;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v178 = (std::__shared_weak_count_vtbl *)&v10->~__shared_weak_count_0;
  v179 = &v10->~__shared_weak_count_0;
  v169 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v164 = v12;
  *v12 = v11;
  v165 = v12 + 1;
  v166 = v12 + 1;
  v170 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v164);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  v161 = v14;
  *v14 = v13;
  v162 = v14 + 1;
  v163 = v14 + 1;
  v171 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v161);
  v15 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v16 = operator new(8uLL);
  __p = v16;
  *v16 = v15;
  v159 = v16 + 1;
  v160 = v16 + 1;
  v172[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v169, 4, &v167);
  MIL::IRParameter::Make(&v167, v186);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", v186);
  v17 = v186[0];
  v186[0] = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = (std::__shared_weak_count *)v167.n128_u64[1];
  if (v167.n128_u64[1])
  {
    v19 = (unint64_t *)(v167.n128_u64[1] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (__p)
  {
    v159 = __p;
    operator delete(__p);
  }
  if (v161)
  {
    v162 = v161;
    operator delete(v161);
  }
  if (v164)
  {
    v165 = v164;
    operator delete(v164);
  }
  if (Scalar)
  {
    v178 = Scalar;
    operator delete(Scalar);
  }
  v21 = v168;
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v23;
  v23->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v22;
  v178 = (std::__shared_weak_count_vtbl *)&v23->~__shared_weak_count_0;
  v179 = &v23->~__shared_weak_count_0;
  v169 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v24 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v25 = operator new(8uLL);
  v164 = v25;
  *v25 = v24;
  v165 = v25 + 1;
  v166 = v25 + 1;
  v170 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v164);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(8uLL);
  v161 = v27;
  *v27 = v26;
  v162 = v27 + 1;
  v163 = v27 + 1;
  v171 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v161);
  v28 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v29 = operator new(8uLL);
  __p = v29;
  *v29 = v28;
  v159 = v29 + 1;
  v160 = v29 + 1;
  v172[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v169, 4, &v157);
  MIL::IRParameter::Make(&v157, v186);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v21, "y", v186);
  v30 = v186[0];
  v186[0] = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  v31 = (std::__shared_weak_count *)v157.n128_u64[1];
  if (v157.n128_u64[1])
  {
    v32 = (unint64_t *)(v157.n128_u64[1] + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (__p)
  {
    v159 = __p;
    operator delete(__p);
  }
  if (v161)
  {
    v162 = v161;
    operator delete(v161);
  }
  if (v164)
  {
    v165 = v164;
    operator delete(v164);
  }
  if (Scalar)
  {
    v178 = Scalar;
    operator delete(Scalar);
  }
  v161 = 0;
  v34 = operator new();
  *(_QWORD *)v34 = 0;
  *(_QWORD *)(v34 + 8) = 0;
  *(_QWORD *)(v34 + 16) = 0;
  v169 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v161, (void **)v34);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v169, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)v161, 1uLL);
  v35 = (void ***)v161;
  v36 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v37 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v37;
  v37->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v36;
  v178 = (std::__shared_weak_count_vtbl *)&v37->~__shared_weak_count_0;
  v179 = &v37->~__shared_weak_count_0;
  v186[0] = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)v186, 1, &v156);
  MIL::IRParameter::Make(&v156, (uint64_t *)&__p);
  v38 = __p;
  v164 = __p;
  if (__p)
  {
    v39 = (_QWORD *)operator new();
    v40 = __p;
    *v39 = &unk_1EA99F888;
    v39[1] = 0;
    v39[2] = 0;
    v39[3] = v40;
  }
  else
  {
    v39 = 0;
  }
  v165 = v39;
  __p = 0;
  v41 = (unint64_t)v35[2];
  v42 = v35[1];
  if ((unint64_t)v42 >= v41)
  {
    v44 = ((char *)v42 - (char *)*v35) >> 4;
    v45 = v44 + 1;
    if ((unint64_t)(v44 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v46 = v41 - (_QWORD)*v35;
    if (v46 >> 3 > v45)
      v45 = v46 >> 3;
    if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF0)
      v47 = 0xFFFFFFFFFFFFFFFLL;
    else
      v47 = v45;
    v172[1] = v35 + 2;
    v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v35 + 2), v47);
    v50 = &v48[16 * v44];
    *(_QWORD *)v50 = v38;
    *((_QWORD *)v50 + 1) = v39;
    v164 = 0;
    v165 = 0;
    v52 = *v35;
    v51 = v35[1];
    if (v51 == *v35)
    {
      v55 = v35[1];
      v53 = &v48[16 * v44];
    }
    else
    {
      v53 = &v48[16 * v44];
      do
      {
        v54 = *((_OWORD *)v51 - 1);
        v51 -= 2;
        *((_OWORD *)v53 - 1) = v54;
        v53 -= 16;
        *v51 = 0;
        v51[1] = 0;
      }
      while (v51 != v52);
      v55 = *v35;
      v51 = v35[1];
    }
    v43 = (void **)(v50 + 16);
    *v35 = (void **)v53;
    v169 = v55;
    v170 = (uint64_t)v55;
    v35[1] = (void **)(v50 + 16);
    v171 = (uint64_t)v51;
    v56 = v35[2];
    v35[2] = (void **)&v48[16 * v49];
    v172[0] = v56;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v169);
  }
  else
  {
    *v42 = v38;
    v42[1] = v39;
    v43 = v42 + 2;
    v164 = 0;
    v165 = 0;
  }
  v35[1] = v43;
  v57 = __p;
  __p = 0;
  if (v57)
    (*(void (**)(void *))(*(_QWORD *)v57 + 8))(v57);
  v58 = (std::__shared_weak_count *)v156.n128_u64[1];
  if (v156.n128_u64[1])
  {
    v59 = (unint64_t *)(v156.n128_u64[1] + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  if (Scalar)
  {
    v178 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v154 = *(_OWORD *)a2;
  v155 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v61 = (uint64_t)v168;
  *(_QWORD *)&v153 = v168;
  if (v168)
  {
    v62 = (_QWORD *)operator new();
    *v62 = &unk_1EA99F8E8;
    v62[1] = 0;
    v62[2] = 0;
    v62[3] = v61;
  }
  else
  {
    v62 = 0;
  }
  *((_QWORD *)&v153 + 1) = v62;
  v168 = 0;
  *(_QWORD *)&v152 = v161;
  if (v161)
  {
    v63 = (_QWORD *)operator new();
    v64 = v161;
    *v63 = &unk_1EA99F948;
    v63[1] = 0;
    v63[2] = 0;
    v63[3] = v64;
  }
  else
  {
    v63 = 0;
  }
  *((_QWORD *)&v152 + 1) = v63;
  v161 = 0;
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v184, a3);
  v183 = 0;
  MIL::IROperator::Make((__int128 *)v154, &v153, &v152, (uint64_t)v184, (uint64_t)v182, a4);
  v65 = v183;
  if (v183 == v182)
  {
    v66 = 4;
    v65 = v182;
  }
  else
  {
    if (!v183)
      goto LABEL_68;
    v66 = 5;
  }
  (*(void (**)(void))(*v65 + 8 * v66))();
LABEL_68:
  v67 = v185;
  if (v185 == v184)
  {
    v68 = 4;
    v67 = v184;
    goto LABEL_72;
  }
  if (v185)
  {
    v68 = 5;
LABEL_72:
    (*(void (**)(void))(*v67 + 8 * v68))();
  }
  v69 = (std::__shared_weak_count *)*((_QWORD *)&v152 + 1);
  if (*((_QWORD *)&v152 + 1))
  {
    v70 = (unint64_t *)(*((_QWORD *)&v152 + 1) + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v72 = (std::__shared_weak_count *)*((_QWORD *)&v153 + 1);
  if (*((_QWORD *)&v153 + 1))
  {
    v73 = (unint64_t *)(*((_QWORD *)&v153 + 1) + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  if (SHIBYTE(v155) < 0)
    operator delete(v154[0]);
  v164 = 0;
  v75 = (_OWORD *)operator new();
  *v75 = 0u;
  v75[1] = 0u;
  *((_DWORD *)v75 + 8) = 1065353216;
  v164 = v75;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v151);
  MIL::IRParameter::Make(&v151, (uint64_t *)&v169);
  v76 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v75, "minimum_compute_type", (uint64_t *)&v169);
  v77 = v169;
  v169 = 0;
  if (v77)
    (*((void (**)(void **))*v77 + 1))(v77);
  v78 = (std::__shared_weak_count *)v151.n128_u64[1];
  if (v151.n128_u64[1])
  {
    v79 = (unint64_t *)(v151.n128_u64[1] + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v76 + 5) + 32))(*((_QWORD *)v76 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v76 + 5) + 48))(*((_QWORD *)v76 + 5), 1);
  v81 = *a4;
  v82 = (std::__shared_weak_count_vtbl *)v164;
  v149 = v164;
  if (v164)
  {
    v83 = (std::__shared_weak_count *)operator new();
    v83->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v83->__shared_owners_ = 0;
    v83->__shared_weak_owners_ = 0;
    v83[1].__vftable = v82;
  }
  else
  {
    v83 = 0;
  }
  v150 = v83;
  v164 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v81 + 184))(v81, &v149);
  v84 = v150;
  if (v150)
  {
    p_shared_owners = (unint64_t *)&v150->__shared_owners_;
    do
      v86 = __ldaxr(p_shared_owners);
    while (__stlxr(v86 - 1, p_shared_owners));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = *a4;
  v180[0] = &off_1EA99FBD8;
  v180[1] = MIL::Operators::Common::ios18::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput;
  v181 = v180;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v87 + 200))(v87, v180);
  v88 = v181;
  if (v181 == v180)
  {
    v89 = 4;
    v88 = v180;
  }
  else
  {
    if (!v181)
      goto LABEL_105;
    v89 = 5;
  }
  (*(void (**)(void))(*v88 + 8 * v89))();
LABEL_105:
  MIL::Validation::TensorDTypeConstraints::Make(&v169);
  v90 = v169;
  std::string::basic_string[abi:ne180100]<0>(v145, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v145, 0, (uint64_t *)&Scalar);
  v147 = Scalar;
  if (Scalar)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = Scalar;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v148 = v91;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v143, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v90 + 3))(v90, &v147, v143);
  if (v144 < 0)
    operator delete(v143[0]);
  v93 = v148;
  if (v148)
  {
    v94 = (unint64_t *)&v148->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = Scalar;
  Scalar = 0;
  if (v96)
    (*((void (**)(std::__shared_weak_count_vtbl *))v96->~__shared_weak_count + 1))(v96);
  if (v146 < 0)
    operator delete(v145[0]);
  v97 = v169;
  std::string::basic_string[abi:ne180100]<0>(v139, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v139, 0, (uint64_t *)&Scalar);
  v141 = Scalar;
  if (Scalar)
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = Scalar;
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = v99;
  }
  else
  {
    v98 = 0;
  }
  v142 = v98;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v137, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v97 + 3))(v97, &v141, v137);
  if (v138 < 0)
    operator delete(v137[0]);
  v100 = v142;
  if (v142)
  {
    v101 = (unint64_t *)&v142->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = Scalar;
  Scalar = 0;
  if (v103)
    (*((void (**)(std::__shared_weak_count_vtbl *))v103->~__shared_weak_count + 1))(v103);
  if (v140 < 0)
    operator delete(v139[0]);
  v104 = *a4;
  v135 = v169;
  if (v169)
  {
    v105 = (std::__shared_weak_count *)operator new();
    v106 = v169;
    v105->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v105->__shared_owners_ = 0;
    v105->__shared_weak_owners_ = 0;
    v105[1].__vftable = (std::__shared_weak_count_vtbl *)v106;
  }
  else
  {
    v105 = 0;
  }
  v136 = v105;
  v169 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v104 + 56))(v104, &v135);
  v107 = v136;
  if (v136)
  {
    v108 = (unint64_t *)&v136->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = v169;
  v169 = 0;
  if (v110)
    (*((void (**)(void **))*v110 + 1))(v110);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v111 = __p;
  std::string::basic_string[abi:ne180100]<0>(v131, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v131, 1, v186);
  v133 = v186[0];
  if (v186[0])
  {
    v112 = (std::__shared_weak_count *)operator new();
    v113 = v186[0];
    v112->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v112->__shared_owners_ = 0;
    v112->__shared_weak_owners_ = 0;
    v112[1].__vftable = (std::__shared_weak_count_vtbl *)v113;
  }
  else
  {
    v112 = 0;
  }
  v134 = v112;
  v186[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v169, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v172, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v173, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v174, "int32");
  std::string::basic_string[abi:ne180100]<0>(v175, "int8");
  std::string::basic_string[abi:ne180100]<0>(v176, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v169, 6);
  (*(void (**)(void *, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v111 + 24))(v111, &v133, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v176[i + 2]) < 0)
      operator delete((void *)v176[i]);
  }
  v115 = v134;
  if (v134)
  {
    v116 = (unint64_t *)&v134->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = v186[0];
  v186[0] = 0;
  if (v118)
    (*(void (**)(uint64_t))(*(_QWORD *)v118 + 8))(v118);
  if (v132 < 0)
    operator delete(v131[0]);
  v119 = *a4;
  v129 = __p;
  if (__p)
  {
    v120 = (std::__shared_weak_count *)operator new();
    v121 = (std::__shared_weak_count_vtbl *)__p;
    v120->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v120->__shared_owners_ = 0;
    v120->__shared_weak_owners_ = 0;
    v120[1].__vftable = v121;
  }
  else
  {
    v120 = 0;
  }
  v130 = v120;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v119 + 56))(v119, &v129);
  v122 = v130;
  if (v130)
  {
    v123 = (unint64_t *)&v130->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v125 = __p;
  __p = 0;
  if (v125)
    (*(void (**)(void *))(*(_QWORD *)v125 + 8))(v125);
  if (v164)
  {
    v126 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v164);
    MEMORY[0x1E0C023A0](v126, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v161, 0);
  result = (uint64_t)v168;
  if (v168)
  {
    v128 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v168);
    return MEMORY[0x1E0C023A0](v128, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09807C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  uint64_t *v61;
  uint64_t v63;

  if (a50)
    (*(void (**)(void *))(*(_QWORD *)a50 + 8))(a50);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a56, 0);
  v63 = *v61;
  *v61 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a53, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a61, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::ElementwiseBinaryLogical::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  std::__shared_weak_count_vtbl *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count_vtbl *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  char **v23;
  uint64_t v24;
  std::__shared_weak_count_vtbl *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t *v38;
  char *v39;
  char *v40;
  char *v41;
  __int128 v42;
  char *v43;
  char *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  char **v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  unsigned __int8 *v64;
  void *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  std::__shared_weak_count *v72;
  unint64_t *p_shared_owners;
  unint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  void *v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count_vtbl *v84;
  void *v85;
  std::__shared_weak_count *v86;
  std::__shared_weak_count_vtbl *v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count_vtbl *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  std::__shared_weak_count_vtbl *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  uint64_t v101;
  uint64_t i;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t result;
  uint64_t v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  void *v119[2];
  char v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  void *v123;
  std::__shared_weak_count *v124;
  void *v125[2];
  char v126;
  void *v127[2];
  char v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  void *v131[2];
  char v132;
  void *v133[2];
  char v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  __n128 v139;
  __int128 v140;
  __int128 v141;
  void *v142[2];
  uint64_t v143;
  __n128 v144;
  uint64_t v145;
  char **v146;
  __n128 v147;
  __n128 v148;
  _QWORD *v149;
  void *__p;
  void *v151;
  char *v152;
  _QWORD v153[3];
  uint64_t v154[3];
  uint64_t v155[3];
  uint64_t v156[3];
  _QWORD v157[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *v159;
  void (__cdecl **v160)(std::__shared_weak_count *__hidden);
  _QWORD v161[3];
  _QWORD *v162;
  _BYTE v163[24];
  _BYTE *v164;
  _BYTE v165[24];
  _BYTE *v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;

  v170 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v149 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v151 = v10 + 1;
  v152 = (char *)(v10 + 1);
  v168 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v168, 1, &v148);
  MIL::IRParameter::Make(&v148, (uint64_t *)&Scalar);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", (uint64_t *)&Scalar);
  v11 = Scalar;
  Scalar = 0;
  if (v11)
    (*((void (**)(std::__shared_weak_count_vtbl *))v11->~__shared_weak_count + 1))(v11);
  v12 = (std::__shared_weak_count *)v148.n128_u64[1];
  if (v148.n128_u64[1])
  {
    v13 = (unint64_t *)(v148.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v151 = __p;
    operator delete(__p);
  }
  v15 = v149;
  v16 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v17 = operator new(8uLL);
  __p = v17;
  *v17 = v16;
  v151 = v17 + 1;
  v152 = (char *)(v17 + 1);
  v168 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v168, 1, &v147);
  MIL::IRParameter::Make(&v147, (uint64_t *)&Scalar);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v15, "y", (uint64_t *)&Scalar);
  v18 = Scalar;
  Scalar = 0;
  if (v18)
    (*((void (**)(std::__shared_weak_count_vtbl *))v18->~__shared_weak_count + 1))(v18);
  v19 = (std::__shared_weak_count *)v147.n128_u64[1];
  if (v147.n128_u64[1])
  {
    v20 = (unint64_t *)(v147.n128_u64[1] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (__p)
  {
    v151 = __p;
    operator delete(__p);
  }
  v146 = 0;
  v22 = operator new();
  *(_QWORD *)v22 = 0;
  *(_QWORD *)(v22 + 8) = 0;
  *(_QWORD *)(v22 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v146, (void **)v22);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v146, 1uLL);
  v23 = v146;
  v24 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v25 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v25;
  v25->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v24;
  v159 = (std::__shared_weak_count_vtbl *)&v25->~__shared_weak_count_0;
  v160 = &v25->~__shared_weak_count_0;
  v167 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v167, 1, &v144);
  MIL::IRParameter::Make(&v144, &v145);
  v26 = v145;
  v168 = v145;
  if (v145)
  {
    v27 = (_QWORD *)operator new();
    v28 = v145;
    *v27 = &unk_1EA99F888;
    v27[1] = 0;
    v27[2] = 0;
    v27[3] = v28;
  }
  else
  {
    v27 = 0;
  }
  v169 = v27;
  v145 = 0;
  v29 = v23[2];
  v30 = v23[1];
  if (v30 >= v29)
  {
    v32 = (v30 - *v23) >> 4;
    v33 = v32 + 1;
    if ((unint64_t)(v32 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v34 = v29 - *v23;
    if (v34 >> 3 > v33)
      v33 = v34 >> 3;
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
      v35 = 0xFFFFFFFFFFFFFFFLL;
    else
      v35 = v33;
    v153[1] = v23 + 2;
    v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v23 + 2), v35);
    v38 = (uint64_t *)&v36[16 * v32];
    *v38 = v26;
    v38[1] = (uint64_t)v27;
    v168 = 0;
    v169 = 0;
    v40 = *v23;
    v39 = v23[1];
    if (v39 == *v23)
    {
      v43 = v23[1];
      v41 = &v36[16 * v32];
    }
    else
    {
      v41 = &v36[16 * v32];
      do
      {
        v42 = *((_OWORD *)v39 - 1);
        v39 -= 16;
        *((_OWORD *)v41 - 1) = v42;
        v41 -= 16;
        *(_QWORD *)v39 = 0;
        *((_QWORD *)v39 + 1) = 0;
      }
      while (v39 != v40);
      v43 = *v23;
      v39 = v23[1];
    }
    v31 = (char *)(v38 + 2);
    *v23 = v41;
    __p = v43;
    v151 = v43;
    v23[1] = (char *)(v38 + 2);
    v152 = v39;
    v44 = v23[2];
    v23[2] = &v36[16 * v37];
    v153[0] = v44;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v30 = v26;
    *((_QWORD *)v30 + 1) = v27;
    v31 = v30 + 16;
    v168 = 0;
    v169 = 0;
  }
  v23[1] = v31;
  v45 = v145;
  v145 = 0;
  if (v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  v46 = (std::__shared_weak_count *)v144.n128_u64[1];
  if (v144.n128_u64[1])
  {
    v47 = (unint64_t *)(v144.n128_u64[1] + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  if (Scalar)
  {
    v159 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v142 = *(_OWORD *)a2;
  v143 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v49 = (uint64_t)v149;
  *(_QWORD *)&v141 = v149;
  if (v149)
  {
    v50 = (_QWORD *)operator new();
    *v50 = &unk_1EA99F8E8;
    v50[1] = 0;
    v50[2] = 0;
    v50[3] = v49;
  }
  else
  {
    v50 = 0;
  }
  *((_QWORD *)&v141 + 1) = v50;
  v149 = 0;
  *(_QWORD *)&v140 = v146;
  if (v146)
  {
    v51 = (_QWORD *)operator new();
    v52 = v146;
    *v51 = &unk_1EA99F948;
    v51[1] = 0;
    v51[2] = 0;
    v51[3] = v52;
  }
  else
  {
    v51 = 0;
  }
  *((_QWORD *)&v140 + 1) = v51;
  v146 = 0;
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v165, a3);
  v164 = 0;
  MIL::IROperator::Make((__int128 *)v142, &v141, &v140, (uint64_t)v165, (uint64_t)v163, a4);
  v53 = v164;
  if (v164 == v163)
  {
    v54 = 4;
    v53 = v163;
  }
  else
  {
    if (!v164)
      goto LABEL_56;
    v54 = 5;
  }
  (*(void (**)(void))(*v53 + 8 * v54))();
LABEL_56:
  v55 = v166;
  if (v166 == v165)
  {
    v56 = 4;
    v55 = v165;
    goto LABEL_60;
  }
  if (v166)
  {
    v56 = 5;
LABEL_60:
    (*(void (**)(void))(*v55 + 8 * v56))();
  }
  v57 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
  if (*((_QWORD *)&v140 + 1))
  {
    v58 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v60 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
  if (*((_QWORD *)&v141 + 1))
  {
    v61 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  if (SHIBYTE(v143) < 0)
    operator delete(v142[0]);
  v168 = 0;
  v63 = operator new();
  *(_OWORD *)v63 = 0u;
  *(_OWORD *)(v63 + 16) = 0u;
  *(_DWORD *)(v63 + 32) = 1065353216;
  v168 = v63;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v139);
  MIL::IRParameter::Make(&v139, (uint64_t *)&__p);
  v64 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v63, "minimum_compute_type", (uint64_t *)&__p);
  v65 = __p;
  __p = 0;
  if (v65)
    (*(void (**)(void *))(*(_QWORD *)v65 + 8))(v65);
  v66 = (std::__shared_weak_count *)v139.n128_u64[1];
  if (v139.n128_u64[1])
  {
    v67 = (unint64_t *)(v139.n128_u64[1] + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v64 + 5) + 32))(*((_QWORD *)v64 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v64 + 5) + 48))(*((_QWORD *)v64 + 5), 1);
  v69 = *a4;
  v70 = v168;
  v137 = v168;
  if (v168)
  {
    v71 = (std::__shared_weak_count *)operator new();
    v71->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v71->__shared_owners_ = 0;
    v71->__shared_weak_owners_ = 0;
    v71[1].__vftable = (std::__shared_weak_count_vtbl *)v70;
  }
  else
  {
    v71 = 0;
  }
  v138 = v71;
  v168 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v69 + 184))(v69, &v137);
  v72 = v138;
  if (v138)
  {
    p_shared_owners = (unint64_t *)&v138->__shared_owners_;
    do
      v74 = __ldaxr(p_shared_owners);
    while (__stlxr(v74 - 1, p_shared_owners));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = *a4;
  v161[0] = &off_1EA99FBD8;
  v161[1] = MIL::Operators::Common::ios18::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput;
  v162 = v161;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v75 + 200))(v75, v161);
  v76 = v162;
  if (v162 == v161)
  {
    v77 = 4;
    v76 = v161;
  }
  else
  {
    if (!v162)
      goto LABEL_93;
    v77 = 5;
  }
  (*(void (**)(void))(*v76 + 8 * v77))();
LABEL_93:
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v78 = __p;
  std::string::basic_string[abi:ne180100]<0>(v133, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v133, 0, (uint64_t *)&Scalar);
  v135 = Scalar;
  if (Scalar)
  {
    v79 = (std::__shared_weak_count *)operator new();
    v80 = Scalar;
    v79->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v79->__shared_owners_ = 0;
    v79->__shared_weak_owners_ = 0;
    v79[1].__vftable = v80;
  }
  else
  {
    v79 = 0;
  }
  v136 = v79;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v131, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v78 + 24))(v78, &v135, v131);
  if (v132 < 0)
    operator delete(v131[0]);
  v81 = v136;
  if (v136)
  {
    v82 = (unint64_t *)&v136->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = Scalar;
  Scalar = 0;
  if (v84)
    (*((void (**)(std::__shared_weak_count_vtbl *))v84->~__shared_weak_count + 1))(v84);
  if (v134 < 0)
    operator delete(v133[0]);
  v85 = __p;
  std::string::basic_string[abi:ne180100]<0>(v127, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v127, 0, (uint64_t *)&Scalar);
  v129 = Scalar;
  if (Scalar)
  {
    v86 = (std::__shared_weak_count *)operator new();
    v87 = Scalar;
    v86->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v86->__shared_owners_ = 0;
    v86->__shared_weak_owners_ = 0;
    v86[1].__vftable = v87;
  }
  else
  {
    v86 = 0;
  }
  v130 = v86;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v125, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v85 + 24))(v85, &v129, v125);
  if (v126 < 0)
    operator delete(v125[0]);
  v88 = v130;
  if (v130)
  {
    v89 = (unint64_t *)&v130->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = Scalar;
  Scalar = 0;
  if (v91)
    (*((void (**)(std::__shared_weak_count_vtbl *))v91->~__shared_weak_count + 1))(v91);
  if (v128 < 0)
    operator delete(v127[0]);
  v92 = *a4;
  v123 = __p;
  if (__p)
  {
    v93 = (std::__shared_weak_count *)operator new();
    v94 = (std::__shared_weak_count_vtbl *)__p;
    v93->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v93->__shared_owners_ = 0;
    v93->__shared_weak_owners_ = 0;
    v93[1].__vftable = v94;
  }
  else
  {
    v93 = 0;
  }
  v124 = v93;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v92 + 56))(v92, &v123);
  v95 = v124;
  if (v124)
  {
    v96 = (unint64_t *)&v124->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = __p;
  __p = 0;
  if (v98)
    (*(void (**)(void *))(*(_QWORD *)v98 + 8))(v98);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v145);
  v99 = v145;
  std::string::basic_string[abi:ne180100]<0>(v119, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v119, 1, &v167);
  v121 = v167;
  if (v167)
  {
    v100 = (std::__shared_weak_count *)operator new();
    v101 = v167;
    v100->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v100->__shared_owners_ = 0;
    v100->__shared_weak_owners_ = 0;
    v100[1].__vftable = (std::__shared_weak_count_vtbl *)v101;
  }
  else
  {
    v100 = 0;
  }
  v122 = v100;
  v167 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v153, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v154, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v155, "int32");
  std::string::basic_string[abi:ne180100]<0>(v156, "int8");
  std::string::basic_string[abi:ne180100]<0>(v157, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 6);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v99 + 24))(v99, &v121, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v157[i + 2]) < 0)
      operator delete((void *)v157[i]);
  }
  v103 = v122;
  if (v122)
  {
    v104 = (unint64_t *)&v122->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v106 = v167;
  v167 = 0;
  if (v106)
    (*(void (**)(uint64_t))(*(_QWORD *)v106 + 8))(v106);
  if (v120 < 0)
    operator delete(v119[0]);
  v107 = *a4;
  v117 = v145;
  if (v145)
  {
    v108 = (std::__shared_weak_count *)operator new();
    v109 = v145;
    v108->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v108->__shared_owners_ = 0;
    v108->__shared_weak_owners_ = 0;
    v108[1].__vftable = (std::__shared_weak_count_vtbl *)v109;
  }
  else
  {
    v108 = 0;
  }
  v118 = v108;
  v145 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v107 + 56))(v107, &v117);
  v110 = v118;
  if (v118)
  {
    v111 = (unint64_t *)&v118->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  v113 = v145;
  v145 = 0;
  if (v113)
    (*(void (**)(uint64_t))(*(_QWORD *)v113 + 8))(v113);
  if (v168)
  {
    v114 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v168);
    MEMORY[0x1E0C023A0](v114, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v146, 0);
  result = (uint64_t)v149;
  if (v149)
  {
    v116 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v149);
    return MEMORY[0x1E0C023A0](v116, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09819C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void **a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  uint64_t *v55;
  uint64_t v56;
  uint64_t v58;

  if (a49)
    (*(void (**)(uint64_t))(*(_QWORD *)a49 + 8))(a49);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v56 - 104), 0);
  v58 = *v55;
  *v55 = 0;
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a55, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::LogicalAnd::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t *v36;
  char *v37;
  char *v38;
  char *v39;
  __int128 v40;
  char *v41;
  char *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  char **v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  unsigned __int8 *v62;
  void *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  std::__shared_weak_count *v70;
  unint64_t *p_shared_owners;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  void *v79;
  std::__shared_weak_count *v80;
  std::__shared_weak_count_vtbl *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  void *v85;
  void *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count_vtbl *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count_vtbl *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  uint64_t v102;
  uint64_t i;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t result;
  uint64_t v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  void *v120[2];
  char v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  void *v124;
  std::__shared_weak_count *v125;
  void *v126[2];
  char v127;
  void *v128[2];
  char v129;
  void *v130;
  std::__shared_weak_count *v131;
  void *v132[2];
  char v133;
  void *v134[2];
  char v135;
  void *v136;
  std::__shared_weak_count *v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  __n128 v140;
  __int128 v141;
  __int128 v142;
  void *v143[2];
  uint64_t v144;
  __n128 v145;
  uint64_t v146;
  char **v147;
  __n128 v148;
  __n128 v149;
  _QWORD *v150;
  void *__p;
  void *v152;
  char *v153;
  _QWORD v154[3];
  uint64_t v155[3];
  uint64_t v156[3];
  uint64_t v157[3];
  void *v158[3];
  void *Scalar;
  void *v160;
  _QWORD *v161;
  _QWORD v162[3];
  _QWORD *v163;
  _QWORD v164[3];
  _QWORD *v165;
  _BYTE v166[24];
  _BYTE *v167;
  _QWORD v168[3];
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;

  v173 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v150 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  __p = v8;
  *v8 = v7;
  v152 = v8 + 1;
  v153 = (char *)(v8 + 1);
  v171 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v171, 1, &v149);
  MIL::IRParameter::Make(&v149, (uint64_t *)&Scalar);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&Scalar);
  v9 = Scalar;
  Scalar = 0;
  if (v9)
    (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
  v10 = (std::__shared_weak_count *)v149.n128_u64[1];
  if (v149.n128_u64[1])
  {
    v11 = (unint64_t *)(v149.n128_u64[1] + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v152 = __p;
    operator delete(__p);
  }
  v13 = v150;
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(8uLL);
  __p = v15;
  *v15 = v14;
  v152 = v15 + 1;
  v153 = (char *)(v15 + 1);
  v171 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v171, 1, &v148);
  MIL::IRParameter::Make(&v148, (uint64_t *)&Scalar);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v13, "y", (uint64_t *)&Scalar);
  v16 = Scalar;
  Scalar = 0;
  if (v16)
    (*(void (**)(void *))(*(_QWORD *)v16 + 8))(v16);
  v17 = (std::__shared_weak_count *)v148.n128_u64[1];
  if (v148.n128_u64[1])
  {
    v18 = (unint64_t *)(v148.n128_u64[1] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v152 = __p;
    operator delete(__p);
  }
  v147 = 0;
  v20 = operator new();
  *(_QWORD *)v20 = 0;
  *(_QWORD *)(v20 + 8) = 0;
  *(_QWORD *)(v20 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, (void **)v20);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v147, 1uLL);
  v21 = v147;
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  Scalar = v23;
  *v23 = v22;
  v161 = v23 + 1;
  v160 = v23 + 1;
  v170 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v170, 1, &v145);
  MIL::IRParameter::Make(&v145, &v146);
  v24 = v146;
  v171 = v146;
  if (v146)
  {
    v25 = (_QWORD *)operator new();
    v26 = v146;
    *v25 = &unk_1EA99F888;
    v25[1] = 0;
    v25[2] = 0;
    v25[3] = v26;
  }
  else
  {
    v25 = 0;
  }
  v172 = v25;
  v146 = 0;
  v27 = v21[2];
  v28 = v21[1];
  if (v28 >= v27)
  {
    v30 = (v28 - *v21) >> 4;
    v31 = v30 + 1;
    if ((unint64_t)(v30 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v32 = v27 - *v21;
    if (v32 >> 3 > v31)
      v31 = v32 >> 3;
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0)
      v33 = 0xFFFFFFFFFFFFFFFLL;
    else
      v33 = v31;
    v154[1] = v21 + 2;
    v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v21 + 2), v33);
    v36 = (uint64_t *)&v34[16 * v30];
    *v36 = v24;
    v36[1] = (uint64_t)v25;
    v171 = 0;
    v172 = 0;
    v38 = *v21;
    v37 = v21[1];
    if (v37 == *v21)
    {
      v41 = v21[1];
      v39 = &v34[16 * v30];
    }
    else
    {
      v39 = &v34[16 * v30];
      do
      {
        v40 = *((_OWORD *)v37 - 1);
        v37 -= 16;
        *((_OWORD *)v39 - 1) = v40;
        v39 -= 16;
        *(_QWORD *)v37 = 0;
        *((_QWORD *)v37 + 1) = 0;
      }
      while (v37 != v38);
      v41 = *v21;
      v37 = v21[1];
    }
    v29 = (char *)(v36 + 2);
    *v21 = v39;
    __p = v41;
    v152 = v41;
    v21[1] = (char *)(v36 + 2);
    v153 = v37;
    v42 = v21[2];
    v21[2] = &v34[16 * v35];
    v154[0] = v42;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v28 = v24;
    *((_QWORD *)v28 + 1) = v25;
    v29 = v28 + 16;
    v171 = 0;
    v172 = 0;
  }
  v21[1] = v29;
  v43 = v146;
  v146 = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v44 = (std::__shared_weak_count *)v145.n128_u64[1];
  if (v145.n128_u64[1])
  {
    v45 = (unint64_t *)(v145.n128_u64[1] + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (Scalar)
  {
    v160 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v143 = *(_OWORD *)a2;
  v144 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v47 = (uint64_t)v150;
  *(_QWORD *)&v142 = v150;
  if (v150)
  {
    v48 = (_QWORD *)operator new();
    *v48 = &unk_1EA99F8E8;
    v48[1] = 0;
    v48[2] = 0;
    v48[3] = v47;
  }
  else
  {
    v48 = 0;
  }
  *((_QWORD *)&v142 + 1) = v48;
  v150 = 0;
  *(_QWORD *)&v141 = v147;
  if (v147)
  {
    v49 = (_QWORD *)operator new();
    v50 = v147;
    *v49 = &unk_1EA99F948;
    v49[1] = 0;
    v49[2] = 0;
    v49[3] = v50;
  }
  else
  {
    v49 = 0;
  }
  *((_QWORD *)&v141 + 1) = v49;
  v147 = 0;
  v168[0] = &unk_1EA99FAC8;
  v168[1] = MIL::Validation::ValidateViaTypeInference;
  v169 = v168;
  v167 = 0;
  MIL::IROperator::Make((__int128 *)v143, &v142, &v141, (uint64_t)v168, (uint64_t)v166, a3);
  v51 = v167;
  if (v167 == v166)
  {
    v52 = 4;
    v51 = v166;
  }
  else
  {
    if (!v167)
      goto LABEL_56;
    v52 = 5;
  }
  (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_56:
  v53 = v169;
  if (v169 == v168)
  {
    v54 = 4;
    v53 = v168;
    goto LABEL_60;
  }
  if (v169)
  {
    v54 = 5;
LABEL_60:
    (*(void (**)(void))(*v53 + 8 * v54))();
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
  if (*((_QWORD *)&v141 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
  if (*((_QWORD *)&v142 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v142 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  if (SHIBYTE(v144) < 0)
    operator delete(v143[0]);
  v171 = 0;
  v61 = operator new();
  *(_OWORD *)v61 = 0u;
  *(_OWORD *)(v61 + 16) = 0u;
  *(_DWORD *)(v61 + 32) = 1065353216;
  v171 = v61;
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v140);
  MIL::IRParameter::Make(&v140, (uint64_t *)&__p);
  v62 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v61, "minimum_compute_type", (uint64_t *)&__p);
  v63 = __p;
  __p = 0;
  if (v63)
    (*(void (**)(void *))(*(_QWORD *)v63 + 8))(v63);
  v64 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v65 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v62 + 5) + 32))(*((_QWORD *)v62 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v62 + 5) + 48))(*((_QWORD *)v62 + 5), 1);
  v67 = *a3;
  v68 = v171;
  v138 = v171;
  if (v171)
  {
    v69 = (std::__shared_weak_count *)operator new();
    v69->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v69->__shared_owners_ = 0;
    v69->__shared_weak_owners_ = 0;
    v69[1].__vftable = (std::__shared_weak_count_vtbl *)v68;
  }
  else
  {
    v69 = 0;
  }
  v139 = v69;
  v171 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v67 + 184))(v67, &v138);
  v70 = v139;
  if (v139)
  {
    p_shared_owners = (unint64_t *)&v139->__shared_owners_;
    do
      v72 = __ldaxr(p_shared_owners);
    while (__stlxr(v72 - 1, p_shared_owners));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = *a3;
  v164[0] = &off_1EA99FBD8;
  v164[1] = MIL::Operators::Common::ios18::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput;
  v165 = v164;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v73 + 200))(v73, v164);
  v74 = v165;
  if (v165 == v164)
  {
    v75 = 4;
    v74 = v164;
  }
  else
  {
    if (!v165)
      goto LABEL_93;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_93:
  v76 = *a3;
  v162[0] = &off_1EA9A00F8;
  v162[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceLogicalAnd;
  v163 = v162;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v76 + 216))(v76, v162);
  v77 = v163;
  if (v163 == v162)
  {
    v78 = 4;
    v77 = v162;
  }
  else
  {
    if (!v163)
      goto LABEL_98;
    v78 = 5;
  }
  (*(void (**)(void))(*v77 + 8 * v78))();
LABEL_98:
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v79 = __p;
  std::string::basic_string[abi:ne180100]<0>(v134, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v134, 0, (uint64_t *)&Scalar);
  v136 = Scalar;
  if (Scalar)
  {
    v80 = (std::__shared_weak_count *)operator new();
    v81 = (std::__shared_weak_count_vtbl *)Scalar;
    v80->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v80->__shared_owners_ = 0;
    v80->__shared_weak_owners_ = 0;
    v80[1].__vftable = v81;
  }
  else
  {
    v80 = 0;
  }
  v137 = v80;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v132, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v79 + 24))(v79, &v136, v132);
  if (v133 < 0)
    operator delete(v132[0]);
  v82 = v137;
  if (v137)
  {
    v83 = (unint64_t *)&v137->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = Scalar;
  Scalar = 0;
  if (v85)
    (*(void (**)(void *))(*(_QWORD *)v85 + 8))(v85);
  if (v135 < 0)
    operator delete(v134[0]);
  v86 = __p;
  std::string::basic_string[abi:ne180100]<0>(v128, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v128, 0, (uint64_t *)&Scalar);
  v130 = Scalar;
  if (Scalar)
  {
    v87 = (std::__shared_weak_count *)operator new();
    v88 = (std::__shared_weak_count_vtbl *)Scalar;
    v87->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v87->__shared_owners_ = 0;
    v87->__shared_weak_owners_ = 0;
    v87[1].__vftable = v88;
  }
  else
  {
    v87 = 0;
  }
  v131 = v87;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v126, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v86 + 24))(v86, &v130, v126);
  if (v127 < 0)
    operator delete(v126[0]);
  v89 = v131;
  if (v131)
  {
    v90 = (unint64_t *)&v131->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = Scalar;
  Scalar = 0;
  if (v92)
    (*(void (**)(void *))(*(_QWORD *)v92 + 8))(v92);
  if (v129 < 0)
    operator delete(v128[0]);
  v93 = *a3;
  v124 = __p;
  if (__p)
  {
    v94 = (std::__shared_weak_count *)operator new();
    v95 = (std::__shared_weak_count_vtbl *)__p;
    v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v94->__shared_owners_ = 0;
    v94->__shared_weak_owners_ = 0;
    v94[1].__vftable = v95;
  }
  else
  {
    v94 = 0;
  }
  v125 = v94;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v93 + 56))(v93, &v124);
  v96 = v125;
  if (v125)
  {
    v97 = (unint64_t *)&v125->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = __p;
  __p = 0;
  if (v99)
    (*(void (**)(void *))(*(_QWORD *)v99 + 8))(v99);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v146);
  v100 = v146;
  std::string::basic_string[abi:ne180100]<0>(v120, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v120, 1, &v170);
  v122 = v170;
  if (v170)
  {
    v101 = (std::__shared_weak_count *)operator new();
    v102 = v170;
    v101->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v101->__shared_owners_ = 0;
    v101->__shared_weak_owners_ = 0;
    v101[1].__vftable = (std::__shared_weak_count_vtbl *)v102;
  }
  else
  {
    v101 = 0;
  }
  v123 = v101;
  v170 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v154, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v155, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v156, "int32");
  std::string::basic_string[abi:ne180100]<0>(v157, "int8");
  std::string::basic_string[abi:ne180100]<0>(v158, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 6);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v100 + 24))(v100, &v122, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v158[i + 2]) < 0)
      operator delete(v158[i]);
  }
  v104 = v123;
  if (v123)
  {
    v105 = (unint64_t *)&v123->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = v170;
  v170 = 0;
  if (v107)
    (*(void (**)(uint64_t))(*(_QWORD *)v107 + 8))(v107);
  if (v121 < 0)
    operator delete(v120[0]);
  v108 = *a3;
  v118 = v146;
  if (v146)
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = v146;
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = (std::__shared_weak_count_vtbl *)v110;
  }
  else
  {
    v109 = 0;
  }
  v119 = v109;
  v146 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v108 + 56))(v108, &v118);
  v111 = v119;
  if (v119)
  {
    v112 = (unint64_t *)&v119->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = v146;
  v146 = 0;
  if (v114)
    (*(void (**)(uint64_t))(*(_QWORD *)v114 + 8))(v114);
  if (v171)
  {
    v115 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v171);
    MEMORY[0x1E0C023A0](v115, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, 0);
  result = (uint64_t)v150;
  if (v150)
  {
    v117 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v150);
    return MEMORY[0x1E0C023A0](v117, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0982BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void **a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  uint64_t *v55;
  uint64_t v56;
  uint64_t v58;

  if (a49)
    (*(void (**)(uint64_t))(*(_QWORD *)a49 + 8))(a49);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v56 - 88), 0);
  v58 = *v55;
  *v55 = 0;
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a55, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::LogicalOr::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t *v36;
  char *v37;
  char *v38;
  char *v39;
  __int128 v40;
  char *v41;
  char *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  char **v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  unsigned __int8 *v62;
  void *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  std::__shared_weak_count *v70;
  unint64_t *p_shared_owners;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  void *v79;
  std::__shared_weak_count *v80;
  std::__shared_weak_count_vtbl *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  void *v85;
  void *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count_vtbl *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count_vtbl *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  uint64_t v102;
  uint64_t i;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t result;
  uint64_t v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  void *v120[2];
  char v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  void *v124;
  std::__shared_weak_count *v125;
  void *v126[2];
  char v127;
  void *v128[2];
  char v129;
  void *v130;
  std::__shared_weak_count *v131;
  void *v132[2];
  char v133;
  void *v134[2];
  char v135;
  void *v136;
  std::__shared_weak_count *v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  __n128 v140;
  __int128 v141;
  __int128 v142;
  void *v143[2];
  uint64_t v144;
  __n128 v145;
  uint64_t v146;
  char **v147;
  __n128 v148;
  __n128 v149;
  _QWORD *v150;
  void *__p;
  void *v152;
  char *v153;
  _QWORD v154[3];
  uint64_t v155[3];
  uint64_t v156[3];
  uint64_t v157[3];
  void *v158[3];
  void *Scalar;
  void *v160;
  _QWORD *v161;
  _QWORD v162[3];
  _QWORD *v163;
  _QWORD v164[3];
  _QWORD *v165;
  _BYTE v166[24];
  _BYTE *v167;
  _QWORD v168[3];
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;

  v173 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v150 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  __p = v8;
  *v8 = v7;
  v152 = v8 + 1;
  v153 = (char *)(v8 + 1);
  v171 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v171, 1, &v149);
  MIL::IRParameter::Make(&v149, (uint64_t *)&Scalar);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&Scalar);
  v9 = Scalar;
  Scalar = 0;
  if (v9)
    (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
  v10 = (std::__shared_weak_count *)v149.n128_u64[1];
  if (v149.n128_u64[1])
  {
    v11 = (unint64_t *)(v149.n128_u64[1] + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v152 = __p;
    operator delete(__p);
  }
  v13 = v150;
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(8uLL);
  __p = v15;
  *v15 = v14;
  v152 = v15 + 1;
  v153 = (char *)(v15 + 1);
  v171 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v171, 1, &v148);
  MIL::IRParameter::Make(&v148, (uint64_t *)&Scalar);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v13, "y", (uint64_t *)&Scalar);
  v16 = Scalar;
  Scalar = 0;
  if (v16)
    (*(void (**)(void *))(*(_QWORD *)v16 + 8))(v16);
  v17 = (std::__shared_weak_count *)v148.n128_u64[1];
  if (v148.n128_u64[1])
  {
    v18 = (unint64_t *)(v148.n128_u64[1] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v152 = __p;
    operator delete(__p);
  }
  v147 = 0;
  v20 = operator new();
  *(_QWORD *)v20 = 0;
  *(_QWORD *)(v20 + 8) = 0;
  *(_QWORD *)(v20 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, (void **)v20);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v147, 1uLL);
  v21 = v147;
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  Scalar = v23;
  *v23 = v22;
  v161 = v23 + 1;
  v160 = v23 + 1;
  v170 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v170, 1, &v145);
  MIL::IRParameter::Make(&v145, &v146);
  v24 = v146;
  v171 = v146;
  if (v146)
  {
    v25 = (_QWORD *)operator new();
    v26 = v146;
    *v25 = &unk_1EA99F888;
    v25[1] = 0;
    v25[2] = 0;
    v25[3] = v26;
  }
  else
  {
    v25 = 0;
  }
  v172 = v25;
  v146 = 0;
  v27 = v21[2];
  v28 = v21[1];
  if (v28 >= v27)
  {
    v30 = (v28 - *v21) >> 4;
    v31 = v30 + 1;
    if ((unint64_t)(v30 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v32 = v27 - *v21;
    if (v32 >> 3 > v31)
      v31 = v32 >> 3;
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0)
      v33 = 0xFFFFFFFFFFFFFFFLL;
    else
      v33 = v31;
    v154[1] = v21 + 2;
    v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v21 + 2), v33);
    v36 = (uint64_t *)&v34[16 * v30];
    *v36 = v24;
    v36[1] = (uint64_t)v25;
    v171 = 0;
    v172 = 0;
    v38 = *v21;
    v37 = v21[1];
    if (v37 == *v21)
    {
      v41 = v21[1];
      v39 = &v34[16 * v30];
    }
    else
    {
      v39 = &v34[16 * v30];
      do
      {
        v40 = *((_OWORD *)v37 - 1);
        v37 -= 16;
        *((_OWORD *)v39 - 1) = v40;
        v39 -= 16;
        *(_QWORD *)v37 = 0;
        *((_QWORD *)v37 + 1) = 0;
      }
      while (v37 != v38);
      v41 = *v21;
      v37 = v21[1];
    }
    v29 = (char *)(v36 + 2);
    *v21 = v39;
    __p = v41;
    v152 = v41;
    v21[1] = (char *)(v36 + 2);
    v153 = v37;
    v42 = v21[2];
    v21[2] = &v34[16 * v35];
    v154[0] = v42;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v28 = v24;
    *((_QWORD *)v28 + 1) = v25;
    v29 = v28 + 16;
    v171 = 0;
    v172 = 0;
  }
  v21[1] = v29;
  v43 = v146;
  v146 = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v44 = (std::__shared_weak_count *)v145.n128_u64[1];
  if (v145.n128_u64[1])
  {
    v45 = (unint64_t *)(v145.n128_u64[1] + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (Scalar)
  {
    v160 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v143 = *(_OWORD *)a2;
  v144 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v47 = (uint64_t)v150;
  *(_QWORD *)&v142 = v150;
  if (v150)
  {
    v48 = (_QWORD *)operator new();
    *v48 = &unk_1EA99F8E8;
    v48[1] = 0;
    v48[2] = 0;
    v48[3] = v47;
  }
  else
  {
    v48 = 0;
  }
  *((_QWORD *)&v142 + 1) = v48;
  v150 = 0;
  *(_QWORD *)&v141 = v147;
  if (v147)
  {
    v49 = (_QWORD *)operator new();
    v50 = v147;
    *v49 = &unk_1EA99F948;
    v49[1] = 0;
    v49[2] = 0;
    v49[3] = v50;
  }
  else
  {
    v49 = 0;
  }
  *((_QWORD *)&v141 + 1) = v49;
  v147 = 0;
  v168[0] = &unk_1EA99FAC8;
  v168[1] = MIL::Validation::ValidateViaTypeInference;
  v169 = v168;
  v167 = 0;
  MIL::IROperator::Make((__int128 *)v143, &v142, &v141, (uint64_t)v168, (uint64_t)v166, a3);
  v51 = v167;
  if (v167 == v166)
  {
    v52 = 4;
    v51 = v166;
  }
  else
  {
    if (!v167)
      goto LABEL_56;
    v52 = 5;
  }
  (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_56:
  v53 = v169;
  if (v169 == v168)
  {
    v54 = 4;
    v53 = v168;
    goto LABEL_60;
  }
  if (v169)
  {
    v54 = 5;
LABEL_60:
    (*(void (**)(void))(*v53 + 8 * v54))();
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
  if (*((_QWORD *)&v141 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
  if (*((_QWORD *)&v142 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v142 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  if (SHIBYTE(v144) < 0)
    operator delete(v143[0]);
  v171 = 0;
  v61 = operator new();
  *(_OWORD *)v61 = 0u;
  *(_OWORD *)(v61 + 16) = 0u;
  *(_DWORD *)(v61 + 32) = 1065353216;
  v171 = v61;
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v140);
  MIL::IRParameter::Make(&v140, (uint64_t *)&__p);
  v62 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v61, "minimum_compute_type", (uint64_t *)&__p);
  v63 = __p;
  __p = 0;
  if (v63)
    (*(void (**)(void *))(*(_QWORD *)v63 + 8))(v63);
  v64 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v65 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v62 + 5) + 32))(*((_QWORD *)v62 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v62 + 5) + 48))(*((_QWORD *)v62 + 5), 1);
  v67 = *a3;
  v68 = v171;
  v138 = v171;
  if (v171)
  {
    v69 = (std::__shared_weak_count *)operator new();
    v69->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v69->__shared_owners_ = 0;
    v69->__shared_weak_owners_ = 0;
    v69[1].__vftable = (std::__shared_weak_count_vtbl *)v68;
  }
  else
  {
    v69 = 0;
  }
  v139 = v69;
  v171 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v67 + 184))(v67, &v138);
  v70 = v139;
  if (v139)
  {
    p_shared_owners = (unint64_t *)&v139->__shared_owners_;
    do
      v72 = __ldaxr(p_shared_owners);
    while (__stlxr(v72 - 1, p_shared_owners));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = *a3;
  v164[0] = &off_1EA99FBD8;
  v164[1] = MIL::Operators::Common::ios18::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput;
  v165 = v164;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v73 + 200))(v73, v164);
  v74 = v165;
  if (v165 == v164)
  {
    v75 = 4;
    v74 = v164;
  }
  else
  {
    if (!v165)
      goto LABEL_93;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_93:
  v76 = *a3;
  v162[0] = &off_1EA9A00F8;
  v162[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceLogicalOr;
  v163 = v162;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v76 + 216))(v76, v162);
  v77 = v163;
  if (v163 == v162)
  {
    v78 = 4;
    v77 = v162;
  }
  else
  {
    if (!v163)
      goto LABEL_98;
    v78 = 5;
  }
  (*(void (**)(void))(*v77 + 8 * v78))();
LABEL_98:
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v79 = __p;
  std::string::basic_string[abi:ne180100]<0>(v134, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v134, 0, (uint64_t *)&Scalar);
  v136 = Scalar;
  if (Scalar)
  {
    v80 = (std::__shared_weak_count *)operator new();
    v81 = (std::__shared_weak_count_vtbl *)Scalar;
    v80->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v80->__shared_owners_ = 0;
    v80->__shared_weak_owners_ = 0;
    v80[1].__vftable = v81;
  }
  else
  {
    v80 = 0;
  }
  v137 = v80;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v132, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v79 + 24))(v79, &v136, v132);
  if (v133 < 0)
    operator delete(v132[0]);
  v82 = v137;
  if (v137)
  {
    v83 = (unint64_t *)&v137->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = Scalar;
  Scalar = 0;
  if (v85)
    (*(void (**)(void *))(*(_QWORD *)v85 + 8))(v85);
  if (v135 < 0)
    operator delete(v134[0]);
  v86 = __p;
  std::string::basic_string[abi:ne180100]<0>(v128, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v128, 0, (uint64_t *)&Scalar);
  v130 = Scalar;
  if (Scalar)
  {
    v87 = (std::__shared_weak_count *)operator new();
    v88 = (std::__shared_weak_count_vtbl *)Scalar;
    v87->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v87->__shared_owners_ = 0;
    v87->__shared_weak_owners_ = 0;
    v87[1].__vftable = v88;
  }
  else
  {
    v87 = 0;
  }
  v131 = v87;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v126, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v86 + 24))(v86, &v130, v126);
  if (v127 < 0)
    operator delete(v126[0]);
  v89 = v131;
  if (v131)
  {
    v90 = (unint64_t *)&v131->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = Scalar;
  Scalar = 0;
  if (v92)
    (*(void (**)(void *))(*(_QWORD *)v92 + 8))(v92);
  if (v129 < 0)
    operator delete(v128[0]);
  v93 = *a3;
  v124 = __p;
  if (__p)
  {
    v94 = (std::__shared_weak_count *)operator new();
    v95 = (std::__shared_weak_count_vtbl *)__p;
    v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v94->__shared_owners_ = 0;
    v94->__shared_weak_owners_ = 0;
    v94[1].__vftable = v95;
  }
  else
  {
    v94 = 0;
  }
  v125 = v94;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v93 + 56))(v93, &v124);
  v96 = v125;
  if (v125)
  {
    v97 = (unint64_t *)&v125->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = __p;
  __p = 0;
  if (v99)
    (*(void (**)(void *))(*(_QWORD *)v99 + 8))(v99);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v146);
  v100 = v146;
  std::string::basic_string[abi:ne180100]<0>(v120, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v120, 1, &v170);
  v122 = v170;
  if (v170)
  {
    v101 = (std::__shared_weak_count *)operator new();
    v102 = v170;
    v101->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v101->__shared_owners_ = 0;
    v101->__shared_weak_owners_ = 0;
    v101[1].__vftable = (std::__shared_weak_count_vtbl *)v102;
  }
  else
  {
    v101 = 0;
  }
  v123 = v101;
  v170 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v154, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v155, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v156, "int32");
  std::string::basic_string[abi:ne180100]<0>(v157, "int8");
  std::string::basic_string[abi:ne180100]<0>(v158, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 6);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v100 + 24))(v100, &v122, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v158[i + 2]) < 0)
      operator delete(v158[i]);
  }
  v104 = v123;
  if (v123)
  {
    v105 = (unint64_t *)&v123->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = v170;
  v170 = 0;
  if (v107)
    (*(void (**)(uint64_t))(*(_QWORD *)v107 + 8))(v107);
  if (v121 < 0)
    operator delete(v120[0]);
  v108 = *a3;
  v118 = v146;
  if (v146)
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = v146;
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = (std::__shared_weak_count_vtbl *)v110;
  }
  else
  {
    v109 = 0;
  }
  v119 = v109;
  v146 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v108 + 56))(v108, &v118);
  v111 = v119;
  if (v119)
  {
    v112 = (unint64_t *)&v119->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = v146;
  v146 = 0;
  if (v114)
    (*(void (**)(uint64_t))(*(_QWORD *)v114 + 8))(v114);
  if (v171)
  {
    v115 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v171);
    MEMORY[0x1E0C023A0](v115, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, 0);
  result = (uint64_t)v150;
  if (v150)
  {
    v117 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v150);
    return MEMORY[0x1E0C023A0](v117, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0983DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void **a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  uint64_t *v55;
  uint64_t v56;
  uint64_t v58;

  if (a49)
    (*(void (**)(uint64_t))(*(_QWORD *)a49 + 8))(a49);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v56 - 88), 0);
  v58 = *v55;
  *v55 = 0;
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a55, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::LogicalXor::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t *v36;
  char *v37;
  char *v38;
  char *v39;
  __int128 v40;
  char *v41;
  char *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  char **v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  unsigned __int8 *v62;
  void *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  std::__shared_weak_count *v70;
  unint64_t *p_shared_owners;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  void *v79;
  std::__shared_weak_count *v80;
  std::__shared_weak_count_vtbl *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  void *v85;
  void *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count_vtbl *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count_vtbl *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  uint64_t v102;
  uint64_t i;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t result;
  uint64_t v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  void *v120[2];
  char v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  void *v124;
  std::__shared_weak_count *v125;
  void *v126[2];
  char v127;
  void *v128[2];
  char v129;
  void *v130;
  std::__shared_weak_count *v131;
  void *v132[2];
  char v133;
  void *v134[2];
  char v135;
  void *v136;
  std::__shared_weak_count *v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  __n128 v140;
  __int128 v141;
  __int128 v142;
  void *v143[2];
  uint64_t v144;
  __n128 v145;
  uint64_t v146;
  char **v147;
  __n128 v148;
  __n128 v149;
  _QWORD *v150;
  void *__p;
  void *v152;
  char *v153;
  _QWORD v154[3];
  uint64_t v155[3];
  uint64_t v156[3];
  uint64_t v157[3];
  void *v158[3];
  void *Scalar;
  void *v160;
  _QWORD *v161;
  _QWORD v162[3];
  _QWORD *v163;
  _QWORD v164[3];
  _QWORD *v165;
  _BYTE v166[24];
  _BYTE *v167;
  _QWORD v168[3];
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;

  v173 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v150 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  __p = v8;
  *v8 = v7;
  v152 = v8 + 1;
  v153 = (char *)(v8 + 1);
  v171 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v171, 1, &v149);
  MIL::IRParameter::Make(&v149, (uint64_t *)&Scalar);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&Scalar);
  v9 = Scalar;
  Scalar = 0;
  if (v9)
    (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
  v10 = (std::__shared_weak_count *)v149.n128_u64[1];
  if (v149.n128_u64[1])
  {
    v11 = (unint64_t *)(v149.n128_u64[1] + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v152 = __p;
    operator delete(__p);
  }
  v13 = v150;
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(8uLL);
  __p = v15;
  *v15 = v14;
  v152 = v15 + 1;
  v153 = (char *)(v15 + 1);
  v171 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v171, 1, &v148);
  MIL::IRParameter::Make(&v148, (uint64_t *)&Scalar);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v13, "y", (uint64_t *)&Scalar);
  v16 = Scalar;
  Scalar = 0;
  if (v16)
    (*(void (**)(void *))(*(_QWORD *)v16 + 8))(v16);
  v17 = (std::__shared_weak_count *)v148.n128_u64[1];
  if (v148.n128_u64[1])
  {
    v18 = (unint64_t *)(v148.n128_u64[1] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v152 = __p;
    operator delete(__p);
  }
  v147 = 0;
  v20 = operator new();
  *(_QWORD *)v20 = 0;
  *(_QWORD *)(v20 + 8) = 0;
  *(_QWORD *)(v20 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, (void **)v20);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v147, 1uLL);
  v21 = v147;
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  Scalar = v23;
  *v23 = v22;
  v161 = v23 + 1;
  v160 = v23 + 1;
  v170 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v170, 1, &v145);
  MIL::IRParameter::Make(&v145, &v146);
  v24 = v146;
  v171 = v146;
  if (v146)
  {
    v25 = (_QWORD *)operator new();
    v26 = v146;
    *v25 = &unk_1EA99F888;
    v25[1] = 0;
    v25[2] = 0;
    v25[3] = v26;
  }
  else
  {
    v25 = 0;
  }
  v172 = v25;
  v146 = 0;
  v27 = v21[2];
  v28 = v21[1];
  if (v28 >= v27)
  {
    v30 = (v28 - *v21) >> 4;
    v31 = v30 + 1;
    if ((unint64_t)(v30 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v32 = v27 - *v21;
    if (v32 >> 3 > v31)
      v31 = v32 >> 3;
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0)
      v33 = 0xFFFFFFFFFFFFFFFLL;
    else
      v33 = v31;
    v154[1] = v21 + 2;
    v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v21 + 2), v33);
    v36 = (uint64_t *)&v34[16 * v30];
    *v36 = v24;
    v36[1] = (uint64_t)v25;
    v171 = 0;
    v172 = 0;
    v38 = *v21;
    v37 = v21[1];
    if (v37 == *v21)
    {
      v41 = v21[1];
      v39 = &v34[16 * v30];
    }
    else
    {
      v39 = &v34[16 * v30];
      do
      {
        v40 = *((_OWORD *)v37 - 1);
        v37 -= 16;
        *((_OWORD *)v39 - 1) = v40;
        v39 -= 16;
        *(_QWORD *)v37 = 0;
        *((_QWORD *)v37 + 1) = 0;
      }
      while (v37 != v38);
      v41 = *v21;
      v37 = v21[1];
    }
    v29 = (char *)(v36 + 2);
    *v21 = v39;
    __p = v41;
    v152 = v41;
    v21[1] = (char *)(v36 + 2);
    v153 = v37;
    v42 = v21[2];
    v21[2] = &v34[16 * v35];
    v154[0] = v42;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v28 = v24;
    *((_QWORD *)v28 + 1) = v25;
    v29 = v28 + 16;
    v171 = 0;
    v172 = 0;
  }
  v21[1] = v29;
  v43 = v146;
  v146 = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v44 = (std::__shared_weak_count *)v145.n128_u64[1];
  if (v145.n128_u64[1])
  {
    v45 = (unint64_t *)(v145.n128_u64[1] + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (Scalar)
  {
    v160 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v143 = *(_OWORD *)a2;
  v144 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v47 = (uint64_t)v150;
  *(_QWORD *)&v142 = v150;
  if (v150)
  {
    v48 = (_QWORD *)operator new();
    *v48 = &unk_1EA99F8E8;
    v48[1] = 0;
    v48[2] = 0;
    v48[3] = v47;
  }
  else
  {
    v48 = 0;
  }
  *((_QWORD *)&v142 + 1) = v48;
  v150 = 0;
  *(_QWORD *)&v141 = v147;
  if (v147)
  {
    v49 = (_QWORD *)operator new();
    v50 = v147;
    *v49 = &unk_1EA99F948;
    v49[1] = 0;
    v49[2] = 0;
    v49[3] = v50;
  }
  else
  {
    v49 = 0;
  }
  *((_QWORD *)&v141 + 1) = v49;
  v147 = 0;
  v168[0] = &unk_1EA99FAC8;
  v168[1] = MIL::Validation::ValidateViaTypeInference;
  v169 = v168;
  v167 = 0;
  MIL::IROperator::Make((__int128 *)v143, &v142, &v141, (uint64_t)v168, (uint64_t)v166, a3);
  v51 = v167;
  if (v167 == v166)
  {
    v52 = 4;
    v51 = v166;
  }
  else
  {
    if (!v167)
      goto LABEL_56;
    v52 = 5;
  }
  (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_56:
  v53 = v169;
  if (v169 == v168)
  {
    v54 = 4;
    v53 = v168;
    goto LABEL_60;
  }
  if (v169)
  {
    v54 = 5;
LABEL_60:
    (*(void (**)(void))(*v53 + 8 * v54))();
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
  if (*((_QWORD *)&v141 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
  if (*((_QWORD *)&v142 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v142 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  if (SHIBYTE(v144) < 0)
    operator delete(v143[0]);
  v171 = 0;
  v61 = operator new();
  *(_OWORD *)v61 = 0u;
  *(_OWORD *)(v61 + 16) = 0u;
  *(_DWORD *)(v61 + 32) = 1065353216;
  v171 = v61;
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v140);
  MIL::IRParameter::Make(&v140, (uint64_t *)&__p);
  v62 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v61, "minimum_compute_type", (uint64_t *)&__p);
  v63 = __p;
  __p = 0;
  if (v63)
    (*(void (**)(void *))(*(_QWORD *)v63 + 8))(v63);
  v64 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v65 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v62 + 5) + 32))(*((_QWORD *)v62 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v62 + 5) + 48))(*((_QWORD *)v62 + 5), 1);
  v67 = *a3;
  v68 = v171;
  v138 = v171;
  if (v171)
  {
    v69 = (std::__shared_weak_count *)operator new();
    v69->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v69->__shared_owners_ = 0;
    v69->__shared_weak_owners_ = 0;
    v69[1].__vftable = (std::__shared_weak_count_vtbl *)v68;
  }
  else
  {
    v69 = 0;
  }
  v139 = v69;
  v171 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v67 + 184))(v67, &v138);
  v70 = v139;
  if (v139)
  {
    p_shared_owners = (unint64_t *)&v139->__shared_owners_;
    do
      v72 = __ldaxr(p_shared_owners);
    while (__stlxr(v72 - 1, p_shared_owners));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = *a3;
  v164[0] = &off_1EA99FBD8;
  v164[1] = MIL::Operators::Common::ios18::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput;
  v165 = v164;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v73 + 200))(v73, v164);
  v74 = v165;
  if (v165 == v164)
  {
    v75 = 4;
    v74 = v164;
  }
  else
  {
    if (!v165)
      goto LABEL_93;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_93:
  v76 = *a3;
  v162[0] = &off_1EA9A00F8;
  v162[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceLogicalXor;
  v163 = v162;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v76 + 216))(v76, v162);
  v77 = v163;
  if (v163 == v162)
  {
    v78 = 4;
    v77 = v162;
  }
  else
  {
    if (!v163)
      goto LABEL_98;
    v78 = 5;
  }
  (*(void (**)(void))(*v77 + 8 * v78))();
LABEL_98:
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v79 = __p;
  std::string::basic_string[abi:ne180100]<0>(v134, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v134, 0, (uint64_t *)&Scalar);
  v136 = Scalar;
  if (Scalar)
  {
    v80 = (std::__shared_weak_count *)operator new();
    v81 = (std::__shared_weak_count_vtbl *)Scalar;
    v80->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v80->__shared_owners_ = 0;
    v80->__shared_weak_owners_ = 0;
    v80[1].__vftable = v81;
  }
  else
  {
    v80 = 0;
  }
  v137 = v80;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v132, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v79 + 24))(v79, &v136, v132);
  if (v133 < 0)
    operator delete(v132[0]);
  v82 = v137;
  if (v137)
  {
    v83 = (unint64_t *)&v137->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = Scalar;
  Scalar = 0;
  if (v85)
    (*(void (**)(void *))(*(_QWORD *)v85 + 8))(v85);
  if (v135 < 0)
    operator delete(v134[0]);
  v86 = __p;
  std::string::basic_string[abi:ne180100]<0>(v128, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v128, 0, (uint64_t *)&Scalar);
  v130 = Scalar;
  if (Scalar)
  {
    v87 = (std::__shared_weak_count *)operator new();
    v88 = (std::__shared_weak_count_vtbl *)Scalar;
    v87->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v87->__shared_owners_ = 0;
    v87->__shared_weak_owners_ = 0;
    v87[1].__vftable = v88;
  }
  else
  {
    v87 = 0;
  }
  v131 = v87;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v126, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v86 + 24))(v86, &v130, v126);
  if (v127 < 0)
    operator delete(v126[0]);
  v89 = v131;
  if (v131)
  {
    v90 = (unint64_t *)&v131->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = Scalar;
  Scalar = 0;
  if (v92)
    (*(void (**)(void *))(*(_QWORD *)v92 + 8))(v92);
  if (v129 < 0)
    operator delete(v128[0]);
  v93 = *a3;
  v124 = __p;
  if (__p)
  {
    v94 = (std::__shared_weak_count *)operator new();
    v95 = (std::__shared_weak_count_vtbl *)__p;
    v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v94->__shared_owners_ = 0;
    v94->__shared_weak_owners_ = 0;
    v94[1].__vftable = v95;
  }
  else
  {
    v94 = 0;
  }
  v125 = v94;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v93 + 56))(v93, &v124);
  v96 = v125;
  if (v125)
  {
    v97 = (unint64_t *)&v125->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = __p;
  __p = 0;
  if (v99)
    (*(void (**)(void *))(*(_QWORD *)v99 + 8))(v99);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v146);
  v100 = v146;
  std::string::basic_string[abi:ne180100]<0>(v120, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v120, 1, &v170);
  v122 = v170;
  if (v170)
  {
    v101 = (std::__shared_weak_count *)operator new();
    v102 = v170;
    v101->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v101->__shared_owners_ = 0;
    v101->__shared_weak_owners_ = 0;
    v101[1].__vftable = (std::__shared_weak_count_vtbl *)v102;
  }
  else
  {
    v101 = 0;
  }
  v123 = v101;
  v170 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v154, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v155, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v156, "int32");
  std::string::basic_string[abi:ne180100]<0>(v157, "int8");
  std::string::basic_string[abi:ne180100]<0>(v158, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 6);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v100 + 24))(v100, &v122, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v158[i + 2]) < 0)
      operator delete(v158[i]);
  }
  v104 = v123;
  if (v123)
  {
    v105 = (unint64_t *)&v123->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = v170;
  v170 = 0;
  if (v107)
    (*(void (**)(uint64_t))(*(_QWORD *)v107 + 8))(v107);
  if (v121 < 0)
    operator delete(v120[0]);
  v108 = *a3;
  v118 = v146;
  if (v146)
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = v146;
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = (std::__shared_weak_count_vtbl *)v110;
  }
  else
  {
    v109 = 0;
  }
  v119 = v109;
  v146 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v108 + 56))(v108, &v118);
  v111 = v119;
  if (v119)
  {
    v112 = (unint64_t *)&v119->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = v146;
  v146 = 0;
  if (v114)
    (*(void (**)(uint64_t))(*(_QWORD *)v114 + 8))(v114);
  if (v171)
  {
    v115 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v171);
    MEMORY[0x1E0C023A0](v115, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, 0);
  result = (uint64_t)v150;
  if (v150)
  {
    v117 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v150);
    return MEMORY[0x1E0C023A0](v117, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0984FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void **a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  uint64_t *v55;
  uint64_t v56;
  uint64_t v58;

  if (a49)
    (*(void (**)(uint64_t))(*(_QWORD *)a49 + 8))(a49);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v56 - 88), 0);
  v58 = *v55;
  *v55 = 0;
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a55, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::Equal::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  std::__shared_weak_count_vtbl *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  void ***v33;
  uint64_t v34;
  std::__shared_weak_count_vtbl *v35;
  void *v36;
  _QWORD *v37;
  void *v38;
  unint64_t v39;
  void **v40;
  void **v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  void **v49;
  void **v50;
  char *v51;
  __int128 v52;
  void **v53;
  void **v54;
  void *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  void *v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _OWORD *v73;
  unsigned __int8 *v74;
  void **v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  void **v91;
  std::__shared_weak_count *v92;
  std::__shared_weak_count_vtbl *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count_vtbl *v97;
  void **v98;
  std::__shared_weak_count *v99;
  std::__shared_weak_count_vtbl *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count_vtbl *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  void **v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  void **v111;
  void *v112;
  std::__shared_weak_count *v113;
  uint64_t v114;
  uint64_t i;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count_vtbl *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t result;
  uint64_t v129;
  void *v130;
  std::__shared_weak_count *v131;
  void *v132[2];
  char v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  void **v136;
  std::__shared_weak_count *v137;
  void *v138[2];
  char v139;
  void *v140[2];
  char v141;
  std::__shared_weak_count_vtbl *v142;
  std::__shared_weak_count *v143;
  void *v144[2];
  char v145;
  void *v146[2];
  char v147;
  std::__shared_weak_count_vtbl *v148;
  std::__shared_weak_count *v149;
  void *v150;
  std::__shared_weak_count *v151;
  __n128 v152;
  __int128 v153;
  __int128 v154;
  void *v155[2];
  uint64_t v156;
  __n128 v157;
  __n128 v158;
  void *__p;
  void *v160;
  _QWORD *v161;
  void *v162;
  void *v163;
  _QWORD *v164;
  void *v165;
  void *v166;
  _QWORD *v167;
  __n128 v168;
  _QWORD *v169;
  void **v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD v173[3];
  uint64_t v174[3];
  uint64_t v175[3];
  uint64_t v176[3];
  _QWORD v177[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *v179;
  void (__cdecl **v180)(std::__shared_weak_count *__hidden);
  _QWORD v181[3];
  _QWORD *v182;
  _QWORD v183[3];
  _QWORD *v184;
  _BYTE v185[24];
  _BYTE *v186;
  _QWORD v187[3];
  _QWORD *v188;
  uint64_t v189[2];

  v189[1] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v169 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v179 = (std::__shared_weak_count_vtbl *)&v8->~__shared_weak_count_0;
  v180 = &v8->~__shared_weak_count_0;
  v170 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v165 = v10;
  *v10 = v9;
  v166 = v10 + 1;
  v167 = v10 + 1;
  v171 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v165);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v162 = v12;
  *v12 = v11;
  v163 = v12 + 1;
  v164 = v12 + 1;
  v172 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v162);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v160 = v14 + 1;
  v161 = v14 + 1;
  v173[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v170, 4, &v168);
  MIL::IRParameter::Make(&v168, v189);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", v189);
  v15 = v189[0];
  v189[0] = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v168.n128_u64[1];
  if (v168.n128_u64[1])
  {
    v17 = (unint64_t *)(v168.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v160 = __p;
    operator delete(__p);
  }
  if (v162)
  {
    v163 = v162;
    operator delete(v162);
  }
  if (v165)
  {
    v166 = v165;
    operator delete(v165);
  }
  if (Scalar)
  {
    v179 = Scalar;
    operator delete(Scalar);
  }
  v19 = v169;
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v21;
  v21->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v20;
  v179 = (std::__shared_weak_count_vtbl *)&v21->~__shared_weak_count_0;
  v180 = &v21->~__shared_weak_count_0;
  v170 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  v165 = v23;
  *v23 = v22;
  v166 = v23 + 1;
  v167 = v23 + 1;
  v171 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v165);
  v24 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v25 = operator new(8uLL);
  v162 = v25;
  *v25 = v24;
  v163 = v25 + 1;
  v164 = v25 + 1;
  v172 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v162);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(8uLL);
  __p = v27;
  *v27 = v26;
  v160 = v27 + 1;
  v161 = v27 + 1;
  v173[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v170, 4, &v158);
  MIL::IRParameter::Make(&v158, v189);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v19, "y", v189);
  v28 = v189[0];
  v189[0] = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  v29 = (std::__shared_weak_count *)v158.n128_u64[1];
  if (v158.n128_u64[1])
  {
    v30 = (unint64_t *)(v158.n128_u64[1] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (__p)
  {
    v160 = __p;
    operator delete(__p);
  }
  if (v162)
  {
    v163 = v162;
    operator delete(v162);
  }
  if (v165)
  {
    v166 = v165;
    operator delete(v165);
  }
  if (Scalar)
  {
    v179 = Scalar;
    operator delete(Scalar);
  }
  v162 = 0;
  v32 = operator new();
  *(_QWORD *)v32 = 0;
  *(_QWORD *)(v32 + 8) = 0;
  *(_QWORD *)(v32 + 16) = 0;
  v170 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v162, (void **)v32);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v170, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)v162, 1uLL);
  v33 = (void ***)v162;
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v35;
  v35->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v34;
  v179 = (std::__shared_weak_count_vtbl *)&v35->~__shared_weak_count_0;
  v180 = &v35->~__shared_weak_count_0;
  v189[0] = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)v189, 1, &v157);
  MIL::IRParameter::Make(&v157, (uint64_t *)&__p);
  v36 = __p;
  v165 = __p;
  if (__p)
  {
    v37 = (_QWORD *)operator new();
    v38 = __p;
    *v37 = &unk_1EA99F888;
    v37[1] = 0;
    v37[2] = 0;
    v37[3] = v38;
  }
  else
  {
    v37 = 0;
  }
  v166 = v37;
  __p = 0;
  v39 = (unint64_t)v33[2];
  v40 = v33[1];
  if ((unint64_t)v40 >= v39)
  {
    v42 = ((char *)v40 - (char *)*v33) >> 4;
    v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v44 = v39 - (_QWORD)*v33;
    if (v44 >> 3 > v43)
      v43 = v44 >> 3;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
      v45 = 0xFFFFFFFFFFFFFFFLL;
    else
      v45 = v43;
    v173[1] = v33 + 2;
    v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v33 + 2), v45);
    v48 = &v46[16 * v42];
    *(_QWORD *)v48 = v36;
    *((_QWORD *)v48 + 1) = v37;
    v165 = 0;
    v166 = 0;
    v50 = *v33;
    v49 = v33[1];
    if (v49 == *v33)
    {
      v53 = v33[1];
      v51 = &v46[16 * v42];
    }
    else
    {
      v51 = &v46[16 * v42];
      do
      {
        v52 = *((_OWORD *)v49 - 1);
        v49 -= 2;
        *((_OWORD *)v51 - 1) = v52;
        v51 -= 16;
        *v49 = 0;
        v49[1] = 0;
      }
      while (v49 != v50);
      v53 = *v33;
      v49 = v33[1];
    }
    v41 = (void **)(v48 + 16);
    *v33 = (void **)v51;
    v170 = v53;
    v171 = (uint64_t)v53;
    v33[1] = (void **)(v48 + 16);
    v172 = (uint64_t)v49;
    v54 = v33[2];
    v33[2] = (void **)&v46[16 * v47];
    v173[0] = v54;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v170);
  }
  else
  {
    *v40 = v36;
    v40[1] = v37;
    v41 = v40 + 2;
    v165 = 0;
    v166 = 0;
  }
  v33[1] = v41;
  v55 = __p;
  __p = 0;
  if (v55)
    (*(void (**)(void *))(*(_QWORD *)v55 + 8))(v55);
  v56 = (std::__shared_weak_count *)v157.n128_u64[1];
  if (v157.n128_u64[1])
  {
    v57 = (unint64_t *)(v157.n128_u64[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (Scalar)
  {
    v179 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v155 = *(_OWORD *)a2;
  v156 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v59 = (uint64_t)v169;
  *(_QWORD *)&v154 = v169;
  if (v169)
  {
    v60 = (_QWORD *)operator new();
    *v60 = &unk_1EA99F8E8;
    v60[1] = 0;
    v60[2] = 0;
    v60[3] = v59;
  }
  else
  {
    v60 = 0;
  }
  *((_QWORD *)&v154 + 1) = v60;
  v169 = 0;
  *(_QWORD *)&v153 = v162;
  if (v162)
  {
    v61 = (_QWORD *)operator new();
    v62 = v162;
    *v61 = &unk_1EA99F948;
    v61[1] = 0;
    v61[2] = 0;
    v61[3] = v62;
  }
  else
  {
    v61 = 0;
  }
  *((_QWORD *)&v153 + 1) = v61;
  v162 = 0;
  v187[0] = &unk_1EA99FAC8;
  v187[1] = MIL::Validation::ValidateViaTypeInference;
  v188 = v187;
  v186 = 0;
  MIL::IROperator::Make((__int128 *)v155, &v154, &v153, (uint64_t)v187, (uint64_t)v185, a3);
  v63 = v186;
  if (v186 == v185)
  {
    v64 = 4;
    v63 = v185;
  }
  else
  {
    if (!v186)
      goto LABEL_68;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_68:
  v65 = v188;
  if (v188 == v187)
  {
    v66 = 4;
    v65 = v187;
    goto LABEL_72;
  }
  if (v188)
  {
    v66 = 5;
LABEL_72:
    (*(void (**)(void))(*v65 + 8 * v66))();
  }
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v153 + 1);
  if (*((_QWORD *)&v153 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v153 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v154 + 1);
  if (*((_QWORD *)&v154 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v154 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (SHIBYTE(v156) < 0)
    operator delete(v155[0]);
  v165 = 0;
  v73 = (_OWORD *)operator new();
  *v73 = 0u;
  v73[1] = 0u;
  *((_DWORD *)v73 + 8) = 1065353216;
  v165 = v73;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v152);
  MIL::IRParameter::Make(&v152, (uint64_t *)&v170);
  v74 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v73, "minimum_compute_type", (uint64_t *)&v170);
  v75 = v170;
  v170 = 0;
  if (v75)
    (*((void (**)(void **))*v75 + 1))(v75);
  v76 = (std::__shared_weak_count *)v152.n128_u64[1];
  if (v152.n128_u64[1])
  {
    v77 = (unint64_t *)(v152.n128_u64[1] + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v74 + 5) + 32))(*((_QWORD *)v74 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v74 + 5) + 48))(*((_QWORD *)v74 + 5), 1);
  v79 = *a3;
  v80 = (std::__shared_weak_count_vtbl *)v165;
  v150 = v165;
  if (v165)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v80;
  }
  else
  {
    v81 = 0;
  }
  v151 = v81;
  v165 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v79 + 184))(v79, &v150);
  v82 = v151;
  if (v151)
  {
    p_shared_owners = (unint64_t *)&v151->__shared_owners_;
    do
      v84 = __ldaxr(p_shared_owners);
    while (__stlxr(v84 - 1, p_shared_owners));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = *a3;
  v183[0] = &off_1EA99FBD8;
  v183[1] = MIL::Operators::Common::ios18::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput;
  v184 = v183;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v85 + 200))(v85, v183);
  v86 = v184;
  if (v184 == v183)
  {
    v87 = 4;
    v86 = v183;
  }
  else
  {
    if (!v184)
      goto LABEL_105;
    v87 = 5;
  }
  (*(void (**)(void))(*v86 + 8 * v87))();
LABEL_105:
  v88 = *a3;
  v181[0] = &off_1EA9A00F8;
  v181[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceEqual;
  v182 = v181;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v88 + 216))(v88, v181);
  v89 = v182;
  if (v182 == v181)
  {
    v90 = 4;
    v89 = v181;
  }
  else
  {
    if (!v182)
      goto LABEL_110;
    v90 = 5;
  }
  (*(void (**)(void))(*v89 + 8 * v90))();
LABEL_110:
  MIL::Validation::TensorDTypeConstraints::Make(&v170);
  v91 = v170;
  std::string::basic_string[abi:ne180100]<0>(v146, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v146, 0, (uint64_t *)&Scalar);
  v148 = Scalar;
  if (Scalar)
  {
    v92 = (std::__shared_weak_count *)operator new();
    v93 = Scalar;
    v92->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v92->__shared_owners_ = 0;
    v92->__shared_weak_owners_ = 0;
    v92[1].__vftable = v93;
  }
  else
  {
    v92 = 0;
  }
  v149 = v92;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v144, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v91 + 3))(v91, &v148, v144);
  if (v145 < 0)
    operator delete(v144[0]);
  v94 = v149;
  if (v149)
  {
    v95 = (unint64_t *)&v149->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v97 = Scalar;
  Scalar = 0;
  if (v97)
    (*((void (**)(std::__shared_weak_count_vtbl *))v97->~__shared_weak_count + 1))(v97);
  if (v147 < 0)
    operator delete(v146[0]);
  v98 = v170;
  std::string::basic_string[abi:ne180100]<0>(v140, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v140, 0, (uint64_t *)&Scalar);
  v142 = Scalar;
  if (Scalar)
  {
    v99 = (std::__shared_weak_count *)operator new();
    v100 = Scalar;
    v99->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v99->__shared_owners_ = 0;
    v99->__shared_weak_owners_ = 0;
    v99[1].__vftable = v100;
  }
  else
  {
    v99 = 0;
  }
  v143 = v99;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v138, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v98 + 3))(v98, &v142, v138);
  if (v139 < 0)
    operator delete(v138[0]);
  v101 = v143;
  if (v143)
  {
    v102 = (unint64_t *)&v143->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = Scalar;
  Scalar = 0;
  if (v104)
    (*((void (**)(std::__shared_weak_count_vtbl *))v104->~__shared_weak_count + 1))(v104);
  if (v141 < 0)
    operator delete(v140[0]);
  v105 = *a3;
  v136 = v170;
  if (v170)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = v170;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v137 = v106;
  v170 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v105 + 56))(v105, &v136);
  v108 = v137;
  if (v137)
  {
    v109 = (unint64_t *)&v137->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v170;
  v170 = 0;
  if (v111)
    (*((void (**)(void **))*v111 + 1))(v111);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v112 = __p;
  std::string::basic_string[abi:ne180100]<0>(v132, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v132, 1, v189);
  v134 = v189[0];
  if (v189[0])
  {
    v113 = (std::__shared_weak_count *)operator new();
    v114 = v189[0];
    v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v113->__shared_owners_ = 0;
    v113->__shared_weak_owners_ = 0;
    v113[1].__vftable = (std::__shared_weak_count_vtbl *)v114;
  }
  else
  {
    v113 = 0;
  }
  v135 = v113;
  v189[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v170, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v173, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v174, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v175, "int32");
  std::string::basic_string[abi:ne180100]<0>(v176, "int8");
  std::string::basic_string[abi:ne180100]<0>(v177, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v170, 6);
  (*(void (**)(void *, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v112 + 24))(v112, &v134, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v177[i + 2]) < 0)
      operator delete((void *)v177[i]);
  }
  v116 = v135;
  if (v135)
  {
    v117 = (unint64_t *)&v135->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = v189[0];
  v189[0] = 0;
  if (v119)
    (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
  if (v133 < 0)
    operator delete(v132[0]);
  v120 = *a3;
  v130 = __p;
  if (__p)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v122 = (std::__shared_weak_count_vtbl *)__p;
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = v122;
  }
  else
  {
    v121 = 0;
  }
  v131 = v121;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v120 + 56))(v120, &v130);
  v123 = v131;
  if (v131)
  {
    v124 = (unint64_t *)&v131->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = __p;
  __p = 0;
  if (v126)
    (*(void (**)(void *))(*(_QWORD *)v126 + 8))(v126);
  if (v165)
  {
    v127 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v165);
    MEMORY[0x1E0C023A0](v127, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v162, 0);
  result = (uint64_t)v169;
  if (v169)
  {
    v129 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v169);
    return MEMORY[0x1E0C023A0](v129, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0986394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  uint64_t *v61;
  uint64_t v63;

  if (a50)
    (*(void (**)(void *))(*(_QWORD *)a50 + 8))(a50);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a56, 0);
  v63 = *v61;
  *v61 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a53, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a61, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::Greater::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  std::__shared_weak_count_vtbl *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  void ***v33;
  uint64_t v34;
  std::__shared_weak_count_vtbl *v35;
  void *v36;
  _QWORD *v37;
  void *v38;
  unint64_t v39;
  void **v40;
  void **v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  void **v49;
  void **v50;
  char *v51;
  __int128 v52;
  void **v53;
  void **v54;
  void *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  void *v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _OWORD *v73;
  unsigned __int8 *v74;
  void **v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  void **v91;
  std::__shared_weak_count *v92;
  std::__shared_weak_count_vtbl *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count_vtbl *v97;
  void **v98;
  std::__shared_weak_count *v99;
  std::__shared_weak_count_vtbl *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count_vtbl *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  void **v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  void **v111;
  void *v112;
  std::__shared_weak_count *v113;
  uint64_t v114;
  uint64_t i;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count_vtbl *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t result;
  uint64_t v129;
  void *v130;
  std::__shared_weak_count *v131;
  void *v132[2];
  char v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  void **v136;
  std::__shared_weak_count *v137;
  void *v138[2];
  char v139;
  void *v140[2];
  char v141;
  std::__shared_weak_count_vtbl *v142;
  std::__shared_weak_count *v143;
  void *v144[2];
  char v145;
  void *v146[2];
  char v147;
  std::__shared_weak_count_vtbl *v148;
  std::__shared_weak_count *v149;
  void *v150;
  std::__shared_weak_count *v151;
  __n128 v152;
  __int128 v153;
  __int128 v154;
  void *v155[2];
  uint64_t v156;
  __n128 v157;
  __n128 v158;
  void *__p;
  void *v160;
  _QWORD *v161;
  void *v162;
  void *v163;
  _QWORD *v164;
  void *v165;
  void *v166;
  _QWORD *v167;
  __n128 v168;
  _QWORD *v169;
  void **v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD v173[3];
  uint64_t v174[3];
  uint64_t v175[3];
  uint64_t v176[3];
  _QWORD v177[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *v179;
  void (__cdecl **v180)(std::__shared_weak_count *__hidden);
  _QWORD v181[3];
  _QWORD *v182;
  _QWORD v183[3];
  _QWORD *v184;
  _BYTE v185[24];
  _BYTE *v186;
  _QWORD v187[3];
  _QWORD *v188;
  uint64_t v189[2];

  v189[1] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v169 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v179 = (std::__shared_weak_count_vtbl *)&v8->~__shared_weak_count_0;
  v180 = &v8->~__shared_weak_count_0;
  v170 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v165 = v10;
  *v10 = v9;
  v166 = v10 + 1;
  v167 = v10 + 1;
  v171 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v165);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v162 = v12;
  *v12 = v11;
  v163 = v12 + 1;
  v164 = v12 + 1;
  v172 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v162);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v160 = v14 + 1;
  v161 = v14 + 1;
  v173[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v170, 4, &v168);
  MIL::IRParameter::Make(&v168, v189);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", v189);
  v15 = v189[0];
  v189[0] = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v168.n128_u64[1];
  if (v168.n128_u64[1])
  {
    v17 = (unint64_t *)(v168.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v160 = __p;
    operator delete(__p);
  }
  if (v162)
  {
    v163 = v162;
    operator delete(v162);
  }
  if (v165)
  {
    v166 = v165;
    operator delete(v165);
  }
  if (Scalar)
  {
    v179 = Scalar;
    operator delete(Scalar);
  }
  v19 = v169;
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v21;
  v21->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v20;
  v179 = (std::__shared_weak_count_vtbl *)&v21->~__shared_weak_count_0;
  v180 = &v21->~__shared_weak_count_0;
  v170 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  v165 = v23;
  *v23 = v22;
  v166 = v23 + 1;
  v167 = v23 + 1;
  v171 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v165);
  v24 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v25 = operator new(8uLL);
  v162 = v25;
  *v25 = v24;
  v163 = v25 + 1;
  v164 = v25 + 1;
  v172 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v162);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(8uLL);
  __p = v27;
  *v27 = v26;
  v160 = v27 + 1;
  v161 = v27 + 1;
  v173[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v170, 4, &v158);
  MIL::IRParameter::Make(&v158, v189);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v19, "y", v189);
  v28 = v189[0];
  v189[0] = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  v29 = (std::__shared_weak_count *)v158.n128_u64[1];
  if (v158.n128_u64[1])
  {
    v30 = (unint64_t *)(v158.n128_u64[1] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (__p)
  {
    v160 = __p;
    operator delete(__p);
  }
  if (v162)
  {
    v163 = v162;
    operator delete(v162);
  }
  if (v165)
  {
    v166 = v165;
    operator delete(v165);
  }
  if (Scalar)
  {
    v179 = Scalar;
    operator delete(Scalar);
  }
  v162 = 0;
  v32 = operator new();
  *(_QWORD *)v32 = 0;
  *(_QWORD *)(v32 + 8) = 0;
  *(_QWORD *)(v32 + 16) = 0;
  v170 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v162, (void **)v32);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v170, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)v162, 1uLL);
  v33 = (void ***)v162;
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v35;
  v35->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v34;
  v179 = (std::__shared_weak_count_vtbl *)&v35->~__shared_weak_count_0;
  v180 = &v35->~__shared_weak_count_0;
  v189[0] = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)v189, 1, &v157);
  MIL::IRParameter::Make(&v157, (uint64_t *)&__p);
  v36 = __p;
  v165 = __p;
  if (__p)
  {
    v37 = (_QWORD *)operator new();
    v38 = __p;
    *v37 = &unk_1EA99F888;
    v37[1] = 0;
    v37[2] = 0;
    v37[3] = v38;
  }
  else
  {
    v37 = 0;
  }
  v166 = v37;
  __p = 0;
  v39 = (unint64_t)v33[2];
  v40 = v33[1];
  if ((unint64_t)v40 >= v39)
  {
    v42 = ((char *)v40 - (char *)*v33) >> 4;
    v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v44 = v39 - (_QWORD)*v33;
    if (v44 >> 3 > v43)
      v43 = v44 >> 3;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
      v45 = 0xFFFFFFFFFFFFFFFLL;
    else
      v45 = v43;
    v173[1] = v33 + 2;
    v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v33 + 2), v45);
    v48 = &v46[16 * v42];
    *(_QWORD *)v48 = v36;
    *((_QWORD *)v48 + 1) = v37;
    v165 = 0;
    v166 = 0;
    v50 = *v33;
    v49 = v33[1];
    if (v49 == *v33)
    {
      v53 = v33[1];
      v51 = &v46[16 * v42];
    }
    else
    {
      v51 = &v46[16 * v42];
      do
      {
        v52 = *((_OWORD *)v49 - 1);
        v49 -= 2;
        *((_OWORD *)v51 - 1) = v52;
        v51 -= 16;
        *v49 = 0;
        v49[1] = 0;
      }
      while (v49 != v50);
      v53 = *v33;
      v49 = v33[1];
    }
    v41 = (void **)(v48 + 16);
    *v33 = (void **)v51;
    v170 = v53;
    v171 = (uint64_t)v53;
    v33[1] = (void **)(v48 + 16);
    v172 = (uint64_t)v49;
    v54 = v33[2];
    v33[2] = (void **)&v46[16 * v47];
    v173[0] = v54;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v170);
  }
  else
  {
    *v40 = v36;
    v40[1] = v37;
    v41 = v40 + 2;
    v165 = 0;
    v166 = 0;
  }
  v33[1] = v41;
  v55 = __p;
  __p = 0;
  if (v55)
    (*(void (**)(void *))(*(_QWORD *)v55 + 8))(v55);
  v56 = (std::__shared_weak_count *)v157.n128_u64[1];
  if (v157.n128_u64[1])
  {
    v57 = (unint64_t *)(v157.n128_u64[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (Scalar)
  {
    v179 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v155 = *(_OWORD *)a2;
  v156 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v59 = (uint64_t)v169;
  *(_QWORD *)&v154 = v169;
  if (v169)
  {
    v60 = (_QWORD *)operator new();
    *v60 = &unk_1EA99F8E8;
    v60[1] = 0;
    v60[2] = 0;
    v60[3] = v59;
  }
  else
  {
    v60 = 0;
  }
  *((_QWORD *)&v154 + 1) = v60;
  v169 = 0;
  *(_QWORD *)&v153 = v162;
  if (v162)
  {
    v61 = (_QWORD *)operator new();
    v62 = v162;
    *v61 = &unk_1EA99F948;
    v61[1] = 0;
    v61[2] = 0;
    v61[3] = v62;
  }
  else
  {
    v61 = 0;
  }
  *((_QWORD *)&v153 + 1) = v61;
  v162 = 0;
  v187[0] = &unk_1EA99FAC8;
  v187[1] = MIL::Validation::ValidateViaTypeInference;
  v188 = v187;
  v186 = 0;
  MIL::IROperator::Make((__int128 *)v155, &v154, &v153, (uint64_t)v187, (uint64_t)v185, a3);
  v63 = v186;
  if (v186 == v185)
  {
    v64 = 4;
    v63 = v185;
  }
  else
  {
    if (!v186)
      goto LABEL_68;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_68:
  v65 = v188;
  if (v188 == v187)
  {
    v66 = 4;
    v65 = v187;
    goto LABEL_72;
  }
  if (v188)
  {
    v66 = 5;
LABEL_72:
    (*(void (**)(void))(*v65 + 8 * v66))();
  }
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v153 + 1);
  if (*((_QWORD *)&v153 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v153 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v154 + 1);
  if (*((_QWORD *)&v154 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v154 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (SHIBYTE(v156) < 0)
    operator delete(v155[0]);
  v165 = 0;
  v73 = (_OWORD *)operator new();
  *v73 = 0u;
  v73[1] = 0u;
  *((_DWORD *)v73 + 8) = 1065353216;
  v165 = v73;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v152);
  MIL::IRParameter::Make(&v152, (uint64_t *)&v170);
  v74 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v73, "minimum_compute_type", (uint64_t *)&v170);
  v75 = v170;
  v170 = 0;
  if (v75)
    (*((void (**)(void **))*v75 + 1))(v75);
  v76 = (std::__shared_weak_count *)v152.n128_u64[1];
  if (v152.n128_u64[1])
  {
    v77 = (unint64_t *)(v152.n128_u64[1] + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v74 + 5) + 32))(*((_QWORD *)v74 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v74 + 5) + 48))(*((_QWORD *)v74 + 5), 1);
  v79 = *a3;
  v80 = (std::__shared_weak_count_vtbl *)v165;
  v150 = v165;
  if (v165)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v80;
  }
  else
  {
    v81 = 0;
  }
  v151 = v81;
  v165 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v79 + 184))(v79, &v150);
  v82 = v151;
  if (v151)
  {
    p_shared_owners = (unint64_t *)&v151->__shared_owners_;
    do
      v84 = __ldaxr(p_shared_owners);
    while (__stlxr(v84 - 1, p_shared_owners));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = *a3;
  v183[0] = &off_1EA99FBD8;
  v183[1] = MIL::Operators::Common::ios18::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput;
  v184 = v183;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v85 + 200))(v85, v183);
  v86 = v184;
  if (v184 == v183)
  {
    v87 = 4;
    v86 = v183;
  }
  else
  {
    if (!v184)
      goto LABEL_105;
    v87 = 5;
  }
  (*(void (**)(void))(*v86 + 8 * v87))();
LABEL_105:
  v88 = *a3;
  v181[0] = &off_1EA9A00F8;
  v181[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceGreater;
  v182 = v181;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v88 + 216))(v88, v181);
  v89 = v182;
  if (v182 == v181)
  {
    v90 = 4;
    v89 = v181;
  }
  else
  {
    if (!v182)
      goto LABEL_110;
    v90 = 5;
  }
  (*(void (**)(void))(*v89 + 8 * v90))();
LABEL_110:
  MIL::Validation::TensorDTypeConstraints::Make(&v170);
  v91 = v170;
  std::string::basic_string[abi:ne180100]<0>(v146, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v146, 0, (uint64_t *)&Scalar);
  v148 = Scalar;
  if (Scalar)
  {
    v92 = (std::__shared_weak_count *)operator new();
    v93 = Scalar;
    v92->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v92->__shared_owners_ = 0;
    v92->__shared_weak_owners_ = 0;
    v92[1].__vftable = v93;
  }
  else
  {
    v92 = 0;
  }
  v149 = v92;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v144, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v91 + 3))(v91, &v148, v144);
  if (v145 < 0)
    operator delete(v144[0]);
  v94 = v149;
  if (v149)
  {
    v95 = (unint64_t *)&v149->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v97 = Scalar;
  Scalar = 0;
  if (v97)
    (*((void (**)(std::__shared_weak_count_vtbl *))v97->~__shared_weak_count + 1))(v97);
  if (v147 < 0)
    operator delete(v146[0]);
  v98 = v170;
  std::string::basic_string[abi:ne180100]<0>(v140, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v140, 0, (uint64_t *)&Scalar);
  v142 = Scalar;
  if (Scalar)
  {
    v99 = (std::__shared_weak_count *)operator new();
    v100 = Scalar;
    v99->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v99->__shared_owners_ = 0;
    v99->__shared_weak_owners_ = 0;
    v99[1].__vftable = v100;
  }
  else
  {
    v99 = 0;
  }
  v143 = v99;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v138, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v98 + 3))(v98, &v142, v138);
  if (v139 < 0)
    operator delete(v138[0]);
  v101 = v143;
  if (v143)
  {
    v102 = (unint64_t *)&v143->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = Scalar;
  Scalar = 0;
  if (v104)
    (*((void (**)(std::__shared_weak_count_vtbl *))v104->~__shared_weak_count + 1))(v104);
  if (v141 < 0)
    operator delete(v140[0]);
  v105 = *a3;
  v136 = v170;
  if (v170)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = v170;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v137 = v106;
  v170 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v105 + 56))(v105, &v136);
  v108 = v137;
  if (v137)
  {
    v109 = (unint64_t *)&v137->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v170;
  v170 = 0;
  if (v111)
    (*((void (**)(void **))*v111 + 1))(v111);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v112 = __p;
  std::string::basic_string[abi:ne180100]<0>(v132, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v132, 1, v189);
  v134 = v189[0];
  if (v189[0])
  {
    v113 = (std::__shared_weak_count *)operator new();
    v114 = v189[0];
    v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v113->__shared_owners_ = 0;
    v113->__shared_weak_owners_ = 0;
    v113[1].__vftable = (std::__shared_weak_count_vtbl *)v114;
  }
  else
  {
    v113 = 0;
  }
  v135 = v113;
  v189[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v170, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v173, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v174, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v175, "int32");
  std::string::basic_string[abi:ne180100]<0>(v176, "int8");
  std::string::basic_string[abi:ne180100]<0>(v177, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v170, 6);
  (*(void (**)(void *, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v112 + 24))(v112, &v134, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v177[i + 2]) < 0)
      operator delete((void *)v177[i]);
  }
  v116 = v135;
  if (v135)
  {
    v117 = (unint64_t *)&v135->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = v189[0];
  v189[0] = 0;
  if (v119)
    (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
  if (v133 < 0)
    operator delete(v132[0]);
  v120 = *a3;
  v130 = __p;
  if (__p)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v122 = (std::__shared_weak_count_vtbl *)__p;
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = v122;
  }
  else
  {
    v121 = 0;
  }
  v131 = v121;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v120 + 56))(v120, &v130);
  v123 = v131;
  if (v131)
  {
    v124 = (unint64_t *)&v131->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = __p;
  __p = 0;
  if (v126)
    (*(void (**)(void *))(*(_QWORD *)v126 + 8))(v126);
  if (v165)
  {
    v127 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v165);
    MEMORY[0x1E0C023A0](v127, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v162, 0);
  result = (uint64_t)v169;
  if (v169)
  {
    v129 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v169);
    return MEMORY[0x1E0C023A0](v129, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09877D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  uint64_t *v61;
  uint64_t v63;

  if (a50)
    (*(void (**)(void *))(*(_QWORD *)a50 + 8))(a50);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a56, 0);
  v63 = *v61;
  *v61 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a53, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a61, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::GreaterEqual::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  std::__shared_weak_count_vtbl *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  void ***v33;
  uint64_t v34;
  std::__shared_weak_count_vtbl *v35;
  void *v36;
  _QWORD *v37;
  void *v38;
  unint64_t v39;
  void **v40;
  void **v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  void **v49;
  void **v50;
  char *v51;
  __int128 v52;
  void **v53;
  void **v54;
  void *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  void *v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _OWORD *v73;
  unsigned __int8 *v74;
  void **v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  void **v91;
  std::__shared_weak_count *v92;
  std::__shared_weak_count_vtbl *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count_vtbl *v97;
  void **v98;
  std::__shared_weak_count *v99;
  std::__shared_weak_count_vtbl *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count_vtbl *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  void **v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  void **v111;
  void *v112;
  std::__shared_weak_count *v113;
  uint64_t v114;
  uint64_t i;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count_vtbl *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t result;
  uint64_t v129;
  void *v130;
  std::__shared_weak_count *v131;
  void *v132[2];
  char v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  void **v136;
  std::__shared_weak_count *v137;
  void *v138[2];
  char v139;
  void *v140[2];
  char v141;
  std::__shared_weak_count_vtbl *v142;
  std::__shared_weak_count *v143;
  void *v144[2];
  char v145;
  void *v146[2];
  char v147;
  std::__shared_weak_count_vtbl *v148;
  std::__shared_weak_count *v149;
  void *v150;
  std::__shared_weak_count *v151;
  __n128 v152;
  __int128 v153;
  __int128 v154;
  void *v155[2];
  uint64_t v156;
  __n128 v157;
  __n128 v158;
  void *__p;
  void *v160;
  _QWORD *v161;
  void *v162;
  void *v163;
  _QWORD *v164;
  void *v165;
  void *v166;
  _QWORD *v167;
  __n128 v168;
  _QWORD *v169;
  void **v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD v173[3];
  uint64_t v174[3];
  uint64_t v175[3];
  uint64_t v176[3];
  _QWORD v177[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *v179;
  void (__cdecl **v180)(std::__shared_weak_count *__hidden);
  _QWORD v181[3];
  _QWORD *v182;
  _QWORD v183[3];
  _QWORD *v184;
  _BYTE v185[24];
  _BYTE *v186;
  _QWORD v187[3];
  _QWORD *v188;
  uint64_t v189[2];

  v189[1] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v169 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v179 = (std::__shared_weak_count_vtbl *)&v8->~__shared_weak_count_0;
  v180 = &v8->~__shared_weak_count_0;
  v170 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v165 = v10;
  *v10 = v9;
  v166 = v10 + 1;
  v167 = v10 + 1;
  v171 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v165);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v162 = v12;
  *v12 = v11;
  v163 = v12 + 1;
  v164 = v12 + 1;
  v172 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v162);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v160 = v14 + 1;
  v161 = v14 + 1;
  v173[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v170, 4, &v168);
  MIL::IRParameter::Make(&v168, v189);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", v189);
  v15 = v189[0];
  v189[0] = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v168.n128_u64[1];
  if (v168.n128_u64[1])
  {
    v17 = (unint64_t *)(v168.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v160 = __p;
    operator delete(__p);
  }
  if (v162)
  {
    v163 = v162;
    operator delete(v162);
  }
  if (v165)
  {
    v166 = v165;
    operator delete(v165);
  }
  if (Scalar)
  {
    v179 = Scalar;
    operator delete(Scalar);
  }
  v19 = v169;
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v21;
  v21->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v20;
  v179 = (std::__shared_weak_count_vtbl *)&v21->~__shared_weak_count_0;
  v180 = &v21->~__shared_weak_count_0;
  v170 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  v165 = v23;
  *v23 = v22;
  v166 = v23 + 1;
  v167 = v23 + 1;
  v171 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v165);
  v24 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v25 = operator new(8uLL);
  v162 = v25;
  *v25 = v24;
  v163 = v25 + 1;
  v164 = v25 + 1;
  v172 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v162);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(8uLL);
  __p = v27;
  *v27 = v26;
  v160 = v27 + 1;
  v161 = v27 + 1;
  v173[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v170, 4, &v158);
  MIL::IRParameter::Make(&v158, v189);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v19, "y", v189);
  v28 = v189[0];
  v189[0] = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  v29 = (std::__shared_weak_count *)v158.n128_u64[1];
  if (v158.n128_u64[1])
  {
    v30 = (unint64_t *)(v158.n128_u64[1] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (__p)
  {
    v160 = __p;
    operator delete(__p);
  }
  if (v162)
  {
    v163 = v162;
    operator delete(v162);
  }
  if (v165)
  {
    v166 = v165;
    operator delete(v165);
  }
  if (Scalar)
  {
    v179 = Scalar;
    operator delete(Scalar);
  }
  v162 = 0;
  v32 = operator new();
  *(_QWORD *)v32 = 0;
  *(_QWORD *)(v32 + 8) = 0;
  *(_QWORD *)(v32 + 16) = 0;
  v170 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v162, (void **)v32);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v170, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)v162, 1uLL);
  v33 = (void ***)v162;
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v35;
  v35->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v34;
  v179 = (std::__shared_weak_count_vtbl *)&v35->~__shared_weak_count_0;
  v180 = &v35->~__shared_weak_count_0;
  v189[0] = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)v189, 1, &v157);
  MIL::IRParameter::Make(&v157, (uint64_t *)&__p);
  v36 = __p;
  v165 = __p;
  if (__p)
  {
    v37 = (_QWORD *)operator new();
    v38 = __p;
    *v37 = &unk_1EA99F888;
    v37[1] = 0;
    v37[2] = 0;
    v37[3] = v38;
  }
  else
  {
    v37 = 0;
  }
  v166 = v37;
  __p = 0;
  v39 = (unint64_t)v33[2];
  v40 = v33[1];
  if ((unint64_t)v40 >= v39)
  {
    v42 = ((char *)v40 - (char *)*v33) >> 4;
    v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v44 = v39 - (_QWORD)*v33;
    if (v44 >> 3 > v43)
      v43 = v44 >> 3;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
      v45 = 0xFFFFFFFFFFFFFFFLL;
    else
      v45 = v43;
    v173[1] = v33 + 2;
    v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v33 + 2), v45);
    v48 = &v46[16 * v42];
    *(_QWORD *)v48 = v36;
    *((_QWORD *)v48 + 1) = v37;
    v165 = 0;
    v166 = 0;
    v50 = *v33;
    v49 = v33[1];
    if (v49 == *v33)
    {
      v53 = v33[1];
      v51 = &v46[16 * v42];
    }
    else
    {
      v51 = &v46[16 * v42];
      do
      {
        v52 = *((_OWORD *)v49 - 1);
        v49 -= 2;
        *((_OWORD *)v51 - 1) = v52;
        v51 -= 16;
        *v49 = 0;
        v49[1] = 0;
      }
      while (v49 != v50);
      v53 = *v33;
      v49 = v33[1];
    }
    v41 = (void **)(v48 + 16);
    *v33 = (void **)v51;
    v170 = v53;
    v171 = (uint64_t)v53;
    v33[1] = (void **)(v48 + 16);
    v172 = (uint64_t)v49;
    v54 = v33[2];
    v33[2] = (void **)&v46[16 * v47];
    v173[0] = v54;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v170);
  }
  else
  {
    *v40 = v36;
    v40[1] = v37;
    v41 = v40 + 2;
    v165 = 0;
    v166 = 0;
  }
  v33[1] = v41;
  v55 = __p;
  __p = 0;
  if (v55)
    (*(void (**)(void *))(*(_QWORD *)v55 + 8))(v55);
  v56 = (std::__shared_weak_count *)v157.n128_u64[1];
  if (v157.n128_u64[1])
  {
    v57 = (unint64_t *)(v157.n128_u64[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (Scalar)
  {
    v179 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v155 = *(_OWORD *)a2;
  v156 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v59 = (uint64_t)v169;
  *(_QWORD *)&v154 = v169;
  if (v169)
  {
    v60 = (_QWORD *)operator new();
    *v60 = &unk_1EA99F8E8;
    v60[1] = 0;
    v60[2] = 0;
    v60[3] = v59;
  }
  else
  {
    v60 = 0;
  }
  *((_QWORD *)&v154 + 1) = v60;
  v169 = 0;
  *(_QWORD *)&v153 = v162;
  if (v162)
  {
    v61 = (_QWORD *)operator new();
    v62 = v162;
    *v61 = &unk_1EA99F948;
    v61[1] = 0;
    v61[2] = 0;
    v61[3] = v62;
  }
  else
  {
    v61 = 0;
  }
  *((_QWORD *)&v153 + 1) = v61;
  v162 = 0;
  v187[0] = &unk_1EA99FAC8;
  v187[1] = MIL::Validation::ValidateViaTypeInference;
  v188 = v187;
  v186 = 0;
  MIL::IROperator::Make((__int128 *)v155, &v154, &v153, (uint64_t)v187, (uint64_t)v185, a3);
  v63 = v186;
  if (v186 == v185)
  {
    v64 = 4;
    v63 = v185;
  }
  else
  {
    if (!v186)
      goto LABEL_68;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_68:
  v65 = v188;
  if (v188 == v187)
  {
    v66 = 4;
    v65 = v187;
    goto LABEL_72;
  }
  if (v188)
  {
    v66 = 5;
LABEL_72:
    (*(void (**)(void))(*v65 + 8 * v66))();
  }
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v153 + 1);
  if (*((_QWORD *)&v153 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v153 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v154 + 1);
  if (*((_QWORD *)&v154 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v154 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (SHIBYTE(v156) < 0)
    operator delete(v155[0]);
  v165 = 0;
  v73 = (_OWORD *)operator new();
  *v73 = 0u;
  v73[1] = 0u;
  *((_DWORD *)v73 + 8) = 1065353216;
  v165 = v73;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v152);
  MIL::IRParameter::Make(&v152, (uint64_t *)&v170);
  v74 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v73, "minimum_compute_type", (uint64_t *)&v170);
  v75 = v170;
  v170 = 0;
  if (v75)
    (*((void (**)(void **))*v75 + 1))(v75);
  v76 = (std::__shared_weak_count *)v152.n128_u64[1];
  if (v152.n128_u64[1])
  {
    v77 = (unint64_t *)(v152.n128_u64[1] + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v74 + 5) + 32))(*((_QWORD *)v74 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v74 + 5) + 48))(*((_QWORD *)v74 + 5), 1);
  v79 = *a3;
  v80 = (std::__shared_weak_count_vtbl *)v165;
  v150 = v165;
  if (v165)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v80;
  }
  else
  {
    v81 = 0;
  }
  v151 = v81;
  v165 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v79 + 184))(v79, &v150);
  v82 = v151;
  if (v151)
  {
    p_shared_owners = (unint64_t *)&v151->__shared_owners_;
    do
      v84 = __ldaxr(p_shared_owners);
    while (__stlxr(v84 - 1, p_shared_owners));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = *a3;
  v183[0] = &off_1EA99FBD8;
  v183[1] = MIL::Operators::Common::ios18::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput;
  v184 = v183;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v85 + 200))(v85, v183);
  v86 = v184;
  if (v184 == v183)
  {
    v87 = 4;
    v86 = v183;
  }
  else
  {
    if (!v184)
      goto LABEL_105;
    v87 = 5;
  }
  (*(void (**)(void))(*v86 + 8 * v87))();
LABEL_105:
  v88 = *a3;
  v181[0] = &off_1EA9A00F8;
  v181[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceGreaterEqual;
  v182 = v181;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v88 + 216))(v88, v181);
  v89 = v182;
  if (v182 == v181)
  {
    v90 = 4;
    v89 = v181;
  }
  else
  {
    if (!v182)
      goto LABEL_110;
    v90 = 5;
  }
  (*(void (**)(void))(*v89 + 8 * v90))();
LABEL_110:
  MIL::Validation::TensorDTypeConstraints::Make(&v170);
  v91 = v170;
  std::string::basic_string[abi:ne180100]<0>(v146, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v146, 0, (uint64_t *)&Scalar);
  v148 = Scalar;
  if (Scalar)
  {
    v92 = (std::__shared_weak_count *)operator new();
    v93 = Scalar;
    v92->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v92->__shared_owners_ = 0;
    v92->__shared_weak_owners_ = 0;
    v92[1].__vftable = v93;
  }
  else
  {
    v92 = 0;
  }
  v149 = v92;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v144, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v91 + 3))(v91, &v148, v144);
  if (v145 < 0)
    operator delete(v144[0]);
  v94 = v149;
  if (v149)
  {
    v95 = (unint64_t *)&v149->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v97 = Scalar;
  Scalar = 0;
  if (v97)
    (*((void (**)(std::__shared_weak_count_vtbl *))v97->~__shared_weak_count + 1))(v97);
  if (v147 < 0)
    operator delete(v146[0]);
  v98 = v170;
  std::string::basic_string[abi:ne180100]<0>(v140, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v140, 0, (uint64_t *)&Scalar);
  v142 = Scalar;
  if (Scalar)
  {
    v99 = (std::__shared_weak_count *)operator new();
    v100 = Scalar;
    v99->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v99->__shared_owners_ = 0;
    v99->__shared_weak_owners_ = 0;
    v99[1].__vftable = v100;
  }
  else
  {
    v99 = 0;
  }
  v143 = v99;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v138, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v98 + 3))(v98, &v142, v138);
  if (v139 < 0)
    operator delete(v138[0]);
  v101 = v143;
  if (v143)
  {
    v102 = (unint64_t *)&v143->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = Scalar;
  Scalar = 0;
  if (v104)
    (*((void (**)(std::__shared_weak_count_vtbl *))v104->~__shared_weak_count + 1))(v104);
  if (v141 < 0)
    operator delete(v140[0]);
  v105 = *a3;
  v136 = v170;
  if (v170)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = v170;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v137 = v106;
  v170 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v105 + 56))(v105, &v136);
  v108 = v137;
  if (v137)
  {
    v109 = (unint64_t *)&v137->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v170;
  v170 = 0;
  if (v111)
    (*((void (**)(void **))*v111 + 1))(v111);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v112 = __p;
  std::string::basic_string[abi:ne180100]<0>(v132, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v132, 1, v189);
  v134 = v189[0];
  if (v189[0])
  {
    v113 = (std::__shared_weak_count *)operator new();
    v114 = v189[0];
    v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v113->__shared_owners_ = 0;
    v113->__shared_weak_owners_ = 0;
    v113[1].__vftable = (std::__shared_weak_count_vtbl *)v114;
  }
  else
  {
    v113 = 0;
  }
  v135 = v113;
  v189[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v170, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v173, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v174, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v175, "int32");
  std::string::basic_string[abi:ne180100]<0>(v176, "int8");
  std::string::basic_string[abi:ne180100]<0>(v177, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v170, 6);
  (*(void (**)(void *, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v112 + 24))(v112, &v134, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v177[i + 2]) < 0)
      operator delete((void *)v177[i]);
  }
  v116 = v135;
  if (v135)
  {
    v117 = (unint64_t *)&v135->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = v189[0];
  v189[0] = 0;
  if (v119)
    (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
  if (v133 < 0)
    operator delete(v132[0]);
  v120 = *a3;
  v130 = __p;
  if (__p)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v122 = (std::__shared_weak_count_vtbl *)__p;
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = v122;
  }
  else
  {
    v121 = 0;
  }
  v131 = v121;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v120 + 56))(v120, &v130);
  v123 = v131;
  if (v131)
  {
    v124 = (unint64_t *)&v131->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = __p;
  __p = 0;
  if (v126)
    (*(void (**)(void *))(*(_QWORD *)v126 + 8))(v126);
  if (v165)
  {
    v127 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v165);
    MEMORY[0x1E0C023A0](v127, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v162, 0);
  result = (uint64_t)v169;
  if (v169)
  {
    v129 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v169);
    return MEMORY[0x1E0C023A0](v129, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0988C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  uint64_t *v61;
  uint64_t v63;

  if (a50)
    (*(void (**)(void *))(*(_QWORD *)a50 + 8))(a50);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a56, 0);
  v63 = *v61;
  *v61 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a53, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a61, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::Less::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  std::__shared_weak_count_vtbl *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  void ***v33;
  uint64_t v34;
  std::__shared_weak_count_vtbl *v35;
  void *v36;
  _QWORD *v37;
  void *v38;
  unint64_t v39;
  void **v40;
  void **v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  void **v49;
  void **v50;
  char *v51;
  __int128 v52;
  void **v53;
  void **v54;
  void *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  void *v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _OWORD *v73;
  unsigned __int8 *v74;
  void **v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  void **v91;
  std::__shared_weak_count *v92;
  std::__shared_weak_count_vtbl *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count_vtbl *v97;
  void **v98;
  std::__shared_weak_count *v99;
  std::__shared_weak_count_vtbl *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count_vtbl *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  void **v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  void **v111;
  void *v112;
  std::__shared_weak_count *v113;
  uint64_t v114;
  uint64_t i;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count_vtbl *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t result;
  uint64_t v129;
  void *v130;
  std::__shared_weak_count *v131;
  void *v132[2];
  char v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  void **v136;
  std::__shared_weak_count *v137;
  void *v138[2];
  char v139;
  void *v140[2];
  char v141;
  std::__shared_weak_count_vtbl *v142;
  std::__shared_weak_count *v143;
  void *v144[2];
  char v145;
  void *v146[2];
  char v147;
  std::__shared_weak_count_vtbl *v148;
  std::__shared_weak_count *v149;
  void *v150;
  std::__shared_weak_count *v151;
  __n128 v152;
  __int128 v153;
  __int128 v154;
  void *v155[2];
  uint64_t v156;
  __n128 v157;
  __n128 v158;
  void *__p;
  void *v160;
  _QWORD *v161;
  void *v162;
  void *v163;
  _QWORD *v164;
  void *v165;
  void *v166;
  _QWORD *v167;
  __n128 v168;
  _QWORD *v169;
  void **v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD v173[3];
  uint64_t v174[3];
  uint64_t v175[3];
  uint64_t v176[3];
  _QWORD v177[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *v179;
  void (__cdecl **v180)(std::__shared_weak_count *__hidden);
  _QWORD v181[3];
  _QWORD *v182;
  _QWORD v183[3];
  _QWORD *v184;
  _BYTE v185[24];
  _BYTE *v186;
  _QWORD v187[3];
  _QWORD *v188;
  uint64_t v189[2];

  v189[1] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v169 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v179 = (std::__shared_weak_count_vtbl *)&v8->~__shared_weak_count_0;
  v180 = &v8->~__shared_weak_count_0;
  v170 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v165 = v10;
  *v10 = v9;
  v166 = v10 + 1;
  v167 = v10 + 1;
  v171 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v165);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v162 = v12;
  *v12 = v11;
  v163 = v12 + 1;
  v164 = v12 + 1;
  v172 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v162);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v160 = v14 + 1;
  v161 = v14 + 1;
  v173[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v170, 4, &v168);
  MIL::IRParameter::Make(&v168, v189);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", v189);
  v15 = v189[0];
  v189[0] = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v168.n128_u64[1];
  if (v168.n128_u64[1])
  {
    v17 = (unint64_t *)(v168.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v160 = __p;
    operator delete(__p);
  }
  if (v162)
  {
    v163 = v162;
    operator delete(v162);
  }
  if (v165)
  {
    v166 = v165;
    operator delete(v165);
  }
  if (Scalar)
  {
    v179 = Scalar;
    operator delete(Scalar);
  }
  v19 = v169;
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v21;
  v21->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v20;
  v179 = (std::__shared_weak_count_vtbl *)&v21->~__shared_weak_count_0;
  v180 = &v21->~__shared_weak_count_0;
  v170 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  v165 = v23;
  *v23 = v22;
  v166 = v23 + 1;
  v167 = v23 + 1;
  v171 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v165);
  v24 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v25 = operator new(8uLL);
  v162 = v25;
  *v25 = v24;
  v163 = v25 + 1;
  v164 = v25 + 1;
  v172 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v162);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(8uLL);
  __p = v27;
  *v27 = v26;
  v160 = v27 + 1;
  v161 = v27 + 1;
  v173[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v170, 4, &v158);
  MIL::IRParameter::Make(&v158, v189);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v19, "y", v189);
  v28 = v189[0];
  v189[0] = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  v29 = (std::__shared_weak_count *)v158.n128_u64[1];
  if (v158.n128_u64[1])
  {
    v30 = (unint64_t *)(v158.n128_u64[1] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (__p)
  {
    v160 = __p;
    operator delete(__p);
  }
  if (v162)
  {
    v163 = v162;
    operator delete(v162);
  }
  if (v165)
  {
    v166 = v165;
    operator delete(v165);
  }
  if (Scalar)
  {
    v179 = Scalar;
    operator delete(Scalar);
  }
  v162 = 0;
  v32 = operator new();
  *(_QWORD *)v32 = 0;
  *(_QWORD *)(v32 + 8) = 0;
  *(_QWORD *)(v32 + 16) = 0;
  v170 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v162, (void **)v32);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v170, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)v162, 1uLL);
  v33 = (void ***)v162;
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v35;
  v35->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v34;
  v179 = (std::__shared_weak_count_vtbl *)&v35->~__shared_weak_count_0;
  v180 = &v35->~__shared_weak_count_0;
  v189[0] = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)v189, 1, &v157);
  MIL::IRParameter::Make(&v157, (uint64_t *)&__p);
  v36 = __p;
  v165 = __p;
  if (__p)
  {
    v37 = (_QWORD *)operator new();
    v38 = __p;
    *v37 = &unk_1EA99F888;
    v37[1] = 0;
    v37[2] = 0;
    v37[3] = v38;
  }
  else
  {
    v37 = 0;
  }
  v166 = v37;
  __p = 0;
  v39 = (unint64_t)v33[2];
  v40 = v33[1];
  if ((unint64_t)v40 >= v39)
  {
    v42 = ((char *)v40 - (char *)*v33) >> 4;
    v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v44 = v39 - (_QWORD)*v33;
    if (v44 >> 3 > v43)
      v43 = v44 >> 3;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
      v45 = 0xFFFFFFFFFFFFFFFLL;
    else
      v45 = v43;
    v173[1] = v33 + 2;
    v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v33 + 2), v45);
    v48 = &v46[16 * v42];
    *(_QWORD *)v48 = v36;
    *((_QWORD *)v48 + 1) = v37;
    v165 = 0;
    v166 = 0;
    v50 = *v33;
    v49 = v33[1];
    if (v49 == *v33)
    {
      v53 = v33[1];
      v51 = &v46[16 * v42];
    }
    else
    {
      v51 = &v46[16 * v42];
      do
      {
        v52 = *((_OWORD *)v49 - 1);
        v49 -= 2;
        *((_OWORD *)v51 - 1) = v52;
        v51 -= 16;
        *v49 = 0;
        v49[1] = 0;
      }
      while (v49 != v50);
      v53 = *v33;
      v49 = v33[1];
    }
    v41 = (void **)(v48 + 16);
    *v33 = (void **)v51;
    v170 = v53;
    v171 = (uint64_t)v53;
    v33[1] = (void **)(v48 + 16);
    v172 = (uint64_t)v49;
    v54 = v33[2];
    v33[2] = (void **)&v46[16 * v47];
    v173[0] = v54;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v170);
  }
  else
  {
    *v40 = v36;
    v40[1] = v37;
    v41 = v40 + 2;
    v165 = 0;
    v166 = 0;
  }
  v33[1] = v41;
  v55 = __p;
  __p = 0;
  if (v55)
    (*(void (**)(void *))(*(_QWORD *)v55 + 8))(v55);
  v56 = (std::__shared_weak_count *)v157.n128_u64[1];
  if (v157.n128_u64[1])
  {
    v57 = (unint64_t *)(v157.n128_u64[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (Scalar)
  {
    v179 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v155 = *(_OWORD *)a2;
  v156 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v59 = (uint64_t)v169;
  *(_QWORD *)&v154 = v169;
  if (v169)
  {
    v60 = (_QWORD *)operator new();
    *v60 = &unk_1EA99F8E8;
    v60[1] = 0;
    v60[2] = 0;
    v60[3] = v59;
  }
  else
  {
    v60 = 0;
  }
  *((_QWORD *)&v154 + 1) = v60;
  v169 = 0;
  *(_QWORD *)&v153 = v162;
  if (v162)
  {
    v61 = (_QWORD *)operator new();
    v62 = v162;
    *v61 = &unk_1EA99F948;
    v61[1] = 0;
    v61[2] = 0;
    v61[3] = v62;
  }
  else
  {
    v61 = 0;
  }
  *((_QWORD *)&v153 + 1) = v61;
  v162 = 0;
  v187[0] = &unk_1EA99FAC8;
  v187[1] = MIL::Validation::ValidateViaTypeInference;
  v188 = v187;
  v186 = 0;
  MIL::IROperator::Make((__int128 *)v155, &v154, &v153, (uint64_t)v187, (uint64_t)v185, a3);
  v63 = v186;
  if (v186 == v185)
  {
    v64 = 4;
    v63 = v185;
  }
  else
  {
    if (!v186)
      goto LABEL_68;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_68:
  v65 = v188;
  if (v188 == v187)
  {
    v66 = 4;
    v65 = v187;
    goto LABEL_72;
  }
  if (v188)
  {
    v66 = 5;
LABEL_72:
    (*(void (**)(void))(*v65 + 8 * v66))();
  }
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v153 + 1);
  if (*((_QWORD *)&v153 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v153 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v154 + 1);
  if (*((_QWORD *)&v154 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v154 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (SHIBYTE(v156) < 0)
    operator delete(v155[0]);
  v165 = 0;
  v73 = (_OWORD *)operator new();
  *v73 = 0u;
  v73[1] = 0u;
  *((_DWORD *)v73 + 8) = 1065353216;
  v165 = v73;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v152);
  MIL::IRParameter::Make(&v152, (uint64_t *)&v170);
  v74 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v73, "minimum_compute_type", (uint64_t *)&v170);
  v75 = v170;
  v170 = 0;
  if (v75)
    (*((void (**)(void **))*v75 + 1))(v75);
  v76 = (std::__shared_weak_count *)v152.n128_u64[1];
  if (v152.n128_u64[1])
  {
    v77 = (unint64_t *)(v152.n128_u64[1] + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v74 + 5) + 32))(*((_QWORD *)v74 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v74 + 5) + 48))(*((_QWORD *)v74 + 5), 1);
  v79 = *a3;
  v80 = (std::__shared_weak_count_vtbl *)v165;
  v150 = v165;
  if (v165)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v80;
  }
  else
  {
    v81 = 0;
  }
  v151 = v81;
  v165 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v79 + 184))(v79, &v150);
  v82 = v151;
  if (v151)
  {
    p_shared_owners = (unint64_t *)&v151->__shared_owners_;
    do
      v84 = __ldaxr(p_shared_owners);
    while (__stlxr(v84 - 1, p_shared_owners));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = *a3;
  v183[0] = &off_1EA99FBD8;
  v183[1] = MIL::Operators::Common::ios18::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput;
  v184 = v183;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v85 + 200))(v85, v183);
  v86 = v184;
  if (v184 == v183)
  {
    v87 = 4;
    v86 = v183;
  }
  else
  {
    if (!v184)
      goto LABEL_105;
    v87 = 5;
  }
  (*(void (**)(void))(*v86 + 8 * v87))();
LABEL_105:
  v88 = *a3;
  v181[0] = &off_1EA9A00F8;
  v181[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceLess;
  v182 = v181;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v88 + 216))(v88, v181);
  v89 = v182;
  if (v182 == v181)
  {
    v90 = 4;
    v89 = v181;
  }
  else
  {
    if (!v182)
      goto LABEL_110;
    v90 = 5;
  }
  (*(void (**)(void))(*v89 + 8 * v90))();
LABEL_110:
  MIL::Validation::TensorDTypeConstraints::Make(&v170);
  v91 = v170;
  std::string::basic_string[abi:ne180100]<0>(v146, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v146, 0, (uint64_t *)&Scalar);
  v148 = Scalar;
  if (Scalar)
  {
    v92 = (std::__shared_weak_count *)operator new();
    v93 = Scalar;
    v92->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v92->__shared_owners_ = 0;
    v92->__shared_weak_owners_ = 0;
    v92[1].__vftable = v93;
  }
  else
  {
    v92 = 0;
  }
  v149 = v92;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v144, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v91 + 3))(v91, &v148, v144);
  if (v145 < 0)
    operator delete(v144[0]);
  v94 = v149;
  if (v149)
  {
    v95 = (unint64_t *)&v149->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v97 = Scalar;
  Scalar = 0;
  if (v97)
    (*((void (**)(std::__shared_weak_count_vtbl *))v97->~__shared_weak_count + 1))(v97);
  if (v147 < 0)
    operator delete(v146[0]);
  v98 = v170;
  std::string::basic_string[abi:ne180100]<0>(v140, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v140, 0, (uint64_t *)&Scalar);
  v142 = Scalar;
  if (Scalar)
  {
    v99 = (std::__shared_weak_count *)operator new();
    v100 = Scalar;
    v99->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v99->__shared_owners_ = 0;
    v99->__shared_weak_owners_ = 0;
    v99[1].__vftable = v100;
  }
  else
  {
    v99 = 0;
  }
  v143 = v99;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v138, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v98 + 3))(v98, &v142, v138);
  if (v139 < 0)
    operator delete(v138[0]);
  v101 = v143;
  if (v143)
  {
    v102 = (unint64_t *)&v143->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = Scalar;
  Scalar = 0;
  if (v104)
    (*((void (**)(std::__shared_weak_count_vtbl *))v104->~__shared_weak_count + 1))(v104);
  if (v141 < 0)
    operator delete(v140[0]);
  v105 = *a3;
  v136 = v170;
  if (v170)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = v170;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v137 = v106;
  v170 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v105 + 56))(v105, &v136);
  v108 = v137;
  if (v137)
  {
    v109 = (unint64_t *)&v137->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v170;
  v170 = 0;
  if (v111)
    (*((void (**)(void **))*v111 + 1))(v111);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v112 = __p;
  std::string::basic_string[abi:ne180100]<0>(v132, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v132, 1, v189);
  v134 = v189[0];
  if (v189[0])
  {
    v113 = (std::__shared_weak_count *)operator new();
    v114 = v189[0];
    v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v113->__shared_owners_ = 0;
    v113->__shared_weak_owners_ = 0;
    v113[1].__vftable = (std::__shared_weak_count_vtbl *)v114;
  }
  else
  {
    v113 = 0;
  }
  v135 = v113;
  v189[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v170, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v173, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v174, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v175, "int32");
  std::string::basic_string[abi:ne180100]<0>(v176, "int8");
  std::string::basic_string[abi:ne180100]<0>(v177, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v170, 6);
  (*(void (**)(void *, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v112 + 24))(v112, &v134, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v177[i + 2]) < 0)
      operator delete((void *)v177[i]);
  }
  v116 = v135;
  if (v135)
  {
    v117 = (unint64_t *)&v135->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = v189[0];
  v189[0] = 0;
  if (v119)
    (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
  if (v133 < 0)
    operator delete(v132[0]);
  v120 = *a3;
  v130 = __p;
  if (__p)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v122 = (std::__shared_weak_count_vtbl *)__p;
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = v122;
  }
  else
  {
    v121 = 0;
  }
  v131 = v121;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v120 + 56))(v120, &v130);
  v123 = v131;
  if (v131)
  {
    v124 = (unint64_t *)&v131->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = __p;
  __p = 0;
  if (v126)
    (*(void (**)(void *))(*(_QWORD *)v126 + 8))(v126);
  if (v165)
  {
    v127 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v165);
    MEMORY[0x1E0C023A0](v127, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v162, 0);
  result = (uint64_t)v169;
  if (v169)
  {
    v129 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v169);
    return MEMORY[0x1E0C023A0](v129, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E098A054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  uint64_t *v61;
  uint64_t v63;

  if (a50)
    (*(void (**)(void *))(*(_QWORD *)a50 + 8))(a50);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a56, 0);
  v63 = *v61;
  *v61 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a53, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a61, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::LessEqual::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  std::__shared_weak_count_vtbl *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  void ***v33;
  uint64_t v34;
  std::__shared_weak_count_vtbl *v35;
  void *v36;
  _QWORD *v37;
  void *v38;
  unint64_t v39;
  void **v40;
  void **v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  void **v49;
  void **v50;
  char *v51;
  __int128 v52;
  void **v53;
  void **v54;
  void *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  void *v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _OWORD *v73;
  unsigned __int8 *v74;
  void **v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  void **v91;
  std::__shared_weak_count *v92;
  std::__shared_weak_count_vtbl *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count_vtbl *v97;
  void **v98;
  std::__shared_weak_count *v99;
  std::__shared_weak_count_vtbl *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count_vtbl *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  void **v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  void **v111;
  void *v112;
  std::__shared_weak_count *v113;
  uint64_t v114;
  uint64_t i;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count_vtbl *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t result;
  uint64_t v129;
  void *v130;
  std::__shared_weak_count *v131;
  void *v132[2];
  char v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  void **v136;
  std::__shared_weak_count *v137;
  void *v138[2];
  char v139;
  void *v140[2];
  char v141;
  std::__shared_weak_count_vtbl *v142;
  std::__shared_weak_count *v143;
  void *v144[2];
  char v145;
  void *v146[2];
  char v147;
  std::__shared_weak_count_vtbl *v148;
  std::__shared_weak_count *v149;
  void *v150;
  std::__shared_weak_count *v151;
  __n128 v152;
  __int128 v153;
  __int128 v154;
  void *v155[2];
  uint64_t v156;
  __n128 v157;
  __n128 v158;
  void *__p;
  void *v160;
  _QWORD *v161;
  void *v162;
  void *v163;
  _QWORD *v164;
  void *v165;
  void *v166;
  _QWORD *v167;
  __n128 v168;
  _QWORD *v169;
  void **v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD v173[3];
  uint64_t v174[3];
  uint64_t v175[3];
  uint64_t v176[3];
  _QWORD v177[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *v179;
  void (__cdecl **v180)(std::__shared_weak_count *__hidden);
  _QWORD v181[3];
  _QWORD *v182;
  _QWORD v183[3];
  _QWORD *v184;
  _BYTE v185[24];
  _BYTE *v186;
  _QWORD v187[3];
  _QWORD *v188;
  uint64_t v189[2];

  v189[1] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v169 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v179 = (std::__shared_weak_count_vtbl *)&v8->~__shared_weak_count_0;
  v180 = &v8->~__shared_weak_count_0;
  v170 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v165 = v10;
  *v10 = v9;
  v166 = v10 + 1;
  v167 = v10 + 1;
  v171 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v165);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v162 = v12;
  *v12 = v11;
  v163 = v12 + 1;
  v164 = v12 + 1;
  v172 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v162);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v160 = v14 + 1;
  v161 = v14 + 1;
  v173[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v170, 4, &v168);
  MIL::IRParameter::Make(&v168, v189);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", v189);
  v15 = v189[0];
  v189[0] = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v168.n128_u64[1];
  if (v168.n128_u64[1])
  {
    v17 = (unint64_t *)(v168.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v160 = __p;
    operator delete(__p);
  }
  if (v162)
  {
    v163 = v162;
    operator delete(v162);
  }
  if (v165)
  {
    v166 = v165;
    operator delete(v165);
  }
  if (Scalar)
  {
    v179 = Scalar;
    operator delete(Scalar);
  }
  v19 = v169;
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v21;
  v21->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v20;
  v179 = (std::__shared_weak_count_vtbl *)&v21->~__shared_weak_count_0;
  v180 = &v21->~__shared_weak_count_0;
  v170 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  v165 = v23;
  *v23 = v22;
  v166 = v23 + 1;
  v167 = v23 + 1;
  v171 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v165);
  v24 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v25 = operator new(8uLL);
  v162 = v25;
  *v25 = v24;
  v163 = v25 + 1;
  v164 = v25 + 1;
  v172 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v162);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(8uLL);
  __p = v27;
  *v27 = v26;
  v160 = v27 + 1;
  v161 = v27 + 1;
  v173[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v170, 4, &v158);
  MIL::IRParameter::Make(&v158, v189);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v19, "y", v189);
  v28 = v189[0];
  v189[0] = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  v29 = (std::__shared_weak_count *)v158.n128_u64[1];
  if (v158.n128_u64[1])
  {
    v30 = (unint64_t *)(v158.n128_u64[1] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (__p)
  {
    v160 = __p;
    operator delete(__p);
  }
  if (v162)
  {
    v163 = v162;
    operator delete(v162);
  }
  if (v165)
  {
    v166 = v165;
    operator delete(v165);
  }
  if (Scalar)
  {
    v179 = Scalar;
    operator delete(Scalar);
  }
  v162 = 0;
  v32 = operator new();
  *(_QWORD *)v32 = 0;
  *(_QWORD *)(v32 + 8) = 0;
  *(_QWORD *)(v32 + 16) = 0;
  v170 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v162, (void **)v32);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v170, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)v162, 1uLL);
  v33 = (void ***)v162;
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v35;
  v35->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v34;
  v179 = (std::__shared_weak_count_vtbl *)&v35->~__shared_weak_count_0;
  v180 = &v35->~__shared_weak_count_0;
  v189[0] = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)v189, 1, &v157);
  MIL::IRParameter::Make(&v157, (uint64_t *)&__p);
  v36 = __p;
  v165 = __p;
  if (__p)
  {
    v37 = (_QWORD *)operator new();
    v38 = __p;
    *v37 = &unk_1EA99F888;
    v37[1] = 0;
    v37[2] = 0;
    v37[3] = v38;
  }
  else
  {
    v37 = 0;
  }
  v166 = v37;
  __p = 0;
  v39 = (unint64_t)v33[2];
  v40 = v33[1];
  if ((unint64_t)v40 >= v39)
  {
    v42 = ((char *)v40 - (char *)*v33) >> 4;
    v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v44 = v39 - (_QWORD)*v33;
    if (v44 >> 3 > v43)
      v43 = v44 >> 3;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
      v45 = 0xFFFFFFFFFFFFFFFLL;
    else
      v45 = v43;
    v173[1] = v33 + 2;
    v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v33 + 2), v45);
    v48 = &v46[16 * v42];
    *(_QWORD *)v48 = v36;
    *((_QWORD *)v48 + 1) = v37;
    v165 = 0;
    v166 = 0;
    v50 = *v33;
    v49 = v33[1];
    if (v49 == *v33)
    {
      v53 = v33[1];
      v51 = &v46[16 * v42];
    }
    else
    {
      v51 = &v46[16 * v42];
      do
      {
        v52 = *((_OWORD *)v49 - 1);
        v49 -= 2;
        *((_OWORD *)v51 - 1) = v52;
        v51 -= 16;
        *v49 = 0;
        v49[1] = 0;
      }
      while (v49 != v50);
      v53 = *v33;
      v49 = v33[1];
    }
    v41 = (void **)(v48 + 16);
    *v33 = (void **)v51;
    v170 = v53;
    v171 = (uint64_t)v53;
    v33[1] = (void **)(v48 + 16);
    v172 = (uint64_t)v49;
    v54 = v33[2];
    v33[2] = (void **)&v46[16 * v47];
    v173[0] = v54;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v170);
  }
  else
  {
    *v40 = v36;
    v40[1] = v37;
    v41 = v40 + 2;
    v165 = 0;
    v166 = 0;
  }
  v33[1] = v41;
  v55 = __p;
  __p = 0;
  if (v55)
    (*(void (**)(void *))(*(_QWORD *)v55 + 8))(v55);
  v56 = (std::__shared_weak_count *)v157.n128_u64[1];
  if (v157.n128_u64[1])
  {
    v57 = (unint64_t *)(v157.n128_u64[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (Scalar)
  {
    v179 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v155 = *(_OWORD *)a2;
  v156 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v59 = (uint64_t)v169;
  *(_QWORD *)&v154 = v169;
  if (v169)
  {
    v60 = (_QWORD *)operator new();
    *v60 = &unk_1EA99F8E8;
    v60[1] = 0;
    v60[2] = 0;
    v60[3] = v59;
  }
  else
  {
    v60 = 0;
  }
  *((_QWORD *)&v154 + 1) = v60;
  v169 = 0;
  *(_QWORD *)&v153 = v162;
  if (v162)
  {
    v61 = (_QWORD *)operator new();
    v62 = v162;
    *v61 = &unk_1EA99F948;
    v61[1] = 0;
    v61[2] = 0;
    v61[3] = v62;
  }
  else
  {
    v61 = 0;
  }
  *((_QWORD *)&v153 + 1) = v61;
  v162 = 0;
  v187[0] = &unk_1EA99FAC8;
  v187[1] = MIL::Validation::ValidateViaTypeInference;
  v188 = v187;
  v186 = 0;
  MIL::IROperator::Make((__int128 *)v155, &v154, &v153, (uint64_t)v187, (uint64_t)v185, a3);
  v63 = v186;
  if (v186 == v185)
  {
    v64 = 4;
    v63 = v185;
  }
  else
  {
    if (!v186)
      goto LABEL_68;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_68:
  v65 = v188;
  if (v188 == v187)
  {
    v66 = 4;
    v65 = v187;
    goto LABEL_72;
  }
  if (v188)
  {
    v66 = 5;
LABEL_72:
    (*(void (**)(void))(*v65 + 8 * v66))();
  }
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v153 + 1);
  if (*((_QWORD *)&v153 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v153 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v154 + 1);
  if (*((_QWORD *)&v154 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v154 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (SHIBYTE(v156) < 0)
    operator delete(v155[0]);
  v165 = 0;
  v73 = (_OWORD *)operator new();
  *v73 = 0u;
  v73[1] = 0u;
  *((_DWORD *)v73 + 8) = 1065353216;
  v165 = v73;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v152);
  MIL::IRParameter::Make(&v152, (uint64_t *)&v170);
  v74 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v73, "minimum_compute_type", (uint64_t *)&v170);
  v75 = v170;
  v170 = 0;
  if (v75)
    (*((void (**)(void **))*v75 + 1))(v75);
  v76 = (std::__shared_weak_count *)v152.n128_u64[1];
  if (v152.n128_u64[1])
  {
    v77 = (unint64_t *)(v152.n128_u64[1] + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v74 + 5) + 32))(*((_QWORD *)v74 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v74 + 5) + 48))(*((_QWORD *)v74 + 5), 1);
  v79 = *a3;
  v80 = (std::__shared_weak_count_vtbl *)v165;
  v150 = v165;
  if (v165)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v80;
  }
  else
  {
    v81 = 0;
  }
  v151 = v81;
  v165 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v79 + 184))(v79, &v150);
  v82 = v151;
  if (v151)
  {
    p_shared_owners = (unint64_t *)&v151->__shared_owners_;
    do
      v84 = __ldaxr(p_shared_owners);
    while (__stlxr(v84 - 1, p_shared_owners));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = *a3;
  v183[0] = &off_1EA99FBD8;
  v183[1] = MIL::Operators::Common::ios18::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput;
  v184 = v183;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v85 + 200))(v85, v183);
  v86 = v184;
  if (v184 == v183)
  {
    v87 = 4;
    v86 = v183;
  }
  else
  {
    if (!v184)
      goto LABEL_105;
    v87 = 5;
  }
  (*(void (**)(void))(*v86 + 8 * v87))();
LABEL_105:
  v88 = *a3;
  v181[0] = &off_1EA9A00F8;
  v181[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceLessEqual;
  v182 = v181;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v88 + 216))(v88, v181);
  v89 = v182;
  if (v182 == v181)
  {
    v90 = 4;
    v89 = v181;
  }
  else
  {
    if (!v182)
      goto LABEL_110;
    v90 = 5;
  }
  (*(void (**)(void))(*v89 + 8 * v90))();
LABEL_110:
  MIL::Validation::TensorDTypeConstraints::Make(&v170);
  v91 = v170;
  std::string::basic_string[abi:ne180100]<0>(v146, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v146, 0, (uint64_t *)&Scalar);
  v148 = Scalar;
  if (Scalar)
  {
    v92 = (std::__shared_weak_count *)operator new();
    v93 = Scalar;
    v92->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v92->__shared_owners_ = 0;
    v92->__shared_weak_owners_ = 0;
    v92[1].__vftable = v93;
  }
  else
  {
    v92 = 0;
  }
  v149 = v92;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v144, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v91 + 3))(v91, &v148, v144);
  if (v145 < 0)
    operator delete(v144[0]);
  v94 = v149;
  if (v149)
  {
    v95 = (unint64_t *)&v149->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v97 = Scalar;
  Scalar = 0;
  if (v97)
    (*((void (**)(std::__shared_weak_count_vtbl *))v97->~__shared_weak_count + 1))(v97);
  if (v147 < 0)
    operator delete(v146[0]);
  v98 = v170;
  std::string::basic_string[abi:ne180100]<0>(v140, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v140, 0, (uint64_t *)&Scalar);
  v142 = Scalar;
  if (Scalar)
  {
    v99 = (std::__shared_weak_count *)operator new();
    v100 = Scalar;
    v99->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v99->__shared_owners_ = 0;
    v99->__shared_weak_owners_ = 0;
    v99[1].__vftable = v100;
  }
  else
  {
    v99 = 0;
  }
  v143 = v99;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v138, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v98 + 3))(v98, &v142, v138);
  if (v139 < 0)
    operator delete(v138[0]);
  v101 = v143;
  if (v143)
  {
    v102 = (unint64_t *)&v143->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = Scalar;
  Scalar = 0;
  if (v104)
    (*((void (**)(std::__shared_weak_count_vtbl *))v104->~__shared_weak_count + 1))(v104);
  if (v141 < 0)
    operator delete(v140[0]);
  v105 = *a3;
  v136 = v170;
  if (v170)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = v170;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v137 = v106;
  v170 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v105 + 56))(v105, &v136);
  v108 = v137;
  if (v137)
  {
    v109 = (unint64_t *)&v137->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v170;
  v170 = 0;
  if (v111)
    (*((void (**)(void **))*v111 + 1))(v111);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v112 = __p;
  std::string::basic_string[abi:ne180100]<0>(v132, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v132, 1, v189);
  v134 = v189[0];
  if (v189[0])
  {
    v113 = (std::__shared_weak_count *)operator new();
    v114 = v189[0];
    v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v113->__shared_owners_ = 0;
    v113->__shared_weak_owners_ = 0;
    v113[1].__vftable = (std::__shared_weak_count_vtbl *)v114;
  }
  else
  {
    v113 = 0;
  }
  v135 = v113;
  v189[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v170, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v173, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v174, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v175, "int32");
  std::string::basic_string[abi:ne180100]<0>(v176, "int8");
  std::string::basic_string[abi:ne180100]<0>(v177, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v170, 6);
  (*(void (**)(void *, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v112 + 24))(v112, &v134, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v177[i + 2]) < 0)
      operator delete((void *)v177[i]);
  }
  v116 = v135;
  if (v135)
  {
    v117 = (unint64_t *)&v135->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = v189[0];
  v189[0] = 0;
  if (v119)
    (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
  if (v133 < 0)
    operator delete(v132[0]);
  v120 = *a3;
  v130 = __p;
  if (__p)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v122 = (std::__shared_weak_count_vtbl *)__p;
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = v122;
  }
  else
  {
    v121 = 0;
  }
  v131 = v121;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v120 + 56))(v120, &v130);
  v123 = v131;
  if (v131)
  {
    v124 = (unint64_t *)&v131->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = __p;
  __p = 0;
  if (v126)
    (*(void (**)(void *))(*(_QWORD *)v126 + 8))(v126);
  if (v165)
  {
    v127 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v165);
    MEMORY[0x1E0C023A0](v127, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v162, 0);
  result = (uint64_t)v169;
  if (v169)
  {
    v129 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v169);
    return MEMORY[0x1E0C023A0](v129, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E098B494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  uint64_t *v61;
  uint64_t v63;

  if (a50)
    (*(void (**)(void *))(*(_QWORD *)a50 + 8))(a50);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a56, 0);
  v63 = *v61;
  *v61 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a53, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a61, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::NotEqual::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  std::__shared_weak_count_vtbl *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  void ***v33;
  uint64_t v34;
  std::__shared_weak_count_vtbl *v35;
  void *v36;
  _QWORD *v37;
  void *v38;
  unint64_t v39;
  void **v40;
  void **v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  void **v49;
  void **v50;
  char *v51;
  __int128 v52;
  void **v53;
  void **v54;
  void *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  void *v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _OWORD *v73;
  unsigned __int8 *v74;
  void **v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  void **v91;
  std::__shared_weak_count *v92;
  std::__shared_weak_count_vtbl *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count_vtbl *v97;
  void **v98;
  std::__shared_weak_count *v99;
  std::__shared_weak_count_vtbl *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count_vtbl *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  void **v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  void **v111;
  void *v112;
  std::__shared_weak_count *v113;
  uint64_t v114;
  uint64_t i;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count_vtbl *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t result;
  uint64_t v129;
  void *v130;
  std::__shared_weak_count *v131;
  void *v132[2];
  char v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  void **v136;
  std::__shared_weak_count *v137;
  void *v138[2];
  char v139;
  void *v140[2];
  char v141;
  std::__shared_weak_count_vtbl *v142;
  std::__shared_weak_count *v143;
  void *v144[2];
  char v145;
  void *v146[2];
  char v147;
  std::__shared_weak_count_vtbl *v148;
  std::__shared_weak_count *v149;
  void *v150;
  std::__shared_weak_count *v151;
  __n128 v152;
  __int128 v153;
  __int128 v154;
  void *v155[2];
  uint64_t v156;
  __n128 v157;
  __n128 v158;
  void *__p;
  void *v160;
  _QWORD *v161;
  void *v162;
  void *v163;
  _QWORD *v164;
  void *v165;
  void *v166;
  _QWORD *v167;
  __n128 v168;
  _QWORD *v169;
  void **v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD v173[3];
  uint64_t v174[3];
  uint64_t v175[3];
  uint64_t v176[3];
  _QWORD v177[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *v179;
  void (__cdecl **v180)(std::__shared_weak_count *__hidden);
  _QWORD v181[3];
  _QWORD *v182;
  _QWORD v183[3];
  _QWORD *v184;
  _BYTE v185[24];
  _BYTE *v186;
  _QWORD v187[3];
  _QWORD *v188;
  uint64_t v189[2];

  v189[1] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v169 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v179 = (std::__shared_weak_count_vtbl *)&v8->~__shared_weak_count_0;
  v180 = &v8->~__shared_weak_count_0;
  v170 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v165 = v10;
  *v10 = v9;
  v166 = v10 + 1;
  v167 = v10 + 1;
  v171 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v165);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v162 = v12;
  *v12 = v11;
  v163 = v12 + 1;
  v164 = v12 + 1;
  v172 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v162);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v160 = v14 + 1;
  v161 = v14 + 1;
  v173[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v170, 4, &v168);
  MIL::IRParameter::Make(&v168, v189);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", v189);
  v15 = v189[0];
  v189[0] = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v168.n128_u64[1];
  if (v168.n128_u64[1])
  {
    v17 = (unint64_t *)(v168.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v160 = __p;
    operator delete(__p);
  }
  if (v162)
  {
    v163 = v162;
    operator delete(v162);
  }
  if (v165)
  {
    v166 = v165;
    operator delete(v165);
  }
  if (Scalar)
  {
    v179 = Scalar;
    operator delete(Scalar);
  }
  v19 = v169;
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v21;
  v21->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v20;
  v179 = (std::__shared_weak_count_vtbl *)&v21->~__shared_weak_count_0;
  v180 = &v21->~__shared_weak_count_0;
  v170 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  v165 = v23;
  *v23 = v22;
  v166 = v23 + 1;
  v167 = v23 + 1;
  v171 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v165);
  v24 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v25 = operator new(8uLL);
  v162 = v25;
  *v25 = v24;
  v163 = v25 + 1;
  v164 = v25 + 1;
  v172 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v162);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(8uLL);
  __p = v27;
  *v27 = v26;
  v160 = v27 + 1;
  v161 = v27 + 1;
  v173[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v170, 4, &v158);
  MIL::IRParameter::Make(&v158, v189);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v19, "y", v189);
  v28 = v189[0];
  v189[0] = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  v29 = (std::__shared_weak_count *)v158.n128_u64[1];
  if (v158.n128_u64[1])
  {
    v30 = (unint64_t *)(v158.n128_u64[1] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (__p)
  {
    v160 = __p;
    operator delete(__p);
  }
  if (v162)
  {
    v163 = v162;
    operator delete(v162);
  }
  if (v165)
  {
    v166 = v165;
    operator delete(v165);
  }
  if (Scalar)
  {
    v179 = Scalar;
    operator delete(Scalar);
  }
  v162 = 0;
  v32 = operator new();
  *(_QWORD *)v32 = 0;
  *(_QWORD *)(v32 + 8) = 0;
  *(_QWORD *)(v32 + 16) = 0;
  v170 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v162, (void **)v32);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v170, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)v162, 1uLL);
  v33 = (void ***)v162;
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v35;
  v35->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v34;
  v179 = (std::__shared_weak_count_vtbl *)&v35->~__shared_weak_count_0;
  v180 = &v35->~__shared_weak_count_0;
  v189[0] = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)v189, 1, &v157);
  MIL::IRParameter::Make(&v157, (uint64_t *)&__p);
  v36 = __p;
  v165 = __p;
  if (__p)
  {
    v37 = (_QWORD *)operator new();
    v38 = __p;
    *v37 = &unk_1EA99F888;
    v37[1] = 0;
    v37[2] = 0;
    v37[3] = v38;
  }
  else
  {
    v37 = 0;
  }
  v166 = v37;
  __p = 0;
  v39 = (unint64_t)v33[2];
  v40 = v33[1];
  if ((unint64_t)v40 >= v39)
  {
    v42 = ((char *)v40 - (char *)*v33) >> 4;
    v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v44 = v39 - (_QWORD)*v33;
    if (v44 >> 3 > v43)
      v43 = v44 >> 3;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
      v45 = 0xFFFFFFFFFFFFFFFLL;
    else
      v45 = v43;
    v173[1] = v33 + 2;
    v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v33 + 2), v45);
    v48 = &v46[16 * v42];
    *(_QWORD *)v48 = v36;
    *((_QWORD *)v48 + 1) = v37;
    v165 = 0;
    v166 = 0;
    v50 = *v33;
    v49 = v33[1];
    if (v49 == *v33)
    {
      v53 = v33[1];
      v51 = &v46[16 * v42];
    }
    else
    {
      v51 = &v46[16 * v42];
      do
      {
        v52 = *((_OWORD *)v49 - 1);
        v49 -= 2;
        *((_OWORD *)v51 - 1) = v52;
        v51 -= 16;
        *v49 = 0;
        v49[1] = 0;
      }
      while (v49 != v50);
      v53 = *v33;
      v49 = v33[1];
    }
    v41 = (void **)(v48 + 16);
    *v33 = (void **)v51;
    v170 = v53;
    v171 = (uint64_t)v53;
    v33[1] = (void **)(v48 + 16);
    v172 = (uint64_t)v49;
    v54 = v33[2];
    v33[2] = (void **)&v46[16 * v47];
    v173[0] = v54;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v170);
  }
  else
  {
    *v40 = v36;
    v40[1] = v37;
    v41 = v40 + 2;
    v165 = 0;
    v166 = 0;
  }
  v33[1] = v41;
  v55 = __p;
  __p = 0;
  if (v55)
    (*(void (**)(void *))(*(_QWORD *)v55 + 8))(v55);
  v56 = (std::__shared_weak_count *)v157.n128_u64[1];
  if (v157.n128_u64[1])
  {
    v57 = (unint64_t *)(v157.n128_u64[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (Scalar)
  {
    v179 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v155 = *(_OWORD *)a2;
  v156 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v59 = (uint64_t)v169;
  *(_QWORD *)&v154 = v169;
  if (v169)
  {
    v60 = (_QWORD *)operator new();
    *v60 = &unk_1EA99F8E8;
    v60[1] = 0;
    v60[2] = 0;
    v60[3] = v59;
  }
  else
  {
    v60 = 0;
  }
  *((_QWORD *)&v154 + 1) = v60;
  v169 = 0;
  *(_QWORD *)&v153 = v162;
  if (v162)
  {
    v61 = (_QWORD *)operator new();
    v62 = v162;
    *v61 = &unk_1EA99F948;
    v61[1] = 0;
    v61[2] = 0;
    v61[3] = v62;
  }
  else
  {
    v61 = 0;
  }
  *((_QWORD *)&v153 + 1) = v61;
  v162 = 0;
  v187[0] = &unk_1EA99FAC8;
  v187[1] = MIL::Validation::ValidateViaTypeInference;
  v188 = v187;
  v186 = 0;
  MIL::IROperator::Make((__int128 *)v155, &v154, &v153, (uint64_t)v187, (uint64_t)v185, a3);
  v63 = v186;
  if (v186 == v185)
  {
    v64 = 4;
    v63 = v185;
  }
  else
  {
    if (!v186)
      goto LABEL_68;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_68:
  v65 = v188;
  if (v188 == v187)
  {
    v66 = 4;
    v65 = v187;
    goto LABEL_72;
  }
  if (v188)
  {
    v66 = 5;
LABEL_72:
    (*(void (**)(void))(*v65 + 8 * v66))();
  }
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v153 + 1);
  if (*((_QWORD *)&v153 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v153 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v154 + 1);
  if (*((_QWORD *)&v154 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v154 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (SHIBYTE(v156) < 0)
    operator delete(v155[0]);
  v165 = 0;
  v73 = (_OWORD *)operator new();
  *v73 = 0u;
  v73[1] = 0u;
  *((_DWORD *)v73 + 8) = 1065353216;
  v165 = v73;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v152);
  MIL::IRParameter::Make(&v152, (uint64_t *)&v170);
  v74 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v73, "minimum_compute_type", (uint64_t *)&v170);
  v75 = v170;
  v170 = 0;
  if (v75)
    (*((void (**)(void **))*v75 + 1))(v75);
  v76 = (std::__shared_weak_count *)v152.n128_u64[1];
  if (v152.n128_u64[1])
  {
    v77 = (unint64_t *)(v152.n128_u64[1] + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v74 + 5) + 32))(*((_QWORD *)v74 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v74 + 5) + 48))(*((_QWORD *)v74 + 5), 1);
  v79 = *a3;
  v80 = (std::__shared_weak_count_vtbl *)v165;
  v150 = v165;
  if (v165)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v80;
  }
  else
  {
    v81 = 0;
  }
  v151 = v81;
  v165 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v79 + 184))(v79, &v150);
  v82 = v151;
  if (v151)
  {
    p_shared_owners = (unint64_t *)&v151->__shared_owners_;
    do
      v84 = __ldaxr(p_shared_owners);
    while (__stlxr(v84 - 1, p_shared_owners));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = *a3;
  v183[0] = &off_1EA99FBD8;
  v183[1] = MIL::Operators::Common::ios18::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput;
  v184 = v183;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v85 + 200))(v85, v183);
  v86 = v184;
  if (v184 == v183)
  {
    v87 = 4;
    v86 = v183;
  }
  else
  {
    if (!v184)
      goto LABEL_105;
    v87 = 5;
  }
  (*(void (**)(void))(*v86 + 8 * v87))();
LABEL_105:
  v88 = *a3;
  v181[0] = &off_1EA9A00F8;
  v181[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceNotEqual;
  v182 = v181;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v88 + 216))(v88, v181);
  v89 = v182;
  if (v182 == v181)
  {
    v90 = 4;
    v89 = v181;
  }
  else
  {
    if (!v182)
      goto LABEL_110;
    v90 = 5;
  }
  (*(void (**)(void))(*v89 + 8 * v90))();
LABEL_110:
  MIL::Validation::TensorDTypeConstraints::Make(&v170);
  v91 = v170;
  std::string::basic_string[abi:ne180100]<0>(v146, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v146, 0, (uint64_t *)&Scalar);
  v148 = Scalar;
  if (Scalar)
  {
    v92 = (std::__shared_weak_count *)operator new();
    v93 = Scalar;
    v92->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v92->__shared_owners_ = 0;
    v92->__shared_weak_owners_ = 0;
    v92[1].__vftable = v93;
  }
  else
  {
    v92 = 0;
  }
  v149 = v92;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v144, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v91 + 3))(v91, &v148, v144);
  if (v145 < 0)
    operator delete(v144[0]);
  v94 = v149;
  if (v149)
  {
    v95 = (unint64_t *)&v149->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v97 = Scalar;
  Scalar = 0;
  if (v97)
    (*((void (**)(std::__shared_weak_count_vtbl *))v97->~__shared_weak_count + 1))(v97);
  if (v147 < 0)
    operator delete(v146[0]);
  v98 = v170;
  std::string::basic_string[abi:ne180100]<0>(v140, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v140, 0, (uint64_t *)&Scalar);
  v142 = Scalar;
  if (Scalar)
  {
    v99 = (std::__shared_weak_count *)operator new();
    v100 = Scalar;
    v99->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v99->__shared_owners_ = 0;
    v99->__shared_weak_owners_ = 0;
    v99[1].__vftable = v100;
  }
  else
  {
    v99 = 0;
  }
  v143 = v99;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v138, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v98 + 3))(v98, &v142, v138);
  if (v139 < 0)
    operator delete(v138[0]);
  v101 = v143;
  if (v143)
  {
    v102 = (unint64_t *)&v143->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = Scalar;
  Scalar = 0;
  if (v104)
    (*((void (**)(std::__shared_weak_count_vtbl *))v104->~__shared_weak_count + 1))(v104);
  if (v141 < 0)
    operator delete(v140[0]);
  v105 = *a3;
  v136 = v170;
  if (v170)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = v170;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v137 = v106;
  v170 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v105 + 56))(v105, &v136);
  v108 = v137;
  if (v137)
  {
    v109 = (unint64_t *)&v137->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v170;
  v170 = 0;
  if (v111)
    (*((void (**)(void **))*v111 + 1))(v111);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v112 = __p;
  std::string::basic_string[abi:ne180100]<0>(v132, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v132, 1, v189);
  v134 = v189[0];
  if (v189[0])
  {
    v113 = (std::__shared_weak_count *)operator new();
    v114 = v189[0];
    v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v113->__shared_owners_ = 0;
    v113->__shared_weak_owners_ = 0;
    v113[1].__vftable = (std::__shared_weak_count_vtbl *)v114;
  }
  else
  {
    v113 = 0;
  }
  v135 = v113;
  v189[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v170, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v173, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v174, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v175, "int32");
  std::string::basic_string[abi:ne180100]<0>(v176, "int8");
  std::string::basic_string[abi:ne180100]<0>(v177, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v170, 6);
  (*(void (**)(void *, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v112 + 24))(v112, &v134, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v177[i + 2]) < 0)
      operator delete((void *)v177[i]);
  }
  v116 = v135;
  if (v135)
  {
    v117 = (unint64_t *)&v135->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = v189[0];
  v189[0] = 0;
  if (v119)
    (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
  if (v133 < 0)
    operator delete(v132[0]);
  v120 = *a3;
  v130 = __p;
  if (__p)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v122 = (std::__shared_weak_count_vtbl *)__p;
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = v122;
  }
  else
  {
    v121 = 0;
  }
  v131 = v121;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v120 + 56))(v120, &v130);
  v123 = v131;
  if (v131)
  {
    v124 = (unint64_t *)&v131->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = __p;
  __p = 0;
  if (v126)
    (*(void (**)(void *))(*(_QWORD *)v126 + 8))(v126);
  if (v165)
  {
    v127 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v165);
    MEMORY[0x1E0C023A0](v127, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v162, 0);
  result = (uint64_t)v169;
  if (v169)
  {
    v129 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v169);
    return MEMORY[0x1E0C023A0](v129, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E098C8D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  uint64_t *v61;
  uint64_t v63;

  if (a50)
    (*(void (**)(void *))(*(_QWORD *)a50 + 8))(a50);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a56, 0);
  v63 = *v61;
  *v61 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a53, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a61, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::FloorDiv::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  __int128 *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  char **v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t *v54;
  char *v55;
  char *v56;
  char *v57;
  __int128 v58;
  char *v59;
  char *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  char **v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  _OWORD *v79;
  unsigned __int8 *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  std::__shared_weak_count_vtbl *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  unint64_t *p_shared_owners;
  unint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t i;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  std::string *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::string *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  std::string *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::string *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  std::string *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::string *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  std::__shared_weak_count_vtbl *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  void *v126;
  std::__shared_weak_count *v127;
  std::__shared_weak_count_vtbl *v128;
  uint64_t j;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  void *v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  std::__shared_weak_count_vtbl *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t result;
  uint64_t v143;
  void *v144;
  std::__shared_weak_count *v145;
  void *v146[2];
  char v147;
  void *v148;
  std::__shared_weak_count *v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  void *v152[2];
  char v153;
  std::string *v154;
  std::__shared_weak_count *v155;
  void *v156[2];
  char v157;
  void *v158[2];
  char v159;
  std::string *v160;
  std::__shared_weak_count *v161;
  void *v162[2];
  char v163;
  void *v164[2];
  char v165;
  std::string *v166;
  std::__shared_weak_count *v167;
  void *v168;
  std::__shared_weak_count *v169;
  __n128 v170;
  __int128 v171;
  __int128 v172;
  void *v173[2];
  uint64_t v174;
  void *v175;
  void *v176;
  _QWORD *v177;
  __n128 v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  char **v182;
  __n128 v183;
  void *__p;
  void *v185;
  _QWORD *v186;
  void *v187;
  void *v188;
  _QWORD *v189;
  void *p_Scalar;
  void *v191;
  _QWORD *v192;
  __n128 v193;
  _QWORD *v194;
  __int128 v195;
  uint64_t v196;
  _QWORD v197[3];
  __int128 v198;
  uint64_t v199[3];
  uint64_t v200[3];
  _QWORD v201[3];
  std::string *Scalar;
  std::string *v203;
  _QWORD v204[3];
  _QWORD v205[3];
  _QWORD *v206;
  _BYTE v207[24];
  _BYTE *v208;
  _BYTE v209[24];
  _BYTE *v210;
  _QWORD v211[3];
  _QWORD *v212;
  uint64_t v213;

  v213 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v194 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v8;
  *(_QWORD *)v8 = v7;
  v203 = (std::string *)((char *)v8 + 8);
  v204[0] = (char *)v8 + 8;
  *(_QWORD *)&v195 = MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  p_Scalar = v10;
  *v10 = v9;
  v191 = v10 + 1;
  v192 = v10 + 1;
  *((_QWORD *)&v195 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&p_Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v187 = v12;
  *v12 = v11;
  v188 = v12 + 1;
  v189 = v12 + 1;
  v196 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v187);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v185 = v14 + 1;
  v186 = v14 + 1;
  v197[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v195, 4, &v193);
  MIL::IRParameter::Make(&v193, (uint64_t *)&v175);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v175);
  v15 = v175;
  v175 = 0;
  if (v15)
    (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v193.n128_u64[1];
  if (v193.n128_u64[1])
  {
    v17 = (unint64_t *)(v193.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v185 = __p;
    operator delete(__p);
  }
  if (v187)
  {
    v188 = v187;
    operator delete(v187);
  }
  if (p_Scalar)
  {
    v191 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v203 = Scalar;
    operator delete(Scalar);
  }
  v19 = v194;
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v21;
  *(_QWORD *)v21 = v20;
  v203 = (std::string *)((char *)v21 + 8);
  v204[0] = (char *)v21 + 8;
  *(_QWORD *)&v195 = MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  p_Scalar = v23;
  *v23 = v22;
  v191 = v23 + 1;
  v192 = v23 + 1;
  *((_QWORD *)&v195 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&p_Scalar);
  v24 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v25 = operator new(8uLL);
  v187 = v25;
  *v25 = v24;
  v188 = v25 + 1;
  v189 = v25 + 1;
  v196 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v187);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(8uLL);
  __p = v27;
  *v27 = v26;
  v185 = v27 + 1;
  v186 = v27 + 1;
  v197[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v195, 4, &v183);
  MIL::IRParameter::Make(&v183, (uint64_t *)&v175);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v19, "y", (uint64_t *)&v175);
  v28 = v175;
  v175 = 0;
  if (v28)
    (*(void (**)(void *))(*(_QWORD *)v28 + 8))(v28);
  v29 = (std::__shared_weak_count *)v183.n128_u64[1];
  if (v183.n128_u64[1])
  {
    v30 = (unint64_t *)(v183.n128_u64[1] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (__p)
  {
    v185 = __p;
    operator delete(__p);
  }
  if (v187)
  {
    v188 = v187;
    operator delete(v187);
  }
  if (p_Scalar)
  {
    v191 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v203 = Scalar;
    operator delete(Scalar);
  }
  v182 = 0;
  v32 = operator new();
  *(_QWORD *)v32 = 0;
  *(_QWORD *)(v32 + 8) = 0;
  *(_QWORD *)(v32 + 16) = 0;
  *(_QWORD *)&v195 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v182, (void **)v32);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v195, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v182, 1uLL);
  v33 = v182;
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = operator new(8uLL);
  p_Scalar = v35;
  *v35 = v34;
  v191 = v35 + 1;
  v192 = v35 + 1;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&p_Scalar);
  v36 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v37 = operator new(8uLL);
  v187 = v37;
  *v37 = v36;
  v188 = v37 + 1;
  v189 = v37 + 1;
  v203 = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v187);
  v38 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v39 = operator new(8uLL);
  __p = v39;
  *v39 = v38;
  v185 = v39 + 1;
  v186 = v39 + 1;
  v204[0] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v40 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v41 = operator new(8uLL);
  v175 = v41;
  *v41 = v40;
  v176 = v41 + 1;
  v177 = v41 + 1;
  v204[1] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v175);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 4, &v178);
  MIL::IRParameter::Make(&v178, &v179);
  v42 = v179;
  v180 = v179;
  if (v179)
  {
    v43 = (_QWORD *)operator new();
    v44 = v179;
    *v43 = &unk_1EA99F888;
    v43[1] = 0;
    v43[2] = 0;
    v43[3] = v44;
  }
  else
  {
    v43 = 0;
  }
  v181 = v43;
  v179 = 0;
  v45 = v33[2];
  v46 = v33[1];
  if (v46 >= v45)
  {
    v48 = (v46 - *v33) >> 4;
    v49 = v48 + 1;
    if ((unint64_t)(v48 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v50 = v45 - *v33;
    if (v50 >> 3 > v49)
      v49 = v50 >> 3;
    if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF0)
      v51 = 0xFFFFFFFFFFFFFFFLL;
    else
      v51 = v49;
    v197[1] = v33 + 2;
    v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v33 + 2), v51);
    v54 = (uint64_t *)&v52[16 * v48];
    *v54 = v42;
    v54[1] = (uint64_t)v43;
    v180 = 0;
    v181 = 0;
    v56 = *v33;
    v55 = v33[1];
    if (v55 == *v33)
    {
      v59 = v33[1];
      v57 = &v52[16 * v48];
    }
    else
    {
      v57 = &v52[16 * v48];
      do
      {
        v58 = *((_OWORD *)v55 - 1);
        v55 -= 16;
        *((_OWORD *)v57 - 1) = v58;
        v57 -= 16;
        *(_QWORD *)v55 = 0;
        *((_QWORD *)v55 + 1) = 0;
      }
      while (v55 != v56);
      v59 = *v33;
      v55 = v33[1];
    }
    v47 = (char *)(v54 + 2);
    *v33 = v57;
    *((_QWORD *)&v195 + 1) = v59;
    v33[1] = (char *)(v54 + 2);
    v196 = (uint64_t)v55;
    v60 = v33[2];
    v33[2] = &v52[16 * v53];
    v197[0] = v60;
    *(_QWORD *)&v195 = v59;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v195);
  }
  else
  {
    *(_QWORD *)v46 = v42;
    *((_QWORD *)v46 + 1) = v43;
    v47 = v46 + 16;
    v180 = 0;
    v181 = 0;
  }
  v33[1] = v47;
  v61 = v179;
  v179 = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  v62 = (std::__shared_weak_count *)v178.n128_u64[1];
  if (v178.n128_u64[1])
  {
    v63 = (unint64_t *)(v178.n128_u64[1] + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  if (v175)
  {
    v176 = v175;
    operator delete(v175);
  }
  if (__p)
  {
    v185 = __p;
    operator delete(__p);
  }
  if (v187)
  {
    v188 = v187;
    operator delete(v187);
  }
  if (p_Scalar)
  {
    v191 = p_Scalar;
    operator delete(p_Scalar);
  }
  *(_OWORD *)v173 = *(_OWORD *)a2;
  v174 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v65 = (uint64_t)v194;
  *(_QWORD *)&v172 = v194;
  if (v194)
  {
    v66 = (_QWORD *)operator new();
    *v66 = &unk_1EA99F8E8;
    v66[1] = 0;
    v66[2] = 0;
    v66[3] = v65;
  }
  else
  {
    v66 = 0;
  }
  *((_QWORD *)&v172 + 1) = v66;
  v194 = 0;
  *(_QWORD *)&v171 = v182;
  if (v182)
  {
    v67 = (_QWORD *)operator new();
    v68 = v182;
    *v67 = &unk_1EA99F948;
    v67[1] = 0;
    v67[2] = 0;
    v67[3] = v68;
  }
  else
  {
    v67 = 0;
  }
  *((_QWORD *)&v171 + 1) = v67;
  v182 = 0;
  v211[0] = &unk_1EA99FAC8;
  v211[1] = MIL::Validation::ValidateViaTypeInference;
  v212 = v211;
  v210 = 0;
  MIL::IROperator::Make((__int128 *)v173, &v172, &v171, (uint64_t)v211, (uint64_t)v209, a3);
  v69 = v210;
  if (v210 == v209)
  {
    v70 = 4;
    v69 = v209;
  }
  else
  {
    if (!v210)
      goto LABEL_74;
    v70 = 5;
  }
  (*(void (**)(void))(*v69 + 8 * v70))();
LABEL_74:
  v71 = v212;
  if (v212 == v211)
  {
    v72 = 4;
    v71 = v211;
    goto LABEL_78;
  }
  if (v212)
  {
    v72 = 5;
LABEL_78:
    (*(void (**)(void))(*v71 + 8 * v72))();
  }
  v73 = (std::__shared_weak_count *)*((_QWORD *)&v171 + 1);
  if (*((_QWORD *)&v171 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v171 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = (std::__shared_weak_count *)*((_QWORD *)&v172 + 1);
  if (*((_QWORD *)&v172 + 1))
  {
    v77 = (unint64_t *)(*((_QWORD *)&v172 + 1) + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  if (SHIBYTE(v174) < 0)
    operator delete(v173[0]);
  v187 = 0;
  v79 = (_OWORD *)operator new();
  *v79 = 0u;
  v79[1] = 0u;
  *((_DWORD *)v79 + 8) = 1065353216;
  v187 = v79;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v170);
  MIL::IRParameter::Make(&v170, (uint64_t *)&v195);
  v80 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v79, "minimum_compute_type", (uint64_t *)&v195);
  v81 = v195;
  *(_QWORD *)&v195 = 0;
  if (v81)
    (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
  v82 = (std::__shared_weak_count *)v170.n128_u64[1];
  if (v170.n128_u64[1])
  {
    v83 = (unint64_t *)(v170.n128_u64[1] + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v80 + 5) + 32))(*((_QWORD *)v80 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v80 + 5) + 48))(*((_QWORD *)v80 + 5), 1);
  v85 = *a3;
  v86 = (std::__shared_weak_count_vtbl *)v187;
  v168 = v187;
  if (v187)
  {
    v87 = (std::__shared_weak_count *)operator new();
    v87->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v87->__shared_owners_ = 0;
    v87->__shared_weak_owners_ = 0;
    v87[1].__vftable = v86;
  }
  else
  {
    v87 = 0;
  }
  v169 = v87;
  v187 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v85 + 184))(v85, &v168);
  v88 = v169;
  if (v169)
  {
    p_shared_owners = (unint64_t *)&v169->__shared_owners_;
    do
      v90 = __ldaxr(p_shared_owners);
    while (__stlxr(v90 - 1, p_shared_owners));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v195, "x");
  std::string::basic_string[abi:ne180100]<0>(v197, "y");
  Scalar = 0;
  v203 = 0;
  v204[0] = 0;
  p_Scalar = &Scalar;
  LOBYTE(v191) = 0;
  Scalar = (std::string *)operator new(0x30uLL);
  v203 = Scalar;
  v204[0] = Scalar + 2;
  v203 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v204, &v195, &v198, Scalar);
  MIL::ValueTypeInference::BroadcastFromInputs((__int128 **)&Scalar, (uint64_t)v207);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v91 + 200))(v91, v207);
  v92 = v208;
  if (v208 == v207)
  {
    v93 = 4;
    v92 = v207;
    goto LABEL_110;
  }
  if (v208)
  {
    v93 = 5;
LABEL_110:
    (*(void (**)(void))(*v92 + 8 * v93))();
  }
  p_Scalar = &Scalar;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_Scalar);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v197[i + 2]) < 0)
      operator delete((void *)v197[i]);
  }
  v95 = *a3;
  v205[0] = &off_1EA9A00F8;
  v205[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceFloorDiv;
  v206 = v205;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v95 + 216))(v95, v205);
  v96 = v206;
  if (v206 == v205)
  {
    v97 = 4;
    v96 = v205;
  }
  else
  {
    if (!v206)
      goto LABEL_120;
    v97 = 5;
  }
  (*(void (**)(void))(*v96 + 8 * v97))();
LABEL_120:
  MIL::Validation::TensorDTypeConstraints::Make(&v195);
  v98 = v195;
  std::string::basic_string[abi:ne180100]<0>(v164, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v164, 0, (uint64_t *)&Scalar);
  v166 = Scalar;
  if (Scalar)
  {
    v99 = (std::__shared_weak_count *)operator new();
    v100 = Scalar;
    v99->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v99->__shared_owners_ = 0;
    v99->__shared_weak_owners_ = 0;
    v99[1].__vftable = (std::__shared_weak_count_vtbl *)v100;
  }
  else
  {
    v99 = 0;
  }
  v167 = v99;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v162, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v98 + 24))(v98, &v166, v162);
  if (v163 < 0)
    operator delete(v162[0]);
  v101 = v167;
  if (v167)
  {
    v102 = (unint64_t *)&v167->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = Scalar;
  Scalar = 0;
  if (v104)
    (*(void (**)(std::string *))(v104->__r_.__value_.__r.__words[0] + 8))(v104);
  if (v165 < 0)
    operator delete(v164[0]);
  v105 = v195;
  std::string::basic_string[abi:ne180100]<0>(v158, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v158, 0, (uint64_t *)&Scalar);
  v160 = Scalar;
  if (Scalar)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = Scalar;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v161 = v106;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v156, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v105 + 24))(v105, &v160, v156);
  if (v157 < 0)
    operator delete(v156[0]);
  v108 = v161;
  if (v161)
  {
    v109 = (unint64_t *)&v161->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = Scalar;
  Scalar = 0;
  if (v111)
    (*(void (**)(std::string *))(v111->__r_.__value_.__r.__words[0] + 8))(v111);
  if (v159 < 0)
    operator delete(v158[0]);
  v112 = v195;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v154 = Scalar;
  if (Scalar)
  {
    v113 = (std::__shared_weak_count *)operator new();
    v114 = Scalar;
    v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v113->__shared_owners_ = 0;
    v113->__shared_weak_owners_ = 0;
    v113[1].__vftable = (std::__shared_weak_count_vtbl *)v114;
  }
  else
  {
    v113 = 0;
  }
  v155 = v113;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v152, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v112 + 24))(v112, &v154, v152);
  if (v153 < 0)
    operator delete(v152[0]);
  v115 = v155;
  if (v155)
  {
    v116 = (unint64_t *)&v155->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = Scalar;
  Scalar = 0;
  if (v118)
    (*(void (**)(std::string *))(v118->__r_.__value_.__r.__words[0] + 8))(v118);
  v119 = *a3;
  v150 = v195;
  if ((_QWORD)v195)
  {
    v120 = (std::__shared_weak_count *)operator new();
    v121 = (std::__shared_weak_count_vtbl *)v195;
    v120->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v120->__shared_owners_ = 0;
    v120->__shared_weak_owners_ = 0;
    v120[1].__vftable = v121;
  }
  else
  {
    v120 = 0;
  }
  v151 = v120;
  *(_QWORD *)&v195 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v119 + 56))(v119, &v150);
  v122 = v151;
  if (v151)
  {
    v123 = (unint64_t *)&v151->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v125 = v195;
  *(_QWORD *)&v195 = 0;
  if (v125)
    (*(void (**)(uint64_t))(*(_QWORD *)v125 + 8))(v125);
  MIL::Validation::PossibleStringValuesConstraints::Make(&p_Scalar);
  v126 = p_Scalar;
  std::string::basic_string[abi:ne180100]<0>(v146, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v146, 1, (uint64_t *)&__p);
  v148 = __p;
  if (__p)
  {
    v127 = (std::__shared_weak_count *)operator new();
    v128 = (std::__shared_weak_count_vtbl *)__p;
    v127->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v127->__shared_owners_ = 0;
    v127->__shared_weak_owners_ = 0;
    v127[1].__vftable = v128;
  }
  else
  {
    v127 = 0;
  }
  v149 = v127;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&v195, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v197, "fp16");
  std::string::basic_string[abi:ne180100]<0>(&v198, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v199, "int32");
  std::string::basic_string[abi:ne180100]<0>(v200, "int8");
  std::string::basic_string[abi:ne180100]<0>(v201, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v195, 6);
  (*(void (**)(void *, void **, std::string **, uint64_t))(*(_QWORD *)v126 + 24))(v126, &v148, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -18; j -= 3)
  {
    if (SHIBYTE(v201[j + 2]) < 0)
      operator delete((void *)v201[j]);
  }
  v130 = v149;
  if (v149)
  {
    v131 = (unint64_t *)&v149->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = __p;
  __p = 0;
  if (v133)
    (*(void (**)(void *))(*(_QWORD *)v133 + 8))(v133);
  if (v147 < 0)
    operator delete(v146[0]);
  v134 = *a3;
  v144 = p_Scalar;
  if (p_Scalar)
  {
    v135 = (std::__shared_weak_count *)operator new();
    v136 = (std::__shared_weak_count_vtbl *)p_Scalar;
    v135->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v135->__shared_owners_ = 0;
    v135->__shared_weak_owners_ = 0;
    v135[1].__vftable = v136;
  }
  else
  {
    v135 = 0;
  }
  v145 = v135;
  p_Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v134 + 56))(v134, &v144);
  v137 = v145;
  if (v145)
  {
    v138 = (unint64_t *)&v145->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v140 = p_Scalar;
  p_Scalar = 0;
  if (v140)
    (*(void (**)(void *))(*(_QWORD *)v140 + 8))(v140);
  if (v187)
  {
    v141 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v187);
    MEMORY[0x1E0C023A0](v141, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v182, 0);
  result = (uint64_t)v194;
  if (v194)
  {
    v143 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v194);
    return MEMORY[0x1E0C023A0](v143, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E098DF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  void *a67;
  uint64_t a72;
  uint64_t *v72;
  void *v74;
  uint64_t v75;

  v74 = a67;
  a67 = 0;
  if (v74)
    (*(void (**)(void *))(*(_QWORD *)v74 + 8))(v74);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a64, 0);
  v75 = *v72;
  *v72 = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a72, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::Maximum::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  __int128 *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  char **v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t *v54;
  char *v55;
  char *v56;
  char *v57;
  __int128 v58;
  char *v59;
  char *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  char **v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  _OWORD *v79;
  unsigned __int8 *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  std::__shared_weak_count_vtbl *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  unint64_t *p_shared_owners;
  unint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t i;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  std::string *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::string *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  std::string *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::string *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  std::string *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::string *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  std::__shared_weak_count_vtbl *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  void *v126;
  std::__shared_weak_count *v127;
  std::__shared_weak_count_vtbl *v128;
  uint64_t j;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  void *v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  std::__shared_weak_count_vtbl *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t result;
  uint64_t v143;
  void *v144;
  std::__shared_weak_count *v145;
  void *v146[2];
  char v147;
  void *v148;
  std::__shared_weak_count *v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  void *v152[2];
  char v153;
  std::string *v154;
  std::__shared_weak_count *v155;
  void *v156[2];
  char v157;
  void *v158[2];
  char v159;
  std::string *v160;
  std::__shared_weak_count *v161;
  void *v162[2];
  char v163;
  void *v164[2];
  char v165;
  std::string *v166;
  std::__shared_weak_count *v167;
  void *v168;
  std::__shared_weak_count *v169;
  __n128 v170;
  __int128 v171;
  __int128 v172;
  void *v173[2];
  uint64_t v174;
  void *v175;
  void *v176;
  _QWORD *v177;
  __n128 v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  char **v182;
  __n128 v183;
  void *__p;
  void *v185;
  _QWORD *v186;
  void *v187;
  void *v188;
  _QWORD *v189;
  void *p_Scalar;
  void *v191;
  _QWORD *v192;
  __n128 v193;
  _QWORD *v194;
  __int128 v195;
  uint64_t v196;
  _QWORD v197[3];
  __int128 v198;
  uint64_t v199[3];
  uint64_t v200[3];
  _QWORD v201[3];
  std::string *Scalar;
  std::string *v203;
  _QWORD v204[3];
  _QWORD v205[3];
  _QWORD *v206;
  _BYTE v207[24];
  _BYTE *v208;
  _BYTE v209[24];
  _BYTE *v210;
  _QWORD v211[3];
  _QWORD *v212;
  uint64_t v213;

  v213 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v194 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v8;
  *(_QWORD *)v8 = v7;
  v203 = (std::string *)((char *)v8 + 8);
  v204[0] = (char *)v8 + 8;
  *(_QWORD *)&v195 = MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  p_Scalar = v10;
  *v10 = v9;
  v191 = v10 + 1;
  v192 = v10 + 1;
  *((_QWORD *)&v195 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&p_Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v187 = v12;
  *v12 = v11;
  v188 = v12 + 1;
  v189 = v12 + 1;
  v196 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v187);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v185 = v14 + 1;
  v186 = v14 + 1;
  v197[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v195, 4, &v193);
  MIL::IRParameter::Make(&v193, (uint64_t *)&v175);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v175);
  v15 = v175;
  v175 = 0;
  if (v15)
    (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v193.n128_u64[1];
  if (v193.n128_u64[1])
  {
    v17 = (unint64_t *)(v193.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v185 = __p;
    operator delete(__p);
  }
  if (v187)
  {
    v188 = v187;
    operator delete(v187);
  }
  if (p_Scalar)
  {
    v191 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v203 = Scalar;
    operator delete(Scalar);
  }
  v19 = v194;
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v21;
  *(_QWORD *)v21 = v20;
  v203 = (std::string *)((char *)v21 + 8);
  v204[0] = (char *)v21 + 8;
  *(_QWORD *)&v195 = MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  p_Scalar = v23;
  *v23 = v22;
  v191 = v23 + 1;
  v192 = v23 + 1;
  *((_QWORD *)&v195 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&p_Scalar);
  v24 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v25 = operator new(8uLL);
  v187 = v25;
  *v25 = v24;
  v188 = v25 + 1;
  v189 = v25 + 1;
  v196 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v187);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(8uLL);
  __p = v27;
  *v27 = v26;
  v185 = v27 + 1;
  v186 = v27 + 1;
  v197[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v195, 4, &v183);
  MIL::IRParameter::Make(&v183, (uint64_t *)&v175);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v19, "y", (uint64_t *)&v175);
  v28 = v175;
  v175 = 0;
  if (v28)
    (*(void (**)(void *))(*(_QWORD *)v28 + 8))(v28);
  v29 = (std::__shared_weak_count *)v183.n128_u64[1];
  if (v183.n128_u64[1])
  {
    v30 = (unint64_t *)(v183.n128_u64[1] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (__p)
  {
    v185 = __p;
    operator delete(__p);
  }
  if (v187)
  {
    v188 = v187;
    operator delete(v187);
  }
  if (p_Scalar)
  {
    v191 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v203 = Scalar;
    operator delete(Scalar);
  }
  v182 = 0;
  v32 = operator new();
  *(_QWORD *)v32 = 0;
  *(_QWORD *)(v32 + 8) = 0;
  *(_QWORD *)(v32 + 16) = 0;
  *(_QWORD *)&v195 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v182, (void **)v32);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v195, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v182, 1uLL);
  v33 = v182;
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = operator new(8uLL);
  p_Scalar = v35;
  *v35 = v34;
  v191 = v35 + 1;
  v192 = v35 + 1;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&p_Scalar);
  v36 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v37 = operator new(8uLL);
  v187 = v37;
  *v37 = v36;
  v188 = v37 + 1;
  v189 = v37 + 1;
  v203 = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v187);
  v38 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v39 = operator new(8uLL);
  __p = v39;
  *v39 = v38;
  v185 = v39 + 1;
  v186 = v39 + 1;
  v204[0] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v40 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v41 = operator new(8uLL);
  v175 = v41;
  *v41 = v40;
  v176 = v41 + 1;
  v177 = v41 + 1;
  v204[1] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v175);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 4, &v178);
  MIL::IRParameter::Make(&v178, &v179);
  v42 = v179;
  v180 = v179;
  if (v179)
  {
    v43 = (_QWORD *)operator new();
    v44 = v179;
    *v43 = &unk_1EA99F888;
    v43[1] = 0;
    v43[2] = 0;
    v43[3] = v44;
  }
  else
  {
    v43 = 0;
  }
  v181 = v43;
  v179 = 0;
  v45 = v33[2];
  v46 = v33[1];
  if (v46 >= v45)
  {
    v48 = (v46 - *v33) >> 4;
    v49 = v48 + 1;
    if ((unint64_t)(v48 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v50 = v45 - *v33;
    if (v50 >> 3 > v49)
      v49 = v50 >> 3;
    if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF0)
      v51 = 0xFFFFFFFFFFFFFFFLL;
    else
      v51 = v49;
    v197[1] = v33 + 2;
    v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v33 + 2), v51);
    v54 = (uint64_t *)&v52[16 * v48];
    *v54 = v42;
    v54[1] = (uint64_t)v43;
    v180 = 0;
    v181 = 0;
    v56 = *v33;
    v55 = v33[1];
    if (v55 == *v33)
    {
      v59 = v33[1];
      v57 = &v52[16 * v48];
    }
    else
    {
      v57 = &v52[16 * v48];
      do
      {
        v58 = *((_OWORD *)v55 - 1);
        v55 -= 16;
        *((_OWORD *)v57 - 1) = v58;
        v57 -= 16;
        *(_QWORD *)v55 = 0;
        *((_QWORD *)v55 + 1) = 0;
      }
      while (v55 != v56);
      v59 = *v33;
      v55 = v33[1];
    }
    v47 = (char *)(v54 + 2);
    *v33 = v57;
    *((_QWORD *)&v195 + 1) = v59;
    v33[1] = (char *)(v54 + 2);
    v196 = (uint64_t)v55;
    v60 = v33[2];
    v33[2] = &v52[16 * v53];
    v197[0] = v60;
    *(_QWORD *)&v195 = v59;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v195);
  }
  else
  {
    *(_QWORD *)v46 = v42;
    *((_QWORD *)v46 + 1) = v43;
    v47 = v46 + 16;
    v180 = 0;
    v181 = 0;
  }
  v33[1] = v47;
  v61 = v179;
  v179 = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  v62 = (std::__shared_weak_count *)v178.n128_u64[1];
  if (v178.n128_u64[1])
  {
    v63 = (unint64_t *)(v178.n128_u64[1] + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  if (v175)
  {
    v176 = v175;
    operator delete(v175);
  }
  if (__p)
  {
    v185 = __p;
    operator delete(__p);
  }
  if (v187)
  {
    v188 = v187;
    operator delete(v187);
  }
  if (p_Scalar)
  {
    v191 = p_Scalar;
    operator delete(p_Scalar);
  }
  *(_OWORD *)v173 = *(_OWORD *)a2;
  v174 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v65 = (uint64_t)v194;
  *(_QWORD *)&v172 = v194;
  if (v194)
  {
    v66 = (_QWORD *)operator new();
    *v66 = &unk_1EA99F8E8;
    v66[1] = 0;
    v66[2] = 0;
    v66[3] = v65;
  }
  else
  {
    v66 = 0;
  }
  *((_QWORD *)&v172 + 1) = v66;
  v194 = 0;
  *(_QWORD *)&v171 = v182;
  if (v182)
  {
    v67 = (_QWORD *)operator new();
    v68 = v182;
    *v67 = &unk_1EA99F948;
    v67[1] = 0;
    v67[2] = 0;
    v67[3] = v68;
  }
  else
  {
    v67 = 0;
  }
  *((_QWORD *)&v171 + 1) = v67;
  v182 = 0;
  v211[0] = &unk_1EA99FAC8;
  v211[1] = MIL::Validation::ValidateViaTypeInference;
  v212 = v211;
  v210 = 0;
  MIL::IROperator::Make((__int128 *)v173, &v172, &v171, (uint64_t)v211, (uint64_t)v209, a3);
  v69 = v210;
  if (v210 == v209)
  {
    v70 = 4;
    v69 = v209;
  }
  else
  {
    if (!v210)
      goto LABEL_74;
    v70 = 5;
  }
  (*(void (**)(void))(*v69 + 8 * v70))();
LABEL_74:
  v71 = v212;
  if (v212 == v211)
  {
    v72 = 4;
    v71 = v211;
    goto LABEL_78;
  }
  if (v212)
  {
    v72 = 5;
LABEL_78:
    (*(void (**)(void))(*v71 + 8 * v72))();
  }
  v73 = (std::__shared_weak_count *)*((_QWORD *)&v171 + 1);
  if (*((_QWORD *)&v171 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v171 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = (std::__shared_weak_count *)*((_QWORD *)&v172 + 1);
  if (*((_QWORD *)&v172 + 1))
  {
    v77 = (unint64_t *)(*((_QWORD *)&v172 + 1) + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  if (SHIBYTE(v174) < 0)
    operator delete(v173[0]);
  v187 = 0;
  v79 = (_OWORD *)operator new();
  *v79 = 0u;
  v79[1] = 0u;
  *((_DWORD *)v79 + 8) = 1065353216;
  v187 = v79;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v170);
  MIL::IRParameter::Make(&v170, (uint64_t *)&v195);
  v80 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v79, "minimum_compute_type", (uint64_t *)&v195);
  v81 = v195;
  *(_QWORD *)&v195 = 0;
  if (v81)
    (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
  v82 = (std::__shared_weak_count *)v170.n128_u64[1];
  if (v170.n128_u64[1])
  {
    v83 = (unint64_t *)(v170.n128_u64[1] + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v80 + 5) + 32))(*((_QWORD *)v80 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v80 + 5) + 48))(*((_QWORD *)v80 + 5), 1);
  v85 = *a3;
  v86 = (std::__shared_weak_count_vtbl *)v187;
  v168 = v187;
  if (v187)
  {
    v87 = (std::__shared_weak_count *)operator new();
    v87->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v87->__shared_owners_ = 0;
    v87->__shared_weak_owners_ = 0;
    v87[1].__vftable = v86;
  }
  else
  {
    v87 = 0;
  }
  v169 = v87;
  v187 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v85 + 184))(v85, &v168);
  v88 = v169;
  if (v169)
  {
    p_shared_owners = (unint64_t *)&v169->__shared_owners_;
    do
      v90 = __ldaxr(p_shared_owners);
    while (__stlxr(v90 - 1, p_shared_owners));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v195, "x");
  std::string::basic_string[abi:ne180100]<0>(v197, "y");
  Scalar = 0;
  v203 = 0;
  v204[0] = 0;
  p_Scalar = &Scalar;
  LOBYTE(v191) = 0;
  Scalar = (std::string *)operator new(0x30uLL);
  v203 = Scalar;
  v204[0] = Scalar + 2;
  v203 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v204, &v195, &v198, Scalar);
  MIL::ValueTypeInference::BroadcastFromInputs((__int128 **)&Scalar, (uint64_t)v207);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v91 + 200))(v91, v207);
  v92 = v208;
  if (v208 == v207)
  {
    v93 = 4;
    v92 = v207;
    goto LABEL_110;
  }
  if (v208)
  {
    v93 = 5;
LABEL_110:
    (*(void (**)(void))(*v92 + 8 * v93))();
  }
  p_Scalar = &Scalar;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_Scalar);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v197[i + 2]) < 0)
      operator delete((void *)v197[i]);
  }
  v95 = *a3;
  v205[0] = &off_1EA9A00F8;
  v205[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceMaximum;
  v206 = v205;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v95 + 216))(v95, v205);
  v96 = v206;
  if (v206 == v205)
  {
    v97 = 4;
    v96 = v205;
  }
  else
  {
    if (!v206)
      goto LABEL_120;
    v97 = 5;
  }
  (*(void (**)(void))(*v96 + 8 * v97))();
LABEL_120:
  MIL::Validation::TensorDTypeConstraints::Make(&v195);
  v98 = v195;
  std::string::basic_string[abi:ne180100]<0>(v164, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v164, 0, (uint64_t *)&Scalar);
  v166 = Scalar;
  if (Scalar)
  {
    v99 = (std::__shared_weak_count *)operator new();
    v100 = Scalar;
    v99->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v99->__shared_owners_ = 0;
    v99->__shared_weak_owners_ = 0;
    v99[1].__vftable = (std::__shared_weak_count_vtbl *)v100;
  }
  else
  {
    v99 = 0;
  }
  v167 = v99;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v162, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v98 + 24))(v98, &v166, v162);
  if (v163 < 0)
    operator delete(v162[0]);
  v101 = v167;
  if (v167)
  {
    v102 = (unint64_t *)&v167->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = Scalar;
  Scalar = 0;
  if (v104)
    (*(void (**)(std::string *))(v104->__r_.__value_.__r.__words[0] + 8))(v104);
  if (v165 < 0)
    operator delete(v164[0]);
  v105 = v195;
  std::string::basic_string[abi:ne180100]<0>(v158, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v158, 0, (uint64_t *)&Scalar);
  v160 = Scalar;
  if (Scalar)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = Scalar;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v161 = v106;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v156, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v105 + 24))(v105, &v160, v156);
  if (v157 < 0)
    operator delete(v156[0]);
  v108 = v161;
  if (v161)
  {
    v109 = (unint64_t *)&v161->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = Scalar;
  Scalar = 0;
  if (v111)
    (*(void (**)(std::string *))(v111->__r_.__value_.__r.__words[0] + 8))(v111);
  if (v159 < 0)
    operator delete(v158[0]);
  v112 = v195;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v154 = Scalar;
  if (Scalar)
  {
    v113 = (std::__shared_weak_count *)operator new();
    v114 = Scalar;
    v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v113->__shared_owners_ = 0;
    v113->__shared_weak_owners_ = 0;
    v113[1].__vftable = (std::__shared_weak_count_vtbl *)v114;
  }
  else
  {
    v113 = 0;
  }
  v155 = v113;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v152, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v112 + 24))(v112, &v154, v152);
  if (v153 < 0)
    operator delete(v152[0]);
  v115 = v155;
  if (v155)
  {
    v116 = (unint64_t *)&v155->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = Scalar;
  Scalar = 0;
  if (v118)
    (*(void (**)(std::string *))(v118->__r_.__value_.__r.__words[0] + 8))(v118);
  v119 = *a3;
  v150 = v195;
  if ((_QWORD)v195)
  {
    v120 = (std::__shared_weak_count *)operator new();
    v121 = (std::__shared_weak_count_vtbl *)v195;
    v120->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v120->__shared_owners_ = 0;
    v120->__shared_weak_owners_ = 0;
    v120[1].__vftable = v121;
  }
  else
  {
    v120 = 0;
  }
  v151 = v120;
  *(_QWORD *)&v195 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v119 + 56))(v119, &v150);
  v122 = v151;
  if (v151)
  {
    v123 = (unint64_t *)&v151->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v125 = v195;
  *(_QWORD *)&v195 = 0;
  if (v125)
    (*(void (**)(uint64_t))(*(_QWORD *)v125 + 8))(v125);
  MIL::Validation::PossibleStringValuesConstraints::Make(&p_Scalar);
  v126 = p_Scalar;
  std::string::basic_string[abi:ne180100]<0>(v146, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v146, 1, (uint64_t *)&__p);
  v148 = __p;
  if (__p)
  {
    v127 = (std::__shared_weak_count *)operator new();
    v128 = (std::__shared_weak_count_vtbl *)__p;
    v127->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v127->__shared_owners_ = 0;
    v127->__shared_weak_owners_ = 0;
    v127[1].__vftable = v128;
  }
  else
  {
    v127 = 0;
  }
  v149 = v127;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&v195, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v197, "fp16");
  std::string::basic_string[abi:ne180100]<0>(&v198, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v199, "int32");
  std::string::basic_string[abi:ne180100]<0>(v200, "int8");
  std::string::basic_string[abi:ne180100]<0>(v201, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v195, 6);
  (*(void (**)(void *, void **, std::string **, uint64_t))(*(_QWORD *)v126 + 24))(v126, &v148, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -18; j -= 3)
  {
    if (SHIBYTE(v201[j + 2]) < 0)
      operator delete((void *)v201[j]);
  }
  v130 = v149;
  if (v149)
  {
    v131 = (unint64_t *)&v149->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = __p;
  __p = 0;
  if (v133)
    (*(void (**)(void *))(*(_QWORD *)v133 + 8))(v133);
  if (v147 < 0)
    operator delete(v146[0]);
  v134 = *a3;
  v144 = p_Scalar;
  if (p_Scalar)
  {
    v135 = (std::__shared_weak_count *)operator new();
    v136 = (std::__shared_weak_count_vtbl *)p_Scalar;
    v135->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v135->__shared_owners_ = 0;
    v135->__shared_weak_owners_ = 0;
    v135[1].__vftable = v136;
  }
  else
  {
    v135 = 0;
  }
  v145 = v135;
  p_Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v134 + 56))(v134, &v144);
  v137 = v145;
  if (v145)
  {
    v138 = (unint64_t *)&v145->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v140 = p_Scalar;
  p_Scalar = 0;
  if (v140)
    (*(void (**)(void *))(*(_QWORD *)v140 + 8))(v140);
  if (v187)
  {
    v141 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v187);
    MEMORY[0x1E0C023A0](v141, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v182, 0);
  result = (uint64_t)v194;
  if (v194)
  {
    v143 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v194);
    return MEMORY[0x1E0C023A0](v143, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E098F748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  void *a67;
  uint64_t a72;
  uint64_t *v72;
  void *v74;
  uint64_t v75;

  v74 = a67;
  a67 = 0;
  if (v74)
    (*(void (**)(void *))(*(_QWORD *)v74 + 8))(v74);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a64, 0);
  v75 = *v72;
  *v72 = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a72, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::Minimum::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  __int128 *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  char **v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t *v54;
  char *v55;
  char *v56;
  char *v57;
  __int128 v58;
  char *v59;
  char *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  char **v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  _OWORD *v79;
  unsigned __int8 *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  std::__shared_weak_count_vtbl *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  unint64_t *p_shared_owners;
  unint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t i;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  std::string *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::string *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  std::string *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::string *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  std::string *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::string *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  std::__shared_weak_count_vtbl *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  void *v126;
  std::__shared_weak_count *v127;
  std::__shared_weak_count_vtbl *v128;
  uint64_t j;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  void *v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  std::__shared_weak_count_vtbl *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t result;
  uint64_t v143;
  void *v144;
  std::__shared_weak_count *v145;
  void *v146[2];
  char v147;
  void *v148;
  std::__shared_weak_count *v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  void *v152[2];
  char v153;
  std::string *v154;
  std::__shared_weak_count *v155;
  void *v156[2];
  char v157;
  void *v158[2];
  char v159;
  std::string *v160;
  std::__shared_weak_count *v161;
  void *v162[2];
  char v163;
  void *v164[2];
  char v165;
  std::string *v166;
  std::__shared_weak_count *v167;
  void *v168;
  std::__shared_weak_count *v169;
  __n128 v170;
  __int128 v171;
  __int128 v172;
  void *v173[2];
  uint64_t v174;
  void *v175;
  void *v176;
  _QWORD *v177;
  __n128 v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  char **v182;
  __n128 v183;
  void *__p;
  void *v185;
  _QWORD *v186;
  void *v187;
  void *v188;
  _QWORD *v189;
  void *p_Scalar;
  void *v191;
  _QWORD *v192;
  __n128 v193;
  _QWORD *v194;
  __int128 v195;
  uint64_t v196;
  _QWORD v197[3];
  __int128 v198;
  uint64_t v199[3];
  uint64_t v200[3];
  _QWORD v201[3];
  std::string *Scalar;
  std::string *v203;
  _QWORD v204[3];
  _QWORD v205[3];
  _QWORD *v206;
  _BYTE v207[24];
  _BYTE *v208;
  _BYTE v209[24];
  _BYTE *v210;
  _QWORD v211[3];
  _QWORD *v212;
  uint64_t v213;

  v213 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v194 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v8;
  *(_QWORD *)v8 = v7;
  v203 = (std::string *)((char *)v8 + 8);
  v204[0] = (char *)v8 + 8;
  *(_QWORD *)&v195 = MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  p_Scalar = v10;
  *v10 = v9;
  v191 = v10 + 1;
  v192 = v10 + 1;
  *((_QWORD *)&v195 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&p_Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v187 = v12;
  *v12 = v11;
  v188 = v12 + 1;
  v189 = v12 + 1;
  v196 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v187);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v185 = v14 + 1;
  v186 = v14 + 1;
  v197[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v195, 4, &v193);
  MIL::IRParameter::Make(&v193, (uint64_t *)&v175);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v175);
  v15 = v175;
  v175 = 0;
  if (v15)
    (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v193.n128_u64[1];
  if (v193.n128_u64[1])
  {
    v17 = (unint64_t *)(v193.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v185 = __p;
    operator delete(__p);
  }
  if (v187)
  {
    v188 = v187;
    operator delete(v187);
  }
  if (p_Scalar)
  {
    v191 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v203 = Scalar;
    operator delete(Scalar);
  }
  v19 = v194;
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v21;
  *(_QWORD *)v21 = v20;
  v203 = (std::string *)((char *)v21 + 8);
  v204[0] = (char *)v21 + 8;
  *(_QWORD *)&v195 = MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  p_Scalar = v23;
  *v23 = v22;
  v191 = v23 + 1;
  v192 = v23 + 1;
  *((_QWORD *)&v195 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&p_Scalar);
  v24 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v25 = operator new(8uLL);
  v187 = v25;
  *v25 = v24;
  v188 = v25 + 1;
  v189 = v25 + 1;
  v196 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v187);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(8uLL);
  __p = v27;
  *v27 = v26;
  v185 = v27 + 1;
  v186 = v27 + 1;
  v197[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v195, 4, &v183);
  MIL::IRParameter::Make(&v183, (uint64_t *)&v175);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v19, "y", (uint64_t *)&v175);
  v28 = v175;
  v175 = 0;
  if (v28)
    (*(void (**)(void *))(*(_QWORD *)v28 + 8))(v28);
  v29 = (std::__shared_weak_count *)v183.n128_u64[1];
  if (v183.n128_u64[1])
  {
    v30 = (unint64_t *)(v183.n128_u64[1] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (__p)
  {
    v185 = __p;
    operator delete(__p);
  }
  if (v187)
  {
    v188 = v187;
    operator delete(v187);
  }
  if (p_Scalar)
  {
    v191 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v203 = Scalar;
    operator delete(Scalar);
  }
  v182 = 0;
  v32 = operator new();
  *(_QWORD *)v32 = 0;
  *(_QWORD *)(v32 + 8) = 0;
  *(_QWORD *)(v32 + 16) = 0;
  *(_QWORD *)&v195 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v182, (void **)v32);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v195, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v182, 1uLL);
  v33 = v182;
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = operator new(8uLL);
  p_Scalar = v35;
  *v35 = v34;
  v191 = v35 + 1;
  v192 = v35 + 1;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&p_Scalar);
  v36 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v37 = operator new(8uLL);
  v187 = v37;
  *v37 = v36;
  v188 = v37 + 1;
  v189 = v37 + 1;
  v203 = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v187);
  v38 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v39 = operator new(8uLL);
  __p = v39;
  *v39 = v38;
  v185 = v39 + 1;
  v186 = v39 + 1;
  v204[0] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v40 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v41 = operator new(8uLL);
  v175 = v41;
  *v41 = v40;
  v176 = v41 + 1;
  v177 = v41 + 1;
  v204[1] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v175);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 4, &v178);
  MIL::IRParameter::Make(&v178, &v179);
  v42 = v179;
  v180 = v179;
  if (v179)
  {
    v43 = (_QWORD *)operator new();
    v44 = v179;
    *v43 = &unk_1EA99F888;
    v43[1] = 0;
    v43[2] = 0;
    v43[3] = v44;
  }
  else
  {
    v43 = 0;
  }
  v181 = v43;
  v179 = 0;
  v45 = v33[2];
  v46 = v33[1];
  if (v46 >= v45)
  {
    v48 = (v46 - *v33) >> 4;
    v49 = v48 + 1;
    if ((unint64_t)(v48 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v50 = v45 - *v33;
    if (v50 >> 3 > v49)
      v49 = v50 >> 3;
    if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF0)
      v51 = 0xFFFFFFFFFFFFFFFLL;
    else
      v51 = v49;
    v197[1] = v33 + 2;
    v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v33 + 2), v51);
    v54 = (uint64_t *)&v52[16 * v48];
    *v54 = v42;
    v54[1] = (uint64_t)v43;
    v180 = 0;
    v181 = 0;
    v56 = *v33;
    v55 = v33[1];
    if (v55 == *v33)
    {
      v59 = v33[1];
      v57 = &v52[16 * v48];
    }
    else
    {
      v57 = &v52[16 * v48];
      do
      {
        v58 = *((_OWORD *)v55 - 1);
        v55 -= 16;
        *((_OWORD *)v57 - 1) = v58;
        v57 -= 16;
        *(_QWORD *)v55 = 0;
        *((_QWORD *)v55 + 1) = 0;
      }
      while (v55 != v56);
      v59 = *v33;
      v55 = v33[1];
    }
    v47 = (char *)(v54 + 2);
    *v33 = v57;
    *((_QWORD *)&v195 + 1) = v59;
    v33[1] = (char *)(v54 + 2);
    v196 = (uint64_t)v55;
    v60 = v33[2];
    v33[2] = &v52[16 * v53];
    v197[0] = v60;
    *(_QWORD *)&v195 = v59;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v195);
  }
  else
  {
    *(_QWORD *)v46 = v42;
    *((_QWORD *)v46 + 1) = v43;
    v47 = v46 + 16;
    v180 = 0;
    v181 = 0;
  }
  v33[1] = v47;
  v61 = v179;
  v179 = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  v62 = (std::__shared_weak_count *)v178.n128_u64[1];
  if (v178.n128_u64[1])
  {
    v63 = (unint64_t *)(v178.n128_u64[1] + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  if (v175)
  {
    v176 = v175;
    operator delete(v175);
  }
  if (__p)
  {
    v185 = __p;
    operator delete(__p);
  }
  if (v187)
  {
    v188 = v187;
    operator delete(v187);
  }
  if (p_Scalar)
  {
    v191 = p_Scalar;
    operator delete(p_Scalar);
  }
  *(_OWORD *)v173 = *(_OWORD *)a2;
  v174 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v65 = (uint64_t)v194;
  *(_QWORD *)&v172 = v194;
  if (v194)
  {
    v66 = (_QWORD *)operator new();
    *v66 = &unk_1EA99F8E8;
    v66[1] = 0;
    v66[2] = 0;
    v66[3] = v65;
  }
  else
  {
    v66 = 0;
  }
  *((_QWORD *)&v172 + 1) = v66;
  v194 = 0;
  *(_QWORD *)&v171 = v182;
  if (v182)
  {
    v67 = (_QWORD *)operator new();
    v68 = v182;
    *v67 = &unk_1EA99F948;
    v67[1] = 0;
    v67[2] = 0;
    v67[3] = v68;
  }
  else
  {
    v67 = 0;
  }
  *((_QWORD *)&v171 + 1) = v67;
  v182 = 0;
  v211[0] = &unk_1EA99FAC8;
  v211[1] = MIL::Validation::ValidateViaTypeInference;
  v212 = v211;
  v210 = 0;
  MIL::IROperator::Make((__int128 *)v173, &v172, &v171, (uint64_t)v211, (uint64_t)v209, a3);
  v69 = v210;
  if (v210 == v209)
  {
    v70 = 4;
    v69 = v209;
  }
  else
  {
    if (!v210)
      goto LABEL_74;
    v70 = 5;
  }
  (*(void (**)(void))(*v69 + 8 * v70))();
LABEL_74:
  v71 = v212;
  if (v212 == v211)
  {
    v72 = 4;
    v71 = v211;
    goto LABEL_78;
  }
  if (v212)
  {
    v72 = 5;
LABEL_78:
    (*(void (**)(void))(*v71 + 8 * v72))();
  }
  v73 = (std::__shared_weak_count *)*((_QWORD *)&v171 + 1);
  if (*((_QWORD *)&v171 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v171 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = (std::__shared_weak_count *)*((_QWORD *)&v172 + 1);
  if (*((_QWORD *)&v172 + 1))
  {
    v77 = (unint64_t *)(*((_QWORD *)&v172 + 1) + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  if (SHIBYTE(v174) < 0)
    operator delete(v173[0]);
  v187 = 0;
  v79 = (_OWORD *)operator new();
  *v79 = 0u;
  v79[1] = 0u;
  *((_DWORD *)v79 + 8) = 1065353216;
  v187 = v79;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v170);
  MIL::IRParameter::Make(&v170, (uint64_t *)&v195);
  v80 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v79, "minimum_compute_type", (uint64_t *)&v195);
  v81 = v195;
  *(_QWORD *)&v195 = 0;
  if (v81)
    (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
  v82 = (std::__shared_weak_count *)v170.n128_u64[1];
  if (v170.n128_u64[1])
  {
    v83 = (unint64_t *)(v170.n128_u64[1] + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v80 + 5) + 32))(*((_QWORD *)v80 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v80 + 5) + 48))(*((_QWORD *)v80 + 5), 1);
  v85 = *a3;
  v86 = (std::__shared_weak_count_vtbl *)v187;
  v168 = v187;
  if (v187)
  {
    v87 = (std::__shared_weak_count *)operator new();
    v87->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v87->__shared_owners_ = 0;
    v87->__shared_weak_owners_ = 0;
    v87[1].__vftable = v86;
  }
  else
  {
    v87 = 0;
  }
  v169 = v87;
  v187 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v85 + 184))(v85, &v168);
  v88 = v169;
  if (v169)
  {
    p_shared_owners = (unint64_t *)&v169->__shared_owners_;
    do
      v90 = __ldaxr(p_shared_owners);
    while (__stlxr(v90 - 1, p_shared_owners));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v195, "x");
  std::string::basic_string[abi:ne180100]<0>(v197, "y");
  Scalar = 0;
  v203 = 0;
  v204[0] = 0;
  p_Scalar = &Scalar;
  LOBYTE(v191) = 0;
  Scalar = (std::string *)operator new(0x30uLL);
  v203 = Scalar;
  v204[0] = Scalar + 2;
  v203 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v204, &v195, &v198, Scalar);
  MIL::ValueTypeInference::BroadcastFromInputs((__int128 **)&Scalar, (uint64_t)v207);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v91 + 200))(v91, v207);
  v92 = v208;
  if (v208 == v207)
  {
    v93 = 4;
    v92 = v207;
    goto LABEL_110;
  }
  if (v208)
  {
    v93 = 5;
LABEL_110:
    (*(void (**)(void))(*v92 + 8 * v93))();
  }
  p_Scalar = &Scalar;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_Scalar);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v197[i + 2]) < 0)
      operator delete((void *)v197[i]);
  }
  v95 = *a3;
  v205[0] = &off_1EA9A00F8;
  v205[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceMinimum;
  v206 = v205;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v95 + 216))(v95, v205);
  v96 = v206;
  if (v206 == v205)
  {
    v97 = 4;
    v96 = v205;
  }
  else
  {
    if (!v206)
      goto LABEL_120;
    v97 = 5;
  }
  (*(void (**)(void))(*v96 + 8 * v97))();
LABEL_120:
  MIL::Validation::TensorDTypeConstraints::Make(&v195);
  v98 = v195;
  std::string::basic_string[abi:ne180100]<0>(v164, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v164, 0, (uint64_t *)&Scalar);
  v166 = Scalar;
  if (Scalar)
  {
    v99 = (std::__shared_weak_count *)operator new();
    v100 = Scalar;
    v99->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v99->__shared_owners_ = 0;
    v99->__shared_weak_owners_ = 0;
    v99[1].__vftable = (std::__shared_weak_count_vtbl *)v100;
  }
  else
  {
    v99 = 0;
  }
  v167 = v99;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v162, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v98 + 24))(v98, &v166, v162);
  if (v163 < 0)
    operator delete(v162[0]);
  v101 = v167;
  if (v167)
  {
    v102 = (unint64_t *)&v167->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = Scalar;
  Scalar = 0;
  if (v104)
    (*(void (**)(std::string *))(v104->__r_.__value_.__r.__words[0] + 8))(v104);
  if (v165 < 0)
    operator delete(v164[0]);
  v105 = v195;
  std::string::basic_string[abi:ne180100]<0>(v158, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v158, 0, (uint64_t *)&Scalar);
  v160 = Scalar;
  if (Scalar)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = Scalar;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v161 = v106;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v156, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v105 + 24))(v105, &v160, v156);
  if (v157 < 0)
    operator delete(v156[0]);
  v108 = v161;
  if (v161)
  {
    v109 = (unint64_t *)&v161->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = Scalar;
  Scalar = 0;
  if (v111)
    (*(void (**)(std::string *))(v111->__r_.__value_.__r.__words[0] + 8))(v111);
  if (v159 < 0)
    operator delete(v158[0]);
  v112 = v195;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v154 = Scalar;
  if (Scalar)
  {
    v113 = (std::__shared_weak_count *)operator new();
    v114 = Scalar;
    v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v113->__shared_owners_ = 0;
    v113->__shared_weak_owners_ = 0;
    v113[1].__vftable = (std::__shared_weak_count_vtbl *)v114;
  }
  else
  {
    v113 = 0;
  }
  v155 = v113;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v152, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v112 + 24))(v112, &v154, v152);
  if (v153 < 0)
    operator delete(v152[0]);
  v115 = v155;
  if (v155)
  {
    v116 = (unint64_t *)&v155->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = Scalar;
  Scalar = 0;
  if (v118)
    (*(void (**)(std::string *))(v118->__r_.__value_.__r.__words[0] + 8))(v118);
  v119 = *a3;
  v150 = v195;
  if ((_QWORD)v195)
  {
    v120 = (std::__shared_weak_count *)operator new();
    v121 = (std::__shared_weak_count_vtbl *)v195;
    v120->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v120->__shared_owners_ = 0;
    v120->__shared_weak_owners_ = 0;
    v120[1].__vftable = v121;
  }
  else
  {
    v120 = 0;
  }
  v151 = v120;
  *(_QWORD *)&v195 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v119 + 56))(v119, &v150);
  v122 = v151;
  if (v151)
  {
    v123 = (unint64_t *)&v151->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v125 = v195;
  *(_QWORD *)&v195 = 0;
  if (v125)
    (*(void (**)(uint64_t))(*(_QWORD *)v125 + 8))(v125);
  MIL::Validation::PossibleStringValuesConstraints::Make(&p_Scalar);
  v126 = p_Scalar;
  std::string::basic_string[abi:ne180100]<0>(v146, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v146, 1, (uint64_t *)&__p);
  v148 = __p;
  if (__p)
  {
    v127 = (std::__shared_weak_count *)operator new();
    v128 = (std::__shared_weak_count_vtbl *)__p;
    v127->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v127->__shared_owners_ = 0;
    v127->__shared_weak_owners_ = 0;
    v127[1].__vftable = v128;
  }
  else
  {
    v127 = 0;
  }
  v149 = v127;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&v195, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v197, "fp16");
  std::string::basic_string[abi:ne180100]<0>(&v198, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v199, "int32");
  std::string::basic_string[abi:ne180100]<0>(v200, "int8");
  std::string::basic_string[abi:ne180100]<0>(v201, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v195, 6);
  (*(void (**)(void *, void **, std::string **, uint64_t))(*(_QWORD *)v126 + 24))(v126, &v148, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -18; j -= 3)
  {
    if (SHIBYTE(v201[j + 2]) < 0)
      operator delete((void *)v201[j]);
  }
  v130 = v149;
  if (v149)
  {
    v131 = (unint64_t *)&v149->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = __p;
  __p = 0;
  if (v133)
    (*(void (**)(void *))(*(_QWORD *)v133 + 8))(v133);
  if (v147 < 0)
    operator delete(v146[0]);
  v134 = *a3;
  v144 = p_Scalar;
  if (p_Scalar)
  {
    v135 = (std::__shared_weak_count *)operator new();
    v136 = (std::__shared_weak_count_vtbl *)p_Scalar;
    v135->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v135->__shared_owners_ = 0;
    v135->__shared_weak_owners_ = 0;
    v135[1].__vftable = v136;
  }
  else
  {
    v135 = 0;
  }
  v145 = v135;
  p_Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v134 + 56))(v134, &v144);
  v137 = v145;
  if (v145)
  {
    v138 = (unint64_t *)&v145->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v140 = p_Scalar;
  p_Scalar = 0;
  if (v140)
    (*(void (**)(void *))(*(_QWORD *)v140 + 8))(v140);
  if (v187)
  {
    v141 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v187);
    MEMORY[0x1E0C023A0](v141, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v182, 0);
  result = (uint64_t)v194;
  if (v194)
  {
    v143 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v194);
    return MEMORY[0x1E0C023A0](v143, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0990F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  void *a67;
  uint64_t a72;
  uint64_t *v72;
  void *v74;
  uint64_t v75;

  v74 = a67;
  a67 = 0;
  if (v74)
    (*(void (**)(void *))(*(_QWORD *)v74 + 8))(v74);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a64, 0);
  v75 = *v72;
  *v72 = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a72, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::Mod::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  __int128 *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  char **v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t *v54;
  char *v55;
  char *v56;
  char *v57;
  __int128 v58;
  char *v59;
  char *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  char **v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  _OWORD *v79;
  unsigned __int8 *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  std::__shared_weak_count_vtbl *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  unint64_t *p_shared_owners;
  unint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t i;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  std::string *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::string *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  std::string *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::string *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  std::string *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::string *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  std::__shared_weak_count_vtbl *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  void *v126;
  std::__shared_weak_count *v127;
  std::__shared_weak_count_vtbl *v128;
  uint64_t j;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  void *v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  std::__shared_weak_count_vtbl *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t result;
  uint64_t v143;
  void *v144;
  std::__shared_weak_count *v145;
  void *v146[2];
  char v147;
  void *v148;
  std::__shared_weak_count *v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  void *v152[2];
  char v153;
  std::string *v154;
  std::__shared_weak_count *v155;
  void *v156[2];
  char v157;
  void *v158[2];
  char v159;
  std::string *v160;
  std::__shared_weak_count *v161;
  void *v162[2];
  char v163;
  void *v164[2];
  char v165;
  std::string *v166;
  std::__shared_weak_count *v167;
  void *v168;
  std::__shared_weak_count *v169;
  __n128 v170;
  __int128 v171;
  __int128 v172;
  void *v173[2];
  uint64_t v174;
  void *v175;
  void *v176;
  _QWORD *v177;
  __n128 v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  char **v182;
  __n128 v183;
  void *__p;
  void *v185;
  _QWORD *v186;
  void *v187;
  void *v188;
  _QWORD *v189;
  void *p_Scalar;
  void *v191;
  _QWORD *v192;
  __n128 v193;
  _QWORD *v194;
  __int128 v195;
  uint64_t v196;
  _QWORD v197[3];
  __int128 v198;
  uint64_t v199[3];
  uint64_t v200[3];
  _QWORD v201[3];
  std::string *Scalar;
  std::string *v203;
  _QWORD v204[3];
  _QWORD v205[3];
  _QWORD *v206;
  _BYTE v207[24];
  _BYTE *v208;
  _BYTE v209[24];
  _BYTE *v210;
  _QWORD v211[3];
  _QWORD *v212;
  uint64_t v213;

  v213 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v194 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v8;
  *(_QWORD *)v8 = v7;
  v203 = (std::string *)((char *)v8 + 8);
  v204[0] = (char *)v8 + 8;
  *(_QWORD *)&v195 = MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  p_Scalar = v10;
  *v10 = v9;
  v191 = v10 + 1;
  v192 = v10 + 1;
  *((_QWORD *)&v195 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&p_Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v187 = v12;
  *v12 = v11;
  v188 = v12 + 1;
  v189 = v12 + 1;
  v196 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v187);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v185 = v14 + 1;
  v186 = v14 + 1;
  v197[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v195, 4, &v193);
  MIL::IRParameter::Make(&v193, (uint64_t *)&v175);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v175);
  v15 = v175;
  v175 = 0;
  if (v15)
    (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v193.n128_u64[1];
  if (v193.n128_u64[1])
  {
    v17 = (unint64_t *)(v193.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v185 = __p;
    operator delete(__p);
  }
  if (v187)
  {
    v188 = v187;
    operator delete(v187);
  }
  if (p_Scalar)
  {
    v191 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v203 = Scalar;
    operator delete(Scalar);
  }
  v19 = v194;
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v21;
  *(_QWORD *)v21 = v20;
  v203 = (std::string *)((char *)v21 + 8);
  v204[0] = (char *)v21 + 8;
  *(_QWORD *)&v195 = MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  p_Scalar = v23;
  *v23 = v22;
  v191 = v23 + 1;
  v192 = v23 + 1;
  *((_QWORD *)&v195 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&p_Scalar);
  v24 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v25 = operator new(8uLL);
  v187 = v25;
  *v25 = v24;
  v188 = v25 + 1;
  v189 = v25 + 1;
  v196 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v187);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(8uLL);
  __p = v27;
  *v27 = v26;
  v185 = v27 + 1;
  v186 = v27 + 1;
  v197[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v195, 4, &v183);
  MIL::IRParameter::Make(&v183, (uint64_t *)&v175);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v19, "y", (uint64_t *)&v175);
  v28 = v175;
  v175 = 0;
  if (v28)
    (*(void (**)(void *))(*(_QWORD *)v28 + 8))(v28);
  v29 = (std::__shared_weak_count *)v183.n128_u64[1];
  if (v183.n128_u64[1])
  {
    v30 = (unint64_t *)(v183.n128_u64[1] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (__p)
  {
    v185 = __p;
    operator delete(__p);
  }
  if (v187)
  {
    v188 = v187;
    operator delete(v187);
  }
  if (p_Scalar)
  {
    v191 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v203 = Scalar;
    operator delete(Scalar);
  }
  v182 = 0;
  v32 = operator new();
  *(_QWORD *)v32 = 0;
  *(_QWORD *)(v32 + 8) = 0;
  *(_QWORD *)(v32 + 16) = 0;
  *(_QWORD *)&v195 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v182, (void **)v32);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v195, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v182, 1uLL);
  v33 = v182;
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = operator new(8uLL);
  p_Scalar = v35;
  *v35 = v34;
  v191 = v35 + 1;
  v192 = v35 + 1;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&p_Scalar);
  v36 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v37 = operator new(8uLL);
  v187 = v37;
  *v37 = v36;
  v188 = v37 + 1;
  v189 = v37 + 1;
  v203 = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v187);
  v38 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v39 = operator new(8uLL);
  __p = v39;
  *v39 = v38;
  v185 = v39 + 1;
  v186 = v39 + 1;
  v204[0] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v40 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v41 = operator new(8uLL);
  v175 = v41;
  *v41 = v40;
  v176 = v41 + 1;
  v177 = v41 + 1;
  v204[1] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v175);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 4, &v178);
  MIL::IRParameter::Make(&v178, &v179);
  v42 = v179;
  v180 = v179;
  if (v179)
  {
    v43 = (_QWORD *)operator new();
    v44 = v179;
    *v43 = &unk_1EA99F888;
    v43[1] = 0;
    v43[2] = 0;
    v43[3] = v44;
  }
  else
  {
    v43 = 0;
  }
  v181 = v43;
  v179 = 0;
  v45 = v33[2];
  v46 = v33[1];
  if (v46 >= v45)
  {
    v48 = (v46 - *v33) >> 4;
    v49 = v48 + 1;
    if ((unint64_t)(v48 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v50 = v45 - *v33;
    if (v50 >> 3 > v49)
      v49 = v50 >> 3;
    if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF0)
      v51 = 0xFFFFFFFFFFFFFFFLL;
    else
      v51 = v49;
    v197[1] = v33 + 2;
    v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v33 + 2), v51);
    v54 = (uint64_t *)&v52[16 * v48];
    *v54 = v42;
    v54[1] = (uint64_t)v43;
    v180 = 0;
    v181 = 0;
    v56 = *v33;
    v55 = v33[1];
    if (v55 == *v33)
    {
      v59 = v33[1];
      v57 = &v52[16 * v48];
    }
    else
    {
      v57 = &v52[16 * v48];
      do
      {
        v58 = *((_OWORD *)v55 - 1);
        v55 -= 16;
        *((_OWORD *)v57 - 1) = v58;
        v57 -= 16;
        *(_QWORD *)v55 = 0;
        *((_QWORD *)v55 + 1) = 0;
      }
      while (v55 != v56);
      v59 = *v33;
      v55 = v33[1];
    }
    v47 = (char *)(v54 + 2);
    *v33 = v57;
    *((_QWORD *)&v195 + 1) = v59;
    v33[1] = (char *)(v54 + 2);
    v196 = (uint64_t)v55;
    v60 = v33[2];
    v33[2] = &v52[16 * v53];
    v197[0] = v60;
    *(_QWORD *)&v195 = v59;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v195);
  }
  else
  {
    *(_QWORD *)v46 = v42;
    *((_QWORD *)v46 + 1) = v43;
    v47 = v46 + 16;
    v180 = 0;
    v181 = 0;
  }
  v33[1] = v47;
  v61 = v179;
  v179 = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  v62 = (std::__shared_weak_count *)v178.n128_u64[1];
  if (v178.n128_u64[1])
  {
    v63 = (unint64_t *)(v178.n128_u64[1] + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  if (v175)
  {
    v176 = v175;
    operator delete(v175);
  }
  if (__p)
  {
    v185 = __p;
    operator delete(__p);
  }
  if (v187)
  {
    v188 = v187;
    operator delete(v187);
  }
  if (p_Scalar)
  {
    v191 = p_Scalar;
    operator delete(p_Scalar);
  }
  *(_OWORD *)v173 = *(_OWORD *)a2;
  v174 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v65 = (uint64_t)v194;
  *(_QWORD *)&v172 = v194;
  if (v194)
  {
    v66 = (_QWORD *)operator new();
    *v66 = &unk_1EA99F8E8;
    v66[1] = 0;
    v66[2] = 0;
    v66[3] = v65;
  }
  else
  {
    v66 = 0;
  }
  *((_QWORD *)&v172 + 1) = v66;
  v194 = 0;
  *(_QWORD *)&v171 = v182;
  if (v182)
  {
    v67 = (_QWORD *)operator new();
    v68 = v182;
    *v67 = &unk_1EA99F948;
    v67[1] = 0;
    v67[2] = 0;
    v67[3] = v68;
  }
  else
  {
    v67 = 0;
  }
  *((_QWORD *)&v171 + 1) = v67;
  v182 = 0;
  v211[0] = &unk_1EA99FAC8;
  v211[1] = MIL::Validation::ValidateViaTypeInference;
  v212 = v211;
  v210 = 0;
  MIL::IROperator::Make((__int128 *)v173, &v172, &v171, (uint64_t)v211, (uint64_t)v209, a3);
  v69 = v210;
  if (v210 == v209)
  {
    v70 = 4;
    v69 = v209;
  }
  else
  {
    if (!v210)
      goto LABEL_74;
    v70 = 5;
  }
  (*(void (**)(void))(*v69 + 8 * v70))();
LABEL_74:
  v71 = v212;
  if (v212 == v211)
  {
    v72 = 4;
    v71 = v211;
    goto LABEL_78;
  }
  if (v212)
  {
    v72 = 5;
LABEL_78:
    (*(void (**)(void))(*v71 + 8 * v72))();
  }
  v73 = (std::__shared_weak_count *)*((_QWORD *)&v171 + 1);
  if (*((_QWORD *)&v171 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v171 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = (std::__shared_weak_count *)*((_QWORD *)&v172 + 1);
  if (*((_QWORD *)&v172 + 1))
  {
    v77 = (unint64_t *)(*((_QWORD *)&v172 + 1) + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  if (SHIBYTE(v174) < 0)
    operator delete(v173[0]);
  v187 = 0;
  v79 = (_OWORD *)operator new();
  *v79 = 0u;
  v79[1] = 0u;
  *((_DWORD *)v79 + 8) = 1065353216;
  v187 = v79;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v170);
  MIL::IRParameter::Make(&v170, (uint64_t *)&v195);
  v80 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v79, "minimum_compute_type", (uint64_t *)&v195);
  v81 = v195;
  *(_QWORD *)&v195 = 0;
  if (v81)
    (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
  v82 = (std::__shared_weak_count *)v170.n128_u64[1];
  if (v170.n128_u64[1])
  {
    v83 = (unint64_t *)(v170.n128_u64[1] + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v80 + 5) + 32))(*((_QWORD *)v80 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v80 + 5) + 48))(*((_QWORD *)v80 + 5), 1);
  v85 = *a3;
  v86 = (std::__shared_weak_count_vtbl *)v187;
  v168 = v187;
  if (v187)
  {
    v87 = (std::__shared_weak_count *)operator new();
    v87->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v87->__shared_owners_ = 0;
    v87->__shared_weak_owners_ = 0;
    v87[1].__vftable = v86;
  }
  else
  {
    v87 = 0;
  }
  v169 = v87;
  v187 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v85 + 184))(v85, &v168);
  v88 = v169;
  if (v169)
  {
    p_shared_owners = (unint64_t *)&v169->__shared_owners_;
    do
      v90 = __ldaxr(p_shared_owners);
    while (__stlxr(v90 - 1, p_shared_owners));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v195, "x");
  std::string::basic_string[abi:ne180100]<0>(v197, "y");
  Scalar = 0;
  v203 = 0;
  v204[0] = 0;
  p_Scalar = &Scalar;
  LOBYTE(v191) = 0;
  Scalar = (std::string *)operator new(0x30uLL);
  v203 = Scalar;
  v204[0] = Scalar + 2;
  v203 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v204, &v195, &v198, Scalar);
  MIL::ValueTypeInference::BroadcastFromInputs((__int128 **)&Scalar, (uint64_t)v207);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v91 + 200))(v91, v207);
  v92 = v208;
  if (v208 == v207)
  {
    v93 = 4;
    v92 = v207;
    goto LABEL_110;
  }
  if (v208)
  {
    v93 = 5;
LABEL_110:
    (*(void (**)(void))(*v92 + 8 * v93))();
  }
  p_Scalar = &Scalar;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_Scalar);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v197[i + 2]) < 0)
      operator delete((void *)v197[i]);
  }
  v95 = *a3;
  v205[0] = &off_1EA9A00F8;
  v205[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceMod;
  v206 = v205;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v95 + 216))(v95, v205);
  v96 = v206;
  if (v206 == v205)
  {
    v97 = 4;
    v96 = v205;
  }
  else
  {
    if (!v206)
      goto LABEL_120;
    v97 = 5;
  }
  (*(void (**)(void))(*v96 + 8 * v97))();
LABEL_120:
  MIL::Validation::TensorDTypeConstraints::Make(&v195);
  v98 = v195;
  std::string::basic_string[abi:ne180100]<0>(v164, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v164, 0, (uint64_t *)&Scalar);
  v166 = Scalar;
  if (Scalar)
  {
    v99 = (std::__shared_weak_count *)operator new();
    v100 = Scalar;
    v99->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v99->__shared_owners_ = 0;
    v99->__shared_weak_owners_ = 0;
    v99[1].__vftable = (std::__shared_weak_count_vtbl *)v100;
  }
  else
  {
    v99 = 0;
  }
  v167 = v99;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v162, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v98 + 24))(v98, &v166, v162);
  if (v163 < 0)
    operator delete(v162[0]);
  v101 = v167;
  if (v167)
  {
    v102 = (unint64_t *)&v167->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = Scalar;
  Scalar = 0;
  if (v104)
    (*(void (**)(std::string *))(v104->__r_.__value_.__r.__words[0] + 8))(v104);
  if (v165 < 0)
    operator delete(v164[0]);
  v105 = v195;
  std::string::basic_string[abi:ne180100]<0>(v158, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v158, 0, (uint64_t *)&Scalar);
  v160 = Scalar;
  if (Scalar)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = Scalar;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v161 = v106;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v156, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v105 + 24))(v105, &v160, v156);
  if (v157 < 0)
    operator delete(v156[0]);
  v108 = v161;
  if (v161)
  {
    v109 = (unint64_t *)&v161->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = Scalar;
  Scalar = 0;
  if (v111)
    (*(void (**)(std::string *))(v111->__r_.__value_.__r.__words[0] + 8))(v111);
  if (v159 < 0)
    operator delete(v158[0]);
  v112 = v195;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v154 = Scalar;
  if (Scalar)
  {
    v113 = (std::__shared_weak_count *)operator new();
    v114 = Scalar;
    v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v113->__shared_owners_ = 0;
    v113->__shared_weak_owners_ = 0;
    v113[1].__vftable = (std::__shared_weak_count_vtbl *)v114;
  }
  else
  {
    v113 = 0;
  }
  v155 = v113;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v152, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v112 + 24))(v112, &v154, v152);
  if (v153 < 0)
    operator delete(v152[0]);
  v115 = v155;
  if (v155)
  {
    v116 = (unint64_t *)&v155->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = Scalar;
  Scalar = 0;
  if (v118)
    (*(void (**)(std::string *))(v118->__r_.__value_.__r.__words[0] + 8))(v118);
  v119 = *a3;
  v150 = v195;
  if ((_QWORD)v195)
  {
    v120 = (std::__shared_weak_count *)operator new();
    v121 = (std::__shared_weak_count_vtbl *)v195;
    v120->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v120->__shared_owners_ = 0;
    v120->__shared_weak_owners_ = 0;
    v120[1].__vftable = v121;
  }
  else
  {
    v120 = 0;
  }
  v151 = v120;
  *(_QWORD *)&v195 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v119 + 56))(v119, &v150);
  v122 = v151;
  if (v151)
  {
    v123 = (unint64_t *)&v151->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v125 = v195;
  *(_QWORD *)&v195 = 0;
  if (v125)
    (*(void (**)(uint64_t))(*(_QWORD *)v125 + 8))(v125);
  MIL::Validation::PossibleStringValuesConstraints::Make(&p_Scalar);
  v126 = p_Scalar;
  std::string::basic_string[abi:ne180100]<0>(v146, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v146, 1, (uint64_t *)&__p);
  v148 = __p;
  if (__p)
  {
    v127 = (std::__shared_weak_count *)operator new();
    v128 = (std::__shared_weak_count_vtbl *)__p;
    v127->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v127->__shared_owners_ = 0;
    v127->__shared_weak_owners_ = 0;
    v127[1].__vftable = v128;
  }
  else
  {
    v127 = 0;
  }
  v149 = v127;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&v195, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v197, "fp16");
  std::string::basic_string[abi:ne180100]<0>(&v198, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v199, "int32");
  std::string::basic_string[abi:ne180100]<0>(v200, "int8");
  std::string::basic_string[abi:ne180100]<0>(v201, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v195, 6);
  (*(void (**)(void *, void **, std::string **, uint64_t))(*(_QWORD *)v126 + 24))(v126, &v148, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -18; j -= 3)
  {
    if (SHIBYTE(v201[j + 2]) < 0)
      operator delete((void *)v201[j]);
  }
  v130 = v149;
  if (v149)
  {
    v131 = (unint64_t *)&v149->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = __p;
  __p = 0;
  if (v133)
    (*(void (**)(void *))(*(_QWORD *)v133 + 8))(v133);
  if (v147 < 0)
    operator delete(v146[0]);
  v134 = *a3;
  v144 = p_Scalar;
  if (p_Scalar)
  {
    v135 = (std::__shared_weak_count *)operator new();
    v136 = (std::__shared_weak_count_vtbl *)p_Scalar;
    v135->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v135->__shared_owners_ = 0;
    v135->__shared_weak_owners_ = 0;
    v135[1].__vftable = v136;
  }
  else
  {
    v135 = 0;
  }
  v145 = v135;
  p_Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v134 + 56))(v134, &v144);
  v137 = v145;
  if (v145)
  {
    v138 = (unint64_t *)&v145->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v140 = p_Scalar;
  p_Scalar = 0;
  if (v140)
    (*(void (**)(void *))(*(_QWORD *)v140 + 8))(v140);
  if (v187)
  {
    v141 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v187);
    MEMORY[0x1E0C023A0](v141, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v182, 0);
  result = (uint64_t)v194;
  if (v194)
  {
    v143 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v194);
    return MEMORY[0x1E0C023A0](v143, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09926F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  void *a67;
  uint64_t a72;
  uint64_t *v72;
  void *v74;
  uint64_t v75;

  v74 = a67;
  a67 = 0;
  if (v74)
    (*(void (**)(void *))(*(_QWORD *)v74 + 8))(v74);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a64, 0);
  v75 = *v72;
  *v72 = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a72, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::Mul::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  __int128 *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  char **v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t *v54;
  char *v55;
  char *v56;
  char *v57;
  __int128 v58;
  char *v59;
  char *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  char **v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  _OWORD *v79;
  unsigned __int8 *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  std::__shared_weak_count_vtbl *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  unint64_t *p_shared_owners;
  unint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t i;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  std::string *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::string *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  std::string *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::string *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  std::string *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::string *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  std::__shared_weak_count_vtbl *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  void *v126;
  std::__shared_weak_count *v127;
  std::__shared_weak_count_vtbl *v128;
  uint64_t j;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  void *v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  std::__shared_weak_count_vtbl *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t result;
  uint64_t v143;
  void *v144;
  std::__shared_weak_count *v145;
  void *v146[2];
  char v147;
  void *v148;
  std::__shared_weak_count *v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  void *v152[2];
  char v153;
  std::string *v154;
  std::__shared_weak_count *v155;
  void *v156[2];
  char v157;
  void *v158[2];
  char v159;
  std::string *v160;
  std::__shared_weak_count *v161;
  void *v162[2];
  char v163;
  void *v164[2];
  char v165;
  std::string *v166;
  std::__shared_weak_count *v167;
  void *v168;
  std::__shared_weak_count *v169;
  __n128 v170;
  __int128 v171;
  __int128 v172;
  void *v173[2];
  uint64_t v174;
  void *v175;
  void *v176;
  _QWORD *v177;
  __n128 v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  char **v182;
  __n128 v183;
  void *__p;
  void *v185;
  _QWORD *v186;
  void *v187;
  void *v188;
  _QWORD *v189;
  void *p_Scalar;
  void *v191;
  _QWORD *v192;
  __n128 v193;
  _QWORD *v194;
  __int128 v195;
  uint64_t v196;
  _QWORD v197[3];
  __int128 v198;
  uint64_t v199[3];
  uint64_t v200[3];
  _QWORD v201[3];
  std::string *Scalar;
  std::string *v203;
  _QWORD v204[3];
  _QWORD v205[3];
  _QWORD *v206;
  _BYTE v207[24];
  _BYTE *v208;
  _BYTE v209[24];
  _BYTE *v210;
  _QWORD v211[3];
  _QWORD *v212;
  uint64_t v213;

  v213 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v194 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v8;
  *(_QWORD *)v8 = v7;
  v203 = (std::string *)((char *)v8 + 8);
  v204[0] = (char *)v8 + 8;
  *(_QWORD *)&v195 = MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  p_Scalar = v10;
  *v10 = v9;
  v191 = v10 + 1;
  v192 = v10 + 1;
  *((_QWORD *)&v195 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&p_Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v187 = v12;
  *v12 = v11;
  v188 = v12 + 1;
  v189 = v12 + 1;
  v196 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v187);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v185 = v14 + 1;
  v186 = v14 + 1;
  v197[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v195, 4, &v193);
  MIL::IRParameter::Make(&v193, (uint64_t *)&v175);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v175);
  v15 = v175;
  v175 = 0;
  if (v15)
    (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v193.n128_u64[1];
  if (v193.n128_u64[1])
  {
    v17 = (unint64_t *)(v193.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v185 = __p;
    operator delete(__p);
  }
  if (v187)
  {
    v188 = v187;
    operator delete(v187);
  }
  if (p_Scalar)
  {
    v191 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v203 = Scalar;
    operator delete(Scalar);
  }
  v19 = v194;
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v21;
  *(_QWORD *)v21 = v20;
  v203 = (std::string *)((char *)v21 + 8);
  v204[0] = (char *)v21 + 8;
  *(_QWORD *)&v195 = MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  p_Scalar = v23;
  *v23 = v22;
  v191 = v23 + 1;
  v192 = v23 + 1;
  *((_QWORD *)&v195 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&p_Scalar);
  v24 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v25 = operator new(8uLL);
  v187 = v25;
  *v25 = v24;
  v188 = v25 + 1;
  v189 = v25 + 1;
  v196 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v187);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(8uLL);
  __p = v27;
  *v27 = v26;
  v185 = v27 + 1;
  v186 = v27 + 1;
  v197[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v195, 4, &v183);
  MIL::IRParameter::Make(&v183, (uint64_t *)&v175);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v19, "y", (uint64_t *)&v175);
  v28 = v175;
  v175 = 0;
  if (v28)
    (*(void (**)(void *))(*(_QWORD *)v28 + 8))(v28);
  v29 = (std::__shared_weak_count *)v183.n128_u64[1];
  if (v183.n128_u64[1])
  {
    v30 = (unint64_t *)(v183.n128_u64[1] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (__p)
  {
    v185 = __p;
    operator delete(__p);
  }
  if (v187)
  {
    v188 = v187;
    operator delete(v187);
  }
  if (p_Scalar)
  {
    v191 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v203 = Scalar;
    operator delete(Scalar);
  }
  v182 = 0;
  v32 = operator new();
  *(_QWORD *)v32 = 0;
  *(_QWORD *)(v32 + 8) = 0;
  *(_QWORD *)(v32 + 16) = 0;
  *(_QWORD *)&v195 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v182, (void **)v32);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v195, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v182, 1uLL);
  v33 = v182;
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = operator new(8uLL);
  p_Scalar = v35;
  *v35 = v34;
  v191 = v35 + 1;
  v192 = v35 + 1;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&p_Scalar);
  v36 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v37 = operator new(8uLL);
  v187 = v37;
  *v37 = v36;
  v188 = v37 + 1;
  v189 = v37 + 1;
  v203 = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v187);
  v38 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v39 = operator new(8uLL);
  __p = v39;
  *v39 = v38;
  v185 = v39 + 1;
  v186 = v39 + 1;
  v204[0] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v40 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v41 = operator new(8uLL);
  v175 = v41;
  *v41 = v40;
  v176 = v41 + 1;
  v177 = v41 + 1;
  v204[1] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v175);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 4, &v178);
  MIL::IRParameter::Make(&v178, &v179);
  v42 = v179;
  v180 = v179;
  if (v179)
  {
    v43 = (_QWORD *)operator new();
    v44 = v179;
    *v43 = &unk_1EA99F888;
    v43[1] = 0;
    v43[2] = 0;
    v43[3] = v44;
  }
  else
  {
    v43 = 0;
  }
  v181 = v43;
  v179 = 0;
  v45 = v33[2];
  v46 = v33[1];
  if (v46 >= v45)
  {
    v48 = (v46 - *v33) >> 4;
    v49 = v48 + 1;
    if ((unint64_t)(v48 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v50 = v45 - *v33;
    if (v50 >> 3 > v49)
      v49 = v50 >> 3;
    if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF0)
      v51 = 0xFFFFFFFFFFFFFFFLL;
    else
      v51 = v49;
    v197[1] = v33 + 2;
    v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v33 + 2), v51);
    v54 = (uint64_t *)&v52[16 * v48];
    *v54 = v42;
    v54[1] = (uint64_t)v43;
    v180 = 0;
    v181 = 0;
    v56 = *v33;
    v55 = v33[1];
    if (v55 == *v33)
    {
      v59 = v33[1];
      v57 = &v52[16 * v48];
    }
    else
    {
      v57 = &v52[16 * v48];
      do
      {
        v58 = *((_OWORD *)v55 - 1);
        v55 -= 16;
        *((_OWORD *)v57 - 1) = v58;
        v57 -= 16;
        *(_QWORD *)v55 = 0;
        *((_QWORD *)v55 + 1) = 0;
      }
      while (v55 != v56);
      v59 = *v33;
      v55 = v33[1];
    }
    v47 = (char *)(v54 + 2);
    *v33 = v57;
    *((_QWORD *)&v195 + 1) = v59;
    v33[1] = (char *)(v54 + 2);
    v196 = (uint64_t)v55;
    v60 = v33[2];
    v33[2] = &v52[16 * v53];
    v197[0] = v60;
    *(_QWORD *)&v195 = v59;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v195);
  }
  else
  {
    *(_QWORD *)v46 = v42;
    *((_QWORD *)v46 + 1) = v43;
    v47 = v46 + 16;
    v180 = 0;
    v181 = 0;
  }
  v33[1] = v47;
  v61 = v179;
  v179 = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  v62 = (std::__shared_weak_count *)v178.n128_u64[1];
  if (v178.n128_u64[1])
  {
    v63 = (unint64_t *)(v178.n128_u64[1] + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  if (v175)
  {
    v176 = v175;
    operator delete(v175);
  }
  if (__p)
  {
    v185 = __p;
    operator delete(__p);
  }
  if (v187)
  {
    v188 = v187;
    operator delete(v187);
  }
  if (p_Scalar)
  {
    v191 = p_Scalar;
    operator delete(p_Scalar);
  }
  *(_OWORD *)v173 = *(_OWORD *)a2;
  v174 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v65 = (uint64_t)v194;
  *(_QWORD *)&v172 = v194;
  if (v194)
  {
    v66 = (_QWORD *)operator new();
    *v66 = &unk_1EA99F8E8;
    v66[1] = 0;
    v66[2] = 0;
    v66[3] = v65;
  }
  else
  {
    v66 = 0;
  }
  *((_QWORD *)&v172 + 1) = v66;
  v194 = 0;
  *(_QWORD *)&v171 = v182;
  if (v182)
  {
    v67 = (_QWORD *)operator new();
    v68 = v182;
    *v67 = &unk_1EA99F948;
    v67[1] = 0;
    v67[2] = 0;
    v67[3] = v68;
  }
  else
  {
    v67 = 0;
  }
  *((_QWORD *)&v171 + 1) = v67;
  v182 = 0;
  v211[0] = &unk_1EA99FAC8;
  v211[1] = MIL::Validation::ValidateViaTypeInference;
  v212 = v211;
  v210 = 0;
  MIL::IROperator::Make((__int128 *)v173, &v172, &v171, (uint64_t)v211, (uint64_t)v209, a3);
  v69 = v210;
  if (v210 == v209)
  {
    v70 = 4;
    v69 = v209;
  }
  else
  {
    if (!v210)
      goto LABEL_74;
    v70 = 5;
  }
  (*(void (**)(void))(*v69 + 8 * v70))();
LABEL_74:
  v71 = v212;
  if (v212 == v211)
  {
    v72 = 4;
    v71 = v211;
    goto LABEL_78;
  }
  if (v212)
  {
    v72 = 5;
LABEL_78:
    (*(void (**)(void))(*v71 + 8 * v72))();
  }
  v73 = (std::__shared_weak_count *)*((_QWORD *)&v171 + 1);
  if (*((_QWORD *)&v171 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v171 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = (std::__shared_weak_count *)*((_QWORD *)&v172 + 1);
  if (*((_QWORD *)&v172 + 1))
  {
    v77 = (unint64_t *)(*((_QWORD *)&v172 + 1) + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  if (SHIBYTE(v174) < 0)
    operator delete(v173[0]);
  v187 = 0;
  v79 = (_OWORD *)operator new();
  *v79 = 0u;
  v79[1] = 0u;
  *((_DWORD *)v79 + 8) = 1065353216;
  v187 = v79;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v170);
  MIL::IRParameter::Make(&v170, (uint64_t *)&v195);
  v80 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v79, "minimum_compute_type", (uint64_t *)&v195);
  v81 = v195;
  *(_QWORD *)&v195 = 0;
  if (v81)
    (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
  v82 = (std::__shared_weak_count *)v170.n128_u64[1];
  if (v170.n128_u64[1])
  {
    v83 = (unint64_t *)(v170.n128_u64[1] + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v80 + 5) + 32))(*((_QWORD *)v80 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v80 + 5) + 48))(*((_QWORD *)v80 + 5), 1);
  v85 = *a3;
  v86 = (std::__shared_weak_count_vtbl *)v187;
  v168 = v187;
  if (v187)
  {
    v87 = (std::__shared_weak_count *)operator new();
    v87->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v87->__shared_owners_ = 0;
    v87->__shared_weak_owners_ = 0;
    v87[1].__vftable = v86;
  }
  else
  {
    v87 = 0;
  }
  v169 = v87;
  v187 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v85 + 184))(v85, &v168);
  v88 = v169;
  if (v169)
  {
    p_shared_owners = (unint64_t *)&v169->__shared_owners_;
    do
      v90 = __ldaxr(p_shared_owners);
    while (__stlxr(v90 - 1, p_shared_owners));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v195, "x");
  std::string::basic_string[abi:ne180100]<0>(v197, "y");
  Scalar = 0;
  v203 = 0;
  v204[0] = 0;
  p_Scalar = &Scalar;
  LOBYTE(v191) = 0;
  Scalar = (std::string *)operator new(0x30uLL);
  v203 = Scalar;
  v204[0] = Scalar + 2;
  v203 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v204, &v195, &v198, Scalar);
  MIL::ValueTypeInference::BroadcastFromInputs((__int128 **)&Scalar, (uint64_t)v207);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v91 + 200))(v91, v207);
  v92 = v208;
  if (v208 == v207)
  {
    v93 = 4;
    v92 = v207;
    goto LABEL_110;
  }
  if (v208)
  {
    v93 = 5;
LABEL_110:
    (*(void (**)(void))(*v92 + 8 * v93))();
  }
  p_Scalar = &Scalar;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_Scalar);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v197[i + 2]) < 0)
      operator delete((void *)v197[i]);
  }
  v95 = *a3;
  v205[0] = &off_1EA9A00F8;
  v205[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceMul;
  v206 = v205;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v95 + 216))(v95, v205);
  v96 = v206;
  if (v206 == v205)
  {
    v97 = 4;
    v96 = v205;
  }
  else
  {
    if (!v206)
      goto LABEL_120;
    v97 = 5;
  }
  (*(void (**)(void))(*v96 + 8 * v97))();
LABEL_120:
  MIL::Validation::TensorDTypeConstraints::Make(&v195);
  v98 = v195;
  std::string::basic_string[abi:ne180100]<0>(v164, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v164, 0, (uint64_t *)&Scalar);
  v166 = Scalar;
  if (Scalar)
  {
    v99 = (std::__shared_weak_count *)operator new();
    v100 = Scalar;
    v99->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v99->__shared_owners_ = 0;
    v99->__shared_weak_owners_ = 0;
    v99[1].__vftable = (std::__shared_weak_count_vtbl *)v100;
  }
  else
  {
    v99 = 0;
  }
  v167 = v99;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v162, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v98 + 24))(v98, &v166, v162);
  if (v163 < 0)
    operator delete(v162[0]);
  v101 = v167;
  if (v167)
  {
    v102 = (unint64_t *)&v167->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = Scalar;
  Scalar = 0;
  if (v104)
    (*(void (**)(std::string *))(v104->__r_.__value_.__r.__words[0] + 8))(v104);
  if (v165 < 0)
    operator delete(v164[0]);
  v105 = v195;
  std::string::basic_string[abi:ne180100]<0>(v158, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v158, 0, (uint64_t *)&Scalar);
  v160 = Scalar;
  if (Scalar)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = Scalar;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v161 = v106;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v156, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v105 + 24))(v105, &v160, v156);
  if (v157 < 0)
    operator delete(v156[0]);
  v108 = v161;
  if (v161)
  {
    v109 = (unint64_t *)&v161->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = Scalar;
  Scalar = 0;
  if (v111)
    (*(void (**)(std::string *))(v111->__r_.__value_.__r.__words[0] + 8))(v111);
  if (v159 < 0)
    operator delete(v158[0]);
  v112 = v195;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v154 = Scalar;
  if (Scalar)
  {
    v113 = (std::__shared_weak_count *)operator new();
    v114 = Scalar;
    v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v113->__shared_owners_ = 0;
    v113->__shared_weak_owners_ = 0;
    v113[1].__vftable = (std::__shared_weak_count_vtbl *)v114;
  }
  else
  {
    v113 = 0;
  }
  v155 = v113;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v152, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v112 + 24))(v112, &v154, v152);
  if (v153 < 0)
    operator delete(v152[0]);
  v115 = v155;
  if (v155)
  {
    v116 = (unint64_t *)&v155->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = Scalar;
  Scalar = 0;
  if (v118)
    (*(void (**)(std::string *))(v118->__r_.__value_.__r.__words[0] + 8))(v118);
  v119 = *a3;
  v150 = v195;
  if ((_QWORD)v195)
  {
    v120 = (std::__shared_weak_count *)operator new();
    v121 = (std::__shared_weak_count_vtbl *)v195;
    v120->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v120->__shared_owners_ = 0;
    v120->__shared_weak_owners_ = 0;
    v120[1].__vftable = v121;
  }
  else
  {
    v120 = 0;
  }
  v151 = v120;
  *(_QWORD *)&v195 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v119 + 56))(v119, &v150);
  v122 = v151;
  if (v151)
  {
    v123 = (unint64_t *)&v151->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v125 = v195;
  *(_QWORD *)&v195 = 0;
  if (v125)
    (*(void (**)(uint64_t))(*(_QWORD *)v125 + 8))(v125);
  MIL::Validation::PossibleStringValuesConstraints::Make(&p_Scalar);
  v126 = p_Scalar;
  std::string::basic_string[abi:ne180100]<0>(v146, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v146, 1, (uint64_t *)&__p);
  v148 = __p;
  if (__p)
  {
    v127 = (std::__shared_weak_count *)operator new();
    v128 = (std::__shared_weak_count_vtbl *)__p;
    v127->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v127->__shared_owners_ = 0;
    v127->__shared_weak_owners_ = 0;
    v127[1].__vftable = v128;
  }
  else
  {
    v127 = 0;
  }
  v149 = v127;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&v195, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v197, "fp16");
  std::string::basic_string[abi:ne180100]<0>(&v198, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v199, "int32");
  std::string::basic_string[abi:ne180100]<0>(v200, "int8");
  std::string::basic_string[abi:ne180100]<0>(v201, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v195, 6);
  (*(void (**)(void *, void **, std::string **, uint64_t))(*(_QWORD *)v126 + 24))(v126, &v148, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -18; j -= 3)
  {
    if (SHIBYTE(v201[j + 2]) < 0)
      operator delete((void *)v201[j]);
  }
  v130 = v149;
  if (v149)
  {
    v131 = (unint64_t *)&v149->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = __p;
  __p = 0;
  if (v133)
    (*(void (**)(void *))(*(_QWORD *)v133 + 8))(v133);
  if (v147 < 0)
    operator delete(v146[0]);
  v134 = *a3;
  v144 = p_Scalar;
  if (p_Scalar)
  {
    v135 = (std::__shared_weak_count *)operator new();
    v136 = (std::__shared_weak_count_vtbl *)p_Scalar;
    v135->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v135->__shared_owners_ = 0;
    v135->__shared_weak_owners_ = 0;
    v135[1].__vftable = v136;
  }
  else
  {
    v135 = 0;
  }
  v145 = v135;
  p_Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v134 + 56))(v134, &v144);
  v137 = v145;
  if (v145)
  {
    v138 = (unint64_t *)&v145->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v140 = p_Scalar;
  p_Scalar = 0;
  if (v140)
    (*(void (**)(void *))(*(_QWORD *)v140 + 8))(v140);
  if (v187)
  {
    v141 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v187);
    MEMORY[0x1E0C023A0](v141, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v182, 0);
  result = (uint64_t)v194;
  if (v194)
  {
    v143 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v194);
    return MEMORY[0x1E0C023A0](v143, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0993EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  void *a67;
  uint64_t a72;
  uint64_t *v72;
  void *v74;
  uint64_t v75;

  v74 = a67;
  a67 = 0;
  if (v74)
    (*(void (**)(void *))(*(_QWORD *)v74 + 8))(v74);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a64, 0);
  v75 = *v72;
  *v72 = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a72, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::Pow::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  __int128 *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  char **v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t *v54;
  char *v55;
  char *v56;
  char *v57;
  __int128 v58;
  char *v59;
  char *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  char **v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  _OWORD *v79;
  unsigned __int8 *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  std::__shared_weak_count_vtbl *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  unint64_t *p_shared_owners;
  unint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t i;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  std::string *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::string *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  std::string *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::string *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  std::string *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::string *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  std::__shared_weak_count_vtbl *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  void *v126;
  std::__shared_weak_count *v127;
  std::__shared_weak_count_vtbl *v128;
  uint64_t j;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  void *v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  std::__shared_weak_count_vtbl *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t result;
  uint64_t v143;
  void *v144;
  std::__shared_weak_count *v145;
  void *v146[2];
  char v147;
  void *v148;
  std::__shared_weak_count *v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  void *v152[2];
  char v153;
  std::string *v154;
  std::__shared_weak_count *v155;
  void *v156[2];
  char v157;
  void *v158[2];
  char v159;
  std::string *v160;
  std::__shared_weak_count *v161;
  void *v162[2];
  char v163;
  void *v164[2];
  char v165;
  std::string *v166;
  std::__shared_weak_count *v167;
  void *v168;
  std::__shared_weak_count *v169;
  __n128 v170;
  __int128 v171;
  __int128 v172;
  void *v173[2];
  uint64_t v174;
  void *v175;
  void *v176;
  _QWORD *v177;
  __n128 v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  char **v182;
  __n128 v183;
  void *__p;
  void *v185;
  _QWORD *v186;
  void *v187;
  void *v188;
  _QWORD *v189;
  void *p_Scalar;
  void *v191;
  _QWORD *v192;
  __n128 v193;
  _QWORD *v194;
  __int128 v195;
  uint64_t v196;
  _QWORD v197[3];
  __int128 v198;
  uint64_t v199[3];
  uint64_t v200[3];
  _QWORD v201[3];
  std::string *Scalar;
  std::string *v203;
  _QWORD v204[3];
  _QWORD v205[3];
  _QWORD *v206;
  _BYTE v207[24];
  _BYTE *v208;
  _BYTE v209[24];
  _BYTE *v210;
  _QWORD v211[3];
  _QWORD *v212;
  uint64_t v213;

  v213 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v194 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v8;
  *(_QWORD *)v8 = v7;
  v203 = (std::string *)((char *)v8 + 8);
  v204[0] = (char *)v8 + 8;
  *(_QWORD *)&v195 = MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  p_Scalar = v10;
  *v10 = v9;
  v191 = v10 + 1;
  v192 = v10 + 1;
  *((_QWORD *)&v195 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&p_Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v187 = v12;
  *v12 = v11;
  v188 = v12 + 1;
  v189 = v12 + 1;
  v196 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v187);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v185 = v14 + 1;
  v186 = v14 + 1;
  v197[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v195, 4, &v193);
  MIL::IRParameter::Make(&v193, (uint64_t *)&v175);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v175);
  v15 = v175;
  v175 = 0;
  if (v15)
    (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v193.n128_u64[1];
  if (v193.n128_u64[1])
  {
    v17 = (unint64_t *)(v193.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v185 = __p;
    operator delete(__p);
  }
  if (v187)
  {
    v188 = v187;
    operator delete(v187);
  }
  if (p_Scalar)
  {
    v191 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v203 = Scalar;
    operator delete(Scalar);
  }
  v19 = v194;
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v21;
  *(_QWORD *)v21 = v20;
  v203 = (std::string *)((char *)v21 + 8);
  v204[0] = (char *)v21 + 8;
  *(_QWORD *)&v195 = MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  p_Scalar = v23;
  *v23 = v22;
  v191 = v23 + 1;
  v192 = v23 + 1;
  *((_QWORD *)&v195 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&p_Scalar);
  v24 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v25 = operator new(8uLL);
  v187 = v25;
  *v25 = v24;
  v188 = v25 + 1;
  v189 = v25 + 1;
  v196 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v187);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(8uLL);
  __p = v27;
  *v27 = v26;
  v185 = v27 + 1;
  v186 = v27 + 1;
  v197[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v195, 4, &v183);
  MIL::IRParameter::Make(&v183, (uint64_t *)&v175);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v19, "y", (uint64_t *)&v175);
  v28 = v175;
  v175 = 0;
  if (v28)
    (*(void (**)(void *))(*(_QWORD *)v28 + 8))(v28);
  v29 = (std::__shared_weak_count *)v183.n128_u64[1];
  if (v183.n128_u64[1])
  {
    v30 = (unint64_t *)(v183.n128_u64[1] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (__p)
  {
    v185 = __p;
    operator delete(__p);
  }
  if (v187)
  {
    v188 = v187;
    operator delete(v187);
  }
  if (p_Scalar)
  {
    v191 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v203 = Scalar;
    operator delete(Scalar);
  }
  v182 = 0;
  v32 = operator new();
  *(_QWORD *)v32 = 0;
  *(_QWORD *)(v32 + 8) = 0;
  *(_QWORD *)(v32 + 16) = 0;
  *(_QWORD *)&v195 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v182, (void **)v32);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v195, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v182, 1uLL);
  v33 = v182;
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = operator new(8uLL);
  p_Scalar = v35;
  *v35 = v34;
  v191 = v35 + 1;
  v192 = v35 + 1;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&p_Scalar);
  v36 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v37 = operator new(8uLL);
  v187 = v37;
  *v37 = v36;
  v188 = v37 + 1;
  v189 = v37 + 1;
  v203 = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v187);
  v38 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v39 = operator new(8uLL);
  __p = v39;
  *v39 = v38;
  v185 = v39 + 1;
  v186 = v39 + 1;
  v204[0] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v40 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v41 = operator new(8uLL);
  v175 = v41;
  *v41 = v40;
  v176 = v41 + 1;
  v177 = v41 + 1;
  v204[1] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v175);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 4, &v178);
  MIL::IRParameter::Make(&v178, &v179);
  v42 = v179;
  v180 = v179;
  if (v179)
  {
    v43 = (_QWORD *)operator new();
    v44 = v179;
    *v43 = &unk_1EA99F888;
    v43[1] = 0;
    v43[2] = 0;
    v43[3] = v44;
  }
  else
  {
    v43 = 0;
  }
  v181 = v43;
  v179 = 0;
  v45 = v33[2];
  v46 = v33[1];
  if (v46 >= v45)
  {
    v48 = (v46 - *v33) >> 4;
    v49 = v48 + 1;
    if ((unint64_t)(v48 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v50 = v45 - *v33;
    if (v50 >> 3 > v49)
      v49 = v50 >> 3;
    if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF0)
      v51 = 0xFFFFFFFFFFFFFFFLL;
    else
      v51 = v49;
    v197[1] = v33 + 2;
    v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v33 + 2), v51);
    v54 = (uint64_t *)&v52[16 * v48];
    *v54 = v42;
    v54[1] = (uint64_t)v43;
    v180 = 0;
    v181 = 0;
    v56 = *v33;
    v55 = v33[1];
    if (v55 == *v33)
    {
      v59 = v33[1];
      v57 = &v52[16 * v48];
    }
    else
    {
      v57 = &v52[16 * v48];
      do
      {
        v58 = *((_OWORD *)v55 - 1);
        v55 -= 16;
        *((_OWORD *)v57 - 1) = v58;
        v57 -= 16;
        *(_QWORD *)v55 = 0;
        *((_QWORD *)v55 + 1) = 0;
      }
      while (v55 != v56);
      v59 = *v33;
      v55 = v33[1];
    }
    v47 = (char *)(v54 + 2);
    *v33 = v57;
    *((_QWORD *)&v195 + 1) = v59;
    v33[1] = (char *)(v54 + 2);
    v196 = (uint64_t)v55;
    v60 = v33[2];
    v33[2] = &v52[16 * v53];
    v197[0] = v60;
    *(_QWORD *)&v195 = v59;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v195);
  }
  else
  {
    *(_QWORD *)v46 = v42;
    *((_QWORD *)v46 + 1) = v43;
    v47 = v46 + 16;
    v180 = 0;
    v181 = 0;
  }
  v33[1] = v47;
  v61 = v179;
  v179 = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  v62 = (std::__shared_weak_count *)v178.n128_u64[1];
  if (v178.n128_u64[1])
  {
    v63 = (unint64_t *)(v178.n128_u64[1] + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  if (v175)
  {
    v176 = v175;
    operator delete(v175);
  }
  if (__p)
  {
    v185 = __p;
    operator delete(__p);
  }
  if (v187)
  {
    v188 = v187;
    operator delete(v187);
  }
  if (p_Scalar)
  {
    v191 = p_Scalar;
    operator delete(p_Scalar);
  }
  *(_OWORD *)v173 = *(_OWORD *)a2;
  v174 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v65 = (uint64_t)v194;
  *(_QWORD *)&v172 = v194;
  if (v194)
  {
    v66 = (_QWORD *)operator new();
    *v66 = &unk_1EA99F8E8;
    v66[1] = 0;
    v66[2] = 0;
    v66[3] = v65;
  }
  else
  {
    v66 = 0;
  }
  *((_QWORD *)&v172 + 1) = v66;
  v194 = 0;
  *(_QWORD *)&v171 = v182;
  if (v182)
  {
    v67 = (_QWORD *)operator new();
    v68 = v182;
    *v67 = &unk_1EA99F948;
    v67[1] = 0;
    v67[2] = 0;
    v67[3] = v68;
  }
  else
  {
    v67 = 0;
  }
  *((_QWORD *)&v171 + 1) = v67;
  v182 = 0;
  v211[0] = &unk_1EA99FAC8;
  v211[1] = MIL::Validation::ValidateViaTypeInference;
  v212 = v211;
  v210 = 0;
  MIL::IROperator::Make((__int128 *)v173, &v172, &v171, (uint64_t)v211, (uint64_t)v209, a3);
  v69 = v210;
  if (v210 == v209)
  {
    v70 = 4;
    v69 = v209;
  }
  else
  {
    if (!v210)
      goto LABEL_74;
    v70 = 5;
  }
  (*(void (**)(void))(*v69 + 8 * v70))();
LABEL_74:
  v71 = v212;
  if (v212 == v211)
  {
    v72 = 4;
    v71 = v211;
    goto LABEL_78;
  }
  if (v212)
  {
    v72 = 5;
LABEL_78:
    (*(void (**)(void))(*v71 + 8 * v72))();
  }
  v73 = (std::__shared_weak_count *)*((_QWORD *)&v171 + 1);
  if (*((_QWORD *)&v171 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v171 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = (std::__shared_weak_count *)*((_QWORD *)&v172 + 1);
  if (*((_QWORD *)&v172 + 1))
  {
    v77 = (unint64_t *)(*((_QWORD *)&v172 + 1) + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  if (SHIBYTE(v174) < 0)
    operator delete(v173[0]);
  v187 = 0;
  v79 = (_OWORD *)operator new();
  *v79 = 0u;
  v79[1] = 0u;
  *((_DWORD *)v79 + 8) = 1065353216;
  v187 = v79;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v170);
  MIL::IRParameter::Make(&v170, (uint64_t *)&v195);
  v80 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v79, "minimum_compute_type", (uint64_t *)&v195);
  v81 = v195;
  *(_QWORD *)&v195 = 0;
  if (v81)
    (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
  v82 = (std::__shared_weak_count *)v170.n128_u64[1];
  if (v170.n128_u64[1])
  {
    v83 = (unint64_t *)(v170.n128_u64[1] + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v80 + 5) + 32))(*((_QWORD *)v80 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v80 + 5) + 48))(*((_QWORD *)v80 + 5), 1);
  v85 = *a3;
  v86 = (std::__shared_weak_count_vtbl *)v187;
  v168 = v187;
  if (v187)
  {
    v87 = (std::__shared_weak_count *)operator new();
    v87->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v87->__shared_owners_ = 0;
    v87->__shared_weak_owners_ = 0;
    v87[1].__vftable = v86;
  }
  else
  {
    v87 = 0;
  }
  v169 = v87;
  v187 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v85 + 184))(v85, &v168);
  v88 = v169;
  if (v169)
  {
    p_shared_owners = (unint64_t *)&v169->__shared_owners_;
    do
      v90 = __ldaxr(p_shared_owners);
    while (__stlxr(v90 - 1, p_shared_owners));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v195, "x");
  std::string::basic_string[abi:ne180100]<0>(v197, "y");
  Scalar = 0;
  v203 = 0;
  v204[0] = 0;
  p_Scalar = &Scalar;
  LOBYTE(v191) = 0;
  Scalar = (std::string *)operator new(0x30uLL);
  v203 = Scalar;
  v204[0] = Scalar + 2;
  v203 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v204, &v195, &v198, Scalar);
  MIL::ValueTypeInference::BroadcastFromInputs((__int128 **)&Scalar, (uint64_t)v207);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v91 + 200))(v91, v207);
  v92 = v208;
  if (v208 == v207)
  {
    v93 = 4;
    v92 = v207;
    goto LABEL_110;
  }
  if (v208)
  {
    v93 = 5;
LABEL_110:
    (*(void (**)(void))(*v92 + 8 * v93))();
  }
  p_Scalar = &Scalar;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_Scalar);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v197[i + 2]) < 0)
      operator delete((void *)v197[i]);
  }
  v95 = *a3;
  v205[0] = &off_1EA9A00F8;
  v205[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferencePow;
  v206 = v205;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v95 + 216))(v95, v205);
  v96 = v206;
  if (v206 == v205)
  {
    v97 = 4;
    v96 = v205;
  }
  else
  {
    if (!v206)
      goto LABEL_120;
    v97 = 5;
  }
  (*(void (**)(void))(*v96 + 8 * v97))();
LABEL_120:
  MIL::Validation::TensorDTypeConstraints::Make(&v195);
  v98 = v195;
  std::string::basic_string[abi:ne180100]<0>(v164, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v164, 0, (uint64_t *)&Scalar);
  v166 = Scalar;
  if (Scalar)
  {
    v99 = (std::__shared_weak_count *)operator new();
    v100 = Scalar;
    v99->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v99->__shared_owners_ = 0;
    v99->__shared_weak_owners_ = 0;
    v99[1].__vftable = (std::__shared_weak_count_vtbl *)v100;
  }
  else
  {
    v99 = 0;
  }
  v167 = v99;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v162, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v98 + 24))(v98, &v166, v162);
  if (v163 < 0)
    operator delete(v162[0]);
  v101 = v167;
  if (v167)
  {
    v102 = (unint64_t *)&v167->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = Scalar;
  Scalar = 0;
  if (v104)
    (*(void (**)(std::string *))(v104->__r_.__value_.__r.__words[0] + 8))(v104);
  if (v165 < 0)
    operator delete(v164[0]);
  v105 = v195;
  std::string::basic_string[abi:ne180100]<0>(v158, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v158, 0, (uint64_t *)&Scalar);
  v160 = Scalar;
  if (Scalar)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = Scalar;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v161 = v106;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v156, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v105 + 24))(v105, &v160, v156);
  if (v157 < 0)
    operator delete(v156[0]);
  v108 = v161;
  if (v161)
  {
    v109 = (unint64_t *)&v161->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = Scalar;
  Scalar = 0;
  if (v111)
    (*(void (**)(std::string *))(v111->__r_.__value_.__r.__words[0] + 8))(v111);
  if (v159 < 0)
    operator delete(v158[0]);
  v112 = v195;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v154 = Scalar;
  if (Scalar)
  {
    v113 = (std::__shared_weak_count *)operator new();
    v114 = Scalar;
    v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v113->__shared_owners_ = 0;
    v113->__shared_weak_owners_ = 0;
    v113[1].__vftable = (std::__shared_weak_count_vtbl *)v114;
  }
  else
  {
    v113 = 0;
  }
  v155 = v113;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v152, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v112 + 24))(v112, &v154, v152);
  if (v153 < 0)
    operator delete(v152[0]);
  v115 = v155;
  if (v155)
  {
    v116 = (unint64_t *)&v155->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = Scalar;
  Scalar = 0;
  if (v118)
    (*(void (**)(std::string *))(v118->__r_.__value_.__r.__words[0] + 8))(v118);
  v119 = *a3;
  v150 = v195;
  if ((_QWORD)v195)
  {
    v120 = (std::__shared_weak_count *)operator new();
    v121 = (std::__shared_weak_count_vtbl *)v195;
    v120->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v120->__shared_owners_ = 0;
    v120->__shared_weak_owners_ = 0;
    v120[1].__vftable = v121;
  }
  else
  {
    v120 = 0;
  }
  v151 = v120;
  *(_QWORD *)&v195 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v119 + 56))(v119, &v150);
  v122 = v151;
  if (v151)
  {
    v123 = (unint64_t *)&v151->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v125 = v195;
  *(_QWORD *)&v195 = 0;
  if (v125)
    (*(void (**)(uint64_t))(*(_QWORD *)v125 + 8))(v125);
  MIL::Validation::PossibleStringValuesConstraints::Make(&p_Scalar);
  v126 = p_Scalar;
  std::string::basic_string[abi:ne180100]<0>(v146, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v146, 1, (uint64_t *)&__p);
  v148 = __p;
  if (__p)
  {
    v127 = (std::__shared_weak_count *)operator new();
    v128 = (std::__shared_weak_count_vtbl *)__p;
    v127->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v127->__shared_owners_ = 0;
    v127->__shared_weak_owners_ = 0;
    v127[1].__vftable = v128;
  }
  else
  {
    v127 = 0;
  }
  v149 = v127;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&v195, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v197, "fp16");
  std::string::basic_string[abi:ne180100]<0>(&v198, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v199, "int32");
  std::string::basic_string[abi:ne180100]<0>(v200, "int8");
  std::string::basic_string[abi:ne180100]<0>(v201, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v195, 6);
  (*(void (**)(void *, void **, std::string **, uint64_t))(*(_QWORD *)v126 + 24))(v126, &v148, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -18; j -= 3)
  {
    if (SHIBYTE(v201[j + 2]) < 0)
      operator delete((void *)v201[j]);
  }
  v130 = v149;
  if (v149)
  {
    v131 = (unint64_t *)&v149->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = __p;
  __p = 0;
  if (v133)
    (*(void (**)(void *))(*(_QWORD *)v133 + 8))(v133);
  if (v147 < 0)
    operator delete(v146[0]);
  v134 = *a3;
  v144 = p_Scalar;
  if (p_Scalar)
  {
    v135 = (std::__shared_weak_count *)operator new();
    v136 = (std::__shared_weak_count_vtbl *)p_Scalar;
    v135->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v135->__shared_owners_ = 0;
    v135->__shared_weak_owners_ = 0;
    v135[1].__vftable = v136;
  }
  else
  {
    v135 = 0;
  }
  v145 = v135;
  p_Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v134 + 56))(v134, &v144);
  v137 = v145;
  if (v145)
  {
    v138 = (unint64_t *)&v145->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v140 = p_Scalar;
  p_Scalar = 0;
  if (v140)
    (*(void (**)(void *))(*(_QWORD *)v140 + 8))(v140);
  if (v187)
  {
    v141 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v187);
    MEMORY[0x1E0C023A0](v141, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v182, 0);
  result = (uint64_t)v194;
  if (v194)
  {
    v143 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v194);
    return MEMORY[0x1E0C023A0](v143, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0995698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  void *a67;
  uint64_t a72;
  uint64_t *v72;
  void *v74;
  uint64_t v75;

  v74 = a67;
  a67 = 0;
  if (v74)
    (*(void (**)(void *))(*(_QWORD *)v74 + 8))(v74);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a64, 0);
  v75 = *v72;
  *v72 = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a72, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::RealDiv::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  __int128 *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  char **v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t *v54;
  char *v55;
  char *v56;
  char *v57;
  __int128 v58;
  char *v59;
  char *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  char **v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  _OWORD *v79;
  unsigned __int8 *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  std::__shared_weak_count_vtbl *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  unint64_t *p_shared_owners;
  unint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t i;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  std::string *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::string *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  std::string *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::string *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  std::string *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::string *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  std::__shared_weak_count_vtbl *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  void *v126;
  std::__shared_weak_count *v127;
  std::__shared_weak_count_vtbl *v128;
  uint64_t j;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  void *v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  std::__shared_weak_count_vtbl *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t result;
  uint64_t v143;
  void *v144;
  std::__shared_weak_count *v145;
  void *v146[2];
  char v147;
  void *v148;
  std::__shared_weak_count *v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  void *v152[2];
  char v153;
  std::string *v154;
  std::__shared_weak_count *v155;
  void *v156[2];
  char v157;
  void *v158[2];
  char v159;
  std::string *v160;
  std::__shared_weak_count *v161;
  void *v162[2];
  char v163;
  void *v164[2];
  char v165;
  std::string *v166;
  std::__shared_weak_count *v167;
  void *v168;
  std::__shared_weak_count *v169;
  __n128 v170;
  __int128 v171;
  __int128 v172;
  void *v173[2];
  uint64_t v174;
  void *v175;
  void *v176;
  _QWORD *v177;
  __n128 v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  char **v182;
  __n128 v183;
  void *__p;
  void *v185;
  _QWORD *v186;
  void *v187;
  void *v188;
  _QWORD *v189;
  void *p_Scalar;
  void *v191;
  _QWORD *v192;
  __n128 v193;
  _QWORD *v194;
  __int128 v195;
  uint64_t v196;
  _QWORD v197[3];
  __int128 v198;
  uint64_t v199[3];
  uint64_t v200[3];
  _QWORD v201[3];
  std::string *Scalar;
  std::string *v203;
  _QWORD v204[3];
  _QWORD v205[3];
  _QWORD *v206;
  _BYTE v207[24];
  _BYTE *v208;
  _BYTE v209[24];
  _BYTE *v210;
  _QWORD v211[3];
  _QWORD *v212;
  uint64_t v213;

  v213 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v194 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v8;
  *(_QWORD *)v8 = v7;
  v203 = (std::string *)((char *)v8 + 8);
  v204[0] = (char *)v8 + 8;
  *(_QWORD *)&v195 = MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  p_Scalar = v10;
  *v10 = v9;
  v191 = v10 + 1;
  v192 = v10 + 1;
  *((_QWORD *)&v195 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&p_Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v187 = v12;
  *v12 = v11;
  v188 = v12 + 1;
  v189 = v12 + 1;
  v196 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v187);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v185 = v14 + 1;
  v186 = v14 + 1;
  v197[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v195, 4, &v193);
  MIL::IRParameter::Make(&v193, (uint64_t *)&v175);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v175);
  v15 = v175;
  v175 = 0;
  if (v15)
    (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v193.n128_u64[1];
  if (v193.n128_u64[1])
  {
    v17 = (unint64_t *)(v193.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v185 = __p;
    operator delete(__p);
  }
  if (v187)
  {
    v188 = v187;
    operator delete(v187);
  }
  if (p_Scalar)
  {
    v191 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v203 = Scalar;
    operator delete(Scalar);
  }
  v19 = v194;
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v21;
  *(_QWORD *)v21 = v20;
  v203 = (std::string *)((char *)v21 + 8);
  v204[0] = (char *)v21 + 8;
  *(_QWORD *)&v195 = MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  p_Scalar = v23;
  *v23 = v22;
  v191 = v23 + 1;
  v192 = v23 + 1;
  *((_QWORD *)&v195 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&p_Scalar);
  v24 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v25 = operator new(8uLL);
  v187 = v25;
  *v25 = v24;
  v188 = v25 + 1;
  v189 = v25 + 1;
  v196 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v187);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(8uLL);
  __p = v27;
  *v27 = v26;
  v185 = v27 + 1;
  v186 = v27 + 1;
  v197[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v195, 4, &v183);
  MIL::IRParameter::Make(&v183, (uint64_t *)&v175);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v19, "y", (uint64_t *)&v175);
  v28 = v175;
  v175 = 0;
  if (v28)
    (*(void (**)(void *))(*(_QWORD *)v28 + 8))(v28);
  v29 = (std::__shared_weak_count *)v183.n128_u64[1];
  if (v183.n128_u64[1])
  {
    v30 = (unint64_t *)(v183.n128_u64[1] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (__p)
  {
    v185 = __p;
    operator delete(__p);
  }
  if (v187)
  {
    v188 = v187;
    operator delete(v187);
  }
  if (p_Scalar)
  {
    v191 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v203 = Scalar;
    operator delete(Scalar);
  }
  v182 = 0;
  v32 = operator new();
  *(_QWORD *)v32 = 0;
  *(_QWORD *)(v32 + 8) = 0;
  *(_QWORD *)(v32 + 16) = 0;
  *(_QWORD *)&v195 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v182, (void **)v32);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v195, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v182, 1uLL);
  v33 = v182;
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = operator new(8uLL);
  p_Scalar = v35;
  *v35 = v34;
  v191 = v35 + 1;
  v192 = v35 + 1;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&p_Scalar);
  v36 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v37 = operator new(8uLL);
  v187 = v37;
  *v37 = v36;
  v188 = v37 + 1;
  v189 = v37 + 1;
  v203 = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v187);
  v38 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v39 = operator new(8uLL);
  __p = v39;
  *v39 = v38;
  v185 = v39 + 1;
  v186 = v39 + 1;
  v204[0] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v40 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v41 = operator new(8uLL);
  v175 = v41;
  *v41 = v40;
  v176 = v41 + 1;
  v177 = v41 + 1;
  v204[1] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v175);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 4, &v178);
  MIL::IRParameter::Make(&v178, &v179);
  v42 = v179;
  v180 = v179;
  if (v179)
  {
    v43 = (_QWORD *)operator new();
    v44 = v179;
    *v43 = &unk_1EA99F888;
    v43[1] = 0;
    v43[2] = 0;
    v43[3] = v44;
  }
  else
  {
    v43 = 0;
  }
  v181 = v43;
  v179 = 0;
  v45 = v33[2];
  v46 = v33[1];
  if (v46 >= v45)
  {
    v48 = (v46 - *v33) >> 4;
    v49 = v48 + 1;
    if ((unint64_t)(v48 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v50 = v45 - *v33;
    if (v50 >> 3 > v49)
      v49 = v50 >> 3;
    if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF0)
      v51 = 0xFFFFFFFFFFFFFFFLL;
    else
      v51 = v49;
    v197[1] = v33 + 2;
    v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v33 + 2), v51);
    v54 = (uint64_t *)&v52[16 * v48];
    *v54 = v42;
    v54[1] = (uint64_t)v43;
    v180 = 0;
    v181 = 0;
    v56 = *v33;
    v55 = v33[1];
    if (v55 == *v33)
    {
      v59 = v33[1];
      v57 = &v52[16 * v48];
    }
    else
    {
      v57 = &v52[16 * v48];
      do
      {
        v58 = *((_OWORD *)v55 - 1);
        v55 -= 16;
        *((_OWORD *)v57 - 1) = v58;
        v57 -= 16;
        *(_QWORD *)v55 = 0;
        *((_QWORD *)v55 + 1) = 0;
      }
      while (v55 != v56);
      v59 = *v33;
      v55 = v33[1];
    }
    v47 = (char *)(v54 + 2);
    *v33 = v57;
    *((_QWORD *)&v195 + 1) = v59;
    v33[1] = (char *)(v54 + 2);
    v196 = (uint64_t)v55;
    v60 = v33[2];
    v33[2] = &v52[16 * v53];
    v197[0] = v60;
    *(_QWORD *)&v195 = v59;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v195);
  }
  else
  {
    *(_QWORD *)v46 = v42;
    *((_QWORD *)v46 + 1) = v43;
    v47 = v46 + 16;
    v180 = 0;
    v181 = 0;
  }
  v33[1] = v47;
  v61 = v179;
  v179 = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  v62 = (std::__shared_weak_count *)v178.n128_u64[1];
  if (v178.n128_u64[1])
  {
    v63 = (unint64_t *)(v178.n128_u64[1] + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  if (v175)
  {
    v176 = v175;
    operator delete(v175);
  }
  if (__p)
  {
    v185 = __p;
    operator delete(__p);
  }
  if (v187)
  {
    v188 = v187;
    operator delete(v187);
  }
  if (p_Scalar)
  {
    v191 = p_Scalar;
    operator delete(p_Scalar);
  }
  *(_OWORD *)v173 = *(_OWORD *)a2;
  v174 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v65 = (uint64_t)v194;
  *(_QWORD *)&v172 = v194;
  if (v194)
  {
    v66 = (_QWORD *)operator new();
    *v66 = &unk_1EA99F8E8;
    v66[1] = 0;
    v66[2] = 0;
    v66[3] = v65;
  }
  else
  {
    v66 = 0;
  }
  *((_QWORD *)&v172 + 1) = v66;
  v194 = 0;
  *(_QWORD *)&v171 = v182;
  if (v182)
  {
    v67 = (_QWORD *)operator new();
    v68 = v182;
    *v67 = &unk_1EA99F948;
    v67[1] = 0;
    v67[2] = 0;
    v67[3] = v68;
  }
  else
  {
    v67 = 0;
  }
  *((_QWORD *)&v171 + 1) = v67;
  v182 = 0;
  v211[0] = &unk_1EA99FAC8;
  v211[1] = MIL::Validation::ValidateViaTypeInference;
  v212 = v211;
  v210 = 0;
  MIL::IROperator::Make((__int128 *)v173, &v172, &v171, (uint64_t)v211, (uint64_t)v209, a3);
  v69 = v210;
  if (v210 == v209)
  {
    v70 = 4;
    v69 = v209;
  }
  else
  {
    if (!v210)
      goto LABEL_74;
    v70 = 5;
  }
  (*(void (**)(void))(*v69 + 8 * v70))();
LABEL_74:
  v71 = v212;
  if (v212 == v211)
  {
    v72 = 4;
    v71 = v211;
    goto LABEL_78;
  }
  if (v212)
  {
    v72 = 5;
LABEL_78:
    (*(void (**)(void))(*v71 + 8 * v72))();
  }
  v73 = (std::__shared_weak_count *)*((_QWORD *)&v171 + 1);
  if (*((_QWORD *)&v171 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v171 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = (std::__shared_weak_count *)*((_QWORD *)&v172 + 1);
  if (*((_QWORD *)&v172 + 1))
  {
    v77 = (unint64_t *)(*((_QWORD *)&v172 + 1) + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  if (SHIBYTE(v174) < 0)
    operator delete(v173[0]);
  v187 = 0;
  v79 = (_OWORD *)operator new();
  *v79 = 0u;
  v79[1] = 0u;
  *((_DWORD *)v79 + 8) = 1065353216;
  v187 = v79;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v170);
  MIL::IRParameter::Make(&v170, (uint64_t *)&v195);
  v80 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v79, "minimum_compute_type", (uint64_t *)&v195);
  v81 = v195;
  *(_QWORD *)&v195 = 0;
  if (v81)
    (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
  v82 = (std::__shared_weak_count *)v170.n128_u64[1];
  if (v170.n128_u64[1])
  {
    v83 = (unint64_t *)(v170.n128_u64[1] + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v80 + 5) + 32))(*((_QWORD *)v80 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v80 + 5) + 48))(*((_QWORD *)v80 + 5), 1);
  v85 = *a3;
  v86 = (std::__shared_weak_count_vtbl *)v187;
  v168 = v187;
  if (v187)
  {
    v87 = (std::__shared_weak_count *)operator new();
    v87->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v87->__shared_owners_ = 0;
    v87->__shared_weak_owners_ = 0;
    v87[1].__vftable = v86;
  }
  else
  {
    v87 = 0;
  }
  v169 = v87;
  v187 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v85 + 184))(v85, &v168);
  v88 = v169;
  if (v169)
  {
    p_shared_owners = (unint64_t *)&v169->__shared_owners_;
    do
      v90 = __ldaxr(p_shared_owners);
    while (__stlxr(v90 - 1, p_shared_owners));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v195, "x");
  std::string::basic_string[abi:ne180100]<0>(v197, "y");
  Scalar = 0;
  v203 = 0;
  v204[0] = 0;
  p_Scalar = &Scalar;
  LOBYTE(v191) = 0;
  Scalar = (std::string *)operator new(0x30uLL);
  v203 = Scalar;
  v204[0] = Scalar + 2;
  v203 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v204, &v195, &v198, Scalar);
  MIL::ValueTypeInference::BroadcastFromInputs((__int128 **)&Scalar, (uint64_t)v207);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v91 + 200))(v91, v207);
  v92 = v208;
  if (v208 == v207)
  {
    v93 = 4;
    v92 = v207;
    goto LABEL_110;
  }
  if (v208)
  {
    v93 = 5;
LABEL_110:
    (*(void (**)(void))(*v92 + 8 * v93))();
  }
  p_Scalar = &Scalar;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_Scalar);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v197[i + 2]) < 0)
      operator delete((void *)v197[i]);
  }
  v95 = *a3;
  v205[0] = &off_1EA9A00F8;
  v205[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceRealDiv;
  v206 = v205;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v95 + 216))(v95, v205);
  v96 = v206;
  if (v206 == v205)
  {
    v97 = 4;
    v96 = v205;
  }
  else
  {
    if (!v206)
      goto LABEL_120;
    v97 = 5;
  }
  (*(void (**)(void))(*v96 + 8 * v97))();
LABEL_120:
  MIL::Validation::TensorDTypeConstraints::Make(&v195);
  v98 = v195;
  std::string::basic_string[abi:ne180100]<0>(v164, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v164, 0, (uint64_t *)&Scalar);
  v166 = Scalar;
  if (Scalar)
  {
    v99 = (std::__shared_weak_count *)operator new();
    v100 = Scalar;
    v99->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v99->__shared_owners_ = 0;
    v99->__shared_weak_owners_ = 0;
    v99[1].__vftable = (std::__shared_weak_count_vtbl *)v100;
  }
  else
  {
    v99 = 0;
  }
  v167 = v99;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v162, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v98 + 24))(v98, &v166, v162);
  if (v163 < 0)
    operator delete(v162[0]);
  v101 = v167;
  if (v167)
  {
    v102 = (unint64_t *)&v167->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = Scalar;
  Scalar = 0;
  if (v104)
    (*(void (**)(std::string *))(v104->__r_.__value_.__r.__words[0] + 8))(v104);
  if (v165 < 0)
    operator delete(v164[0]);
  v105 = v195;
  std::string::basic_string[abi:ne180100]<0>(v158, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v158, 0, (uint64_t *)&Scalar);
  v160 = Scalar;
  if (Scalar)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = Scalar;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v161 = v106;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v156, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v105 + 24))(v105, &v160, v156);
  if (v157 < 0)
    operator delete(v156[0]);
  v108 = v161;
  if (v161)
  {
    v109 = (unint64_t *)&v161->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = Scalar;
  Scalar = 0;
  if (v111)
    (*(void (**)(std::string *))(v111->__r_.__value_.__r.__words[0] + 8))(v111);
  if (v159 < 0)
    operator delete(v158[0]);
  v112 = v195;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v154 = Scalar;
  if (Scalar)
  {
    v113 = (std::__shared_weak_count *)operator new();
    v114 = Scalar;
    v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v113->__shared_owners_ = 0;
    v113->__shared_weak_owners_ = 0;
    v113[1].__vftable = (std::__shared_weak_count_vtbl *)v114;
  }
  else
  {
    v113 = 0;
  }
  v155 = v113;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v152, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v112 + 24))(v112, &v154, v152);
  if (v153 < 0)
    operator delete(v152[0]);
  v115 = v155;
  if (v155)
  {
    v116 = (unint64_t *)&v155->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = Scalar;
  Scalar = 0;
  if (v118)
    (*(void (**)(std::string *))(v118->__r_.__value_.__r.__words[0] + 8))(v118);
  v119 = *a3;
  v150 = v195;
  if ((_QWORD)v195)
  {
    v120 = (std::__shared_weak_count *)operator new();
    v121 = (std::__shared_weak_count_vtbl *)v195;
    v120->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v120->__shared_owners_ = 0;
    v120->__shared_weak_owners_ = 0;
    v120[1].__vftable = v121;
  }
  else
  {
    v120 = 0;
  }
  v151 = v120;
  *(_QWORD *)&v195 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v119 + 56))(v119, &v150);
  v122 = v151;
  if (v151)
  {
    v123 = (unint64_t *)&v151->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v125 = v195;
  *(_QWORD *)&v195 = 0;
  if (v125)
    (*(void (**)(uint64_t))(*(_QWORD *)v125 + 8))(v125);
  MIL::Validation::PossibleStringValuesConstraints::Make(&p_Scalar);
  v126 = p_Scalar;
  std::string::basic_string[abi:ne180100]<0>(v146, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v146, 1, (uint64_t *)&__p);
  v148 = __p;
  if (__p)
  {
    v127 = (std::__shared_weak_count *)operator new();
    v128 = (std::__shared_weak_count_vtbl *)__p;
    v127->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v127->__shared_owners_ = 0;
    v127->__shared_weak_owners_ = 0;
    v127[1].__vftable = v128;
  }
  else
  {
    v127 = 0;
  }
  v149 = v127;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&v195, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v197, "fp16");
  std::string::basic_string[abi:ne180100]<0>(&v198, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v199, "int32");
  std::string::basic_string[abi:ne180100]<0>(v200, "int8");
  std::string::basic_string[abi:ne180100]<0>(v201, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v195, 6);
  (*(void (**)(void *, void **, std::string **, uint64_t))(*(_QWORD *)v126 + 24))(v126, &v148, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -18; j -= 3)
  {
    if (SHIBYTE(v201[j + 2]) < 0)
      operator delete((void *)v201[j]);
  }
  v130 = v149;
  if (v149)
  {
    v131 = (unint64_t *)&v149->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = __p;
  __p = 0;
  if (v133)
    (*(void (**)(void *))(*(_QWORD *)v133 + 8))(v133);
  if (v147 < 0)
    operator delete(v146[0]);
  v134 = *a3;
  v144 = p_Scalar;
  if (p_Scalar)
  {
    v135 = (std::__shared_weak_count *)operator new();
    v136 = (std::__shared_weak_count_vtbl *)p_Scalar;
    v135->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v135->__shared_owners_ = 0;
    v135->__shared_weak_owners_ = 0;
    v135[1].__vftable = v136;
  }
  else
  {
    v135 = 0;
  }
  v145 = v135;
  p_Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v134 + 56))(v134, &v144);
  v137 = v145;
  if (v145)
  {
    v138 = (unint64_t *)&v145->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v140 = p_Scalar;
  p_Scalar = 0;
  if (v140)
    (*(void (**)(void *))(*(_QWORD *)v140 + 8))(v140);
  if (v187)
  {
    v141 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v187);
    MEMORY[0x1E0C023A0](v141, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v182, 0);
  result = (uint64_t)v194;
  if (v194)
  {
    v143 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v194);
    return MEMORY[0x1E0C023A0](v143, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0996E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  void *a67;
  uint64_t a72;
  uint64_t *v72;
  void *v74;
  uint64_t v75;

  v74 = a67;
  a67 = 0;
  if (v74)
    (*(void (**)(void *))(*(_QWORD *)v74 + 8))(v74);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a64, 0);
  v75 = *v72;
  *v72 = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a72, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::Sub::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  __int128 *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  char **v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t *v54;
  char *v55;
  char *v56;
  char *v57;
  __int128 v58;
  char *v59;
  char *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  char **v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  _OWORD *v79;
  unsigned __int8 *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  std::__shared_weak_count_vtbl *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  unint64_t *p_shared_owners;
  unint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t i;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  std::string *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::string *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  std::string *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::string *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  std::string *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::string *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  std::__shared_weak_count_vtbl *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  void *v126;
  std::__shared_weak_count *v127;
  std::__shared_weak_count_vtbl *v128;
  uint64_t j;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  void *v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  std::__shared_weak_count_vtbl *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t result;
  uint64_t v143;
  void *v144;
  std::__shared_weak_count *v145;
  void *v146[2];
  char v147;
  void *v148;
  std::__shared_weak_count *v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  void *v152[2];
  char v153;
  std::string *v154;
  std::__shared_weak_count *v155;
  void *v156[2];
  char v157;
  void *v158[2];
  char v159;
  std::string *v160;
  std::__shared_weak_count *v161;
  void *v162[2];
  char v163;
  void *v164[2];
  char v165;
  std::string *v166;
  std::__shared_weak_count *v167;
  void *v168;
  std::__shared_weak_count *v169;
  __n128 v170;
  __int128 v171;
  __int128 v172;
  void *v173[2];
  uint64_t v174;
  void *v175;
  void *v176;
  _QWORD *v177;
  __n128 v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  char **v182;
  __n128 v183;
  void *__p;
  void *v185;
  _QWORD *v186;
  void *v187;
  void *v188;
  _QWORD *v189;
  void *p_Scalar;
  void *v191;
  _QWORD *v192;
  __n128 v193;
  _QWORD *v194;
  __int128 v195;
  uint64_t v196;
  _QWORD v197[3];
  __int128 v198;
  uint64_t v199[3];
  uint64_t v200[3];
  _QWORD v201[3];
  std::string *Scalar;
  std::string *v203;
  _QWORD v204[3];
  _QWORD v205[3];
  _QWORD *v206;
  _BYTE v207[24];
  _BYTE *v208;
  _BYTE v209[24];
  _BYTE *v210;
  _QWORD v211[3];
  _QWORD *v212;
  uint64_t v213;

  v213 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v194 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v8;
  *(_QWORD *)v8 = v7;
  v203 = (std::string *)((char *)v8 + 8);
  v204[0] = (char *)v8 + 8;
  *(_QWORD *)&v195 = MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  p_Scalar = v10;
  *v10 = v9;
  v191 = v10 + 1;
  v192 = v10 + 1;
  *((_QWORD *)&v195 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&p_Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v187 = v12;
  *v12 = v11;
  v188 = v12 + 1;
  v189 = v12 + 1;
  v196 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v187);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v185 = v14 + 1;
  v186 = v14 + 1;
  v197[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v195, 4, &v193);
  MIL::IRParameter::Make(&v193, (uint64_t *)&v175);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v175);
  v15 = v175;
  v175 = 0;
  if (v15)
    (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v193.n128_u64[1];
  if (v193.n128_u64[1])
  {
    v17 = (unint64_t *)(v193.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v185 = __p;
    operator delete(__p);
  }
  if (v187)
  {
    v188 = v187;
    operator delete(v187);
  }
  if (p_Scalar)
  {
    v191 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v203 = Scalar;
    operator delete(Scalar);
  }
  v19 = v194;
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v21;
  *(_QWORD *)v21 = v20;
  v203 = (std::string *)((char *)v21 + 8);
  v204[0] = (char *)v21 + 8;
  *(_QWORD *)&v195 = MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  p_Scalar = v23;
  *v23 = v22;
  v191 = v23 + 1;
  v192 = v23 + 1;
  *((_QWORD *)&v195 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&p_Scalar);
  v24 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v25 = operator new(8uLL);
  v187 = v25;
  *v25 = v24;
  v188 = v25 + 1;
  v189 = v25 + 1;
  v196 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v187);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(8uLL);
  __p = v27;
  *v27 = v26;
  v185 = v27 + 1;
  v186 = v27 + 1;
  v197[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v195, 4, &v183);
  MIL::IRParameter::Make(&v183, (uint64_t *)&v175);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v19, "y", (uint64_t *)&v175);
  v28 = v175;
  v175 = 0;
  if (v28)
    (*(void (**)(void *))(*(_QWORD *)v28 + 8))(v28);
  v29 = (std::__shared_weak_count *)v183.n128_u64[1];
  if (v183.n128_u64[1])
  {
    v30 = (unint64_t *)(v183.n128_u64[1] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (__p)
  {
    v185 = __p;
    operator delete(__p);
  }
  if (v187)
  {
    v188 = v187;
    operator delete(v187);
  }
  if (p_Scalar)
  {
    v191 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v203 = Scalar;
    operator delete(Scalar);
  }
  v182 = 0;
  v32 = operator new();
  *(_QWORD *)v32 = 0;
  *(_QWORD *)(v32 + 8) = 0;
  *(_QWORD *)(v32 + 16) = 0;
  *(_QWORD *)&v195 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v182, (void **)v32);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v195, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v182, 1uLL);
  v33 = v182;
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = operator new(8uLL);
  p_Scalar = v35;
  *v35 = v34;
  v191 = v35 + 1;
  v192 = v35 + 1;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&p_Scalar);
  v36 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v37 = operator new(8uLL);
  v187 = v37;
  *v37 = v36;
  v188 = v37 + 1;
  v189 = v37 + 1;
  v203 = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v187);
  v38 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v39 = operator new(8uLL);
  __p = v39;
  *v39 = v38;
  v185 = v39 + 1;
  v186 = v39 + 1;
  v204[0] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v40 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v41 = operator new(8uLL);
  v175 = v41;
  *v41 = v40;
  v176 = v41 + 1;
  v177 = v41 + 1;
  v204[1] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v175);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 4, &v178);
  MIL::IRParameter::Make(&v178, &v179);
  v42 = v179;
  v180 = v179;
  if (v179)
  {
    v43 = (_QWORD *)operator new();
    v44 = v179;
    *v43 = &unk_1EA99F888;
    v43[1] = 0;
    v43[2] = 0;
    v43[3] = v44;
  }
  else
  {
    v43 = 0;
  }
  v181 = v43;
  v179 = 0;
  v45 = v33[2];
  v46 = v33[1];
  if (v46 >= v45)
  {
    v48 = (v46 - *v33) >> 4;
    v49 = v48 + 1;
    if ((unint64_t)(v48 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v50 = v45 - *v33;
    if (v50 >> 3 > v49)
      v49 = v50 >> 3;
    if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF0)
      v51 = 0xFFFFFFFFFFFFFFFLL;
    else
      v51 = v49;
    v197[1] = v33 + 2;
    v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v33 + 2), v51);
    v54 = (uint64_t *)&v52[16 * v48];
    *v54 = v42;
    v54[1] = (uint64_t)v43;
    v180 = 0;
    v181 = 0;
    v56 = *v33;
    v55 = v33[1];
    if (v55 == *v33)
    {
      v59 = v33[1];
      v57 = &v52[16 * v48];
    }
    else
    {
      v57 = &v52[16 * v48];
      do
      {
        v58 = *((_OWORD *)v55 - 1);
        v55 -= 16;
        *((_OWORD *)v57 - 1) = v58;
        v57 -= 16;
        *(_QWORD *)v55 = 0;
        *((_QWORD *)v55 + 1) = 0;
      }
      while (v55 != v56);
      v59 = *v33;
      v55 = v33[1];
    }
    v47 = (char *)(v54 + 2);
    *v33 = v57;
    *((_QWORD *)&v195 + 1) = v59;
    v33[1] = (char *)(v54 + 2);
    v196 = (uint64_t)v55;
    v60 = v33[2];
    v33[2] = &v52[16 * v53];
    v197[0] = v60;
    *(_QWORD *)&v195 = v59;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v195);
  }
  else
  {
    *(_QWORD *)v46 = v42;
    *((_QWORD *)v46 + 1) = v43;
    v47 = v46 + 16;
    v180 = 0;
    v181 = 0;
  }
  v33[1] = v47;
  v61 = v179;
  v179 = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  v62 = (std::__shared_weak_count *)v178.n128_u64[1];
  if (v178.n128_u64[1])
  {
    v63 = (unint64_t *)(v178.n128_u64[1] + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  if (v175)
  {
    v176 = v175;
    operator delete(v175);
  }
  if (__p)
  {
    v185 = __p;
    operator delete(__p);
  }
  if (v187)
  {
    v188 = v187;
    operator delete(v187);
  }
  if (p_Scalar)
  {
    v191 = p_Scalar;
    operator delete(p_Scalar);
  }
  *(_OWORD *)v173 = *(_OWORD *)a2;
  v174 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v65 = (uint64_t)v194;
  *(_QWORD *)&v172 = v194;
  if (v194)
  {
    v66 = (_QWORD *)operator new();
    *v66 = &unk_1EA99F8E8;
    v66[1] = 0;
    v66[2] = 0;
    v66[3] = v65;
  }
  else
  {
    v66 = 0;
  }
  *((_QWORD *)&v172 + 1) = v66;
  v194 = 0;
  *(_QWORD *)&v171 = v182;
  if (v182)
  {
    v67 = (_QWORD *)operator new();
    v68 = v182;
    *v67 = &unk_1EA99F948;
    v67[1] = 0;
    v67[2] = 0;
    v67[3] = v68;
  }
  else
  {
    v67 = 0;
  }
  *((_QWORD *)&v171 + 1) = v67;
  v182 = 0;
  v211[0] = &unk_1EA99FAC8;
  v211[1] = MIL::Validation::ValidateViaTypeInference;
  v212 = v211;
  v210 = 0;
  MIL::IROperator::Make((__int128 *)v173, &v172, &v171, (uint64_t)v211, (uint64_t)v209, a3);
  v69 = v210;
  if (v210 == v209)
  {
    v70 = 4;
    v69 = v209;
  }
  else
  {
    if (!v210)
      goto LABEL_74;
    v70 = 5;
  }
  (*(void (**)(void))(*v69 + 8 * v70))();
LABEL_74:
  v71 = v212;
  if (v212 == v211)
  {
    v72 = 4;
    v71 = v211;
    goto LABEL_78;
  }
  if (v212)
  {
    v72 = 5;
LABEL_78:
    (*(void (**)(void))(*v71 + 8 * v72))();
  }
  v73 = (std::__shared_weak_count *)*((_QWORD *)&v171 + 1);
  if (*((_QWORD *)&v171 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v171 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = (std::__shared_weak_count *)*((_QWORD *)&v172 + 1);
  if (*((_QWORD *)&v172 + 1))
  {
    v77 = (unint64_t *)(*((_QWORD *)&v172 + 1) + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  if (SHIBYTE(v174) < 0)
    operator delete(v173[0]);
  v187 = 0;
  v79 = (_OWORD *)operator new();
  *v79 = 0u;
  v79[1] = 0u;
  *((_DWORD *)v79 + 8) = 1065353216;
  v187 = v79;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v170);
  MIL::IRParameter::Make(&v170, (uint64_t *)&v195);
  v80 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v79, "minimum_compute_type", (uint64_t *)&v195);
  v81 = v195;
  *(_QWORD *)&v195 = 0;
  if (v81)
    (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
  v82 = (std::__shared_weak_count *)v170.n128_u64[1];
  if (v170.n128_u64[1])
  {
    v83 = (unint64_t *)(v170.n128_u64[1] + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v80 + 5) + 32))(*((_QWORD *)v80 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v80 + 5) + 48))(*((_QWORD *)v80 + 5), 1);
  v85 = *a3;
  v86 = (std::__shared_weak_count_vtbl *)v187;
  v168 = v187;
  if (v187)
  {
    v87 = (std::__shared_weak_count *)operator new();
    v87->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v87->__shared_owners_ = 0;
    v87->__shared_weak_owners_ = 0;
    v87[1].__vftable = v86;
  }
  else
  {
    v87 = 0;
  }
  v169 = v87;
  v187 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v85 + 184))(v85, &v168);
  v88 = v169;
  if (v169)
  {
    p_shared_owners = (unint64_t *)&v169->__shared_owners_;
    do
      v90 = __ldaxr(p_shared_owners);
    while (__stlxr(v90 - 1, p_shared_owners));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v195, "x");
  std::string::basic_string[abi:ne180100]<0>(v197, "y");
  Scalar = 0;
  v203 = 0;
  v204[0] = 0;
  p_Scalar = &Scalar;
  LOBYTE(v191) = 0;
  Scalar = (std::string *)operator new(0x30uLL);
  v203 = Scalar;
  v204[0] = Scalar + 2;
  v203 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v204, &v195, &v198, Scalar);
  MIL::ValueTypeInference::BroadcastFromInputs((__int128 **)&Scalar, (uint64_t)v207);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v91 + 200))(v91, v207);
  v92 = v208;
  if (v208 == v207)
  {
    v93 = 4;
    v92 = v207;
    goto LABEL_110;
  }
  if (v208)
  {
    v93 = 5;
LABEL_110:
    (*(void (**)(void))(*v92 + 8 * v93))();
  }
  p_Scalar = &Scalar;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_Scalar);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v197[i + 2]) < 0)
      operator delete((void *)v197[i]);
  }
  v95 = *a3;
  v205[0] = &off_1EA9A00F8;
  v205[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceSub;
  v206 = v205;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v95 + 216))(v95, v205);
  v96 = v206;
  if (v206 == v205)
  {
    v97 = 4;
    v96 = v205;
  }
  else
  {
    if (!v206)
      goto LABEL_120;
    v97 = 5;
  }
  (*(void (**)(void))(*v96 + 8 * v97))();
LABEL_120:
  MIL::Validation::TensorDTypeConstraints::Make(&v195);
  v98 = v195;
  std::string::basic_string[abi:ne180100]<0>(v164, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v164, 0, (uint64_t *)&Scalar);
  v166 = Scalar;
  if (Scalar)
  {
    v99 = (std::__shared_weak_count *)operator new();
    v100 = Scalar;
    v99->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v99->__shared_owners_ = 0;
    v99->__shared_weak_owners_ = 0;
    v99[1].__vftable = (std::__shared_weak_count_vtbl *)v100;
  }
  else
  {
    v99 = 0;
  }
  v167 = v99;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v162, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v98 + 24))(v98, &v166, v162);
  if (v163 < 0)
    operator delete(v162[0]);
  v101 = v167;
  if (v167)
  {
    v102 = (unint64_t *)&v167->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = Scalar;
  Scalar = 0;
  if (v104)
    (*(void (**)(std::string *))(v104->__r_.__value_.__r.__words[0] + 8))(v104);
  if (v165 < 0)
    operator delete(v164[0]);
  v105 = v195;
  std::string::basic_string[abi:ne180100]<0>(v158, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v158, 0, (uint64_t *)&Scalar);
  v160 = Scalar;
  if (Scalar)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = Scalar;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v161 = v106;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v156, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v105 + 24))(v105, &v160, v156);
  if (v157 < 0)
    operator delete(v156[0]);
  v108 = v161;
  if (v161)
  {
    v109 = (unint64_t *)&v161->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = Scalar;
  Scalar = 0;
  if (v111)
    (*(void (**)(std::string *))(v111->__r_.__value_.__r.__words[0] + 8))(v111);
  if (v159 < 0)
    operator delete(v158[0]);
  v112 = v195;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v154 = Scalar;
  if (Scalar)
  {
    v113 = (std::__shared_weak_count *)operator new();
    v114 = Scalar;
    v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v113->__shared_owners_ = 0;
    v113->__shared_weak_owners_ = 0;
    v113[1].__vftable = (std::__shared_weak_count_vtbl *)v114;
  }
  else
  {
    v113 = 0;
  }
  v155 = v113;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v152, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v112 + 24))(v112, &v154, v152);
  if (v153 < 0)
    operator delete(v152[0]);
  v115 = v155;
  if (v155)
  {
    v116 = (unint64_t *)&v155->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = Scalar;
  Scalar = 0;
  if (v118)
    (*(void (**)(std::string *))(v118->__r_.__value_.__r.__words[0] + 8))(v118);
  v119 = *a3;
  v150 = v195;
  if ((_QWORD)v195)
  {
    v120 = (std::__shared_weak_count *)operator new();
    v121 = (std::__shared_weak_count_vtbl *)v195;
    v120->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v120->__shared_owners_ = 0;
    v120->__shared_weak_owners_ = 0;
    v120[1].__vftable = v121;
  }
  else
  {
    v120 = 0;
  }
  v151 = v120;
  *(_QWORD *)&v195 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v119 + 56))(v119, &v150);
  v122 = v151;
  if (v151)
  {
    v123 = (unint64_t *)&v151->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v125 = v195;
  *(_QWORD *)&v195 = 0;
  if (v125)
    (*(void (**)(uint64_t))(*(_QWORD *)v125 + 8))(v125);
  MIL::Validation::PossibleStringValuesConstraints::Make(&p_Scalar);
  v126 = p_Scalar;
  std::string::basic_string[abi:ne180100]<0>(v146, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v146, 1, (uint64_t *)&__p);
  v148 = __p;
  if (__p)
  {
    v127 = (std::__shared_weak_count *)operator new();
    v128 = (std::__shared_weak_count_vtbl *)__p;
    v127->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v127->__shared_owners_ = 0;
    v127->__shared_weak_owners_ = 0;
    v127[1].__vftable = v128;
  }
  else
  {
    v127 = 0;
  }
  v149 = v127;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&v195, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v197, "fp16");
  std::string::basic_string[abi:ne180100]<0>(&v198, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v199, "int32");
  std::string::basic_string[abi:ne180100]<0>(v200, "int8");
  std::string::basic_string[abi:ne180100]<0>(v201, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v195, 6);
  (*(void (**)(void *, void **, std::string **, uint64_t))(*(_QWORD *)v126 + 24))(v126, &v148, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -18; j -= 3)
  {
    if (SHIBYTE(v201[j + 2]) < 0)
      operator delete((void *)v201[j]);
  }
  v130 = v149;
  if (v149)
  {
    v131 = (unint64_t *)&v149->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = __p;
  __p = 0;
  if (v133)
    (*(void (**)(void *))(*(_QWORD *)v133 + 8))(v133);
  if (v147 < 0)
    operator delete(v146[0]);
  v134 = *a3;
  v144 = p_Scalar;
  if (p_Scalar)
  {
    v135 = (std::__shared_weak_count *)operator new();
    v136 = (std::__shared_weak_count_vtbl *)p_Scalar;
    v135->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v135->__shared_owners_ = 0;
    v135->__shared_weak_owners_ = 0;
    v135[1].__vftable = v136;
  }
  else
  {
    v135 = 0;
  }
  v145 = v135;
  p_Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v134 + 56))(v134, &v144);
  v137 = v145;
  if (v145)
  {
    v138 = (unint64_t *)&v145->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v140 = p_Scalar;
  p_Scalar = 0;
  if (v140)
    (*(void (**)(void *))(*(_QWORD *)v140 + 8))(v140);
  if (v187)
  {
    v141 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v187);
    MEMORY[0x1E0C023A0](v141, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v182, 0);
  result = (uint64_t)v194;
  if (v194)
  {
    v143 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v194);
    return MEMORY[0x1E0C023A0](v143, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0998640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  void *a67;
  uint64_t a72;
  uint64_t *v72;
  void *v74;
  uint64_t v75;

  v74 = a67;
  a67 = 0;
  if (v74)
    (*(void (**)(void *))(*(_QWORD *)v74 + 8))(v74);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a64, 0);
  v75 = *v72;
  *v72 = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a72, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::Cast::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  unsigned __int8 *v30;
  void **v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  char **v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  __int128 v69;
  char *v70;
  char *v71;
  char *v72;
  std::__shared_weak_count *v73;
  unint64_t *p_shared_owners;
  unint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  char **v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  _OWORD *v94;
  unsigned __int8 *v95;
  void **v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  std::__shared_weak_count_vtbl *v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  void **v112;
  std::__shared_weak_count *v113;
  std::__shared_weak_count_vtbl *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  char *v118;
  void **v119;
  std::__shared_weak_count *v120;
  std::__shared_weak_count_vtbl *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  char *v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  void **v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  void **v132;
  void *v133;
  std::__shared_weak_count *v134;
  std::__shared_weak_count_vtbl *v135;
  uint64_t i;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  void *v140;
  void *v141;
  std::__shared_weak_count *v142;
  std::__shared_weak_count_vtbl *v143;
  uint64_t j;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  void *v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  std::__shared_weak_count_vtbl *v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t result;
  uint64_t v158;
  void *v159;
  std::__shared_weak_count *v160;
  void *v161[2];
  char v162;
  void *v163;
  std::__shared_weak_count *v164;
  void *v165[2];
  char v166;
  void *v167;
  std::__shared_weak_count *v168;
  void **v169;
  std::__shared_weak_count *v170;
  void *v171[2];
  char v172;
  char *v173;
  std::__shared_weak_count *v174;
  void *v175[2];
  char v176;
  void *v177[2];
  char v178;
  char *v179;
  std::__shared_weak_count *v180;
  void *v181;
  std::__shared_weak_count *v182;
  __n128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  uint64_t v187;
  void *v188;
  void *v189;
  _QWORD *v190;
  __n128 v191;
  uint64_t v192;
  __int128 v193;
  char **v194;
  __n128 v195;
  void *__p;
  void *v197;
  _QWORD *v198;
  void *v199;
  void *v200;
  _QWORD *v201;
  void *v202;
  void *v203;
  _QWORD *v204;
  void *v205;
  void *v206;
  _QWORD *v207;
  void *v208;
  void *v209;
  _QWORD *v210;
  void *v211;
  void *v212;
  _QWORD *v213;
  void *v214;
  void *v215;
  _QWORD *v216;
  void *v217;
  void *v218;
  _QWORD *v219;
  __n128 v220;
  _QWORD *v221;
  void **v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  _QWORD v231[3];
  _QWORD v232[3];
  _QWORD v233[3];
  _QWORD v234[3];
  _QWORD v235[3];
  _QWORD v236[3];
  _QWORD v237[3];
  _QWORD *v238;
  _QWORD v239[3];
  _QWORD *v240;
  _BYTE v241[24];
  _BYTE *v242;
  _QWORD v243[3];
  _QWORD *v244;
  char *Scalar;
  char *v246;
  char *v247;
  char *v248;
  char **v249;
  uint64_t v250;

  v250 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v221 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (char *)operator new(8uLL);
  Scalar = v8;
  *(_QWORD *)v8 = v7;
  v246 = v8 + 8;
  v247 = v8 + 8;
  v222 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v217 = v10;
  *v10 = v9;
  v219 = v10 + 1;
  v218 = v10 + 1;
  v223 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v217);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v214 = v12;
  *v12 = v11;
  v216 = v12 + 1;
  v215 = v12 + 1;
  v224 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v214);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  v211 = v14;
  *v14 = v13;
  v213 = v14 + 1;
  v212 = v14 + 1;
  v225 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v211);
  v15 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v16 = operator new(8uLL);
  v208 = v16;
  *v16 = v15;
  v210 = v16 + 1;
  v209 = v16 + 1;
  v226 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v208);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  v205 = v18;
  *v18 = v17;
  v206 = v18 + 1;
  v207 = v18 + 1;
  v227 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v205);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v202 = v20;
  *v20 = v19;
  v203 = v20 + 1;
  v204 = v20 + 1;
  v228 = MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v202);
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  v199 = v22;
  *v22 = v21;
  v200 = v22 + 1;
  v201 = v22 + 1;
  v229 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v199);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  __p = v24;
  *v24 = v23;
  v197 = v24 + 1;
  v198 = v24 + 1;
  v230 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v222, 9, &v220);
  MIL::IRParameter::Make(&v220, (uint64_t *)&v188);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v188);
  v25 = v188;
  v188 = 0;
  if (v25)
    (*(void (**)(void *))(*(_QWORD *)v25 + 8))(v25);
  v26 = (std::__shared_weak_count *)v220.n128_u64[1];
  if (v220.n128_u64[1])
  {
    v27 = (unint64_t *)(v220.n128_u64[1] + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (__p)
  {
    v197 = __p;
    operator delete(__p);
  }
  if (v199)
  {
    v200 = v199;
    operator delete(v199);
  }
  if (v202)
  {
    v203 = v202;
    operator delete(v202);
  }
  if (v205)
  {
    v206 = v205;
    operator delete(v205);
  }
  if (v208)
  {
    v209 = v208;
    operator delete(v208);
  }
  if (v211)
  {
    v212 = v211;
    operator delete(v211);
  }
  if (v214)
  {
    v215 = v214;
    operator delete(v214);
  }
  if (v217)
  {
    v218 = v217;
    operator delete(v217);
  }
  if (Scalar)
  {
    v246 = Scalar;
    operator delete(Scalar);
  }
  v29 = v221;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v195);
  MIL::IRParameter::Make(&v195, (uint64_t *)&v222);
  v30 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v29, "dtype", (uint64_t *)&v222);
  v31 = v222;
  v222 = 0;
  if (v31)
    (*((void (**)(void **))*v31 + 1))(v31);
  v32 = (std::__shared_weak_count *)v195.n128_u64[1];
  if (v195.n128_u64[1])
  {
    v33 = (unint64_t *)(v195.n128_u64[1] + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v30 + 5) + 32))(*((_QWORD *)v30 + 5), 1);
  v194 = 0;
  v35 = operator new();
  *(_QWORD *)v35 = 0;
  *(_QWORD *)(v35 + 8) = 0;
  *(_QWORD *)(v35 + 16) = 0;
  v222 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v194, (void **)v35);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v222, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v194, 1uLL);
  v36 = v194;
  v37 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v38 = operator new(8uLL);
  v217 = v38;
  *v38 = v37;
  v219 = v38 + 1;
  v218 = v38 + 1;
  v222 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v217);
  v39 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v40 = operator new(8uLL);
  v214 = v40;
  *v40 = v39;
  v216 = v40 + 1;
  v215 = v40 + 1;
  v223 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v214);
  v41 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v42 = operator new(8uLL);
  v211 = v42;
  *v42 = v41;
  v213 = v42 + 1;
  v212 = v42 + 1;
  v224 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v211);
  v43 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v44 = operator new(8uLL);
  v208 = v44;
  *v44 = v43;
  v210 = v44 + 1;
  v209 = v44 + 1;
  v225 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v208);
  v45 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v46 = operator new(8uLL);
  v205 = v46;
  *v46 = v45;
  v206 = v46 + 1;
  v207 = v46 + 1;
  v226 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v205);
  v47 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v48 = operator new(8uLL);
  v202 = v48;
  *v48 = v47;
  v203 = v48 + 1;
  v204 = v48 + 1;
  v227 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v202);
  v49 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v50 = operator new(8uLL);
  v199 = v50;
  *v50 = v49;
  v200 = v50 + 1;
  v201 = v50 + 1;
  v228 = MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v199);
  v51 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v52 = operator new(8uLL);
  __p = v52;
  *v52 = v51;
  v197 = v52 + 1;
  v198 = v52 + 1;
  v229 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v53 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v54 = operator new(8uLL);
  v188 = v54;
  *v54 = v53;
  v189 = v54 + 1;
  v190 = v54 + 1;
  v230 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v188);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v222, 9, &v191);
  MIL::IRParameter::Make(&v191, &v192);
  *(_QWORD *)&v193 = v192;
  if (v192)
  {
    v55 = (_QWORD *)operator new();
    v56 = v192;
    *v55 = &unk_1EA99F888;
    v55[1] = 0;
    v55[2] = 0;
    v55[3] = v56;
  }
  else
  {
    v55 = 0;
  }
  *((_QWORD *)&v193 + 1) = v55;
  v192 = 0;
  v57 = v36[2];
  v58 = v36[1];
  if (v58 >= v57)
  {
    v59 = (v58 - *v36) >> 4;
    v60 = v59 + 1;
    if ((unint64_t)(v59 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v61 = v57 - *v36;
    if (v61 >> 3 > v60)
      v60 = v61 >> 3;
    if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF0)
      v62 = 0xFFFFFFFFFFFFFFFLL;
    else
      v62 = v60;
    v249 = v36 + 2;
    v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v36 + 2), v62);
    v65 = &v63[16 * v59];
    *(_OWORD *)v65 = v193;
    v193 = 0uLL;
    v67 = *v36;
    v66 = v36[1];
    if (v66 == *v36)
    {
      v70 = v36[1];
      v68 = &v63[16 * v59];
    }
    else
    {
      v68 = &v63[16 * v59];
      do
      {
        v69 = *((_OWORD *)v66 - 1);
        v66 -= 16;
        *((_OWORD *)v68 - 1) = v69;
        v68 -= 16;
        *(_QWORD *)v66 = 0;
        *((_QWORD *)v66 + 1) = 0;
      }
      while (v66 != v67);
      v70 = *v36;
      v66 = v36[1];
    }
    v71 = v65 + 16;
    *v36 = v68;
    Scalar = v70;
    v246 = v70;
    v36[1] = v65 + 16;
    v247 = v66;
    v72 = v36[2];
    v36[2] = &v63[16 * v64];
    v248 = v72;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
    v73 = (std::__shared_weak_count *)*((_QWORD *)&v193 + 1);
    v36[1] = v71;
    if (v73)
    {
      p_shared_owners = (unint64_t *)&v73->__shared_owners_;
      do
        v75 = __ldaxr(p_shared_owners);
      while (__stlxr(v75 - 1, p_shared_owners));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }
  }
  else
  {
    *(_QWORD *)v58 = v193;
    *((_QWORD *)v58 + 1) = v55;
    v193 = 0uLL;
    v36[1] = v58 + 16;
  }
  v76 = v192;
  v192 = 0;
  if (v76)
    (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
  v77 = (std::__shared_weak_count *)v191.n128_u64[1];
  if (v191.n128_u64[1])
  {
    v78 = (unint64_t *)(v191.n128_u64[1] + 8);
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  if (v188)
  {
    v189 = v188;
    operator delete(v188);
  }
  if (__p)
  {
    v197 = __p;
    operator delete(__p);
  }
  if (v199)
  {
    v200 = v199;
    operator delete(v199);
  }
  if (v202)
  {
    v203 = v202;
    operator delete(v202);
  }
  if (v205)
  {
    v206 = v205;
    operator delete(v205);
  }
  if (v208)
  {
    v209 = v208;
    operator delete(v208);
  }
  if (v211)
  {
    v212 = v211;
    operator delete(v211);
  }
  if (v214)
  {
    v215 = v214;
    operator delete(v214);
  }
  if (v217)
  {
    v218 = v217;
    operator delete(v217);
  }
  v186 = *(_OWORD *)a2;
  v187 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v80 = (uint64_t)v221;
  *(_QWORD *)&v185 = v221;
  if (v221)
  {
    v81 = (_QWORD *)operator new();
    *v81 = &unk_1EA99F8E8;
    v81[1] = 0;
    v81[2] = 0;
    v81[3] = v80;
  }
  else
  {
    v81 = 0;
  }
  *((_QWORD *)&v185 + 1) = v81;
  v221 = 0;
  *(_QWORD *)&v184 = v194;
  if (v194)
  {
    v82 = (_QWORD *)operator new();
    v83 = v194;
    *v82 = &unk_1EA99F948;
    v82[1] = 0;
    v82[2] = 0;
    v82[3] = v83;
  }
  else
  {
    v82 = 0;
  }
  *((_QWORD *)&v184 + 1) = v82;
  v194 = 0;
  v243[0] = &unk_1EA99FAC8;
  v243[1] = MIL::Operators::Common::ios18::CustomValidators::ValidateCast;
  v244 = v243;
  v242 = 0;
  MIL::IROperator::Make(&v186, &v185, &v184, (uint64_t)v243, (uint64_t)v241, a3);
  v84 = v242;
  if (v242 == v241)
  {
    v85 = 4;
    v84 = v241;
  }
  else
  {
    if (!v242)
      goto LABEL_90;
    v85 = 5;
  }
  (*(void (**)(void))(*v84 + 8 * v85))();
LABEL_90:
  v86 = v244;
  if (v244 == v243)
  {
    v87 = 4;
    v86 = v243;
    goto LABEL_94;
  }
  if (v244)
  {
    v87 = 5;
LABEL_94:
    (*(void (**)(void))(*v86 + 8 * v87))();
  }
  v88 = (std::__shared_weak_count *)*((_QWORD *)&v184 + 1);
  if (*((_QWORD *)&v184 + 1))
  {
    v89 = (unint64_t *)(*((_QWORD *)&v184 + 1) + 8);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = (std::__shared_weak_count *)*((_QWORD *)&v185 + 1);
  if (*((_QWORD *)&v185 + 1))
  {
    v92 = (unint64_t *)(*((_QWORD *)&v185 + 1) + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  if (SHIBYTE(v187) < 0)
    operator delete((void *)v186);
  v217 = 0;
  v94 = (_OWORD *)operator new();
  *v94 = 0u;
  v94[1] = 0u;
  *((_DWORD *)v94 + 8) = 1065353216;
  v217 = v94;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v183);
  MIL::IRParameter::Make(&v183, (uint64_t *)&v222);
  v95 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v94, "minimum_compute_type", (uint64_t *)&v222);
  v96 = v222;
  v222 = 0;
  if (v96)
    (*((void (**)(void **))*v96 + 1))(v96);
  v97 = (std::__shared_weak_count *)v183.n128_u64[1];
  if (v183.n128_u64[1])
  {
    v98 = (unint64_t *)(v183.n128_u64[1] + 8);
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v95 + 5) + 32))(*((_QWORD *)v95 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v95 + 5) + 48))(*((_QWORD *)v95 + 5), 1);
  v100 = *a3;
  v101 = (std::__shared_weak_count_vtbl *)v217;
  v181 = v217;
  if (v217)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v101;
  }
  else
  {
    v102 = 0;
  }
  v182 = v102;
  v217 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v100 + 184))(v100, &v181);
  v103 = v182;
  if (v182)
  {
    v104 = (unint64_t *)&v182->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v106 = *a3;
  v239[0] = &off_1EA99FBD8;
  v239[1] = MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceCast;
  v240 = v239;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v106 + 200))(v106, v239);
  v107 = v240;
  if (v240 == v239)
  {
    v108 = 4;
    v107 = v239;
  }
  else
  {
    if (!v240)
      goto LABEL_127;
    v108 = 5;
  }
  (*(void (**)(void))(*v107 + 8 * v108))();
LABEL_127:
  v109 = *a3;
  v237[0] = &off_1EA9A00F8;
  v237[1] = MIL::Operators::Common::ios17::CustomValueInference::ValueInferenceCast;
  v238 = v237;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v109 + 216))(v109, v237);
  v110 = v238;
  if (v238 == v237)
  {
    v111 = 4;
    v110 = v237;
  }
  else
  {
    if (!v238)
      goto LABEL_132;
    v111 = 5;
  }
  (*(void (**)(void))(*v110 + 8 * v111))();
LABEL_132:
  MIL::Validation::TensorDTypeConstraints::Make(&v222);
  v112 = v222;
  std::string::basic_string[abi:ne180100]<0>(v177, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v177, 0, (uint64_t *)&Scalar);
  v179 = Scalar;
  if (Scalar)
  {
    v113 = (std::__shared_weak_count *)operator new();
    v114 = (std::__shared_weak_count_vtbl *)Scalar;
    v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v113->__shared_owners_ = 0;
    v113->__shared_weak_owners_ = 0;
    v113[1].__vftable = v114;
  }
  else
  {
    v113 = 0;
  }
  v180 = v113;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v175, "T");
  (*((void (**)(void **, char **, void **))*v112 + 3))(v112, &v179, v175);
  if (v176 < 0)
    operator delete(v175[0]);
  v115 = v180;
  if (v180)
  {
    v116 = (unint64_t *)&v180->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = Scalar;
  Scalar = 0;
  if (v118)
    (*(void (**)(char *))(*(_QWORD *)v118 + 8))(v118);
  if (v178 < 0)
    operator delete(v177[0]);
  v119 = v222;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v173 = Scalar;
  if (Scalar)
  {
    v120 = (std::__shared_weak_count *)operator new();
    v121 = (std::__shared_weak_count_vtbl *)Scalar;
    v120->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v120->__shared_owners_ = 0;
    v120->__shared_weak_owners_ = 0;
    v120[1].__vftable = v121;
  }
  else
  {
    v120 = 0;
  }
  v174 = v120;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v171, "T_Out");
  (*((void (**)(void **, char **, void **))*v119 + 3))(v119, &v173, v171);
  if (v172 < 0)
    operator delete(v171[0]);
  v122 = v174;
  if (v174)
  {
    v123 = (unint64_t *)&v174->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v125 = Scalar;
  Scalar = 0;
  if (v125)
    (*(void (**)(char *))(*(_QWORD *)v125 + 8))(v125);
  v126 = *a3;
  v169 = v222;
  if (v222)
  {
    v127 = (std::__shared_weak_count *)operator new();
    v128 = v222;
    v127->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v127->__shared_owners_ = 0;
    v127->__shared_weak_owners_ = 0;
    v127[1].__vftable = (std::__shared_weak_count_vtbl *)v128;
  }
  else
  {
    v127 = 0;
  }
  v170 = v127;
  v222 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v126 + 56))(v126, &v169);
  v129 = v170;
  if (v170)
  {
    v130 = (unint64_t *)&v170->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v132 = v222;
  v222 = 0;
  if (v132)
    (*((void (**)(void **))*v132 + 1))(v132);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v214);
  v133 = v214;
  std::string::basic_string[abi:ne180100]<0>(v165, "dtype");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v165, 0, (uint64_t *)&v211);
  v167 = v211;
  if (v211)
  {
    v134 = (std::__shared_weak_count *)operator new();
    v135 = (std::__shared_weak_count_vtbl *)v211;
    v134->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v134->__shared_owners_ = 0;
    v134->__shared_weak_owners_ = 0;
    v134[1].__vftable = v135;
  }
  else
  {
    v134 = 0;
  }
  v168 = v134;
  v211 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v222, "bf16");
  std::string::basic_string[abi:ne180100]<0>(&v225, "BOOL");
  std::string::basic_string[abi:ne180100]<0>(&v228, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v231, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v232, "int16");
  std::string::basic_string[abi:ne180100]<0>(v233, "int32");
  std::string::basic_string[abi:ne180100]<0>(v234, "int8");
  std::string::basic_string[abi:ne180100]<0>(v235, "uint16");
  std::string::basic_string[abi:ne180100]<0>(v236, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v222, 9);
  (*(void (**)(void *, void **, char **, uint64_t))(*(_QWORD *)v133 + 24))(v133, &v167, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -27; i -= 3)
  {
    if (SHIBYTE(v236[i + 2]) < 0)
      operator delete((void *)v236[i]);
  }
  v137 = v168;
  if (v168)
  {
    v138 = (unint64_t *)&v168->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v140 = v211;
  v211 = 0;
  if (v140)
    (*(void (**)(void *))(*(_QWORD *)v140 + 8))(v140);
  if (v166 < 0)
    operator delete(v165[0]);
  v141 = v214;
  std::string::basic_string[abi:ne180100]<0>(v161, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v161, 1, (uint64_t *)&v211);
  v163 = v211;
  if (v211)
  {
    v142 = (std::__shared_weak_count *)operator new();
    v143 = (std::__shared_weak_count_vtbl *)v211;
    v142->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v142->__shared_owners_ = 0;
    v142->__shared_weak_owners_ = 0;
    v142[1].__vftable = v143;
  }
  else
  {
    v142 = 0;
  }
  v164 = v142;
  v211 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v222, "bf16");
  std::string::basic_string[abi:ne180100]<0>(&v225, "fp16");
  std::string::basic_string[abi:ne180100]<0>(&v228, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v231, "int16");
  std::string::basic_string[abi:ne180100]<0>(v232, "int32");
  std::string::basic_string[abi:ne180100]<0>(v233, "int8");
  std::string::basic_string[abi:ne180100]<0>(v234, "uint16");
  std::string::basic_string[abi:ne180100]<0>(v235, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v222, 8);
  (*(void (**)(void *, void **, char **, uint64_t))(*(_QWORD *)v141 + 24))(v141, &v163, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -24; j -= 3)
  {
    if (SHIBYTE(v235[j + 2]) < 0)
      operator delete((void *)v235[j]);
  }
  v145 = v164;
  if (v164)
  {
    v146 = (unint64_t *)&v164->__shared_owners_;
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  v148 = v211;
  v211 = 0;
  if (v148)
    (*(void (**)(void *))(*(_QWORD *)v148 + 8))(v148);
  if (v162 < 0)
    operator delete(v161[0]);
  v149 = *a3;
  v159 = v214;
  if (v214)
  {
    v150 = (std::__shared_weak_count *)operator new();
    v151 = (std::__shared_weak_count_vtbl *)v214;
    v150->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v150->__shared_owners_ = 0;
    v150->__shared_weak_owners_ = 0;
    v150[1].__vftable = v151;
  }
  else
  {
    v150 = 0;
  }
  v160 = v150;
  v214 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v149 + 56))(v149, &v159);
  v152 = v160;
  if (v160)
  {
    v153 = (unint64_t *)&v160->__shared_owners_;
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
    }
  }
  v155 = v214;
  v214 = 0;
  if (v155)
    (*(void (**)(void *))(*(_QWORD *)v155 + 8))(v155);
  if (v217)
  {
    v156 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v217);
    MEMORY[0x1E0C023A0](v156, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v194, 0);
  result = (uint64_t)v221;
  if (v221)
  {
    v158 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v221);
    return MEMORY[0x1E0C023A0](v158, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E099A0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58)
{
  uint64_t *v58;
  unint64_t v60;
  uint64_t v61;

  v60 = STACK[0x230];
  STACK[0x230] = 0;
  if (v60)
    (*(void (**)(unint64_t))(*(_QWORD *)v60 + 8))(v60);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x248], 0);
  v61 = *v58;
  *v58 = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x270], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::ElementwiseUnary::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  char **v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  char *v44;
  char *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  char **v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  _OWORD *v64;
  unsigned __int8 *v65;
  void *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  std::__shared_weak_count_vtbl *v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count *v73;
  unint64_t *p_shared_owners;
  unint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  void *v79;
  std::__shared_weak_count *v80;
  std::__shared_weak_count_vtbl *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count_vtbl *v85;
  void *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count_vtbl *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count_vtbl *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count_vtbl *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  void *v99;
  void *v100;
  std::__shared_weak_count *v101;
  std::__shared_weak_count_vtbl *v102;
  uint64_t i;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  std::__shared_weak_count_vtbl *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t result;
  uint64_t v117;
  void *v118;
  std::__shared_weak_count *v119;
  void *v120[2];
  char v121;
  void *v122;
  std::__shared_weak_count *v123;
  void *v124;
  std::__shared_weak_count *v125;
  void *v126[2];
  char v127;
  std::__shared_weak_count_vtbl *v128;
  std::__shared_weak_count *v129;
  void *v130[2];
  char v131;
  void *v132[2];
  char v133;
  std::__shared_weak_count_vtbl *v134;
  std::__shared_weak_count *v135;
  void *v136;
  std::__shared_weak_count *v137;
  __n128 v138;
  __int128 v139;
  __int128 v140;
  void *v141[2];
  uint64_t v142;
  void *v143;
  void *v144;
  _QWORD *v145;
  __n128 v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  char **v150;
  void *__p;
  void *v152;
  _QWORD *v153;
  void *v154;
  void *v155;
  _QWORD *v156;
  __n128 v157;
  uint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD v162[3];
  uint64_t v163[3];
  uint64_t v164[3];
  uint64_t v165[3];
  _QWORD v166[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v168;
  uint64_t v169;
  _BYTE v170[24];
  _BYTE *v171;
  _BYTE v172[24];
  _BYTE *v173;
  _BYTE v174[24];
  _BYTE *v175;
  uint64_t v176;

  v176 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v158 = v8;
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v10;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v168 = (uint64_t)&v10->~__shared_weak_count_0;
  v169 = (uint64_t)&v10->~__shared_weak_count_0;
  v159 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v154 = v12;
  *v12 = v11;
  v155 = v12 + 1;
  v156 = v12 + 1;
  v160 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v154);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v152 = v14 + 1;
  v153 = v14 + 1;
  v161 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v159, 3, &v157);
  MIL::IRParameter::Make(&v157, (uint64_t *)&v143);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", (uint64_t *)&v143);
  v15 = v143;
  v143 = 0;
  if (v15)
    (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v157.n128_u64[1];
  if (v157.n128_u64[1])
  {
    v17 = (unint64_t *)(v157.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v152 = __p;
    operator delete(__p);
  }
  if (v154)
  {
    v155 = v154;
    operator delete(v154);
  }
  if (Scalar)
  {
    v168 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v150 = 0;
  v19 = operator new();
  *(_QWORD *)v19 = 0;
  *(_QWORD *)(v19 + 8) = 0;
  *(_QWORD *)(v19 + 16) = 0;
  v159 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v150, (void **)v19);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v159, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v150, 1uLL);
  v20 = v150;
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  v154 = v22;
  *v22 = v21;
  v155 = v22 + 1;
  v156 = v22 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v154);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  __p = v24;
  *v24 = v23;
  v152 = v24 + 1;
  v153 = v24 + 1;
  v168 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = operator new(8uLL);
  v143 = v26;
  *v26 = v25;
  v144 = v26 + 1;
  v145 = v26 + 1;
  v169 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v143);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v146);
  MIL::IRParameter::Make(&v146, &v147);
  v27 = v147;
  v148 = v147;
  if (v147)
  {
    v28 = (_QWORD *)operator new();
    v29 = v147;
    *v28 = &unk_1EA99F888;
    v28[1] = 0;
    v28[2] = 0;
    v28[3] = v29;
  }
  else
  {
    v28 = 0;
  }
  v149 = v28;
  v147 = 0;
  v30 = v20[2];
  v31 = v20[1];
  if (v31 >= v30)
  {
    v33 = (v31 - *v20) >> 4;
    v34 = v33 + 1;
    if ((unint64_t)(v33 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v35 = v30 - *v20;
    if (v35 >> 3 > v34)
      v34 = v35 >> 3;
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0)
      v36 = 0xFFFFFFFFFFFFFFFLL;
    else
      v36 = v34;
    v162[1] = v20 + 2;
    v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v20 + 2), v36);
    v39 = (uint64_t *)&v37[16 * v33];
    *v39 = v27;
    v39[1] = (uint64_t)v28;
    v148 = 0;
    v149 = 0;
    v41 = *v20;
    v40 = v20[1];
    if (v40 == *v20)
    {
      v44 = v20[1];
      v42 = &v37[16 * v33];
    }
    else
    {
      v42 = &v37[16 * v33];
      do
      {
        v43 = *((_OWORD *)v40 - 1);
        v40 -= 16;
        *((_OWORD *)v42 - 1) = v43;
        v42 -= 16;
        *(_QWORD *)v40 = 0;
        *((_QWORD *)v40 + 1) = 0;
      }
      while (v40 != v41);
      v44 = *v20;
      v40 = v20[1];
    }
    v32 = (char *)(v39 + 2);
    *v20 = v42;
    v159 = v44;
    v160 = (uint64_t)v44;
    v20[1] = (char *)(v39 + 2);
    v161 = (uint64_t)v40;
    v45 = v20[2];
    v20[2] = &v37[16 * v38];
    v162[0] = v45;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v159);
  }
  else
  {
    *(_QWORD *)v31 = v27;
    *((_QWORD *)v31 + 1) = v28;
    v32 = v31 + 16;
    v148 = 0;
    v149 = 0;
  }
  v20[1] = v32;
  v46 = v147;
  v147 = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  v47 = (std::__shared_weak_count *)v146.n128_u64[1];
  if (v146.n128_u64[1])
  {
    v48 = (unint64_t *)(v146.n128_u64[1] + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  if (v143)
  {
    v144 = v143;
    operator delete(v143);
  }
  if (__p)
  {
    v152 = __p;
    operator delete(__p);
  }
  if (v154)
  {
    v155 = v154;
    operator delete(v154);
  }
  *(_OWORD *)v141 = *(_OWORD *)a2;
  v142 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v50 = v158;
  *(_QWORD *)&v140 = v158;
  if (v158)
  {
    v51 = (_QWORD *)operator new();
    *v51 = &unk_1EA99F8E8;
    v51[1] = 0;
    v51[2] = 0;
    v51[3] = v50;
  }
  else
  {
    v51 = 0;
  }
  *((_QWORD *)&v140 + 1) = v51;
  v158 = 0;
  *(_QWORD *)&v139 = v150;
  if (v150)
  {
    v52 = (_QWORD *)operator new();
    v53 = v150;
    *v52 = &unk_1EA99F948;
    v52[1] = 0;
    v52[2] = 0;
    v52[3] = v53;
  }
  else
  {
    v52 = 0;
  }
  *((_QWORD *)&v139 + 1) = v52;
  v150 = 0;
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v174, a3);
  v173 = 0;
  MIL::IROperator::Make((__int128 *)v141, &v140, &v139, (uint64_t)v174, (uint64_t)v172, a4);
  v54 = v173;
  if (v173 == v172)
  {
    v55 = 4;
    v54 = v172;
  }
  else
  {
    if (!v173)
      goto LABEL_55;
    v55 = 5;
  }
  (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_55:
  v56 = v175;
  if (v175 == v174)
  {
    v57 = 4;
    v56 = v174;
    goto LABEL_59;
  }
  if (v175)
  {
    v57 = 5;
LABEL_59:
    (*(void (**)(void))(*v56 + 8 * v57))();
  }
  v58 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
  if (*((_QWORD *)&v139 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v139 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v61 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
  if (*((_QWORD *)&v140 + 1))
  {
    v62 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (SHIBYTE(v142) < 0)
    operator delete(v141[0]);
  v154 = 0;
  v64 = (_OWORD *)operator new();
  *v64 = 0u;
  v64[1] = 0u;
  *((_DWORD *)v64 + 8) = 1065353216;
  v154 = v64;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v138);
  MIL::IRParameter::Make(&v138, (uint64_t *)&v159);
  v65 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v64, "minimum_compute_type", (uint64_t *)&v159);
  v66 = v159;
  v159 = 0;
  if (v66)
    (*(void (**)(void *))(*(_QWORD *)v66 + 8))(v66);
  v67 = (std::__shared_weak_count *)v138.n128_u64[1];
  if (v138.n128_u64[1])
  {
    v68 = (unint64_t *)(v138.n128_u64[1] + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v65 + 5) + 32))(*((_QWORD *)v65 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v65 + 5) + 48))(*((_QWORD *)v65 + 5), 1);
  v70 = *a4;
  v71 = (std::__shared_weak_count_vtbl *)v154;
  v136 = v154;
  if (v154)
  {
    v72 = (std::__shared_weak_count *)operator new();
    v72->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v72->__shared_owners_ = 0;
    v72->__shared_weak_owners_ = 0;
    v72[1].__vftable = v71;
  }
  else
  {
    v72 = 0;
  }
  v137 = v72;
  v154 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v70 + 184))(v70, &v136);
  v73 = v137;
  if (v137)
  {
    p_shared_owners = (unint64_t *)&v137->__shared_owners_;
    do
      v75 = __ldaxr(p_shared_owners);
    while (__stlxr(v75 - 1, p_shared_owners));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = *a4;
  std::string::basic_string[abi:ne180100]<0>(&v159, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v159, (uint64_t)v170);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v76 + 200))(v76, v170);
  v77 = v171;
  if (v171 == v170)
  {
    v78 = 4;
    v77 = v170;
  }
  else
  {
    if (!v171)
      goto LABEL_92;
    v78 = 5;
  }
  (*(void (**)(void))(*v77 + 8 * v78))();
LABEL_92:
  if (SHIBYTE(v161) < 0)
    operator delete(v159);
  MIL::Validation::TensorDTypeConstraints::Make(&v159);
  v79 = v159;
  std::string::basic_string[abi:ne180100]<0>(v132, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v132, 0, (uint64_t *)&Scalar);
  v134 = Scalar;
  if (Scalar)
  {
    v80 = (std::__shared_weak_count *)operator new();
    v81 = Scalar;
    v80->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v80->__shared_owners_ = 0;
    v80->__shared_weak_owners_ = 0;
    v80[1].__vftable = v81;
  }
  else
  {
    v80 = 0;
  }
  v135 = v80;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v130, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v79 + 24))(v79, &v134, v130);
  if (v131 < 0)
    operator delete(v130[0]);
  v82 = v135;
  if (v135)
  {
    v83 = (unint64_t *)&v135->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = Scalar;
  Scalar = 0;
  if (v85)
    (*((void (**)(std::__shared_weak_count_vtbl *))v85->~__shared_weak_count + 1))(v85);
  if (v133 < 0)
    operator delete(v132[0]);
  v86 = v159;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v128 = Scalar;
  if (Scalar)
  {
    v87 = (std::__shared_weak_count *)operator new();
    v88 = Scalar;
    v87->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v87->__shared_owners_ = 0;
    v87->__shared_weak_owners_ = 0;
    v87[1].__vftable = v88;
  }
  else
  {
    v87 = 0;
  }
  v129 = v87;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v126, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v86 + 24))(v86, &v128, v126);
  if (v127 < 0)
    operator delete(v126[0]);
  v89 = v129;
  if (v129)
  {
    v90 = (unint64_t *)&v129->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = Scalar;
  Scalar = 0;
  if (v92)
    (*((void (**)(std::__shared_weak_count_vtbl *))v92->~__shared_weak_count + 1))(v92);
  v93 = *a4;
  v124 = v159;
  if (v159)
  {
    v94 = (std::__shared_weak_count *)operator new();
    v95 = (std::__shared_weak_count_vtbl *)v159;
    v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v94->__shared_owners_ = 0;
    v94->__shared_weak_owners_ = 0;
    v94[1].__vftable = v95;
  }
  else
  {
    v94 = 0;
  }
  v125 = v94;
  v159 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v93 + 56))(v93, &v124);
  v96 = v125;
  if (v125)
  {
    v97 = (unint64_t *)&v125->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = v159;
  v159 = 0;
  if (v99)
    (*(void (**)(void *))(*(_QWORD *)v99 + 8))(v99);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v100 = __p;
  std::string::basic_string[abi:ne180100]<0>(v120, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v120, 1, (uint64_t *)&v143);
  v122 = v143;
  if (v143)
  {
    v101 = (std::__shared_weak_count *)operator new();
    v102 = (std::__shared_weak_count_vtbl *)v143;
    v101->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v101->__shared_owners_ = 0;
    v101->__shared_weak_owners_ = 0;
    v101[1].__vftable = v102;
  }
  else
  {
    v101 = 0;
  }
  v123 = v101;
  v143 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v159, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v162, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v163, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v164, "int32");
  std::string::basic_string[abi:ne180100]<0>(v165, "int8");
  std::string::basic_string[abi:ne180100]<0>(v166, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v159, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v100 + 24))(v100, &v122, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v166[i + 2]) < 0)
      operator delete((void *)v166[i]);
  }
  v104 = v123;
  if (v123)
  {
    v105 = (unint64_t *)&v123->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = v143;
  v143 = 0;
  if (v107)
    (*(void (**)(void *))(*(_QWORD *)v107 + 8))(v107);
  if (v121 < 0)
    operator delete(v120[0]);
  v108 = *a4;
  v118 = __p;
  if (__p)
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = (std::__shared_weak_count_vtbl *)__p;
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = v110;
  }
  else
  {
    v109 = 0;
  }
  v119 = v109;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v108 + 56))(v108, &v118);
  v111 = v119;
  if (v119)
  {
    v112 = (unint64_t *)&v119->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = __p;
  __p = 0;
  if (v114)
    (*(void (**)(void *))(*(_QWORD *)v114 + 8))(v114);
  if (v154)
  {
    v115 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v154);
    MEMORY[0x1E0C023A0](v115, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v150, 0);
  result = v158;
  if (v158)
  {
    v117 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v158);
    return MEMORY[0x1E0C023A0](v117, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E099B560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void **a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  void *v62;
  uint64_t v63;

  v62 = a52;
  a52 = 0;
  if (v62)
    (*(void (**)(void *))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a55, 0);
  v63 = *v60;
  *v60 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a51, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::Acos::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  char *v42;
  char *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  char **v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _OWORD *v62;
  unsigned __int8 *v63;
  void *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  std::__shared_weak_count_vtbl *v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  void *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count_vtbl *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count_vtbl *v86;
  void *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count_vtbl *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count_vtbl *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count_vtbl *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  void *v100;
  void *v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  uint64_t i;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  std::__shared_weak_count_vtbl *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t result;
  uint64_t v118;
  void *v119;
  std::__shared_weak_count *v120;
  void *v121[2];
  char v122;
  void *v123;
  std::__shared_weak_count *v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  void *v131[2];
  char v132;
  void *v133[2];
  char v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  void *v137;
  std::__shared_weak_count *v138;
  __n128 v139;
  __int128 v140;
  __int128 v141;
  void *v142[2];
  uint64_t v143;
  void *v144;
  void *v145;
  _QWORD *v146;
  __n128 v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  char **v151;
  void *__p;
  void *v153;
  _QWORD *v154;
  void *v155;
  void *v156;
  _QWORD *v157;
  __n128 v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD v163[3];
  uint64_t v164[3];
  uint64_t v165[3];
  uint64_t v166[3];
  _QWORD v167[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v169;
  uint64_t v170;
  _QWORD v171[3];
  _QWORD *v172;
  _BYTE v173[24];
  _BYTE *v174;
  _BYTE v175[24];
  _BYTE *v176;
  _QWORD v177[3];
  _QWORD *v178;
  uint64_t v179;

  v179 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v159 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v169 = (uint64_t)&v8->~__shared_weak_count_0;
  v170 = (uint64_t)&v8->~__shared_weak_count_0;
  v160 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v155 = v10;
  *v10 = v9;
  v156 = v10 + 1;
  v157 = v10 + 1;
  v161 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v155);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v153 = v12 + 1;
  v154 = v12 + 1;
  v162 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v160, 3, &v158);
  MIL::IRParameter::Make(&v158, (uint64_t *)&v144);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v144);
  v13 = v144;
  v144 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v158.n128_u64[1];
  if (v158.n128_u64[1])
  {
    v15 = (unint64_t *)(v158.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  if (Scalar)
  {
    v169 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v151 = 0;
  v17 = operator new();
  *(_QWORD *)v17 = 0;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  v160 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, (void **)v17);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v160, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v151, 1uLL);
  v18 = v151;
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v155 = v20;
  *v20 = v19;
  v156 = v20 + 1;
  v157 = v20 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v155);
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  __p = v22;
  *v22 = v21;
  v153 = v22 + 1;
  v154 = v22 + 1;
  v169 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  v144 = v24;
  *v24 = v23;
  v145 = v24 + 1;
  v146 = v24 + 1;
  v170 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v144);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v147);
  MIL::IRParameter::Make(&v147, &v148);
  v25 = v148;
  v149 = v148;
  if (v148)
  {
    v26 = (_QWORD *)operator new();
    v27 = v148;
    *v26 = &unk_1EA99F888;
    v26[1] = 0;
    v26[2] = 0;
    v26[3] = v27;
  }
  else
  {
    v26 = 0;
  }
  v150 = v26;
  v148 = 0;
  v28 = v18[2];
  v29 = v18[1];
  if (v29 >= v28)
  {
    v31 = (v29 - *v18) >> 4;
    v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v33 = v28 - *v18;
    if (v33 >> 3 > v32)
      v32 = v33 >> 3;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
      v34 = 0xFFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    v163[1] = v18 + 2;
    v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v18 + 2), v34);
    v37 = (uint64_t *)&v35[16 * v31];
    *v37 = v25;
    v37[1] = (uint64_t)v26;
    v149 = 0;
    v150 = 0;
    v39 = *v18;
    v38 = v18[1];
    if (v38 == *v18)
    {
      v42 = v18[1];
      v40 = &v35[16 * v31];
    }
    else
    {
      v40 = &v35[16 * v31];
      do
      {
        v41 = *((_OWORD *)v38 - 1);
        v38 -= 16;
        *((_OWORD *)v40 - 1) = v41;
        v40 -= 16;
        *(_QWORD *)v38 = 0;
        *((_QWORD *)v38 + 1) = 0;
      }
      while (v38 != v39);
      v42 = *v18;
      v38 = v18[1];
    }
    v30 = (char *)(v37 + 2);
    *v18 = v40;
    v160 = v42;
    v161 = (uint64_t)v42;
    v18[1] = (char *)(v37 + 2);
    v162 = (uint64_t)v38;
    v43 = v18[2];
    v18[2] = &v35[16 * v36];
    v163[0] = v43;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v160);
  }
  else
  {
    *(_QWORD *)v29 = v25;
    *((_QWORD *)v29 + 1) = v26;
    v30 = v29 + 16;
    v149 = 0;
    v150 = 0;
  }
  v18[1] = v30;
  v44 = v148;
  v148 = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = (std::__shared_weak_count *)v147.n128_u64[1];
  if (v147.n128_u64[1])
  {
    v46 = (unint64_t *)(v147.n128_u64[1] + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  *(_OWORD *)v142 = *(_OWORD *)a2;
  v143 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v48 = v159;
  *(_QWORD *)&v141 = v159;
  if (v159)
  {
    v49 = (_QWORD *)operator new();
    *v49 = &unk_1EA99F8E8;
    v49[1] = 0;
    v49[2] = 0;
    v49[3] = v48;
  }
  else
  {
    v49 = 0;
  }
  *((_QWORD *)&v141 + 1) = v49;
  v159 = 0;
  *(_QWORD *)&v140 = v151;
  if (v151)
  {
    v50 = (_QWORD *)operator new();
    v51 = v151;
    *v50 = &unk_1EA99F948;
    v50[1] = 0;
    v50[2] = 0;
    v50[3] = v51;
  }
  else
  {
    v50 = 0;
  }
  *((_QWORD *)&v140 + 1) = v50;
  v151 = 0;
  v177[0] = &unk_1EA99FAC8;
  v177[1] = MIL::Validation::ValidateViaTypeInference;
  v178 = v177;
  v176 = 0;
  MIL::IROperator::Make((__int128 *)v142, &v141, &v140, (uint64_t)v177, (uint64_t)v175, a3);
  v52 = v176;
  if (v176 == v175)
  {
    v53 = 4;
    v52 = v175;
  }
  else
  {
    if (!v176)
      goto LABEL_55;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_55:
  v54 = v178;
  if (v178 == v177)
  {
    v55 = 4;
    v54 = v177;
    goto LABEL_59;
  }
  if (v178)
  {
    v55 = 5;
LABEL_59:
    (*(void (**)(void))(*v54 + 8 * v55))();
  }
  v56 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
  if (*((_QWORD *)&v140 + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
  if (*((_QWORD *)&v141 + 1))
  {
    v60 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (SHIBYTE(v143) < 0)
    operator delete(v142[0]);
  v155 = 0;
  v62 = (_OWORD *)operator new();
  *v62 = 0u;
  v62[1] = 0u;
  *((_DWORD *)v62 + 8) = 1065353216;
  v155 = v62;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v139);
  MIL::IRParameter::Make(&v139, (uint64_t *)&v160);
  v63 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v62, "minimum_compute_type", (uint64_t *)&v160);
  v64 = v160;
  v160 = 0;
  if (v64)
    (*(void (**)(void *))(*(_QWORD *)v64 + 8))(v64);
  v65 = (std::__shared_weak_count *)v139.n128_u64[1];
  if (v139.n128_u64[1])
  {
    v66 = (unint64_t *)(v139.n128_u64[1] + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 32))(*((_QWORD *)v63 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 48))(*((_QWORD *)v63 + 5), 1);
  v68 = *a3;
  v69 = (std::__shared_weak_count_vtbl *)v155;
  v137 = v155;
  if (v155)
  {
    v70 = (std::__shared_weak_count *)operator new();
    v70->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v70->__shared_owners_ = 0;
    v70->__shared_weak_owners_ = 0;
    v70[1].__vftable = v69;
  }
  else
  {
    v70 = 0;
  }
  v138 = v70;
  v155 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v68 + 184))(v68, &v137);
  v71 = v138;
  if (v138)
  {
    p_shared_owners = (unint64_t *)&v138->__shared_owners_;
    do
      v73 = __ldaxr(p_shared_owners);
    while (__stlxr(v73 - 1, p_shared_owners));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v160, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v160, (uint64_t)v173);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v74 + 200))(v74, v173);
  v75 = v174;
  if (v174 == v173)
  {
    v76 = 4;
    v75 = v173;
  }
  else
  {
    if (!v174)
      goto LABEL_92;
    v76 = 5;
  }
  (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_92:
  if (SHIBYTE(v162) < 0)
    operator delete(v160);
  v77 = *a3;
  v171[0] = &off_1EA9A00F8;
  v171[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceAcos;
  v172 = v171;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v77 + 216))(v77, v171);
  v78 = v172;
  if (v172 == v171)
  {
    v79 = 4;
    v78 = v171;
  }
  else
  {
    if (!v172)
      goto LABEL_99;
    v79 = 5;
  }
  (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_99:
  MIL::Validation::TensorDTypeConstraints::Make(&v160);
  v80 = v160;
  std::string::basic_string[abi:ne180100]<0>(v133, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v133, 0, (uint64_t *)&Scalar);
  v135 = Scalar;
  if (Scalar)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v82 = Scalar;
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v82;
  }
  else
  {
    v81 = 0;
  }
  v136 = v81;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v131, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v80 + 24))(v80, &v135, v131);
  if (v132 < 0)
    operator delete(v131[0]);
  v83 = v136;
  if (v136)
  {
    v84 = (unint64_t *)&v136->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = Scalar;
  Scalar = 0;
  if (v86)
    (*((void (**)(std::__shared_weak_count_vtbl *))v86->~__shared_weak_count + 1))(v86);
  if (v134 < 0)
    operator delete(v133[0]);
  v87 = v160;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v129 = Scalar;
  if (Scalar)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = Scalar;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = v89;
  }
  else
  {
    v88 = 0;
  }
  v130 = v88;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v87 + 24))(v87, &v129, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v90 = v130;
  if (v130)
  {
    v91 = (unint64_t *)&v130->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = Scalar;
  Scalar = 0;
  if (v93)
    (*((void (**)(std::__shared_weak_count_vtbl *))v93->~__shared_weak_count + 1))(v93);
  v94 = *a3;
  v125 = v160;
  if (v160)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = (std::__shared_weak_count_vtbl *)v160;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = v96;
  }
  else
  {
    v95 = 0;
  }
  v126 = v95;
  v160 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v94 + 56))(v94, &v125);
  v97 = v126;
  if (v126)
  {
    v98 = (unint64_t *)&v126->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = v160;
  v160 = 0;
  if (v100)
    (*(void (**)(void *))(*(_QWORD *)v100 + 8))(v100);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v101 = __p;
  std::string::basic_string[abi:ne180100]<0>(v121, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v121, 1, (uint64_t *)&v144);
  v123 = v144;
  if (v144)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = (std::__shared_weak_count_vtbl *)v144;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v124 = v102;
  v144 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v160, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v163, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v164, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v165, "int32");
  std::string::basic_string[abi:ne180100]<0>(v166, "int8");
  std::string::basic_string[abi:ne180100]<0>(v167, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v160, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v101 + 24))(v101, &v123, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v167[i + 2]) < 0)
      operator delete((void *)v167[i]);
  }
  v105 = v124;
  if (v124)
  {
    v106 = (unint64_t *)&v124->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = v144;
  v144 = 0;
  if (v108)
    (*(void (**)(void *))(*(_QWORD *)v108 + 8))(v108);
  if (v122 < 0)
    operator delete(v121[0]);
  v109 = *a3;
  v119 = __p;
  if (__p)
  {
    v110 = (std::__shared_weak_count *)operator new();
    v111 = (std::__shared_weak_count_vtbl *)__p;
    v110->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v110->__shared_owners_ = 0;
    v110->__shared_weak_owners_ = 0;
    v110[1].__vftable = v111;
  }
  else
  {
    v110 = 0;
  }
  v120 = v110;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v109 + 56))(v109, &v119);
  v112 = v120;
  if (v120)
  {
    v113 = (unint64_t *)&v120->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = __p;
  __p = 0;
  if (v115)
    (*(void (**)(void *))(*(_QWORD *)v115 + 8))(v115);
  if (v155)
  {
    v116 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v155);
    MEMORY[0x1E0C023A0](v116, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, 0);
  result = v159;
  if (v159)
  {
    v118 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v159);
    return MEMORY[0x1E0C023A0](v118, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E099C7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void **a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  void *v62;
  uint64_t v63;

  v62 = a52;
  a52 = 0;
  if (v62)
    (*(void (**)(void *))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a55, 0);
  v63 = *v60;
  *v60 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a51, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::Acosh::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  char *v42;
  char *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  char **v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _OWORD *v62;
  unsigned __int8 *v63;
  void *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  std::__shared_weak_count_vtbl *v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  void *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count_vtbl *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count_vtbl *v86;
  void *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count_vtbl *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count_vtbl *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count_vtbl *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  void *v100;
  void *v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  uint64_t i;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  std::__shared_weak_count_vtbl *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t result;
  uint64_t v118;
  void *v119;
  std::__shared_weak_count *v120;
  void *v121[2];
  char v122;
  void *v123;
  std::__shared_weak_count *v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  void *v131[2];
  char v132;
  void *v133[2];
  char v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  void *v137;
  std::__shared_weak_count *v138;
  __n128 v139;
  __int128 v140;
  __int128 v141;
  void *v142[2];
  uint64_t v143;
  void *v144;
  void *v145;
  _QWORD *v146;
  __n128 v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  char **v151;
  void *__p;
  void *v153;
  _QWORD *v154;
  void *v155;
  void *v156;
  _QWORD *v157;
  __n128 v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD v163[3];
  uint64_t v164[3];
  uint64_t v165[3];
  uint64_t v166[3];
  _QWORD v167[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v169;
  uint64_t v170;
  _QWORD v171[3];
  _QWORD *v172;
  _BYTE v173[24];
  _BYTE *v174;
  _BYTE v175[24];
  _BYTE *v176;
  _QWORD v177[3];
  _QWORD *v178;
  uint64_t v179;

  v179 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v159 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v169 = (uint64_t)&v8->~__shared_weak_count_0;
  v170 = (uint64_t)&v8->~__shared_weak_count_0;
  v160 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v155 = v10;
  *v10 = v9;
  v156 = v10 + 1;
  v157 = v10 + 1;
  v161 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v155);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v153 = v12 + 1;
  v154 = v12 + 1;
  v162 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v160, 3, &v158);
  MIL::IRParameter::Make(&v158, (uint64_t *)&v144);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v144);
  v13 = v144;
  v144 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v158.n128_u64[1];
  if (v158.n128_u64[1])
  {
    v15 = (unint64_t *)(v158.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  if (Scalar)
  {
    v169 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v151 = 0;
  v17 = operator new();
  *(_QWORD *)v17 = 0;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  v160 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, (void **)v17);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v160, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v151, 1uLL);
  v18 = v151;
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v155 = v20;
  *v20 = v19;
  v156 = v20 + 1;
  v157 = v20 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v155);
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  __p = v22;
  *v22 = v21;
  v153 = v22 + 1;
  v154 = v22 + 1;
  v169 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  v144 = v24;
  *v24 = v23;
  v145 = v24 + 1;
  v146 = v24 + 1;
  v170 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v144);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v147);
  MIL::IRParameter::Make(&v147, &v148);
  v25 = v148;
  v149 = v148;
  if (v148)
  {
    v26 = (_QWORD *)operator new();
    v27 = v148;
    *v26 = &unk_1EA99F888;
    v26[1] = 0;
    v26[2] = 0;
    v26[3] = v27;
  }
  else
  {
    v26 = 0;
  }
  v150 = v26;
  v148 = 0;
  v28 = v18[2];
  v29 = v18[1];
  if (v29 >= v28)
  {
    v31 = (v29 - *v18) >> 4;
    v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v33 = v28 - *v18;
    if (v33 >> 3 > v32)
      v32 = v33 >> 3;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
      v34 = 0xFFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    v163[1] = v18 + 2;
    v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v18 + 2), v34);
    v37 = (uint64_t *)&v35[16 * v31];
    *v37 = v25;
    v37[1] = (uint64_t)v26;
    v149 = 0;
    v150 = 0;
    v39 = *v18;
    v38 = v18[1];
    if (v38 == *v18)
    {
      v42 = v18[1];
      v40 = &v35[16 * v31];
    }
    else
    {
      v40 = &v35[16 * v31];
      do
      {
        v41 = *((_OWORD *)v38 - 1);
        v38 -= 16;
        *((_OWORD *)v40 - 1) = v41;
        v40 -= 16;
        *(_QWORD *)v38 = 0;
        *((_QWORD *)v38 + 1) = 0;
      }
      while (v38 != v39);
      v42 = *v18;
      v38 = v18[1];
    }
    v30 = (char *)(v37 + 2);
    *v18 = v40;
    v160 = v42;
    v161 = (uint64_t)v42;
    v18[1] = (char *)(v37 + 2);
    v162 = (uint64_t)v38;
    v43 = v18[2];
    v18[2] = &v35[16 * v36];
    v163[0] = v43;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v160);
  }
  else
  {
    *(_QWORD *)v29 = v25;
    *((_QWORD *)v29 + 1) = v26;
    v30 = v29 + 16;
    v149 = 0;
    v150 = 0;
  }
  v18[1] = v30;
  v44 = v148;
  v148 = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = (std::__shared_weak_count *)v147.n128_u64[1];
  if (v147.n128_u64[1])
  {
    v46 = (unint64_t *)(v147.n128_u64[1] + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  *(_OWORD *)v142 = *(_OWORD *)a2;
  v143 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v48 = v159;
  *(_QWORD *)&v141 = v159;
  if (v159)
  {
    v49 = (_QWORD *)operator new();
    *v49 = &unk_1EA99F8E8;
    v49[1] = 0;
    v49[2] = 0;
    v49[3] = v48;
  }
  else
  {
    v49 = 0;
  }
  *((_QWORD *)&v141 + 1) = v49;
  v159 = 0;
  *(_QWORD *)&v140 = v151;
  if (v151)
  {
    v50 = (_QWORD *)operator new();
    v51 = v151;
    *v50 = &unk_1EA99F948;
    v50[1] = 0;
    v50[2] = 0;
    v50[3] = v51;
  }
  else
  {
    v50 = 0;
  }
  *((_QWORD *)&v140 + 1) = v50;
  v151 = 0;
  v177[0] = &unk_1EA99FAC8;
  v177[1] = MIL::Validation::ValidateViaTypeInference;
  v178 = v177;
  v176 = 0;
  MIL::IROperator::Make((__int128 *)v142, &v141, &v140, (uint64_t)v177, (uint64_t)v175, a3);
  v52 = v176;
  if (v176 == v175)
  {
    v53 = 4;
    v52 = v175;
  }
  else
  {
    if (!v176)
      goto LABEL_55;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_55:
  v54 = v178;
  if (v178 == v177)
  {
    v55 = 4;
    v54 = v177;
    goto LABEL_59;
  }
  if (v178)
  {
    v55 = 5;
LABEL_59:
    (*(void (**)(void))(*v54 + 8 * v55))();
  }
  v56 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
  if (*((_QWORD *)&v140 + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
  if (*((_QWORD *)&v141 + 1))
  {
    v60 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (SHIBYTE(v143) < 0)
    operator delete(v142[0]);
  v155 = 0;
  v62 = (_OWORD *)operator new();
  *v62 = 0u;
  v62[1] = 0u;
  *((_DWORD *)v62 + 8) = 1065353216;
  v155 = v62;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v139);
  MIL::IRParameter::Make(&v139, (uint64_t *)&v160);
  v63 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v62, "minimum_compute_type", (uint64_t *)&v160);
  v64 = v160;
  v160 = 0;
  if (v64)
    (*(void (**)(void *))(*(_QWORD *)v64 + 8))(v64);
  v65 = (std::__shared_weak_count *)v139.n128_u64[1];
  if (v139.n128_u64[1])
  {
    v66 = (unint64_t *)(v139.n128_u64[1] + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 32))(*((_QWORD *)v63 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 48))(*((_QWORD *)v63 + 5), 1);
  v68 = *a3;
  v69 = (std::__shared_weak_count_vtbl *)v155;
  v137 = v155;
  if (v155)
  {
    v70 = (std::__shared_weak_count *)operator new();
    v70->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v70->__shared_owners_ = 0;
    v70->__shared_weak_owners_ = 0;
    v70[1].__vftable = v69;
  }
  else
  {
    v70 = 0;
  }
  v138 = v70;
  v155 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v68 + 184))(v68, &v137);
  v71 = v138;
  if (v138)
  {
    p_shared_owners = (unint64_t *)&v138->__shared_owners_;
    do
      v73 = __ldaxr(p_shared_owners);
    while (__stlxr(v73 - 1, p_shared_owners));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v160, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v160, (uint64_t)v173);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v74 + 200))(v74, v173);
  v75 = v174;
  if (v174 == v173)
  {
    v76 = 4;
    v75 = v173;
  }
  else
  {
    if (!v174)
      goto LABEL_92;
    v76 = 5;
  }
  (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_92:
  if (SHIBYTE(v162) < 0)
    operator delete(v160);
  v77 = *a3;
  v171[0] = &off_1EA9A00F8;
  v171[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceAcosh;
  v172 = v171;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v77 + 216))(v77, v171);
  v78 = v172;
  if (v172 == v171)
  {
    v79 = 4;
    v78 = v171;
  }
  else
  {
    if (!v172)
      goto LABEL_99;
    v79 = 5;
  }
  (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_99:
  MIL::Validation::TensorDTypeConstraints::Make(&v160);
  v80 = v160;
  std::string::basic_string[abi:ne180100]<0>(v133, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v133, 0, (uint64_t *)&Scalar);
  v135 = Scalar;
  if (Scalar)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v82 = Scalar;
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v82;
  }
  else
  {
    v81 = 0;
  }
  v136 = v81;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v131, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v80 + 24))(v80, &v135, v131);
  if (v132 < 0)
    operator delete(v131[0]);
  v83 = v136;
  if (v136)
  {
    v84 = (unint64_t *)&v136->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = Scalar;
  Scalar = 0;
  if (v86)
    (*((void (**)(std::__shared_weak_count_vtbl *))v86->~__shared_weak_count + 1))(v86);
  if (v134 < 0)
    operator delete(v133[0]);
  v87 = v160;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v129 = Scalar;
  if (Scalar)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = Scalar;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = v89;
  }
  else
  {
    v88 = 0;
  }
  v130 = v88;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v87 + 24))(v87, &v129, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v90 = v130;
  if (v130)
  {
    v91 = (unint64_t *)&v130->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = Scalar;
  Scalar = 0;
  if (v93)
    (*((void (**)(std::__shared_weak_count_vtbl *))v93->~__shared_weak_count + 1))(v93);
  v94 = *a3;
  v125 = v160;
  if (v160)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = (std::__shared_weak_count_vtbl *)v160;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = v96;
  }
  else
  {
    v95 = 0;
  }
  v126 = v95;
  v160 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v94 + 56))(v94, &v125);
  v97 = v126;
  if (v126)
  {
    v98 = (unint64_t *)&v126->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = v160;
  v160 = 0;
  if (v100)
    (*(void (**)(void *))(*(_QWORD *)v100 + 8))(v100);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v101 = __p;
  std::string::basic_string[abi:ne180100]<0>(v121, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v121, 1, (uint64_t *)&v144);
  v123 = v144;
  if (v144)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = (std::__shared_weak_count_vtbl *)v144;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v124 = v102;
  v144 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v160, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v163, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v164, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v165, "int32");
  std::string::basic_string[abi:ne180100]<0>(v166, "int8");
  std::string::basic_string[abi:ne180100]<0>(v167, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v160, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v101 + 24))(v101, &v123, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v167[i + 2]) < 0)
      operator delete((void *)v167[i]);
  }
  v105 = v124;
  if (v124)
  {
    v106 = (unint64_t *)&v124->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = v144;
  v144 = 0;
  if (v108)
    (*(void (**)(void *))(*(_QWORD *)v108 + 8))(v108);
  if (v122 < 0)
    operator delete(v121[0]);
  v109 = *a3;
  v119 = __p;
  if (__p)
  {
    v110 = (std::__shared_weak_count *)operator new();
    v111 = (std::__shared_weak_count_vtbl *)__p;
    v110->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v110->__shared_owners_ = 0;
    v110->__shared_weak_owners_ = 0;
    v110[1].__vftable = v111;
  }
  else
  {
    v110 = 0;
  }
  v120 = v110;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v109 + 56))(v109, &v119);
  v112 = v120;
  if (v120)
  {
    v113 = (unint64_t *)&v120->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = __p;
  __p = 0;
  if (v115)
    (*(void (**)(void *))(*(_QWORD *)v115 + 8))(v115);
  if (v155)
  {
    v116 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v155);
    MEMORY[0x1E0C023A0](v116, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, 0);
  result = v159;
  if (v159)
  {
    v118 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v159);
    return MEMORY[0x1E0C023A0](v118, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E099DABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void **a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  void *v62;
  uint64_t v63;

  v62 = a52;
  a52 = 0;
  if (v62)
    (*(void (**)(void *))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a55, 0);
  v63 = *v60;
  *v60 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a51, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::Asin::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  char *v42;
  char *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  char **v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _OWORD *v62;
  unsigned __int8 *v63;
  void *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  std::__shared_weak_count_vtbl *v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  void *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count_vtbl *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count_vtbl *v86;
  void *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count_vtbl *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count_vtbl *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count_vtbl *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  void *v100;
  void *v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  uint64_t i;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  std::__shared_weak_count_vtbl *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t result;
  uint64_t v118;
  void *v119;
  std::__shared_weak_count *v120;
  void *v121[2];
  char v122;
  void *v123;
  std::__shared_weak_count *v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  void *v131[2];
  char v132;
  void *v133[2];
  char v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  void *v137;
  std::__shared_weak_count *v138;
  __n128 v139;
  __int128 v140;
  __int128 v141;
  void *v142[2];
  uint64_t v143;
  void *v144;
  void *v145;
  _QWORD *v146;
  __n128 v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  char **v151;
  void *__p;
  void *v153;
  _QWORD *v154;
  void *v155;
  void *v156;
  _QWORD *v157;
  __n128 v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD v163[3];
  uint64_t v164[3];
  uint64_t v165[3];
  uint64_t v166[3];
  _QWORD v167[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v169;
  uint64_t v170;
  _QWORD v171[3];
  _QWORD *v172;
  _BYTE v173[24];
  _BYTE *v174;
  _BYTE v175[24];
  _BYTE *v176;
  _QWORD v177[3];
  _QWORD *v178;
  uint64_t v179;

  v179 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v159 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v169 = (uint64_t)&v8->~__shared_weak_count_0;
  v170 = (uint64_t)&v8->~__shared_weak_count_0;
  v160 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v155 = v10;
  *v10 = v9;
  v156 = v10 + 1;
  v157 = v10 + 1;
  v161 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v155);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v153 = v12 + 1;
  v154 = v12 + 1;
  v162 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v160, 3, &v158);
  MIL::IRParameter::Make(&v158, (uint64_t *)&v144);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v144);
  v13 = v144;
  v144 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v158.n128_u64[1];
  if (v158.n128_u64[1])
  {
    v15 = (unint64_t *)(v158.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  if (Scalar)
  {
    v169 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v151 = 0;
  v17 = operator new();
  *(_QWORD *)v17 = 0;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  v160 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, (void **)v17);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v160, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v151, 1uLL);
  v18 = v151;
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v155 = v20;
  *v20 = v19;
  v156 = v20 + 1;
  v157 = v20 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v155);
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  __p = v22;
  *v22 = v21;
  v153 = v22 + 1;
  v154 = v22 + 1;
  v169 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  v144 = v24;
  *v24 = v23;
  v145 = v24 + 1;
  v146 = v24 + 1;
  v170 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v144);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v147);
  MIL::IRParameter::Make(&v147, &v148);
  v25 = v148;
  v149 = v148;
  if (v148)
  {
    v26 = (_QWORD *)operator new();
    v27 = v148;
    *v26 = &unk_1EA99F888;
    v26[1] = 0;
    v26[2] = 0;
    v26[3] = v27;
  }
  else
  {
    v26 = 0;
  }
  v150 = v26;
  v148 = 0;
  v28 = v18[2];
  v29 = v18[1];
  if (v29 >= v28)
  {
    v31 = (v29 - *v18) >> 4;
    v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v33 = v28 - *v18;
    if (v33 >> 3 > v32)
      v32 = v33 >> 3;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
      v34 = 0xFFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    v163[1] = v18 + 2;
    v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v18 + 2), v34);
    v37 = (uint64_t *)&v35[16 * v31];
    *v37 = v25;
    v37[1] = (uint64_t)v26;
    v149 = 0;
    v150 = 0;
    v39 = *v18;
    v38 = v18[1];
    if (v38 == *v18)
    {
      v42 = v18[1];
      v40 = &v35[16 * v31];
    }
    else
    {
      v40 = &v35[16 * v31];
      do
      {
        v41 = *((_OWORD *)v38 - 1);
        v38 -= 16;
        *((_OWORD *)v40 - 1) = v41;
        v40 -= 16;
        *(_QWORD *)v38 = 0;
        *((_QWORD *)v38 + 1) = 0;
      }
      while (v38 != v39);
      v42 = *v18;
      v38 = v18[1];
    }
    v30 = (char *)(v37 + 2);
    *v18 = v40;
    v160 = v42;
    v161 = (uint64_t)v42;
    v18[1] = (char *)(v37 + 2);
    v162 = (uint64_t)v38;
    v43 = v18[2];
    v18[2] = &v35[16 * v36];
    v163[0] = v43;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v160);
  }
  else
  {
    *(_QWORD *)v29 = v25;
    *((_QWORD *)v29 + 1) = v26;
    v30 = v29 + 16;
    v149 = 0;
    v150 = 0;
  }
  v18[1] = v30;
  v44 = v148;
  v148 = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = (std::__shared_weak_count *)v147.n128_u64[1];
  if (v147.n128_u64[1])
  {
    v46 = (unint64_t *)(v147.n128_u64[1] + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  *(_OWORD *)v142 = *(_OWORD *)a2;
  v143 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v48 = v159;
  *(_QWORD *)&v141 = v159;
  if (v159)
  {
    v49 = (_QWORD *)operator new();
    *v49 = &unk_1EA99F8E8;
    v49[1] = 0;
    v49[2] = 0;
    v49[3] = v48;
  }
  else
  {
    v49 = 0;
  }
  *((_QWORD *)&v141 + 1) = v49;
  v159 = 0;
  *(_QWORD *)&v140 = v151;
  if (v151)
  {
    v50 = (_QWORD *)operator new();
    v51 = v151;
    *v50 = &unk_1EA99F948;
    v50[1] = 0;
    v50[2] = 0;
    v50[3] = v51;
  }
  else
  {
    v50 = 0;
  }
  *((_QWORD *)&v140 + 1) = v50;
  v151 = 0;
  v177[0] = &unk_1EA99FAC8;
  v177[1] = MIL::Validation::ValidateViaTypeInference;
  v178 = v177;
  v176 = 0;
  MIL::IROperator::Make((__int128 *)v142, &v141, &v140, (uint64_t)v177, (uint64_t)v175, a3);
  v52 = v176;
  if (v176 == v175)
  {
    v53 = 4;
    v52 = v175;
  }
  else
  {
    if (!v176)
      goto LABEL_55;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_55:
  v54 = v178;
  if (v178 == v177)
  {
    v55 = 4;
    v54 = v177;
    goto LABEL_59;
  }
  if (v178)
  {
    v55 = 5;
LABEL_59:
    (*(void (**)(void))(*v54 + 8 * v55))();
  }
  v56 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
  if (*((_QWORD *)&v140 + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
  if (*((_QWORD *)&v141 + 1))
  {
    v60 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (SHIBYTE(v143) < 0)
    operator delete(v142[0]);
  v155 = 0;
  v62 = (_OWORD *)operator new();
  *v62 = 0u;
  v62[1] = 0u;
  *((_DWORD *)v62 + 8) = 1065353216;
  v155 = v62;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v139);
  MIL::IRParameter::Make(&v139, (uint64_t *)&v160);
  v63 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v62, "minimum_compute_type", (uint64_t *)&v160);
  v64 = v160;
  v160 = 0;
  if (v64)
    (*(void (**)(void *))(*(_QWORD *)v64 + 8))(v64);
  v65 = (std::__shared_weak_count *)v139.n128_u64[1];
  if (v139.n128_u64[1])
  {
    v66 = (unint64_t *)(v139.n128_u64[1] + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 32))(*((_QWORD *)v63 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 48))(*((_QWORD *)v63 + 5), 1);
  v68 = *a3;
  v69 = (std::__shared_weak_count_vtbl *)v155;
  v137 = v155;
  if (v155)
  {
    v70 = (std::__shared_weak_count *)operator new();
    v70->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v70->__shared_owners_ = 0;
    v70->__shared_weak_owners_ = 0;
    v70[1].__vftable = v69;
  }
  else
  {
    v70 = 0;
  }
  v138 = v70;
  v155 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v68 + 184))(v68, &v137);
  v71 = v138;
  if (v138)
  {
    p_shared_owners = (unint64_t *)&v138->__shared_owners_;
    do
      v73 = __ldaxr(p_shared_owners);
    while (__stlxr(v73 - 1, p_shared_owners));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v160, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v160, (uint64_t)v173);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v74 + 200))(v74, v173);
  v75 = v174;
  if (v174 == v173)
  {
    v76 = 4;
    v75 = v173;
  }
  else
  {
    if (!v174)
      goto LABEL_92;
    v76 = 5;
  }
  (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_92:
  if (SHIBYTE(v162) < 0)
    operator delete(v160);
  v77 = *a3;
  v171[0] = &off_1EA9A00F8;
  v171[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceAsin;
  v172 = v171;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v77 + 216))(v77, v171);
  v78 = v172;
  if (v172 == v171)
  {
    v79 = 4;
    v78 = v171;
  }
  else
  {
    if (!v172)
      goto LABEL_99;
    v79 = 5;
  }
  (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_99:
  MIL::Validation::TensorDTypeConstraints::Make(&v160);
  v80 = v160;
  std::string::basic_string[abi:ne180100]<0>(v133, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v133, 0, (uint64_t *)&Scalar);
  v135 = Scalar;
  if (Scalar)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v82 = Scalar;
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v82;
  }
  else
  {
    v81 = 0;
  }
  v136 = v81;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v131, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v80 + 24))(v80, &v135, v131);
  if (v132 < 0)
    operator delete(v131[0]);
  v83 = v136;
  if (v136)
  {
    v84 = (unint64_t *)&v136->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = Scalar;
  Scalar = 0;
  if (v86)
    (*((void (**)(std::__shared_weak_count_vtbl *))v86->~__shared_weak_count + 1))(v86);
  if (v134 < 0)
    operator delete(v133[0]);
  v87 = v160;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v129 = Scalar;
  if (Scalar)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = Scalar;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = v89;
  }
  else
  {
    v88 = 0;
  }
  v130 = v88;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v87 + 24))(v87, &v129, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v90 = v130;
  if (v130)
  {
    v91 = (unint64_t *)&v130->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = Scalar;
  Scalar = 0;
  if (v93)
    (*((void (**)(std::__shared_weak_count_vtbl *))v93->~__shared_weak_count + 1))(v93);
  v94 = *a3;
  v125 = v160;
  if (v160)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = (std::__shared_weak_count_vtbl *)v160;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = v96;
  }
  else
  {
    v95 = 0;
  }
  v126 = v95;
  v160 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v94 + 56))(v94, &v125);
  v97 = v126;
  if (v126)
  {
    v98 = (unint64_t *)&v126->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = v160;
  v160 = 0;
  if (v100)
    (*(void (**)(void *))(*(_QWORD *)v100 + 8))(v100);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v101 = __p;
  std::string::basic_string[abi:ne180100]<0>(v121, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v121, 1, (uint64_t *)&v144);
  v123 = v144;
  if (v144)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = (std::__shared_weak_count_vtbl *)v144;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v124 = v102;
  v144 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v160, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v163, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v164, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v165, "int32");
  std::string::basic_string[abi:ne180100]<0>(v166, "int8");
  std::string::basic_string[abi:ne180100]<0>(v167, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v160, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v101 + 24))(v101, &v123, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v167[i + 2]) < 0)
      operator delete((void *)v167[i]);
  }
  v105 = v124;
  if (v124)
  {
    v106 = (unint64_t *)&v124->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = v144;
  v144 = 0;
  if (v108)
    (*(void (**)(void *))(*(_QWORD *)v108 + 8))(v108);
  if (v122 < 0)
    operator delete(v121[0]);
  v109 = *a3;
  v119 = __p;
  if (__p)
  {
    v110 = (std::__shared_weak_count *)operator new();
    v111 = (std::__shared_weak_count_vtbl *)__p;
    v110->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v110->__shared_owners_ = 0;
    v110->__shared_weak_owners_ = 0;
    v110[1].__vftable = v111;
  }
  else
  {
    v110 = 0;
  }
  v120 = v110;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v109 + 56))(v109, &v119);
  v112 = v120;
  if (v120)
  {
    v113 = (unint64_t *)&v120->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = __p;
  __p = 0;
  if (v115)
    (*(void (**)(void *))(*(_QWORD *)v115 + 8))(v115);
  if (v155)
  {
    v116 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v155);
    MEMORY[0x1E0C023A0](v116, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, 0);
  result = v159;
  if (v159)
  {
    v118 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v159);
    return MEMORY[0x1E0C023A0](v118, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E099ED84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void **a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  void *v62;
  uint64_t v63;

  v62 = a52;
  a52 = 0;
  if (v62)
    (*(void (**)(void *))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a55, 0);
  v63 = *v60;
  *v60 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a51, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::Asinh::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  char *v42;
  char *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  char **v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _OWORD *v62;
  unsigned __int8 *v63;
  void *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  std::__shared_weak_count_vtbl *v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  void *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count_vtbl *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count_vtbl *v86;
  void *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count_vtbl *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count_vtbl *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count_vtbl *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  void *v100;
  void *v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  uint64_t i;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  std::__shared_weak_count_vtbl *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t result;
  uint64_t v118;
  void *v119;
  std::__shared_weak_count *v120;
  void *v121[2];
  char v122;
  void *v123;
  std::__shared_weak_count *v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  void *v131[2];
  char v132;
  void *v133[2];
  char v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  void *v137;
  std::__shared_weak_count *v138;
  __n128 v139;
  __int128 v140;
  __int128 v141;
  void *v142[2];
  uint64_t v143;
  void *v144;
  void *v145;
  _QWORD *v146;
  __n128 v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  char **v151;
  void *__p;
  void *v153;
  _QWORD *v154;
  void *v155;
  void *v156;
  _QWORD *v157;
  __n128 v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD v163[3];
  uint64_t v164[3];
  uint64_t v165[3];
  uint64_t v166[3];
  _QWORD v167[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v169;
  uint64_t v170;
  _QWORD v171[3];
  _QWORD *v172;
  _BYTE v173[24];
  _BYTE *v174;
  _BYTE v175[24];
  _BYTE *v176;
  _QWORD v177[3];
  _QWORD *v178;
  uint64_t v179;

  v179 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v159 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v169 = (uint64_t)&v8->~__shared_weak_count_0;
  v170 = (uint64_t)&v8->~__shared_weak_count_0;
  v160 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v155 = v10;
  *v10 = v9;
  v156 = v10 + 1;
  v157 = v10 + 1;
  v161 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v155);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v153 = v12 + 1;
  v154 = v12 + 1;
  v162 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v160, 3, &v158);
  MIL::IRParameter::Make(&v158, (uint64_t *)&v144);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v144);
  v13 = v144;
  v144 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v158.n128_u64[1];
  if (v158.n128_u64[1])
  {
    v15 = (unint64_t *)(v158.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  if (Scalar)
  {
    v169 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v151 = 0;
  v17 = operator new();
  *(_QWORD *)v17 = 0;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  v160 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, (void **)v17);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v160, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v151, 1uLL);
  v18 = v151;
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v155 = v20;
  *v20 = v19;
  v156 = v20 + 1;
  v157 = v20 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v155);
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  __p = v22;
  *v22 = v21;
  v153 = v22 + 1;
  v154 = v22 + 1;
  v169 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  v144 = v24;
  *v24 = v23;
  v145 = v24 + 1;
  v146 = v24 + 1;
  v170 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v144);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v147);
  MIL::IRParameter::Make(&v147, &v148);
  v25 = v148;
  v149 = v148;
  if (v148)
  {
    v26 = (_QWORD *)operator new();
    v27 = v148;
    *v26 = &unk_1EA99F888;
    v26[1] = 0;
    v26[2] = 0;
    v26[3] = v27;
  }
  else
  {
    v26 = 0;
  }
  v150 = v26;
  v148 = 0;
  v28 = v18[2];
  v29 = v18[1];
  if (v29 >= v28)
  {
    v31 = (v29 - *v18) >> 4;
    v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v33 = v28 - *v18;
    if (v33 >> 3 > v32)
      v32 = v33 >> 3;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
      v34 = 0xFFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    v163[1] = v18 + 2;
    v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v18 + 2), v34);
    v37 = (uint64_t *)&v35[16 * v31];
    *v37 = v25;
    v37[1] = (uint64_t)v26;
    v149 = 0;
    v150 = 0;
    v39 = *v18;
    v38 = v18[1];
    if (v38 == *v18)
    {
      v42 = v18[1];
      v40 = &v35[16 * v31];
    }
    else
    {
      v40 = &v35[16 * v31];
      do
      {
        v41 = *((_OWORD *)v38 - 1);
        v38 -= 16;
        *((_OWORD *)v40 - 1) = v41;
        v40 -= 16;
        *(_QWORD *)v38 = 0;
        *((_QWORD *)v38 + 1) = 0;
      }
      while (v38 != v39);
      v42 = *v18;
      v38 = v18[1];
    }
    v30 = (char *)(v37 + 2);
    *v18 = v40;
    v160 = v42;
    v161 = (uint64_t)v42;
    v18[1] = (char *)(v37 + 2);
    v162 = (uint64_t)v38;
    v43 = v18[2];
    v18[2] = &v35[16 * v36];
    v163[0] = v43;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v160);
  }
  else
  {
    *(_QWORD *)v29 = v25;
    *((_QWORD *)v29 + 1) = v26;
    v30 = v29 + 16;
    v149 = 0;
    v150 = 0;
  }
  v18[1] = v30;
  v44 = v148;
  v148 = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = (std::__shared_weak_count *)v147.n128_u64[1];
  if (v147.n128_u64[1])
  {
    v46 = (unint64_t *)(v147.n128_u64[1] + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  *(_OWORD *)v142 = *(_OWORD *)a2;
  v143 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v48 = v159;
  *(_QWORD *)&v141 = v159;
  if (v159)
  {
    v49 = (_QWORD *)operator new();
    *v49 = &unk_1EA99F8E8;
    v49[1] = 0;
    v49[2] = 0;
    v49[3] = v48;
  }
  else
  {
    v49 = 0;
  }
  *((_QWORD *)&v141 + 1) = v49;
  v159 = 0;
  *(_QWORD *)&v140 = v151;
  if (v151)
  {
    v50 = (_QWORD *)operator new();
    v51 = v151;
    *v50 = &unk_1EA99F948;
    v50[1] = 0;
    v50[2] = 0;
    v50[3] = v51;
  }
  else
  {
    v50 = 0;
  }
  *((_QWORD *)&v140 + 1) = v50;
  v151 = 0;
  v177[0] = &unk_1EA99FAC8;
  v177[1] = MIL::Validation::ValidateViaTypeInference;
  v178 = v177;
  v176 = 0;
  MIL::IROperator::Make((__int128 *)v142, &v141, &v140, (uint64_t)v177, (uint64_t)v175, a3);
  v52 = v176;
  if (v176 == v175)
  {
    v53 = 4;
    v52 = v175;
  }
  else
  {
    if (!v176)
      goto LABEL_55;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_55:
  v54 = v178;
  if (v178 == v177)
  {
    v55 = 4;
    v54 = v177;
    goto LABEL_59;
  }
  if (v178)
  {
    v55 = 5;
LABEL_59:
    (*(void (**)(void))(*v54 + 8 * v55))();
  }
  v56 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
  if (*((_QWORD *)&v140 + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
  if (*((_QWORD *)&v141 + 1))
  {
    v60 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (SHIBYTE(v143) < 0)
    operator delete(v142[0]);
  v155 = 0;
  v62 = (_OWORD *)operator new();
  *v62 = 0u;
  v62[1] = 0u;
  *((_DWORD *)v62 + 8) = 1065353216;
  v155 = v62;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v139);
  MIL::IRParameter::Make(&v139, (uint64_t *)&v160);
  v63 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v62, "minimum_compute_type", (uint64_t *)&v160);
  v64 = v160;
  v160 = 0;
  if (v64)
    (*(void (**)(void *))(*(_QWORD *)v64 + 8))(v64);
  v65 = (std::__shared_weak_count *)v139.n128_u64[1];
  if (v139.n128_u64[1])
  {
    v66 = (unint64_t *)(v139.n128_u64[1] + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 32))(*((_QWORD *)v63 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 48))(*((_QWORD *)v63 + 5), 1);
  v68 = *a3;
  v69 = (std::__shared_weak_count_vtbl *)v155;
  v137 = v155;
  if (v155)
  {
    v70 = (std::__shared_weak_count *)operator new();
    v70->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v70->__shared_owners_ = 0;
    v70->__shared_weak_owners_ = 0;
    v70[1].__vftable = v69;
  }
  else
  {
    v70 = 0;
  }
  v138 = v70;
  v155 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v68 + 184))(v68, &v137);
  v71 = v138;
  if (v138)
  {
    p_shared_owners = (unint64_t *)&v138->__shared_owners_;
    do
      v73 = __ldaxr(p_shared_owners);
    while (__stlxr(v73 - 1, p_shared_owners));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v160, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v160, (uint64_t)v173);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v74 + 200))(v74, v173);
  v75 = v174;
  if (v174 == v173)
  {
    v76 = 4;
    v75 = v173;
  }
  else
  {
    if (!v174)
      goto LABEL_92;
    v76 = 5;
  }
  (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_92:
  if (SHIBYTE(v162) < 0)
    operator delete(v160);
  v77 = *a3;
  v171[0] = &off_1EA9A00F8;
  v171[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceAsinh;
  v172 = v171;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v77 + 216))(v77, v171);
  v78 = v172;
  if (v172 == v171)
  {
    v79 = 4;
    v78 = v171;
  }
  else
  {
    if (!v172)
      goto LABEL_99;
    v79 = 5;
  }
  (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_99:
  MIL::Validation::TensorDTypeConstraints::Make(&v160);
  v80 = v160;
  std::string::basic_string[abi:ne180100]<0>(v133, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v133, 0, (uint64_t *)&Scalar);
  v135 = Scalar;
  if (Scalar)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v82 = Scalar;
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v82;
  }
  else
  {
    v81 = 0;
  }
  v136 = v81;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v131, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v80 + 24))(v80, &v135, v131);
  if (v132 < 0)
    operator delete(v131[0]);
  v83 = v136;
  if (v136)
  {
    v84 = (unint64_t *)&v136->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = Scalar;
  Scalar = 0;
  if (v86)
    (*((void (**)(std::__shared_weak_count_vtbl *))v86->~__shared_weak_count + 1))(v86);
  if (v134 < 0)
    operator delete(v133[0]);
  v87 = v160;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v129 = Scalar;
  if (Scalar)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = Scalar;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = v89;
  }
  else
  {
    v88 = 0;
  }
  v130 = v88;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v87 + 24))(v87, &v129, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v90 = v130;
  if (v130)
  {
    v91 = (unint64_t *)&v130->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = Scalar;
  Scalar = 0;
  if (v93)
    (*((void (**)(std::__shared_weak_count_vtbl *))v93->~__shared_weak_count + 1))(v93);
  v94 = *a3;
  v125 = v160;
  if (v160)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = (std::__shared_weak_count_vtbl *)v160;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = v96;
  }
  else
  {
    v95 = 0;
  }
  v126 = v95;
  v160 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v94 + 56))(v94, &v125);
  v97 = v126;
  if (v126)
  {
    v98 = (unint64_t *)&v126->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = v160;
  v160 = 0;
  if (v100)
    (*(void (**)(void *))(*(_QWORD *)v100 + 8))(v100);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v101 = __p;
  std::string::basic_string[abi:ne180100]<0>(v121, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v121, 1, (uint64_t *)&v144);
  v123 = v144;
  if (v144)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = (std::__shared_weak_count_vtbl *)v144;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v124 = v102;
  v144 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v160, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v163, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v164, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v165, "int32");
  std::string::basic_string[abi:ne180100]<0>(v166, "int8");
  std::string::basic_string[abi:ne180100]<0>(v167, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v160, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v101 + 24))(v101, &v123, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v167[i + 2]) < 0)
      operator delete((void *)v167[i]);
  }
  v105 = v124;
  if (v124)
  {
    v106 = (unint64_t *)&v124->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = v144;
  v144 = 0;
  if (v108)
    (*(void (**)(void *))(*(_QWORD *)v108 + 8))(v108);
  if (v122 < 0)
    operator delete(v121[0]);
  v109 = *a3;
  v119 = __p;
  if (__p)
  {
    v110 = (std::__shared_weak_count *)operator new();
    v111 = (std::__shared_weak_count_vtbl *)__p;
    v110->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v110->__shared_owners_ = 0;
    v110->__shared_weak_owners_ = 0;
    v110[1].__vftable = v111;
  }
  else
  {
    v110 = 0;
  }
  v120 = v110;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v109 + 56))(v109, &v119);
  v112 = v120;
  if (v120)
  {
    v113 = (unint64_t *)&v120->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = __p;
  __p = 0;
  if (v115)
    (*(void (**)(void *))(*(_QWORD *)v115 + 8))(v115);
  if (v155)
  {
    v116 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v155);
    MEMORY[0x1E0C023A0](v116, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, 0);
  result = v159;
  if (v159)
  {
    v118 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v159);
    return MEMORY[0x1E0C023A0](v118, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09A004C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void **a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  void *v62;
  uint64_t v63;

  v62 = a52;
  a52 = 0;
  if (v62)
    (*(void (**)(void *))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a55, 0);
  v63 = *v60;
  *v60 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a51, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::Atan::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  char *v42;
  char *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  char **v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _OWORD *v62;
  unsigned __int8 *v63;
  void *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  std::__shared_weak_count_vtbl *v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  void *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count_vtbl *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count_vtbl *v86;
  void *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count_vtbl *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count_vtbl *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count_vtbl *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  void *v100;
  void *v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  uint64_t i;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  std::__shared_weak_count_vtbl *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t result;
  uint64_t v118;
  void *v119;
  std::__shared_weak_count *v120;
  void *v121[2];
  char v122;
  void *v123;
  std::__shared_weak_count *v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  void *v131[2];
  char v132;
  void *v133[2];
  char v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  void *v137;
  std::__shared_weak_count *v138;
  __n128 v139;
  __int128 v140;
  __int128 v141;
  void *v142[2];
  uint64_t v143;
  void *v144;
  void *v145;
  _QWORD *v146;
  __n128 v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  char **v151;
  void *__p;
  void *v153;
  _QWORD *v154;
  void *v155;
  void *v156;
  _QWORD *v157;
  __n128 v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD v163[3];
  uint64_t v164[3];
  uint64_t v165[3];
  uint64_t v166[3];
  _QWORD v167[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v169;
  uint64_t v170;
  _QWORD v171[3];
  _QWORD *v172;
  _BYTE v173[24];
  _BYTE *v174;
  _BYTE v175[24];
  _BYTE *v176;
  _QWORD v177[3];
  _QWORD *v178;
  uint64_t v179;

  v179 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v159 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v169 = (uint64_t)&v8->~__shared_weak_count_0;
  v170 = (uint64_t)&v8->~__shared_weak_count_0;
  v160 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v155 = v10;
  *v10 = v9;
  v156 = v10 + 1;
  v157 = v10 + 1;
  v161 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v155);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v153 = v12 + 1;
  v154 = v12 + 1;
  v162 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v160, 3, &v158);
  MIL::IRParameter::Make(&v158, (uint64_t *)&v144);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v144);
  v13 = v144;
  v144 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v158.n128_u64[1];
  if (v158.n128_u64[1])
  {
    v15 = (unint64_t *)(v158.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  if (Scalar)
  {
    v169 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v151 = 0;
  v17 = operator new();
  *(_QWORD *)v17 = 0;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  v160 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, (void **)v17);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v160, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v151, 1uLL);
  v18 = v151;
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v155 = v20;
  *v20 = v19;
  v156 = v20 + 1;
  v157 = v20 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v155);
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  __p = v22;
  *v22 = v21;
  v153 = v22 + 1;
  v154 = v22 + 1;
  v169 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  v144 = v24;
  *v24 = v23;
  v145 = v24 + 1;
  v146 = v24 + 1;
  v170 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v144);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v147);
  MIL::IRParameter::Make(&v147, &v148);
  v25 = v148;
  v149 = v148;
  if (v148)
  {
    v26 = (_QWORD *)operator new();
    v27 = v148;
    *v26 = &unk_1EA99F888;
    v26[1] = 0;
    v26[2] = 0;
    v26[3] = v27;
  }
  else
  {
    v26 = 0;
  }
  v150 = v26;
  v148 = 0;
  v28 = v18[2];
  v29 = v18[1];
  if (v29 >= v28)
  {
    v31 = (v29 - *v18) >> 4;
    v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v33 = v28 - *v18;
    if (v33 >> 3 > v32)
      v32 = v33 >> 3;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
      v34 = 0xFFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    v163[1] = v18 + 2;
    v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v18 + 2), v34);
    v37 = (uint64_t *)&v35[16 * v31];
    *v37 = v25;
    v37[1] = (uint64_t)v26;
    v149 = 0;
    v150 = 0;
    v39 = *v18;
    v38 = v18[1];
    if (v38 == *v18)
    {
      v42 = v18[1];
      v40 = &v35[16 * v31];
    }
    else
    {
      v40 = &v35[16 * v31];
      do
      {
        v41 = *((_OWORD *)v38 - 1);
        v38 -= 16;
        *((_OWORD *)v40 - 1) = v41;
        v40 -= 16;
        *(_QWORD *)v38 = 0;
        *((_QWORD *)v38 + 1) = 0;
      }
      while (v38 != v39);
      v42 = *v18;
      v38 = v18[1];
    }
    v30 = (char *)(v37 + 2);
    *v18 = v40;
    v160 = v42;
    v161 = (uint64_t)v42;
    v18[1] = (char *)(v37 + 2);
    v162 = (uint64_t)v38;
    v43 = v18[2];
    v18[2] = &v35[16 * v36];
    v163[0] = v43;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v160);
  }
  else
  {
    *(_QWORD *)v29 = v25;
    *((_QWORD *)v29 + 1) = v26;
    v30 = v29 + 16;
    v149 = 0;
    v150 = 0;
  }
  v18[1] = v30;
  v44 = v148;
  v148 = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = (std::__shared_weak_count *)v147.n128_u64[1];
  if (v147.n128_u64[1])
  {
    v46 = (unint64_t *)(v147.n128_u64[1] + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  *(_OWORD *)v142 = *(_OWORD *)a2;
  v143 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v48 = v159;
  *(_QWORD *)&v141 = v159;
  if (v159)
  {
    v49 = (_QWORD *)operator new();
    *v49 = &unk_1EA99F8E8;
    v49[1] = 0;
    v49[2] = 0;
    v49[3] = v48;
  }
  else
  {
    v49 = 0;
  }
  *((_QWORD *)&v141 + 1) = v49;
  v159 = 0;
  *(_QWORD *)&v140 = v151;
  if (v151)
  {
    v50 = (_QWORD *)operator new();
    v51 = v151;
    *v50 = &unk_1EA99F948;
    v50[1] = 0;
    v50[2] = 0;
    v50[3] = v51;
  }
  else
  {
    v50 = 0;
  }
  *((_QWORD *)&v140 + 1) = v50;
  v151 = 0;
  v177[0] = &unk_1EA99FAC8;
  v177[1] = MIL::Validation::ValidateViaTypeInference;
  v178 = v177;
  v176 = 0;
  MIL::IROperator::Make((__int128 *)v142, &v141, &v140, (uint64_t)v177, (uint64_t)v175, a3);
  v52 = v176;
  if (v176 == v175)
  {
    v53 = 4;
    v52 = v175;
  }
  else
  {
    if (!v176)
      goto LABEL_55;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_55:
  v54 = v178;
  if (v178 == v177)
  {
    v55 = 4;
    v54 = v177;
    goto LABEL_59;
  }
  if (v178)
  {
    v55 = 5;
LABEL_59:
    (*(void (**)(void))(*v54 + 8 * v55))();
  }
  v56 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
  if (*((_QWORD *)&v140 + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
  if (*((_QWORD *)&v141 + 1))
  {
    v60 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (SHIBYTE(v143) < 0)
    operator delete(v142[0]);
  v155 = 0;
  v62 = (_OWORD *)operator new();
  *v62 = 0u;
  v62[1] = 0u;
  *((_DWORD *)v62 + 8) = 1065353216;
  v155 = v62;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v139);
  MIL::IRParameter::Make(&v139, (uint64_t *)&v160);
  v63 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v62, "minimum_compute_type", (uint64_t *)&v160);
  v64 = v160;
  v160 = 0;
  if (v64)
    (*(void (**)(void *))(*(_QWORD *)v64 + 8))(v64);
  v65 = (std::__shared_weak_count *)v139.n128_u64[1];
  if (v139.n128_u64[1])
  {
    v66 = (unint64_t *)(v139.n128_u64[1] + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 32))(*((_QWORD *)v63 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 48))(*((_QWORD *)v63 + 5), 1);
  v68 = *a3;
  v69 = (std::__shared_weak_count_vtbl *)v155;
  v137 = v155;
  if (v155)
  {
    v70 = (std::__shared_weak_count *)operator new();
    v70->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v70->__shared_owners_ = 0;
    v70->__shared_weak_owners_ = 0;
    v70[1].__vftable = v69;
  }
  else
  {
    v70 = 0;
  }
  v138 = v70;
  v155 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v68 + 184))(v68, &v137);
  v71 = v138;
  if (v138)
  {
    p_shared_owners = (unint64_t *)&v138->__shared_owners_;
    do
      v73 = __ldaxr(p_shared_owners);
    while (__stlxr(v73 - 1, p_shared_owners));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v160, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v160, (uint64_t)v173);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v74 + 200))(v74, v173);
  v75 = v174;
  if (v174 == v173)
  {
    v76 = 4;
    v75 = v173;
  }
  else
  {
    if (!v174)
      goto LABEL_92;
    v76 = 5;
  }
  (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_92:
  if (SHIBYTE(v162) < 0)
    operator delete(v160);
  v77 = *a3;
  v171[0] = &off_1EA9A00F8;
  v171[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceAtan;
  v172 = v171;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v77 + 216))(v77, v171);
  v78 = v172;
  if (v172 == v171)
  {
    v79 = 4;
    v78 = v171;
  }
  else
  {
    if (!v172)
      goto LABEL_99;
    v79 = 5;
  }
  (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_99:
  MIL::Validation::TensorDTypeConstraints::Make(&v160);
  v80 = v160;
  std::string::basic_string[abi:ne180100]<0>(v133, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v133, 0, (uint64_t *)&Scalar);
  v135 = Scalar;
  if (Scalar)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v82 = Scalar;
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v82;
  }
  else
  {
    v81 = 0;
  }
  v136 = v81;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v131, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v80 + 24))(v80, &v135, v131);
  if (v132 < 0)
    operator delete(v131[0]);
  v83 = v136;
  if (v136)
  {
    v84 = (unint64_t *)&v136->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = Scalar;
  Scalar = 0;
  if (v86)
    (*((void (**)(std::__shared_weak_count_vtbl *))v86->~__shared_weak_count + 1))(v86);
  if (v134 < 0)
    operator delete(v133[0]);
  v87 = v160;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v129 = Scalar;
  if (Scalar)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = Scalar;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = v89;
  }
  else
  {
    v88 = 0;
  }
  v130 = v88;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v87 + 24))(v87, &v129, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v90 = v130;
  if (v130)
  {
    v91 = (unint64_t *)&v130->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = Scalar;
  Scalar = 0;
  if (v93)
    (*((void (**)(std::__shared_weak_count_vtbl *))v93->~__shared_weak_count + 1))(v93);
  v94 = *a3;
  v125 = v160;
  if (v160)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = (std::__shared_weak_count_vtbl *)v160;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = v96;
  }
  else
  {
    v95 = 0;
  }
  v126 = v95;
  v160 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v94 + 56))(v94, &v125);
  v97 = v126;
  if (v126)
  {
    v98 = (unint64_t *)&v126->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = v160;
  v160 = 0;
  if (v100)
    (*(void (**)(void *))(*(_QWORD *)v100 + 8))(v100);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v101 = __p;
  std::string::basic_string[abi:ne180100]<0>(v121, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v121, 1, (uint64_t *)&v144);
  v123 = v144;
  if (v144)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = (std::__shared_weak_count_vtbl *)v144;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v124 = v102;
  v144 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v160, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v163, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v164, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v165, "int32");
  std::string::basic_string[abi:ne180100]<0>(v166, "int8");
  std::string::basic_string[abi:ne180100]<0>(v167, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v160, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v101 + 24))(v101, &v123, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v167[i + 2]) < 0)
      operator delete((void *)v167[i]);
  }
  v105 = v124;
  if (v124)
  {
    v106 = (unint64_t *)&v124->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = v144;
  v144 = 0;
  if (v108)
    (*(void (**)(void *))(*(_QWORD *)v108 + 8))(v108);
  if (v122 < 0)
    operator delete(v121[0]);
  v109 = *a3;
  v119 = __p;
  if (__p)
  {
    v110 = (std::__shared_weak_count *)operator new();
    v111 = (std::__shared_weak_count_vtbl *)__p;
    v110->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v110->__shared_owners_ = 0;
    v110->__shared_weak_owners_ = 0;
    v110[1].__vftable = v111;
  }
  else
  {
    v110 = 0;
  }
  v120 = v110;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v109 + 56))(v109, &v119);
  v112 = v120;
  if (v120)
  {
    v113 = (unint64_t *)&v120->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = __p;
  __p = 0;
  if (v115)
    (*(void (**)(void *))(*(_QWORD *)v115 + 8))(v115);
  if (v155)
  {
    v116 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v155);
    MEMORY[0x1E0C023A0](v116, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, 0);
  result = v159;
  if (v159)
  {
    v118 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v159);
    return MEMORY[0x1E0C023A0](v118, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09A1314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void **a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  void *v62;
  uint64_t v63;

  v62 = a52;
  a52 = 0;
  if (v62)
    (*(void (**)(void *))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a55, 0);
  v63 = *v60;
  *v60 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a51, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::Atanh::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  char *v42;
  char *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  char **v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _OWORD *v62;
  unsigned __int8 *v63;
  void *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  std::__shared_weak_count_vtbl *v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  void *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count_vtbl *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count_vtbl *v86;
  void *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count_vtbl *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count_vtbl *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count_vtbl *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  void *v100;
  void *v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  uint64_t i;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  std::__shared_weak_count_vtbl *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t result;
  uint64_t v118;
  void *v119;
  std::__shared_weak_count *v120;
  void *v121[2];
  char v122;
  void *v123;
  std::__shared_weak_count *v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  void *v131[2];
  char v132;
  void *v133[2];
  char v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  void *v137;
  std::__shared_weak_count *v138;
  __n128 v139;
  __int128 v140;
  __int128 v141;
  void *v142[2];
  uint64_t v143;
  void *v144;
  void *v145;
  _QWORD *v146;
  __n128 v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  char **v151;
  void *__p;
  void *v153;
  _QWORD *v154;
  void *v155;
  void *v156;
  _QWORD *v157;
  __n128 v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD v163[3];
  uint64_t v164[3];
  uint64_t v165[3];
  uint64_t v166[3];
  _QWORD v167[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v169;
  uint64_t v170;
  _QWORD v171[3];
  _QWORD *v172;
  _BYTE v173[24];
  _BYTE *v174;
  _BYTE v175[24];
  _BYTE *v176;
  _QWORD v177[3];
  _QWORD *v178;
  uint64_t v179;

  v179 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v159 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v169 = (uint64_t)&v8->~__shared_weak_count_0;
  v170 = (uint64_t)&v8->~__shared_weak_count_0;
  v160 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v155 = v10;
  *v10 = v9;
  v156 = v10 + 1;
  v157 = v10 + 1;
  v161 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v155);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v153 = v12 + 1;
  v154 = v12 + 1;
  v162 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v160, 3, &v158);
  MIL::IRParameter::Make(&v158, (uint64_t *)&v144);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v144);
  v13 = v144;
  v144 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v158.n128_u64[1];
  if (v158.n128_u64[1])
  {
    v15 = (unint64_t *)(v158.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  if (Scalar)
  {
    v169 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v151 = 0;
  v17 = operator new();
  *(_QWORD *)v17 = 0;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  v160 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, (void **)v17);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v160, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v151, 1uLL);
  v18 = v151;
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v155 = v20;
  *v20 = v19;
  v156 = v20 + 1;
  v157 = v20 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v155);
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  __p = v22;
  *v22 = v21;
  v153 = v22 + 1;
  v154 = v22 + 1;
  v169 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  v144 = v24;
  *v24 = v23;
  v145 = v24 + 1;
  v146 = v24 + 1;
  v170 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v144);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v147);
  MIL::IRParameter::Make(&v147, &v148);
  v25 = v148;
  v149 = v148;
  if (v148)
  {
    v26 = (_QWORD *)operator new();
    v27 = v148;
    *v26 = &unk_1EA99F888;
    v26[1] = 0;
    v26[2] = 0;
    v26[3] = v27;
  }
  else
  {
    v26 = 0;
  }
  v150 = v26;
  v148 = 0;
  v28 = v18[2];
  v29 = v18[1];
  if (v29 >= v28)
  {
    v31 = (v29 - *v18) >> 4;
    v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v33 = v28 - *v18;
    if (v33 >> 3 > v32)
      v32 = v33 >> 3;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
      v34 = 0xFFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    v163[1] = v18 + 2;
    v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v18 + 2), v34);
    v37 = (uint64_t *)&v35[16 * v31];
    *v37 = v25;
    v37[1] = (uint64_t)v26;
    v149 = 0;
    v150 = 0;
    v39 = *v18;
    v38 = v18[1];
    if (v38 == *v18)
    {
      v42 = v18[1];
      v40 = &v35[16 * v31];
    }
    else
    {
      v40 = &v35[16 * v31];
      do
      {
        v41 = *((_OWORD *)v38 - 1);
        v38 -= 16;
        *((_OWORD *)v40 - 1) = v41;
        v40 -= 16;
        *(_QWORD *)v38 = 0;
        *((_QWORD *)v38 + 1) = 0;
      }
      while (v38 != v39);
      v42 = *v18;
      v38 = v18[1];
    }
    v30 = (char *)(v37 + 2);
    *v18 = v40;
    v160 = v42;
    v161 = (uint64_t)v42;
    v18[1] = (char *)(v37 + 2);
    v162 = (uint64_t)v38;
    v43 = v18[2];
    v18[2] = &v35[16 * v36];
    v163[0] = v43;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v160);
  }
  else
  {
    *(_QWORD *)v29 = v25;
    *((_QWORD *)v29 + 1) = v26;
    v30 = v29 + 16;
    v149 = 0;
    v150 = 0;
  }
  v18[1] = v30;
  v44 = v148;
  v148 = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = (std::__shared_weak_count *)v147.n128_u64[1];
  if (v147.n128_u64[1])
  {
    v46 = (unint64_t *)(v147.n128_u64[1] + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  *(_OWORD *)v142 = *(_OWORD *)a2;
  v143 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v48 = v159;
  *(_QWORD *)&v141 = v159;
  if (v159)
  {
    v49 = (_QWORD *)operator new();
    *v49 = &unk_1EA99F8E8;
    v49[1] = 0;
    v49[2] = 0;
    v49[3] = v48;
  }
  else
  {
    v49 = 0;
  }
  *((_QWORD *)&v141 + 1) = v49;
  v159 = 0;
  *(_QWORD *)&v140 = v151;
  if (v151)
  {
    v50 = (_QWORD *)operator new();
    v51 = v151;
    *v50 = &unk_1EA99F948;
    v50[1] = 0;
    v50[2] = 0;
    v50[3] = v51;
  }
  else
  {
    v50 = 0;
  }
  *((_QWORD *)&v140 + 1) = v50;
  v151 = 0;
  v177[0] = &unk_1EA99FAC8;
  v177[1] = MIL::Validation::ValidateViaTypeInference;
  v178 = v177;
  v176 = 0;
  MIL::IROperator::Make((__int128 *)v142, &v141, &v140, (uint64_t)v177, (uint64_t)v175, a3);
  v52 = v176;
  if (v176 == v175)
  {
    v53 = 4;
    v52 = v175;
  }
  else
  {
    if (!v176)
      goto LABEL_55;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_55:
  v54 = v178;
  if (v178 == v177)
  {
    v55 = 4;
    v54 = v177;
    goto LABEL_59;
  }
  if (v178)
  {
    v55 = 5;
LABEL_59:
    (*(void (**)(void))(*v54 + 8 * v55))();
  }
  v56 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
  if (*((_QWORD *)&v140 + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
  if (*((_QWORD *)&v141 + 1))
  {
    v60 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (SHIBYTE(v143) < 0)
    operator delete(v142[0]);
  v155 = 0;
  v62 = (_OWORD *)operator new();
  *v62 = 0u;
  v62[1] = 0u;
  *((_DWORD *)v62 + 8) = 1065353216;
  v155 = v62;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v139);
  MIL::IRParameter::Make(&v139, (uint64_t *)&v160);
  v63 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v62, "minimum_compute_type", (uint64_t *)&v160);
  v64 = v160;
  v160 = 0;
  if (v64)
    (*(void (**)(void *))(*(_QWORD *)v64 + 8))(v64);
  v65 = (std::__shared_weak_count *)v139.n128_u64[1];
  if (v139.n128_u64[1])
  {
    v66 = (unint64_t *)(v139.n128_u64[1] + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 32))(*((_QWORD *)v63 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 48))(*((_QWORD *)v63 + 5), 1);
  v68 = *a3;
  v69 = (std::__shared_weak_count_vtbl *)v155;
  v137 = v155;
  if (v155)
  {
    v70 = (std::__shared_weak_count *)operator new();
    v70->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v70->__shared_owners_ = 0;
    v70->__shared_weak_owners_ = 0;
    v70[1].__vftable = v69;
  }
  else
  {
    v70 = 0;
  }
  v138 = v70;
  v155 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v68 + 184))(v68, &v137);
  v71 = v138;
  if (v138)
  {
    p_shared_owners = (unint64_t *)&v138->__shared_owners_;
    do
      v73 = __ldaxr(p_shared_owners);
    while (__stlxr(v73 - 1, p_shared_owners));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v160, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v160, (uint64_t)v173);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v74 + 200))(v74, v173);
  v75 = v174;
  if (v174 == v173)
  {
    v76 = 4;
    v75 = v173;
  }
  else
  {
    if (!v174)
      goto LABEL_92;
    v76 = 5;
  }
  (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_92:
  if (SHIBYTE(v162) < 0)
    operator delete(v160);
  v77 = *a3;
  v171[0] = &off_1EA9A00F8;
  v171[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceAtanh;
  v172 = v171;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v77 + 216))(v77, v171);
  v78 = v172;
  if (v172 == v171)
  {
    v79 = 4;
    v78 = v171;
  }
  else
  {
    if (!v172)
      goto LABEL_99;
    v79 = 5;
  }
  (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_99:
  MIL::Validation::TensorDTypeConstraints::Make(&v160);
  v80 = v160;
  std::string::basic_string[abi:ne180100]<0>(v133, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v133, 0, (uint64_t *)&Scalar);
  v135 = Scalar;
  if (Scalar)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v82 = Scalar;
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v82;
  }
  else
  {
    v81 = 0;
  }
  v136 = v81;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v131, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v80 + 24))(v80, &v135, v131);
  if (v132 < 0)
    operator delete(v131[0]);
  v83 = v136;
  if (v136)
  {
    v84 = (unint64_t *)&v136->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = Scalar;
  Scalar = 0;
  if (v86)
    (*((void (**)(std::__shared_weak_count_vtbl *))v86->~__shared_weak_count + 1))(v86);
  if (v134 < 0)
    operator delete(v133[0]);
  v87 = v160;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v129 = Scalar;
  if (Scalar)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = Scalar;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = v89;
  }
  else
  {
    v88 = 0;
  }
  v130 = v88;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v87 + 24))(v87, &v129, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v90 = v130;
  if (v130)
  {
    v91 = (unint64_t *)&v130->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = Scalar;
  Scalar = 0;
  if (v93)
    (*((void (**)(std::__shared_weak_count_vtbl *))v93->~__shared_weak_count + 1))(v93);
  v94 = *a3;
  v125 = v160;
  if (v160)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = (std::__shared_weak_count_vtbl *)v160;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = v96;
  }
  else
  {
    v95 = 0;
  }
  v126 = v95;
  v160 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v94 + 56))(v94, &v125);
  v97 = v126;
  if (v126)
  {
    v98 = (unint64_t *)&v126->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = v160;
  v160 = 0;
  if (v100)
    (*(void (**)(void *))(*(_QWORD *)v100 + 8))(v100);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v101 = __p;
  std::string::basic_string[abi:ne180100]<0>(v121, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v121, 1, (uint64_t *)&v144);
  v123 = v144;
  if (v144)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = (std::__shared_weak_count_vtbl *)v144;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v124 = v102;
  v144 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v160, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v163, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v164, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v165, "int32");
  std::string::basic_string[abi:ne180100]<0>(v166, "int8");
  std::string::basic_string[abi:ne180100]<0>(v167, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v160, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v101 + 24))(v101, &v123, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v167[i + 2]) < 0)
      operator delete((void *)v167[i]);
  }
  v105 = v124;
  if (v124)
  {
    v106 = (unint64_t *)&v124->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = v144;
  v144 = 0;
  if (v108)
    (*(void (**)(void *))(*(_QWORD *)v108 + 8))(v108);
  if (v122 < 0)
    operator delete(v121[0]);
  v109 = *a3;
  v119 = __p;
  if (__p)
  {
    v110 = (std::__shared_weak_count *)operator new();
    v111 = (std::__shared_weak_count_vtbl *)__p;
    v110->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v110->__shared_owners_ = 0;
    v110->__shared_weak_owners_ = 0;
    v110[1].__vftable = v111;
  }
  else
  {
    v110 = 0;
  }
  v120 = v110;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v109 + 56))(v109, &v119);
  v112 = v120;
  if (v120)
  {
    v113 = (unint64_t *)&v120->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = __p;
  __p = 0;
  if (v115)
    (*(void (**)(void *))(*(_QWORD *)v115 + 8))(v115);
  if (v155)
  {
    v116 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v155);
    MEMORY[0x1E0C023A0](v116, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, 0);
  result = v159;
  if (v159)
  {
    v118 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v159);
    return MEMORY[0x1E0C023A0](v118, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09A25DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void **a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  void *v62;
  uint64_t v63;

  v62 = a52;
  a52 = 0;
  if (v62)
    (*(void (**)(void *))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a55, 0);
  v63 = *v60;
  *v60 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a51, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::Ceil::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  char *v42;
  char *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  char **v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _OWORD *v62;
  unsigned __int8 *v63;
  void *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  std::__shared_weak_count_vtbl *v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  void *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count_vtbl *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count_vtbl *v86;
  void *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count_vtbl *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count_vtbl *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count_vtbl *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  void *v100;
  void *v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  uint64_t i;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  std::__shared_weak_count_vtbl *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t result;
  uint64_t v118;
  void *v119;
  std::__shared_weak_count *v120;
  void *v121[2];
  char v122;
  void *v123;
  std::__shared_weak_count *v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  void *v131[2];
  char v132;
  void *v133[2];
  char v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  void *v137;
  std::__shared_weak_count *v138;
  __n128 v139;
  __int128 v140;
  __int128 v141;
  void *v142[2];
  uint64_t v143;
  void *v144;
  void *v145;
  _QWORD *v146;
  __n128 v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  char **v151;
  void *__p;
  void *v153;
  _QWORD *v154;
  void *v155;
  void *v156;
  _QWORD *v157;
  __n128 v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD v163[3];
  uint64_t v164[3];
  uint64_t v165[3];
  uint64_t v166[3];
  _QWORD v167[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v169;
  uint64_t v170;
  _QWORD v171[3];
  _QWORD *v172;
  _BYTE v173[24];
  _BYTE *v174;
  _BYTE v175[24];
  _BYTE *v176;
  _QWORD v177[3];
  _QWORD *v178;
  uint64_t v179;

  v179 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v159 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v169 = (uint64_t)&v8->~__shared_weak_count_0;
  v170 = (uint64_t)&v8->~__shared_weak_count_0;
  v160 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v155 = v10;
  *v10 = v9;
  v156 = v10 + 1;
  v157 = v10 + 1;
  v161 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v155);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v153 = v12 + 1;
  v154 = v12 + 1;
  v162 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v160, 3, &v158);
  MIL::IRParameter::Make(&v158, (uint64_t *)&v144);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v144);
  v13 = v144;
  v144 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v158.n128_u64[1];
  if (v158.n128_u64[1])
  {
    v15 = (unint64_t *)(v158.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  if (Scalar)
  {
    v169 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v151 = 0;
  v17 = operator new();
  *(_QWORD *)v17 = 0;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  v160 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, (void **)v17);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v160, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v151, 1uLL);
  v18 = v151;
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v155 = v20;
  *v20 = v19;
  v156 = v20 + 1;
  v157 = v20 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v155);
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  __p = v22;
  *v22 = v21;
  v153 = v22 + 1;
  v154 = v22 + 1;
  v169 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  v144 = v24;
  *v24 = v23;
  v145 = v24 + 1;
  v146 = v24 + 1;
  v170 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v144);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v147);
  MIL::IRParameter::Make(&v147, &v148);
  v25 = v148;
  v149 = v148;
  if (v148)
  {
    v26 = (_QWORD *)operator new();
    v27 = v148;
    *v26 = &unk_1EA99F888;
    v26[1] = 0;
    v26[2] = 0;
    v26[3] = v27;
  }
  else
  {
    v26 = 0;
  }
  v150 = v26;
  v148 = 0;
  v28 = v18[2];
  v29 = v18[1];
  if (v29 >= v28)
  {
    v31 = (v29 - *v18) >> 4;
    v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v33 = v28 - *v18;
    if (v33 >> 3 > v32)
      v32 = v33 >> 3;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
      v34 = 0xFFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    v163[1] = v18 + 2;
    v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v18 + 2), v34);
    v37 = (uint64_t *)&v35[16 * v31];
    *v37 = v25;
    v37[1] = (uint64_t)v26;
    v149 = 0;
    v150 = 0;
    v39 = *v18;
    v38 = v18[1];
    if (v38 == *v18)
    {
      v42 = v18[1];
      v40 = &v35[16 * v31];
    }
    else
    {
      v40 = &v35[16 * v31];
      do
      {
        v41 = *((_OWORD *)v38 - 1);
        v38 -= 16;
        *((_OWORD *)v40 - 1) = v41;
        v40 -= 16;
        *(_QWORD *)v38 = 0;
        *((_QWORD *)v38 + 1) = 0;
      }
      while (v38 != v39);
      v42 = *v18;
      v38 = v18[1];
    }
    v30 = (char *)(v37 + 2);
    *v18 = v40;
    v160 = v42;
    v161 = (uint64_t)v42;
    v18[1] = (char *)(v37 + 2);
    v162 = (uint64_t)v38;
    v43 = v18[2];
    v18[2] = &v35[16 * v36];
    v163[0] = v43;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v160);
  }
  else
  {
    *(_QWORD *)v29 = v25;
    *((_QWORD *)v29 + 1) = v26;
    v30 = v29 + 16;
    v149 = 0;
    v150 = 0;
  }
  v18[1] = v30;
  v44 = v148;
  v148 = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = (std::__shared_weak_count *)v147.n128_u64[1];
  if (v147.n128_u64[1])
  {
    v46 = (unint64_t *)(v147.n128_u64[1] + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  *(_OWORD *)v142 = *(_OWORD *)a2;
  v143 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v48 = v159;
  *(_QWORD *)&v141 = v159;
  if (v159)
  {
    v49 = (_QWORD *)operator new();
    *v49 = &unk_1EA99F8E8;
    v49[1] = 0;
    v49[2] = 0;
    v49[3] = v48;
  }
  else
  {
    v49 = 0;
  }
  *((_QWORD *)&v141 + 1) = v49;
  v159 = 0;
  *(_QWORD *)&v140 = v151;
  if (v151)
  {
    v50 = (_QWORD *)operator new();
    v51 = v151;
    *v50 = &unk_1EA99F948;
    v50[1] = 0;
    v50[2] = 0;
    v50[3] = v51;
  }
  else
  {
    v50 = 0;
  }
  *((_QWORD *)&v140 + 1) = v50;
  v151 = 0;
  v177[0] = &unk_1EA99FAC8;
  v177[1] = MIL::Validation::ValidateViaTypeInference;
  v178 = v177;
  v176 = 0;
  MIL::IROperator::Make((__int128 *)v142, &v141, &v140, (uint64_t)v177, (uint64_t)v175, a3);
  v52 = v176;
  if (v176 == v175)
  {
    v53 = 4;
    v52 = v175;
  }
  else
  {
    if (!v176)
      goto LABEL_55;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_55:
  v54 = v178;
  if (v178 == v177)
  {
    v55 = 4;
    v54 = v177;
    goto LABEL_59;
  }
  if (v178)
  {
    v55 = 5;
LABEL_59:
    (*(void (**)(void))(*v54 + 8 * v55))();
  }
  v56 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
  if (*((_QWORD *)&v140 + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
  if (*((_QWORD *)&v141 + 1))
  {
    v60 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (SHIBYTE(v143) < 0)
    operator delete(v142[0]);
  v155 = 0;
  v62 = (_OWORD *)operator new();
  *v62 = 0u;
  v62[1] = 0u;
  *((_DWORD *)v62 + 8) = 1065353216;
  v155 = v62;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v139);
  MIL::IRParameter::Make(&v139, (uint64_t *)&v160);
  v63 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v62, "minimum_compute_type", (uint64_t *)&v160);
  v64 = v160;
  v160 = 0;
  if (v64)
    (*(void (**)(void *))(*(_QWORD *)v64 + 8))(v64);
  v65 = (std::__shared_weak_count *)v139.n128_u64[1];
  if (v139.n128_u64[1])
  {
    v66 = (unint64_t *)(v139.n128_u64[1] + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 32))(*((_QWORD *)v63 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 48))(*((_QWORD *)v63 + 5), 1);
  v68 = *a3;
  v69 = (std::__shared_weak_count_vtbl *)v155;
  v137 = v155;
  if (v155)
  {
    v70 = (std::__shared_weak_count *)operator new();
    v70->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v70->__shared_owners_ = 0;
    v70->__shared_weak_owners_ = 0;
    v70[1].__vftable = v69;
  }
  else
  {
    v70 = 0;
  }
  v138 = v70;
  v155 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v68 + 184))(v68, &v137);
  v71 = v138;
  if (v138)
  {
    p_shared_owners = (unint64_t *)&v138->__shared_owners_;
    do
      v73 = __ldaxr(p_shared_owners);
    while (__stlxr(v73 - 1, p_shared_owners));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v160, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v160, (uint64_t)v173);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v74 + 200))(v74, v173);
  v75 = v174;
  if (v174 == v173)
  {
    v76 = 4;
    v75 = v173;
  }
  else
  {
    if (!v174)
      goto LABEL_92;
    v76 = 5;
  }
  (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_92:
  if (SHIBYTE(v162) < 0)
    operator delete(v160);
  v77 = *a3;
  v171[0] = &off_1EA9A00F8;
  v171[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceCeil;
  v172 = v171;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v77 + 216))(v77, v171);
  v78 = v172;
  if (v172 == v171)
  {
    v79 = 4;
    v78 = v171;
  }
  else
  {
    if (!v172)
      goto LABEL_99;
    v79 = 5;
  }
  (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_99:
  MIL::Validation::TensorDTypeConstraints::Make(&v160);
  v80 = v160;
  std::string::basic_string[abi:ne180100]<0>(v133, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v133, 0, (uint64_t *)&Scalar);
  v135 = Scalar;
  if (Scalar)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v82 = Scalar;
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v82;
  }
  else
  {
    v81 = 0;
  }
  v136 = v81;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v131, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v80 + 24))(v80, &v135, v131);
  if (v132 < 0)
    operator delete(v131[0]);
  v83 = v136;
  if (v136)
  {
    v84 = (unint64_t *)&v136->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = Scalar;
  Scalar = 0;
  if (v86)
    (*((void (**)(std::__shared_weak_count_vtbl *))v86->~__shared_weak_count + 1))(v86);
  if (v134 < 0)
    operator delete(v133[0]);
  v87 = v160;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v129 = Scalar;
  if (Scalar)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = Scalar;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = v89;
  }
  else
  {
    v88 = 0;
  }
  v130 = v88;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v87 + 24))(v87, &v129, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v90 = v130;
  if (v130)
  {
    v91 = (unint64_t *)&v130->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = Scalar;
  Scalar = 0;
  if (v93)
    (*((void (**)(std::__shared_weak_count_vtbl *))v93->~__shared_weak_count + 1))(v93);
  v94 = *a3;
  v125 = v160;
  if (v160)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = (std::__shared_weak_count_vtbl *)v160;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = v96;
  }
  else
  {
    v95 = 0;
  }
  v126 = v95;
  v160 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v94 + 56))(v94, &v125);
  v97 = v126;
  if (v126)
  {
    v98 = (unint64_t *)&v126->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = v160;
  v160 = 0;
  if (v100)
    (*(void (**)(void *))(*(_QWORD *)v100 + 8))(v100);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v101 = __p;
  std::string::basic_string[abi:ne180100]<0>(v121, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v121, 1, (uint64_t *)&v144);
  v123 = v144;
  if (v144)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = (std::__shared_weak_count_vtbl *)v144;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v124 = v102;
  v144 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v160, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v163, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v164, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v165, "int32");
  std::string::basic_string[abi:ne180100]<0>(v166, "int8");
  std::string::basic_string[abi:ne180100]<0>(v167, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v160, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v101 + 24))(v101, &v123, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v167[i + 2]) < 0)
      operator delete((void *)v167[i]);
  }
  v105 = v124;
  if (v124)
  {
    v106 = (unint64_t *)&v124->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = v144;
  v144 = 0;
  if (v108)
    (*(void (**)(void *))(*(_QWORD *)v108 + 8))(v108);
  if (v122 < 0)
    operator delete(v121[0]);
  v109 = *a3;
  v119 = __p;
  if (__p)
  {
    v110 = (std::__shared_weak_count *)operator new();
    v111 = (std::__shared_weak_count_vtbl *)__p;
    v110->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v110->__shared_owners_ = 0;
    v110->__shared_weak_owners_ = 0;
    v110[1].__vftable = v111;
  }
  else
  {
    v110 = 0;
  }
  v120 = v110;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v109 + 56))(v109, &v119);
  v112 = v120;
  if (v120)
  {
    v113 = (unint64_t *)&v120->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = __p;
  __p = 0;
  if (v115)
    (*(void (**)(void *))(*(_QWORD *)v115 + 8))(v115);
  if (v155)
  {
    v116 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v155);
    MEMORY[0x1E0C023A0](v116, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, 0);
  result = v159;
  if (v159)
  {
    v118 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v159);
    return MEMORY[0x1E0C023A0](v118, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09A38A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void **a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  void *v62;
  uint64_t v63;

  v62 = a52;
  a52 = 0;
  if (v62)
    (*(void (**)(void *))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a55, 0);
  v63 = *v60;
  *v60 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a51, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::Clip::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count_vtbl *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count_vtbl *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  char **v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t *v47;
  char *v48;
  char *v49;
  char *v50;
  __int128 v51;
  char *v52;
  char *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  char **v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  _OWORD *v72;
  unsigned __int8 *v73;
  void *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  std::__shared_weak_count_vtbl *v79;
  std::__shared_weak_count *v80;
  std::__shared_weak_count *v81;
  unint64_t *p_shared_owners;
  unint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  void *v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count_vtbl *v96;
  void *v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count_vtbl *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count_vtbl *v103;
  void *v104;
  std::__shared_weak_count *v105;
  std::__shared_weak_count_vtbl *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count_vtbl *v110;
  void *v111;
  std::__shared_weak_count *v112;
  std::__shared_weak_count_vtbl *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count_vtbl *v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  std::__shared_weak_count_vtbl *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  void *v124;
  void *v125;
  std::__shared_weak_count *v126;
  std::__shared_weak_count_vtbl *v127;
  uint64_t i;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  void *v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t result;
  uint64_t v142;
  void *v143;
  std::__shared_weak_count *v144;
  void *v145[2];
  char v146;
  void *v147;
  std::__shared_weak_count *v148;
  void *v149;
  std::__shared_weak_count *v150;
  void *v151[2];
  char v152;
  std::__shared_weak_count_vtbl *v153;
  std::__shared_weak_count *v154;
  void *v155[2];
  char v156;
  void *v157[2];
  char v158;
  std::__shared_weak_count_vtbl *v159;
  std::__shared_weak_count *v160;
  void *v161[2];
  char v162;
  void *v163[2];
  char v164;
  std::__shared_weak_count_vtbl *v165;
  std::__shared_weak_count *v166;
  void *v167[2];
  char v168;
  void *v169[2];
  char v170;
  std::__shared_weak_count_vtbl *v171;
  std::__shared_weak_count *v172;
  void *v173;
  std::__shared_weak_count *v174;
  __n128 v175;
  __int128 v176;
  __int128 v177;
  void *v178[2];
  uint64_t v179;
  void *v180;
  void *v181;
  _QWORD *v182;
  __n128 v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  char **v187;
  __n128 v188;
  __n128 v189;
  void *__p;
  void *v191;
  _QWORD *v192;
  void *v193;
  void *v194;
  _QWORD *v195;
  __n128 v196;
  _QWORD *v197;
  void *Scalar;
  uint64_t v199;
  uint64_t v200;
  _QWORD v201[3];
  uint64_t v202[3];
  uint64_t v203[3];
  uint64_t v204[3];
  _QWORD v205[3];
  std::__shared_weak_count_vtbl *v206;
  uint64_t v207;
  uint64_t v208;
  _QWORD v209[3];
  _QWORD *v210;
  _BYTE v211[24];
  _BYTE *v212;
  _BYTE v213[24];
  _BYTE *v214;
  _QWORD v215[3];
  _QWORD *v216;
  uint64_t v217;

  v217 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v197 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v206 = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v207 = (uint64_t)&v8->~__shared_weak_count_0;
  v208 = (uint64_t)&v8->~__shared_weak_count_0;
  Scalar = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v206);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v193 = v10;
  *v10 = v9;
  v195 = v10 + 1;
  v194 = v10 + 1;
  v199 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v193);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v192 = v12 + 1;
  v191 = v12 + 1;
  v200 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v196);
  MIL::IRParameter::Make(&v196, (uint64_t *)&v180);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v180);
  v13 = v180;
  v180 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v196.n128_u64[1];
  if (v196.n128_u64[1])
  {
    v15 = (unint64_t *)(v196.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v191 = __p;
    operator delete(__p);
  }
  if (v193)
  {
    v194 = v193;
    operator delete(v193);
  }
  if (v206)
  {
    v207 = (uint64_t)v206;
    operator delete(v206);
  }
  v17 = v197;
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar(a1, 7);
  v199 = MIL::IRTensorValueType::MakeScalar(a1, 4);
  v200 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v189);
  MIL::IRParameter::Make(&v189, (uint64_t *)&v206);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v17, "alpha", (uint64_t *)&v206);
  v18 = v206;
  v206 = 0;
  if (v18)
    (*((void (**)(std::__shared_weak_count_vtbl *))v18->~__shared_weak_count + 1))(v18);
  v19 = (std::__shared_weak_count *)v189.n128_u64[1];
  if (v189.n128_u64[1])
  {
    v20 = (unint64_t *)(v189.n128_u64[1] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v197;
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar(a1, 7);
  v199 = MIL::IRTensorValueType::MakeScalar(a1, 4);
  v200 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v188);
  MIL::IRParameter::Make(&v188, (uint64_t *)&v206);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v22, "beta", (uint64_t *)&v206);
  v23 = v206;
  v206 = 0;
  if (v23)
    (*((void (**)(std::__shared_weak_count_vtbl *))v23->~__shared_weak_count + 1))(v23);
  v24 = (std::__shared_weak_count *)v188.n128_u64[1];
  if (v188.n128_u64[1])
  {
    v25 = (unint64_t *)(v188.n128_u64[1] + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v187 = 0;
  v27 = operator new();
  *(_QWORD *)v27 = 0;
  *(_QWORD *)(v27 + 8) = 0;
  *(_QWORD *)(v27 + 16) = 0;
  Scalar = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v187, (void **)v27);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&Scalar, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v187, 1uLL);
  v28 = v187;
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = operator new(8uLL);
  v193 = v30;
  *v30 = v29;
  v195 = v30 + 1;
  v194 = v30 + 1;
  v206 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v193);
  v31 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v32 = operator new(8uLL);
  __p = v32;
  *v32 = v31;
  v192 = v32 + 1;
  v191 = v32 + 1;
  v207 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v33 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v34 = operator new(8uLL);
  v180 = v34;
  *v34 = v33;
  v181 = v34 + 1;
  v182 = v34 + 1;
  v208 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v180);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v206, 3, &v183);
  MIL::IRParameter::Make(&v183, &v184);
  v35 = v184;
  v185 = v184;
  if (v184)
  {
    v36 = (_QWORD *)operator new();
    v37 = v184;
    *v36 = &unk_1EA99F888;
    v36[1] = 0;
    v36[2] = 0;
    v36[3] = v37;
  }
  else
  {
    v36 = 0;
  }
  v186 = v36;
  v184 = 0;
  v38 = v28[2];
  v39 = v28[1];
  if (v39 >= v38)
  {
    v41 = (v39 - *v28) >> 4;
    v42 = v41 + 1;
    if ((unint64_t)(v41 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v43 = v38 - *v28;
    if (v43 >> 3 > v42)
      v42 = v43 >> 3;
    if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF0)
      v44 = 0xFFFFFFFFFFFFFFFLL;
    else
      v44 = v42;
    v201[1] = v28 + 2;
    v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v28 + 2), v44);
    v47 = (uint64_t *)&v45[16 * v41];
    *v47 = v35;
    v47[1] = (uint64_t)v36;
    v185 = 0;
    v186 = 0;
    v49 = *v28;
    v48 = v28[1];
    if (v48 == *v28)
    {
      v52 = v28[1];
      v50 = &v45[16 * v41];
    }
    else
    {
      v50 = &v45[16 * v41];
      do
      {
        v51 = *((_OWORD *)v48 - 1);
        v48 -= 16;
        *((_OWORD *)v50 - 1) = v51;
        v50 -= 16;
        *(_QWORD *)v48 = 0;
        *((_QWORD *)v48 + 1) = 0;
      }
      while (v48 != v49);
      v52 = *v28;
      v48 = v28[1];
    }
    v40 = (char *)(v47 + 2);
    *v28 = v50;
    v199 = (uint64_t)v52;
    v28[1] = (char *)(v47 + 2);
    v200 = (uint64_t)v48;
    v53 = v28[2];
    v28[2] = &v45[16 * v46];
    v201[0] = v53;
    Scalar = v52;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v39 = v35;
    *((_QWORD *)v39 + 1) = v36;
    v40 = v39 + 16;
    v185 = 0;
    v186 = 0;
  }
  v28[1] = v40;
  v54 = v184;
  v184 = 0;
  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  v55 = (std::__shared_weak_count *)v183.n128_u64[1];
  if (v183.n128_u64[1])
  {
    v56 = (unint64_t *)(v183.n128_u64[1] + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (v180)
  {
    v181 = v180;
    operator delete(v180);
  }
  if (__p)
  {
    v191 = __p;
    operator delete(__p);
  }
  if (v193)
  {
    v194 = v193;
    operator delete(v193);
  }
  *(_OWORD *)v178 = *(_OWORD *)a2;
  v179 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v58 = (uint64_t)v197;
  *(_QWORD *)&v177 = v197;
  if (v197)
  {
    v59 = (_QWORD *)operator new();
    *v59 = &unk_1EA99F8E8;
    v59[1] = 0;
    v59[2] = 0;
    v59[3] = v58;
  }
  else
  {
    v59 = 0;
  }
  *((_QWORD *)&v177 + 1) = v59;
  v197 = 0;
  *(_QWORD *)&v176 = v187;
  if (v187)
  {
    v60 = (_QWORD *)operator new();
    v61 = v187;
    *v60 = &unk_1EA99F948;
    v60[1] = 0;
    v60[2] = 0;
    v60[3] = v61;
  }
  else
  {
    v60 = 0;
  }
  *((_QWORD *)&v176 + 1) = v60;
  v187 = 0;
  v215[0] = &unk_1EA99FAC8;
  v215[1] = MIL::Operators::Common::ios18::CustomValidators::ValidateClip;
  v216 = v215;
  v214 = 0;
  MIL::IROperator::Make((__int128 *)v178, &v177, &v176, (uint64_t)v215, (uint64_t)v213, a3);
  v62 = v214;
  if (v214 == v213)
  {
    v63 = 4;
    v62 = v213;
  }
  else
  {
    if (!v214)
      goto LABEL_69;
    v63 = 5;
  }
  (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_69:
  v64 = v216;
  if (v216 == v215)
  {
    v65 = 4;
    v64 = v215;
    goto LABEL_73;
  }
  if (v216)
  {
    v65 = 5;
LABEL_73:
    (*(void (**)(void))(*v64 + 8 * v65))();
  }
  v66 = (std::__shared_weak_count *)*((_QWORD *)&v176 + 1);
  if (*((_QWORD *)&v176 + 1))
  {
    v67 = (unint64_t *)(*((_QWORD *)&v176 + 1) + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v69 = (std::__shared_weak_count *)*((_QWORD *)&v177 + 1);
  if (*((_QWORD *)&v177 + 1))
  {
    v70 = (unint64_t *)(*((_QWORD *)&v177 + 1) + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  if (SHIBYTE(v179) < 0)
    operator delete(v178[0]);
  v193 = 0;
  v72 = (_OWORD *)operator new();
  *v72 = 0u;
  v72[1] = 0u;
  *((_DWORD *)v72 + 8) = 1065353216;
  v193 = v72;
  v206 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v206, 1, &v175);
  MIL::IRParameter::Make(&v175, (uint64_t *)&Scalar);
  v73 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v72, "minimum_compute_type", (uint64_t *)&Scalar);
  v74 = Scalar;
  Scalar = 0;
  if (v74)
    (*(void (**)(void *))(*(_QWORD *)v74 + 8))(v74);
  v75 = (std::__shared_weak_count *)v175.n128_u64[1];
  if (v175.n128_u64[1])
  {
    v76 = (unint64_t *)(v175.n128_u64[1] + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v73 + 5) + 32))(*((_QWORD *)v73 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v73 + 5) + 48))(*((_QWORD *)v73 + 5), 1);
  v78 = *a3;
  v79 = (std::__shared_weak_count_vtbl *)v193;
  v173 = v193;
  if (v193)
  {
    v80 = (std::__shared_weak_count *)operator new();
    v80->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v80->__shared_owners_ = 0;
    v80->__shared_weak_owners_ = 0;
    v80[1].__vftable = v79;
  }
  else
  {
    v80 = 0;
  }
  v174 = v80;
  v193 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v78 + 184))(v78, &v173);
  v81 = v174;
  if (v174)
  {
    p_shared_owners = (unint64_t *)&v174->__shared_owners_;
    do
      v83 = __ldaxr(p_shared_owners);
    while (__stlxr(v83 - 1, p_shared_owners));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&Scalar, (uint64_t)v211);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v84 + 200))(v84, v211);
  v85 = v212;
  if (v212 == v211)
  {
    v86 = 4;
    v85 = v211;
  }
  else
  {
    if (!v212)
      goto LABEL_106;
    v86 = 5;
  }
  (*(void (**)(void))(*v85 + 8 * v86))();
LABEL_106:
  if (SHIBYTE(v200) < 0)
    operator delete(Scalar);
  v87 = *a3;
  v209[0] = &off_1EA9A00F8;
  v209[1] = MIL::Operators::Common::ios17::CustomValueInference::ValueInferenceClip;
  v210 = v209;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v87 + 216))(v87, v209);
  v88 = v210;
  if (v210 == v209)
  {
    v89 = 4;
    v88 = v209;
  }
  else
  {
    if (!v210)
      goto LABEL_113;
    v89 = 5;
  }
  (*(void (**)(void))(*v88 + 8 * v89))();
LABEL_113:
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v90 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v169, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v169, 0, (uint64_t *)&v206);
  v171 = v206;
  if (v206)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = v206;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v172 = v91;
  v206 = 0;
  std::string::basic_string[abi:ne180100]<0>(v167, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v90 + 24))(v90, &v171, v167);
  if (v168 < 0)
    operator delete(v167[0]);
  v93 = v172;
  if (v172)
  {
    v94 = (unint64_t *)&v172->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v206;
  v206 = 0;
  if (v96)
    (*((void (**)(std::__shared_weak_count_vtbl *))v96->~__shared_weak_count + 1))(v96);
  if (v170 < 0)
    operator delete(v169[0]);
  v97 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v163, "alpha");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v163, 0, (uint64_t *)&v206);
  v165 = v206;
  if (v206)
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = v206;
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = v99;
  }
  else
  {
    v98 = 0;
  }
  v166 = v98;
  v206 = 0;
  std::string::basic_string[abi:ne180100]<0>(v161, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v97 + 24))(v97, &v165, v161);
  if (v162 < 0)
    operator delete(v161[0]);
  v100 = v166;
  if (v166)
  {
    v101 = (unint64_t *)&v166->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = v206;
  v206 = 0;
  if (v103)
    (*((void (**)(std::__shared_weak_count_vtbl *))v103->~__shared_weak_count + 1))(v103);
  if (v164 < 0)
    operator delete(v163[0]);
  v104 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v157, "beta");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v157, 0, (uint64_t *)&v206);
  v159 = v206;
  if (v206)
  {
    v105 = (std::__shared_weak_count *)operator new();
    v106 = v206;
    v105->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v105->__shared_owners_ = 0;
    v105->__shared_weak_owners_ = 0;
    v105[1].__vftable = v106;
  }
  else
  {
    v105 = 0;
  }
  v160 = v105;
  v206 = 0;
  std::string::basic_string[abi:ne180100]<0>(v155, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v104 + 24))(v104, &v159, v155);
  if (v156 < 0)
    operator delete(v155[0]);
  v107 = v160;
  if (v160)
  {
    v108 = (unint64_t *)&v160->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = v206;
  v206 = 0;
  if (v110)
    (*((void (**)(std::__shared_weak_count_vtbl *))v110->~__shared_weak_count + 1))(v110);
  if (v158 < 0)
    operator delete(v157[0]);
  v111 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v206);
  v153 = v206;
  if (v206)
  {
    v112 = (std::__shared_weak_count *)operator new();
    v113 = v206;
    v112->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v112->__shared_owners_ = 0;
    v112->__shared_weak_owners_ = 0;
    v112[1].__vftable = v113;
  }
  else
  {
    v112 = 0;
  }
  v154 = v112;
  v206 = 0;
  std::string::basic_string[abi:ne180100]<0>(v151, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v111 + 24))(v111, &v153, v151);
  if (v152 < 0)
    operator delete(v151[0]);
  v114 = v154;
  if (v154)
  {
    v115 = (unint64_t *)&v154->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = v206;
  v206 = 0;
  if (v117)
    (*((void (**)(std::__shared_weak_count_vtbl *))v117->~__shared_weak_count + 1))(v117);
  v118 = *a3;
  v149 = Scalar;
  if (Scalar)
  {
    v119 = (std::__shared_weak_count *)operator new();
    v120 = (std::__shared_weak_count_vtbl *)Scalar;
    v119->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v119->__shared_owners_ = 0;
    v119->__shared_weak_owners_ = 0;
    v119[1].__vftable = v120;
  }
  else
  {
    v119 = 0;
  }
  v150 = v119;
  Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v118 + 56))(v118, &v149);
  v121 = v150;
  if (v150)
  {
    v122 = (unint64_t *)&v150->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = Scalar;
  Scalar = 0;
  if (v124)
    (*(void (**)(void *))(*(_QWORD *)v124 + 8))(v124);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v125 = __p;
  std::string::basic_string[abi:ne180100]<0>(v145, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v145, 1, (uint64_t *)&v180);
  v147 = v180;
  if (v180)
  {
    v126 = (std::__shared_weak_count *)operator new();
    v127 = (std::__shared_weak_count_vtbl *)v180;
    v126->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v126->__shared_owners_ = 0;
    v126->__shared_weak_owners_ = 0;
    v126[1].__vftable = v127;
  }
  else
  {
    v126 = 0;
  }
  v148 = v126;
  v180 = 0;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v201, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v202, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v203, "int32");
  std::string::basic_string[abi:ne180100]<0>(v204, "int8");
  std::string::basic_string[abi:ne180100]<0>(v205, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&v206, (unsigned __int8 *)&Scalar, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v125 + 24))(v125, &v147, &v206, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v206);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v205[i + 2]) < 0)
      operator delete((void *)v205[i]);
  }
  v129 = v148;
  if (v148)
  {
    v130 = (unint64_t *)&v148->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v132 = v180;
  v180 = 0;
  if (v132)
    (*(void (**)(void *))(*(_QWORD *)v132 + 8))(v132);
  if (v146 < 0)
    operator delete(v145[0]);
  v133 = *a3;
  v143 = __p;
  if (__p)
  {
    v134 = (std::__shared_weak_count *)operator new();
    v135 = (std::__shared_weak_count_vtbl *)__p;
    v134->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v134->__shared_owners_ = 0;
    v134->__shared_weak_owners_ = 0;
    v134[1].__vftable = v135;
  }
  else
  {
    v134 = 0;
  }
  v144 = v134;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v133 + 56))(v133, &v143);
  v136 = v144;
  if (v144)
  {
    v137 = (unint64_t *)&v144->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  v139 = __p;
  __p = 0;
  if (v139)
    (*(void (**)(void *))(*(_QWORD *)v139 + 8))(v139);
  if (v193)
  {
    v140 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v193);
    MEMORY[0x1E0C023A0](v140, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v187, 0);
  result = (uint64_t)v197;
  if (v197)
  {
    v142 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v197);
    return MEMORY[0x1E0C023A0](v142, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09A4EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void **a67;
  void *a72;
  uint64_t *v72;
  void *v74;
  uint64_t v75;

  v74 = a72;
  a72 = 0;
  if (v74)
    (*(void (**)(void *))(*(_QWORD *)v74 + 8))(v74);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x210], 0);
  v75 = *v72;
  *v72 = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a67, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x238], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::Cos::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  char *v42;
  char *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  char **v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _OWORD *v62;
  unsigned __int8 *v63;
  void *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  std::__shared_weak_count_vtbl *v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  void *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count_vtbl *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count_vtbl *v86;
  void *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count_vtbl *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count_vtbl *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count_vtbl *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  void *v100;
  void *v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  uint64_t i;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  std::__shared_weak_count_vtbl *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t result;
  uint64_t v118;
  void *v119;
  std::__shared_weak_count *v120;
  void *v121[2];
  char v122;
  void *v123;
  std::__shared_weak_count *v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  void *v131[2];
  char v132;
  void *v133[2];
  char v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  void *v137;
  std::__shared_weak_count *v138;
  __n128 v139;
  __int128 v140;
  __int128 v141;
  void *v142[2];
  uint64_t v143;
  void *v144;
  void *v145;
  _QWORD *v146;
  __n128 v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  char **v151;
  void *__p;
  void *v153;
  _QWORD *v154;
  void *v155;
  void *v156;
  _QWORD *v157;
  __n128 v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD v163[3];
  uint64_t v164[3];
  uint64_t v165[3];
  uint64_t v166[3];
  _QWORD v167[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v169;
  uint64_t v170;
  _QWORD v171[3];
  _QWORD *v172;
  _BYTE v173[24];
  _BYTE *v174;
  _BYTE v175[24];
  _BYTE *v176;
  _QWORD v177[3];
  _QWORD *v178;
  uint64_t v179;

  v179 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v159 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v169 = (uint64_t)&v8->~__shared_weak_count_0;
  v170 = (uint64_t)&v8->~__shared_weak_count_0;
  v160 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v155 = v10;
  *v10 = v9;
  v156 = v10 + 1;
  v157 = v10 + 1;
  v161 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v155);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v153 = v12 + 1;
  v154 = v12 + 1;
  v162 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v160, 3, &v158);
  MIL::IRParameter::Make(&v158, (uint64_t *)&v144);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v144);
  v13 = v144;
  v144 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v158.n128_u64[1];
  if (v158.n128_u64[1])
  {
    v15 = (unint64_t *)(v158.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  if (Scalar)
  {
    v169 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v151 = 0;
  v17 = operator new();
  *(_QWORD *)v17 = 0;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  v160 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, (void **)v17);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v160, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v151, 1uLL);
  v18 = v151;
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v155 = v20;
  *v20 = v19;
  v156 = v20 + 1;
  v157 = v20 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v155);
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  __p = v22;
  *v22 = v21;
  v153 = v22 + 1;
  v154 = v22 + 1;
  v169 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  v144 = v24;
  *v24 = v23;
  v145 = v24 + 1;
  v146 = v24 + 1;
  v170 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v144);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v147);
  MIL::IRParameter::Make(&v147, &v148);
  v25 = v148;
  v149 = v148;
  if (v148)
  {
    v26 = (_QWORD *)operator new();
    v27 = v148;
    *v26 = &unk_1EA99F888;
    v26[1] = 0;
    v26[2] = 0;
    v26[3] = v27;
  }
  else
  {
    v26 = 0;
  }
  v150 = v26;
  v148 = 0;
  v28 = v18[2];
  v29 = v18[1];
  if (v29 >= v28)
  {
    v31 = (v29 - *v18) >> 4;
    v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v33 = v28 - *v18;
    if (v33 >> 3 > v32)
      v32 = v33 >> 3;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
      v34 = 0xFFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    v163[1] = v18 + 2;
    v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v18 + 2), v34);
    v37 = (uint64_t *)&v35[16 * v31];
    *v37 = v25;
    v37[1] = (uint64_t)v26;
    v149 = 0;
    v150 = 0;
    v39 = *v18;
    v38 = v18[1];
    if (v38 == *v18)
    {
      v42 = v18[1];
      v40 = &v35[16 * v31];
    }
    else
    {
      v40 = &v35[16 * v31];
      do
      {
        v41 = *((_OWORD *)v38 - 1);
        v38 -= 16;
        *((_OWORD *)v40 - 1) = v41;
        v40 -= 16;
        *(_QWORD *)v38 = 0;
        *((_QWORD *)v38 + 1) = 0;
      }
      while (v38 != v39);
      v42 = *v18;
      v38 = v18[1];
    }
    v30 = (char *)(v37 + 2);
    *v18 = v40;
    v160 = v42;
    v161 = (uint64_t)v42;
    v18[1] = (char *)(v37 + 2);
    v162 = (uint64_t)v38;
    v43 = v18[2];
    v18[2] = &v35[16 * v36];
    v163[0] = v43;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v160);
  }
  else
  {
    *(_QWORD *)v29 = v25;
    *((_QWORD *)v29 + 1) = v26;
    v30 = v29 + 16;
    v149 = 0;
    v150 = 0;
  }
  v18[1] = v30;
  v44 = v148;
  v148 = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = (std::__shared_weak_count *)v147.n128_u64[1];
  if (v147.n128_u64[1])
  {
    v46 = (unint64_t *)(v147.n128_u64[1] + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  *(_OWORD *)v142 = *(_OWORD *)a2;
  v143 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v48 = v159;
  *(_QWORD *)&v141 = v159;
  if (v159)
  {
    v49 = (_QWORD *)operator new();
    *v49 = &unk_1EA99F8E8;
    v49[1] = 0;
    v49[2] = 0;
    v49[3] = v48;
  }
  else
  {
    v49 = 0;
  }
  *((_QWORD *)&v141 + 1) = v49;
  v159 = 0;
  *(_QWORD *)&v140 = v151;
  if (v151)
  {
    v50 = (_QWORD *)operator new();
    v51 = v151;
    *v50 = &unk_1EA99F948;
    v50[1] = 0;
    v50[2] = 0;
    v50[3] = v51;
  }
  else
  {
    v50 = 0;
  }
  *((_QWORD *)&v140 + 1) = v50;
  v151 = 0;
  v177[0] = &unk_1EA99FAC8;
  v177[1] = MIL::Validation::ValidateViaTypeInference;
  v178 = v177;
  v176 = 0;
  MIL::IROperator::Make((__int128 *)v142, &v141, &v140, (uint64_t)v177, (uint64_t)v175, a3);
  v52 = v176;
  if (v176 == v175)
  {
    v53 = 4;
    v52 = v175;
  }
  else
  {
    if (!v176)
      goto LABEL_55;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_55:
  v54 = v178;
  if (v178 == v177)
  {
    v55 = 4;
    v54 = v177;
    goto LABEL_59;
  }
  if (v178)
  {
    v55 = 5;
LABEL_59:
    (*(void (**)(void))(*v54 + 8 * v55))();
  }
  v56 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
  if (*((_QWORD *)&v140 + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
  if (*((_QWORD *)&v141 + 1))
  {
    v60 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (SHIBYTE(v143) < 0)
    operator delete(v142[0]);
  v155 = 0;
  v62 = (_OWORD *)operator new();
  *v62 = 0u;
  v62[1] = 0u;
  *((_DWORD *)v62 + 8) = 1065353216;
  v155 = v62;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v139);
  MIL::IRParameter::Make(&v139, (uint64_t *)&v160);
  v63 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v62, "minimum_compute_type", (uint64_t *)&v160);
  v64 = v160;
  v160 = 0;
  if (v64)
    (*(void (**)(void *))(*(_QWORD *)v64 + 8))(v64);
  v65 = (std::__shared_weak_count *)v139.n128_u64[1];
  if (v139.n128_u64[1])
  {
    v66 = (unint64_t *)(v139.n128_u64[1] + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 32))(*((_QWORD *)v63 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 48))(*((_QWORD *)v63 + 5), 1);
  v68 = *a3;
  v69 = (std::__shared_weak_count_vtbl *)v155;
  v137 = v155;
  if (v155)
  {
    v70 = (std::__shared_weak_count *)operator new();
    v70->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v70->__shared_owners_ = 0;
    v70->__shared_weak_owners_ = 0;
    v70[1].__vftable = v69;
  }
  else
  {
    v70 = 0;
  }
  v138 = v70;
  v155 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v68 + 184))(v68, &v137);
  v71 = v138;
  if (v138)
  {
    p_shared_owners = (unint64_t *)&v138->__shared_owners_;
    do
      v73 = __ldaxr(p_shared_owners);
    while (__stlxr(v73 - 1, p_shared_owners));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v160, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v160, (uint64_t)v173);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v74 + 200))(v74, v173);
  v75 = v174;
  if (v174 == v173)
  {
    v76 = 4;
    v75 = v173;
  }
  else
  {
    if (!v174)
      goto LABEL_92;
    v76 = 5;
  }
  (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_92:
  if (SHIBYTE(v162) < 0)
    operator delete(v160);
  v77 = *a3;
  v171[0] = &off_1EA9A00F8;
  v171[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceCos;
  v172 = v171;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v77 + 216))(v77, v171);
  v78 = v172;
  if (v172 == v171)
  {
    v79 = 4;
    v78 = v171;
  }
  else
  {
    if (!v172)
      goto LABEL_99;
    v79 = 5;
  }
  (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_99:
  MIL::Validation::TensorDTypeConstraints::Make(&v160);
  v80 = v160;
  std::string::basic_string[abi:ne180100]<0>(v133, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v133, 0, (uint64_t *)&Scalar);
  v135 = Scalar;
  if (Scalar)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v82 = Scalar;
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v82;
  }
  else
  {
    v81 = 0;
  }
  v136 = v81;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v131, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v80 + 24))(v80, &v135, v131);
  if (v132 < 0)
    operator delete(v131[0]);
  v83 = v136;
  if (v136)
  {
    v84 = (unint64_t *)&v136->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = Scalar;
  Scalar = 0;
  if (v86)
    (*((void (**)(std::__shared_weak_count_vtbl *))v86->~__shared_weak_count + 1))(v86);
  if (v134 < 0)
    operator delete(v133[0]);
  v87 = v160;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v129 = Scalar;
  if (Scalar)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = Scalar;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = v89;
  }
  else
  {
    v88 = 0;
  }
  v130 = v88;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v87 + 24))(v87, &v129, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v90 = v130;
  if (v130)
  {
    v91 = (unint64_t *)&v130->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = Scalar;
  Scalar = 0;
  if (v93)
    (*((void (**)(std::__shared_weak_count_vtbl *))v93->~__shared_weak_count + 1))(v93);
  v94 = *a3;
  v125 = v160;
  if (v160)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = (std::__shared_weak_count_vtbl *)v160;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = v96;
  }
  else
  {
    v95 = 0;
  }
  v126 = v95;
  v160 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v94 + 56))(v94, &v125);
  v97 = v126;
  if (v126)
  {
    v98 = (unint64_t *)&v126->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = v160;
  v160 = 0;
  if (v100)
    (*(void (**)(void *))(*(_QWORD *)v100 + 8))(v100);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v101 = __p;
  std::string::basic_string[abi:ne180100]<0>(v121, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v121, 1, (uint64_t *)&v144);
  v123 = v144;
  if (v144)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = (std::__shared_weak_count_vtbl *)v144;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v124 = v102;
  v144 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v160, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v163, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v164, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v165, "int32");
  std::string::basic_string[abi:ne180100]<0>(v166, "int8");
  std::string::basic_string[abi:ne180100]<0>(v167, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v160, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v101 + 24))(v101, &v123, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v167[i + 2]) < 0)
      operator delete((void *)v167[i]);
  }
  v105 = v124;
  if (v124)
  {
    v106 = (unint64_t *)&v124->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = v144;
  v144 = 0;
  if (v108)
    (*(void (**)(void *))(*(_QWORD *)v108 + 8))(v108);
  if (v122 < 0)
    operator delete(v121[0]);
  v109 = *a3;
  v119 = __p;
  if (__p)
  {
    v110 = (std::__shared_weak_count *)operator new();
    v111 = (std::__shared_weak_count_vtbl *)__p;
    v110->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v110->__shared_owners_ = 0;
    v110->__shared_weak_owners_ = 0;
    v110[1].__vftable = v111;
  }
  else
  {
    v110 = 0;
  }
  v120 = v110;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v109 + 56))(v109, &v119);
  v112 = v120;
  if (v120)
  {
    v113 = (unint64_t *)&v120->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = __p;
  __p = 0;
  if (v115)
    (*(void (**)(void *))(*(_QWORD *)v115 + 8))(v115);
  if (v155)
  {
    v116 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v155);
    MEMORY[0x1E0C023A0](v116, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, 0);
  result = v159;
  if (v159)
  {
    v118 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v159);
    return MEMORY[0x1E0C023A0](v118, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09A62D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void **a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  void *v62;
  uint64_t v63;

  v62 = a52;
  a52 = 0;
  if (v62)
    (*(void (**)(void *))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a55, 0);
  v63 = *v60;
  *v60 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a51, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::Cosh::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  char *v42;
  char *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  char **v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _OWORD *v62;
  unsigned __int8 *v63;
  void *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  std::__shared_weak_count_vtbl *v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  void *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count_vtbl *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count_vtbl *v86;
  void *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count_vtbl *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count_vtbl *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count_vtbl *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  void *v100;
  void *v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  uint64_t i;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  std::__shared_weak_count_vtbl *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t result;
  uint64_t v118;
  void *v119;
  std::__shared_weak_count *v120;
  void *v121[2];
  char v122;
  void *v123;
  std::__shared_weak_count *v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  void *v131[2];
  char v132;
  void *v133[2];
  char v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  void *v137;
  std::__shared_weak_count *v138;
  __n128 v139;
  __int128 v140;
  __int128 v141;
  void *v142[2];
  uint64_t v143;
  void *v144;
  void *v145;
  _QWORD *v146;
  __n128 v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  char **v151;
  void *__p;
  void *v153;
  _QWORD *v154;
  void *v155;
  void *v156;
  _QWORD *v157;
  __n128 v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD v163[3];
  uint64_t v164[3];
  uint64_t v165[3];
  uint64_t v166[3];
  _QWORD v167[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v169;
  uint64_t v170;
  _QWORD v171[3];
  _QWORD *v172;
  _BYTE v173[24];
  _BYTE *v174;
  _BYTE v175[24];
  _BYTE *v176;
  _QWORD v177[3];
  _QWORD *v178;
  uint64_t v179;

  v179 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v159 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v169 = (uint64_t)&v8->~__shared_weak_count_0;
  v170 = (uint64_t)&v8->~__shared_weak_count_0;
  v160 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v155 = v10;
  *v10 = v9;
  v156 = v10 + 1;
  v157 = v10 + 1;
  v161 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v155);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v153 = v12 + 1;
  v154 = v12 + 1;
  v162 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v160, 3, &v158);
  MIL::IRParameter::Make(&v158, (uint64_t *)&v144);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v144);
  v13 = v144;
  v144 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v158.n128_u64[1];
  if (v158.n128_u64[1])
  {
    v15 = (unint64_t *)(v158.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  if (Scalar)
  {
    v169 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v151 = 0;
  v17 = operator new();
  *(_QWORD *)v17 = 0;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  v160 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, (void **)v17);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v160, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v151, 1uLL);
  v18 = v151;
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v155 = v20;
  *v20 = v19;
  v156 = v20 + 1;
  v157 = v20 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v155);
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  __p = v22;
  *v22 = v21;
  v153 = v22 + 1;
  v154 = v22 + 1;
  v169 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  v144 = v24;
  *v24 = v23;
  v145 = v24 + 1;
  v146 = v24 + 1;
  v170 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v144);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v147);
  MIL::IRParameter::Make(&v147, &v148);
  v25 = v148;
  v149 = v148;
  if (v148)
  {
    v26 = (_QWORD *)operator new();
    v27 = v148;
    *v26 = &unk_1EA99F888;
    v26[1] = 0;
    v26[2] = 0;
    v26[3] = v27;
  }
  else
  {
    v26 = 0;
  }
  v150 = v26;
  v148 = 0;
  v28 = v18[2];
  v29 = v18[1];
  if (v29 >= v28)
  {
    v31 = (v29 - *v18) >> 4;
    v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v33 = v28 - *v18;
    if (v33 >> 3 > v32)
      v32 = v33 >> 3;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
      v34 = 0xFFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    v163[1] = v18 + 2;
    v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v18 + 2), v34);
    v37 = (uint64_t *)&v35[16 * v31];
    *v37 = v25;
    v37[1] = (uint64_t)v26;
    v149 = 0;
    v150 = 0;
    v39 = *v18;
    v38 = v18[1];
    if (v38 == *v18)
    {
      v42 = v18[1];
      v40 = &v35[16 * v31];
    }
    else
    {
      v40 = &v35[16 * v31];
      do
      {
        v41 = *((_OWORD *)v38 - 1);
        v38 -= 16;
        *((_OWORD *)v40 - 1) = v41;
        v40 -= 16;
        *(_QWORD *)v38 = 0;
        *((_QWORD *)v38 + 1) = 0;
      }
      while (v38 != v39);
      v42 = *v18;
      v38 = v18[1];
    }
    v30 = (char *)(v37 + 2);
    *v18 = v40;
    v160 = v42;
    v161 = (uint64_t)v42;
    v18[1] = (char *)(v37 + 2);
    v162 = (uint64_t)v38;
    v43 = v18[2];
    v18[2] = &v35[16 * v36];
    v163[0] = v43;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v160);
  }
  else
  {
    *(_QWORD *)v29 = v25;
    *((_QWORD *)v29 + 1) = v26;
    v30 = v29 + 16;
    v149 = 0;
    v150 = 0;
  }
  v18[1] = v30;
  v44 = v148;
  v148 = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = (std::__shared_weak_count *)v147.n128_u64[1];
  if (v147.n128_u64[1])
  {
    v46 = (unint64_t *)(v147.n128_u64[1] + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  *(_OWORD *)v142 = *(_OWORD *)a2;
  v143 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v48 = v159;
  *(_QWORD *)&v141 = v159;
  if (v159)
  {
    v49 = (_QWORD *)operator new();
    *v49 = &unk_1EA99F8E8;
    v49[1] = 0;
    v49[2] = 0;
    v49[3] = v48;
  }
  else
  {
    v49 = 0;
  }
  *((_QWORD *)&v141 + 1) = v49;
  v159 = 0;
  *(_QWORD *)&v140 = v151;
  if (v151)
  {
    v50 = (_QWORD *)operator new();
    v51 = v151;
    *v50 = &unk_1EA99F948;
    v50[1] = 0;
    v50[2] = 0;
    v50[3] = v51;
  }
  else
  {
    v50 = 0;
  }
  *((_QWORD *)&v140 + 1) = v50;
  v151 = 0;
  v177[0] = &unk_1EA99FAC8;
  v177[1] = MIL::Validation::ValidateViaTypeInference;
  v178 = v177;
  v176 = 0;
  MIL::IROperator::Make((__int128 *)v142, &v141, &v140, (uint64_t)v177, (uint64_t)v175, a3);
  v52 = v176;
  if (v176 == v175)
  {
    v53 = 4;
    v52 = v175;
  }
  else
  {
    if (!v176)
      goto LABEL_55;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_55:
  v54 = v178;
  if (v178 == v177)
  {
    v55 = 4;
    v54 = v177;
    goto LABEL_59;
  }
  if (v178)
  {
    v55 = 5;
LABEL_59:
    (*(void (**)(void))(*v54 + 8 * v55))();
  }
  v56 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
  if (*((_QWORD *)&v140 + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
  if (*((_QWORD *)&v141 + 1))
  {
    v60 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (SHIBYTE(v143) < 0)
    operator delete(v142[0]);
  v155 = 0;
  v62 = (_OWORD *)operator new();
  *v62 = 0u;
  v62[1] = 0u;
  *((_DWORD *)v62 + 8) = 1065353216;
  v155 = v62;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v139);
  MIL::IRParameter::Make(&v139, (uint64_t *)&v160);
  v63 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v62, "minimum_compute_type", (uint64_t *)&v160);
  v64 = v160;
  v160 = 0;
  if (v64)
    (*(void (**)(void *))(*(_QWORD *)v64 + 8))(v64);
  v65 = (std::__shared_weak_count *)v139.n128_u64[1];
  if (v139.n128_u64[1])
  {
    v66 = (unint64_t *)(v139.n128_u64[1] + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 32))(*((_QWORD *)v63 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 48))(*((_QWORD *)v63 + 5), 1);
  v68 = *a3;
  v69 = (std::__shared_weak_count_vtbl *)v155;
  v137 = v155;
  if (v155)
  {
    v70 = (std::__shared_weak_count *)operator new();
    v70->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v70->__shared_owners_ = 0;
    v70->__shared_weak_owners_ = 0;
    v70[1].__vftable = v69;
  }
  else
  {
    v70 = 0;
  }
  v138 = v70;
  v155 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v68 + 184))(v68, &v137);
  v71 = v138;
  if (v138)
  {
    p_shared_owners = (unint64_t *)&v138->__shared_owners_;
    do
      v73 = __ldaxr(p_shared_owners);
    while (__stlxr(v73 - 1, p_shared_owners));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v160, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v160, (uint64_t)v173);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v74 + 200))(v74, v173);
  v75 = v174;
  if (v174 == v173)
  {
    v76 = 4;
    v75 = v173;
  }
  else
  {
    if (!v174)
      goto LABEL_92;
    v76 = 5;
  }
  (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_92:
  if (SHIBYTE(v162) < 0)
    operator delete(v160);
  v77 = *a3;
  v171[0] = &off_1EA9A00F8;
  v171[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceCosh;
  v172 = v171;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v77 + 216))(v77, v171);
  v78 = v172;
  if (v172 == v171)
  {
    v79 = 4;
    v78 = v171;
  }
  else
  {
    if (!v172)
      goto LABEL_99;
    v79 = 5;
  }
  (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_99:
  MIL::Validation::TensorDTypeConstraints::Make(&v160);
  v80 = v160;
  std::string::basic_string[abi:ne180100]<0>(v133, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v133, 0, (uint64_t *)&Scalar);
  v135 = Scalar;
  if (Scalar)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v82 = Scalar;
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v82;
  }
  else
  {
    v81 = 0;
  }
  v136 = v81;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v131, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v80 + 24))(v80, &v135, v131);
  if (v132 < 0)
    operator delete(v131[0]);
  v83 = v136;
  if (v136)
  {
    v84 = (unint64_t *)&v136->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = Scalar;
  Scalar = 0;
  if (v86)
    (*((void (**)(std::__shared_weak_count_vtbl *))v86->~__shared_weak_count + 1))(v86);
  if (v134 < 0)
    operator delete(v133[0]);
  v87 = v160;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v129 = Scalar;
  if (Scalar)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = Scalar;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = v89;
  }
  else
  {
    v88 = 0;
  }
  v130 = v88;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v87 + 24))(v87, &v129, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v90 = v130;
  if (v130)
  {
    v91 = (unint64_t *)&v130->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = Scalar;
  Scalar = 0;
  if (v93)
    (*((void (**)(std::__shared_weak_count_vtbl *))v93->~__shared_weak_count + 1))(v93);
  v94 = *a3;
  v125 = v160;
  if (v160)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = (std::__shared_weak_count_vtbl *)v160;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = v96;
  }
  else
  {
    v95 = 0;
  }
  v126 = v95;
  v160 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v94 + 56))(v94, &v125);
  v97 = v126;
  if (v126)
  {
    v98 = (unint64_t *)&v126->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = v160;
  v160 = 0;
  if (v100)
    (*(void (**)(void *))(*(_QWORD *)v100 + 8))(v100);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v101 = __p;
  std::string::basic_string[abi:ne180100]<0>(v121, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v121, 1, (uint64_t *)&v144);
  v123 = v144;
  if (v144)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = (std::__shared_weak_count_vtbl *)v144;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v124 = v102;
  v144 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v160, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v163, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v164, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v165, "int32");
  std::string::basic_string[abi:ne180100]<0>(v166, "int8");
  std::string::basic_string[abi:ne180100]<0>(v167, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v160, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v101 + 24))(v101, &v123, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v167[i + 2]) < 0)
      operator delete((void *)v167[i]);
  }
  v105 = v124;
  if (v124)
  {
    v106 = (unint64_t *)&v124->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = v144;
  v144 = 0;
  if (v108)
    (*(void (**)(void *))(*(_QWORD *)v108 + 8))(v108);
  if (v122 < 0)
    operator delete(v121[0]);
  v109 = *a3;
  v119 = __p;
  if (__p)
  {
    v110 = (std::__shared_weak_count *)operator new();
    v111 = (std::__shared_weak_count_vtbl *)__p;
    v110->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v110->__shared_owners_ = 0;
    v110->__shared_weak_owners_ = 0;
    v110[1].__vftable = v111;
  }
  else
  {
    v110 = 0;
  }
  v120 = v110;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v109 + 56))(v109, &v119);
  v112 = v120;
  if (v120)
  {
    v113 = (unint64_t *)&v120->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = __p;
  __p = 0;
  if (v115)
    (*(void (**)(void *))(*(_QWORD *)v115 + 8))(v115);
  if (v155)
  {
    v116 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v155);
    MEMORY[0x1E0C023A0](v116, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, 0);
  result = v159;
  if (v159)
  {
    v118 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v159);
    return MEMORY[0x1E0C023A0](v118, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09A75A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void **a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  void *v62;
  uint64_t v63;

  v62 = a52;
  a52 = 0;
  if (v62)
    (*(void (**)(void *))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a55, 0);
  v63 = *v60;
  *v60 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a51, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::ElementwiseUnaryWithEpsilon::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  unsigned __int8 *v20;
  std::__shared_weak_count_vtbl *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  char **v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t *v45;
  char *v46;
  char *v47;
  char *v48;
  __int128 v49;
  char *v50;
  char *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  char **v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  _OWORD *v70;
  unsigned __int8 *v71;
  void *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  std::__shared_weak_count_vtbl *v77;
  std::__shared_weak_count *v78;
  std::__shared_weak_count *v79;
  unint64_t *p_shared_owners;
  unint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  void *v85;
  std::__shared_weak_count *v86;
  std::__shared_weak_count_vtbl *v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count_vtbl *v91;
  void *v92;
  std::__shared_weak_count *v93;
  std::__shared_weak_count_vtbl *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count_vtbl *v98;
  void *v99;
  std::__shared_weak_count *v100;
  std::__shared_weak_count_vtbl *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count_vtbl *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  std::__shared_weak_count_vtbl *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  void *v112;
  void *v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count_vtbl *v115;
  uint64_t i;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  std::__shared_weak_count_vtbl *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t result;
  uint64_t v130;
  void *v131;
  std::__shared_weak_count *v132;
  void *v133[2];
  char v134;
  void *v135;
  std::__shared_weak_count *v136;
  void *v137;
  std::__shared_weak_count *v138;
  void *v139[2];
  char v140;
  std::__shared_weak_count_vtbl *v141;
  std::__shared_weak_count *v142;
  void *v143[2];
  char v144;
  void *v145[2];
  char v146;
  std::__shared_weak_count_vtbl *v147;
  std::__shared_weak_count *v148;
  void *v149[2];
  char v150;
  void *v151[2];
  char v152;
  std::__shared_weak_count_vtbl *v153;
  std::__shared_weak_count *v154;
  void *v155;
  std::__shared_weak_count *v156;
  __n128 v157;
  __int128 v158;
  __int128 v159;
  void *v160[2];
  uint64_t v161;
  void *v162;
  void *v163;
  _QWORD *v164;
  __n128 v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  char **v169;
  __n128 v170;
  void *__p;
  void *v172;
  _QWORD *v173;
  void *v174;
  void *v175;
  _QWORD *v176;
  __n128 v177;
  _QWORD *v178;
  void *Scalar;
  uint64_t v180;
  uint64_t v181;
  _QWORD v182[3];
  uint64_t v183[3];
  uint64_t v184[3];
  uint64_t v185[3];
  _QWORD v186[3];
  std::__shared_weak_count_vtbl *v187;
  uint64_t v188;
  uint64_t v189;
  _BYTE v190[24];
  _BYTE *v191;
  _BYTE v192[24];
  _BYTE *v193;
  _BYTE v194[24];
  _BYTE *v195;
  uint64_t v196;

  v196 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v178 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v187 = v10;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v188 = (uint64_t)&v10->~__shared_weak_count_0;
  v189 = (uint64_t)&v10->~__shared_weak_count_0;
  Scalar = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v187);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v174 = v12;
  *v12 = v11;
  v175 = v12 + 1;
  v176 = v12 + 1;
  v180 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v174);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v172 = v14 + 1;
  v173 = v14 + 1;
  v181 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v177);
  MIL::IRParameter::Make(&v177, (uint64_t *)&v162);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", (uint64_t *)&v162);
  v15 = v162;
  v162 = 0;
  if (v15)
    (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v177.n128_u64[1];
  if (v177.n128_u64[1])
  {
    v17 = (unint64_t *)(v177.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v172 = __p;
    operator delete(__p);
  }
  if (v174)
  {
    v175 = v174;
    operator delete(v174);
  }
  if (v187)
  {
    v188 = (uint64_t)v187;
    operator delete(v187);
  }
  v19 = v178;
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar(a1, 7);
  v180 = MIL::IRTensorValueType::MakeScalar(a1, 4);
  v181 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v170);
  MIL::IRParameter::Make(&v170, (uint64_t *)&v187);
  v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v19, "epsilon", (uint64_t *)&v187);
  v21 = v187;
  v187 = 0;
  if (v21)
    (*((void (**)(std::__shared_weak_count_vtbl *))v21->~__shared_weak_count + 1))(v21);
  v22 = (std::__shared_weak_count *)v170.n128_u64[1];
  if (v170.n128_u64[1])
  {
    v23 = (unint64_t *)(v170.n128_u64[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v20 + 5) + 32))(*((_QWORD *)v20 + 5), 1);
  v169 = 0;
  v25 = operator new();
  *(_QWORD *)v25 = 0;
  *(_QWORD *)(v25 + 8) = 0;
  *(_QWORD *)(v25 + 16) = 0;
  Scalar = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v169, (void **)v25);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&Scalar, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v169, 1uLL);
  v26 = v169;
  v27 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v28 = operator new(8uLL);
  v174 = v28;
  *v28 = v27;
  v175 = v28 + 1;
  v176 = v28 + 1;
  v187 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v174);
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = operator new(8uLL);
  __p = v30;
  *v30 = v29;
  v172 = v30 + 1;
  v173 = v30 + 1;
  v188 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v31 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v32 = operator new(8uLL);
  v162 = v32;
  *v32 = v31;
  v163 = v32 + 1;
  v164 = v32 + 1;
  v189 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v162);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v187, 3, &v165);
  MIL::IRParameter::Make(&v165, &v166);
  v33 = v166;
  v167 = v166;
  if (v166)
  {
    v34 = (_QWORD *)operator new();
    v35 = v166;
    *v34 = &unk_1EA99F888;
    v34[1] = 0;
    v34[2] = 0;
    v34[3] = v35;
  }
  else
  {
    v34 = 0;
  }
  v168 = v34;
  v166 = 0;
  v36 = v26[2];
  v37 = v26[1];
  if (v37 >= v36)
  {
    v39 = (v37 - *v26) >> 4;
    v40 = v39 + 1;
    if ((unint64_t)(v39 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v41 = v36 - *v26;
    if (v41 >> 3 > v40)
      v40 = v41 >> 3;
    if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0)
      v42 = 0xFFFFFFFFFFFFFFFLL;
    else
      v42 = v40;
    v182[1] = v26 + 2;
    v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v26 + 2), v42);
    v45 = (uint64_t *)&v43[16 * v39];
    *v45 = v33;
    v45[1] = (uint64_t)v34;
    v167 = 0;
    v168 = 0;
    v47 = *v26;
    v46 = v26[1];
    if (v46 == *v26)
    {
      v50 = v26[1];
      v48 = &v43[16 * v39];
    }
    else
    {
      v48 = &v43[16 * v39];
      do
      {
        v49 = *((_OWORD *)v46 - 1);
        v46 -= 16;
        *((_OWORD *)v48 - 1) = v49;
        v48 -= 16;
        *(_QWORD *)v46 = 0;
        *((_QWORD *)v46 + 1) = 0;
      }
      while (v46 != v47);
      v50 = *v26;
      v46 = v26[1];
    }
    v38 = (char *)(v45 + 2);
    *v26 = v48;
    Scalar = v50;
    v180 = (uint64_t)v50;
    v26[1] = (char *)(v45 + 2);
    v181 = (uint64_t)v46;
    v51 = v26[2];
    v26[2] = &v43[16 * v44];
    v182[0] = v51;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v37 = v33;
    *((_QWORD *)v37 + 1) = v34;
    v38 = v37 + 16;
    v167 = 0;
    v168 = 0;
  }
  v26[1] = v38;
  v52 = v166;
  v166 = 0;
  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  v53 = (std::__shared_weak_count *)v165.n128_u64[1];
  if (v165.n128_u64[1])
  {
    v54 = (unint64_t *)(v165.n128_u64[1] + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  if (v162)
  {
    v163 = v162;
    operator delete(v162);
  }
  if (__p)
  {
    v172 = __p;
    operator delete(__p);
  }
  if (v174)
  {
    v175 = v174;
    operator delete(v174);
  }
  *(_OWORD *)v160 = *(_OWORD *)a2;
  v161 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v56 = (uint64_t)v178;
  *(_QWORD *)&v159 = v178;
  if (v178)
  {
    v57 = (_QWORD *)operator new();
    *v57 = &unk_1EA99F8E8;
    v57[1] = 0;
    v57[2] = 0;
    v57[3] = v56;
  }
  else
  {
    v57 = 0;
  }
  *((_QWORD *)&v159 + 1) = v57;
  v178 = 0;
  *(_QWORD *)&v158 = v169;
  if (v169)
  {
    v58 = (_QWORD *)operator new();
    v59 = v169;
    *v58 = &unk_1EA99F948;
    v58[1] = 0;
    v58[2] = 0;
    v58[3] = v59;
  }
  else
  {
    v58 = 0;
  }
  *((_QWORD *)&v158 + 1) = v58;
  v169 = 0;
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v194, a3);
  v193 = 0;
  MIL::IROperator::Make((__int128 *)v160, &v159, &v158, (uint64_t)v194, (uint64_t)v192, a4);
  v60 = v193;
  if (v193 == v192)
  {
    v61 = 4;
    v60 = v192;
  }
  else
  {
    if (!v193)
      goto LABEL_62;
    v61 = 5;
  }
  (*(void (**)(void))(*v60 + 8 * v61))();
LABEL_62:
  v62 = v195;
  if (v195 == v194)
  {
    v63 = 4;
    v62 = v194;
    goto LABEL_66;
  }
  if (v195)
  {
    v63 = 5;
LABEL_66:
    (*(void (**)(void))(*v62 + 8 * v63))();
  }
  v64 = (std::__shared_weak_count *)*((_QWORD *)&v158 + 1);
  if (*((_QWORD *)&v158 + 1))
  {
    v65 = (unint64_t *)(*((_QWORD *)&v158 + 1) + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v159 + 1);
  if (*((_QWORD *)&v159 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v159 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  if (SHIBYTE(v161) < 0)
    operator delete(v160[0]);
  v174 = 0;
  v70 = (_OWORD *)operator new();
  *v70 = 0u;
  v70[1] = 0u;
  *((_DWORD *)v70 + 8) = 1065353216;
  v174 = v70;
  v187 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v187, 1, &v157);
  MIL::IRParameter::Make(&v157, (uint64_t *)&Scalar);
  v71 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v70, "minimum_compute_type", (uint64_t *)&Scalar);
  v72 = Scalar;
  Scalar = 0;
  if (v72)
    (*(void (**)(void *))(*(_QWORD *)v72 + 8))(v72);
  v73 = (std::__shared_weak_count *)v157.n128_u64[1];
  if (v157.n128_u64[1])
  {
    v74 = (unint64_t *)(v157.n128_u64[1] + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v71 + 5) + 32))(*((_QWORD *)v71 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v71 + 5) + 48))(*((_QWORD *)v71 + 5), 1);
  v76 = *a4;
  v77 = (std::__shared_weak_count_vtbl *)v174;
  v155 = v174;
  if (v174)
  {
    v78 = (std::__shared_weak_count *)operator new();
    v78->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v78->__shared_owners_ = 0;
    v78->__shared_weak_owners_ = 0;
    v78[1].__vftable = v77;
  }
  else
  {
    v78 = 0;
  }
  v156 = v78;
  v174 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v76 + 184))(v76, &v155);
  v79 = v156;
  if (v156)
  {
    p_shared_owners = (unint64_t *)&v156->__shared_owners_;
    do
      v81 = __ldaxr(p_shared_owners);
    while (__stlxr(v81 - 1, p_shared_owners));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = *a4;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&Scalar, (uint64_t)v190);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v82 + 200))(v82, v190);
  v83 = v191;
  if (v191 == v190)
  {
    v84 = 4;
    v83 = v190;
  }
  else
  {
    if (!v191)
      goto LABEL_99;
    v84 = 5;
  }
  (*(void (**)(void))(*v83 + 8 * v84))();
LABEL_99:
  if (SHIBYTE(v181) < 0)
    operator delete(Scalar);
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v85 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v151, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v151, 0, (uint64_t *)&v187);
  v153 = v187;
  if (v187)
  {
    v86 = (std::__shared_weak_count *)operator new();
    v87 = v187;
    v86->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v86->__shared_owners_ = 0;
    v86->__shared_weak_owners_ = 0;
    v86[1].__vftable = v87;
  }
  else
  {
    v86 = 0;
  }
  v154 = v86;
  v187 = 0;
  std::string::basic_string[abi:ne180100]<0>(v149, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v85 + 24))(v85, &v153, v149);
  if (v150 < 0)
    operator delete(v149[0]);
  v88 = v154;
  if (v154)
  {
    v89 = (unint64_t *)&v154->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = v187;
  v187 = 0;
  if (v91)
    (*((void (**)(std::__shared_weak_count_vtbl *))v91->~__shared_weak_count + 1))(v91);
  if (v152 < 0)
    operator delete(v151[0]);
  v92 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v145, "epsilon");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v145, 0, (uint64_t *)&v187);
  v147 = v187;
  if (v187)
  {
    v93 = (std::__shared_weak_count *)operator new();
    v94 = v187;
    v93->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v93->__shared_owners_ = 0;
    v93->__shared_weak_owners_ = 0;
    v93[1].__vftable = v94;
  }
  else
  {
    v93 = 0;
  }
  v148 = v93;
  v187 = 0;
  std::string::basic_string[abi:ne180100]<0>(v143, "U");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v92 + 24))(v92, &v147, v143);
  if (v144 < 0)
    operator delete(v143[0]);
  v95 = v148;
  if (v148)
  {
    v96 = (unint64_t *)&v148->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = v187;
  v187 = 0;
  if (v98)
    (*((void (**)(std::__shared_weak_count_vtbl *))v98->~__shared_weak_count + 1))(v98);
  if (v146 < 0)
    operator delete(v145[0]);
  v99 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v187);
  v141 = v187;
  if (v187)
  {
    v100 = (std::__shared_weak_count *)operator new();
    v101 = v187;
    v100->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v100->__shared_owners_ = 0;
    v100->__shared_weak_owners_ = 0;
    v100[1].__vftable = v101;
  }
  else
  {
    v100 = 0;
  }
  v142 = v100;
  v187 = 0;
  std::string::basic_string[abi:ne180100]<0>(v139, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v99 + 24))(v99, &v141, v139);
  if (v140 < 0)
    operator delete(v139[0]);
  v102 = v142;
  if (v142)
  {
    v103 = (unint64_t *)&v142->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = v187;
  v187 = 0;
  if (v105)
    (*((void (**)(std::__shared_weak_count_vtbl *))v105->~__shared_weak_count + 1))(v105);
  v106 = *a4;
  v137 = Scalar;
  if (Scalar)
  {
    v107 = (std::__shared_weak_count *)operator new();
    v108 = (std::__shared_weak_count_vtbl *)Scalar;
    v107->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v107->__shared_owners_ = 0;
    v107->__shared_weak_owners_ = 0;
    v107[1].__vftable = v108;
  }
  else
  {
    v107 = 0;
  }
  v138 = v107;
  Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v106 + 56))(v106, &v137);
  v109 = v138;
  if (v138)
  {
    v110 = (unint64_t *)&v138->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = Scalar;
  Scalar = 0;
  if (v112)
    (*(void (**)(void *))(*(_QWORD *)v112 + 8))(v112);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v113 = __p;
  std::string::basic_string[abi:ne180100]<0>(v133, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v133, 1, (uint64_t *)&v162);
  v135 = v162;
  if (v162)
  {
    v114 = (std::__shared_weak_count *)operator new();
    v115 = (std::__shared_weak_count_vtbl *)v162;
    v114->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v114->__shared_owners_ = 0;
    v114->__shared_weak_owners_ = 0;
    v114[1].__vftable = v115;
  }
  else
  {
    v114 = 0;
  }
  v136 = v114;
  v162 = 0;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v182, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v183, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v184, "int32");
  std::string::basic_string[abi:ne180100]<0>(v185, "int8");
  std::string::basic_string[abi:ne180100]<0>(v186, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&v187, (unsigned __int8 *)&Scalar, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v113 + 24))(v113, &v135, &v187, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v187);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v186[i + 2]) < 0)
      operator delete((void *)v186[i]);
  }
  v117 = v136;
  if (v136)
  {
    v118 = (unint64_t *)&v136->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = v162;
  v162 = 0;
  if (v120)
    (*(void (**)(void *))(*(_QWORD *)v120 + 8))(v120);
  if (v134 < 0)
    operator delete(v133[0]);
  v121 = *a4;
  v131 = __p;
  if (__p)
  {
    v122 = (std::__shared_weak_count *)operator new();
    v123 = (std::__shared_weak_count_vtbl *)__p;
    v122->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v122->__shared_owners_ = 0;
    v122->__shared_weak_owners_ = 0;
    v122[1].__vftable = v123;
  }
  else
  {
    v122 = 0;
  }
  v132 = v122;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v121 + 56))(v121, &v131);
  v124 = v132;
  if (v132)
  {
    v125 = (unint64_t *)&v132->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = __p;
  __p = 0;
  if (v127)
    (*(void (**)(void *))(*(_QWORD *)v127 + 8))(v127);
  if (v174)
  {
    v128 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v174);
    MEMORY[0x1E0C023A0](v128, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v169, 0);
  result = (uint64_t)v178;
  if (v178)
  {
    v130 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v178);
    return MEMORY[0x1E0C023A0](v130, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09A89CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void **a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  void *a65;
  uint64_t a70;
  uint64_t *v70;
  void *v72;
  uint64_t v73;

  v72 = a62;
  a62 = 0;
  if (v72)
    (*(void (**)(void *))(*(_QWORD *)v72 + 8))(v72);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a65, 0);
  v73 = *v70;
  *v70 = 0;
  if (v73)
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a59, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a70, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::Inverse::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios18::ElementwiseUnaryWithEpsilon::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E09A8F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::Log::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios18::ElementwiseUnaryWithEpsilon::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E09A906C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::Rsqrt::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios18::ElementwiseUnaryWithEpsilon::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E09A916C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::ElementwiseUnaryWithInt::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t *v43;
  char *v44;
  char *v45;
  char *v46;
  __int128 v47;
  char *v48;
  char *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  char **v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  _OWORD *v68;
  unsigned __int8 *v69;
  void *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  std::__shared_weak_count_vtbl *v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  unint64_t *p_shared_owners;
  unint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  void *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count_vtbl *v89;
  void *v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count_vtbl *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count_vtbl *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  void *v103;
  void *v104;
  std::__shared_weak_count *v105;
  std::__shared_weak_count_vtbl *v106;
  uint64_t i;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  std::__shared_weak_count_vtbl *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t result;
  uint64_t v121;
  void *v122;
  std::__shared_weak_count *v123;
  void *v124[2];
  char v125;
  void *v126;
  std::__shared_weak_count *v127;
  void *v128;
  std::__shared_weak_count *v129;
  void *v130[2];
  char v131;
  std::__shared_weak_count_vtbl *v132;
  std::__shared_weak_count *v133;
  void *v134[2];
  char v135;
  void *v136[2];
  char v137;
  std::__shared_weak_count_vtbl *v138;
  std::__shared_weak_count *v139;
  void *v140;
  std::__shared_weak_count *v141;
  __n128 v142;
  __int128 v143;
  __int128 v144;
  void *v145[2];
  uint64_t v146;
  void *v147;
  void *v148;
  _QWORD *v149;
  __n128 v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  char **v154;
  void *__p;
  void *v156;
  _QWORD *v157;
  void *v158;
  void *v159;
  _QWORD *v160;
  void *v161;
  void *v162;
  _QWORD *v163;
  __n128 v164;
  uint64_t v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD v169[3];
  uint64_t v170[3];
  uint64_t v171[3];
  uint64_t v172[3];
  _QWORD v173[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  _BYTE v178[24];
  _BYTE *v179;
  _BYTE v180[24];
  _BYTE *v181;
  _BYTE v182[24];
  _BYTE *v183;
  uint64_t v184;

  v184 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v165 = v8;
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v10;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v175 = (uint64_t)&v10->~__shared_weak_count_0;
  v176 = (uint64_t)&v10->~__shared_weak_count_0;
  v166 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v161 = v12;
  *v12 = v11;
  v162 = v12 + 1;
  v163 = v12 + 1;
  v167 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v161);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  v158 = v14;
  *v14 = v13;
  v159 = v14 + 1;
  v160 = v14 + 1;
  v168 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v158);
  v15 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v16 = operator new(8uLL);
  __p = v16;
  *v16 = v15;
  v156 = v16 + 1;
  v157 = v16 + 1;
  v169[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v166, 4, &v164);
  MIL::IRParameter::Make(&v164, (uint64_t *)&v147);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", (uint64_t *)&v147);
  v17 = v147;
  v147 = 0;
  if (v17)
    (*(void (**)(void *))(*(_QWORD *)v17 + 8))(v17);
  v18 = (std::__shared_weak_count *)v164.n128_u64[1];
  if (v164.n128_u64[1])
  {
    v19 = (unint64_t *)(v164.n128_u64[1] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (__p)
  {
    v156 = __p;
    operator delete(__p);
  }
  if (v158)
  {
    v159 = v158;
    operator delete(v158);
  }
  if (v161)
  {
    v162 = v161;
    operator delete(v161);
  }
  if (Scalar)
  {
    v175 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v154 = 0;
  v21 = operator new();
  *(_QWORD *)v21 = 0;
  *(_QWORD *)(v21 + 8) = 0;
  *(_QWORD *)(v21 + 16) = 0;
  v166 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v154, (void **)v21);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v166, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v154, 1uLL);
  v22 = v154;
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  v161 = v24;
  *v24 = v23;
  v162 = v24 + 1;
  v163 = v24 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v161);
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = operator new(8uLL);
  v158 = v26;
  *v26 = v25;
  v159 = v26 + 1;
  v160 = v26 + 1;
  v175 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v158);
  v27 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v28 = operator new(8uLL);
  __p = v28;
  *v28 = v27;
  v156 = v28 + 1;
  v157 = v28 + 1;
  v176 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = operator new(8uLL);
  v147 = v30;
  *v30 = v29;
  v148 = v30 + 1;
  v149 = v30 + 1;
  v177 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v147);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 4, &v150);
  MIL::IRParameter::Make(&v150, &v151);
  v31 = v151;
  v152 = v151;
  if (v151)
  {
    v32 = (_QWORD *)operator new();
    v33 = v151;
    *v32 = &unk_1EA99F888;
    v32[1] = 0;
    v32[2] = 0;
    v32[3] = v33;
  }
  else
  {
    v32 = 0;
  }
  v153 = v32;
  v151 = 0;
  v34 = v22[2];
  v35 = v22[1];
  if (v35 >= v34)
  {
    v37 = (v35 - *v22) >> 4;
    v38 = v37 + 1;
    if ((unint64_t)(v37 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v39 = v34 - *v22;
    if (v39 >> 3 > v38)
      v38 = v39 >> 3;
    if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0)
      v40 = 0xFFFFFFFFFFFFFFFLL;
    else
      v40 = v38;
    v169[1] = v22 + 2;
    v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v22 + 2), v40);
    v43 = (uint64_t *)&v41[16 * v37];
    *v43 = v31;
    v43[1] = (uint64_t)v32;
    v152 = 0;
    v153 = 0;
    v45 = *v22;
    v44 = v22[1];
    if (v44 == *v22)
    {
      v48 = v22[1];
      v46 = &v41[16 * v37];
    }
    else
    {
      v46 = &v41[16 * v37];
      do
      {
        v47 = *((_OWORD *)v44 - 1);
        v44 -= 16;
        *((_OWORD *)v46 - 1) = v47;
        v46 -= 16;
        *(_QWORD *)v44 = 0;
        *((_QWORD *)v44 + 1) = 0;
      }
      while (v44 != v45);
      v48 = *v22;
      v44 = v22[1];
    }
    v36 = (char *)(v43 + 2);
    *v22 = v46;
    v166 = v48;
    v167 = (uint64_t)v48;
    v22[1] = (char *)(v43 + 2);
    v168 = (uint64_t)v44;
    v49 = v22[2];
    v22[2] = &v41[16 * v42];
    v169[0] = v49;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v166);
  }
  else
  {
    *(_QWORD *)v35 = v31;
    *((_QWORD *)v35 + 1) = v32;
    v36 = v35 + 16;
    v152 = 0;
    v153 = 0;
  }
  v22[1] = v36;
  v50 = v151;
  v151 = 0;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  v51 = (std::__shared_weak_count *)v150.n128_u64[1];
  if (v150.n128_u64[1])
  {
    v52 = (unint64_t *)(v150.n128_u64[1] + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  if (v147)
  {
    v148 = v147;
    operator delete(v147);
  }
  if (__p)
  {
    v156 = __p;
    operator delete(__p);
  }
  if (v158)
  {
    v159 = v158;
    operator delete(v158);
  }
  if (v161)
  {
    v162 = v161;
    operator delete(v161);
  }
  *(_OWORD *)v145 = *(_OWORD *)a2;
  v146 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v54 = v165;
  *(_QWORD *)&v144 = v165;
  if (v165)
  {
    v55 = (_QWORD *)operator new();
    *v55 = &unk_1EA99F8E8;
    v55[1] = 0;
    v55[2] = 0;
    v55[3] = v54;
  }
  else
  {
    v55 = 0;
  }
  *((_QWORD *)&v144 + 1) = v55;
  v165 = 0;
  *(_QWORD *)&v143 = v154;
  if (v154)
  {
    v56 = (_QWORD *)operator new();
    v57 = v154;
    *v56 = &unk_1EA99F948;
    v56[1] = 0;
    v56[2] = 0;
    v56[3] = v57;
  }
  else
  {
    v56 = 0;
  }
  *((_QWORD *)&v143 + 1) = v56;
  v154 = 0;
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v182, a3);
  v181 = 0;
  MIL::IROperator::Make((__int128 *)v145, &v144, &v143, (uint64_t)v182, (uint64_t)v180, a4);
  v58 = v181;
  if (v181 == v180)
  {
    v59 = 4;
    v58 = v180;
  }
  else
  {
    if (!v181)
      goto LABEL_59;
    v59 = 5;
  }
  (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_59:
  v60 = v183;
  if (v183 == v182)
  {
    v61 = 4;
    v60 = v182;
    goto LABEL_63;
  }
  if (v183)
  {
    v61 = 5;
LABEL_63:
    (*(void (**)(void))(*v60 + 8 * v61))();
  }
  v62 = (std::__shared_weak_count *)*((_QWORD *)&v143 + 1);
  if (*((_QWORD *)&v143 + 1))
  {
    v63 = (unint64_t *)(*((_QWORD *)&v143 + 1) + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v65 = (std::__shared_weak_count *)*((_QWORD *)&v144 + 1);
  if (*((_QWORD *)&v144 + 1))
  {
    v66 = (unint64_t *)(*((_QWORD *)&v144 + 1) + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  if (SHIBYTE(v146) < 0)
    operator delete(v145[0]);
  v161 = 0;
  v68 = (_OWORD *)operator new();
  *v68 = 0u;
  v68[1] = 0u;
  *((_DWORD *)v68 + 8) = 1065353216;
  v161 = v68;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v142);
  MIL::IRParameter::Make(&v142, (uint64_t *)&v166);
  v69 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v68, "minimum_compute_type", (uint64_t *)&v166);
  v70 = v166;
  v166 = 0;
  if (v70)
    (*(void (**)(void *))(*(_QWORD *)v70 + 8))(v70);
  v71 = (std::__shared_weak_count *)v142.n128_u64[1];
  if (v142.n128_u64[1])
  {
    v72 = (unint64_t *)(v142.n128_u64[1] + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v69 + 5) + 32))(*((_QWORD *)v69 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v69 + 5) + 48))(*((_QWORD *)v69 + 5), 1);
  v74 = *a4;
  v75 = (std::__shared_weak_count_vtbl *)v161;
  v140 = v161;
  if (v161)
  {
    v76 = (std::__shared_weak_count *)operator new();
    v76->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v76->__shared_owners_ = 0;
    v76->__shared_weak_owners_ = 0;
    v76[1].__vftable = v75;
  }
  else
  {
    v76 = 0;
  }
  v141 = v76;
  v161 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v74 + 184))(v74, &v140);
  v77 = v141;
  if (v141)
  {
    p_shared_owners = (unint64_t *)&v141->__shared_owners_;
    do
      v79 = __ldaxr(p_shared_owners);
    while (__stlxr(v79 - 1, p_shared_owners));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v80 = *a4;
  std::string::basic_string[abi:ne180100]<0>(&v166, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v166, (uint64_t)v178);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v80 + 200))(v80, v178);
  v81 = v179;
  if (v179 == v178)
  {
    v82 = 4;
    v81 = v178;
  }
  else
  {
    if (!v179)
      goto LABEL_96;
    v82 = 5;
  }
  (*(void (**)(void))(*v81 + 8 * v82))();
LABEL_96:
  if (SHIBYTE(v168) < 0)
    operator delete(v166);
  MIL::Validation::TensorDTypeConstraints::Make(&v166);
  v83 = v166;
  std::string::basic_string[abi:ne180100]<0>(v136, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v136, 0, (uint64_t *)&Scalar);
  v138 = Scalar;
  if (Scalar)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = Scalar;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v139 = v84;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v134, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v83 + 24))(v83, &v138, v134);
  if (v135 < 0)
    operator delete(v134[0]);
  v86 = v139;
  if (v139)
  {
    v87 = (unint64_t *)&v139->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = Scalar;
  Scalar = 0;
  if (v89)
    (*((void (**)(std::__shared_weak_count_vtbl *))v89->~__shared_weak_count + 1))(v89);
  if (v137 < 0)
    operator delete(v136[0]);
  v90 = v166;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v132 = Scalar;
  if (Scalar)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = Scalar;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v133 = v91;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v130, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v90 + 24))(v90, &v132, v130);
  if (v131 < 0)
    operator delete(v130[0]);
  v93 = v133;
  if (v133)
  {
    v94 = (unint64_t *)&v133->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = Scalar;
  Scalar = 0;
  if (v96)
    (*((void (**)(std::__shared_weak_count_vtbl *))v96->~__shared_weak_count + 1))(v96);
  v97 = *a4;
  v128 = v166;
  if (v166)
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = (std::__shared_weak_count_vtbl *)v166;
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = v99;
  }
  else
  {
    v98 = 0;
  }
  v129 = v98;
  v166 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v97 + 56))(v97, &v128);
  v100 = v129;
  if (v129)
  {
    v101 = (unint64_t *)&v129->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = v166;
  v166 = 0;
  if (v103)
    (*(void (**)(void *))(*(_QWORD *)v103 + 8))(v103);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v158);
  v104 = v158;
  std::string::basic_string[abi:ne180100]<0>(v124, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v124, 1, (uint64_t *)&__p);
  v126 = __p;
  if (__p)
  {
    v105 = (std::__shared_weak_count *)operator new();
    v106 = (std::__shared_weak_count_vtbl *)__p;
    v105->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v105->__shared_owners_ = 0;
    v105->__shared_weak_owners_ = 0;
    v105[1].__vftable = v106;
  }
  else
  {
    v105 = 0;
  }
  v127 = v105;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&v166, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v169, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v170, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v171, "int32");
  std::string::basic_string[abi:ne180100]<0>(v172, "int8");
  std::string::basic_string[abi:ne180100]<0>(v173, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v166, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v104 + 24))(v104, &v126, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v173[i + 2]) < 0)
      operator delete((void *)v173[i]);
  }
  v108 = v127;
  if (v127)
  {
    v109 = (unint64_t *)&v127->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = __p;
  __p = 0;
  if (v111)
    (*(void (**)(void *))(*(_QWORD *)v111 + 8))(v111);
  if (v125 < 0)
    operator delete(v124[0]);
  v112 = *a4;
  v122 = v158;
  if (v158)
  {
    v113 = (std::__shared_weak_count *)operator new();
    v114 = (std::__shared_weak_count_vtbl *)v158;
    v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v113->__shared_owners_ = 0;
    v113->__shared_weak_owners_ = 0;
    v113[1].__vftable = v114;
  }
  else
  {
    v113 = 0;
  }
  v123 = v113;
  v158 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v112 + 56))(v112, &v122);
  v115 = v123;
  if (v123)
  {
    v116 = (unint64_t *)&v123->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = v158;
  v158 = 0;
  if (v118)
    (*(void (**)(void *))(*(_QWORD *)v118 + 8))(v118);
  if (v161)
  {
    v119 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v161);
    MEMORY[0x1E0C023A0](v119, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v154, 0);
  result = v165;
  if (v165)
  {
    v121 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v165);
    return MEMORY[0x1E0C023A0](v121, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09AA020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void **a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  uint64_t *v62;
  void *v64;
  uint64_t v65;

  v64 = a54;
  a54 = 0;
  if (v64)
    (*(void (**)(void *))(*(_QWORD *)v64 + 8))(v64);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a57, 0);
  v65 = *v62;
  *v62 = 0;
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a62, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::Abs::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  char **v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t *v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  char *v46;
  char *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  char **v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  _OWORD *v66;
  unsigned __int8 *v67;
  void *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  std::__shared_weak_count_vtbl *v73;
  std::__shared_weak_count *v74;
  std::__shared_weak_count *v75;
  unint64_t *p_shared_owners;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  void *v84;
  std::__shared_weak_count *v85;
  std::__shared_weak_count_vtbl *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count_vtbl *v90;
  void *v91;
  std::__shared_weak_count *v92;
  std::__shared_weak_count_vtbl *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count_vtbl *v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  std::__shared_weak_count_vtbl *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  void *v104;
  void *v105;
  std::__shared_weak_count *v106;
  std::__shared_weak_count_vtbl *v107;
  uint64_t i;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t result;
  uint64_t v122;
  void *v123;
  std::__shared_weak_count *v124;
  void *v125[2];
  char v126;
  void *v127;
  std::__shared_weak_count *v128;
  void *v129;
  std::__shared_weak_count *v130;
  void *v131[2];
  char v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  void *v135[2];
  char v136;
  void *v137[2];
  char v138;
  std::__shared_weak_count_vtbl *v139;
  std::__shared_weak_count *v140;
  void *v141;
  std::__shared_weak_count *v142;
  __n128 v143;
  __int128 v144;
  __int128 v145;
  void *v146[2];
  uint64_t v147;
  void *v148;
  void *v149;
  _QWORD *v150;
  __n128 v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  char **v155;
  void *__p;
  void *v157;
  _QWORD *v158;
  void *v159;
  void *v160;
  _QWORD *v161;
  void *v162;
  void *v163;
  _QWORD *v164;
  __n128 v165;
  uint64_t v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD v170[3];
  uint64_t v171[3];
  uint64_t v172[3];
  uint64_t v173[3];
  _QWORD v174[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD v179[3];
  _QWORD *v180;
  _BYTE v181[24];
  _BYTE *v182;
  _BYTE v183[24];
  _BYTE *v184;
  _QWORD v185[3];
  _QWORD *v186;
  uint64_t v187;

  v187 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v166 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v176 = (uint64_t)&v8->~__shared_weak_count_0;
  v177 = (uint64_t)&v8->~__shared_weak_count_0;
  v167 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v162 = v10;
  *v10 = v9;
  v163 = v10 + 1;
  v164 = v10 + 1;
  v168 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v162);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v159 = v12;
  *v12 = v11;
  v160 = v12 + 1;
  v161 = v12 + 1;
  v169 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v159);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v157 = v14 + 1;
  v158 = v14 + 1;
  v170[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v167, 4, &v165);
  MIL::IRParameter::Make(&v165, (uint64_t *)&v148);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v148);
  v15 = v148;
  v148 = 0;
  if (v15)
    (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v165.n128_u64[1];
  if (v165.n128_u64[1])
  {
    v17 = (unint64_t *)(v165.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v157 = __p;
    operator delete(__p);
  }
  if (v159)
  {
    v160 = v159;
    operator delete(v159);
  }
  if (v162)
  {
    v163 = v162;
    operator delete(v162);
  }
  if (Scalar)
  {
    v176 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v155 = 0;
  v19 = operator new();
  *(_QWORD *)v19 = 0;
  *(_QWORD *)(v19 + 8) = 0;
  *(_QWORD *)(v19 + 16) = 0;
  v167 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v155, (void **)v19);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v167, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v155, 1uLL);
  v20 = v155;
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  v162 = v22;
  *v22 = v21;
  v163 = v22 + 1;
  v164 = v22 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v162);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  v159 = v24;
  *v24 = v23;
  v160 = v24 + 1;
  v161 = v24 + 1;
  v176 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v159);
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = operator new(8uLL);
  __p = v26;
  *v26 = v25;
  v157 = v26 + 1;
  v158 = v26 + 1;
  v177 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v27 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v28 = operator new(8uLL);
  v148 = v28;
  *v28 = v27;
  v149 = v28 + 1;
  v150 = v28 + 1;
  v178 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v148);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 4, &v151);
  MIL::IRParameter::Make(&v151, &v152);
  v29 = v152;
  v153 = v152;
  if (v152)
  {
    v30 = (_QWORD *)operator new();
    v31 = v152;
    *v30 = &unk_1EA99F888;
    v30[1] = 0;
    v30[2] = 0;
    v30[3] = v31;
  }
  else
  {
    v30 = 0;
  }
  v154 = v30;
  v152 = 0;
  v32 = v20[2];
  v33 = v20[1];
  if (v33 >= v32)
  {
    v35 = (v33 - *v20) >> 4;
    v36 = v35 + 1;
    if ((unint64_t)(v35 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v37 = v32 - *v20;
    if (v37 >> 3 > v36)
      v36 = v37 >> 3;
    if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0)
      v38 = 0xFFFFFFFFFFFFFFFLL;
    else
      v38 = v36;
    v170[1] = v20 + 2;
    v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v20 + 2), v38);
    v41 = (uint64_t *)&v39[16 * v35];
    *v41 = v29;
    v41[1] = (uint64_t)v30;
    v153 = 0;
    v154 = 0;
    v43 = *v20;
    v42 = v20[1];
    if (v42 == *v20)
    {
      v46 = v20[1];
      v44 = &v39[16 * v35];
    }
    else
    {
      v44 = &v39[16 * v35];
      do
      {
        v45 = *((_OWORD *)v42 - 1);
        v42 -= 16;
        *((_OWORD *)v44 - 1) = v45;
        v44 -= 16;
        *(_QWORD *)v42 = 0;
        *((_QWORD *)v42 + 1) = 0;
      }
      while (v42 != v43);
      v46 = *v20;
      v42 = v20[1];
    }
    v34 = (char *)(v41 + 2);
    *v20 = v44;
    v167 = v46;
    v168 = (uint64_t)v46;
    v20[1] = (char *)(v41 + 2);
    v169 = (uint64_t)v42;
    v47 = v20[2];
    v20[2] = &v39[16 * v40];
    v170[0] = v47;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v167);
  }
  else
  {
    *(_QWORD *)v33 = v29;
    *((_QWORD *)v33 + 1) = v30;
    v34 = v33 + 16;
    v153 = 0;
    v154 = 0;
  }
  v20[1] = v34;
  v48 = v152;
  v152 = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  v49 = (std::__shared_weak_count *)v151.n128_u64[1];
  if (v151.n128_u64[1])
  {
    v50 = (unint64_t *)(v151.n128_u64[1] + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (v148)
  {
    v149 = v148;
    operator delete(v148);
  }
  if (__p)
  {
    v157 = __p;
    operator delete(__p);
  }
  if (v159)
  {
    v160 = v159;
    operator delete(v159);
  }
  if (v162)
  {
    v163 = v162;
    operator delete(v162);
  }
  *(_OWORD *)v146 = *(_OWORD *)a2;
  v147 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v52 = v166;
  *(_QWORD *)&v145 = v166;
  if (v166)
  {
    v53 = (_QWORD *)operator new();
    *v53 = &unk_1EA99F8E8;
    v53[1] = 0;
    v53[2] = 0;
    v53[3] = v52;
  }
  else
  {
    v53 = 0;
  }
  *((_QWORD *)&v145 + 1) = v53;
  v166 = 0;
  *(_QWORD *)&v144 = v155;
  if (v155)
  {
    v54 = (_QWORD *)operator new();
    v55 = v155;
    *v54 = &unk_1EA99F948;
    v54[1] = 0;
    v54[2] = 0;
    v54[3] = v55;
  }
  else
  {
    v54 = 0;
  }
  *((_QWORD *)&v144 + 1) = v54;
  v155 = 0;
  v185[0] = &unk_1EA99FAC8;
  v185[1] = MIL::Validation::ValidateViaTypeInference;
  v186 = v185;
  v184 = 0;
  MIL::IROperator::Make((__int128 *)v146, &v145, &v144, (uint64_t)v185, (uint64_t)v183, a3);
  v56 = v184;
  if (v184 == v183)
  {
    v57 = 4;
    v56 = v183;
  }
  else
  {
    if (!v184)
      goto LABEL_59;
    v57 = 5;
  }
  (*(void (**)(void))(*v56 + 8 * v57))();
LABEL_59:
  v58 = v186;
  if (v186 == v185)
  {
    v59 = 4;
    v58 = v185;
    goto LABEL_63;
  }
  if (v186)
  {
    v59 = 5;
LABEL_63:
    (*(void (**)(void))(*v58 + 8 * v59))();
  }
  v60 = (std::__shared_weak_count *)*((_QWORD *)&v144 + 1);
  if (*((_QWORD *)&v144 + 1))
  {
    v61 = (unint64_t *)(*((_QWORD *)&v144 + 1) + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
  if (*((_QWORD *)&v145 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  if (SHIBYTE(v147) < 0)
    operator delete(v146[0]);
  v162 = 0;
  v66 = (_OWORD *)operator new();
  *v66 = 0u;
  v66[1] = 0u;
  *((_DWORD *)v66 + 8) = 1065353216;
  v162 = v66;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v143);
  MIL::IRParameter::Make(&v143, (uint64_t *)&v167);
  v67 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v66, "minimum_compute_type", (uint64_t *)&v167);
  v68 = v167;
  v167 = 0;
  if (v68)
    (*(void (**)(void *))(*(_QWORD *)v68 + 8))(v68);
  v69 = (std::__shared_weak_count *)v143.n128_u64[1];
  if (v143.n128_u64[1])
  {
    v70 = (unint64_t *)(v143.n128_u64[1] + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v67 + 5) + 32))(*((_QWORD *)v67 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v67 + 5) + 48))(*((_QWORD *)v67 + 5), 1);
  v72 = *a3;
  v73 = (std::__shared_weak_count_vtbl *)v162;
  v141 = v162;
  if (v162)
  {
    v74 = (std::__shared_weak_count *)operator new();
    v74->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v74->__shared_owners_ = 0;
    v74->__shared_weak_owners_ = 0;
    v74[1].__vftable = v73;
  }
  else
  {
    v74 = 0;
  }
  v142 = v74;
  v162 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v72 + 184))(v72, &v141);
  v75 = v142;
  if (v142)
  {
    p_shared_owners = (unint64_t *)&v142->__shared_owners_;
    do
      v77 = __ldaxr(p_shared_owners);
    while (__stlxr(v77 - 1, p_shared_owners));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v78 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v167, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v167, (uint64_t)v181);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v78 + 200))(v78, v181);
  v79 = v182;
  if (v182 == v181)
  {
    v80 = 4;
    v79 = v181;
  }
  else
  {
    if (!v182)
      goto LABEL_96;
    v80 = 5;
  }
  (*(void (**)(void))(*v79 + 8 * v80))();
LABEL_96:
  if (SHIBYTE(v169) < 0)
    operator delete(v167);
  v81 = *a3;
  v179[0] = &off_1EA9A00F8;
  v179[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceAbs;
  v180 = v179;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v81 + 216))(v81, v179);
  v82 = v180;
  if (v180 == v179)
  {
    v83 = 4;
    v82 = v179;
  }
  else
  {
    if (!v180)
      goto LABEL_103;
    v83 = 5;
  }
  (*(void (**)(void))(*v82 + 8 * v83))();
LABEL_103:
  MIL::Validation::TensorDTypeConstraints::Make(&v167);
  v84 = v167;
  std::string::basic_string[abi:ne180100]<0>(v137, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v137, 0, (uint64_t *)&Scalar);
  v139 = Scalar;
  if (Scalar)
  {
    v85 = (std::__shared_weak_count *)operator new();
    v86 = Scalar;
    v85->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v85->__shared_owners_ = 0;
    v85->__shared_weak_owners_ = 0;
    v85[1].__vftable = v86;
  }
  else
  {
    v85 = 0;
  }
  v140 = v85;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v135, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v84 + 24))(v84, &v139, v135);
  if (v136 < 0)
    operator delete(v135[0]);
  v87 = v140;
  if (v140)
  {
    v88 = (unint64_t *)&v140->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v90 = Scalar;
  Scalar = 0;
  if (v90)
    (*((void (**)(std::__shared_weak_count_vtbl *))v90->~__shared_weak_count + 1))(v90);
  if (v138 < 0)
    operator delete(v137[0]);
  v91 = v167;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v133 = Scalar;
  if (Scalar)
  {
    v92 = (std::__shared_weak_count *)operator new();
    v93 = Scalar;
    v92->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v92->__shared_owners_ = 0;
    v92->__shared_weak_owners_ = 0;
    v92[1].__vftable = v93;
  }
  else
  {
    v92 = 0;
  }
  v134 = v92;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v131, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v91 + 24))(v91, &v133, v131);
  if (v132 < 0)
    operator delete(v131[0]);
  v94 = v134;
  if (v134)
  {
    v95 = (unint64_t *)&v134->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v97 = Scalar;
  Scalar = 0;
  if (v97)
    (*((void (**)(std::__shared_weak_count_vtbl *))v97->~__shared_weak_count + 1))(v97);
  v98 = *a3;
  v129 = v167;
  if (v167)
  {
    v99 = (std::__shared_weak_count *)operator new();
    v100 = (std::__shared_weak_count_vtbl *)v167;
    v99->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v99->__shared_owners_ = 0;
    v99->__shared_weak_owners_ = 0;
    v99[1].__vftable = v100;
  }
  else
  {
    v99 = 0;
  }
  v130 = v99;
  v167 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v98 + 56))(v98, &v129);
  v101 = v130;
  if (v130)
  {
    v102 = (unint64_t *)&v130->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = v167;
  v167 = 0;
  if (v104)
    (*(void (**)(void *))(*(_QWORD *)v104 + 8))(v104);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v159);
  v105 = v159;
  std::string::basic_string[abi:ne180100]<0>(v125, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v125, 1, (uint64_t *)&__p);
  v127 = __p;
  if (__p)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = (std::__shared_weak_count_vtbl *)__p;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = v107;
  }
  else
  {
    v106 = 0;
  }
  v128 = v106;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&v167, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v170, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v171, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v172, "int32");
  std::string::basic_string[abi:ne180100]<0>(v173, "int8");
  std::string::basic_string[abi:ne180100]<0>(v174, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v167, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v105 + 24))(v105, &v127, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v174[i + 2]) < 0)
      operator delete((void *)v174[i]);
  }
  v109 = v128;
  if (v128)
  {
    v110 = (unint64_t *)&v128->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = __p;
  __p = 0;
  if (v112)
    (*(void (**)(void *))(*(_QWORD *)v112 + 8))(v112);
  if (v126 < 0)
    operator delete(v125[0]);
  v113 = *a3;
  v123 = v159;
  if (v159)
  {
    v114 = (std::__shared_weak_count *)operator new();
    v115 = (std::__shared_weak_count_vtbl *)v159;
    v114->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v114->__shared_owners_ = 0;
    v114->__shared_weak_owners_ = 0;
    v114[1].__vftable = v115;
  }
  else
  {
    v114 = 0;
  }
  v124 = v114;
  v159 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v113 + 56))(v113, &v123);
  v116 = v124;
  if (v124)
  {
    v117 = (unint64_t *)&v124->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = v159;
  v159 = 0;
  if (v119)
    (*(void (**)(void *))(*(_QWORD *)v119 + 8))(v119);
  if (v162)
  {
    v120 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v162);
    MEMORY[0x1E0C023A0](v120, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v155, 0);
  result = v166;
  if (v166)
  {
    v122 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v166);
    return MEMORY[0x1E0C023A0](v122, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09AB384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void **a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  uint64_t *v62;
  void *v64;
  uint64_t v65;

  v64 = a54;
  a54 = 0;
  if (v64)
    (*(void (**)(void *))(*(_QWORD *)v64 + 8))(v64);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a57, 0);
  v65 = *v62;
  *v62 = 0;
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a62, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::Exp2::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  char **v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t *v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  char *v46;
  char *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  char **v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  _OWORD *v66;
  unsigned __int8 *v67;
  void *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  std::__shared_weak_count_vtbl *v73;
  std::__shared_weak_count *v74;
  std::__shared_weak_count *v75;
  unint64_t *p_shared_owners;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  void *v84;
  std::__shared_weak_count *v85;
  std::__shared_weak_count_vtbl *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count_vtbl *v90;
  void *v91;
  std::__shared_weak_count *v92;
  std::__shared_weak_count_vtbl *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count_vtbl *v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  std::__shared_weak_count_vtbl *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  void *v104;
  void *v105;
  std::__shared_weak_count *v106;
  std::__shared_weak_count_vtbl *v107;
  uint64_t i;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t result;
  uint64_t v122;
  void *v123;
  std::__shared_weak_count *v124;
  void *v125[2];
  char v126;
  void *v127;
  std::__shared_weak_count *v128;
  void *v129;
  std::__shared_weak_count *v130;
  void *v131[2];
  char v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  void *v135[2];
  char v136;
  void *v137[2];
  char v138;
  std::__shared_weak_count_vtbl *v139;
  std::__shared_weak_count *v140;
  void *v141;
  std::__shared_weak_count *v142;
  __n128 v143;
  __int128 v144;
  __int128 v145;
  void *v146[2];
  uint64_t v147;
  void *v148;
  void *v149;
  _QWORD *v150;
  __n128 v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  char **v155;
  void *__p;
  void *v157;
  _QWORD *v158;
  void *v159;
  void *v160;
  _QWORD *v161;
  void *v162;
  void *v163;
  _QWORD *v164;
  __n128 v165;
  uint64_t v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD v170[3];
  uint64_t v171[3];
  uint64_t v172[3];
  uint64_t v173[3];
  _QWORD v174[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD v179[3];
  _QWORD *v180;
  _BYTE v181[24];
  _BYTE *v182;
  _BYTE v183[24];
  _BYTE *v184;
  _QWORD v185[3];
  _QWORD *v186;
  uint64_t v187;

  v187 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v166 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v176 = (uint64_t)&v8->~__shared_weak_count_0;
  v177 = (uint64_t)&v8->~__shared_weak_count_0;
  v167 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v162 = v10;
  *v10 = v9;
  v163 = v10 + 1;
  v164 = v10 + 1;
  v168 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v162);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v159 = v12;
  *v12 = v11;
  v160 = v12 + 1;
  v161 = v12 + 1;
  v169 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v159);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v157 = v14 + 1;
  v158 = v14 + 1;
  v170[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v167, 4, &v165);
  MIL::IRParameter::Make(&v165, (uint64_t *)&v148);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v148);
  v15 = v148;
  v148 = 0;
  if (v15)
    (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v165.n128_u64[1];
  if (v165.n128_u64[1])
  {
    v17 = (unint64_t *)(v165.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v157 = __p;
    operator delete(__p);
  }
  if (v159)
  {
    v160 = v159;
    operator delete(v159);
  }
  if (v162)
  {
    v163 = v162;
    operator delete(v162);
  }
  if (Scalar)
  {
    v176 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v155 = 0;
  v19 = operator new();
  *(_QWORD *)v19 = 0;
  *(_QWORD *)(v19 + 8) = 0;
  *(_QWORD *)(v19 + 16) = 0;
  v167 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v155, (void **)v19);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v167, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v155, 1uLL);
  v20 = v155;
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  v162 = v22;
  *v22 = v21;
  v163 = v22 + 1;
  v164 = v22 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v162);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  v159 = v24;
  *v24 = v23;
  v160 = v24 + 1;
  v161 = v24 + 1;
  v176 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v159);
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = operator new(8uLL);
  __p = v26;
  *v26 = v25;
  v157 = v26 + 1;
  v158 = v26 + 1;
  v177 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v27 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v28 = operator new(8uLL);
  v148 = v28;
  *v28 = v27;
  v149 = v28 + 1;
  v150 = v28 + 1;
  v178 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v148);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 4, &v151);
  MIL::IRParameter::Make(&v151, &v152);
  v29 = v152;
  v153 = v152;
  if (v152)
  {
    v30 = (_QWORD *)operator new();
    v31 = v152;
    *v30 = &unk_1EA99F888;
    v30[1] = 0;
    v30[2] = 0;
    v30[3] = v31;
  }
  else
  {
    v30 = 0;
  }
  v154 = v30;
  v152 = 0;
  v32 = v20[2];
  v33 = v20[1];
  if (v33 >= v32)
  {
    v35 = (v33 - *v20) >> 4;
    v36 = v35 + 1;
    if ((unint64_t)(v35 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v37 = v32 - *v20;
    if (v37 >> 3 > v36)
      v36 = v37 >> 3;
    if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0)
      v38 = 0xFFFFFFFFFFFFFFFLL;
    else
      v38 = v36;
    v170[1] = v20 + 2;
    v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v20 + 2), v38);
    v41 = (uint64_t *)&v39[16 * v35];
    *v41 = v29;
    v41[1] = (uint64_t)v30;
    v153 = 0;
    v154 = 0;
    v43 = *v20;
    v42 = v20[1];
    if (v42 == *v20)
    {
      v46 = v20[1];
      v44 = &v39[16 * v35];
    }
    else
    {
      v44 = &v39[16 * v35];
      do
      {
        v45 = *((_OWORD *)v42 - 1);
        v42 -= 16;
        *((_OWORD *)v44 - 1) = v45;
        v44 -= 16;
        *(_QWORD *)v42 = 0;
        *((_QWORD *)v42 + 1) = 0;
      }
      while (v42 != v43);
      v46 = *v20;
      v42 = v20[1];
    }
    v34 = (char *)(v41 + 2);
    *v20 = v44;
    v167 = v46;
    v168 = (uint64_t)v46;
    v20[1] = (char *)(v41 + 2);
    v169 = (uint64_t)v42;
    v47 = v20[2];
    v20[2] = &v39[16 * v40];
    v170[0] = v47;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v167);
  }
  else
  {
    *(_QWORD *)v33 = v29;
    *((_QWORD *)v33 + 1) = v30;
    v34 = v33 + 16;
    v153 = 0;
    v154 = 0;
  }
  v20[1] = v34;
  v48 = v152;
  v152 = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  v49 = (std::__shared_weak_count *)v151.n128_u64[1];
  if (v151.n128_u64[1])
  {
    v50 = (unint64_t *)(v151.n128_u64[1] + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (v148)
  {
    v149 = v148;
    operator delete(v148);
  }
  if (__p)
  {
    v157 = __p;
    operator delete(__p);
  }
  if (v159)
  {
    v160 = v159;
    operator delete(v159);
  }
  if (v162)
  {
    v163 = v162;
    operator delete(v162);
  }
  *(_OWORD *)v146 = *(_OWORD *)a2;
  v147 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v52 = v166;
  *(_QWORD *)&v145 = v166;
  if (v166)
  {
    v53 = (_QWORD *)operator new();
    *v53 = &unk_1EA99F8E8;
    v53[1] = 0;
    v53[2] = 0;
    v53[3] = v52;
  }
  else
  {
    v53 = 0;
  }
  *((_QWORD *)&v145 + 1) = v53;
  v166 = 0;
  *(_QWORD *)&v144 = v155;
  if (v155)
  {
    v54 = (_QWORD *)operator new();
    v55 = v155;
    *v54 = &unk_1EA99F948;
    v54[1] = 0;
    v54[2] = 0;
    v54[3] = v55;
  }
  else
  {
    v54 = 0;
  }
  *((_QWORD *)&v144 + 1) = v54;
  v155 = 0;
  v185[0] = &unk_1EA99FAC8;
  v185[1] = MIL::Validation::ValidateViaTypeInference;
  v186 = v185;
  v184 = 0;
  MIL::IROperator::Make((__int128 *)v146, &v145, &v144, (uint64_t)v185, (uint64_t)v183, a3);
  v56 = v184;
  if (v184 == v183)
  {
    v57 = 4;
    v56 = v183;
  }
  else
  {
    if (!v184)
      goto LABEL_59;
    v57 = 5;
  }
  (*(void (**)(void))(*v56 + 8 * v57))();
LABEL_59:
  v58 = v186;
  if (v186 == v185)
  {
    v59 = 4;
    v58 = v185;
    goto LABEL_63;
  }
  if (v186)
  {
    v59 = 5;
LABEL_63:
    (*(void (**)(void))(*v58 + 8 * v59))();
  }
  v60 = (std::__shared_weak_count *)*((_QWORD *)&v144 + 1);
  if (*((_QWORD *)&v144 + 1))
  {
    v61 = (unint64_t *)(*((_QWORD *)&v144 + 1) + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
  if (*((_QWORD *)&v145 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  if (SHIBYTE(v147) < 0)
    operator delete(v146[0]);
  v162 = 0;
  v66 = (_OWORD *)operator new();
  *v66 = 0u;
  v66[1] = 0u;
  *((_DWORD *)v66 + 8) = 1065353216;
  v162 = v66;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v143);
  MIL::IRParameter::Make(&v143, (uint64_t *)&v167);
  v67 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v66, "minimum_compute_type", (uint64_t *)&v167);
  v68 = v167;
  v167 = 0;
  if (v68)
    (*(void (**)(void *))(*(_QWORD *)v68 + 8))(v68);
  v69 = (std::__shared_weak_count *)v143.n128_u64[1];
  if (v143.n128_u64[1])
  {
    v70 = (unint64_t *)(v143.n128_u64[1] + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v67 + 5) + 32))(*((_QWORD *)v67 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v67 + 5) + 48))(*((_QWORD *)v67 + 5), 1);
  v72 = *a3;
  v73 = (std::__shared_weak_count_vtbl *)v162;
  v141 = v162;
  if (v162)
  {
    v74 = (std::__shared_weak_count *)operator new();
    v74->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v74->__shared_owners_ = 0;
    v74->__shared_weak_owners_ = 0;
    v74[1].__vftable = v73;
  }
  else
  {
    v74 = 0;
  }
  v142 = v74;
  v162 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v72 + 184))(v72, &v141);
  v75 = v142;
  if (v142)
  {
    p_shared_owners = (unint64_t *)&v142->__shared_owners_;
    do
      v77 = __ldaxr(p_shared_owners);
    while (__stlxr(v77 - 1, p_shared_owners));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v78 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v167, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v167, (uint64_t)v181);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v78 + 200))(v78, v181);
  v79 = v182;
  if (v182 == v181)
  {
    v80 = 4;
    v79 = v181;
  }
  else
  {
    if (!v182)
      goto LABEL_96;
    v80 = 5;
  }
  (*(void (**)(void))(*v79 + 8 * v80))();
LABEL_96:
  if (SHIBYTE(v169) < 0)
    operator delete(v167);
  v81 = *a3;
  v179[0] = &off_1EA9A00F8;
  v179[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceExp2;
  v180 = v179;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v81 + 216))(v81, v179);
  v82 = v180;
  if (v180 == v179)
  {
    v83 = 4;
    v82 = v179;
  }
  else
  {
    if (!v180)
      goto LABEL_103;
    v83 = 5;
  }
  (*(void (**)(void))(*v82 + 8 * v83))();
LABEL_103:
  MIL::Validation::TensorDTypeConstraints::Make(&v167);
  v84 = v167;
  std::string::basic_string[abi:ne180100]<0>(v137, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v137, 0, (uint64_t *)&Scalar);
  v139 = Scalar;
  if (Scalar)
  {
    v85 = (std::__shared_weak_count *)operator new();
    v86 = Scalar;
    v85->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v85->__shared_owners_ = 0;
    v85->__shared_weak_owners_ = 0;
    v85[1].__vftable = v86;
  }
  else
  {
    v85 = 0;
  }
  v140 = v85;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v135, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v84 + 24))(v84, &v139, v135);
  if (v136 < 0)
    operator delete(v135[0]);
  v87 = v140;
  if (v140)
  {
    v88 = (unint64_t *)&v140->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v90 = Scalar;
  Scalar = 0;
  if (v90)
    (*((void (**)(std::__shared_weak_count_vtbl *))v90->~__shared_weak_count + 1))(v90);
  if (v138 < 0)
    operator delete(v137[0]);
  v91 = v167;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v133 = Scalar;
  if (Scalar)
  {
    v92 = (std::__shared_weak_count *)operator new();
    v93 = Scalar;
    v92->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v92->__shared_owners_ = 0;
    v92->__shared_weak_owners_ = 0;
    v92[1].__vftable = v93;
  }
  else
  {
    v92 = 0;
  }
  v134 = v92;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v131, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v91 + 24))(v91, &v133, v131);
  if (v132 < 0)
    operator delete(v131[0]);
  v94 = v134;
  if (v134)
  {
    v95 = (unint64_t *)&v134->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v97 = Scalar;
  Scalar = 0;
  if (v97)
    (*((void (**)(std::__shared_weak_count_vtbl *))v97->~__shared_weak_count + 1))(v97);
  v98 = *a3;
  v129 = v167;
  if (v167)
  {
    v99 = (std::__shared_weak_count *)operator new();
    v100 = (std::__shared_weak_count_vtbl *)v167;
    v99->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v99->__shared_owners_ = 0;
    v99->__shared_weak_owners_ = 0;
    v99[1].__vftable = v100;
  }
  else
  {
    v99 = 0;
  }
  v130 = v99;
  v167 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v98 + 56))(v98, &v129);
  v101 = v130;
  if (v130)
  {
    v102 = (unint64_t *)&v130->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = v167;
  v167 = 0;
  if (v104)
    (*(void (**)(void *))(*(_QWORD *)v104 + 8))(v104);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v159);
  v105 = v159;
  std::string::basic_string[abi:ne180100]<0>(v125, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v125, 1, (uint64_t *)&__p);
  v127 = __p;
  if (__p)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = (std::__shared_weak_count_vtbl *)__p;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = v107;
  }
  else
  {
    v106 = 0;
  }
  v128 = v106;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&v167, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v170, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v171, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v172, "int32");
  std::string::basic_string[abi:ne180100]<0>(v173, "int8");
  std::string::basic_string[abi:ne180100]<0>(v174, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v167, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v105 + 24))(v105, &v127, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v174[i + 2]) < 0)
      operator delete((void *)v174[i]);
  }
  v109 = v128;
  if (v128)
  {
    v110 = (unint64_t *)&v128->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = __p;
  __p = 0;
  if (v112)
    (*(void (**)(void *))(*(_QWORD *)v112 + 8))(v112);
  if (v126 < 0)
    operator delete(v125[0]);
  v113 = *a3;
  v123 = v159;
  if (v159)
  {
    v114 = (std::__shared_weak_count *)operator new();
    v115 = (std::__shared_weak_count_vtbl *)v159;
    v114->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v114->__shared_owners_ = 0;
    v114->__shared_weak_owners_ = 0;
    v114[1].__vftable = v115;
  }
  else
  {
    v114 = 0;
  }
  v124 = v114;
  v159 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v113 + 56))(v113, &v123);
  v116 = v124;
  if (v124)
  {
    v117 = (unint64_t *)&v124->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = v159;
  v159 = 0;
  if (v119)
    (*(void (**)(void *))(*(_QWORD *)v119 + 8))(v119);
  if (v162)
  {
    v120 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v162);
    MEMORY[0x1E0C023A0](v120, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v155, 0);
  result = v166;
  if (v166)
  {
    v122 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v166);
    return MEMORY[0x1E0C023A0](v122, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09AC71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void **a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  uint64_t *v62;
  void *v64;
  uint64_t v65;

  v64 = a54;
  a54 = 0;
  if (v64)
    (*(void (**)(void *))(*(_QWORD *)v64 + 8))(v64);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a57, 0);
  v65 = *v62;
  *v62 = 0;
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a62, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::Sign::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  char **v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t *v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  char *v46;
  char *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  char **v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  _OWORD *v66;
  unsigned __int8 *v67;
  void *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  std::__shared_weak_count_vtbl *v73;
  std::__shared_weak_count *v74;
  std::__shared_weak_count *v75;
  unint64_t *p_shared_owners;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  void *v84;
  std::__shared_weak_count *v85;
  std::__shared_weak_count_vtbl *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count_vtbl *v90;
  void *v91;
  std::__shared_weak_count *v92;
  std::__shared_weak_count_vtbl *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count_vtbl *v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  std::__shared_weak_count_vtbl *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  void *v104;
  void *v105;
  std::__shared_weak_count *v106;
  std::__shared_weak_count_vtbl *v107;
  uint64_t i;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t result;
  uint64_t v122;
  void *v123;
  std::__shared_weak_count *v124;
  void *v125[2];
  char v126;
  void *v127;
  std::__shared_weak_count *v128;
  void *v129;
  std::__shared_weak_count *v130;
  void *v131[2];
  char v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  void *v135[2];
  char v136;
  void *v137[2];
  char v138;
  std::__shared_weak_count_vtbl *v139;
  std::__shared_weak_count *v140;
  void *v141;
  std::__shared_weak_count *v142;
  __n128 v143;
  __int128 v144;
  __int128 v145;
  void *v146[2];
  uint64_t v147;
  void *v148;
  void *v149;
  _QWORD *v150;
  __n128 v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  char **v155;
  void *__p;
  void *v157;
  _QWORD *v158;
  void *v159;
  void *v160;
  _QWORD *v161;
  void *v162;
  void *v163;
  _QWORD *v164;
  __n128 v165;
  uint64_t v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD v170[3];
  uint64_t v171[3];
  uint64_t v172[3];
  uint64_t v173[3];
  _QWORD v174[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD v179[3];
  _QWORD *v180;
  _BYTE v181[24];
  _BYTE *v182;
  _BYTE v183[24];
  _BYTE *v184;
  _QWORD v185[3];
  _QWORD *v186;
  uint64_t v187;

  v187 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v166 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v176 = (uint64_t)&v8->~__shared_weak_count_0;
  v177 = (uint64_t)&v8->~__shared_weak_count_0;
  v167 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v162 = v10;
  *v10 = v9;
  v163 = v10 + 1;
  v164 = v10 + 1;
  v168 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v162);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v159 = v12;
  *v12 = v11;
  v160 = v12 + 1;
  v161 = v12 + 1;
  v169 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v159);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v157 = v14 + 1;
  v158 = v14 + 1;
  v170[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v167, 4, &v165);
  MIL::IRParameter::Make(&v165, (uint64_t *)&v148);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v148);
  v15 = v148;
  v148 = 0;
  if (v15)
    (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v165.n128_u64[1];
  if (v165.n128_u64[1])
  {
    v17 = (unint64_t *)(v165.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v157 = __p;
    operator delete(__p);
  }
  if (v159)
  {
    v160 = v159;
    operator delete(v159);
  }
  if (v162)
  {
    v163 = v162;
    operator delete(v162);
  }
  if (Scalar)
  {
    v176 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v155 = 0;
  v19 = operator new();
  *(_QWORD *)v19 = 0;
  *(_QWORD *)(v19 + 8) = 0;
  *(_QWORD *)(v19 + 16) = 0;
  v167 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v155, (void **)v19);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v167, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v155, 1uLL);
  v20 = v155;
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  v162 = v22;
  *v22 = v21;
  v163 = v22 + 1;
  v164 = v22 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v162);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  v159 = v24;
  *v24 = v23;
  v160 = v24 + 1;
  v161 = v24 + 1;
  v176 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v159);
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = operator new(8uLL);
  __p = v26;
  *v26 = v25;
  v157 = v26 + 1;
  v158 = v26 + 1;
  v177 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v27 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v28 = operator new(8uLL);
  v148 = v28;
  *v28 = v27;
  v149 = v28 + 1;
  v150 = v28 + 1;
  v178 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v148);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 4, &v151);
  MIL::IRParameter::Make(&v151, &v152);
  v29 = v152;
  v153 = v152;
  if (v152)
  {
    v30 = (_QWORD *)operator new();
    v31 = v152;
    *v30 = &unk_1EA99F888;
    v30[1] = 0;
    v30[2] = 0;
    v30[3] = v31;
  }
  else
  {
    v30 = 0;
  }
  v154 = v30;
  v152 = 0;
  v32 = v20[2];
  v33 = v20[1];
  if (v33 >= v32)
  {
    v35 = (v33 - *v20) >> 4;
    v36 = v35 + 1;
    if ((unint64_t)(v35 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v37 = v32 - *v20;
    if (v37 >> 3 > v36)
      v36 = v37 >> 3;
    if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0)
      v38 = 0xFFFFFFFFFFFFFFFLL;
    else
      v38 = v36;
    v170[1] = v20 + 2;
    v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v20 + 2), v38);
    v41 = (uint64_t *)&v39[16 * v35];
    *v41 = v29;
    v41[1] = (uint64_t)v30;
    v153 = 0;
    v154 = 0;
    v43 = *v20;
    v42 = v20[1];
    if (v42 == *v20)
    {
      v46 = v20[1];
      v44 = &v39[16 * v35];
    }
    else
    {
      v44 = &v39[16 * v35];
      do
      {
        v45 = *((_OWORD *)v42 - 1);
        v42 -= 16;
        *((_OWORD *)v44 - 1) = v45;
        v44 -= 16;
        *(_QWORD *)v42 = 0;
        *((_QWORD *)v42 + 1) = 0;
      }
      while (v42 != v43);
      v46 = *v20;
      v42 = v20[1];
    }
    v34 = (char *)(v41 + 2);
    *v20 = v44;
    v167 = v46;
    v168 = (uint64_t)v46;
    v20[1] = (char *)(v41 + 2);
    v169 = (uint64_t)v42;
    v47 = v20[2];
    v20[2] = &v39[16 * v40];
    v170[0] = v47;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v167);
  }
  else
  {
    *(_QWORD *)v33 = v29;
    *((_QWORD *)v33 + 1) = v30;
    v34 = v33 + 16;
    v153 = 0;
    v154 = 0;
  }
  v20[1] = v34;
  v48 = v152;
  v152 = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  v49 = (std::__shared_weak_count *)v151.n128_u64[1];
  if (v151.n128_u64[1])
  {
    v50 = (unint64_t *)(v151.n128_u64[1] + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (v148)
  {
    v149 = v148;
    operator delete(v148);
  }
  if (__p)
  {
    v157 = __p;
    operator delete(__p);
  }
  if (v159)
  {
    v160 = v159;
    operator delete(v159);
  }
  if (v162)
  {
    v163 = v162;
    operator delete(v162);
  }
  *(_OWORD *)v146 = *(_OWORD *)a2;
  v147 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v52 = v166;
  *(_QWORD *)&v145 = v166;
  if (v166)
  {
    v53 = (_QWORD *)operator new();
    *v53 = &unk_1EA99F8E8;
    v53[1] = 0;
    v53[2] = 0;
    v53[3] = v52;
  }
  else
  {
    v53 = 0;
  }
  *((_QWORD *)&v145 + 1) = v53;
  v166 = 0;
  *(_QWORD *)&v144 = v155;
  if (v155)
  {
    v54 = (_QWORD *)operator new();
    v55 = v155;
    *v54 = &unk_1EA99F948;
    v54[1] = 0;
    v54[2] = 0;
    v54[3] = v55;
  }
  else
  {
    v54 = 0;
  }
  *((_QWORD *)&v144 + 1) = v54;
  v155 = 0;
  v185[0] = &unk_1EA99FAC8;
  v185[1] = MIL::Validation::ValidateViaTypeInference;
  v186 = v185;
  v184 = 0;
  MIL::IROperator::Make((__int128 *)v146, &v145, &v144, (uint64_t)v185, (uint64_t)v183, a3);
  v56 = v184;
  if (v184 == v183)
  {
    v57 = 4;
    v56 = v183;
  }
  else
  {
    if (!v184)
      goto LABEL_59;
    v57 = 5;
  }
  (*(void (**)(void))(*v56 + 8 * v57))();
LABEL_59:
  v58 = v186;
  if (v186 == v185)
  {
    v59 = 4;
    v58 = v185;
    goto LABEL_63;
  }
  if (v186)
  {
    v59 = 5;
LABEL_63:
    (*(void (**)(void))(*v58 + 8 * v59))();
  }
  v60 = (std::__shared_weak_count *)*((_QWORD *)&v144 + 1);
  if (*((_QWORD *)&v144 + 1))
  {
    v61 = (unint64_t *)(*((_QWORD *)&v144 + 1) + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
  if (*((_QWORD *)&v145 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  if (SHIBYTE(v147) < 0)
    operator delete(v146[0]);
  v162 = 0;
  v66 = (_OWORD *)operator new();
  *v66 = 0u;
  v66[1] = 0u;
  *((_DWORD *)v66 + 8) = 1065353216;
  v162 = v66;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v143);
  MIL::IRParameter::Make(&v143, (uint64_t *)&v167);
  v67 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v66, "minimum_compute_type", (uint64_t *)&v167);
  v68 = v167;
  v167 = 0;
  if (v68)
    (*(void (**)(void *))(*(_QWORD *)v68 + 8))(v68);
  v69 = (std::__shared_weak_count *)v143.n128_u64[1];
  if (v143.n128_u64[1])
  {
    v70 = (unint64_t *)(v143.n128_u64[1] + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v67 + 5) + 32))(*((_QWORD *)v67 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v67 + 5) + 48))(*((_QWORD *)v67 + 5), 1);
  v72 = *a3;
  v73 = (std::__shared_weak_count_vtbl *)v162;
  v141 = v162;
  if (v162)
  {
    v74 = (std::__shared_weak_count *)operator new();
    v74->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v74->__shared_owners_ = 0;
    v74->__shared_weak_owners_ = 0;
    v74[1].__vftable = v73;
  }
  else
  {
    v74 = 0;
  }
  v142 = v74;
  v162 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v72 + 184))(v72, &v141);
  v75 = v142;
  if (v142)
  {
    p_shared_owners = (unint64_t *)&v142->__shared_owners_;
    do
      v77 = __ldaxr(p_shared_owners);
    while (__stlxr(v77 - 1, p_shared_owners));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v78 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v167, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v167, (uint64_t)v181);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v78 + 200))(v78, v181);
  v79 = v182;
  if (v182 == v181)
  {
    v80 = 4;
    v79 = v181;
  }
  else
  {
    if (!v182)
      goto LABEL_96;
    v80 = 5;
  }
  (*(void (**)(void))(*v79 + 8 * v80))();
LABEL_96:
  if (SHIBYTE(v169) < 0)
    operator delete(v167);
  v81 = *a3;
  v179[0] = &off_1EA9A00F8;
  v179[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceSign;
  v180 = v179;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v81 + 216))(v81, v179);
  v82 = v180;
  if (v180 == v179)
  {
    v83 = 4;
    v82 = v179;
  }
  else
  {
    if (!v180)
      goto LABEL_103;
    v83 = 5;
  }
  (*(void (**)(void))(*v82 + 8 * v83))();
LABEL_103:
  MIL::Validation::TensorDTypeConstraints::Make(&v167);
  v84 = v167;
  std::string::basic_string[abi:ne180100]<0>(v137, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v137, 0, (uint64_t *)&Scalar);
  v139 = Scalar;
  if (Scalar)
  {
    v85 = (std::__shared_weak_count *)operator new();
    v86 = Scalar;
    v85->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v85->__shared_owners_ = 0;
    v85->__shared_weak_owners_ = 0;
    v85[1].__vftable = v86;
  }
  else
  {
    v85 = 0;
  }
  v140 = v85;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v135, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v84 + 24))(v84, &v139, v135);
  if (v136 < 0)
    operator delete(v135[0]);
  v87 = v140;
  if (v140)
  {
    v88 = (unint64_t *)&v140->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v90 = Scalar;
  Scalar = 0;
  if (v90)
    (*((void (**)(std::__shared_weak_count_vtbl *))v90->~__shared_weak_count + 1))(v90);
  if (v138 < 0)
    operator delete(v137[0]);
  v91 = v167;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v133 = Scalar;
  if (Scalar)
  {
    v92 = (std::__shared_weak_count *)operator new();
    v93 = Scalar;
    v92->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v92->__shared_owners_ = 0;
    v92->__shared_weak_owners_ = 0;
    v92[1].__vftable = v93;
  }
  else
  {
    v92 = 0;
  }
  v134 = v92;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v131, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v91 + 24))(v91, &v133, v131);
  if (v132 < 0)
    operator delete(v131[0]);
  v94 = v134;
  if (v134)
  {
    v95 = (unint64_t *)&v134->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v97 = Scalar;
  Scalar = 0;
  if (v97)
    (*((void (**)(std::__shared_weak_count_vtbl *))v97->~__shared_weak_count + 1))(v97);
  v98 = *a3;
  v129 = v167;
  if (v167)
  {
    v99 = (std::__shared_weak_count *)operator new();
    v100 = (std::__shared_weak_count_vtbl *)v167;
    v99->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v99->__shared_owners_ = 0;
    v99->__shared_weak_owners_ = 0;
    v99[1].__vftable = v100;
  }
  else
  {
    v99 = 0;
  }
  v130 = v99;
  v167 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v98 + 56))(v98, &v129);
  v101 = v130;
  if (v130)
  {
    v102 = (unint64_t *)&v130->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = v167;
  v167 = 0;
  if (v104)
    (*(void (**)(void *))(*(_QWORD *)v104 + 8))(v104);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v159);
  v105 = v159;
  std::string::basic_string[abi:ne180100]<0>(v125, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v125, 1, (uint64_t *)&__p);
  v127 = __p;
  if (__p)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = (std::__shared_weak_count_vtbl *)__p;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = v107;
  }
  else
  {
    v106 = 0;
  }
  v128 = v106;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&v167, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v170, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v171, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v172, "int32");
  std::string::basic_string[abi:ne180100]<0>(v173, "int8");
  std::string::basic_string[abi:ne180100]<0>(v174, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v167, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v105 + 24))(v105, &v127, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v174[i + 2]) < 0)
      operator delete((void *)v174[i]);
  }
  v109 = v128;
  if (v128)
  {
    v110 = (unint64_t *)&v128->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = __p;
  __p = 0;
  if (v112)
    (*(void (**)(void *))(*(_QWORD *)v112 + 8))(v112);
  if (v126 < 0)
    operator delete(v125[0]);
  v113 = *a3;
  v123 = v159;
  if (v159)
  {
    v114 = (std::__shared_weak_count *)operator new();
    v115 = (std::__shared_weak_count_vtbl *)v159;
    v114->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v114->__shared_owners_ = 0;
    v114->__shared_weak_owners_ = 0;
    v114[1].__vftable = v115;
  }
  else
  {
    v114 = 0;
  }
  v124 = v114;
  v159 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v113 + 56))(v113, &v123);
  v116 = v124;
  if (v124)
  {
    v117 = (unint64_t *)&v124->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = v159;
  v159 = 0;
  if (v119)
    (*(void (**)(void *))(*(_QWORD *)v119 + 8))(v119);
  if (v162)
  {
    v120 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v162);
    MEMORY[0x1E0C023A0](v120, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v155, 0);
  result = v166;
  if (v166)
  {
    v122 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v166);
    return MEMORY[0x1E0C023A0](v122, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09ADAB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void **a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  uint64_t *v62;
  void *v64;
  uint64_t v65;

  v64 = a54;
  a54 = 0;
  if (v64)
    (*(void (**)(void *))(*(_QWORD *)v64 + 8))(v64);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a57, 0);
  v65 = *v62;
  *v62 = 0;
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a62, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::Square::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  char **v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t *v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  char *v46;
  char *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  char **v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  _OWORD *v66;
  unsigned __int8 *v67;
  void *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  std::__shared_weak_count_vtbl *v73;
  std::__shared_weak_count *v74;
  std::__shared_weak_count *v75;
  unint64_t *p_shared_owners;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  void *v84;
  std::__shared_weak_count *v85;
  std::__shared_weak_count_vtbl *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count_vtbl *v90;
  void *v91;
  std::__shared_weak_count *v92;
  std::__shared_weak_count_vtbl *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count_vtbl *v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  std::__shared_weak_count_vtbl *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  void *v104;
  void *v105;
  std::__shared_weak_count *v106;
  std::__shared_weak_count_vtbl *v107;
  uint64_t i;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t result;
  uint64_t v122;
  void *v123;
  std::__shared_weak_count *v124;
  void *v125[2];
  char v126;
  void *v127;
  std::__shared_weak_count *v128;
  void *v129;
  std::__shared_weak_count *v130;
  void *v131[2];
  char v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  void *v135[2];
  char v136;
  void *v137[2];
  char v138;
  std::__shared_weak_count_vtbl *v139;
  std::__shared_weak_count *v140;
  void *v141;
  std::__shared_weak_count *v142;
  __n128 v143;
  __int128 v144;
  __int128 v145;
  void *v146[2];
  uint64_t v147;
  void *v148;
  void *v149;
  _QWORD *v150;
  __n128 v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  char **v155;
  void *__p;
  void *v157;
  _QWORD *v158;
  void *v159;
  void *v160;
  _QWORD *v161;
  void *v162;
  void *v163;
  _QWORD *v164;
  __n128 v165;
  uint64_t v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD v170[3];
  uint64_t v171[3];
  uint64_t v172[3];
  uint64_t v173[3];
  _QWORD v174[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD v179[3];
  _QWORD *v180;
  _BYTE v181[24];
  _BYTE *v182;
  _BYTE v183[24];
  _BYTE *v184;
  _QWORD v185[3];
  _QWORD *v186;
  uint64_t v187;

  v187 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v166 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v176 = (uint64_t)&v8->~__shared_weak_count_0;
  v177 = (uint64_t)&v8->~__shared_weak_count_0;
  v167 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v162 = v10;
  *v10 = v9;
  v163 = v10 + 1;
  v164 = v10 + 1;
  v168 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v162);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v159 = v12;
  *v12 = v11;
  v160 = v12 + 1;
  v161 = v12 + 1;
  v169 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v159);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v157 = v14 + 1;
  v158 = v14 + 1;
  v170[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v167, 4, &v165);
  MIL::IRParameter::Make(&v165, (uint64_t *)&v148);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v148);
  v15 = v148;
  v148 = 0;
  if (v15)
    (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v165.n128_u64[1];
  if (v165.n128_u64[1])
  {
    v17 = (unint64_t *)(v165.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v157 = __p;
    operator delete(__p);
  }
  if (v159)
  {
    v160 = v159;
    operator delete(v159);
  }
  if (v162)
  {
    v163 = v162;
    operator delete(v162);
  }
  if (Scalar)
  {
    v176 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v155 = 0;
  v19 = operator new();
  *(_QWORD *)v19 = 0;
  *(_QWORD *)(v19 + 8) = 0;
  *(_QWORD *)(v19 + 16) = 0;
  v167 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v155, (void **)v19);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v167, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v155, 1uLL);
  v20 = v155;
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  v162 = v22;
  *v22 = v21;
  v163 = v22 + 1;
  v164 = v22 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v162);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  v159 = v24;
  *v24 = v23;
  v160 = v24 + 1;
  v161 = v24 + 1;
  v176 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v159);
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = operator new(8uLL);
  __p = v26;
  *v26 = v25;
  v157 = v26 + 1;
  v158 = v26 + 1;
  v177 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v27 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v28 = operator new(8uLL);
  v148 = v28;
  *v28 = v27;
  v149 = v28 + 1;
  v150 = v28 + 1;
  v178 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v148);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 4, &v151);
  MIL::IRParameter::Make(&v151, &v152);
  v29 = v152;
  v153 = v152;
  if (v152)
  {
    v30 = (_QWORD *)operator new();
    v31 = v152;
    *v30 = &unk_1EA99F888;
    v30[1] = 0;
    v30[2] = 0;
    v30[3] = v31;
  }
  else
  {
    v30 = 0;
  }
  v154 = v30;
  v152 = 0;
  v32 = v20[2];
  v33 = v20[1];
  if (v33 >= v32)
  {
    v35 = (v33 - *v20) >> 4;
    v36 = v35 + 1;
    if ((unint64_t)(v35 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v37 = v32 - *v20;
    if (v37 >> 3 > v36)
      v36 = v37 >> 3;
    if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0)
      v38 = 0xFFFFFFFFFFFFFFFLL;
    else
      v38 = v36;
    v170[1] = v20 + 2;
    v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v20 + 2), v38);
    v41 = (uint64_t *)&v39[16 * v35];
    *v41 = v29;
    v41[1] = (uint64_t)v30;
    v153 = 0;
    v154 = 0;
    v43 = *v20;
    v42 = v20[1];
    if (v42 == *v20)
    {
      v46 = v20[1];
      v44 = &v39[16 * v35];
    }
    else
    {
      v44 = &v39[16 * v35];
      do
      {
        v45 = *((_OWORD *)v42 - 1);
        v42 -= 16;
        *((_OWORD *)v44 - 1) = v45;
        v44 -= 16;
        *(_QWORD *)v42 = 0;
        *((_QWORD *)v42 + 1) = 0;
      }
      while (v42 != v43);
      v46 = *v20;
      v42 = v20[1];
    }
    v34 = (char *)(v41 + 2);
    *v20 = v44;
    v167 = v46;
    v168 = (uint64_t)v46;
    v20[1] = (char *)(v41 + 2);
    v169 = (uint64_t)v42;
    v47 = v20[2];
    v20[2] = &v39[16 * v40];
    v170[0] = v47;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v167);
  }
  else
  {
    *(_QWORD *)v33 = v29;
    *((_QWORD *)v33 + 1) = v30;
    v34 = v33 + 16;
    v153 = 0;
    v154 = 0;
  }
  v20[1] = v34;
  v48 = v152;
  v152 = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  v49 = (std::__shared_weak_count *)v151.n128_u64[1];
  if (v151.n128_u64[1])
  {
    v50 = (unint64_t *)(v151.n128_u64[1] + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (v148)
  {
    v149 = v148;
    operator delete(v148);
  }
  if (__p)
  {
    v157 = __p;
    operator delete(__p);
  }
  if (v159)
  {
    v160 = v159;
    operator delete(v159);
  }
  if (v162)
  {
    v163 = v162;
    operator delete(v162);
  }
  *(_OWORD *)v146 = *(_OWORD *)a2;
  v147 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v52 = v166;
  *(_QWORD *)&v145 = v166;
  if (v166)
  {
    v53 = (_QWORD *)operator new();
    *v53 = &unk_1EA99F8E8;
    v53[1] = 0;
    v53[2] = 0;
    v53[3] = v52;
  }
  else
  {
    v53 = 0;
  }
  *((_QWORD *)&v145 + 1) = v53;
  v166 = 0;
  *(_QWORD *)&v144 = v155;
  if (v155)
  {
    v54 = (_QWORD *)operator new();
    v55 = v155;
    *v54 = &unk_1EA99F948;
    v54[1] = 0;
    v54[2] = 0;
    v54[3] = v55;
  }
  else
  {
    v54 = 0;
  }
  *((_QWORD *)&v144 + 1) = v54;
  v155 = 0;
  v185[0] = &unk_1EA99FAC8;
  v185[1] = MIL::Validation::ValidateViaTypeInference;
  v186 = v185;
  v184 = 0;
  MIL::IROperator::Make((__int128 *)v146, &v145, &v144, (uint64_t)v185, (uint64_t)v183, a3);
  v56 = v184;
  if (v184 == v183)
  {
    v57 = 4;
    v56 = v183;
  }
  else
  {
    if (!v184)
      goto LABEL_59;
    v57 = 5;
  }
  (*(void (**)(void))(*v56 + 8 * v57))();
LABEL_59:
  v58 = v186;
  if (v186 == v185)
  {
    v59 = 4;
    v58 = v185;
    goto LABEL_63;
  }
  if (v186)
  {
    v59 = 5;
LABEL_63:
    (*(void (**)(void))(*v58 + 8 * v59))();
  }
  v60 = (std::__shared_weak_count *)*((_QWORD *)&v144 + 1);
  if (*((_QWORD *)&v144 + 1))
  {
    v61 = (unint64_t *)(*((_QWORD *)&v144 + 1) + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
  if (*((_QWORD *)&v145 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  if (SHIBYTE(v147) < 0)
    operator delete(v146[0]);
  v162 = 0;
  v66 = (_OWORD *)operator new();
  *v66 = 0u;
  v66[1] = 0u;
  *((_DWORD *)v66 + 8) = 1065353216;
  v162 = v66;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v143);
  MIL::IRParameter::Make(&v143, (uint64_t *)&v167);
  v67 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v66, "minimum_compute_type", (uint64_t *)&v167);
  v68 = v167;
  v167 = 0;
  if (v68)
    (*(void (**)(void *))(*(_QWORD *)v68 + 8))(v68);
  v69 = (std::__shared_weak_count *)v143.n128_u64[1];
  if (v143.n128_u64[1])
  {
    v70 = (unint64_t *)(v143.n128_u64[1] + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v67 + 5) + 32))(*((_QWORD *)v67 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v67 + 5) + 48))(*((_QWORD *)v67 + 5), 1);
  v72 = *a3;
  v73 = (std::__shared_weak_count_vtbl *)v162;
  v141 = v162;
  if (v162)
  {
    v74 = (std::__shared_weak_count *)operator new();
    v74->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v74->__shared_owners_ = 0;
    v74->__shared_weak_owners_ = 0;
    v74[1].__vftable = v73;
  }
  else
  {
    v74 = 0;
  }
  v142 = v74;
  v162 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v72 + 184))(v72, &v141);
  v75 = v142;
  if (v142)
  {
    p_shared_owners = (unint64_t *)&v142->__shared_owners_;
    do
      v77 = __ldaxr(p_shared_owners);
    while (__stlxr(v77 - 1, p_shared_owners));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v78 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v167, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v167, (uint64_t)v181);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v78 + 200))(v78, v181);
  v79 = v182;
  if (v182 == v181)
  {
    v80 = 4;
    v79 = v181;
  }
  else
  {
    if (!v182)
      goto LABEL_96;
    v80 = 5;
  }
  (*(void (**)(void))(*v79 + 8 * v80))();
LABEL_96:
  if (SHIBYTE(v169) < 0)
    operator delete(v167);
  v81 = *a3;
  v179[0] = &off_1EA9A00F8;
  v179[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceSquare;
  v180 = v179;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v81 + 216))(v81, v179);
  v82 = v180;
  if (v180 == v179)
  {
    v83 = 4;
    v82 = v179;
  }
  else
  {
    if (!v180)
      goto LABEL_103;
    v83 = 5;
  }
  (*(void (**)(void))(*v82 + 8 * v83))();
LABEL_103:
  MIL::Validation::TensorDTypeConstraints::Make(&v167);
  v84 = v167;
  std::string::basic_string[abi:ne180100]<0>(v137, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v137, 0, (uint64_t *)&Scalar);
  v139 = Scalar;
  if (Scalar)
  {
    v85 = (std::__shared_weak_count *)operator new();
    v86 = Scalar;
    v85->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v85->__shared_owners_ = 0;
    v85->__shared_weak_owners_ = 0;
    v85[1].__vftable = v86;
  }
  else
  {
    v85 = 0;
  }
  v140 = v85;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v135, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v84 + 24))(v84, &v139, v135);
  if (v136 < 0)
    operator delete(v135[0]);
  v87 = v140;
  if (v140)
  {
    v88 = (unint64_t *)&v140->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v90 = Scalar;
  Scalar = 0;
  if (v90)
    (*((void (**)(std::__shared_weak_count_vtbl *))v90->~__shared_weak_count + 1))(v90);
  if (v138 < 0)
    operator delete(v137[0]);
  v91 = v167;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v133 = Scalar;
  if (Scalar)
  {
    v92 = (std::__shared_weak_count *)operator new();
    v93 = Scalar;
    v92->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v92->__shared_owners_ = 0;
    v92->__shared_weak_owners_ = 0;
    v92[1].__vftable = v93;
  }
  else
  {
    v92 = 0;
  }
  v134 = v92;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v131, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v91 + 24))(v91, &v133, v131);
  if (v132 < 0)
    operator delete(v131[0]);
  v94 = v134;
  if (v134)
  {
    v95 = (unint64_t *)&v134->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v97 = Scalar;
  Scalar = 0;
  if (v97)
    (*((void (**)(std::__shared_weak_count_vtbl *))v97->~__shared_weak_count + 1))(v97);
  v98 = *a3;
  v129 = v167;
  if (v167)
  {
    v99 = (std::__shared_weak_count *)operator new();
    v100 = (std::__shared_weak_count_vtbl *)v167;
    v99->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v99->__shared_owners_ = 0;
    v99->__shared_weak_owners_ = 0;
    v99[1].__vftable = v100;
  }
  else
  {
    v99 = 0;
  }
  v130 = v99;
  v167 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v98 + 56))(v98, &v129);
  v101 = v130;
  if (v130)
  {
    v102 = (unint64_t *)&v130->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = v167;
  v167 = 0;
  if (v104)
    (*(void (**)(void *))(*(_QWORD *)v104 + 8))(v104);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v159);
  v105 = v159;
  std::string::basic_string[abi:ne180100]<0>(v125, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v125, 1, (uint64_t *)&__p);
  v127 = __p;
  if (__p)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = (std::__shared_weak_count_vtbl *)__p;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = v107;
  }
  else
  {
    v106 = 0;
  }
  v128 = v106;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&v167, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v170, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v171, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v172, "int32");
  std::string::basic_string[abi:ne180100]<0>(v173, "int8");
  std::string::basic_string[abi:ne180100]<0>(v174, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v167, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v105 + 24))(v105, &v127, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v174[i + 2]) < 0)
      operator delete((void *)v174[i]);
  }
  v109 = v128;
  if (v128)
  {
    v110 = (unint64_t *)&v128->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = __p;
  __p = 0;
  if (v112)
    (*(void (**)(void *))(*(_QWORD *)v112 + 8))(v112);
  if (v126 < 0)
    operator delete(v125[0]);
  v113 = *a3;
  v123 = v159;
  if (v159)
  {
    v114 = (std::__shared_weak_count *)operator new();
    v115 = (std::__shared_weak_count_vtbl *)v159;
    v114->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v114->__shared_owners_ = 0;
    v114->__shared_weak_owners_ = 0;
    v114[1].__vftable = v115;
  }
  else
  {
    v114 = 0;
  }
  v124 = v114;
  v159 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v113 + 56))(v113, &v123);
  v116 = v124;
  if (v124)
  {
    v117 = (unint64_t *)&v124->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = v159;
  v159 = 0;
  if (v119)
    (*(void (**)(void *))(*(_QWORD *)v119 + 8))(v119);
  if (v162)
  {
    v120 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v162);
    MEMORY[0x1E0C023A0](v120, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v155, 0);
  result = v166;
  if (v166)
  {
    v122 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v166);
    return MEMORY[0x1E0C023A0](v122, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09AEE4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void **a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  uint64_t *v62;
  void *v64;
  uint64_t v65;

  v64 = a54;
  a54 = 0;
  if (v64)
    (*(void (**)(void *))(*(_QWORD *)v64 + 8))(v64);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a57, 0);
  v65 = *v62;
  *v62 = 0;
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a62, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::Threshold::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  std::__shared_weak_count_vtbl *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  char **v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t *v46;
  char *v47;
  char *v48;
  char *v49;
  __int128 v50;
  char *v51;
  char *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  char **v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  _OWORD *v71;
  unsigned __int8 *v72;
  void *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count *v80;
  unint64_t *p_shared_owners;
  unint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  void *v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count_vtbl *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count_vtbl *v95;
  void *v96;
  std::__shared_weak_count *v97;
  std::__shared_weak_count_vtbl *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count_vtbl *v102;
  void *v103;
  std::__shared_weak_count *v104;
  std::__shared_weak_count_vtbl *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count_vtbl *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  std::__shared_weak_count_vtbl *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  void *v116;
  void *v117;
  std::__shared_weak_count *v118;
  std::__shared_weak_count_vtbl *v119;
  uint64_t i;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  void *v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  std::__shared_weak_count_vtbl *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t result;
  uint64_t v134;
  void *v135;
  std::__shared_weak_count *v136;
  void *v137[2];
  char v138;
  void *v139;
  std::__shared_weak_count *v140;
  void *v141;
  std::__shared_weak_count *v142;
  void *v143[2];
  char v144;
  std::__shared_weak_count_vtbl *v145;
  std::__shared_weak_count *v146;
  void *v147[2];
  char v148;
  void *v149[2];
  char v150;
  std::__shared_weak_count_vtbl *v151;
  std::__shared_weak_count *v152;
  void *v153[2];
  char v154;
  void *v155[2];
  char v156;
  std::__shared_weak_count_vtbl *v157;
  std::__shared_weak_count *v158;
  void *v159;
  std::__shared_weak_count *v160;
  __n128 v161;
  __int128 v162;
  __int128 v163;
  void *v164[2];
  uint64_t v165;
  void *v166;
  void *v167;
  _QWORD *v168;
  __n128 v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  char **v173;
  __n128 v174;
  void *__p;
  void *v176;
  _QWORD *v177;
  void *v178;
  void *v179;
  _QWORD *v180;
  void *v181;
  void *v182;
  _QWORD *v183;
  __n128 v184;
  _QWORD *v185;
  void *Scalar;
  uint64_t v187;
  uint64_t v188;
  _QWORD v189[3];
  uint64_t v190[3];
  uint64_t v191[3];
  uint64_t v192[3];
  _QWORD v193[3];
  std::__shared_weak_count_vtbl *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _QWORD v198[3];
  _QWORD *v199;
  _BYTE v200[24];
  _BYTE *v201;
  _BYTE v202[24];
  _BYTE *v203;
  _QWORD v204[3];
  _QWORD *v205;
  uint64_t v206;

  v206 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v185 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v194 = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v195 = (uint64_t)&v8->~__shared_weak_count_0;
  v196 = (uint64_t)&v8->~__shared_weak_count_0;
  Scalar = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v194);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v181 = v10;
  *v10 = v9;
  v182 = v10 + 1;
  v183 = v10 + 1;
  v187 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v181);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v178 = v12;
  *v12 = v11;
  v179 = v12 + 1;
  v180 = v12 + 1;
  v188 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v178);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v176 = v14 + 1;
  v177 = v14 + 1;
  v189[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 4, &v184);
  MIL::IRParameter::Make(&v184, (uint64_t *)&v166);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v166);
  v15 = v166;
  v166 = 0;
  if (v15)
    (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v184.n128_u64[1];
  if (v184.n128_u64[1])
  {
    v17 = (unint64_t *)(v184.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v176 = __p;
    operator delete(__p);
  }
  if (v178)
  {
    v179 = v178;
    operator delete(v178);
  }
  if (v181)
  {
    v182 = v181;
    operator delete(v181);
  }
  if (v194)
  {
    v195 = (uint64_t)v194;
    operator delete(v194);
  }
  v19 = v185;
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar(a1, 7);
  v187 = MIL::IRTensorValueType::MakeScalar(a1, 4);
  v188 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  v189[0] = MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 4, &v174);
  MIL::IRParameter::Make(&v174, (uint64_t *)&v194);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v19, "alpha", (uint64_t *)&v194);
  v20 = v194;
  v194 = 0;
  if (v20)
    (*((void (**)(std::__shared_weak_count_vtbl *))v20->~__shared_weak_count + 1))(v20);
  v21 = (std::__shared_weak_count *)v174.n128_u64[1];
  if (v174.n128_u64[1])
  {
    v22 = (unint64_t *)(v174.n128_u64[1] + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v173 = 0;
  v24 = operator new();
  *(_QWORD *)v24 = 0;
  *(_QWORD *)(v24 + 8) = 0;
  *(_QWORD *)(v24 + 16) = 0;
  Scalar = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v173, (void **)v24);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&Scalar, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v173, 1uLL);
  v25 = v173;
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(8uLL);
  v181 = v27;
  *v27 = v26;
  v182 = v27 + 1;
  v183 = v27 + 1;
  v194 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v181);
  v28 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v29 = operator new(8uLL);
  v178 = v29;
  *v29 = v28;
  v179 = v29 + 1;
  v180 = v29 + 1;
  v195 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v178);
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = operator new(8uLL);
  __p = v31;
  *v31 = v30;
  v176 = v31 + 1;
  v177 = v31 + 1;
  v196 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(8uLL);
  v166 = v33;
  *v33 = v32;
  v167 = v33 + 1;
  v168 = v33 + 1;
  v197 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v166);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v194, 4, &v169);
  MIL::IRParameter::Make(&v169, &v170);
  v34 = v170;
  v171 = v170;
  if (v170)
  {
    v35 = (_QWORD *)operator new();
    v36 = v170;
    *v35 = &unk_1EA99F888;
    v35[1] = 0;
    v35[2] = 0;
    v35[3] = v36;
  }
  else
  {
    v35 = 0;
  }
  v172 = v35;
  v170 = 0;
  v37 = v25[2];
  v38 = v25[1];
  if (v38 >= v37)
  {
    v40 = (v38 - *v25) >> 4;
    v41 = v40 + 1;
    if ((unint64_t)(v40 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v42 = v37 - *v25;
    if (v42 >> 3 > v41)
      v41 = v42 >> 3;
    if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF0)
      v43 = 0xFFFFFFFFFFFFFFFLL;
    else
      v43 = v41;
    v189[1] = v25 + 2;
    v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v25 + 2), v43);
    v46 = (uint64_t *)&v44[16 * v40];
    *v46 = v34;
    v46[1] = (uint64_t)v35;
    v171 = 0;
    v172 = 0;
    v48 = *v25;
    v47 = v25[1];
    if (v47 == *v25)
    {
      v51 = v25[1];
      v49 = &v44[16 * v40];
    }
    else
    {
      v49 = &v44[16 * v40];
      do
      {
        v50 = *((_OWORD *)v47 - 1);
        v47 -= 16;
        *((_OWORD *)v49 - 1) = v50;
        v49 -= 16;
        *(_QWORD *)v47 = 0;
        *((_QWORD *)v47 + 1) = 0;
      }
      while (v47 != v48);
      v51 = *v25;
      v47 = v25[1];
    }
    v39 = (char *)(v46 + 2);
    *v25 = v49;
    v187 = (uint64_t)v51;
    v25[1] = (char *)(v46 + 2);
    v188 = (uint64_t)v47;
    v52 = v25[2];
    v25[2] = &v44[16 * v45];
    v189[0] = v52;
    Scalar = v51;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v38 = v34;
    *((_QWORD *)v38 + 1) = v35;
    v39 = v38 + 16;
    v171 = 0;
    v172 = 0;
  }
  v25[1] = v39;
  v53 = v170;
  v170 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  v54 = (std::__shared_weak_count *)v169.n128_u64[1];
  if (v169.n128_u64[1])
  {
    v55 = (unint64_t *)(v169.n128_u64[1] + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  if (v166)
  {
    v167 = v166;
    operator delete(v166);
  }
  if (__p)
  {
    v176 = __p;
    operator delete(__p);
  }
  if (v178)
  {
    v179 = v178;
    operator delete(v178);
  }
  if (v181)
  {
    v182 = v181;
    operator delete(v181);
  }
  *(_OWORD *)v164 = *(_OWORD *)a2;
  v165 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v57 = (uint64_t)v185;
  *(_QWORD *)&v163 = v185;
  if (v185)
  {
    v58 = (_QWORD *)operator new();
    *v58 = &unk_1EA99F8E8;
    v58[1] = 0;
    v58[2] = 0;
    v58[3] = v57;
  }
  else
  {
    v58 = 0;
  }
  *((_QWORD *)&v163 + 1) = v58;
  v185 = 0;
  *(_QWORD *)&v162 = v173;
  if (v173)
  {
    v59 = (_QWORD *)operator new();
    v60 = v173;
    *v59 = &unk_1EA99F948;
    v59[1] = 0;
    v59[2] = 0;
    v59[3] = v60;
  }
  else
  {
    v59 = 0;
  }
  *((_QWORD *)&v162 + 1) = v59;
  v173 = 0;
  v204[0] = &unk_1EA99FAC8;
  v204[1] = MIL::Validation::ValidateViaTypeInference;
  v205 = v204;
  v203 = 0;
  MIL::IROperator::Make((__int128 *)v164, &v163, &v162, (uint64_t)v204, (uint64_t)v202, a3);
  v61 = v203;
  if (v203 == v202)
  {
    v62 = 4;
    v61 = v202;
  }
  else
  {
    if (!v203)
      goto LABEL_66;
    v62 = 5;
  }
  (*(void (**)(void))(*v61 + 8 * v62))();
LABEL_66:
  v63 = v205;
  if (v205 == v204)
  {
    v64 = 4;
    v63 = v204;
    goto LABEL_70;
  }
  if (v205)
  {
    v64 = 5;
LABEL_70:
    (*(void (**)(void))(*v63 + 8 * v64))();
  }
  v65 = (std::__shared_weak_count *)*((_QWORD *)&v162 + 1);
  if (*((_QWORD *)&v162 + 1))
  {
    v66 = (unint64_t *)(*((_QWORD *)&v162 + 1) + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v68 = (std::__shared_weak_count *)*((_QWORD *)&v163 + 1);
  if (*((_QWORD *)&v163 + 1))
  {
    v69 = (unint64_t *)(*((_QWORD *)&v163 + 1) + 8);
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  if (SHIBYTE(v165) < 0)
    operator delete(v164[0]);
  v181 = 0;
  v71 = (_OWORD *)operator new();
  *v71 = 0u;
  v71[1] = 0u;
  *((_DWORD *)v71 + 8) = 1065353216;
  v181 = v71;
  v194 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v194, 1, &v161);
  MIL::IRParameter::Make(&v161, (uint64_t *)&Scalar);
  v72 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v71, "minimum_compute_type", (uint64_t *)&Scalar);
  v73 = Scalar;
  Scalar = 0;
  if (v73)
    (*(void (**)(void *))(*(_QWORD *)v73 + 8))(v73);
  v74 = (std::__shared_weak_count *)v161.n128_u64[1];
  if (v161.n128_u64[1])
  {
    v75 = (unint64_t *)(v161.n128_u64[1] + 8);
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v72 + 5) + 32))(*((_QWORD *)v72 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v72 + 5) + 48))(*((_QWORD *)v72 + 5), 1);
  v77 = *a3;
  v78 = (std::__shared_weak_count_vtbl *)v181;
  v159 = v181;
  if (v181)
  {
    v79 = (std::__shared_weak_count *)operator new();
    v79->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v79->__shared_owners_ = 0;
    v79->__shared_weak_owners_ = 0;
    v79[1].__vftable = v78;
  }
  else
  {
    v79 = 0;
  }
  v160 = v79;
  v181 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v77 + 184))(v77, &v159);
  v80 = v160;
  if (v160)
  {
    p_shared_owners = (unint64_t *)&v160->__shared_owners_;
    do
      v82 = __ldaxr(p_shared_owners);
    while (__stlxr(v82 - 1, p_shared_owners));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v83 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&Scalar, (uint64_t)v200);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v83 + 200))(v83, v200);
  v84 = v201;
  if (v201 == v200)
  {
    v85 = 4;
    v84 = v200;
  }
  else
  {
    if (!v201)
      goto LABEL_103;
    v85 = 5;
  }
  (*(void (**)(void))(*v84 + 8 * v85))();
LABEL_103:
  if (SHIBYTE(v188) < 0)
    operator delete(Scalar);
  v86 = *a3;
  v198[0] = &off_1EA9A00F8;
  v198[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceThreshold;
  v199 = v198;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v86 + 216))(v86, v198);
  v87 = v199;
  if (v199 == v198)
  {
    v88 = 4;
    v87 = v198;
  }
  else
  {
    if (!v199)
      goto LABEL_110;
    v88 = 5;
  }
  (*(void (**)(void))(*v87 + 8 * v88))();
LABEL_110:
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v89 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v155, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v155, 0, (uint64_t *)&v194);
  v157 = v194;
  if (v194)
  {
    v90 = (std::__shared_weak_count *)operator new();
    v91 = v194;
    v90->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v90->__shared_owners_ = 0;
    v90->__shared_weak_owners_ = 0;
    v90[1].__vftable = v91;
  }
  else
  {
    v90 = 0;
  }
  v158 = v90;
  v194 = 0;
  std::string::basic_string[abi:ne180100]<0>(v153, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v89 + 24))(v89, &v157, v153);
  if (v154 < 0)
    operator delete(v153[0]);
  v92 = v158;
  if (v158)
  {
    v93 = (unint64_t *)&v158->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = v194;
  v194 = 0;
  if (v95)
    (*((void (**)(std::__shared_weak_count_vtbl *))v95->~__shared_weak_count + 1))(v95);
  if (v156 < 0)
    operator delete(v155[0]);
  v96 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v149, "alpha");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v149, 0, (uint64_t *)&v194);
  v151 = v194;
  if (v194)
  {
    v97 = (std::__shared_weak_count *)operator new();
    v98 = v194;
    v97->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v97->__shared_owners_ = 0;
    v97->__shared_weak_owners_ = 0;
    v97[1].__vftable = v98;
  }
  else
  {
    v97 = 0;
  }
  v152 = v97;
  v194 = 0;
  std::string::basic_string[abi:ne180100]<0>(v147, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v96 + 24))(v96, &v151, v147);
  if (v148 < 0)
    operator delete(v147[0]);
  v99 = v152;
  if (v152)
  {
    v100 = (unint64_t *)&v152->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v102 = v194;
  v194 = 0;
  if (v102)
    (*((void (**)(std::__shared_weak_count_vtbl *))v102->~__shared_weak_count + 1))(v102);
  if (v150 < 0)
    operator delete(v149[0]);
  v103 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v194);
  v145 = v194;
  if (v194)
  {
    v104 = (std::__shared_weak_count *)operator new();
    v105 = v194;
    v104->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v104->__shared_owners_ = 0;
    v104->__shared_weak_owners_ = 0;
    v104[1].__vftable = v105;
  }
  else
  {
    v104 = 0;
  }
  v146 = v104;
  v194 = 0;
  std::string::basic_string[abi:ne180100]<0>(v143, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v103 + 24))(v103, &v145, v143);
  if (v144 < 0)
    operator delete(v143[0]);
  v106 = v146;
  if (v146)
  {
    v107 = (unint64_t *)&v146->__shared_owners_;
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  v109 = v194;
  v194 = 0;
  if (v109)
    (*((void (**)(std::__shared_weak_count_vtbl *))v109->~__shared_weak_count + 1))(v109);
  v110 = *a3;
  v141 = Scalar;
  if (Scalar)
  {
    v111 = (std::__shared_weak_count *)operator new();
    v112 = (std::__shared_weak_count_vtbl *)Scalar;
    v111->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v111->__shared_owners_ = 0;
    v111->__shared_weak_owners_ = 0;
    v111[1].__vftable = v112;
  }
  else
  {
    v111 = 0;
  }
  v142 = v111;
  Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v110 + 56))(v110, &v141);
  v113 = v142;
  if (v142)
  {
    v114 = (unint64_t *)&v142->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  v116 = Scalar;
  Scalar = 0;
  if (v116)
    (*(void (**)(void *))(*(_QWORD *)v116 + 8))(v116);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v178);
  v117 = v178;
  std::string::basic_string[abi:ne180100]<0>(v137, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v137, 1, (uint64_t *)&__p);
  v139 = __p;
  if (__p)
  {
    v118 = (std::__shared_weak_count *)operator new();
    v119 = (std::__shared_weak_count_vtbl *)__p;
    v118->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v118->__shared_owners_ = 0;
    v118->__shared_weak_owners_ = 0;
    v118[1].__vftable = v119;
  }
  else
  {
    v118 = 0;
  }
  v140 = v118;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v189, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v190, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v191, "int32");
  std::string::basic_string[abi:ne180100]<0>(v192, "int8");
  std::string::basic_string[abi:ne180100]<0>(v193, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&v194, (unsigned __int8 *)&Scalar, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v117 + 24))(v117, &v139, &v194, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v194);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v193[i + 2]) < 0)
      operator delete((void *)v193[i]);
  }
  v121 = v140;
  if (v140)
  {
    v122 = (unint64_t *)&v140->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = __p;
  __p = 0;
  if (v124)
    (*(void (**)(void *))(*(_QWORD *)v124 + 8))(v124);
  if (v138 < 0)
    operator delete(v137[0]);
  v125 = *a3;
  v135 = v178;
  if (v178)
  {
    v126 = (std::__shared_weak_count *)operator new();
    v127 = (std::__shared_weak_count_vtbl *)v178;
    v126->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v126->__shared_owners_ = 0;
    v126->__shared_weak_owners_ = 0;
    v126[1].__vftable = v127;
  }
  else
  {
    v126 = 0;
  }
  v136 = v126;
  v178 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v125 + 56))(v125, &v135);
  v128 = v136;
  if (v136)
  {
    v129 = (unint64_t *)&v136->__shared_owners_;
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v131 = v178;
  v178 = 0;
  if (v131)
    (*(void (**)(void *))(*(_QWORD *)v131 + 8))(v131);
  if (v181)
  {
    v132 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v181);
    MEMORY[0x1E0C023A0](v132, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v173, 0);
  result = (uint64_t)v185;
  if (v185)
  {
    v134 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v185);
    return MEMORY[0x1E0C023A0](v134, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09B03AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  void *a67;
  uint64_t a72;
  uint64_t *v72;
  void *v74;
  uint64_t v75;

  v74 = a64;
  a64 = 0;
  if (v74)
    (*(void (**)(void *))(*(_QWORD *)v74 + 8))(v74);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a67, 0);
  v75 = *v72;
  *v72 = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a72, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::Exp::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  char *v42;
  char *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  char **v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _OWORD *v62;
  unsigned __int8 *v63;
  void *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  std::__shared_weak_count_vtbl *v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  void *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count_vtbl *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count_vtbl *v86;
  void *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count_vtbl *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count_vtbl *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count_vtbl *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  void *v100;
  void *v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  uint64_t i;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  std::__shared_weak_count_vtbl *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t result;
  uint64_t v118;
  void *v119;
  std::__shared_weak_count *v120;
  void *v121[2];
  char v122;
  void *v123;
  std::__shared_weak_count *v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  void *v131[2];
  char v132;
  void *v133[2];
  char v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  void *v137;
  std::__shared_weak_count *v138;
  __n128 v139;
  __int128 v140;
  __int128 v141;
  void *v142[2];
  uint64_t v143;
  void *v144;
  void *v145;
  _QWORD *v146;
  __n128 v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  char **v151;
  void *__p;
  void *v153;
  _QWORD *v154;
  void *v155;
  void *v156;
  _QWORD *v157;
  __n128 v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD v163[3];
  uint64_t v164[3];
  uint64_t v165[3];
  uint64_t v166[3];
  _QWORD v167[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v169;
  uint64_t v170;
  _QWORD v171[3];
  _QWORD *v172;
  _BYTE v173[24];
  _BYTE *v174;
  _BYTE v175[24];
  _BYTE *v176;
  _QWORD v177[3];
  _QWORD *v178;
  uint64_t v179;

  v179 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v159 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v169 = (uint64_t)&v8->~__shared_weak_count_0;
  v170 = (uint64_t)&v8->~__shared_weak_count_0;
  v160 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v155 = v10;
  *v10 = v9;
  v156 = v10 + 1;
  v157 = v10 + 1;
  v161 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v155);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v153 = v12 + 1;
  v154 = v12 + 1;
  v162 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v160, 3, &v158);
  MIL::IRParameter::Make(&v158, (uint64_t *)&v144);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v144);
  v13 = v144;
  v144 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v158.n128_u64[1];
  if (v158.n128_u64[1])
  {
    v15 = (unint64_t *)(v158.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  if (Scalar)
  {
    v169 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v151 = 0;
  v17 = operator new();
  *(_QWORD *)v17 = 0;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  v160 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, (void **)v17);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v160, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v151, 1uLL);
  v18 = v151;
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v155 = v20;
  *v20 = v19;
  v156 = v20 + 1;
  v157 = v20 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v155);
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  __p = v22;
  *v22 = v21;
  v153 = v22 + 1;
  v154 = v22 + 1;
  v169 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  v144 = v24;
  *v24 = v23;
  v145 = v24 + 1;
  v146 = v24 + 1;
  v170 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v144);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v147);
  MIL::IRParameter::Make(&v147, &v148);
  v25 = v148;
  v149 = v148;
  if (v148)
  {
    v26 = (_QWORD *)operator new();
    v27 = v148;
    *v26 = &unk_1EA99F888;
    v26[1] = 0;
    v26[2] = 0;
    v26[3] = v27;
  }
  else
  {
    v26 = 0;
  }
  v150 = v26;
  v148 = 0;
  v28 = v18[2];
  v29 = v18[1];
  if (v29 >= v28)
  {
    v31 = (v29 - *v18) >> 4;
    v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v33 = v28 - *v18;
    if (v33 >> 3 > v32)
      v32 = v33 >> 3;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
      v34 = 0xFFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    v163[1] = v18 + 2;
    v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v18 + 2), v34);
    v37 = (uint64_t *)&v35[16 * v31];
    *v37 = v25;
    v37[1] = (uint64_t)v26;
    v149 = 0;
    v150 = 0;
    v39 = *v18;
    v38 = v18[1];
    if (v38 == *v18)
    {
      v42 = v18[1];
      v40 = &v35[16 * v31];
    }
    else
    {
      v40 = &v35[16 * v31];
      do
      {
        v41 = *((_OWORD *)v38 - 1);
        v38 -= 16;
        *((_OWORD *)v40 - 1) = v41;
        v40 -= 16;
        *(_QWORD *)v38 = 0;
        *((_QWORD *)v38 + 1) = 0;
      }
      while (v38 != v39);
      v42 = *v18;
      v38 = v18[1];
    }
    v30 = (char *)(v37 + 2);
    *v18 = v40;
    v160 = v42;
    v161 = (uint64_t)v42;
    v18[1] = (char *)(v37 + 2);
    v162 = (uint64_t)v38;
    v43 = v18[2];
    v18[2] = &v35[16 * v36];
    v163[0] = v43;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v160);
  }
  else
  {
    *(_QWORD *)v29 = v25;
    *((_QWORD *)v29 + 1) = v26;
    v30 = v29 + 16;
    v149 = 0;
    v150 = 0;
  }
  v18[1] = v30;
  v44 = v148;
  v148 = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = (std::__shared_weak_count *)v147.n128_u64[1];
  if (v147.n128_u64[1])
  {
    v46 = (unint64_t *)(v147.n128_u64[1] + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  *(_OWORD *)v142 = *(_OWORD *)a2;
  v143 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v48 = v159;
  *(_QWORD *)&v141 = v159;
  if (v159)
  {
    v49 = (_QWORD *)operator new();
    *v49 = &unk_1EA99F8E8;
    v49[1] = 0;
    v49[2] = 0;
    v49[3] = v48;
  }
  else
  {
    v49 = 0;
  }
  *((_QWORD *)&v141 + 1) = v49;
  v159 = 0;
  *(_QWORD *)&v140 = v151;
  if (v151)
  {
    v50 = (_QWORD *)operator new();
    v51 = v151;
    *v50 = &unk_1EA99F948;
    v50[1] = 0;
    v50[2] = 0;
    v50[3] = v51;
  }
  else
  {
    v50 = 0;
  }
  *((_QWORD *)&v140 + 1) = v50;
  v151 = 0;
  v177[0] = &unk_1EA99FAC8;
  v177[1] = MIL::Validation::ValidateViaTypeInference;
  v178 = v177;
  v176 = 0;
  MIL::IROperator::Make((__int128 *)v142, &v141, &v140, (uint64_t)v177, (uint64_t)v175, a3);
  v52 = v176;
  if (v176 == v175)
  {
    v53 = 4;
    v52 = v175;
  }
  else
  {
    if (!v176)
      goto LABEL_55;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_55:
  v54 = v178;
  if (v178 == v177)
  {
    v55 = 4;
    v54 = v177;
    goto LABEL_59;
  }
  if (v178)
  {
    v55 = 5;
LABEL_59:
    (*(void (**)(void))(*v54 + 8 * v55))();
  }
  v56 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
  if (*((_QWORD *)&v140 + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
  if (*((_QWORD *)&v141 + 1))
  {
    v60 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (SHIBYTE(v143) < 0)
    operator delete(v142[0]);
  v155 = 0;
  v62 = (_OWORD *)operator new();
  *v62 = 0u;
  v62[1] = 0u;
  *((_DWORD *)v62 + 8) = 1065353216;
  v155 = v62;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v139);
  MIL::IRParameter::Make(&v139, (uint64_t *)&v160);
  v63 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v62, "minimum_compute_type", (uint64_t *)&v160);
  v64 = v160;
  v160 = 0;
  if (v64)
    (*(void (**)(void *))(*(_QWORD *)v64 + 8))(v64);
  v65 = (std::__shared_weak_count *)v139.n128_u64[1];
  if (v139.n128_u64[1])
  {
    v66 = (unint64_t *)(v139.n128_u64[1] + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 32))(*((_QWORD *)v63 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 48))(*((_QWORD *)v63 + 5), 1);
  v68 = *a3;
  v69 = (std::__shared_weak_count_vtbl *)v155;
  v137 = v155;
  if (v155)
  {
    v70 = (std::__shared_weak_count *)operator new();
    v70->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v70->__shared_owners_ = 0;
    v70->__shared_weak_owners_ = 0;
    v70[1].__vftable = v69;
  }
  else
  {
    v70 = 0;
  }
  v138 = v70;
  v155 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v68 + 184))(v68, &v137);
  v71 = v138;
  if (v138)
  {
    p_shared_owners = (unint64_t *)&v138->__shared_owners_;
    do
      v73 = __ldaxr(p_shared_owners);
    while (__stlxr(v73 - 1, p_shared_owners));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v160, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v160, (uint64_t)v173);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v74 + 200))(v74, v173);
  v75 = v174;
  if (v174 == v173)
  {
    v76 = 4;
    v75 = v173;
  }
  else
  {
    if (!v174)
      goto LABEL_92;
    v76 = 5;
  }
  (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_92:
  if (SHIBYTE(v162) < 0)
    operator delete(v160);
  v77 = *a3;
  v171[0] = &off_1EA9A00F8;
  v171[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceExp;
  v172 = v171;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v77 + 216))(v77, v171);
  v78 = v172;
  if (v172 == v171)
  {
    v79 = 4;
    v78 = v171;
  }
  else
  {
    if (!v172)
      goto LABEL_99;
    v79 = 5;
  }
  (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_99:
  MIL::Validation::TensorDTypeConstraints::Make(&v160);
  v80 = v160;
  std::string::basic_string[abi:ne180100]<0>(v133, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v133, 0, (uint64_t *)&Scalar);
  v135 = Scalar;
  if (Scalar)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v82 = Scalar;
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v82;
  }
  else
  {
    v81 = 0;
  }
  v136 = v81;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v131, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v80 + 24))(v80, &v135, v131);
  if (v132 < 0)
    operator delete(v131[0]);
  v83 = v136;
  if (v136)
  {
    v84 = (unint64_t *)&v136->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = Scalar;
  Scalar = 0;
  if (v86)
    (*((void (**)(std::__shared_weak_count_vtbl *))v86->~__shared_weak_count + 1))(v86);
  if (v134 < 0)
    operator delete(v133[0]);
  v87 = v160;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v129 = Scalar;
  if (Scalar)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = Scalar;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = v89;
  }
  else
  {
    v88 = 0;
  }
  v130 = v88;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v87 + 24))(v87, &v129, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v90 = v130;
  if (v130)
  {
    v91 = (unint64_t *)&v130->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = Scalar;
  Scalar = 0;
  if (v93)
    (*((void (**)(std::__shared_weak_count_vtbl *))v93->~__shared_weak_count + 1))(v93);
  v94 = *a3;
  v125 = v160;
  if (v160)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = (std::__shared_weak_count_vtbl *)v160;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = v96;
  }
  else
  {
    v95 = 0;
  }
  v126 = v95;
  v160 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v94 + 56))(v94, &v125);
  v97 = v126;
  if (v126)
  {
    v98 = (unint64_t *)&v126->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = v160;
  v160 = 0;
  if (v100)
    (*(void (**)(void *))(*(_QWORD *)v100 + 8))(v100);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v101 = __p;
  std::string::basic_string[abi:ne180100]<0>(v121, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v121, 1, (uint64_t *)&v144);
  v123 = v144;
  if (v144)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = (std::__shared_weak_count_vtbl *)v144;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v124 = v102;
  v144 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v160, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v163, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v164, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v165, "int32");
  std::string::basic_string[abi:ne180100]<0>(v166, "int8");
  std::string::basic_string[abi:ne180100]<0>(v167, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v160, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v101 + 24))(v101, &v123, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v167[i + 2]) < 0)
      operator delete((void *)v167[i]);
  }
  v105 = v124;
  if (v124)
  {
    v106 = (unint64_t *)&v124->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = v144;
  v144 = 0;
  if (v108)
    (*(void (**)(void *))(*(_QWORD *)v108 + 8))(v108);
  if (v122 < 0)
    operator delete(v121[0]);
  v109 = *a3;
  v119 = __p;
  if (__p)
  {
    v110 = (std::__shared_weak_count *)operator new();
    v111 = (std::__shared_weak_count_vtbl *)__p;
    v110->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v110->__shared_owners_ = 0;
    v110->__shared_weak_owners_ = 0;
    v110[1].__vftable = v111;
  }
  else
  {
    v110 = 0;
  }
  v120 = v110;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v109 + 56))(v109, &v119);
  v112 = v120;
  if (v120)
  {
    v113 = (unint64_t *)&v120->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = __p;
  __p = 0;
  if (v115)
    (*(void (**)(void *))(*(_QWORD *)v115 + 8))(v115);
  if (v155)
  {
    v116 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v155);
    MEMORY[0x1E0C023A0](v116, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, 0);
  result = v159;
  if (v159)
  {
    v118 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v159);
    return MEMORY[0x1E0C023A0](v118, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09B1748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void **a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  void *v62;
  uint64_t v63;

  v62 = a52;
  a52 = 0;
  if (v62)
    (*(void (**)(void *))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a55, 0);
  v63 = *v60;
  *v60 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a51, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::Floor::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  char *v42;
  char *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  char **v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _OWORD *v62;
  unsigned __int8 *v63;
  void *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  std::__shared_weak_count_vtbl *v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  void *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count_vtbl *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count_vtbl *v86;
  void *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count_vtbl *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count_vtbl *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count_vtbl *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  void *v100;
  void *v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  uint64_t i;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  std::__shared_weak_count_vtbl *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t result;
  uint64_t v118;
  void *v119;
  std::__shared_weak_count *v120;
  void *v121[2];
  char v122;
  void *v123;
  std::__shared_weak_count *v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  void *v131[2];
  char v132;
  void *v133[2];
  char v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  void *v137;
  std::__shared_weak_count *v138;
  __n128 v139;
  __int128 v140;
  __int128 v141;
  void *v142[2];
  uint64_t v143;
  void *v144;
  void *v145;
  _QWORD *v146;
  __n128 v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  char **v151;
  void *__p;
  void *v153;
  _QWORD *v154;
  void *v155;
  void *v156;
  _QWORD *v157;
  __n128 v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD v163[3];
  uint64_t v164[3];
  uint64_t v165[3];
  uint64_t v166[3];
  _QWORD v167[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v169;
  uint64_t v170;
  _QWORD v171[3];
  _QWORD *v172;
  _BYTE v173[24];
  _BYTE *v174;
  _BYTE v175[24];
  _BYTE *v176;
  _QWORD v177[3];
  _QWORD *v178;
  uint64_t v179;

  v179 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v159 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v169 = (uint64_t)&v8->~__shared_weak_count_0;
  v170 = (uint64_t)&v8->~__shared_weak_count_0;
  v160 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v155 = v10;
  *v10 = v9;
  v156 = v10 + 1;
  v157 = v10 + 1;
  v161 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v155);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v153 = v12 + 1;
  v154 = v12 + 1;
  v162 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v160, 3, &v158);
  MIL::IRParameter::Make(&v158, (uint64_t *)&v144);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v144);
  v13 = v144;
  v144 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v158.n128_u64[1];
  if (v158.n128_u64[1])
  {
    v15 = (unint64_t *)(v158.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  if (Scalar)
  {
    v169 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v151 = 0;
  v17 = operator new();
  *(_QWORD *)v17 = 0;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  v160 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, (void **)v17);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v160, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v151, 1uLL);
  v18 = v151;
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v155 = v20;
  *v20 = v19;
  v156 = v20 + 1;
  v157 = v20 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v155);
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  __p = v22;
  *v22 = v21;
  v153 = v22 + 1;
  v154 = v22 + 1;
  v169 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  v144 = v24;
  *v24 = v23;
  v145 = v24 + 1;
  v146 = v24 + 1;
  v170 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v144);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v147);
  MIL::IRParameter::Make(&v147, &v148);
  v25 = v148;
  v149 = v148;
  if (v148)
  {
    v26 = (_QWORD *)operator new();
    v27 = v148;
    *v26 = &unk_1EA99F888;
    v26[1] = 0;
    v26[2] = 0;
    v26[3] = v27;
  }
  else
  {
    v26 = 0;
  }
  v150 = v26;
  v148 = 0;
  v28 = v18[2];
  v29 = v18[1];
  if (v29 >= v28)
  {
    v31 = (v29 - *v18) >> 4;
    v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v33 = v28 - *v18;
    if (v33 >> 3 > v32)
      v32 = v33 >> 3;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
      v34 = 0xFFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    v163[1] = v18 + 2;
    v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v18 + 2), v34);
    v37 = (uint64_t *)&v35[16 * v31];
    *v37 = v25;
    v37[1] = (uint64_t)v26;
    v149 = 0;
    v150 = 0;
    v39 = *v18;
    v38 = v18[1];
    if (v38 == *v18)
    {
      v42 = v18[1];
      v40 = &v35[16 * v31];
    }
    else
    {
      v40 = &v35[16 * v31];
      do
      {
        v41 = *((_OWORD *)v38 - 1);
        v38 -= 16;
        *((_OWORD *)v40 - 1) = v41;
        v40 -= 16;
        *(_QWORD *)v38 = 0;
        *((_QWORD *)v38 + 1) = 0;
      }
      while (v38 != v39);
      v42 = *v18;
      v38 = v18[1];
    }
    v30 = (char *)(v37 + 2);
    *v18 = v40;
    v160 = v42;
    v161 = (uint64_t)v42;
    v18[1] = (char *)(v37 + 2);
    v162 = (uint64_t)v38;
    v43 = v18[2];
    v18[2] = &v35[16 * v36];
    v163[0] = v43;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v160);
  }
  else
  {
    *(_QWORD *)v29 = v25;
    *((_QWORD *)v29 + 1) = v26;
    v30 = v29 + 16;
    v149 = 0;
    v150 = 0;
  }
  v18[1] = v30;
  v44 = v148;
  v148 = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = (std::__shared_weak_count *)v147.n128_u64[1];
  if (v147.n128_u64[1])
  {
    v46 = (unint64_t *)(v147.n128_u64[1] + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  *(_OWORD *)v142 = *(_OWORD *)a2;
  v143 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v48 = v159;
  *(_QWORD *)&v141 = v159;
  if (v159)
  {
    v49 = (_QWORD *)operator new();
    *v49 = &unk_1EA99F8E8;
    v49[1] = 0;
    v49[2] = 0;
    v49[3] = v48;
  }
  else
  {
    v49 = 0;
  }
  *((_QWORD *)&v141 + 1) = v49;
  v159 = 0;
  *(_QWORD *)&v140 = v151;
  if (v151)
  {
    v50 = (_QWORD *)operator new();
    v51 = v151;
    *v50 = &unk_1EA99F948;
    v50[1] = 0;
    v50[2] = 0;
    v50[3] = v51;
  }
  else
  {
    v50 = 0;
  }
  *((_QWORD *)&v140 + 1) = v50;
  v151 = 0;
  v177[0] = &unk_1EA99FAC8;
  v177[1] = MIL::Validation::ValidateViaTypeInference;
  v178 = v177;
  v176 = 0;
  MIL::IROperator::Make((__int128 *)v142, &v141, &v140, (uint64_t)v177, (uint64_t)v175, a3);
  v52 = v176;
  if (v176 == v175)
  {
    v53 = 4;
    v52 = v175;
  }
  else
  {
    if (!v176)
      goto LABEL_55;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_55:
  v54 = v178;
  if (v178 == v177)
  {
    v55 = 4;
    v54 = v177;
    goto LABEL_59;
  }
  if (v178)
  {
    v55 = 5;
LABEL_59:
    (*(void (**)(void))(*v54 + 8 * v55))();
  }
  v56 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
  if (*((_QWORD *)&v140 + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
  if (*((_QWORD *)&v141 + 1))
  {
    v60 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (SHIBYTE(v143) < 0)
    operator delete(v142[0]);
  v155 = 0;
  v62 = (_OWORD *)operator new();
  *v62 = 0u;
  v62[1] = 0u;
  *((_DWORD *)v62 + 8) = 1065353216;
  v155 = v62;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v139);
  MIL::IRParameter::Make(&v139, (uint64_t *)&v160);
  v63 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v62, "minimum_compute_type", (uint64_t *)&v160);
  v64 = v160;
  v160 = 0;
  if (v64)
    (*(void (**)(void *))(*(_QWORD *)v64 + 8))(v64);
  v65 = (std::__shared_weak_count *)v139.n128_u64[1];
  if (v139.n128_u64[1])
  {
    v66 = (unint64_t *)(v139.n128_u64[1] + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 32))(*((_QWORD *)v63 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 48))(*((_QWORD *)v63 + 5), 1);
  v68 = *a3;
  v69 = (std::__shared_weak_count_vtbl *)v155;
  v137 = v155;
  if (v155)
  {
    v70 = (std::__shared_weak_count *)operator new();
    v70->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v70->__shared_owners_ = 0;
    v70->__shared_weak_owners_ = 0;
    v70[1].__vftable = v69;
  }
  else
  {
    v70 = 0;
  }
  v138 = v70;
  v155 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v68 + 184))(v68, &v137);
  v71 = v138;
  if (v138)
  {
    p_shared_owners = (unint64_t *)&v138->__shared_owners_;
    do
      v73 = __ldaxr(p_shared_owners);
    while (__stlxr(v73 - 1, p_shared_owners));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v160, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v160, (uint64_t)v173);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v74 + 200))(v74, v173);
  v75 = v174;
  if (v174 == v173)
  {
    v76 = 4;
    v75 = v173;
  }
  else
  {
    if (!v174)
      goto LABEL_92;
    v76 = 5;
  }
  (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_92:
  if (SHIBYTE(v162) < 0)
    operator delete(v160);
  v77 = *a3;
  v171[0] = &off_1EA9A00F8;
  v171[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceFloor;
  v172 = v171;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v77 + 216))(v77, v171);
  v78 = v172;
  if (v172 == v171)
  {
    v79 = 4;
    v78 = v171;
  }
  else
  {
    if (!v172)
      goto LABEL_99;
    v79 = 5;
  }
  (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_99:
  MIL::Validation::TensorDTypeConstraints::Make(&v160);
  v80 = v160;
  std::string::basic_string[abi:ne180100]<0>(v133, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v133, 0, (uint64_t *)&Scalar);
  v135 = Scalar;
  if (Scalar)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v82 = Scalar;
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v82;
  }
  else
  {
    v81 = 0;
  }
  v136 = v81;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v131, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v80 + 24))(v80, &v135, v131);
  if (v132 < 0)
    operator delete(v131[0]);
  v83 = v136;
  if (v136)
  {
    v84 = (unint64_t *)&v136->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = Scalar;
  Scalar = 0;
  if (v86)
    (*((void (**)(std::__shared_weak_count_vtbl *))v86->~__shared_weak_count + 1))(v86);
  if (v134 < 0)
    operator delete(v133[0]);
  v87 = v160;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v129 = Scalar;
  if (Scalar)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = Scalar;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = v89;
  }
  else
  {
    v88 = 0;
  }
  v130 = v88;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v87 + 24))(v87, &v129, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v90 = v130;
  if (v130)
  {
    v91 = (unint64_t *)&v130->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = Scalar;
  Scalar = 0;
  if (v93)
    (*((void (**)(std::__shared_weak_count_vtbl *))v93->~__shared_weak_count + 1))(v93);
  v94 = *a3;
  v125 = v160;
  if (v160)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = (std::__shared_weak_count_vtbl *)v160;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = v96;
  }
  else
  {
    v95 = 0;
  }
  v126 = v95;
  v160 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v94 + 56))(v94, &v125);
  v97 = v126;
  if (v126)
  {
    v98 = (unint64_t *)&v126->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = v160;
  v160 = 0;
  if (v100)
    (*(void (**)(void *))(*(_QWORD *)v100 + 8))(v100);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v101 = __p;
  std::string::basic_string[abi:ne180100]<0>(v121, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v121, 1, (uint64_t *)&v144);
  v123 = v144;
  if (v144)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = (std::__shared_weak_count_vtbl *)v144;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v124 = v102;
  v144 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v160, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v163, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v164, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v165, "int32");
  std::string::basic_string[abi:ne180100]<0>(v166, "int8");
  std::string::basic_string[abi:ne180100]<0>(v167, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v160, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v101 + 24))(v101, &v123, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v167[i + 2]) < 0)
      operator delete((void *)v167[i]);
  }
  v105 = v124;
  if (v124)
  {
    v106 = (unint64_t *)&v124->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = v144;
  v144 = 0;
  if (v108)
    (*(void (**)(void *))(*(_QWORD *)v108 + 8))(v108);
  if (v122 < 0)
    operator delete(v121[0]);
  v109 = *a3;
  v119 = __p;
  if (__p)
  {
    v110 = (std::__shared_weak_count *)operator new();
    v111 = (std::__shared_weak_count_vtbl *)__p;
    v110->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v110->__shared_owners_ = 0;
    v110->__shared_weak_owners_ = 0;
    v110[1].__vftable = v111;
  }
  else
  {
    v110 = 0;
  }
  v120 = v110;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v109 + 56))(v109, &v119);
  v112 = v120;
  if (v120)
  {
    v113 = (unint64_t *)&v120->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = __p;
  __p = 0;
  if (v115)
    (*(void (**)(void *))(*(_QWORD *)v115 + 8))(v115);
  if (v155)
  {
    v116 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v155);
    MEMORY[0x1E0C023A0](v116, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, 0);
  result = v159;
  if (v159)
  {
    v118 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v159);
    return MEMORY[0x1E0C023A0](v118, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09B2A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void **a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  void *v62;
  uint64_t v63;

  v62 = a52;
  a52 = 0;
  if (v62)
    (*(void (**)(void *))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a55, 0);
  v63 = *v60;
  *v60 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a51, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::Round::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  char *v42;
  char *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  char **v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _OWORD *v62;
  unsigned __int8 *v63;
  void *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  std::__shared_weak_count_vtbl *v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  void *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count_vtbl *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count_vtbl *v86;
  void *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count_vtbl *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count_vtbl *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count_vtbl *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  void *v100;
  void *v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  uint64_t i;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  std::__shared_weak_count_vtbl *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t result;
  uint64_t v118;
  void *v119;
  std::__shared_weak_count *v120;
  void *v121[2];
  char v122;
  void *v123;
  std::__shared_weak_count *v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  void *v131[2];
  char v132;
  void *v133[2];
  char v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  void *v137;
  std::__shared_weak_count *v138;
  __n128 v139;
  __int128 v140;
  __int128 v141;
  void *v142[2];
  uint64_t v143;
  void *v144;
  void *v145;
  _QWORD *v146;
  __n128 v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  char **v151;
  void *__p;
  void *v153;
  _QWORD *v154;
  void *v155;
  void *v156;
  _QWORD *v157;
  __n128 v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD v163[3];
  uint64_t v164[3];
  uint64_t v165[3];
  uint64_t v166[3];
  _QWORD v167[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v169;
  uint64_t v170;
  _QWORD v171[3];
  _QWORD *v172;
  _BYTE v173[24];
  _BYTE *v174;
  _BYTE v175[24];
  _BYTE *v176;
  _QWORD v177[3];
  _QWORD *v178;
  uint64_t v179;

  v179 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v159 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v169 = (uint64_t)&v8->~__shared_weak_count_0;
  v170 = (uint64_t)&v8->~__shared_weak_count_0;
  v160 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v155 = v10;
  *v10 = v9;
  v156 = v10 + 1;
  v157 = v10 + 1;
  v161 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v155);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v153 = v12 + 1;
  v154 = v12 + 1;
  v162 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v160, 3, &v158);
  MIL::IRParameter::Make(&v158, (uint64_t *)&v144);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v144);
  v13 = v144;
  v144 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v158.n128_u64[1];
  if (v158.n128_u64[1])
  {
    v15 = (unint64_t *)(v158.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  if (Scalar)
  {
    v169 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v151 = 0;
  v17 = operator new();
  *(_QWORD *)v17 = 0;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  v160 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, (void **)v17);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v160, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v151, 1uLL);
  v18 = v151;
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v155 = v20;
  *v20 = v19;
  v156 = v20 + 1;
  v157 = v20 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v155);
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  __p = v22;
  *v22 = v21;
  v153 = v22 + 1;
  v154 = v22 + 1;
  v169 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  v144 = v24;
  *v24 = v23;
  v145 = v24 + 1;
  v146 = v24 + 1;
  v170 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v144);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v147);
  MIL::IRParameter::Make(&v147, &v148);
  v25 = v148;
  v149 = v148;
  if (v148)
  {
    v26 = (_QWORD *)operator new();
    v27 = v148;
    *v26 = &unk_1EA99F888;
    v26[1] = 0;
    v26[2] = 0;
    v26[3] = v27;
  }
  else
  {
    v26 = 0;
  }
  v150 = v26;
  v148 = 0;
  v28 = v18[2];
  v29 = v18[1];
  if (v29 >= v28)
  {
    v31 = (v29 - *v18) >> 4;
    v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v33 = v28 - *v18;
    if (v33 >> 3 > v32)
      v32 = v33 >> 3;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
      v34 = 0xFFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    v163[1] = v18 + 2;
    v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v18 + 2), v34);
    v37 = (uint64_t *)&v35[16 * v31];
    *v37 = v25;
    v37[1] = (uint64_t)v26;
    v149 = 0;
    v150 = 0;
    v39 = *v18;
    v38 = v18[1];
    if (v38 == *v18)
    {
      v42 = v18[1];
      v40 = &v35[16 * v31];
    }
    else
    {
      v40 = &v35[16 * v31];
      do
      {
        v41 = *((_OWORD *)v38 - 1);
        v38 -= 16;
        *((_OWORD *)v40 - 1) = v41;
        v40 -= 16;
        *(_QWORD *)v38 = 0;
        *((_QWORD *)v38 + 1) = 0;
      }
      while (v38 != v39);
      v42 = *v18;
      v38 = v18[1];
    }
    v30 = (char *)(v37 + 2);
    *v18 = v40;
    v160 = v42;
    v161 = (uint64_t)v42;
    v18[1] = (char *)(v37 + 2);
    v162 = (uint64_t)v38;
    v43 = v18[2];
    v18[2] = &v35[16 * v36];
    v163[0] = v43;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v160);
  }
  else
  {
    *(_QWORD *)v29 = v25;
    *((_QWORD *)v29 + 1) = v26;
    v30 = v29 + 16;
    v149 = 0;
    v150 = 0;
  }
  v18[1] = v30;
  v44 = v148;
  v148 = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = (std::__shared_weak_count *)v147.n128_u64[1];
  if (v147.n128_u64[1])
  {
    v46 = (unint64_t *)(v147.n128_u64[1] + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  *(_OWORD *)v142 = *(_OWORD *)a2;
  v143 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v48 = v159;
  *(_QWORD *)&v141 = v159;
  if (v159)
  {
    v49 = (_QWORD *)operator new();
    *v49 = &unk_1EA99F8E8;
    v49[1] = 0;
    v49[2] = 0;
    v49[3] = v48;
  }
  else
  {
    v49 = 0;
  }
  *((_QWORD *)&v141 + 1) = v49;
  v159 = 0;
  *(_QWORD *)&v140 = v151;
  if (v151)
  {
    v50 = (_QWORD *)operator new();
    v51 = v151;
    *v50 = &unk_1EA99F948;
    v50[1] = 0;
    v50[2] = 0;
    v50[3] = v51;
  }
  else
  {
    v50 = 0;
  }
  *((_QWORD *)&v140 + 1) = v50;
  v151 = 0;
  v177[0] = &unk_1EA99FAC8;
  v177[1] = MIL::Validation::ValidateViaTypeInference;
  v178 = v177;
  v176 = 0;
  MIL::IROperator::Make((__int128 *)v142, &v141, &v140, (uint64_t)v177, (uint64_t)v175, a3);
  v52 = v176;
  if (v176 == v175)
  {
    v53 = 4;
    v52 = v175;
  }
  else
  {
    if (!v176)
      goto LABEL_55;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_55:
  v54 = v178;
  if (v178 == v177)
  {
    v55 = 4;
    v54 = v177;
    goto LABEL_59;
  }
  if (v178)
  {
    v55 = 5;
LABEL_59:
    (*(void (**)(void))(*v54 + 8 * v55))();
  }
  v56 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
  if (*((_QWORD *)&v140 + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
  if (*((_QWORD *)&v141 + 1))
  {
    v60 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (SHIBYTE(v143) < 0)
    operator delete(v142[0]);
  v155 = 0;
  v62 = (_OWORD *)operator new();
  *v62 = 0u;
  v62[1] = 0u;
  *((_DWORD *)v62 + 8) = 1065353216;
  v155 = v62;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v139);
  MIL::IRParameter::Make(&v139, (uint64_t *)&v160);
  v63 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v62, "minimum_compute_type", (uint64_t *)&v160);
  v64 = v160;
  v160 = 0;
  if (v64)
    (*(void (**)(void *))(*(_QWORD *)v64 + 8))(v64);
  v65 = (std::__shared_weak_count *)v139.n128_u64[1];
  if (v139.n128_u64[1])
  {
    v66 = (unint64_t *)(v139.n128_u64[1] + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 32))(*((_QWORD *)v63 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 48))(*((_QWORD *)v63 + 5), 1);
  v68 = *a3;
  v69 = (std::__shared_weak_count_vtbl *)v155;
  v137 = v155;
  if (v155)
  {
    v70 = (std::__shared_weak_count *)operator new();
    v70->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v70->__shared_owners_ = 0;
    v70->__shared_weak_owners_ = 0;
    v70[1].__vftable = v69;
  }
  else
  {
    v70 = 0;
  }
  v138 = v70;
  v155 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v68 + 184))(v68, &v137);
  v71 = v138;
  if (v138)
  {
    p_shared_owners = (unint64_t *)&v138->__shared_owners_;
    do
      v73 = __ldaxr(p_shared_owners);
    while (__stlxr(v73 - 1, p_shared_owners));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v160, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v160, (uint64_t)v173);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v74 + 200))(v74, v173);
  v75 = v174;
  if (v174 == v173)
  {
    v76 = 4;
    v75 = v173;
  }
  else
  {
    if (!v174)
      goto LABEL_92;
    v76 = 5;
  }
  (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_92:
  if (SHIBYTE(v162) < 0)
    operator delete(v160);
  v77 = *a3;
  v171[0] = &off_1EA9A00F8;
  v171[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceRound;
  v172 = v171;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v77 + 216))(v77, v171);
  v78 = v172;
  if (v172 == v171)
  {
    v79 = 4;
    v78 = v171;
  }
  else
  {
    if (!v172)
      goto LABEL_99;
    v79 = 5;
  }
  (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_99:
  MIL::Validation::TensorDTypeConstraints::Make(&v160);
  v80 = v160;
  std::string::basic_string[abi:ne180100]<0>(v133, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v133, 0, (uint64_t *)&Scalar);
  v135 = Scalar;
  if (Scalar)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v82 = Scalar;
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v82;
  }
  else
  {
    v81 = 0;
  }
  v136 = v81;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v131, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v80 + 24))(v80, &v135, v131);
  if (v132 < 0)
    operator delete(v131[0]);
  v83 = v136;
  if (v136)
  {
    v84 = (unint64_t *)&v136->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = Scalar;
  Scalar = 0;
  if (v86)
    (*((void (**)(std::__shared_weak_count_vtbl *))v86->~__shared_weak_count + 1))(v86);
  if (v134 < 0)
    operator delete(v133[0]);
  v87 = v160;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v129 = Scalar;
  if (Scalar)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = Scalar;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = v89;
  }
  else
  {
    v88 = 0;
  }
  v130 = v88;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v87 + 24))(v87, &v129, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v90 = v130;
  if (v130)
  {
    v91 = (unint64_t *)&v130->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = Scalar;
  Scalar = 0;
  if (v93)
    (*((void (**)(std::__shared_weak_count_vtbl *))v93->~__shared_weak_count + 1))(v93);
  v94 = *a3;
  v125 = v160;
  if (v160)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = (std::__shared_weak_count_vtbl *)v160;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = v96;
  }
  else
  {
    v95 = 0;
  }
  v126 = v95;
  v160 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v94 + 56))(v94, &v125);
  v97 = v126;
  if (v126)
  {
    v98 = (unint64_t *)&v126->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = v160;
  v160 = 0;
  if (v100)
    (*(void (**)(void *))(*(_QWORD *)v100 + 8))(v100);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v101 = __p;
  std::string::basic_string[abi:ne180100]<0>(v121, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v121, 1, (uint64_t *)&v144);
  v123 = v144;
  if (v144)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = (std::__shared_weak_count_vtbl *)v144;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v124 = v102;
  v144 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v160, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v163, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v164, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v165, "int32");
  std::string::basic_string[abi:ne180100]<0>(v166, "int8");
  std::string::basic_string[abi:ne180100]<0>(v167, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v160, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v101 + 24))(v101, &v123, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v167[i + 2]) < 0)
      operator delete((void *)v167[i]);
  }
  v105 = v124;
  if (v124)
  {
    v106 = (unint64_t *)&v124->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = v144;
  v144 = 0;
  if (v108)
    (*(void (**)(void *))(*(_QWORD *)v108 + 8))(v108);
  if (v122 < 0)
    operator delete(v121[0]);
  v109 = *a3;
  v119 = __p;
  if (__p)
  {
    v110 = (std::__shared_weak_count *)operator new();
    v111 = (std::__shared_weak_count_vtbl *)__p;
    v110->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v110->__shared_owners_ = 0;
    v110->__shared_weak_owners_ = 0;
    v110[1].__vftable = v111;
  }
  else
  {
    v110 = 0;
  }
  v120 = v110;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v109 + 56))(v109, &v119);
  v112 = v120;
  if (v120)
  {
    v113 = (unint64_t *)&v120->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = __p;
  __p = 0;
  if (v115)
    (*(void (**)(void *))(*(_QWORD *)v115 + 8))(v115);
  if (v155)
  {
    v116 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v155);
    MEMORY[0x1E0C023A0](v116, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, 0);
  result = v159;
  if (v159)
  {
    v118 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v159);
    return MEMORY[0x1E0C023A0](v118, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09B3CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void **a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  void *v62;
  uint64_t v63;

  v62 = a52;
  a52 = 0;
  if (v62)
    (*(void (**)(void *))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a55, 0);
  v63 = *v60;
  *v60 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a51, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::Sin::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  char *v42;
  char *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  char **v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _OWORD *v62;
  unsigned __int8 *v63;
  void *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  std::__shared_weak_count_vtbl *v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  void *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count_vtbl *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count_vtbl *v86;
  void *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count_vtbl *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count_vtbl *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count_vtbl *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  void *v100;
  void *v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  uint64_t i;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  std::__shared_weak_count_vtbl *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t result;
  uint64_t v118;
  void *v119;
  std::__shared_weak_count *v120;
  void *v121[2];
  char v122;
  void *v123;
  std::__shared_weak_count *v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  void *v131[2];
  char v132;
  void *v133[2];
  char v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  void *v137;
  std::__shared_weak_count *v138;
  __n128 v139;
  __int128 v140;
  __int128 v141;
  void *v142[2];
  uint64_t v143;
  void *v144;
  void *v145;
  _QWORD *v146;
  __n128 v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  char **v151;
  void *__p;
  void *v153;
  _QWORD *v154;
  void *v155;
  void *v156;
  _QWORD *v157;
  __n128 v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD v163[3];
  uint64_t v164[3];
  uint64_t v165[3];
  uint64_t v166[3];
  _QWORD v167[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v169;
  uint64_t v170;
  _QWORD v171[3];
  _QWORD *v172;
  _BYTE v173[24];
  _BYTE *v174;
  _BYTE v175[24];
  _BYTE *v176;
  _QWORD v177[3];
  _QWORD *v178;
  uint64_t v179;

  v179 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v159 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v169 = (uint64_t)&v8->~__shared_weak_count_0;
  v170 = (uint64_t)&v8->~__shared_weak_count_0;
  v160 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v155 = v10;
  *v10 = v9;
  v156 = v10 + 1;
  v157 = v10 + 1;
  v161 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v155);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v153 = v12 + 1;
  v154 = v12 + 1;
  v162 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v160, 3, &v158);
  MIL::IRParameter::Make(&v158, (uint64_t *)&v144);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v144);
  v13 = v144;
  v144 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v158.n128_u64[1];
  if (v158.n128_u64[1])
  {
    v15 = (unint64_t *)(v158.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  if (Scalar)
  {
    v169 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v151 = 0;
  v17 = operator new();
  *(_QWORD *)v17 = 0;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  v160 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, (void **)v17);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v160, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v151, 1uLL);
  v18 = v151;
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v155 = v20;
  *v20 = v19;
  v156 = v20 + 1;
  v157 = v20 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v155);
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  __p = v22;
  *v22 = v21;
  v153 = v22 + 1;
  v154 = v22 + 1;
  v169 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  v144 = v24;
  *v24 = v23;
  v145 = v24 + 1;
  v146 = v24 + 1;
  v170 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v144);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v147);
  MIL::IRParameter::Make(&v147, &v148);
  v25 = v148;
  v149 = v148;
  if (v148)
  {
    v26 = (_QWORD *)operator new();
    v27 = v148;
    *v26 = &unk_1EA99F888;
    v26[1] = 0;
    v26[2] = 0;
    v26[3] = v27;
  }
  else
  {
    v26 = 0;
  }
  v150 = v26;
  v148 = 0;
  v28 = v18[2];
  v29 = v18[1];
  if (v29 >= v28)
  {
    v31 = (v29 - *v18) >> 4;
    v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v33 = v28 - *v18;
    if (v33 >> 3 > v32)
      v32 = v33 >> 3;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
      v34 = 0xFFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    v163[1] = v18 + 2;
    v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v18 + 2), v34);
    v37 = (uint64_t *)&v35[16 * v31];
    *v37 = v25;
    v37[1] = (uint64_t)v26;
    v149 = 0;
    v150 = 0;
    v39 = *v18;
    v38 = v18[1];
    if (v38 == *v18)
    {
      v42 = v18[1];
      v40 = &v35[16 * v31];
    }
    else
    {
      v40 = &v35[16 * v31];
      do
      {
        v41 = *((_OWORD *)v38 - 1);
        v38 -= 16;
        *((_OWORD *)v40 - 1) = v41;
        v40 -= 16;
        *(_QWORD *)v38 = 0;
        *((_QWORD *)v38 + 1) = 0;
      }
      while (v38 != v39);
      v42 = *v18;
      v38 = v18[1];
    }
    v30 = (char *)(v37 + 2);
    *v18 = v40;
    v160 = v42;
    v161 = (uint64_t)v42;
    v18[1] = (char *)(v37 + 2);
    v162 = (uint64_t)v38;
    v43 = v18[2];
    v18[2] = &v35[16 * v36];
    v163[0] = v43;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v160);
  }
  else
  {
    *(_QWORD *)v29 = v25;
    *((_QWORD *)v29 + 1) = v26;
    v30 = v29 + 16;
    v149 = 0;
    v150 = 0;
  }
  v18[1] = v30;
  v44 = v148;
  v148 = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = (std::__shared_weak_count *)v147.n128_u64[1];
  if (v147.n128_u64[1])
  {
    v46 = (unint64_t *)(v147.n128_u64[1] + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  *(_OWORD *)v142 = *(_OWORD *)a2;
  v143 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v48 = v159;
  *(_QWORD *)&v141 = v159;
  if (v159)
  {
    v49 = (_QWORD *)operator new();
    *v49 = &unk_1EA99F8E8;
    v49[1] = 0;
    v49[2] = 0;
    v49[3] = v48;
  }
  else
  {
    v49 = 0;
  }
  *((_QWORD *)&v141 + 1) = v49;
  v159 = 0;
  *(_QWORD *)&v140 = v151;
  if (v151)
  {
    v50 = (_QWORD *)operator new();
    v51 = v151;
    *v50 = &unk_1EA99F948;
    v50[1] = 0;
    v50[2] = 0;
    v50[3] = v51;
  }
  else
  {
    v50 = 0;
  }
  *((_QWORD *)&v140 + 1) = v50;
  v151 = 0;
  v177[0] = &unk_1EA99FAC8;
  v177[1] = MIL::Validation::ValidateViaTypeInference;
  v178 = v177;
  v176 = 0;
  MIL::IROperator::Make((__int128 *)v142, &v141, &v140, (uint64_t)v177, (uint64_t)v175, a3);
  v52 = v176;
  if (v176 == v175)
  {
    v53 = 4;
    v52 = v175;
  }
  else
  {
    if (!v176)
      goto LABEL_55;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_55:
  v54 = v178;
  if (v178 == v177)
  {
    v55 = 4;
    v54 = v177;
    goto LABEL_59;
  }
  if (v178)
  {
    v55 = 5;
LABEL_59:
    (*(void (**)(void))(*v54 + 8 * v55))();
  }
  v56 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
  if (*((_QWORD *)&v140 + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
  if (*((_QWORD *)&v141 + 1))
  {
    v60 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (SHIBYTE(v143) < 0)
    operator delete(v142[0]);
  v155 = 0;
  v62 = (_OWORD *)operator new();
  *v62 = 0u;
  v62[1] = 0u;
  *((_DWORD *)v62 + 8) = 1065353216;
  v155 = v62;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v139);
  MIL::IRParameter::Make(&v139, (uint64_t *)&v160);
  v63 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v62, "minimum_compute_type", (uint64_t *)&v160);
  v64 = v160;
  v160 = 0;
  if (v64)
    (*(void (**)(void *))(*(_QWORD *)v64 + 8))(v64);
  v65 = (std::__shared_weak_count *)v139.n128_u64[1];
  if (v139.n128_u64[1])
  {
    v66 = (unint64_t *)(v139.n128_u64[1] + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 32))(*((_QWORD *)v63 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 48))(*((_QWORD *)v63 + 5), 1);
  v68 = *a3;
  v69 = (std::__shared_weak_count_vtbl *)v155;
  v137 = v155;
  if (v155)
  {
    v70 = (std::__shared_weak_count *)operator new();
    v70->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v70->__shared_owners_ = 0;
    v70->__shared_weak_owners_ = 0;
    v70[1].__vftable = v69;
  }
  else
  {
    v70 = 0;
  }
  v138 = v70;
  v155 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v68 + 184))(v68, &v137);
  v71 = v138;
  if (v138)
  {
    p_shared_owners = (unint64_t *)&v138->__shared_owners_;
    do
      v73 = __ldaxr(p_shared_owners);
    while (__stlxr(v73 - 1, p_shared_owners));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v160, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v160, (uint64_t)v173);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v74 + 200))(v74, v173);
  v75 = v174;
  if (v174 == v173)
  {
    v76 = 4;
    v75 = v173;
  }
  else
  {
    if (!v174)
      goto LABEL_92;
    v76 = 5;
  }
  (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_92:
  if (SHIBYTE(v162) < 0)
    operator delete(v160);
  v77 = *a3;
  v171[0] = &off_1EA9A00F8;
  v171[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceSin;
  v172 = v171;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v77 + 216))(v77, v171);
  v78 = v172;
  if (v172 == v171)
  {
    v79 = 4;
    v78 = v171;
  }
  else
  {
    if (!v172)
      goto LABEL_99;
    v79 = 5;
  }
  (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_99:
  MIL::Validation::TensorDTypeConstraints::Make(&v160);
  v80 = v160;
  std::string::basic_string[abi:ne180100]<0>(v133, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v133, 0, (uint64_t *)&Scalar);
  v135 = Scalar;
  if (Scalar)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v82 = Scalar;
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v82;
  }
  else
  {
    v81 = 0;
  }
  v136 = v81;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v131, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v80 + 24))(v80, &v135, v131);
  if (v132 < 0)
    operator delete(v131[0]);
  v83 = v136;
  if (v136)
  {
    v84 = (unint64_t *)&v136->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = Scalar;
  Scalar = 0;
  if (v86)
    (*((void (**)(std::__shared_weak_count_vtbl *))v86->~__shared_weak_count + 1))(v86);
  if (v134 < 0)
    operator delete(v133[0]);
  v87 = v160;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v129 = Scalar;
  if (Scalar)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = Scalar;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = v89;
  }
  else
  {
    v88 = 0;
  }
  v130 = v88;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v87 + 24))(v87, &v129, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v90 = v130;
  if (v130)
  {
    v91 = (unint64_t *)&v130->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = Scalar;
  Scalar = 0;
  if (v93)
    (*((void (**)(std::__shared_weak_count_vtbl *))v93->~__shared_weak_count + 1))(v93);
  v94 = *a3;
  v125 = v160;
  if (v160)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = (std::__shared_weak_count_vtbl *)v160;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = v96;
  }
  else
  {
    v95 = 0;
  }
  v126 = v95;
  v160 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v94 + 56))(v94, &v125);
  v97 = v126;
  if (v126)
  {
    v98 = (unint64_t *)&v126->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = v160;
  v160 = 0;
  if (v100)
    (*(void (**)(void *))(*(_QWORD *)v100 + 8))(v100);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v101 = __p;
  std::string::basic_string[abi:ne180100]<0>(v121, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v121, 1, (uint64_t *)&v144);
  v123 = v144;
  if (v144)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = (std::__shared_weak_count_vtbl *)v144;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v124 = v102;
  v144 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v160, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v163, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v164, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v165, "int32");
  std::string::basic_string[abi:ne180100]<0>(v166, "int8");
  std::string::basic_string[abi:ne180100]<0>(v167, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v160, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v101 + 24))(v101, &v123, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v167[i + 2]) < 0)
      operator delete((void *)v167[i]);
  }
  v105 = v124;
  if (v124)
  {
    v106 = (unint64_t *)&v124->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = v144;
  v144 = 0;
  if (v108)
    (*(void (**)(void *))(*(_QWORD *)v108 + 8))(v108);
  if (v122 < 0)
    operator delete(v121[0]);
  v109 = *a3;
  v119 = __p;
  if (__p)
  {
    v110 = (std::__shared_weak_count *)operator new();
    v111 = (std::__shared_weak_count_vtbl *)__p;
    v110->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v110->__shared_owners_ = 0;
    v110->__shared_weak_owners_ = 0;
    v110[1].__vftable = v111;
  }
  else
  {
    v110 = 0;
  }
  v120 = v110;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v109 + 56))(v109, &v119);
  v112 = v120;
  if (v120)
  {
    v113 = (unint64_t *)&v120->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = __p;
  __p = 0;
  if (v115)
    (*(void (**)(void *))(*(_QWORD *)v115 + 8))(v115);
  if (v155)
  {
    v116 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v155);
    MEMORY[0x1E0C023A0](v116, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, 0);
  result = v159;
  if (v159)
  {
    v118 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v159);
    return MEMORY[0x1E0C023A0](v118, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09B4FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void **a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  void *v62;
  uint64_t v63;

  v62 = a52;
  a52 = 0;
  if (v62)
    (*(void (**)(void *))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a55, 0);
  v63 = *v60;
  *v60 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a51, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::Sinh::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  char *v42;
  char *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  char **v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _OWORD *v62;
  unsigned __int8 *v63;
  void *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  std::__shared_weak_count_vtbl *v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  void *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count_vtbl *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count_vtbl *v86;
  void *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count_vtbl *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count_vtbl *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count_vtbl *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  void *v100;
  void *v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  uint64_t i;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  std::__shared_weak_count_vtbl *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t result;
  uint64_t v118;
  void *v119;
  std::__shared_weak_count *v120;
  void *v121[2];
  char v122;
  void *v123;
  std::__shared_weak_count *v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  void *v131[2];
  char v132;
  void *v133[2];
  char v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  void *v137;
  std::__shared_weak_count *v138;
  __n128 v139;
  __int128 v140;
  __int128 v141;
  void *v142[2];
  uint64_t v143;
  void *v144;
  void *v145;
  _QWORD *v146;
  __n128 v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  char **v151;
  void *__p;
  void *v153;
  _QWORD *v154;
  void *v155;
  void *v156;
  _QWORD *v157;
  __n128 v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD v163[3];
  uint64_t v164[3];
  uint64_t v165[3];
  uint64_t v166[3];
  _QWORD v167[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v169;
  uint64_t v170;
  _QWORD v171[3];
  _QWORD *v172;
  _BYTE v173[24];
  _BYTE *v174;
  _BYTE v175[24];
  _BYTE *v176;
  _QWORD v177[3];
  _QWORD *v178;
  uint64_t v179;

  v179 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v159 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v169 = (uint64_t)&v8->~__shared_weak_count_0;
  v170 = (uint64_t)&v8->~__shared_weak_count_0;
  v160 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v155 = v10;
  *v10 = v9;
  v156 = v10 + 1;
  v157 = v10 + 1;
  v161 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v155);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v153 = v12 + 1;
  v154 = v12 + 1;
  v162 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v160, 3, &v158);
  MIL::IRParameter::Make(&v158, (uint64_t *)&v144);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v144);
  v13 = v144;
  v144 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v158.n128_u64[1];
  if (v158.n128_u64[1])
  {
    v15 = (unint64_t *)(v158.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  if (Scalar)
  {
    v169 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v151 = 0;
  v17 = operator new();
  *(_QWORD *)v17 = 0;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  v160 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, (void **)v17);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v160, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v151, 1uLL);
  v18 = v151;
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v155 = v20;
  *v20 = v19;
  v156 = v20 + 1;
  v157 = v20 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v155);
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  __p = v22;
  *v22 = v21;
  v153 = v22 + 1;
  v154 = v22 + 1;
  v169 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  v144 = v24;
  *v24 = v23;
  v145 = v24 + 1;
  v146 = v24 + 1;
  v170 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v144);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v147);
  MIL::IRParameter::Make(&v147, &v148);
  v25 = v148;
  v149 = v148;
  if (v148)
  {
    v26 = (_QWORD *)operator new();
    v27 = v148;
    *v26 = &unk_1EA99F888;
    v26[1] = 0;
    v26[2] = 0;
    v26[3] = v27;
  }
  else
  {
    v26 = 0;
  }
  v150 = v26;
  v148 = 0;
  v28 = v18[2];
  v29 = v18[1];
  if (v29 >= v28)
  {
    v31 = (v29 - *v18) >> 4;
    v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v33 = v28 - *v18;
    if (v33 >> 3 > v32)
      v32 = v33 >> 3;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
      v34 = 0xFFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    v163[1] = v18 + 2;
    v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v18 + 2), v34);
    v37 = (uint64_t *)&v35[16 * v31];
    *v37 = v25;
    v37[1] = (uint64_t)v26;
    v149 = 0;
    v150 = 0;
    v39 = *v18;
    v38 = v18[1];
    if (v38 == *v18)
    {
      v42 = v18[1];
      v40 = &v35[16 * v31];
    }
    else
    {
      v40 = &v35[16 * v31];
      do
      {
        v41 = *((_OWORD *)v38 - 1);
        v38 -= 16;
        *((_OWORD *)v40 - 1) = v41;
        v40 -= 16;
        *(_QWORD *)v38 = 0;
        *((_QWORD *)v38 + 1) = 0;
      }
      while (v38 != v39);
      v42 = *v18;
      v38 = v18[1];
    }
    v30 = (char *)(v37 + 2);
    *v18 = v40;
    v160 = v42;
    v161 = (uint64_t)v42;
    v18[1] = (char *)(v37 + 2);
    v162 = (uint64_t)v38;
    v43 = v18[2];
    v18[2] = &v35[16 * v36];
    v163[0] = v43;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v160);
  }
  else
  {
    *(_QWORD *)v29 = v25;
    *((_QWORD *)v29 + 1) = v26;
    v30 = v29 + 16;
    v149 = 0;
    v150 = 0;
  }
  v18[1] = v30;
  v44 = v148;
  v148 = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = (std::__shared_weak_count *)v147.n128_u64[1];
  if (v147.n128_u64[1])
  {
    v46 = (unint64_t *)(v147.n128_u64[1] + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  *(_OWORD *)v142 = *(_OWORD *)a2;
  v143 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v48 = v159;
  *(_QWORD *)&v141 = v159;
  if (v159)
  {
    v49 = (_QWORD *)operator new();
    *v49 = &unk_1EA99F8E8;
    v49[1] = 0;
    v49[2] = 0;
    v49[3] = v48;
  }
  else
  {
    v49 = 0;
  }
  *((_QWORD *)&v141 + 1) = v49;
  v159 = 0;
  *(_QWORD *)&v140 = v151;
  if (v151)
  {
    v50 = (_QWORD *)operator new();
    v51 = v151;
    *v50 = &unk_1EA99F948;
    v50[1] = 0;
    v50[2] = 0;
    v50[3] = v51;
  }
  else
  {
    v50 = 0;
  }
  *((_QWORD *)&v140 + 1) = v50;
  v151 = 0;
  v177[0] = &unk_1EA99FAC8;
  v177[1] = MIL::Validation::ValidateViaTypeInference;
  v178 = v177;
  v176 = 0;
  MIL::IROperator::Make((__int128 *)v142, &v141, &v140, (uint64_t)v177, (uint64_t)v175, a3);
  v52 = v176;
  if (v176 == v175)
  {
    v53 = 4;
    v52 = v175;
  }
  else
  {
    if (!v176)
      goto LABEL_55;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_55:
  v54 = v178;
  if (v178 == v177)
  {
    v55 = 4;
    v54 = v177;
    goto LABEL_59;
  }
  if (v178)
  {
    v55 = 5;
LABEL_59:
    (*(void (**)(void))(*v54 + 8 * v55))();
  }
  v56 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
  if (*((_QWORD *)&v140 + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
  if (*((_QWORD *)&v141 + 1))
  {
    v60 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (SHIBYTE(v143) < 0)
    operator delete(v142[0]);
  v155 = 0;
  v62 = (_OWORD *)operator new();
  *v62 = 0u;
  v62[1] = 0u;
  *((_DWORD *)v62 + 8) = 1065353216;
  v155 = v62;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v139);
  MIL::IRParameter::Make(&v139, (uint64_t *)&v160);
  v63 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v62, "minimum_compute_type", (uint64_t *)&v160);
  v64 = v160;
  v160 = 0;
  if (v64)
    (*(void (**)(void *))(*(_QWORD *)v64 + 8))(v64);
  v65 = (std::__shared_weak_count *)v139.n128_u64[1];
  if (v139.n128_u64[1])
  {
    v66 = (unint64_t *)(v139.n128_u64[1] + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 32))(*((_QWORD *)v63 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 48))(*((_QWORD *)v63 + 5), 1);
  v68 = *a3;
  v69 = (std::__shared_weak_count_vtbl *)v155;
  v137 = v155;
  if (v155)
  {
    v70 = (std::__shared_weak_count *)operator new();
    v70->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v70->__shared_owners_ = 0;
    v70->__shared_weak_owners_ = 0;
    v70[1].__vftable = v69;
  }
  else
  {
    v70 = 0;
  }
  v138 = v70;
  v155 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v68 + 184))(v68, &v137);
  v71 = v138;
  if (v138)
  {
    p_shared_owners = (unint64_t *)&v138->__shared_owners_;
    do
      v73 = __ldaxr(p_shared_owners);
    while (__stlxr(v73 - 1, p_shared_owners));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v160, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v160, (uint64_t)v173);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v74 + 200))(v74, v173);
  v75 = v174;
  if (v174 == v173)
  {
    v76 = 4;
    v75 = v173;
  }
  else
  {
    if (!v174)
      goto LABEL_92;
    v76 = 5;
  }
  (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_92:
  if (SHIBYTE(v162) < 0)
    operator delete(v160);
  v77 = *a3;
  v171[0] = &off_1EA9A00F8;
  v171[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceSinh;
  v172 = v171;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v77 + 216))(v77, v171);
  v78 = v172;
  if (v172 == v171)
  {
    v79 = 4;
    v78 = v171;
  }
  else
  {
    if (!v172)
      goto LABEL_99;
    v79 = 5;
  }
  (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_99:
  MIL::Validation::TensorDTypeConstraints::Make(&v160);
  v80 = v160;
  std::string::basic_string[abi:ne180100]<0>(v133, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v133, 0, (uint64_t *)&Scalar);
  v135 = Scalar;
  if (Scalar)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v82 = Scalar;
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v82;
  }
  else
  {
    v81 = 0;
  }
  v136 = v81;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v131, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v80 + 24))(v80, &v135, v131);
  if (v132 < 0)
    operator delete(v131[0]);
  v83 = v136;
  if (v136)
  {
    v84 = (unint64_t *)&v136->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = Scalar;
  Scalar = 0;
  if (v86)
    (*((void (**)(std::__shared_weak_count_vtbl *))v86->~__shared_weak_count + 1))(v86);
  if (v134 < 0)
    operator delete(v133[0]);
  v87 = v160;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v129 = Scalar;
  if (Scalar)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = Scalar;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = v89;
  }
  else
  {
    v88 = 0;
  }
  v130 = v88;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v87 + 24))(v87, &v129, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v90 = v130;
  if (v130)
  {
    v91 = (unint64_t *)&v130->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = Scalar;
  Scalar = 0;
  if (v93)
    (*((void (**)(std::__shared_weak_count_vtbl *))v93->~__shared_weak_count + 1))(v93);
  v94 = *a3;
  v125 = v160;
  if (v160)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = (std::__shared_weak_count_vtbl *)v160;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = v96;
  }
  else
  {
    v95 = 0;
  }
  v126 = v95;
  v160 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v94 + 56))(v94, &v125);
  v97 = v126;
  if (v126)
  {
    v98 = (unint64_t *)&v126->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = v160;
  v160 = 0;
  if (v100)
    (*(void (**)(void *))(*(_QWORD *)v100 + 8))(v100);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v101 = __p;
  std::string::basic_string[abi:ne180100]<0>(v121, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v121, 1, (uint64_t *)&v144);
  v123 = v144;
  if (v144)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = (std::__shared_weak_count_vtbl *)v144;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v124 = v102;
  v144 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v160, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v163, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v164, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v165, "int32");
  std::string::basic_string[abi:ne180100]<0>(v166, "int8");
  std::string::basic_string[abi:ne180100]<0>(v167, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v160, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v101 + 24))(v101, &v123, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v167[i + 2]) < 0)
      operator delete((void *)v167[i]);
  }
  v105 = v124;
  if (v124)
  {
    v106 = (unint64_t *)&v124->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = v144;
  v144 = 0;
  if (v108)
    (*(void (**)(void *))(*(_QWORD *)v108 + 8))(v108);
  if (v122 < 0)
    operator delete(v121[0]);
  v109 = *a3;
  v119 = __p;
  if (__p)
  {
    v110 = (std::__shared_weak_count *)operator new();
    v111 = (std::__shared_weak_count_vtbl *)__p;
    v110->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v110->__shared_owners_ = 0;
    v110->__shared_weak_owners_ = 0;
    v110[1].__vftable = v111;
  }
  else
  {
    v110 = 0;
  }
  v120 = v110;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v109 + 56))(v109, &v119);
  v112 = v120;
  if (v120)
  {
    v113 = (unint64_t *)&v120->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = __p;
  __p = 0;
  if (v115)
    (*(void (**)(void *))(*(_QWORD *)v115 + 8))(v115);
  if (v155)
  {
    v116 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v155);
    MEMORY[0x1E0C023A0](v116, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, 0);
  result = v159;
  if (v159)
  {
    v118 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v159);
    return MEMORY[0x1E0C023A0](v118, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09B6268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void **a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  void *v62;
  uint64_t v63;

  v62 = a52;
  a52 = 0;
  if (v62)
    (*(void (**)(void *))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a55, 0);
  v63 = *v60;
  *v60 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a51, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::Sqrt::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  char *v42;
  char *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  char **v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _OWORD *v62;
  unsigned __int8 *v63;
  void *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  std::__shared_weak_count_vtbl *v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  void *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count_vtbl *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count_vtbl *v86;
  void *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count_vtbl *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count_vtbl *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count_vtbl *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  void *v100;
  void *v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  uint64_t i;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  std::__shared_weak_count_vtbl *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t result;
  uint64_t v118;
  void *v119;
  std::__shared_weak_count *v120;
  void *v121[2];
  char v122;
  void *v123;
  std::__shared_weak_count *v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  void *v131[2];
  char v132;
  void *v133[2];
  char v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  void *v137;
  std::__shared_weak_count *v138;
  __n128 v139;
  __int128 v140;
  __int128 v141;
  void *v142[2];
  uint64_t v143;
  void *v144;
  void *v145;
  _QWORD *v146;
  __n128 v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  char **v151;
  void *__p;
  void *v153;
  _QWORD *v154;
  void *v155;
  void *v156;
  _QWORD *v157;
  __n128 v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD v163[3];
  uint64_t v164[3];
  uint64_t v165[3];
  uint64_t v166[3];
  _QWORD v167[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v169;
  uint64_t v170;
  _QWORD v171[3];
  _QWORD *v172;
  _BYTE v173[24];
  _BYTE *v174;
  _BYTE v175[24];
  _BYTE *v176;
  _QWORD v177[3];
  _QWORD *v178;
  uint64_t v179;

  v179 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v159 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v169 = (uint64_t)&v8->~__shared_weak_count_0;
  v170 = (uint64_t)&v8->~__shared_weak_count_0;
  v160 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v155 = v10;
  *v10 = v9;
  v156 = v10 + 1;
  v157 = v10 + 1;
  v161 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v155);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v153 = v12 + 1;
  v154 = v12 + 1;
  v162 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v160, 3, &v158);
  MIL::IRParameter::Make(&v158, (uint64_t *)&v144);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v144);
  v13 = v144;
  v144 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v158.n128_u64[1];
  if (v158.n128_u64[1])
  {
    v15 = (unint64_t *)(v158.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  if (Scalar)
  {
    v169 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v151 = 0;
  v17 = operator new();
  *(_QWORD *)v17 = 0;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  v160 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, (void **)v17);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v160, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v151, 1uLL);
  v18 = v151;
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v155 = v20;
  *v20 = v19;
  v156 = v20 + 1;
  v157 = v20 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v155);
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  __p = v22;
  *v22 = v21;
  v153 = v22 + 1;
  v154 = v22 + 1;
  v169 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  v144 = v24;
  *v24 = v23;
  v145 = v24 + 1;
  v146 = v24 + 1;
  v170 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v144);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v147);
  MIL::IRParameter::Make(&v147, &v148);
  v25 = v148;
  v149 = v148;
  if (v148)
  {
    v26 = (_QWORD *)operator new();
    v27 = v148;
    *v26 = &unk_1EA99F888;
    v26[1] = 0;
    v26[2] = 0;
    v26[3] = v27;
  }
  else
  {
    v26 = 0;
  }
  v150 = v26;
  v148 = 0;
  v28 = v18[2];
  v29 = v18[1];
  if (v29 >= v28)
  {
    v31 = (v29 - *v18) >> 4;
    v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v33 = v28 - *v18;
    if (v33 >> 3 > v32)
      v32 = v33 >> 3;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
      v34 = 0xFFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    v163[1] = v18 + 2;
    v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v18 + 2), v34);
    v37 = (uint64_t *)&v35[16 * v31];
    *v37 = v25;
    v37[1] = (uint64_t)v26;
    v149 = 0;
    v150 = 0;
    v39 = *v18;
    v38 = v18[1];
    if (v38 == *v18)
    {
      v42 = v18[1];
      v40 = &v35[16 * v31];
    }
    else
    {
      v40 = &v35[16 * v31];
      do
      {
        v41 = *((_OWORD *)v38 - 1);
        v38 -= 16;
        *((_OWORD *)v40 - 1) = v41;
        v40 -= 16;
        *(_QWORD *)v38 = 0;
        *((_QWORD *)v38 + 1) = 0;
      }
      while (v38 != v39);
      v42 = *v18;
      v38 = v18[1];
    }
    v30 = (char *)(v37 + 2);
    *v18 = v40;
    v160 = v42;
    v161 = (uint64_t)v42;
    v18[1] = (char *)(v37 + 2);
    v162 = (uint64_t)v38;
    v43 = v18[2];
    v18[2] = &v35[16 * v36];
    v163[0] = v43;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v160);
  }
  else
  {
    *(_QWORD *)v29 = v25;
    *((_QWORD *)v29 + 1) = v26;
    v30 = v29 + 16;
    v149 = 0;
    v150 = 0;
  }
  v18[1] = v30;
  v44 = v148;
  v148 = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = (std::__shared_weak_count *)v147.n128_u64[1];
  if (v147.n128_u64[1])
  {
    v46 = (unint64_t *)(v147.n128_u64[1] + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  *(_OWORD *)v142 = *(_OWORD *)a2;
  v143 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v48 = v159;
  *(_QWORD *)&v141 = v159;
  if (v159)
  {
    v49 = (_QWORD *)operator new();
    *v49 = &unk_1EA99F8E8;
    v49[1] = 0;
    v49[2] = 0;
    v49[3] = v48;
  }
  else
  {
    v49 = 0;
  }
  *((_QWORD *)&v141 + 1) = v49;
  v159 = 0;
  *(_QWORD *)&v140 = v151;
  if (v151)
  {
    v50 = (_QWORD *)operator new();
    v51 = v151;
    *v50 = &unk_1EA99F948;
    v50[1] = 0;
    v50[2] = 0;
    v50[3] = v51;
  }
  else
  {
    v50 = 0;
  }
  *((_QWORD *)&v140 + 1) = v50;
  v151 = 0;
  v177[0] = &unk_1EA99FAC8;
  v177[1] = MIL::Validation::ValidateViaTypeInference;
  v178 = v177;
  v176 = 0;
  MIL::IROperator::Make((__int128 *)v142, &v141, &v140, (uint64_t)v177, (uint64_t)v175, a3);
  v52 = v176;
  if (v176 == v175)
  {
    v53 = 4;
    v52 = v175;
  }
  else
  {
    if (!v176)
      goto LABEL_55;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_55:
  v54 = v178;
  if (v178 == v177)
  {
    v55 = 4;
    v54 = v177;
    goto LABEL_59;
  }
  if (v178)
  {
    v55 = 5;
LABEL_59:
    (*(void (**)(void))(*v54 + 8 * v55))();
  }
  v56 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
  if (*((_QWORD *)&v140 + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
  if (*((_QWORD *)&v141 + 1))
  {
    v60 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (SHIBYTE(v143) < 0)
    operator delete(v142[0]);
  v155 = 0;
  v62 = (_OWORD *)operator new();
  *v62 = 0u;
  v62[1] = 0u;
  *((_DWORD *)v62 + 8) = 1065353216;
  v155 = v62;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v139);
  MIL::IRParameter::Make(&v139, (uint64_t *)&v160);
  v63 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v62, "minimum_compute_type", (uint64_t *)&v160);
  v64 = v160;
  v160 = 0;
  if (v64)
    (*(void (**)(void *))(*(_QWORD *)v64 + 8))(v64);
  v65 = (std::__shared_weak_count *)v139.n128_u64[1];
  if (v139.n128_u64[1])
  {
    v66 = (unint64_t *)(v139.n128_u64[1] + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 32))(*((_QWORD *)v63 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 48))(*((_QWORD *)v63 + 5), 1);
  v68 = *a3;
  v69 = (std::__shared_weak_count_vtbl *)v155;
  v137 = v155;
  if (v155)
  {
    v70 = (std::__shared_weak_count *)operator new();
    v70->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v70->__shared_owners_ = 0;
    v70->__shared_weak_owners_ = 0;
    v70[1].__vftable = v69;
  }
  else
  {
    v70 = 0;
  }
  v138 = v70;
  v155 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v68 + 184))(v68, &v137);
  v71 = v138;
  if (v138)
  {
    p_shared_owners = (unint64_t *)&v138->__shared_owners_;
    do
      v73 = __ldaxr(p_shared_owners);
    while (__stlxr(v73 - 1, p_shared_owners));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v160, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v160, (uint64_t)v173);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v74 + 200))(v74, v173);
  v75 = v174;
  if (v174 == v173)
  {
    v76 = 4;
    v75 = v173;
  }
  else
  {
    if (!v174)
      goto LABEL_92;
    v76 = 5;
  }
  (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_92:
  if (SHIBYTE(v162) < 0)
    operator delete(v160);
  v77 = *a3;
  v171[0] = &off_1EA9A00F8;
  v171[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceSqrt;
  v172 = v171;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v77 + 216))(v77, v171);
  v78 = v172;
  if (v172 == v171)
  {
    v79 = 4;
    v78 = v171;
  }
  else
  {
    if (!v172)
      goto LABEL_99;
    v79 = 5;
  }
  (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_99:
  MIL::Validation::TensorDTypeConstraints::Make(&v160);
  v80 = v160;
  std::string::basic_string[abi:ne180100]<0>(v133, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v133, 0, (uint64_t *)&Scalar);
  v135 = Scalar;
  if (Scalar)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v82 = Scalar;
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v82;
  }
  else
  {
    v81 = 0;
  }
  v136 = v81;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v131, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v80 + 24))(v80, &v135, v131);
  if (v132 < 0)
    operator delete(v131[0]);
  v83 = v136;
  if (v136)
  {
    v84 = (unint64_t *)&v136->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = Scalar;
  Scalar = 0;
  if (v86)
    (*((void (**)(std::__shared_weak_count_vtbl *))v86->~__shared_weak_count + 1))(v86);
  if (v134 < 0)
    operator delete(v133[0]);
  v87 = v160;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v129 = Scalar;
  if (Scalar)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = Scalar;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = v89;
  }
  else
  {
    v88 = 0;
  }
  v130 = v88;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v87 + 24))(v87, &v129, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v90 = v130;
  if (v130)
  {
    v91 = (unint64_t *)&v130->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = Scalar;
  Scalar = 0;
  if (v93)
    (*((void (**)(std::__shared_weak_count_vtbl *))v93->~__shared_weak_count + 1))(v93);
  v94 = *a3;
  v125 = v160;
  if (v160)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = (std::__shared_weak_count_vtbl *)v160;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = v96;
  }
  else
  {
    v95 = 0;
  }
  v126 = v95;
  v160 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v94 + 56))(v94, &v125);
  v97 = v126;
  if (v126)
  {
    v98 = (unint64_t *)&v126->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = v160;
  v160 = 0;
  if (v100)
    (*(void (**)(void *))(*(_QWORD *)v100 + 8))(v100);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v101 = __p;
  std::string::basic_string[abi:ne180100]<0>(v121, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v121, 1, (uint64_t *)&v144);
  v123 = v144;
  if (v144)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = (std::__shared_weak_count_vtbl *)v144;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v124 = v102;
  v144 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v160, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v163, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v164, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v165, "int32");
  std::string::basic_string[abi:ne180100]<0>(v166, "int8");
  std::string::basic_string[abi:ne180100]<0>(v167, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v160, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v101 + 24))(v101, &v123, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v167[i + 2]) < 0)
      operator delete((void *)v167[i]);
  }
  v105 = v124;
  if (v124)
  {
    v106 = (unint64_t *)&v124->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = v144;
  v144 = 0;
  if (v108)
    (*(void (**)(void *))(*(_QWORD *)v108 + 8))(v108);
  if (v122 < 0)
    operator delete(v121[0]);
  v109 = *a3;
  v119 = __p;
  if (__p)
  {
    v110 = (std::__shared_weak_count *)operator new();
    v111 = (std::__shared_weak_count_vtbl *)__p;
    v110->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v110->__shared_owners_ = 0;
    v110->__shared_weak_owners_ = 0;
    v110[1].__vftable = v111;
  }
  else
  {
    v110 = 0;
  }
  v120 = v110;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v109 + 56))(v109, &v119);
  v112 = v120;
  if (v120)
  {
    v113 = (unint64_t *)&v120->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = __p;
  __p = 0;
  if (v115)
    (*(void (**)(void *))(*(_QWORD *)v115 + 8))(v115);
  if (v155)
  {
    v116 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v155);
    MEMORY[0x1E0C023A0](v116, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, 0);
  result = v159;
  if (v159)
  {
    v118 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v159);
    return MEMORY[0x1E0C023A0](v118, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09B7530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void **a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  void *v62;
  uint64_t v63;

  v62 = a52;
  a52 = 0;
  if (v62)
    (*(void (**)(void *))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a55, 0);
  v63 = *v60;
  *v60 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a51, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::Tan::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  char *v42;
  char *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  char **v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _OWORD *v62;
  unsigned __int8 *v63;
  void *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  std::__shared_weak_count_vtbl *v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  void *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count_vtbl *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count_vtbl *v86;
  void *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count_vtbl *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count_vtbl *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count_vtbl *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  void *v100;
  void *v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  uint64_t i;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  std::__shared_weak_count_vtbl *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t result;
  uint64_t v118;
  void *v119;
  std::__shared_weak_count *v120;
  void *v121[2];
  char v122;
  void *v123;
  std::__shared_weak_count *v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  void *v131[2];
  char v132;
  void *v133[2];
  char v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  void *v137;
  std::__shared_weak_count *v138;
  __n128 v139;
  __int128 v140;
  __int128 v141;
  void *v142[2];
  uint64_t v143;
  void *v144;
  void *v145;
  _QWORD *v146;
  __n128 v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  char **v151;
  void *__p;
  void *v153;
  _QWORD *v154;
  void *v155;
  void *v156;
  _QWORD *v157;
  __n128 v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD v163[3];
  uint64_t v164[3];
  uint64_t v165[3];
  uint64_t v166[3];
  _QWORD v167[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v169;
  uint64_t v170;
  _QWORD v171[3];
  _QWORD *v172;
  _BYTE v173[24];
  _BYTE *v174;
  _BYTE v175[24];
  _BYTE *v176;
  _QWORD v177[3];
  _QWORD *v178;
  uint64_t v179;

  v179 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v159 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v169 = (uint64_t)&v8->~__shared_weak_count_0;
  v170 = (uint64_t)&v8->~__shared_weak_count_0;
  v160 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v155 = v10;
  *v10 = v9;
  v156 = v10 + 1;
  v157 = v10 + 1;
  v161 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v155);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v153 = v12 + 1;
  v154 = v12 + 1;
  v162 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v160, 3, &v158);
  MIL::IRParameter::Make(&v158, (uint64_t *)&v144);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v144);
  v13 = v144;
  v144 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v158.n128_u64[1];
  if (v158.n128_u64[1])
  {
    v15 = (unint64_t *)(v158.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  if (Scalar)
  {
    v169 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v151 = 0;
  v17 = operator new();
  *(_QWORD *)v17 = 0;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  v160 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, (void **)v17);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v160, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v151, 1uLL);
  v18 = v151;
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v155 = v20;
  *v20 = v19;
  v156 = v20 + 1;
  v157 = v20 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v155);
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  __p = v22;
  *v22 = v21;
  v153 = v22 + 1;
  v154 = v22 + 1;
  v169 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  v144 = v24;
  *v24 = v23;
  v145 = v24 + 1;
  v146 = v24 + 1;
  v170 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v144);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v147);
  MIL::IRParameter::Make(&v147, &v148);
  v25 = v148;
  v149 = v148;
  if (v148)
  {
    v26 = (_QWORD *)operator new();
    v27 = v148;
    *v26 = &unk_1EA99F888;
    v26[1] = 0;
    v26[2] = 0;
    v26[3] = v27;
  }
  else
  {
    v26 = 0;
  }
  v150 = v26;
  v148 = 0;
  v28 = v18[2];
  v29 = v18[1];
  if (v29 >= v28)
  {
    v31 = (v29 - *v18) >> 4;
    v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v33 = v28 - *v18;
    if (v33 >> 3 > v32)
      v32 = v33 >> 3;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
      v34 = 0xFFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    v163[1] = v18 + 2;
    v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v18 + 2), v34);
    v37 = (uint64_t *)&v35[16 * v31];
    *v37 = v25;
    v37[1] = (uint64_t)v26;
    v149 = 0;
    v150 = 0;
    v39 = *v18;
    v38 = v18[1];
    if (v38 == *v18)
    {
      v42 = v18[1];
      v40 = &v35[16 * v31];
    }
    else
    {
      v40 = &v35[16 * v31];
      do
      {
        v41 = *((_OWORD *)v38 - 1);
        v38 -= 16;
        *((_OWORD *)v40 - 1) = v41;
        v40 -= 16;
        *(_QWORD *)v38 = 0;
        *((_QWORD *)v38 + 1) = 0;
      }
      while (v38 != v39);
      v42 = *v18;
      v38 = v18[1];
    }
    v30 = (char *)(v37 + 2);
    *v18 = v40;
    v160 = v42;
    v161 = (uint64_t)v42;
    v18[1] = (char *)(v37 + 2);
    v162 = (uint64_t)v38;
    v43 = v18[2];
    v18[2] = &v35[16 * v36];
    v163[0] = v43;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v160);
  }
  else
  {
    *(_QWORD *)v29 = v25;
    *((_QWORD *)v29 + 1) = v26;
    v30 = v29 + 16;
    v149 = 0;
    v150 = 0;
  }
  v18[1] = v30;
  v44 = v148;
  v148 = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = (std::__shared_weak_count *)v147.n128_u64[1];
  if (v147.n128_u64[1])
  {
    v46 = (unint64_t *)(v147.n128_u64[1] + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  *(_OWORD *)v142 = *(_OWORD *)a2;
  v143 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v48 = v159;
  *(_QWORD *)&v141 = v159;
  if (v159)
  {
    v49 = (_QWORD *)operator new();
    *v49 = &unk_1EA99F8E8;
    v49[1] = 0;
    v49[2] = 0;
    v49[3] = v48;
  }
  else
  {
    v49 = 0;
  }
  *((_QWORD *)&v141 + 1) = v49;
  v159 = 0;
  *(_QWORD *)&v140 = v151;
  if (v151)
  {
    v50 = (_QWORD *)operator new();
    v51 = v151;
    *v50 = &unk_1EA99F948;
    v50[1] = 0;
    v50[2] = 0;
    v50[3] = v51;
  }
  else
  {
    v50 = 0;
  }
  *((_QWORD *)&v140 + 1) = v50;
  v151 = 0;
  v177[0] = &unk_1EA99FAC8;
  v177[1] = MIL::Validation::ValidateViaTypeInference;
  v178 = v177;
  v176 = 0;
  MIL::IROperator::Make((__int128 *)v142, &v141, &v140, (uint64_t)v177, (uint64_t)v175, a3);
  v52 = v176;
  if (v176 == v175)
  {
    v53 = 4;
    v52 = v175;
  }
  else
  {
    if (!v176)
      goto LABEL_55;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_55:
  v54 = v178;
  if (v178 == v177)
  {
    v55 = 4;
    v54 = v177;
    goto LABEL_59;
  }
  if (v178)
  {
    v55 = 5;
LABEL_59:
    (*(void (**)(void))(*v54 + 8 * v55))();
  }
  v56 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
  if (*((_QWORD *)&v140 + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
  if (*((_QWORD *)&v141 + 1))
  {
    v60 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (SHIBYTE(v143) < 0)
    operator delete(v142[0]);
  v155 = 0;
  v62 = (_OWORD *)operator new();
  *v62 = 0u;
  v62[1] = 0u;
  *((_DWORD *)v62 + 8) = 1065353216;
  v155 = v62;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v139);
  MIL::IRParameter::Make(&v139, (uint64_t *)&v160);
  v63 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v62, "minimum_compute_type", (uint64_t *)&v160);
  v64 = v160;
  v160 = 0;
  if (v64)
    (*(void (**)(void *))(*(_QWORD *)v64 + 8))(v64);
  v65 = (std::__shared_weak_count *)v139.n128_u64[1];
  if (v139.n128_u64[1])
  {
    v66 = (unint64_t *)(v139.n128_u64[1] + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 32))(*((_QWORD *)v63 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 48))(*((_QWORD *)v63 + 5), 1);
  v68 = *a3;
  v69 = (std::__shared_weak_count_vtbl *)v155;
  v137 = v155;
  if (v155)
  {
    v70 = (std::__shared_weak_count *)operator new();
    v70->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v70->__shared_owners_ = 0;
    v70->__shared_weak_owners_ = 0;
    v70[1].__vftable = v69;
  }
  else
  {
    v70 = 0;
  }
  v138 = v70;
  v155 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v68 + 184))(v68, &v137);
  v71 = v138;
  if (v138)
  {
    p_shared_owners = (unint64_t *)&v138->__shared_owners_;
    do
      v73 = __ldaxr(p_shared_owners);
    while (__stlxr(v73 - 1, p_shared_owners));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v160, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v160, (uint64_t)v173);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v74 + 200))(v74, v173);
  v75 = v174;
  if (v174 == v173)
  {
    v76 = 4;
    v75 = v173;
  }
  else
  {
    if (!v174)
      goto LABEL_92;
    v76 = 5;
  }
  (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_92:
  if (SHIBYTE(v162) < 0)
    operator delete(v160);
  v77 = *a3;
  v171[0] = &off_1EA9A00F8;
  v171[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceTan;
  v172 = v171;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v77 + 216))(v77, v171);
  v78 = v172;
  if (v172 == v171)
  {
    v79 = 4;
    v78 = v171;
  }
  else
  {
    if (!v172)
      goto LABEL_99;
    v79 = 5;
  }
  (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_99:
  MIL::Validation::TensorDTypeConstraints::Make(&v160);
  v80 = v160;
  std::string::basic_string[abi:ne180100]<0>(v133, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v133, 0, (uint64_t *)&Scalar);
  v135 = Scalar;
  if (Scalar)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v82 = Scalar;
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v82;
  }
  else
  {
    v81 = 0;
  }
  v136 = v81;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v131, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v80 + 24))(v80, &v135, v131);
  if (v132 < 0)
    operator delete(v131[0]);
  v83 = v136;
  if (v136)
  {
    v84 = (unint64_t *)&v136->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = Scalar;
  Scalar = 0;
  if (v86)
    (*((void (**)(std::__shared_weak_count_vtbl *))v86->~__shared_weak_count + 1))(v86);
  if (v134 < 0)
    operator delete(v133[0]);
  v87 = v160;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v129 = Scalar;
  if (Scalar)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = Scalar;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = v89;
  }
  else
  {
    v88 = 0;
  }
  v130 = v88;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v87 + 24))(v87, &v129, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v90 = v130;
  if (v130)
  {
    v91 = (unint64_t *)&v130->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = Scalar;
  Scalar = 0;
  if (v93)
    (*((void (**)(std::__shared_weak_count_vtbl *))v93->~__shared_weak_count + 1))(v93);
  v94 = *a3;
  v125 = v160;
  if (v160)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = (std::__shared_weak_count_vtbl *)v160;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = v96;
  }
  else
  {
    v95 = 0;
  }
  v126 = v95;
  v160 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v94 + 56))(v94, &v125);
  v97 = v126;
  if (v126)
  {
    v98 = (unint64_t *)&v126->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = v160;
  v160 = 0;
  if (v100)
    (*(void (**)(void *))(*(_QWORD *)v100 + 8))(v100);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v101 = __p;
  std::string::basic_string[abi:ne180100]<0>(v121, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v121, 1, (uint64_t *)&v144);
  v123 = v144;
  if (v144)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = (std::__shared_weak_count_vtbl *)v144;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v124 = v102;
  v144 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v160, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v163, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v164, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v165, "int32");
  std::string::basic_string[abi:ne180100]<0>(v166, "int8");
  std::string::basic_string[abi:ne180100]<0>(v167, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v160, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v101 + 24))(v101, &v123, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v167[i + 2]) < 0)
      operator delete((void *)v167[i]);
  }
  v105 = v124;
  if (v124)
  {
    v106 = (unint64_t *)&v124->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = v144;
  v144 = 0;
  if (v108)
    (*(void (**)(void *))(*(_QWORD *)v108 + 8))(v108);
  if (v122 < 0)
    operator delete(v121[0]);
  v109 = *a3;
  v119 = __p;
  if (__p)
  {
    v110 = (std::__shared_weak_count *)operator new();
    v111 = (std::__shared_weak_count_vtbl *)__p;
    v110->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v110->__shared_owners_ = 0;
    v110->__shared_weak_owners_ = 0;
    v110[1].__vftable = v111;
  }
  else
  {
    v110 = 0;
  }
  v120 = v110;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v109 + 56))(v109, &v119);
  v112 = v120;
  if (v120)
  {
    v113 = (unint64_t *)&v120->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = __p;
  __p = 0;
  if (v115)
    (*(void (**)(void *))(*(_QWORD *)v115 + 8))(v115);
  if (v155)
  {
    v116 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v155);
    MEMORY[0x1E0C023A0](v116, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, 0);
  result = v159;
  if (v159)
  {
    v118 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v159);
    return MEMORY[0x1E0C023A0](v118, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09B87F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void **a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  void *v62;
  uint64_t v63;

  v62 = a52;
  a52 = 0;
  if (v62)
    (*(void (**)(void *))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a55, 0);
  v63 = *v60;
  *v60 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a51, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::Tanh::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  char *v42;
  char *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  char **v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _OWORD *v62;
  unsigned __int8 *v63;
  void *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  std::__shared_weak_count_vtbl *v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  void *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count_vtbl *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count_vtbl *v86;
  void *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count_vtbl *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count_vtbl *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count_vtbl *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  void *v100;
  void *v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  uint64_t i;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  std::__shared_weak_count_vtbl *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t result;
  uint64_t v118;
  void *v119;
  std::__shared_weak_count *v120;
  void *v121[2];
  char v122;
  void *v123;
  std::__shared_weak_count *v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  void *v131[2];
  char v132;
  void *v133[2];
  char v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  void *v137;
  std::__shared_weak_count *v138;
  __n128 v139;
  __int128 v140;
  __int128 v141;
  void *v142[2];
  uint64_t v143;
  void *v144;
  void *v145;
  _QWORD *v146;
  __n128 v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  char **v151;
  void *__p;
  void *v153;
  _QWORD *v154;
  void *v155;
  void *v156;
  _QWORD *v157;
  __n128 v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD v163[3];
  uint64_t v164[3];
  uint64_t v165[3];
  uint64_t v166[3];
  _QWORD v167[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v169;
  uint64_t v170;
  _QWORD v171[3];
  _QWORD *v172;
  _BYTE v173[24];
  _BYTE *v174;
  _BYTE v175[24];
  _BYTE *v176;
  _QWORD v177[3];
  _QWORD *v178;
  uint64_t v179;

  v179 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v159 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v169 = (uint64_t)&v8->~__shared_weak_count_0;
  v170 = (uint64_t)&v8->~__shared_weak_count_0;
  v160 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v155 = v10;
  *v10 = v9;
  v156 = v10 + 1;
  v157 = v10 + 1;
  v161 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v155);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v153 = v12 + 1;
  v154 = v12 + 1;
  v162 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v160, 3, &v158);
  MIL::IRParameter::Make(&v158, (uint64_t *)&v144);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v144);
  v13 = v144;
  v144 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v158.n128_u64[1];
  if (v158.n128_u64[1])
  {
    v15 = (unint64_t *)(v158.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  if (Scalar)
  {
    v169 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v151 = 0;
  v17 = operator new();
  *(_QWORD *)v17 = 0;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  v160 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, (void **)v17);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v160, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v151, 1uLL);
  v18 = v151;
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v155 = v20;
  *v20 = v19;
  v156 = v20 + 1;
  v157 = v20 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v155);
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  __p = v22;
  *v22 = v21;
  v153 = v22 + 1;
  v154 = v22 + 1;
  v169 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  v144 = v24;
  *v24 = v23;
  v145 = v24 + 1;
  v146 = v24 + 1;
  v170 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v144);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v147);
  MIL::IRParameter::Make(&v147, &v148);
  v25 = v148;
  v149 = v148;
  if (v148)
  {
    v26 = (_QWORD *)operator new();
    v27 = v148;
    *v26 = &unk_1EA99F888;
    v26[1] = 0;
    v26[2] = 0;
    v26[3] = v27;
  }
  else
  {
    v26 = 0;
  }
  v150 = v26;
  v148 = 0;
  v28 = v18[2];
  v29 = v18[1];
  if (v29 >= v28)
  {
    v31 = (v29 - *v18) >> 4;
    v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v33 = v28 - *v18;
    if (v33 >> 3 > v32)
      v32 = v33 >> 3;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
      v34 = 0xFFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    v163[1] = v18 + 2;
    v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v18 + 2), v34);
    v37 = (uint64_t *)&v35[16 * v31];
    *v37 = v25;
    v37[1] = (uint64_t)v26;
    v149 = 0;
    v150 = 0;
    v39 = *v18;
    v38 = v18[1];
    if (v38 == *v18)
    {
      v42 = v18[1];
      v40 = &v35[16 * v31];
    }
    else
    {
      v40 = &v35[16 * v31];
      do
      {
        v41 = *((_OWORD *)v38 - 1);
        v38 -= 16;
        *((_OWORD *)v40 - 1) = v41;
        v40 -= 16;
        *(_QWORD *)v38 = 0;
        *((_QWORD *)v38 + 1) = 0;
      }
      while (v38 != v39);
      v42 = *v18;
      v38 = v18[1];
    }
    v30 = (char *)(v37 + 2);
    *v18 = v40;
    v160 = v42;
    v161 = (uint64_t)v42;
    v18[1] = (char *)(v37 + 2);
    v162 = (uint64_t)v38;
    v43 = v18[2];
    v18[2] = &v35[16 * v36];
    v163[0] = v43;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v160);
  }
  else
  {
    *(_QWORD *)v29 = v25;
    *((_QWORD *)v29 + 1) = v26;
    v30 = v29 + 16;
    v149 = 0;
    v150 = 0;
  }
  v18[1] = v30;
  v44 = v148;
  v148 = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = (std::__shared_weak_count *)v147.n128_u64[1];
  if (v147.n128_u64[1])
  {
    v46 = (unint64_t *)(v147.n128_u64[1] + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  *(_OWORD *)v142 = *(_OWORD *)a2;
  v143 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v48 = v159;
  *(_QWORD *)&v141 = v159;
  if (v159)
  {
    v49 = (_QWORD *)operator new();
    *v49 = &unk_1EA99F8E8;
    v49[1] = 0;
    v49[2] = 0;
    v49[3] = v48;
  }
  else
  {
    v49 = 0;
  }
  *((_QWORD *)&v141 + 1) = v49;
  v159 = 0;
  *(_QWORD *)&v140 = v151;
  if (v151)
  {
    v50 = (_QWORD *)operator new();
    v51 = v151;
    *v50 = &unk_1EA99F948;
    v50[1] = 0;
    v50[2] = 0;
    v50[3] = v51;
  }
  else
  {
    v50 = 0;
  }
  *((_QWORD *)&v140 + 1) = v50;
  v151 = 0;
  v177[0] = &unk_1EA99FAC8;
  v177[1] = MIL::Validation::ValidateViaTypeInference;
  v178 = v177;
  v176 = 0;
  MIL::IROperator::Make((__int128 *)v142, &v141, &v140, (uint64_t)v177, (uint64_t)v175, a3);
  v52 = v176;
  if (v176 == v175)
  {
    v53 = 4;
    v52 = v175;
  }
  else
  {
    if (!v176)
      goto LABEL_55;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_55:
  v54 = v178;
  if (v178 == v177)
  {
    v55 = 4;
    v54 = v177;
    goto LABEL_59;
  }
  if (v178)
  {
    v55 = 5;
LABEL_59:
    (*(void (**)(void))(*v54 + 8 * v55))();
  }
  v56 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
  if (*((_QWORD *)&v140 + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
  if (*((_QWORD *)&v141 + 1))
  {
    v60 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (SHIBYTE(v143) < 0)
    operator delete(v142[0]);
  v155 = 0;
  v62 = (_OWORD *)operator new();
  *v62 = 0u;
  v62[1] = 0u;
  *((_DWORD *)v62 + 8) = 1065353216;
  v155 = v62;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v139);
  MIL::IRParameter::Make(&v139, (uint64_t *)&v160);
  v63 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v62, "minimum_compute_type", (uint64_t *)&v160);
  v64 = v160;
  v160 = 0;
  if (v64)
    (*(void (**)(void *))(*(_QWORD *)v64 + 8))(v64);
  v65 = (std::__shared_weak_count *)v139.n128_u64[1];
  if (v139.n128_u64[1])
  {
    v66 = (unint64_t *)(v139.n128_u64[1] + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 32))(*((_QWORD *)v63 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 48))(*((_QWORD *)v63 + 5), 1);
  v68 = *a3;
  v69 = (std::__shared_weak_count_vtbl *)v155;
  v137 = v155;
  if (v155)
  {
    v70 = (std::__shared_weak_count *)operator new();
    v70->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v70->__shared_owners_ = 0;
    v70->__shared_weak_owners_ = 0;
    v70[1].__vftable = v69;
  }
  else
  {
    v70 = 0;
  }
  v138 = v70;
  v155 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v68 + 184))(v68, &v137);
  v71 = v138;
  if (v138)
  {
    p_shared_owners = (unint64_t *)&v138->__shared_owners_;
    do
      v73 = __ldaxr(p_shared_owners);
    while (__stlxr(v73 - 1, p_shared_owners));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v160, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v160, (uint64_t)v173);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v74 + 200))(v74, v173);
  v75 = v174;
  if (v174 == v173)
  {
    v76 = 4;
    v75 = v173;
  }
  else
  {
    if (!v174)
      goto LABEL_92;
    v76 = 5;
  }
  (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_92:
  if (SHIBYTE(v162) < 0)
    operator delete(v160);
  v77 = *a3;
  v171[0] = &off_1EA9A00F8;
  v171[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceTanh;
  v172 = v171;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v77 + 216))(v77, v171);
  v78 = v172;
  if (v172 == v171)
  {
    v79 = 4;
    v78 = v171;
  }
  else
  {
    if (!v172)
      goto LABEL_99;
    v79 = 5;
  }
  (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_99:
  MIL::Validation::TensorDTypeConstraints::Make(&v160);
  v80 = v160;
  std::string::basic_string[abi:ne180100]<0>(v133, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v133, 0, (uint64_t *)&Scalar);
  v135 = Scalar;
  if (Scalar)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v82 = Scalar;
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v82;
  }
  else
  {
    v81 = 0;
  }
  v136 = v81;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v131, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v80 + 24))(v80, &v135, v131);
  if (v132 < 0)
    operator delete(v131[0]);
  v83 = v136;
  if (v136)
  {
    v84 = (unint64_t *)&v136->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = Scalar;
  Scalar = 0;
  if (v86)
    (*((void (**)(std::__shared_weak_count_vtbl *))v86->~__shared_weak_count + 1))(v86);
  if (v134 < 0)
    operator delete(v133[0]);
  v87 = v160;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v129 = Scalar;
  if (Scalar)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = Scalar;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = v89;
  }
  else
  {
    v88 = 0;
  }
  v130 = v88;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v87 + 24))(v87, &v129, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v90 = v130;
  if (v130)
  {
    v91 = (unint64_t *)&v130->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = Scalar;
  Scalar = 0;
  if (v93)
    (*((void (**)(std::__shared_weak_count_vtbl *))v93->~__shared_weak_count + 1))(v93);
  v94 = *a3;
  v125 = v160;
  if (v160)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = (std::__shared_weak_count_vtbl *)v160;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = v96;
  }
  else
  {
    v95 = 0;
  }
  v126 = v95;
  v160 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v94 + 56))(v94, &v125);
  v97 = v126;
  if (v126)
  {
    v98 = (unint64_t *)&v126->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = v160;
  v160 = 0;
  if (v100)
    (*(void (**)(void *))(*(_QWORD *)v100 + 8))(v100);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v101 = __p;
  std::string::basic_string[abi:ne180100]<0>(v121, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v121, 1, (uint64_t *)&v144);
  v123 = v144;
  if (v144)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = (std::__shared_weak_count_vtbl *)v144;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v124 = v102;
  v144 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v160, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v163, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v164, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v165, "int32");
  std::string::basic_string[abi:ne180100]<0>(v166, "int8");
  std::string::basic_string[abi:ne180100]<0>(v167, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v160, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v101 + 24))(v101, &v123, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v167[i + 2]) < 0)
      operator delete((void *)v167[i]);
  }
  v105 = v124;
  if (v124)
  {
    v106 = (unint64_t *)&v124->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = v144;
  v144 = 0;
  if (v108)
    (*(void (**)(void *))(*(_QWORD *)v108 + 8))(v108);
  if (v122 < 0)
    operator delete(v121[0]);
  v109 = *a3;
  v119 = __p;
  if (__p)
  {
    v110 = (std::__shared_weak_count *)operator new();
    v111 = (std::__shared_weak_count_vtbl *)__p;
    v110->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v110->__shared_owners_ = 0;
    v110->__shared_weak_owners_ = 0;
    v110[1].__vftable = v111;
  }
  else
  {
    v110 = 0;
  }
  v120 = v110;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v109 + 56))(v109, &v119);
  v112 = v120;
  if (v120)
  {
    v113 = (unint64_t *)&v120->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = __p;
  __p = 0;
  if (v115)
    (*(void (**)(void *))(*(_QWORD *)v115 + 8))(v115);
  if (v155)
  {
    v116 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v155);
    MEMORY[0x1E0C023A0](v116, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, 0);
  result = v159;
  if (v159)
  {
    v118 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v159);
    return MEMORY[0x1E0C023A0](v118, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09B9AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void **a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  void *v62;
  uint64_t v63;

  v62 = a52;
  a52 = 0;
  if (v62)
    (*(void (**)(void *))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a55, 0);
  v63 = *v60;
  *v60 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a51, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::LogicalNot::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t *v29;
  char *v30;
  char *v31;
  char *v32;
  __int128 v33;
  char *v34;
  char *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  char **v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  unsigned __int8 *v55;
  void *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  std::__shared_weak_count *v63;
  unint64_t *p_shared_owners;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  uint64_t i;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t result;
  uint64_t v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  void *v92[2];
  char v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  __n128 v98;
  __int128 v99;
  __int128 v100;
  void *v101[2];
  uint64_t v102;
  __n128 v103;
  uint64_t v104;
  char **v105;
  __n128 v106;
  uint64_t v107;
  void *__p;
  void *v109;
  char *v110;
  _QWORD v111[3];
  uint64_t v112[3];
  uint64_t v113[3];
  uint64_t v114[3];
  void *v115[3];
  void *Scalar;
  void *v117;
  _QWORD *v118;
  _QWORD v119[3];
  _QWORD *v120;
  _BYTE v121[24];
  _BYTE *v122;
  _BYTE v123[24];
  _BYTE *v124;
  _BYTE v125[24];
  _BYTE *v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;

  v130 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v107 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  __p = v8;
  *v8 = v7;
  v109 = v8 + 1;
  v110 = (char *)(v8 + 1);
  v128 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v128, 1, &v106);
  MIL::IRParameter::Make(&v106, (uint64_t *)&Scalar);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&Scalar);
  v9 = Scalar;
  Scalar = 0;
  if (v9)
    (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
  v10 = (std::__shared_weak_count *)v106.n128_u64[1];
  if (v106.n128_u64[1])
  {
    v11 = (unint64_t *)(v106.n128_u64[1] + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v109 = __p;
    operator delete(__p);
  }
  v105 = 0;
  v13 = operator new();
  *(_QWORD *)v13 = 0;
  *(_QWORD *)(v13 + 8) = 0;
  *(_QWORD *)(v13 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v105, (void **)v13);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v105, 1uLL);
  v14 = v105;
  v15 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v16 = operator new(8uLL);
  Scalar = v16;
  *v16 = v15;
  v117 = v16 + 1;
  v118 = v16 + 1;
  v127 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v127, 1, &v103);
  MIL::IRParameter::Make(&v103, &v104);
  v17 = v104;
  v128 = v104;
  if (v104)
  {
    v18 = (_QWORD *)operator new();
    v19 = v104;
    *v18 = &unk_1EA99F888;
    v18[1] = 0;
    v18[2] = 0;
    v18[3] = v19;
  }
  else
  {
    v18 = 0;
  }
  v129 = v18;
  v104 = 0;
  v20 = v14[2];
  v21 = v14[1];
  if (v21 >= v20)
  {
    v23 = (v21 - *v14) >> 4;
    v24 = v23 + 1;
    if ((unint64_t)(v23 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v25 = v20 - *v14;
    if (v25 >> 3 > v24)
      v24 = v25 >> 3;
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0)
      v26 = 0xFFFFFFFFFFFFFFFLL;
    else
      v26 = v24;
    v111[1] = v14 + 2;
    v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v14 + 2), v26);
    v29 = (uint64_t *)&v27[16 * v23];
    *v29 = v17;
    v29[1] = (uint64_t)v18;
    v128 = 0;
    v129 = 0;
    v31 = *v14;
    v30 = v14[1];
    if (v30 == *v14)
    {
      v34 = v14[1];
      v32 = &v27[16 * v23];
    }
    else
    {
      v32 = &v27[16 * v23];
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v30 -= 16;
        *((_OWORD *)v32 - 1) = v33;
        v32 -= 16;
        *(_QWORD *)v30 = 0;
        *((_QWORD *)v30 + 1) = 0;
      }
      while (v30 != v31);
      v34 = *v14;
      v30 = v14[1];
    }
    v22 = (char *)(v29 + 2);
    *v14 = v32;
    __p = v34;
    v109 = v34;
    v14[1] = (char *)(v29 + 2);
    v110 = v30;
    v35 = v14[2];
    v14[2] = &v27[16 * v28];
    v111[0] = v35;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v21 = v17;
    *((_QWORD *)v21 + 1) = v18;
    v22 = v21 + 16;
    v128 = 0;
    v129 = 0;
  }
  v14[1] = v22;
  v36 = v104;
  v104 = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  v37 = (std::__shared_weak_count *)v103.n128_u64[1];
  if (v103.n128_u64[1])
  {
    v38 = (unint64_t *)(v103.n128_u64[1] + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (Scalar)
  {
    v117 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v101 = *(_OWORD *)a2;
  v102 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v40 = v107;
  *(_QWORD *)&v100 = v107;
  if (v107)
  {
    v41 = (_QWORD *)operator new();
    *v41 = &unk_1EA99F8E8;
    v41[1] = 0;
    v41[2] = 0;
    v41[3] = v40;
  }
  else
  {
    v41 = 0;
  }
  *((_QWORD *)&v100 + 1) = v41;
  v107 = 0;
  *(_QWORD *)&v99 = v105;
  if (v105)
  {
    v42 = (_QWORD *)operator new();
    v43 = v105;
    *v42 = &unk_1EA99F948;
    v42[1] = 0;
    v42[2] = 0;
    v42[3] = v43;
  }
  else
  {
    v42 = 0;
  }
  *((_QWORD *)&v99 + 1) = v42;
  v105 = 0;
  v126 = 0;
  v124 = 0;
  MIL::IROperator::Make((__int128 *)v101, &v100, &v99, (uint64_t)v125, (uint64_t)v123, a3);
  v44 = v124;
  if (v124 == v123)
  {
    v45 = 4;
    v44 = v123;
  }
  else
  {
    if (!v124)
      goto LABEL_47;
    v45 = 5;
  }
  (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_47:
  v46 = v126;
  if (v126 == v125)
  {
    v47 = 4;
    v46 = v125;
    goto LABEL_51;
  }
  if (v126)
  {
    v47 = 5;
LABEL_51:
    (*(void (**)(void))(*v46 + 8 * v47))();
  }
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
  if (*((_QWORD *)&v99 + 1))
  {
    v49 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = (std::__shared_weak_count *)*((_QWORD *)&v100 + 1);
  if (*((_QWORD *)&v100 + 1))
  {
    v52 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  if (SHIBYTE(v102) < 0)
    operator delete(v101[0]);
  v128 = 0;
  v54 = operator new();
  *(_OWORD *)v54 = 0u;
  *(_OWORD *)(v54 + 16) = 0u;
  *(_DWORD *)(v54 + 32) = 1065353216;
  v128 = v54;
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v98);
  MIL::IRParameter::Make(&v98, (uint64_t *)&__p);
  v55 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v54, "minimum_compute_type", (uint64_t *)&__p);
  v56 = __p;
  __p = 0;
  if (v56)
    (*(void (**)(void *))(*(_QWORD *)v56 + 8))(v56);
  v57 = (std::__shared_weak_count *)v98.n128_u64[1];
  if (v98.n128_u64[1])
  {
    v58 = (unint64_t *)(v98.n128_u64[1] + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v55 + 5) + 32))(*((_QWORD *)v55 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v55 + 5) + 48))(*((_QWORD *)v55 + 5), 1);
  v60 = *a3;
  v61 = v128;
  v96 = v128;
  if (v128)
  {
    v62 = (std::__shared_weak_count *)operator new();
    v62->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v62->__shared_owners_ = 0;
    v62->__shared_weak_owners_ = 0;
    v62[1].__vftable = (std::__shared_weak_count_vtbl *)v61;
  }
  else
  {
    v62 = 0;
  }
  v97 = v62;
  v128 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v60 + 184))(v60, &v96);
  v63 = v97;
  if (v97)
  {
    p_shared_owners = (unint64_t *)&v97->__shared_owners_;
    do
      v65 = __ldaxr(p_shared_owners);
    while (__stlxr(v65 - 1, p_shared_owners));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&__p, (uint64_t)v121);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v66 + 200))(v66, v121);
  v67 = v122;
  if (v122 == v121)
  {
    v68 = 4;
    v67 = v121;
  }
  else
  {
    if (!v122)
      goto LABEL_84;
    v68 = 5;
  }
  (*(void (**)(void))(*v67 + 8 * v68))();
LABEL_84:
  if (SHIBYTE(v110) < 0)
    operator delete(__p);
  v69 = *a3;
  v119[0] = &off_1EA9A00F8;
  v119[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceLogicalNot;
  v120 = v119;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v69 + 216))(v69, v119);
  v70 = v120;
  if (v120 == v119)
  {
    v71 = 4;
    v70 = v119;
    goto LABEL_90;
  }
  if (v120)
  {
    v71 = 5;
LABEL_90:
    (*(void (**)(void))(*v70 + 8 * v71))();
  }
  MIL::Validation::PossibleStringValuesConstraints::Make(&v104);
  v72 = v104;
  std::string::basic_string[abi:ne180100]<0>(v92, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v92, 1, &v127);
  v94 = v127;
  if (v127)
  {
    v73 = (std::__shared_weak_count *)operator new();
    v74 = v127;
    v73->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v73->__shared_owners_ = 0;
    v73->__shared_weak_owners_ = 0;
    v73[1].__vftable = (std::__shared_weak_count_vtbl *)v74;
  }
  else
  {
    v73 = 0;
  }
  v95 = v73;
  v127 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v111, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v112, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v113, "int32");
  std::string::basic_string[abi:ne180100]<0>(v114, "int8");
  std::string::basic_string[abi:ne180100]<0>(v115, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 6);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v72 + 24))(v72, &v94, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v115[i + 2]) < 0)
      operator delete(v115[i]);
  }
  v76 = v95;
  if (v95)
  {
    v77 = (unint64_t *)&v95->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = v127;
  v127 = 0;
  if (v79)
    (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
  if (v93 < 0)
    operator delete(v92[0]);
  v80 = *a3;
  v90 = v104;
  if (v104)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v82 = v104;
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = (std::__shared_weak_count_vtbl *)v82;
  }
  else
  {
    v81 = 0;
  }
  v91 = v81;
  v104 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v80 + 56))(v80, &v90);
  v83 = v91;
  if (v91)
  {
    v84 = (unint64_t *)&v91->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = v104;
  v104 = 0;
  if (v86)
    (*(void (**)(uint64_t))(*(_QWORD *)v86 + 8))(v86);
  if (v128)
  {
    v87 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v128);
    MEMORY[0x1E0C023A0](v87, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v105, 0);
  result = v107;
  if (v107)
  {
    v89 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v107);
    return MEMORY[0x1E0C023A0](v89, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09BA9A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void **a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t *v35;
  uint64_t v36;
  uint64_t v38;

  if (a31)
    (*(void (**)(uint64_t))(*(_QWORD *)a31 + 8))(a31);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v36 - 88), 0);
  v38 = *v35;
  *v35 = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a32, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a35, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::BaseGather::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  void *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _QWORD *v52;
  unsigned __int8 *v53;
  void **v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  char **v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t *v88;
  char *v89;
  char *v90;
  char *v91;
  __int128 v92;
  char *v93;
  char *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  char **v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  void **v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  unint64_t *p_shared_owners;
  unint64_t v118;
  char *v119;
  void **v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count_vtbl *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  char *v126;
  void **v127;
  std::__shared_weak_count *v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  char *v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  void **v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  void **v140;
  void **v141;
  std::__shared_weak_count *v142;
  std::__shared_weak_count_vtbl *v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  char *v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  void **v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  void **v154;
  uint64_t result;
  uint64_t v156;
  void **v157;
  std::__shared_weak_count *v158;
  void *v159[2];
  char v160;
  void *v161[2];
  char v162;
  char *v163;
  std::__shared_weak_count *v164;
  void **v165;
  std::__shared_weak_count *v166;
  void *v167[2];
  char v168;
  char *v169;
  std::__shared_weak_count *v170;
  void *v171[2];
  char v172;
  void *v173[2];
  char v174;
  char *v175;
  std::__shared_weak_count *v176;
  void *v177[2];
  char v178;
  void *v179[2];
  char v180;
  char *v181;
  std::__shared_weak_count *v182;
  __int128 v183;
  __int128 v184;
  void *v185[2];
  uint64_t v186;
  void *v187;
  void *v188;
  _QWORD *v189;
  __n128 v190;
  uint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  char **v194;
  __n128 v195;
  __n128 v196;
  void *__p;
  void *v198;
  _QWORD *v199;
  void *v200;
  void *v201;
  _QWORD *v202;
  void *v203;
  void *v204;
  _QWORD *v205;
  void *v206;
  void *v207;
  _QWORD *v208;
  void *v209;
  void *v210;
  _QWORD *v211;
  void *v212;
  void *v213;
  _QWORD *v214;
  void *v215;
  void *v216;
  _QWORD *v217;
  __n128 v218;
  _QWORD *v219;
  _BYTE v220[24];
  _BYTE *v221;
  _BYTE v222[24];
  _BYTE *v223;
  void **v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  char *Scalar;
  char *v233;
  char *v234;
  char *v235;
  char **v236;
  uint64_t v237;

  v237 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v219 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v11 = (char *)operator new(0x10uLL);
  v233 = v11 + 16;
  v234 = v11 + 16;
  *(_QWORD *)v11 = v9;
  *((_QWORD *)v11 + 1) = v10;
  Scalar = v11;
  v224 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(0x10uLL);
  v217 = v14 + 2;
  *v14 = v12;
  v14[1] = v13;
  v215 = v14;
  v216 = v14 + 2;
  v225 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v215);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v17 = operator new(0x10uLL);
  v214 = v17 + 2;
  *v17 = v15;
  v17[1] = v16;
  v212 = v17;
  v213 = v17 + 2;
  v226 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v212);
  v18 = MIL::IRUnknownDimension::Make(a1, 0);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(0x10uLL);
  v211 = v20 + 2;
  *v20 = v18;
  v20[1] = v19;
  v209 = v20;
  v210 = v20 + 2;
  v227 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v209);
  v21 = MIL::IRUnknownDimension::Make(a1, 0);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(0x10uLL);
  v208 = v23 + 2;
  *v23 = v21;
  v23[1] = v22;
  v206 = v23;
  v207 = v23 + 2;
  v228 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v206);
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = operator new(0x10uLL);
  v204 = v26 + 2;
  v205 = v26 + 2;
  *v26 = v24;
  v26[1] = v25;
  v203 = v26;
  v229 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v203);
  v27 = MIL::IRUnknownDimension::Make(a1, 0);
  v28 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v29 = operator new(0x10uLL);
  v201 = v29 + 2;
  v202 = v29 + 2;
  *v29 = v27;
  v29[1] = v28;
  v200 = v29;
  v230 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v200);
  v30 = MIL::IRUnknownDimension::Make(a1, 0);
  v31 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v32 = operator new(0x10uLL);
  v198 = v32 + 2;
  v199 = v32 + 2;
  *v32 = v30;
  v32[1] = v31;
  __p = v32;
  v231 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v224, 8, &v218);
  MIL::IRParameter::Make(&v218, (uint64_t *)&v187);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", (uint64_t *)&v187);
  v33 = v187;
  v187 = 0;
  if (v33)
    (*(void (**)(void *))(*(_QWORD *)v33 + 8))(v33);
  v34 = (std::__shared_weak_count *)v218.n128_u64[1];
  if (v218.n128_u64[1])
  {
    v35 = (unint64_t *)(v218.n128_u64[1] + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (__p)
  {
    v198 = __p;
    operator delete(__p);
  }
  if (v200)
  {
    v201 = v200;
    operator delete(v200);
  }
  if (v203)
  {
    v204 = v203;
    operator delete(v203);
  }
  if (v206)
  {
    v207 = v206;
    operator delete(v206);
  }
  if (v209)
  {
    v210 = v209;
    operator delete(v209);
  }
  if (v212)
  {
    v213 = v212;
    operator delete(v212);
  }
  if (v215)
  {
    v216 = v215;
    operator delete(v215);
  }
  if (Scalar)
  {
    v233 = Scalar;
    operator delete(Scalar);
  }
  v37 = v219;
  v38 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v39 = (char *)operator new(8uLL);
  Scalar = v39;
  *(_QWORD *)v39 = v38;
  v233 = v39 + 8;
  v234 = v39 + 8;
  v224 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&Scalar);
  v40 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v41 = operator new(8uLL);
  v215 = v41;
  *v41 = v40;
  v217 = v41 + 1;
  v216 = v41 + 1;
  v225 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v215);
  v42 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v43 = operator new(8uLL);
  v212 = v43;
  *v43 = v42;
  v214 = v43 + 1;
  v213 = v43 + 1;
  v226 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v212);
  v44 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v45 = operator new(8uLL);
  v209 = v45;
  *v45 = v44;
  v211 = v45 + 1;
  v210 = v45 + 1;
  v227 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v209);
  v46 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v47 = operator new(8uLL);
  v206 = v47;
  *v47 = v46;
  v208 = v47 + 1;
  v207 = v47 + 1;
  v228 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v206);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v224, 5, &v196);
  MIL::IRParameter::Make(&v196, (uint64_t *)&v203);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v37, "indices", (uint64_t *)&v203);
  v48 = v203;
  v203 = 0;
  if (v48)
    (*(void (**)(void *))(*(_QWORD *)v48 + 8))(v48);
  v49 = (std::__shared_weak_count *)v196.n128_u64[1];
  if (v196.n128_u64[1])
  {
    v50 = (unint64_t *)(v196.n128_u64[1] + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (v206)
  {
    v207 = v206;
    operator delete(v206);
  }
  if (v209)
  {
    v210 = v209;
    operator delete(v209);
  }
  if (v212)
  {
    v213 = v212;
    operator delete(v212);
  }
  if (v215)
  {
    v216 = v215;
    operator delete(v215);
  }
  if (Scalar)
  {
    v233 = Scalar;
    operator delete(Scalar);
  }
  v52 = v219;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v195);
  MIL::IRParameter::Make(&v195, (uint64_t *)&v224);
  v53 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v52, "validate_indices", (uint64_t *)&v224);
  v54 = v224;
  v224 = 0;
  if (v54)
    (*((void (**)(void **))*v54 + 1))(v54);
  v55 = (std::__shared_weak_count *)v195.n128_u64[1];
  if (v195.n128_u64[1])
  {
    v56 = (unint64_t *)(v195.n128_u64[1] + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v53 + 5) + 32))(*((_QWORD *)v53 + 5), 1);
  v194 = 0;
  v58 = operator new();
  *(_QWORD *)v58 = 0;
  *(_QWORD *)(v58 + 8) = 0;
  *(_QWORD *)(v58 + 16) = 0;
  v224 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v194, (void **)v58);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v224, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v194, 1uLL);
  v59 = v194;
  v60 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v61 = operator new(8uLL);
  v215 = v61;
  *v61 = v60;
  v217 = v61 + 1;
  v216 = v61 + 1;
  v224 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v215);
  v62 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v63 = operator new(8uLL);
  v212 = v63;
  *v63 = v62;
  v214 = v63 + 1;
  v213 = v63 + 1;
  v225 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v212);
  v64 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v65 = operator new(8uLL);
  v209 = v65;
  *v65 = v64;
  v211 = v65 + 1;
  v210 = v65 + 1;
  v226 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v209);
  v66 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v67 = operator new(8uLL);
  v206 = v67;
  *v67 = v66;
  v208 = v67 + 1;
  v207 = v67 + 1;
  v227 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v206);
  v68 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v69 = operator new(8uLL);
  v203 = v69;
  *v69 = v68;
  v204 = v69 + 1;
  v205 = v69 + 1;
  v228 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v203);
  v70 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v71 = operator new(8uLL);
  v200 = v71;
  *v71 = v70;
  v201 = v71 + 1;
  v202 = v71 + 1;
  v229 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v200);
  v72 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v73 = operator new(8uLL);
  __p = v73;
  *v73 = v72;
  v198 = v73 + 1;
  v199 = v73 + 1;
  v230 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&__p);
  v74 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v75 = operator new(8uLL);
  v187 = v75;
  *v75 = v74;
  v188 = v75 + 1;
  v189 = v75 + 1;
  v231 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v187);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v224, 8, &v190);
  MIL::IRParameter::Make(&v190, &v191);
  v76 = v191;
  v192 = v191;
  if (v191)
  {
    v77 = (_QWORD *)operator new();
    v78 = v191;
    *v77 = &unk_1EA99F888;
    v77[1] = 0;
    v77[2] = 0;
    v77[3] = v78;
  }
  else
  {
    v77 = 0;
  }
  v193 = v77;
  v191 = 0;
  v79 = v59[2];
  v80 = v59[1];
  if (v80 >= v79)
  {
    v82 = (v80 - *v59) >> 4;
    v83 = v82 + 1;
    if ((unint64_t)(v82 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v84 = v79 - *v59;
    if (v84 >> 3 > v83)
      v83 = v84 >> 3;
    if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFF0)
      v85 = 0xFFFFFFFFFFFFFFFLL;
    else
      v85 = v83;
    v236 = v59 + 2;
    v86 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v59 + 2), v85);
    v88 = (uint64_t *)&v86[16 * v82];
    *v88 = v76;
    v88[1] = (uint64_t)v77;
    v192 = 0;
    v193 = 0;
    v90 = *v59;
    v89 = v59[1];
    if (v89 == *v59)
    {
      v93 = v59[1];
      v91 = &v86[16 * v82];
    }
    else
    {
      v91 = &v86[16 * v82];
      do
      {
        v92 = *((_OWORD *)v89 - 1);
        v89 -= 16;
        *((_OWORD *)v91 - 1) = v92;
        v91 -= 16;
        *(_QWORD *)v89 = 0;
        *((_QWORD *)v89 + 1) = 0;
      }
      while (v89 != v90);
      v93 = *v59;
      v89 = v59[1];
    }
    v81 = (char *)(v88 + 2);
    *v59 = v91;
    Scalar = v93;
    v233 = v93;
    v59[1] = (char *)(v88 + 2);
    v234 = v89;
    v94 = v59[2];
    v59[2] = &v86[16 * v87];
    v235 = v94;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v80 = v76;
    *((_QWORD *)v80 + 1) = v77;
    v81 = v80 + 16;
    v192 = 0;
    v193 = 0;
  }
  v59[1] = v81;
  v95 = v191;
  v191 = 0;
  if (v95)
    (*(void (**)(uint64_t))(*(_QWORD *)v95 + 8))(v95);
  v96 = (std::__shared_weak_count *)v190.n128_u64[1];
  if (v190.n128_u64[1])
  {
    v97 = (unint64_t *)(v190.n128_u64[1] + 8);
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  if (v187)
  {
    v188 = v187;
    operator delete(v187);
  }
  if (__p)
  {
    v198 = __p;
    operator delete(__p);
  }
  if (v200)
  {
    v201 = v200;
    operator delete(v200);
  }
  if (v203)
  {
    v204 = v203;
    operator delete(v203);
  }
  if (v206)
  {
    v207 = v206;
    operator delete(v206);
  }
  if (v209)
  {
    v210 = v209;
    operator delete(v209);
  }
  if (v212)
  {
    v213 = v212;
    operator delete(v212);
  }
  if (v215)
  {
    v216 = v215;
    operator delete(v215);
  }
  *(_OWORD *)v185 = *(_OWORD *)a2;
  v186 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v99 = (uint64_t)v219;
  *(_QWORD *)&v184 = v219;
  if (v219)
  {
    v100 = (_QWORD *)operator new();
    *v100 = &unk_1EA99F8E8;
    v100[1] = 0;
    v100[2] = 0;
    v100[3] = v99;
  }
  else
  {
    v100 = 0;
  }
  *((_QWORD *)&v184 + 1) = v100;
  v219 = 0;
  *(_QWORD *)&v183 = v194;
  if (v194)
  {
    v101 = (_QWORD *)operator new();
    v102 = v194;
    *v101 = &unk_1EA99F948;
    v101[1] = 0;
    v101[2] = 0;
    v101[3] = v102;
  }
  else
  {
    v101 = 0;
  }
  *((_QWORD *)&v183 + 1) = v101;
  v194 = 0;
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v222, a3);
  v221 = 0;
  MIL::IROperator::Make((__int128 *)v185, &v184, &v183, (uint64_t)v222, (uint64_t)v220, a4);
  v103 = v221;
  if (v221 == v220)
  {
    v104 = 4;
    v103 = v220;
  }
  else
  {
    if (!v221)
      goto LABEL_99;
    v104 = 5;
  }
  (*(void (**)(void))(*v103 + 8 * v104))();
LABEL_99:
  v105 = v223;
  if (v223 == v222)
  {
    v106 = 4;
    v105 = v222;
    goto LABEL_103;
  }
  if (v223)
  {
    v106 = 5;
LABEL_103:
    (*(void (**)(void))(*v105 + 8 * v106))();
  }
  v107 = (std::__shared_weak_count *)*((_QWORD *)&v183 + 1);
  if (*((_QWORD *)&v183 + 1))
  {
    v108 = (unint64_t *)(*((_QWORD *)&v183 + 1) + 8);
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = (std::__shared_weak_count *)*((_QWORD *)&v184 + 1);
  if (*((_QWORD *)&v184 + 1))
  {
    v111 = (unint64_t *)(*((_QWORD *)&v184 + 1) + 8);
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  if (SHIBYTE(v186) < 0)
    operator delete(v185[0]);
  MIL::Validation::TensorDTypeConstraints::Make(&v224);
  v113 = v224;
  std::string::basic_string[abi:ne180100]<0>(v179, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v179, 0, (uint64_t *)&Scalar);
  v181 = Scalar;
  if (Scalar)
  {
    v114 = (std::__shared_weak_count *)operator new();
    v115 = (std::__shared_weak_count_vtbl *)Scalar;
    v114->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v114->__shared_owners_ = 0;
    v114->__shared_weak_owners_ = 0;
    v114[1].__vftable = v115;
  }
  else
  {
    v114 = 0;
  }
  v182 = v114;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v177, "U");
  (*((void (**)(void **, char **, void **))*v113 + 3))(v113, &v181, v177);
  if (v178 < 0)
    operator delete(v177[0]);
  v116 = v182;
  if (v182)
  {
    p_shared_owners = (unint64_t *)&v182->__shared_owners_;
    do
      v118 = __ldaxr(p_shared_owners);
    while (__stlxr(v118 - 1, p_shared_owners));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = Scalar;
  Scalar = 0;
  if (v119)
    (*(void (**)(char *))(*(_QWORD *)v119 + 8))(v119);
  if (v180 < 0)
    operator delete(v179[0]);
  v120 = v224;
  std::string::basic_string[abi:ne180100]<0>(v173, "indices");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v173, 0, (uint64_t *)&Scalar);
  v175 = Scalar;
  if (Scalar)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v122 = (std::__shared_weak_count_vtbl *)Scalar;
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = v122;
  }
  else
  {
    v121 = 0;
  }
  v176 = v121;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v171, "I");
  (*((void (**)(void **, char **, void **))*v120 + 3))(v120, &v175, v171);
  if (v172 < 0)
    operator delete(v171[0]);
  v123 = v176;
  if (v176)
  {
    v124 = (unint64_t *)&v176->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = Scalar;
  Scalar = 0;
  if (v126)
    (*(void (**)(char *))(*(_QWORD *)v126 + 8))(v126);
  if (v174 < 0)
    operator delete(v173[0]);
  v127 = v224;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v169 = Scalar;
  if (Scalar)
  {
    v128 = (std::__shared_weak_count *)operator new();
    v129 = (std::__shared_weak_count_vtbl *)Scalar;
    v128->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v128->__shared_owners_ = 0;
    v128->__shared_weak_owners_ = 0;
    v128[1].__vftable = v129;
  }
  else
  {
    v128 = 0;
  }
  v170 = v128;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v167, "U");
  (*((void (**)(void **, char **, void **))*v127 + 3))(v127, &v169, v167);
  if (v168 < 0)
    operator delete(v167[0]);
  v130 = v170;
  if (v170)
  {
    v131 = (unint64_t *)&v170->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = Scalar;
  Scalar = 0;
  if (v133)
    (*(void (**)(char *))(*(_QWORD *)v133 + 8))(v133);
  v134 = *a4;
  v165 = v224;
  if (v224)
  {
    v135 = (std::__shared_weak_count *)operator new();
    v136 = v224;
    v135->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v135->__shared_owners_ = 0;
    v135->__shared_weak_owners_ = 0;
    v135[1].__vftable = (std::__shared_weak_count_vtbl *)v136;
  }
  else
  {
    v135 = 0;
  }
  v166 = v135;
  v224 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v134 + 56))(v134, &v165);
  v137 = v166;
  if (v166)
  {
    v138 = (unint64_t *)&v166->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v140 = v224;
  v224 = 0;
  if (v140)
    (*((void (**)(void **))*v140 + 1))(v140);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v224);
  v141 = v224;
  std::string::basic_string[abi:ne180100]<0>(v161, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v161, 0, (uint64_t *)&Scalar);
  v163 = Scalar;
  if (Scalar)
  {
    v142 = (std::__shared_weak_count *)operator new();
    v143 = (std::__shared_weak_count_vtbl *)Scalar;
    v142->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v142->__shared_owners_ = 0;
    v142->__shared_weak_owners_ = 0;
    v142[1].__vftable = v143;
  }
  else
  {
    v142 = 0;
  }
  v164 = v142;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v159, "D");
  (*((void (**)(void **, char **, _QWORD, void **))*v141 + 3))(v141, &v163, 0, v159);
  if (v160 < 0)
    operator delete(v159[0]);
  v144 = v164;
  if (v164)
  {
    v145 = (unint64_t *)&v164->__shared_owners_;
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
    }
  }
  v147 = Scalar;
  Scalar = 0;
  if (v147)
    (*(void (**)(char *))(*(_QWORD *)v147 + 8))(v147);
  if (v162 < 0)
    operator delete(v161[0]);
  v148 = *a4;
  v157 = v224;
  if (v224)
  {
    v149 = (std::__shared_weak_count *)operator new();
    v150 = v224;
    v149->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v149->__shared_owners_ = 0;
    v149->__shared_weak_owners_ = 0;
    v149[1].__vftable = (std::__shared_weak_count_vtbl *)v150;
  }
  else
  {
    v149 = 0;
  }
  v158 = v149;
  v224 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v148 + 56))(v148, &v157);
  v151 = v158;
  if (v158)
  {
    v152 = (unint64_t *)&v158->__shared_owners_;
    do
      v153 = __ldaxr(v152);
    while (__stlxr(v153 - 1, v152));
    if (!v153)
    {
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
    }
  }
  v154 = v224;
  v224 = 0;
  if (v154)
    (*((void (**)(void **))*v154 + 1))(v154);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v194, 0);
  result = (uint64_t)v219;
  if (v219)
  {
    v156 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v219);
    return MEMORY[0x1E0C023A0](v156, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09BBF1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58)
{
  uint64_t *v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;

  v61 = *(_QWORD *)(v59 - 176);
  *(_QWORD *)(v59 - 176) = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  v62 = *v58;
  *v58 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v59 - 248), 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::BaseGatherWithAxis::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  void *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _QWORD *v52;
  unsigned __int8 *v53;
  void **v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _QWORD *v58;
  unsigned __int8 *v59;
  void **v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  char **v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t *v94;
  char *v95;
  char *v96;
  char *v97;
  __int128 v98;
  char *v99;
  char *v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  char **v108;
  _QWORD *v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  void **v119;
  std::__shared_weak_count *v120;
  std::__shared_weak_count_vtbl *v121;
  std::__shared_weak_count *v122;
  unint64_t *p_shared_owners;
  unint64_t v124;
  char *v125;
  void **v126;
  std::__shared_weak_count *v127;
  std::__shared_weak_count_vtbl *v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  char *v132;
  void **v133;
  std::__shared_weak_count *v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  char *v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  void **v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  void **v146;
  void **v147;
  std::__shared_weak_count *v148;
  std::__shared_weak_count_vtbl *v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  char *v153;
  uint64_t v154;
  std::__shared_weak_count *v155;
  void **v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  void **v160;
  uint64_t result;
  uint64_t v162;
  void **v163;
  std::__shared_weak_count *v164;
  void *v165[2];
  char v166;
  void *v167[2];
  char v168;
  char *v169;
  std::__shared_weak_count *v170;
  void **v171;
  std::__shared_weak_count *v172;
  void *v173[2];
  char v174;
  char *v175;
  std::__shared_weak_count *v176;
  void *v177[2];
  char v178;
  void *v179[2];
  char v180;
  char *v181;
  std::__shared_weak_count *v182;
  void *v183[2];
  char v184;
  void *v185[2];
  char v186;
  char *v187;
  std::__shared_weak_count *v188;
  __int128 v189;
  __int128 v190;
  void *v191[2];
  uint64_t v192;
  void *v193;
  void *v194;
  _QWORD *v195;
  __n128 v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  char **v200;
  __n128 v201;
  __n128 v202;
  __n128 v203;
  void *__p;
  void *v205;
  _QWORD *v206;
  void *v207;
  void *v208;
  _QWORD *v209;
  void *v210;
  void *v211;
  _QWORD *v212;
  void *v213;
  void *v214;
  _QWORD *v215;
  void *v216;
  void *v217;
  _QWORD *v218;
  void *v219;
  void *v220;
  _QWORD *v221;
  void *v222;
  void *v223;
  _QWORD *v224;
  __n128 v225;
  _QWORD *v226;
  _BYTE v227[24];
  _BYTE *v228;
  _BYTE v229[24];
  _BYTE *v230;
  void **v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  char *Scalar;
  char *v240;
  char *v241;
  char *v242;
  char **v243;
  uint64_t v244;

  v244 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v226 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v11 = (char *)operator new(0x10uLL);
  v240 = v11 + 16;
  v241 = v11 + 16;
  *(_QWORD *)v11 = v9;
  *((_QWORD *)v11 + 1) = v10;
  Scalar = v11;
  v231 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(0x10uLL);
  v224 = v14 + 2;
  *v14 = v12;
  v14[1] = v13;
  v222 = v14;
  v223 = v14 + 2;
  v232 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v222);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v17 = operator new(0x10uLL);
  v221 = v17 + 2;
  *v17 = v15;
  v17[1] = v16;
  v219 = v17;
  v220 = v17 + 2;
  v233 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v219);
  v18 = MIL::IRUnknownDimension::Make(a1, 0);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(0x10uLL);
  v218 = v20 + 2;
  *v20 = v18;
  v20[1] = v19;
  v216 = v20;
  v217 = v20 + 2;
  v234 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v216);
  v21 = MIL::IRUnknownDimension::Make(a1, 0);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(0x10uLL);
  v215 = v23 + 2;
  *v23 = v21;
  v23[1] = v22;
  v213 = v23;
  v214 = v23 + 2;
  v235 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v213);
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = operator new(0x10uLL);
  v211 = v26 + 2;
  v212 = v26 + 2;
  *v26 = v24;
  v26[1] = v25;
  v210 = v26;
  v236 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v210);
  v27 = MIL::IRUnknownDimension::Make(a1, 0);
  v28 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v29 = operator new(0x10uLL);
  v208 = v29 + 2;
  v209 = v29 + 2;
  *v29 = v27;
  v29[1] = v28;
  v207 = v29;
  v237 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v207);
  v30 = MIL::IRUnknownDimension::Make(a1, 0);
  v31 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v32 = operator new(0x10uLL);
  v205 = v32 + 2;
  v206 = v32 + 2;
  *v32 = v30;
  v32[1] = v31;
  __p = v32;
  v238 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v231, 8, &v225);
  MIL::IRParameter::Make(&v225, (uint64_t *)&v193);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", (uint64_t *)&v193);
  v33 = v193;
  v193 = 0;
  if (v33)
    (*(void (**)(void *))(*(_QWORD *)v33 + 8))(v33);
  v34 = (std::__shared_weak_count *)v225.n128_u64[1];
  if (v225.n128_u64[1])
  {
    v35 = (unint64_t *)(v225.n128_u64[1] + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (__p)
  {
    v205 = __p;
    operator delete(__p);
  }
  if (v207)
  {
    v208 = v207;
    operator delete(v207);
  }
  if (v210)
  {
    v211 = v210;
    operator delete(v210);
  }
  if (v213)
  {
    v214 = v213;
    operator delete(v213);
  }
  if (v216)
  {
    v217 = v216;
    operator delete(v216);
  }
  if (v219)
  {
    v220 = v219;
    operator delete(v219);
  }
  if (v222)
  {
    v223 = v222;
    operator delete(v222);
  }
  if (Scalar)
  {
    v240 = Scalar;
    operator delete(Scalar);
  }
  v37 = v226;
  v38 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v39 = (char *)operator new(8uLL);
  Scalar = v39;
  *(_QWORD *)v39 = v38;
  v240 = v39 + 8;
  v241 = v39 + 8;
  v231 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&Scalar);
  v40 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v41 = operator new(8uLL);
  v222 = v41;
  *v41 = v40;
  v224 = v41 + 1;
  v223 = v41 + 1;
  v232 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v222);
  v42 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v43 = operator new(8uLL);
  v219 = v43;
  *v43 = v42;
  v221 = v43 + 1;
  v220 = v43 + 1;
  v233 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v219);
  v44 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v45 = operator new(8uLL);
  v216 = v45;
  *v45 = v44;
  v218 = v45 + 1;
  v217 = v45 + 1;
  v234 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v216);
  v46 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v47 = operator new(8uLL);
  v213 = v47;
  *v47 = v46;
  v215 = v47 + 1;
  v214 = v47 + 1;
  v235 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v213);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v231, 5, &v203);
  MIL::IRParameter::Make(&v203, (uint64_t *)&v210);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v37, "indices", (uint64_t *)&v210);
  v48 = v210;
  v210 = 0;
  if (v48)
    (*(void (**)(void *))(*(_QWORD *)v48 + 8))(v48);
  v49 = (std::__shared_weak_count *)v203.n128_u64[1];
  if (v203.n128_u64[1])
  {
    v50 = (unint64_t *)(v203.n128_u64[1] + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (v213)
  {
    v214 = v213;
    operator delete(v213);
  }
  if (v216)
  {
    v217 = v216;
    operator delete(v216);
  }
  if (v219)
  {
    v220 = v219;
    operator delete(v219);
  }
  if (v222)
  {
    v223 = v222;
    operator delete(v222);
  }
  if (Scalar)
  {
    v240 = Scalar;
    operator delete(Scalar);
  }
  v52 = v226;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v202);
  MIL::IRParameter::Make(&v202, (uint64_t *)&v231);
  v53 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v52, "validate_indices", (uint64_t *)&v231);
  v54 = v231;
  v231 = 0;
  if (v54)
    (*((void (**)(void **))*v54 + 1))(v54);
  v55 = (std::__shared_weak_count *)v202.n128_u64[1];
  if (v202.n128_u64[1])
  {
    v56 = (unint64_t *)(v202.n128_u64[1] + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v53 + 5) + 32))(*((_QWORD *)v53 + 5), 1);
  v58 = v226;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v201);
  MIL::IRParameter::Make(&v201, (uint64_t *)&v231);
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v58, "axis", (uint64_t *)&v231);
  v60 = v231;
  v231 = 0;
  if (v60)
    (*((void (**)(void **))*v60 + 1))(v60);
  v61 = (std::__shared_weak_count *)v201.n128_u64[1];
  if (v201.n128_u64[1])
  {
    v62 = (unint64_t *)(v201.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 32))(*((_QWORD *)v59 + 5), 1);
  v200 = 0;
  v64 = operator new();
  *(_QWORD *)v64 = 0;
  *(_QWORD *)(v64 + 8) = 0;
  *(_QWORD *)(v64 + 16) = 0;
  v231 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v200, (void **)v64);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v231, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v200, 1uLL);
  v65 = v200;
  v66 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v67 = operator new(8uLL);
  v222 = v67;
  *v67 = v66;
  v224 = v67 + 1;
  v223 = v67 + 1;
  v231 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v222);
  v68 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v69 = operator new(8uLL);
  v219 = v69;
  *v69 = v68;
  v221 = v69 + 1;
  v220 = v69 + 1;
  v232 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v219);
  v70 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v71 = operator new(8uLL);
  v216 = v71;
  *v71 = v70;
  v218 = v71 + 1;
  v217 = v71 + 1;
  v233 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v216);
  v72 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v73 = operator new(8uLL);
  v213 = v73;
  *v73 = v72;
  v215 = v73 + 1;
  v214 = v73 + 1;
  v234 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v213);
  v74 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v75 = operator new(8uLL);
  v210 = v75;
  *v75 = v74;
  v211 = v75 + 1;
  v212 = v75 + 1;
  v235 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v210);
  v76 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v77 = operator new(8uLL);
  v207 = v77;
  *v77 = v76;
  v208 = v77 + 1;
  v209 = v77 + 1;
  v236 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v207);
  v78 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v79 = operator new(8uLL);
  __p = v79;
  *v79 = v78;
  v205 = v79 + 1;
  v206 = v79 + 1;
  v237 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&__p);
  v80 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v81 = operator new(8uLL);
  v193 = v81;
  *v81 = v80;
  v194 = v81 + 1;
  v195 = v81 + 1;
  v238 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v193);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v231, 8, &v196);
  MIL::IRParameter::Make(&v196, &v197);
  v82 = v197;
  v198 = v197;
  if (v197)
  {
    v83 = (_QWORD *)operator new();
    v84 = v197;
    *v83 = &unk_1EA99F888;
    v83[1] = 0;
    v83[2] = 0;
    v83[3] = v84;
  }
  else
  {
    v83 = 0;
  }
  v199 = v83;
  v197 = 0;
  v85 = v65[2];
  v86 = v65[1];
  if (v86 >= v85)
  {
    v88 = (v86 - *v65) >> 4;
    v89 = v88 + 1;
    if ((unint64_t)(v88 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v90 = v85 - *v65;
    if (v90 >> 3 > v89)
      v89 = v90 >> 3;
    if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFF0)
      v91 = 0xFFFFFFFFFFFFFFFLL;
    else
      v91 = v89;
    v243 = v65 + 2;
    v92 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v65 + 2), v91);
    v94 = (uint64_t *)&v92[16 * v88];
    *v94 = v82;
    v94[1] = (uint64_t)v83;
    v198 = 0;
    v199 = 0;
    v96 = *v65;
    v95 = v65[1];
    if (v95 == *v65)
    {
      v99 = v65[1];
      v97 = &v92[16 * v88];
    }
    else
    {
      v97 = &v92[16 * v88];
      do
      {
        v98 = *((_OWORD *)v95 - 1);
        v95 -= 16;
        *((_OWORD *)v97 - 1) = v98;
        v97 -= 16;
        *(_QWORD *)v95 = 0;
        *((_QWORD *)v95 + 1) = 0;
      }
      while (v95 != v96);
      v99 = *v65;
      v95 = v65[1];
    }
    v87 = (char *)(v94 + 2);
    *v65 = v97;
    Scalar = v99;
    v240 = v99;
    v65[1] = (char *)(v94 + 2);
    v241 = v95;
    v100 = v65[2];
    v65[2] = &v92[16 * v93];
    v242 = v100;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v86 = v82;
    *((_QWORD *)v86 + 1) = v83;
    v87 = v86 + 16;
    v198 = 0;
    v199 = 0;
  }
  v65[1] = v87;
  v101 = v197;
  v197 = 0;
  if (v101)
    (*(void (**)(uint64_t))(*(_QWORD *)v101 + 8))(v101);
  v102 = (std::__shared_weak_count *)v196.n128_u64[1];
  if (v196.n128_u64[1])
  {
    v103 = (unint64_t *)(v196.n128_u64[1] + 8);
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  if (v193)
  {
    v194 = v193;
    operator delete(v193);
  }
  if (__p)
  {
    v205 = __p;
    operator delete(__p);
  }
  if (v207)
  {
    v208 = v207;
    operator delete(v207);
  }
  if (v210)
  {
    v211 = v210;
    operator delete(v210);
  }
  if (v213)
  {
    v214 = v213;
    operator delete(v213);
  }
  if (v216)
  {
    v217 = v216;
    operator delete(v216);
  }
  if (v219)
  {
    v220 = v219;
    operator delete(v219);
  }
  if (v222)
  {
    v223 = v222;
    operator delete(v222);
  }
  *(_OWORD *)v191 = *(_OWORD *)a2;
  v192 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v105 = (uint64_t)v226;
  *(_QWORD *)&v190 = v226;
  if (v226)
  {
    v106 = (_QWORD *)operator new();
    *v106 = &unk_1EA99F8E8;
    v106[1] = 0;
    v106[2] = 0;
    v106[3] = v105;
  }
  else
  {
    v106 = 0;
  }
  *((_QWORD *)&v190 + 1) = v106;
  v226 = 0;
  *(_QWORD *)&v189 = v200;
  if (v200)
  {
    v107 = (_QWORD *)operator new();
    v108 = v200;
    *v107 = &unk_1EA99F948;
    v107[1] = 0;
    v107[2] = 0;
    v107[3] = v108;
  }
  else
  {
    v107 = 0;
  }
  *((_QWORD *)&v189 + 1) = v107;
  v200 = 0;
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v229, a3);
  v228 = 0;
  MIL::IROperator::Make((__int128 *)v191, &v190, &v189, (uint64_t)v229, (uint64_t)v227, a4);
  v109 = v228;
  if (v228 == v227)
  {
    v110 = 4;
    v109 = v227;
  }
  else
  {
    if (!v228)
      goto LABEL_106;
    v110 = 5;
  }
  (*(void (**)(void))(*v109 + 8 * v110))();
LABEL_106:
  v111 = v230;
  if (v230 == v229)
  {
    v112 = 4;
    v111 = v229;
    goto LABEL_110;
  }
  if (v230)
  {
    v112 = 5;
LABEL_110:
    (*(void (**)(void))(*v111 + 8 * v112))();
  }
  v113 = (std::__shared_weak_count *)*((_QWORD *)&v189 + 1);
  if (*((_QWORD *)&v189 + 1))
  {
    v114 = (unint64_t *)(*((_QWORD *)&v189 + 1) + 8);
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  v116 = (std::__shared_weak_count *)*((_QWORD *)&v190 + 1);
  if (*((_QWORD *)&v190 + 1))
  {
    v117 = (unint64_t *)(*((_QWORD *)&v190 + 1) + 8);
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  if (SHIBYTE(v192) < 0)
    operator delete(v191[0]);
  MIL::Validation::TensorDTypeConstraints::Make(&v231);
  v119 = v231;
  std::string::basic_string[abi:ne180100]<0>(v185, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v185, 0, (uint64_t *)&Scalar);
  v187 = Scalar;
  if (Scalar)
  {
    v120 = (std::__shared_weak_count *)operator new();
    v121 = (std::__shared_weak_count_vtbl *)Scalar;
    v120->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v120->__shared_owners_ = 0;
    v120->__shared_weak_owners_ = 0;
    v120[1].__vftable = v121;
  }
  else
  {
    v120 = 0;
  }
  v188 = v120;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v183, "U");
  (*((void (**)(void **, char **, void **))*v119 + 3))(v119, &v187, v183);
  if (v184 < 0)
    operator delete(v183[0]);
  v122 = v188;
  if (v188)
  {
    p_shared_owners = (unint64_t *)&v188->__shared_owners_;
    do
      v124 = __ldaxr(p_shared_owners);
    while (__stlxr(v124 - 1, p_shared_owners));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v125 = Scalar;
  Scalar = 0;
  if (v125)
    (*(void (**)(char *))(*(_QWORD *)v125 + 8))(v125);
  if (v186 < 0)
    operator delete(v185[0]);
  v126 = v231;
  std::string::basic_string[abi:ne180100]<0>(v179, "indices");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v179, 0, (uint64_t *)&Scalar);
  v181 = Scalar;
  if (Scalar)
  {
    v127 = (std::__shared_weak_count *)operator new();
    v128 = (std::__shared_weak_count_vtbl *)Scalar;
    v127->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v127->__shared_owners_ = 0;
    v127->__shared_weak_owners_ = 0;
    v127[1].__vftable = v128;
  }
  else
  {
    v127 = 0;
  }
  v182 = v127;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v177, "I");
  (*((void (**)(void **, char **, void **))*v126 + 3))(v126, &v181, v177);
  if (v178 < 0)
    operator delete(v177[0]);
  v129 = v182;
  if (v182)
  {
    v130 = (unint64_t *)&v182->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v132 = Scalar;
  Scalar = 0;
  if (v132)
    (*(void (**)(char *))(*(_QWORD *)v132 + 8))(v132);
  if (v180 < 0)
    operator delete(v179[0]);
  v133 = v231;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v175 = Scalar;
  if (Scalar)
  {
    v134 = (std::__shared_weak_count *)operator new();
    v135 = (std::__shared_weak_count_vtbl *)Scalar;
    v134->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v134->__shared_owners_ = 0;
    v134->__shared_weak_owners_ = 0;
    v134[1].__vftable = v135;
  }
  else
  {
    v134 = 0;
  }
  v176 = v134;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v173, "U");
  (*((void (**)(void **, char **, void **))*v133 + 3))(v133, &v175, v173);
  if (v174 < 0)
    operator delete(v173[0]);
  v136 = v176;
  if (v176)
  {
    v137 = (unint64_t *)&v176->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  v139 = Scalar;
  Scalar = 0;
  if (v139)
    (*(void (**)(char *))(*(_QWORD *)v139 + 8))(v139);
  v140 = *a4;
  v171 = v231;
  if (v231)
  {
    v141 = (std::__shared_weak_count *)operator new();
    v142 = v231;
    v141->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v141->__shared_owners_ = 0;
    v141->__shared_weak_owners_ = 0;
    v141[1].__vftable = (std::__shared_weak_count_vtbl *)v142;
  }
  else
  {
    v141 = 0;
  }
  v172 = v141;
  v231 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v140 + 56))(v140, &v171);
  v143 = v172;
  if (v172)
  {
    v144 = (unint64_t *)&v172->__shared_owners_;
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 - 1, v144));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  v146 = v231;
  v231 = 0;
  if (v146)
    (*((void (**)(void **))*v146 + 1))(v146);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v231);
  v147 = v231;
  std::string::basic_string[abi:ne180100]<0>(v167, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v167, 0, (uint64_t *)&Scalar);
  v169 = Scalar;
  if (Scalar)
  {
    v148 = (std::__shared_weak_count *)operator new();
    v149 = (std::__shared_weak_count_vtbl *)Scalar;
    v148->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v148->__shared_owners_ = 0;
    v148->__shared_weak_owners_ = 0;
    v148[1].__vftable = v149;
  }
  else
  {
    v148 = 0;
  }
  v170 = v148;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v165, "D");
  (*((void (**)(void **, char **, _QWORD, void **))*v147 + 3))(v147, &v169, 0, v165);
  if (v166 < 0)
    operator delete(v165[0]);
  v150 = v170;
  if (v170)
  {
    v151 = (unint64_t *)&v170->__shared_owners_;
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
  v153 = Scalar;
  Scalar = 0;
  if (v153)
    (*(void (**)(char *))(*(_QWORD *)v153 + 8))(v153);
  if (v168 < 0)
    operator delete(v167[0]);
  v154 = *a4;
  v163 = v231;
  if (v231)
  {
    v155 = (std::__shared_weak_count *)operator new();
    v156 = v231;
    v155->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v155->__shared_owners_ = 0;
    v155->__shared_weak_owners_ = 0;
    v155[1].__vftable = (std::__shared_weak_count_vtbl *)v156;
  }
  else
  {
    v155 = 0;
  }
  v164 = v155;
  v231 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v154 + 56))(v154, &v163);
  v157 = v164;
  if (v164)
  {
    v158 = (unint64_t *)&v164->__shared_owners_;
    do
      v159 = __ldaxr(v158);
    while (__stlxr(v159 - 1, v158));
    if (!v159)
    {
      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
      std::__shared_weak_count::__release_weak(v157);
    }
  }
  v160 = v231;
  v231 = 0;
  if (v160)
    (*((void (**)(void **))*v160 + 1))(v160);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v200, 0);
  result = (uint64_t)v226;
  if (v226)
  {
    v162 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v226);
    return MEMORY[0x1E0C023A0](v162, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09BD798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58)
{
  uint64_t *v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;

  v61 = *(_QWORD *)(v59 - 176);
  *(_QWORD *)(v59 - 176) = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  v62 = *v58;
  *v58 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v59 - 248), 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::Gather::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  unsigned __int8 *v51;
  void **v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  _QWORD *v56;
  unsigned __int8 *v57;
  void **v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _QWORD *v62;
  unsigned __int8 *v63;
  void **v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  char **v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t *v98;
  char *v99;
  char *v100;
  char *v101;
  __int128 v102;
  char *v103;
  char *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  char **v112;
  _QWORD *v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  void **v126;
  std::__shared_weak_count *v127;
  std::__shared_weak_count_vtbl *v128;
  std::__shared_weak_count *v129;
  unint64_t *p_shared_owners;
  unint64_t v131;
  char *v132;
  void **v133;
  std::__shared_weak_count *v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  char *v139;
  void **v140;
  std::__shared_weak_count *v141;
  std::__shared_weak_count_vtbl *v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  char *v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  void **v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  void **v153;
  void **v154;
  std::__shared_weak_count *v155;
  std::__shared_weak_count_vtbl *v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  char *v160;
  uint64_t v161;
  std::__shared_weak_count *v162;
  void **v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  void **v167;
  uint64_t result;
  uint64_t v169;
  void **v170;
  std::__shared_weak_count *v171;
  void *v172[2];
  char v173;
  void *v174[2];
  char v175;
  char *v176;
  std::__shared_weak_count *v177;
  void **v178;
  std::__shared_weak_count *v179;
  void *v180[2];
  char v181;
  char *v182;
  std::__shared_weak_count *v183;
  void *v184[2];
  char v185;
  void *v186[2];
  char v187;
  char *v188;
  std::__shared_weak_count *v189;
  void *v190[2];
  char v191;
  void *v192[2];
  char v193;
  char *v194;
  std::__shared_weak_count *v195;
  __int128 v196;
  __int128 v197;
  void *v198[2];
  uint64_t v199;
  void *v200;
  void *v201;
  _QWORD *v202;
  __n128 v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  char **v207;
  __n128 v208;
  __n128 v209;
  __n128 v210;
  __n128 v211;
  void *__p;
  void *v213;
  _QWORD *v214;
  void *v215;
  void *v216;
  _QWORD *v217;
  void *v218;
  void *v219;
  _QWORD *v220;
  void *v221;
  void *v222;
  _QWORD *v223;
  void *v224;
  void *v225;
  _QWORD *v226;
  void *v227;
  void *v228;
  _QWORD *v229;
  void *v230;
  void *v231;
  _QWORD *v232;
  __n128 v233;
  _QWORD *v234;
  _QWORD v235[3];
  _QWORD *v236;
  _BYTE v237[24];
  _BYTE *v238;
  _QWORD v239[3];
  _QWORD *v240;
  void **v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  char *Scalar;
  char *v250;
  char *v251;
  char *v252;
  char **v253;
  uint64_t v254;

  v254 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v234 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (char *)operator new(0x10uLL);
  v250 = v9 + 16;
  v251 = v9 + 16;
  *(_QWORD *)v9 = v7;
  *((_QWORD *)v9 + 1) = v8;
  Scalar = v9;
  v241 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v232 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v230 = v12;
  v231 = v12 + 2;
  v242 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v230);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v229 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  v227 = v15;
  v228 = v15 + 2;
  v243 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v227);
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(0x10uLL);
  v226 = v18 + 2;
  *v18 = v16;
  v18[1] = v17;
  v224 = v18;
  v225 = v18 + 2;
  v244 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v224);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(0x10uLL);
  v223 = v21 + 2;
  *v21 = v19;
  v21[1] = v20;
  v221 = v21;
  v222 = v21 + 2;
  v245 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v221);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(0x10uLL);
  v220 = v24 + 2;
  *v24 = v22;
  v24[1] = v23;
  v218 = v24;
  v219 = v24 + 2;
  v246 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v218);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(0x10uLL);
  v216 = v27 + 2;
  v217 = v27 + 2;
  *v27 = v25;
  v27[1] = v26;
  v215 = v27;
  v247 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v215);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = operator new(0x10uLL);
  v213 = v30 + 2;
  v214 = v30 + 2;
  *v30 = v28;
  v30[1] = v29;
  __p = v30;
  v248 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v241, 8, &v233);
  MIL::IRParameter::Make(&v233, (uint64_t *)&v200);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v200);
  v31 = v200;
  v200 = 0;
  if (v31)
    (*(void (**)(void *))(*(_QWORD *)v31 + 8))(v31);
  v32 = (std::__shared_weak_count *)v233.n128_u64[1];
  if (v233.n128_u64[1])
  {
    v33 = (unint64_t *)(v233.n128_u64[1] + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (__p)
  {
    v213 = __p;
    operator delete(__p);
  }
  if (v215)
  {
    v216 = v215;
    operator delete(v215);
  }
  if (v218)
  {
    v219 = v218;
    operator delete(v218);
  }
  if (v221)
  {
    v222 = v221;
    operator delete(v221);
  }
  if (v224)
  {
    v225 = v224;
    operator delete(v224);
  }
  if (v227)
  {
    v228 = v227;
    operator delete(v227);
  }
  if (v230)
  {
    v231 = v230;
    operator delete(v230);
  }
  if (Scalar)
  {
    v250 = Scalar;
    operator delete(Scalar);
  }
  v35 = v234;
  v36 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v37 = (char *)operator new(8uLL);
  Scalar = v37;
  *(_QWORD *)v37 = v36;
  v250 = v37 + 8;
  v251 = v37 + 8;
  v241 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&Scalar);
  v38 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v39 = operator new(8uLL);
  v230 = v39;
  *v39 = v38;
  v232 = v39 + 1;
  v231 = v39 + 1;
  v242 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v230);
  v40 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v41 = operator new(8uLL);
  v227 = v41;
  *v41 = v40;
  v229 = v41 + 1;
  v228 = v41 + 1;
  v243 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v227);
  v42 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v43 = operator new(8uLL);
  v224 = v43;
  *v43 = v42;
  v226 = v43 + 1;
  v225 = v43 + 1;
  v244 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v224);
  v44 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v45 = operator new(8uLL);
  v221 = v45;
  *v45 = v44;
  v223 = v45 + 1;
  v222 = v45 + 1;
  v245 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v221);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v241, 5, &v211);
  MIL::IRParameter::Make(&v211, (uint64_t *)&v218);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v35, "indices", (uint64_t *)&v218);
  v46 = v218;
  v218 = 0;
  if (v46)
    (*(void (**)(void *))(*(_QWORD *)v46 + 8))(v46);
  v47 = (std::__shared_weak_count *)v211.n128_u64[1];
  if (v211.n128_u64[1])
  {
    v48 = (unint64_t *)(v211.n128_u64[1] + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  if (v221)
  {
    v222 = v221;
    operator delete(v221);
  }
  if (v224)
  {
    v225 = v224;
    operator delete(v224);
  }
  if (v227)
  {
    v228 = v227;
    operator delete(v227);
  }
  if (v230)
  {
    v231 = v230;
    operator delete(v230);
  }
  if (Scalar)
  {
    v250 = Scalar;
    operator delete(Scalar);
  }
  v50 = v234;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v210);
  MIL::IRParameter::Make(&v210, (uint64_t *)&v241);
  v51 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v50, "validate_indices", (uint64_t *)&v241);
  v52 = v241;
  v241 = 0;
  if (v52)
    (*((void (**)(void **))*v52 + 1))(v52);
  v53 = (std::__shared_weak_count *)v210.n128_u64[1];
  if (v210.n128_u64[1])
  {
    v54 = (unint64_t *)(v210.n128_u64[1] + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v51 + 5) + 32))(*((_QWORD *)v51 + 5), 1);
  v56 = v234;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v209);
  MIL::IRParameter::Make(&v209, (uint64_t *)&v241);
  v57 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v56, "axis", (uint64_t *)&v241);
  v58 = v241;
  v241 = 0;
  if (v58)
    (*((void (**)(void **))*v58 + 1))(v58);
  v59 = (std::__shared_weak_count *)v209.n128_u64[1];
  if (v209.n128_u64[1])
  {
    v60 = (unint64_t *)(v209.n128_u64[1] + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v57 + 5) + 32))(*((_QWORD *)v57 + 5), 1);
  v62 = v234;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v208);
  MIL::IRParameter::Make(&v208, (uint64_t *)&v241);
  v63 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v62, "batch_dims", (uint64_t *)&v241);
  v64 = v241;
  v241 = 0;
  if (v64)
    (*((void (**)(void **))*v64 + 1))(v64);
  v65 = (std::__shared_weak_count *)v208.n128_u64[1];
  if (v208.n128_u64[1])
  {
    v66 = (unint64_t *)(v208.n128_u64[1] + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 32))(*((_QWORD *)v63 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 48))(*((_QWORD *)v63 + 5), 1);
  v207 = 0;
  v68 = operator new();
  *(_QWORD *)v68 = 0;
  *(_QWORD *)(v68 + 8) = 0;
  *(_QWORD *)(v68 + 16) = 0;
  v241 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v207, (void **)v68);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v241, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v207, 1uLL);
  v69 = v207;
  v70 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v71 = operator new(8uLL);
  v230 = v71;
  *v71 = v70;
  v232 = v71 + 1;
  v231 = v71 + 1;
  v241 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v230);
  v72 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v73 = operator new(8uLL);
  v227 = v73;
  *v73 = v72;
  v229 = v73 + 1;
  v228 = v73 + 1;
  v242 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v227);
  v74 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v75 = operator new(8uLL);
  v224 = v75;
  *v75 = v74;
  v226 = v75 + 1;
  v225 = v75 + 1;
  v243 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v224);
  v76 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v77 = operator new(8uLL);
  v221 = v77;
  *v77 = v76;
  v223 = v77 + 1;
  v222 = v77 + 1;
  v244 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v221);
  v78 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v79 = operator new(8uLL);
  v218 = v79;
  *v79 = v78;
  v220 = v79 + 1;
  v219 = v79 + 1;
  v245 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v218);
  v80 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v81 = operator new(8uLL);
  v215 = v81;
  *v81 = v80;
  v216 = v81 + 1;
  v217 = v81 + 1;
  v246 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v215);
  v82 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v83 = operator new(8uLL);
  __p = v83;
  *v83 = v82;
  v213 = v83 + 1;
  v214 = v83 + 1;
  v247 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&__p);
  v84 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v85 = operator new(8uLL);
  v200 = v85;
  *v85 = v84;
  v201 = v85 + 1;
  v202 = v85 + 1;
  v248 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v200);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v241, 8, &v203);
  MIL::IRParameter::Make(&v203, &v204);
  v86 = v204;
  v205 = v204;
  if (v204)
  {
    v87 = (_QWORD *)operator new();
    v88 = v204;
    *v87 = &unk_1EA99F888;
    v87[1] = 0;
    v87[2] = 0;
    v87[3] = v88;
  }
  else
  {
    v87 = 0;
  }
  v206 = v87;
  v204 = 0;
  v89 = v69[2];
  v90 = v69[1];
  if (v90 >= v89)
  {
    v92 = (v90 - *v69) >> 4;
    v93 = v92 + 1;
    if ((unint64_t)(v92 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v94 = v89 - *v69;
    if (v94 >> 3 > v93)
      v93 = v94 >> 3;
    if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF0)
      v95 = 0xFFFFFFFFFFFFFFFLL;
    else
      v95 = v93;
    v253 = v69 + 2;
    v96 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v69 + 2), v95);
    v98 = (uint64_t *)&v96[16 * v92];
    *v98 = v86;
    v98[1] = (uint64_t)v87;
    v205 = 0;
    v206 = 0;
    v100 = *v69;
    v99 = v69[1];
    if (v99 == *v69)
    {
      v103 = v69[1];
      v101 = &v96[16 * v92];
    }
    else
    {
      v101 = &v96[16 * v92];
      do
      {
        v102 = *((_OWORD *)v99 - 1);
        v99 -= 16;
        *((_OWORD *)v101 - 1) = v102;
        v101 -= 16;
        *(_QWORD *)v99 = 0;
        *((_QWORD *)v99 + 1) = 0;
      }
      while (v99 != v100);
      v103 = *v69;
      v99 = v69[1];
    }
    v91 = (char *)(v98 + 2);
    *v69 = v101;
    Scalar = v103;
    v250 = v103;
    v69[1] = (char *)(v98 + 2);
    v251 = v99;
    v104 = v69[2];
    v69[2] = &v96[16 * v97];
    v252 = v104;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v90 = v86;
    *((_QWORD *)v90 + 1) = v87;
    v91 = v90 + 16;
    v205 = 0;
    v206 = 0;
  }
  v69[1] = v91;
  v105 = v204;
  v204 = 0;
  if (v105)
    (*(void (**)(uint64_t))(*(_QWORD *)v105 + 8))(v105);
  v106 = (std::__shared_weak_count *)v203.n128_u64[1];
  if (v203.n128_u64[1])
  {
    v107 = (unint64_t *)(v203.n128_u64[1] + 8);
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  if (v200)
  {
    v201 = v200;
    operator delete(v200);
  }
  if (__p)
  {
    v213 = __p;
    operator delete(__p);
  }
  if (v215)
  {
    v216 = v215;
    operator delete(v215);
  }
  if (v218)
  {
    v219 = v218;
    operator delete(v218);
  }
  if (v221)
  {
    v222 = v221;
    operator delete(v221);
  }
  if (v224)
  {
    v225 = v224;
    operator delete(v224);
  }
  if (v227)
  {
    v228 = v227;
    operator delete(v227);
  }
  if (v230)
  {
    v231 = v230;
    operator delete(v230);
  }
  *(_OWORD *)v198 = *(_OWORD *)a2;
  v199 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v109 = (uint64_t)v234;
  *(_QWORD *)&v197 = v234;
  if (v234)
  {
    v110 = (_QWORD *)operator new();
    *v110 = &unk_1EA99F8E8;
    v110[1] = 0;
    v110[2] = 0;
    v110[3] = v109;
  }
  else
  {
    v110 = 0;
  }
  *((_QWORD *)&v197 + 1) = v110;
  v234 = 0;
  *(_QWORD *)&v196 = v207;
  if (v207)
  {
    v111 = (_QWORD *)operator new();
    v112 = v207;
    *v111 = &unk_1EA99F948;
    v111[1] = 0;
    v111[2] = 0;
    v111[3] = v112;
  }
  else
  {
    v111 = 0;
  }
  *((_QWORD *)&v196 + 1) = v111;
  v207 = 0;
  v239[0] = &unk_1EA99FAC8;
  v239[1] = MIL::Operators::Common::ios18::CustomValidators::ValidateGather;
  v240 = v239;
  v238 = 0;
  MIL::IROperator::Make((__int128 *)v198, &v197, &v196, (uint64_t)v239, (uint64_t)v237, a3);
  v113 = v238;
  if (v238 == v237)
  {
    v114 = 4;
    v113 = v237;
  }
  else
  {
    if (!v238)
      goto LABEL_113;
    v114 = 5;
  }
  (*(void (**)(void))(*v113 + 8 * v114))();
LABEL_113:
  v115 = v240;
  if (v240 == v239)
  {
    v116 = 4;
    v115 = v239;
    goto LABEL_117;
  }
  if (v240)
  {
    v116 = 5;
LABEL_117:
    (*(void (**)(void))(*v115 + 8 * v116))();
  }
  v117 = (std::__shared_weak_count *)*((_QWORD *)&v196 + 1);
  if (*((_QWORD *)&v196 + 1))
  {
    v118 = (unint64_t *)(*((_QWORD *)&v196 + 1) + 8);
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = (std::__shared_weak_count *)*((_QWORD *)&v197 + 1);
  if (*((_QWORD *)&v197 + 1))
  {
    v121 = (unint64_t *)(*((_QWORD *)&v197 + 1) + 8);
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  if (SHIBYTE(v199) < 0)
    operator delete(v198[0]);
  v123 = *a3;
  v235[0] = &off_1EA99FBD8;
  v235[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceGather;
  v236 = v235;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v123 + 200))(v123, v235);
  v124 = v236;
  if (v236 == v235)
  {
    v125 = 4;
    v124 = v235;
  }
  else
  {
    if (!v236)
      goto LABEL_135;
    v125 = 5;
  }
  (*(void (**)(void))(*v124 + 8 * v125))();
LABEL_135:
  MIL::Validation::TensorDTypeConstraints::Make(&v241);
  v126 = v241;
  std::string::basic_string[abi:ne180100]<0>(v192, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v192, 0, (uint64_t *)&Scalar);
  v194 = Scalar;
  if (Scalar)
  {
    v127 = (std::__shared_weak_count *)operator new();
    v128 = (std::__shared_weak_count_vtbl *)Scalar;
    v127->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v127->__shared_owners_ = 0;
    v127->__shared_weak_owners_ = 0;
    v127[1].__vftable = v128;
  }
  else
  {
    v127 = 0;
  }
  v195 = v127;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v190, "U");
  (*((void (**)(void **, char **, void **))*v126 + 3))(v126, &v194, v190);
  if (v191 < 0)
    operator delete(v190[0]);
  v129 = v195;
  if (v195)
  {
    p_shared_owners = (unint64_t *)&v195->__shared_owners_;
    do
      v131 = __ldaxr(p_shared_owners);
    while (__stlxr(v131 - 1, p_shared_owners));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v132 = Scalar;
  Scalar = 0;
  if (v132)
    (*(void (**)(char *))(*(_QWORD *)v132 + 8))(v132);
  if (v193 < 0)
    operator delete(v192[0]);
  v133 = v241;
  std::string::basic_string[abi:ne180100]<0>(v186, "indices");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v186, 0, (uint64_t *)&Scalar);
  v188 = Scalar;
  if (Scalar)
  {
    v134 = (std::__shared_weak_count *)operator new();
    v135 = (std::__shared_weak_count_vtbl *)Scalar;
    v134->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v134->__shared_owners_ = 0;
    v134->__shared_weak_owners_ = 0;
    v134[1].__vftable = v135;
  }
  else
  {
    v134 = 0;
  }
  v189 = v134;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v184, "I");
  (*((void (**)(void **, char **, void **))*v133 + 3))(v133, &v188, v184);
  if (v185 < 0)
    operator delete(v184[0]);
  v136 = v189;
  if (v189)
  {
    v137 = (unint64_t *)&v189->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  v139 = Scalar;
  Scalar = 0;
  if (v139)
    (*(void (**)(char *))(*(_QWORD *)v139 + 8))(v139);
  if (v187 < 0)
    operator delete(v186[0]);
  v140 = v241;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v182 = Scalar;
  if (Scalar)
  {
    v141 = (std::__shared_weak_count *)operator new();
    v142 = (std::__shared_weak_count_vtbl *)Scalar;
    v141->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v141->__shared_owners_ = 0;
    v141->__shared_weak_owners_ = 0;
    v141[1].__vftable = v142;
  }
  else
  {
    v141 = 0;
  }
  v183 = v141;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v180, "U");
  (*((void (**)(void **, char **, void **))*v140 + 3))(v140, &v182, v180);
  if (v181 < 0)
    operator delete(v180[0]);
  v143 = v183;
  if (v183)
  {
    v144 = (unint64_t *)&v183->__shared_owners_;
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 - 1, v144));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  v146 = Scalar;
  Scalar = 0;
  if (v146)
    (*(void (**)(char *))(*(_QWORD *)v146 + 8))(v146);
  v147 = *a3;
  v178 = v241;
  if (v241)
  {
    v148 = (std::__shared_weak_count *)operator new();
    v149 = v241;
    v148->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v148->__shared_owners_ = 0;
    v148->__shared_weak_owners_ = 0;
    v148[1].__vftable = (std::__shared_weak_count_vtbl *)v149;
  }
  else
  {
    v148 = 0;
  }
  v179 = v148;
  v241 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v147 + 56))(v147, &v178);
  v150 = v179;
  if (v179)
  {
    v151 = (unint64_t *)&v179->__shared_owners_;
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
  v153 = v241;
  v241 = 0;
  if (v153)
    (*((void (**)(void **))*v153 + 1))(v153);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v241);
  v154 = v241;
  std::string::basic_string[abi:ne180100]<0>(v174, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v174, 0, (uint64_t *)&Scalar);
  v176 = Scalar;
  if (Scalar)
  {
    v155 = (std::__shared_weak_count *)operator new();
    v156 = (std::__shared_weak_count_vtbl *)Scalar;
    v155->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v155->__shared_owners_ = 0;
    v155->__shared_weak_owners_ = 0;
    v155[1].__vftable = v156;
  }
  else
  {
    v155 = 0;
  }
  v177 = v155;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v172, "D");
  (*((void (**)(void **, char **, _QWORD, void **))*v154 + 3))(v154, &v176, 0, v172);
  if (v173 < 0)
    operator delete(v172[0]);
  v157 = v177;
  if (v177)
  {
    v158 = (unint64_t *)&v177->__shared_owners_;
    do
      v159 = __ldaxr(v158);
    while (__stlxr(v159 - 1, v158));
    if (!v159)
    {
      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
      std::__shared_weak_count::__release_weak(v157);
    }
  }
  v160 = Scalar;
  Scalar = 0;
  if (v160)
    (*(void (**)(char *))(*(_QWORD *)v160 + 8))(v160);
  if (v175 < 0)
    operator delete(v174[0]);
  v161 = *a3;
  v170 = v241;
  if (v241)
  {
    v162 = (std::__shared_weak_count *)operator new();
    v163 = v241;
    v162->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v162->__shared_owners_ = 0;
    v162->__shared_weak_owners_ = 0;
    v162[1].__vftable = (std::__shared_weak_count_vtbl *)v163;
  }
  else
  {
    v162 = 0;
  }
  v171 = v162;
  v241 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v161 + 56))(v161, &v170);
  v164 = v171;
  if (v171)
  {
    v165 = (unint64_t *)&v171->__shared_owners_;
    do
      v166 = __ldaxr(v165);
    while (__stlxr(v166 - 1, v165));
    if (!v166)
    {
      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
      std::__shared_weak_count::__release_weak(v164);
    }
  }
  v167 = v241;
  v241 = 0;
  if (v167)
    (*((void (**)(void **))*v167 + 1))(v167);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v207, 0);
  result = (uint64_t)v234;
  if (v234)
  {
    v169 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v234);
    return MEMORY[0x1E0C023A0](v169, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09BF184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58)
{
  uint64_t *v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;

  v61 = *(_QWORD *)(v59 - 176);
  *(_QWORD *)(v59 - 176) = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  v62 = *v58;
  *v58 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x288], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::GatherAlongAxis::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  unsigned __int8 *v51;
  void **v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  _QWORD *v56;
  unsigned __int8 *v57;
  void **v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  char **v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t *v92;
  char *v93;
  char *v94;
  char *v95;
  __int128 v96;
  char *v97;
  char *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  char **v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  void **v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count_vtbl *v122;
  std::__shared_weak_count *v123;
  unint64_t *p_shared_owners;
  unint64_t v125;
  char *v126;
  void **v127;
  std::__shared_weak_count *v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  char *v133;
  void **v134;
  std::__shared_weak_count *v135;
  std::__shared_weak_count_vtbl *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  char *v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  void **v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  void **v147;
  void **v148;
  std::__shared_weak_count *v149;
  std::__shared_weak_count_vtbl *v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  char *v154;
  uint64_t v155;
  std::__shared_weak_count *v156;
  void **v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  void **v161;
  uint64_t result;
  uint64_t v163;
  void **v164;
  std::__shared_weak_count *v165;
  void *v166[2];
  char v167;
  void *v168[2];
  char v169;
  char *v170;
  std::__shared_weak_count *v171;
  void **v172;
  std::__shared_weak_count *v173;
  void *v174[2];
  char v175;
  char *v176;
  std::__shared_weak_count *v177;
  void *v178[2];
  char v179;
  void *v180[2];
  char v181;
  char *v182;
  std::__shared_weak_count *v183;
  void *v184[2];
  char v185;
  void *v186[2];
  char v187;
  char *v188;
  std::__shared_weak_count *v189;
  __int128 v190;
  __int128 v191;
  void *v192[2];
  uint64_t v193;
  void *v194;
  void *v195;
  _QWORD *v196;
  __n128 v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  char **v201;
  __n128 v202;
  __n128 v203;
  __n128 v204;
  void *__p;
  void *v206;
  _QWORD *v207;
  void *v208;
  void *v209;
  _QWORD *v210;
  void *v211;
  void *v212;
  _QWORD *v213;
  void *v214;
  void *v215;
  _QWORD *v216;
  void *v217;
  void *v218;
  _QWORD *v219;
  void *v220;
  void *v221;
  _QWORD *v222;
  void *v223;
  void *v224;
  _QWORD *v225;
  __n128 v226;
  _QWORD *v227;
  _QWORD v228[3];
  _QWORD *v229;
  _BYTE v230[24];
  _BYTE *v231;
  _QWORD v232[3];
  _QWORD *v233;
  void **v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  char *Scalar;
  char *v243;
  char *v244;
  char *v245;
  char **v246;
  uint64_t v247;

  v247 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v227 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (char *)operator new(0x10uLL);
  v243 = v9 + 16;
  v244 = v9 + 16;
  *(_QWORD *)v9 = v7;
  *((_QWORD *)v9 + 1) = v8;
  Scalar = v9;
  v234 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v225 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v223 = v12;
  v224 = v12 + 2;
  v235 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v223);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v222 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  v220 = v15;
  v221 = v15 + 2;
  v236 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v220);
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(0x10uLL);
  v219 = v18 + 2;
  *v18 = v16;
  v18[1] = v17;
  v217 = v18;
  v218 = v18 + 2;
  v237 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v217);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(0x10uLL);
  v216 = v21 + 2;
  *v21 = v19;
  v21[1] = v20;
  v214 = v21;
  v215 = v21 + 2;
  v238 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v214);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(0x10uLL);
  v212 = v24 + 2;
  v213 = v24 + 2;
  *v24 = v22;
  v24[1] = v23;
  v211 = v24;
  v239 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v211);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(0x10uLL);
  v209 = v27 + 2;
  v210 = v27 + 2;
  *v27 = v25;
  v27[1] = v26;
  v208 = v27;
  v240 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v208);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = operator new(0x10uLL);
  v206 = v30 + 2;
  v207 = v30 + 2;
  *v30 = v28;
  v30[1] = v29;
  __p = v30;
  v241 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v234, 8, &v226);
  MIL::IRParameter::Make(&v226, (uint64_t *)&v194);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v194);
  v31 = v194;
  v194 = 0;
  if (v31)
    (*(void (**)(void *))(*(_QWORD *)v31 + 8))(v31);
  v32 = (std::__shared_weak_count *)v226.n128_u64[1];
  if (v226.n128_u64[1])
  {
    v33 = (unint64_t *)(v226.n128_u64[1] + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (__p)
  {
    v206 = __p;
    operator delete(__p);
  }
  if (v208)
  {
    v209 = v208;
    operator delete(v208);
  }
  if (v211)
  {
    v212 = v211;
    operator delete(v211);
  }
  if (v214)
  {
    v215 = v214;
    operator delete(v214);
  }
  if (v217)
  {
    v218 = v217;
    operator delete(v217);
  }
  if (v220)
  {
    v221 = v220;
    operator delete(v220);
  }
  if (v223)
  {
    v224 = v223;
    operator delete(v223);
  }
  if (Scalar)
  {
    v243 = Scalar;
    operator delete(Scalar);
  }
  v35 = v227;
  v36 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v37 = (char *)operator new(8uLL);
  Scalar = v37;
  *(_QWORD *)v37 = v36;
  v243 = v37 + 8;
  v244 = v37 + 8;
  v234 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&Scalar);
  v38 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v39 = operator new(8uLL);
  v223 = v39;
  *v39 = v38;
  v225 = v39 + 1;
  v224 = v39 + 1;
  v235 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v223);
  v40 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v41 = operator new(8uLL);
  v220 = v41;
  *v41 = v40;
  v222 = v41 + 1;
  v221 = v41 + 1;
  v236 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v220);
  v42 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v43 = operator new(8uLL);
  v217 = v43;
  *v43 = v42;
  v219 = v43 + 1;
  v218 = v43 + 1;
  v237 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v217);
  v44 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v45 = operator new(8uLL);
  v214 = v45;
  *v45 = v44;
  v216 = v45 + 1;
  v215 = v45 + 1;
  v238 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v214);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v234, 5, &v204);
  MIL::IRParameter::Make(&v204, (uint64_t *)&v211);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v35, "indices", (uint64_t *)&v211);
  v46 = v211;
  v211 = 0;
  if (v46)
    (*(void (**)(void *))(*(_QWORD *)v46 + 8))(v46);
  v47 = (std::__shared_weak_count *)v204.n128_u64[1];
  if (v204.n128_u64[1])
  {
    v48 = (unint64_t *)(v204.n128_u64[1] + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  if (v214)
  {
    v215 = v214;
    operator delete(v214);
  }
  if (v217)
  {
    v218 = v217;
    operator delete(v217);
  }
  if (v220)
  {
    v221 = v220;
    operator delete(v220);
  }
  if (v223)
  {
    v224 = v223;
    operator delete(v223);
  }
  if (Scalar)
  {
    v243 = Scalar;
    operator delete(Scalar);
  }
  v50 = v227;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v203);
  MIL::IRParameter::Make(&v203, (uint64_t *)&v234);
  v51 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v50, "validate_indices", (uint64_t *)&v234);
  v52 = v234;
  v234 = 0;
  if (v52)
    (*((void (**)(void **))*v52 + 1))(v52);
  v53 = (std::__shared_weak_count *)v203.n128_u64[1];
  if (v203.n128_u64[1])
  {
    v54 = (unint64_t *)(v203.n128_u64[1] + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v51 + 5) + 32))(*((_QWORD *)v51 + 5), 1);
  v56 = v227;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v202);
  MIL::IRParameter::Make(&v202, (uint64_t *)&v234);
  v57 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v56, "axis", (uint64_t *)&v234);
  v58 = v234;
  v234 = 0;
  if (v58)
    (*((void (**)(void **))*v58 + 1))(v58);
  v59 = (std::__shared_weak_count *)v202.n128_u64[1];
  if (v202.n128_u64[1])
  {
    v60 = (unint64_t *)(v202.n128_u64[1] + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v57 + 5) + 32))(*((_QWORD *)v57 + 5), 1);
  v201 = 0;
  v62 = operator new();
  *(_QWORD *)v62 = 0;
  *(_QWORD *)(v62 + 8) = 0;
  *(_QWORD *)(v62 + 16) = 0;
  v234 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v201, (void **)v62);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v234, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v201, 1uLL);
  v63 = v201;
  v64 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v65 = operator new(8uLL);
  v223 = v65;
  *v65 = v64;
  v225 = v65 + 1;
  v224 = v65 + 1;
  v234 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v223);
  v66 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v67 = operator new(8uLL);
  v220 = v67;
  *v67 = v66;
  v222 = v67 + 1;
  v221 = v67 + 1;
  v235 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v220);
  v68 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v69 = operator new(8uLL);
  v217 = v69;
  *v69 = v68;
  v219 = v69 + 1;
  v218 = v69 + 1;
  v236 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v217);
  v70 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v71 = operator new(8uLL);
  v214 = v71;
  *v71 = v70;
  v216 = v71 + 1;
  v215 = v71 + 1;
  v237 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v214);
  v72 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v73 = operator new(8uLL);
  v211 = v73;
  *v73 = v72;
  v212 = v73 + 1;
  v213 = v73 + 1;
  v238 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v211);
  v74 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v75 = operator new(8uLL);
  v208 = v75;
  *v75 = v74;
  v209 = v75 + 1;
  v210 = v75 + 1;
  v239 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v208);
  v76 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v77 = operator new(8uLL);
  __p = v77;
  *v77 = v76;
  v206 = v77 + 1;
  v207 = v77 + 1;
  v240 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&__p);
  v78 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v79 = operator new(8uLL);
  v194 = v79;
  *v79 = v78;
  v195 = v79 + 1;
  v196 = v79 + 1;
  v241 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v194);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v234, 8, &v197);
  MIL::IRParameter::Make(&v197, &v198);
  v80 = v198;
  v199 = v198;
  if (v198)
  {
    v81 = (_QWORD *)operator new();
    v82 = v198;
    *v81 = &unk_1EA99F888;
    v81[1] = 0;
    v81[2] = 0;
    v81[3] = v82;
  }
  else
  {
    v81 = 0;
  }
  v200 = v81;
  v198 = 0;
  v83 = v63[2];
  v84 = v63[1];
  if (v84 >= v83)
  {
    v86 = (v84 - *v63) >> 4;
    v87 = v86 + 1;
    if ((unint64_t)(v86 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v88 = v83 - *v63;
    if (v88 >> 3 > v87)
      v87 = v88 >> 3;
    if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF0)
      v89 = 0xFFFFFFFFFFFFFFFLL;
    else
      v89 = v87;
    v246 = v63 + 2;
    v90 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v63 + 2), v89);
    v92 = (uint64_t *)&v90[16 * v86];
    *v92 = v80;
    v92[1] = (uint64_t)v81;
    v199 = 0;
    v200 = 0;
    v94 = *v63;
    v93 = v63[1];
    if (v93 == *v63)
    {
      v97 = v63[1];
      v95 = &v90[16 * v86];
    }
    else
    {
      v95 = &v90[16 * v86];
      do
      {
        v96 = *((_OWORD *)v93 - 1);
        v93 -= 16;
        *((_OWORD *)v95 - 1) = v96;
        v95 -= 16;
        *(_QWORD *)v93 = 0;
        *((_QWORD *)v93 + 1) = 0;
      }
      while (v93 != v94);
      v97 = *v63;
      v93 = v63[1];
    }
    v85 = (char *)(v92 + 2);
    *v63 = v95;
    Scalar = v97;
    v243 = v97;
    v63[1] = (char *)(v92 + 2);
    v244 = v93;
    v98 = v63[2];
    v63[2] = &v90[16 * v91];
    v245 = v98;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v84 = v80;
    *((_QWORD *)v84 + 1) = v81;
    v85 = v84 + 16;
    v199 = 0;
    v200 = 0;
  }
  v63[1] = v85;
  v99 = v198;
  v198 = 0;
  if (v99)
    (*(void (**)(uint64_t))(*(_QWORD *)v99 + 8))(v99);
  v100 = (std::__shared_weak_count *)v197.n128_u64[1];
  if (v197.n128_u64[1])
  {
    v101 = (unint64_t *)(v197.n128_u64[1] + 8);
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  if (v194)
  {
    v195 = v194;
    operator delete(v194);
  }
  if (__p)
  {
    v206 = __p;
    operator delete(__p);
  }
  if (v208)
  {
    v209 = v208;
    operator delete(v208);
  }
  if (v211)
  {
    v212 = v211;
    operator delete(v211);
  }
  if (v214)
  {
    v215 = v214;
    operator delete(v214);
  }
  if (v217)
  {
    v218 = v217;
    operator delete(v217);
  }
  if (v220)
  {
    v221 = v220;
    operator delete(v220);
  }
  if (v223)
  {
    v224 = v223;
    operator delete(v223);
  }
  *(_OWORD *)v192 = *(_OWORD *)a2;
  v193 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v103 = (uint64_t)v227;
  *(_QWORD *)&v191 = v227;
  if (v227)
  {
    v104 = (_QWORD *)operator new();
    *v104 = &unk_1EA99F8E8;
    v104[1] = 0;
    v104[2] = 0;
    v104[3] = v103;
  }
  else
  {
    v104 = 0;
  }
  *((_QWORD *)&v191 + 1) = v104;
  v227 = 0;
  *(_QWORD *)&v190 = v201;
  if (v201)
  {
    v105 = (_QWORD *)operator new();
    v106 = v201;
    *v105 = &unk_1EA99F948;
    v105[1] = 0;
    v105[2] = 0;
    v105[3] = v106;
  }
  else
  {
    v105 = 0;
  }
  *((_QWORD *)&v190 + 1) = v105;
  v201 = 0;
  v232[0] = &unk_1EA99FAC8;
  v232[1] = MIL::Operators::Common::ios18::CustomValidators::ValidateGatherAlongAxis;
  v233 = v232;
  v231 = 0;
  MIL::IROperator::Make((__int128 *)v192, &v191, &v190, (uint64_t)v232, (uint64_t)v230, a3);
  v107 = v231;
  if (v231 == v230)
  {
    v108 = 4;
    v107 = v230;
  }
  else
  {
    if (!v231)
      goto LABEL_106;
    v108 = 5;
  }
  (*(void (**)(void))(*v107 + 8 * v108))();
LABEL_106:
  v109 = v233;
  if (v233 == v232)
  {
    v110 = 4;
    v109 = v232;
    goto LABEL_110;
  }
  if (v233)
  {
    v110 = 5;
LABEL_110:
    (*(void (**)(void))(*v109 + 8 * v110))();
  }
  v111 = (std::__shared_weak_count *)*((_QWORD *)&v190 + 1);
  if (*((_QWORD *)&v190 + 1))
  {
    v112 = (unint64_t *)(*((_QWORD *)&v190 + 1) + 8);
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = (std::__shared_weak_count *)*((_QWORD *)&v191 + 1);
  if (*((_QWORD *)&v191 + 1))
  {
    v115 = (unint64_t *)(*((_QWORD *)&v191 + 1) + 8);
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  if (SHIBYTE(v193) < 0)
    operator delete(v192[0]);
  v117 = *a3;
  v228[0] = &off_1EA99FBD8;
  v228[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceGatherAlongAxis;
  v229 = v228;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v117 + 200))(v117, v228);
  v118 = v229;
  if (v229 == v228)
  {
    v119 = 4;
    v118 = v228;
  }
  else
  {
    if (!v229)
      goto LABEL_128;
    v119 = 5;
  }
  (*(void (**)(void))(*v118 + 8 * v119))();
LABEL_128:
  MIL::Validation::TensorDTypeConstraints::Make(&v234);
  v120 = v234;
  std::string::basic_string[abi:ne180100]<0>(v186, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v186, 0, (uint64_t *)&Scalar);
  v188 = Scalar;
  if (Scalar)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v122 = (std::__shared_weak_count_vtbl *)Scalar;
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = v122;
  }
  else
  {
    v121 = 0;
  }
  v189 = v121;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v184, "U");
  (*((void (**)(void **, char **, void **))*v120 + 3))(v120, &v188, v184);
  if (v185 < 0)
    operator delete(v184[0]);
  v123 = v189;
  if (v189)
  {
    p_shared_owners = (unint64_t *)&v189->__shared_owners_;
    do
      v125 = __ldaxr(p_shared_owners);
    while (__stlxr(v125 - 1, p_shared_owners));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = Scalar;
  Scalar = 0;
  if (v126)
    (*(void (**)(char *))(*(_QWORD *)v126 + 8))(v126);
  if (v187 < 0)
    operator delete(v186[0]);
  v127 = v234;
  std::string::basic_string[abi:ne180100]<0>(v180, "indices");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v180, 0, (uint64_t *)&Scalar);
  v182 = Scalar;
  if (Scalar)
  {
    v128 = (std::__shared_weak_count *)operator new();
    v129 = (std::__shared_weak_count_vtbl *)Scalar;
    v128->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v128->__shared_owners_ = 0;
    v128->__shared_weak_owners_ = 0;
    v128[1].__vftable = v129;
  }
  else
  {
    v128 = 0;
  }
  v183 = v128;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v178, "I");
  (*((void (**)(void **, char **, void **))*v127 + 3))(v127, &v182, v178);
  if (v179 < 0)
    operator delete(v178[0]);
  v130 = v183;
  if (v183)
  {
    v131 = (unint64_t *)&v183->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = Scalar;
  Scalar = 0;
  if (v133)
    (*(void (**)(char *))(*(_QWORD *)v133 + 8))(v133);
  if (v181 < 0)
    operator delete(v180[0]);
  v134 = v234;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v176 = Scalar;
  if (Scalar)
  {
    v135 = (std::__shared_weak_count *)operator new();
    v136 = (std::__shared_weak_count_vtbl *)Scalar;
    v135->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v135->__shared_owners_ = 0;
    v135->__shared_weak_owners_ = 0;
    v135[1].__vftable = v136;
  }
  else
  {
    v135 = 0;
  }
  v177 = v135;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v174, "U");
  (*((void (**)(void **, char **, void **))*v134 + 3))(v134, &v176, v174);
  if (v175 < 0)
    operator delete(v174[0]);
  v137 = v177;
  if (v177)
  {
    v138 = (unint64_t *)&v177->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v140 = Scalar;
  Scalar = 0;
  if (v140)
    (*(void (**)(char *))(*(_QWORD *)v140 + 8))(v140);
  v141 = *a3;
  v172 = v234;
  if (v234)
  {
    v142 = (std::__shared_weak_count *)operator new();
    v143 = v234;
    v142->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v142->__shared_owners_ = 0;
    v142->__shared_weak_owners_ = 0;
    v142[1].__vftable = (std::__shared_weak_count_vtbl *)v143;
  }
  else
  {
    v142 = 0;
  }
  v173 = v142;
  v234 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v141 + 56))(v141, &v172);
  v144 = v173;
  if (v173)
  {
    v145 = (unint64_t *)&v173->__shared_owners_;
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
    }
  }
  v147 = v234;
  v234 = 0;
  if (v147)
    (*((void (**)(void **))*v147 + 1))(v147);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v234);
  v148 = v234;
  std::string::basic_string[abi:ne180100]<0>(v168, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v168, 0, (uint64_t *)&Scalar);
  v170 = Scalar;
  if (Scalar)
  {
    v149 = (std::__shared_weak_count *)operator new();
    v150 = (std::__shared_weak_count_vtbl *)Scalar;
    v149->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v149->__shared_owners_ = 0;
    v149->__shared_weak_owners_ = 0;
    v149[1].__vftable = v150;
  }
  else
  {
    v149 = 0;
  }
  v171 = v149;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v166, "D");
  (*((void (**)(void **, char **, _QWORD, void **))*v148 + 3))(v148, &v170, 0, v166);
  if (v167 < 0)
    operator delete(v166[0]);
  v151 = v171;
  if (v171)
  {
    v152 = (unint64_t *)&v171->__shared_owners_;
    do
      v153 = __ldaxr(v152);
    while (__stlxr(v153 - 1, v152));
    if (!v153)
    {
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
    }
  }
  v154 = Scalar;
  Scalar = 0;
  if (v154)
    (*(void (**)(char *))(*(_QWORD *)v154 + 8))(v154);
  if (v169 < 0)
    operator delete(v168[0]);
  v155 = *a3;
  v164 = v234;
  if (v234)
  {
    v156 = (std::__shared_weak_count *)operator new();
    v157 = v234;
    v156->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v156->__shared_owners_ = 0;
    v156->__shared_weak_owners_ = 0;
    v156[1].__vftable = (std::__shared_weak_count_vtbl *)v157;
  }
  else
  {
    v156 = 0;
  }
  v165 = v156;
  v234 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v155 + 56))(v155, &v164);
  v158 = v165;
  if (v165)
  {
    v159 = (unint64_t *)&v165->__shared_owners_;
    do
      v160 = __ldaxr(v159);
    while (__stlxr(v160 - 1, v159));
    if (!v160)
    {
      ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
      std::__shared_weak_count::__release_weak(v158);
    }
  }
  v161 = v234;
  v234 = 0;
  if (v161)
    (*((void (**)(void **))*v161 + 1))(v161);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v201, 0);
  result = (uint64_t)v227;
  if (v227)
  {
    v163 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v227);
    return MEMORY[0x1E0C023A0](v163, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09C0B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58)
{
  uint64_t *v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;

  v61 = *(_QWORD *)(v59 - 176);
  *(_QWORD *)(v59 - 176) = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  v62 = *v58;
  *v58 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x278], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::GatherNd::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  unsigned __int8 *v51;
  void **v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  _QWORD *v56;
  unsigned __int8 *v57;
  void **v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  char **v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t *v92;
  char *v93;
  char *v94;
  char *v95;
  __int128 v96;
  char *v97;
  char *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  char **v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  void **v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count_vtbl *v122;
  std::__shared_weak_count *v123;
  unint64_t *p_shared_owners;
  unint64_t v125;
  char *v126;
  void **v127;
  std::__shared_weak_count *v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  char *v133;
  void **v134;
  std::__shared_weak_count *v135;
  std::__shared_weak_count_vtbl *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  char *v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  void **v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  void **v147;
  void **v148;
  std::__shared_weak_count *v149;
  std::__shared_weak_count_vtbl *v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  char *v154;
  uint64_t v155;
  std::__shared_weak_count *v156;
  void **v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  void **v161;
  uint64_t result;
  uint64_t v163;
  void **v164;
  std::__shared_weak_count *v165;
  void *v166[2];
  char v167;
  void *v168[2];
  char v169;
  char *v170;
  std::__shared_weak_count *v171;
  void **v172;
  std::__shared_weak_count *v173;
  void *v174[2];
  char v175;
  char *v176;
  std::__shared_weak_count *v177;
  void *v178[2];
  char v179;
  void *v180[2];
  char v181;
  char *v182;
  std::__shared_weak_count *v183;
  void *v184[2];
  char v185;
  void *v186[2];
  char v187;
  char *v188;
  std::__shared_weak_count *v189;
  __int128 v190;
  __int128 v191;
  void *v192[2];
  uint64_t v193;
  void *v194;
  void *v195;
  _QWORD *v196;
  __n128 v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  char **v201;
  __n128 v202;
  __n128 v203;
  __n128 v204;
  void *__p;
  void *v206;
  _QWORD *v207;
  void *v208;
  void *v209;
  _QWORD *v210;
  void *v211;
  void *v212;
  _QWORD *v213;
  void *v214;
  void *v215;
  _QWORD *v216;
  void *v217;
  void *v218;
  _QWORD *v219;
  void *v220;
  void *v221;
  _QWORD *v222;
  void *v223;
  void *v224;
  _QWORD *v225;
  __n128 v226;
  _QWORD *v227;
  _QWORD v228[3];
  _QWORD *v229;
  _BYTE v230[24];
  _BYTE *v231;
  _QWORD v232[3];
  _QWORD *v233;
  void **v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  char *Scalar;
  char *v243;
  char *v244;
  char *v245;
  char **v246;
  uint64_t v247;

  v247 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v227 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (char *)operator new(0x10uLL);
  v243 = v9 + 16;
  v244 = v9 + 16;
  *(_QWORD *)v9 = v7;
  *((_QWORD *)v9 + 1) = v8;
  Scalar = v9;
  v234 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v225 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v223 = v12;
  v224 = v12 + 2;
  v235 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v223);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v222 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  v220 = v15;
  v221 = v15 + 2;
  v236 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v220);
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(0x10uLL);
  v219 = v18 + 2;
  *v18 = v16;
  v18[1] = v17;
  v217 = v18;
  v218 = v18 + 2;
  v237 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v217);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(0x10uLL);
  v216 = v21 + 2;
  *v21 = v19;
  v21[1] = v20;
  v214 = v21;
  v215 = v21 + 2;
  v238 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v214);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(0x10uLL);
  v212 = v24 + 2;
  v213 = v24 + 2;
  *v24 = v22;
  v24[1] = v23;
  v211 = v24;
  v239 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v211);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(0x10uLL);
  v209 = v27 + 2;
  v210 = v27 + 2;
  *v27 = v25;
  v27[1] = v26;
  v208 = v27;
  v240 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v208);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = operator new(0x10uLL);
  v206 = v30 + 2;
  v207 = v30 + 2;
  *v30 = v28;
  v30[1] = v29;
  __p = v30;
  v241 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v234, 8, &v226);
  MIL::IRParameter::Make(&v226, (uint64_t *)&v194);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v194);
  v31 = v194;
  v194 = 0;
  if (v31)
    (*(void (**)(void *))(*(_QWORD *)v31 + 8))(v31);
  v32 = (std::__shared_weak_count *)v226.n128_u64[1];
  if (v226.n128_u64[1])
  {
    v33 = (unint64_t *)(v226.n128_u64[1] + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (__p)
  {
    v206 = __p;
    operator delete(__p);
  }
  if (v208)
  {
    v209 = v208;
    operator delete(v208);
  }
  if (v211)
  {
    v212 = v211;
    operator delete(v211);
  }
  if (v214)
  {
    v215 = v214;
    operator delete(v214);
  }
  if (v217)
  {
    v218 = v217;
    operator delete(v217);
  }
  if (v220)
  {
    v221 = v220;
    operator delete(v220);
  }
  if (v223)
  {
    v224 = v223;
    operator delete(v223);
  }
  if (Scalar)
  {
    v243 = Scalar;
    operator delete(Scalar);
  }
  v35 = v227;
  v36 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v37 = (char *)operator new(8uLL);
  Scalar = v37;
  *(_QWORD *)v37 = v36;
  v243 = v37 + 8;
  v244 = v37 + 8;
  v234 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&Scalar);
  v38 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v39 = operator new(8uLL);
  v223 = v39;
  *v39 = v38;
  v225 = v39 + 1;
  v224 = v39 + 1;
  v235 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v223);
  v40 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v41 = operator new(8uLL);
  v220 = v41;
  *v41 = v40;
  v222 = v41 + 1;
  v221 = v41 + 1;
  v236 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v220);
  v42 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v43 = operator new(8uLL);
  v217 = v43;
  *v43 = v42;
  v219 = v43 + 1;
  v218 = v43 + 1;
  v237 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v217);
  v44 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v45 = operator new(8uLL);
  v214 = v45;
  *v45 = v44;
  v216 = v45 + 1;
  v215 = v45 + 1;
  v238 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v214);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v234, 5, &v204);
  MIL::IRParameter::Make(&v204, (uint64_t *)&v211);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v35, "indices", (uint64_t *)&v211);
  v46 = v211;
  v211 = 0;
  if (v46)
    (*(void (**)(void *))(*(_QWORD *)v46 + 8))(v46);
  v47 = (std::__shared_weak_count *)v204.n128_u64[1];
  if (v204.n128_u64[1])
  {
    v48 = (unint64_t *)(v204.n128_u64[1] + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  if (v214)
  {
    v215 = v214;
    operator delete(v214);
  }
  if (v217)
  {
    v218 = v217;
    operator delete(v217);
  }
  if (v220)
  {
    v221 = v220;
    operator delete(v220);
  }
  if (v223)
  {
    v224 = v223;
    operator delete(v223);
  }
  if (Scalar)
  {
    v243 = Scalar;
    operator delete(Scalar);
  }
  v50 = v227;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v203);
  MIL::IRParameter::Make(&v203, (uint64_t *)&v234);
  v51 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v50, "validate_indices", (uint64_t *)&v234);
  v52 = v234;
  v234 = 0;
  if (v52)
    (*((void (**)(void **))*v52 + 1))(v52);
  v53 = (std::__shared_weak_count *)v203.n128_u64[1];
  if (v203.n128_u64[1])
  {
    v54 = (unint64_t *)(v203.n128_u64[1] + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v51 + 5) + 32))(*((_QWORD *)v51 + 5), 1);
  v56 = v227;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v202);
  MIL::IRParameter::Make(&v202, (uint64_t *)&v234);
  v57 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v56, "batch_dims", (uint64_t *)&v234);
  v58 = v234;
  v234 = 0;
  if (v58)
    (*((void (**)(void **))*v58 + 1))(v58);
  v59 = (std::__shared_weak_count *)v202.n128_u64[1];
  if (v202.n128_u64[1])
  {
    v60 = (unint64_t *)(v202.n128_u64[1] + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v57 + 5) + 32))(*((_QWORD *)v57 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v57 + 5) + 48))(*((_QWORD *)v57 + 5), 1);
  v201 = 0;
  v62 = operator new();
  *(_QWORD *)v62 = 0;
  *(_QWORD *)(v62 + 8) = 0;
  *(_QWORD *)(v62 + 16) = 0;
  v234 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v201, (void **)v62);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v234, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v201, 1uLL);
  v63 = v201;
  v64 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v65 = operator new(8uLL);
  v223 = v65;
  *v65 = v64;
  v225 = v65 + 1;
  v224 = v65 + 1;
  v234 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v223);
  v66 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v67 = operator new(8uLL);
  v220 = v67;
  *v67 = v66;
  v222 = v67 + 1;
  v221 = v67 + 1;
  v235 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v220);
  v68 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v69 = operator new(8uLL);
  v217 = v69;
  *v69 = v68;
  v219 = v69 + 1;
  v218 = v69 + 1;
  v236 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v217);
  v70 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v71 = operator new(8uLL);
  v214 = v71;
  *v71 = v70;
  v216 = v71 + 1;
  v215 = v71 + 1;
  v237 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v214);
  v72 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v73 = operator new(8uLL);
  v211 = v73;
  *v73 = v72;
  v212 = v73 + 1;
  v213 = v73 + 1;
  v238 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v211);
  v74 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v75 = operator new(8uLL);
  v208 = v75;
  *v75 = v74;
  v209 = v75 + 1;
  v210 = v75 + 1;
  v239 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v208);
  v76 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v77 = operator new(8uLL);
  __p = v77;
  *v77 = v76;
  v206 = v77 + 1;
  v207 = v77 + 1;
  v240 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&__p);
  v78 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v79 = operator new(8uLL);
  v194 = v79;
  *v79 = v78;
  v195 = v79 + 1;
  v196 = v79 + 1;
  v241 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v194);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v234, 8, &v197);
  MIL::IRParameter::Make(&v197, &v198);
  v80 = v198;
  v199 = v198;
  if (v198)
  {
    v81 = (_QWORD *)operator new();
    v82 = v198;
    *v81 = &unk_1EA99F888;
    v81[1] = 0;
    v81[2] = 0;
    v81[3] = v82;
  }
  else
  {
    v81 = 0;
  }
  v200 = v81;
  v198 = 0;
  v83 = v63[2];
  v84 = v63[1];
  if (v84 >= v83)
  {
    v86 = (v84 - *v63) >> 4;
    v87 = v86 + 1;
    if ((unint64_t)(v86 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v88 = v83 - *v63;
    if (v88 >> 3 > v87)
      v87 = v88 >> 3;
    if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF0)
      v89 = 0xFFFFFFFFFFFFFFFLL;
    else
      v89 = v87;
    v246 = v63 + 2;
    v90 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v63 + 2), v89);
    v92 = (uint64_t *)&v90[16 * v86];
    *v92 = v80;
    v92[1] = (uint64_t)v81;
    v199 = 0;
    v200 = 0;
    v94 = *v63;
    v93 = v63[1];
    if (v93 == *v63)
    {
      v97 = v63[1];
      v95 = &v90[16 * v86];
    }
    else
    {
      v95 = &v90[16 * v86];
      do
      {
        v96 = *((_OWORD *)v93 - 1);
        v93 -= 16;
        *((_OWORD *)v95 - 1) = v96;
        v95 -= 16;
        *(_QWORD *)v93 = 0;
        *((_QWORD *)v93 + 1) = 0;
      }
      while (v93 != v94);
      v97 = *v63;
      v93 = v63[1];
    }
    v85 = (char *)(v92 + 2);
    *v63 = v95;
    Scalar = v97;
    v243 = v97;
    v63[1] = (char *)(v92 + 2);
    v244 = v93;
    v98 = v63[2];
    v63[2] = &v90[16 * v91];
    v245 = v98;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v84 = v80;
    *((_QWORD *)v84 + 1) = v81;
    v85 = v84 + 16;
    v199 = 0;
    v200 = 0;
  }
  v63[1] = v85;
  v99 = v198;
  v198 = 0;
  if (v99)
    (*(void (**)(uint64_t))(*(_QWORD *)v99 + 8))(v99);
  v100 = (std::__shared_weak_count *)v197.n128_u64[1];
  if (v197.n128_u64[1])
  {
    v101 = (unint64_t *)(v197.n128_u64[1] + 8);
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  if (v194)
  {
    v195 = v194;
    operator delete(v194);
  }
  if (__p)
  {
    v206 = __p;
    operator delete(__p);
  }
  if (v208)
  {
    v209 = v208;
    operator delete(v208);
  }
  if (v211)
  {
    v212 = v211;
    operator delete(v211);
  }
  if (v214)
  {
    v215 = v214;
    operator delete(v214);
  }
  if (v217)
  {
    v218 = v217;
    operator delete(v217);
  }
  if (v220)
  {
    v221 = v220;
    operator delete(v220);
  }
  if (v223)
  {
    v224 = v223;
    operator delete(v223);
  }
  *(_OWORD *)v192 = *(_OWORD *)a2;
  v193 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v103 = (uint64_t)v227;
  *(_QWORD *)&v191 = v227;
  if (v227)
  {
    v104 = (_QWORD *)operator new();
    *v104 = &unk_1EA99F8E8;
    v104[1] = 0;
    v104[2] = 0;
    v104[3] = v103;
  }
  else
  {
    v104 = 0;
  }
  *((_QWORD *)&v191 + 1) = v104;
  v227 = 0;
  *(_QWORD *)&v190 = v201;
  if (v201)
  {
    v105 = (_QWORD *)operator new();
    v106 = v201;
    *v105 = &unk_1EA99F948;
    v105[1] = 0;
    v105[2] = 0;
    v105[3] = v106;
  }
  else
  {
    v105 = 0;
  }
  *((_QWORD *)&v190 + 1) = v105;
  v201 = 0;
  v232[0] = &unk_1EA99FAC8;
  v232[1] = MIL::Operators::Common::ios18::CustomValidators::ValidateGatherNd;
  v233 = v232;
  v231 = 0;
  MIL::IROperator::Make((__int128 *)v192, &v191, &v190, (uint64_t)v232, (uint64_t)v230, a3);
  v107 = v231;
  if (v231 == v230)
  {
    v108 = 4;
    v107 = v230;
  }
  else
  {
    if (!v231)
      goto LABEL_106;
    v108 = 5;
  }
  (*(void (**)(void))(*v107 + 8 * v108))();
LABEL_106:
  v109 = v233;
  if (v233 == v232)
  {
    v110 = 4;
    v109 = v232;
    goto LABEL_110;
  }
  if (v233)
  {
    v110 = 5;
LABEL_110:
    (*(void (**)(void))(*v109 + 8 * v110))();
  }
  v111 = (std::__shared_weak_count *)*((_QWORD *)&v190 + 1);
  if (*((_QWORD *)&v190 + 1))
  {
    v112 = (unint64_t *)(*((_QWORD *)&v190 + 1) + 8);
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = (std::__shared_weak_count *)*((_QWORD *)&v191 + 1);
  if (*((_QWORD *)&v191 + 1))
  {
    v115 = (unint64_t *)(*((_QWORD *)&v191 + 1) + 8);
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  if (SHIBYTE(v193) < 0)
    operator delete(v192[0]);
  v117 = *a3;
  v228[0] = &off_1EA99FBD8;
  v228[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceGatherNd;
  v229 = v228;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v117 + 200))(v117, v228);
  v118 = v229;
  if (v229 == v228)
  {
    v119 = 4;
    v118 = v228;
  }
  else
  {
    if (!v229)
      goto LABEL_128;
    v119 = 5;
  }
  (*(void (**)(void))(*v118 + 8 * v119))();
LABEL_128:
  MIL::Validation::TensorDTypeConstraints::Make(&v234);
  v120 = v234;
  std::string::basic_string[abi:ne180100]<0>(v186, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v186, 0, (uint64_t *)&Scalar);
  v188 = Scalar;
  if (Scalar)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v122 = (std::__shared_weak_count_vtbl *)Scalar;
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = v122;
  }
  else
  {
    v121 = 0;
  }
  v189 = v121;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v184, "U");
  (*((void (**)(void **, char **, void **))*v120 + 3))(v120, &v188, v184);
  if (v185 < 0)
    operator delete(v184[0]);
  v123 = v189;
  if (v189)
  {
    p_shared_owners = (unint64_t *)&v189->__shared_owners_;
    do
      v125 = __ldaxr(p_shared_owners);
    while (__stlxr(v125 - 1, p_shared_owners));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = Scalar;
  Scalar = 0;
  if (v126)
    (*(void (**)(char *))(*(_QWORD *)v126 + 8))(v126);
  if (v187 < 0)
    operator delete(v186[0]);
  v127 = v234;
  std::string::basic_string[abi:ne180100]<0>(v180, "indices");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v180, 0, (uint64_t *)&Scalar);
  v182 = Scalar;
  if (Scalar)
  {
    v128 = (std::__shared_weak_count *)operator new();
    v129 = (std::__shared_weak_count_vtbl *)Scalar;
    v128->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v128->__shared_owners_ = 0;
    v128->__shared_weak_owners_ = 0;
    v128[1].__vftable = v129;
  }
  else
  {
    v128 = 0;
  }
  v183 = v128;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v178, "I");
  (*((void (**)(void **, char **, void **))*v127 + 3))(v127, &v182, v178);
  if (v179 < 0)
    operator delete(v178[0]);
  v130 = v183;
  if (v183)
  {
    v131 = (unint64_t *)&v183->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = Scalar;
  Scalar = 0;
  if (v133)
    (*(void (**)(char *))(*(_QWORD *)v133 + 8))(v133);
  if (v181 < 0)
    operator delete(v180[0]);
  v134 = v234;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v176 = Scalar;
  if (Scalar)
  {
    v135 = (std::__shared_weak_count *)operator new();
    v136 = (std::__shared_weak_count_vtbl *)Scalar;
    v135->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v135->__shared_owners_ = 0;
    v135->__shared_weak_owners_ = 0;
    v135[1].__vftable = v136;
  }
  else
  {
    v135 = 0;
  }
  v177 = v135;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v174, "U");
  (*((void (**)(void **, char **, void **))*v134 + 3))(v134, &v176, v174);
  if (v175 < 0)
    operator delete(v174[0]);
  v137 = v177;
  if (v177)
  {
    v138 = (unint64_t *)&v177->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v140 = Scalar;
  Scalar = 0;
  if (v140)
    (*(void (**)(char *))(*(_QWORD *)v140 + 8))(v140);
  v141 = *a3;
  v172 = v234;
  if (v234)
  {
    v142 = (std::__shared_weak_count *)operator new();
    v143 = v234;
    v142->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v142->__shared_owners_ = 0;
    v142->__shared_weak_owners_ = 0;
    v142[1].__vftable = (std::__shared_weak_count_vtbl *)v143;
  }
  else
  {
    v142 = 0;
  }
  v173 = v142;
  v234 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v141 + 56))(v141, &v172);
  v144 = v173;
  if (v173)
  {
    v145 = (unint64_t *)&v173->__shared_owners_;
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
    }
  }
  v147 = v234;
  v234 = 0;
  if (v147)
    (*((void (**)(void **))*v147 + 1))(v147);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v234);
  v148 = v234;
  std::string::basic_string[abi:ne180100]<0>(v168, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v168, 0, (uint64_t *)&Scalar);
  v170 = Scalar;
  if (Scalar)
  {
    v149 = (std::__shared_weak_count *)operator new();
    v150 = (std::__shared_weak_count_vtbl *)Scalar;
    v149->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v149->__shared_owners_ = 0;
    v149->__shared_weak_owners_ = 0;
    v149[1].__vftable = v150;
  }
  else
  {
    v149 = 0;
  }
  v171 = v149;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v166, "D");
  (*((void (**)(void **, char **, _QWORD, void **))*v148 + 3))(v148, &v170, 0, v166);
  if (v167 < 0)
    operator delete(v166[0]);
  v151 = v171;
  if (v171)
  {
    v152 = (unint64_t *)&v171->__shared_owners_;
    do
      v153 = __ldaxr(v152);
    while (__stlxr(v153 - 1, v152));
    if (!v153)
    {
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
    }
  }
  v154 = Scalar;
  Scalar = 0;
  if (v154)
    (*(void (**)(char *))(*(_QWORD *)v154 + 8))(v154);
  if (v169 < 0)
    operator delete(v168[0]);
  v155 = *a3;
  v164 = v234;
  if (v234)
  {
    v156 = (std::__shared_weak_count *)operator new();
    v157 = v234;
    v156->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v156->__shared_owners_ = 0;
    v156->__shared_weak_owners_ = 0;
    v156[1].__vftable = (std::__shared_weak_count_vtbl *)v157;
  }
  else
  {
    v156 = 0;
  }
  v165 = v156;
  v234 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v155 + 56))(v155, &v164);
  v158 = v165;
  if (v165)
  {
    v159 = (unint64_t *)&v165->__shared_owners_;
    do
      v160 = __ldaxr(v159);
    while (__stlxr(v160 - 1, v159));
    if (!v160)
    {
      ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
      std::__shared_weak_count::__release_weak(v158);
    }
  }
  v161 = v234;
  v234 = 0;
  if (v161)
    (*((void (**)(void **))*v161 + 1))(v161);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v201, 0);
  result = (uint64_t)v227;
  if (v227)
  {
    v163 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v227);
    return MEMORY[0x1E0C023A0](v163, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09C2484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58)
{
  uint64_t *v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;

  v61 = *(_QWORD *)(v59 - 176);
  *(_QWORD *)(v59 - 176) = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  v62 = *v58;
  *v58 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x278], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::Affine::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count_vtbl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count_vtbl *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  void *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  unsigned __int8 *v41;
  void **v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  unsigned __int8 *v47;
  void **v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _QWORD *v52;
  unsigned __int8 *v53;
  void **v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _QWORD *v58;
  unsigned __int8 *v59;
  void **v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  _QWORD *v64;
  unsigned __int8 *v65;
  std::__shared_weak_count_vtbl *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  _QWORD *v70;
  unsigned __int8 *v71;
  void **v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  _QWORD *v76;
  unsigned __int8 *v77;
  void **v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  char **v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t *v111;
  char *v112;
  char *v113;
  char *v114;
  __int128 v115;
  void **v116;
  char *v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  char **v125;
  _QWORD *v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  _OWORD *v136;
  unsigned __int8 *v137;
  void **v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  uint64_t v142;
  std::__shared_weak_count_vtbl *v143;
  std::__shared_weak_count *v144;
  std::__shared_weak_count *v145;
  unint64_t *p_shared_owners;
  unint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  void **v151;
  std::__shared_weak_count *v152;
  std::__shared_weak_count_vtbl *v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count_vtbl *v157;
  void **v158;
  std::__shared_weak_count *v159;
  std::__shared_weak_count_vtbl *v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count_vtbl *v164;
  void **v165;
  std::__shared_weak_count *v166;
  std::__shared_weak_count_vtbl *v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count_vtbl *v171;
  void **v172;
  std::__shared_weak_count *v173;
  std::__shared_weak_count_vtbl *v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count_vtbl *v178;
  uint64_t v179;
  std::__shared_weak_count *v180;
  void **v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  void **v185;
  void **v186;
  std::__shared_weak_count *v187;
  std::__shared_weak_count_vtbl *v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  std::__shared_weak_count_vtbl *v192;
  void **v193;
  std::__shared_weak_count *v194;
  std::__shared_weak_count_vtbl *v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count_vtbl *v199;
  void **v200;
  std::__shared_weak_count *v201;
  std::__shared_weak_count_vtbl *v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  std::__shared_weak_count_vtbl *v206;
  void **v207;
  std::__shared_weak_count *v208;
  std::__shared_weak_count_vtbl *v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  std::__shared_weak_count_vtbl *v213;
  void **v214;
  std::__shared_weak_count *v215;
  std::__shared_weak_count_vtbl *v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  std::__shared_weak_count_vtbl *v220;
  void **v221;
  std::__shared_weak_count *v222;
  std::__shared_weak_count_vtbl *v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  std::__shared_weak_count_vtbl *v227;
  void **v228;
  std::__shared_weak_count *v229;
  std::__shared_weak_count_vtbl *v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  std::__shared_weak_count_vtbl *v234;
  void **v235;
  std::__shared_weak_count *v236;
  std::__shared_weak_count_vtbl *v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  std::__shared_weak_count_vtbl *v241;
  void **v242;
  std::__shared_weak_count *v243;
  std::__shared_weak_count_vtbl *v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  std::__shared_weak_count_vtbl *v248;
  uint64_t v249;
  std::__shared_weak_count *v250;
  void **v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  void **v255;
  void *v256;
  std::__shared_weak_count *v257;
  std::__shared_weak_count_vtbl *v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  void *v262;
  void *v263;
  std::__shared_weak_count *v264;
  std::__shared_weak_count_vtbl *v265;
  uint64_t i;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  void *v270;
  void *v271;
  std::__shared_weak_count *v272;
  std::__shared_weak_count_vtbl *v273;
  uint64_t j;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  unint64_t v277;
  void *v278;
  void *v279;
  std::__shared_weak_count *v280;
  std::__shared_weak_count_vtbl *v281;
  uint64_t k;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  void *v286;
  uint64_t v287;
  std::__shared_weak_count *v288;
  std::__shared_weak_count_vtbl *v289;
  std::__shared_weak_count *v290;
  unint64_t *v291;
  unint64_t v292;
  void *v293;
  uint64_t v294;
  uint64_t result;
  uint64_t v296;
  void *v297;
  std::__shared_weak_count *v298;
  void *v299[2];
  char v300;
  void *v301;
  std::__shared_weak_count *v302;
  void *v303[2];
  char v304;
  void *v305;
  std::__shared_weak_count *v306;
  void *v307[2];
  char v308;
  void *v309;
  std::__shared_weak_count *v310;
  void *v311[2];
  char v312;
  void *v313;
  std::__shared_weak_count *v314;
  void **v315;
  std::__shared_weak_count *v316;
  void *v317[2];
  char v318;
  std::__shared_weak_count_vtbl *v319;
  std::__shared_weak_count *v320;
  void *v321[2];
  char v322;
  std::__shared_weak_count_vtbl *v323;
  std::__shared_weak_count *v324;
  void *v325[2];
  char v326;
  std::__shared_weak_count_vtbl *v327;
  std::__shared_weak_count *v328;
  void *v329[2];
  char v330;
  std::__shared_weak_count_vtbl *v331;
  std::__shared_weak_count *v332;
  void *v333[2];
  char v334;
  void *v335[2];
  char v336;
  std::__shared_weak_count_vtbl *v337;
  std::__shared_weak_count *v338;
  void *v339[2];
  char v340;
  void *v341[2];
  char v342;
  std::__shared_weak_count_vtbl *v343;
  std::__shared_weak_count *v344;
  void *v345[2];
  char v346;
  void *v347[2];
  char v348;
  std::__shared_weak_count_vtbl *v349;
  std::__shared_weak_count *v350;
  void *v351[2];
  char v352;
  void *v353[2];
  char v354;
  std::__shared_weak_count_vtbl *v355;
  std::__shared_weak_count *v356;
  void *v357[2];
  char v358;
  void *v359[2];
  char v360;
  std::__shared_weak_count_vtbl *v361;
  std::__shared_weak_count *v362;
  void **v363;
  std::__shared_weak_count *v364;
  void *v365[2];
  char v366;
  std::__shared_weak_count_vtbl *v367;
  std::__shared_weak_count *v368;
  void *v369[2];
  char v370;
  void *v371[2];
  char v372;
  std::__shared_weak_count_vtbl *v373;
  std::__shared_weak_count *v374;
  void *v375[2];
  char v376;
  void *v377[2];
  char v378;
  std::__shared_weak_count_vtbl *v379;
  std::__shared_weak_count *v380;
  void *v381[2];
  char v382;
  void *v383[2];
  char v384;
  std::__shared_weak_count_vtbl *v385;
  std::__shared_weak_count *v386;
  void *v387;
  std::__shared_weak_count *v388;
  __n128 v389;
  __int128 v390;
  __int128 v391;
  void *v392[2];
  uint64_t v393;
  void *v394;
  void *v395;
  _QWORD *v396;
  __n128 v397;
  uint64_t v398;
  uint64_t v399;
  _QWORD *v400;
  char **v401;
  __n128 v402;
  __n128 v403;
  __n128 v404;
  __n128 v405;
  __n128 v406;
  __n128 v407;
  __n128 v408;
  __n128 v409;
  void *__p;
  void *v411;
  _QWORD *v412;
  void *v413;
  void *v414;
  _QWORD *v415;
  __n128 v416;
  _QWORD *v417;
  void **v418;
  uint64_t v419;
  uint64_t v420;
  _QWORD v421[3];
  uint64_t v422[3];
  uint64_t v423[3];
  uint64_t v424[3];
  _QWORD v425[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_on_zero_shared_weak;
  uint64_t p_on_zero_shared;
  _QWORD v429[3];
  _QWORD *v430;
  _BYTE v431[24];
  _BYTE *v432;
  _QWORD v433[3];
  _QWORD *v434;
  uint64_t v435;

  v435 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v417 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = (std::__shared_weak_count_vtbl *)operator new(0x20uLL);
  p_on_zero_shared_weak = (uint64_t)&v11->__on_zero_shared_weak;
  p_on_zero_shared = (uint64_t)&v11->__on_zero_shared_weak;
  v11->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v11->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  v11->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v9;
  v11->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v10;
  Scalar = v11;
  v418 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, 0);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = operator new(0x20uLL);
  v415 = v16 + 4;
  *v16 = v12;
  v16[1] = v13;
  v16[2] = v14;
  v16[3] = v15;
  v413 = v16;
  v414 = v16 + 4;
  v419 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v413);
  v17 = MIL::IRUnknownDimension::Make(a1, 0);
  v18 = MIL::IRUnknownDimension::Make(a1, 0);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = MIL::IRUnknownDimension::Make(a1, 0);
  v21 = operator new(0x20uLL);
  v412 = v21 + 4;
  *v21 = v17;
  v21[1] = v18;
  v21[2] = v19;
  v21[3] = v20;
  __p = v21;
  v411 = v21 + 4;
  v420 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v418, 3, &v416);
  MIL::IRParameter::Make(&v416, (uint64_t *)&v394);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v394);
  v22 = v394;
  v394 = 0;
  if (v22)
    (*(void (**)(void *))(*(_QWORD *)v22 + 8))(v22);
  v23 = (std::__shared_weak_count *)v416.n128_u64[1];
  if (v416.n128_u64[1])
  {
    v24 = (unint64_t *)(v416.n128_u64[1] + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (__p)
  {
    v411 = __p;
    operator delete(__p);
  }
  if (v413)
  {
    v414 = v413;
    operator delete(v413);
  }
  if (Scalar)
  {
    p_on_zero_shared_weak = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v26 = v417;
  v27 = MIL::IRUnknownDimension::Make(a1, 0);
  v28 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)6);
  v29 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared_weak = (uint64_t)&v29->__on_zero_shared;
  p_on_zero_shared = (uint64_t)&v29->__on_zero_shared;
  v29->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v27;
  v29->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v28;
  Scalar = v29;
  v418 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v30 = MIL::IRUnknownDimension::Make(a1, 0);
  v31 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)6);
  v32 = operator new(0x10uLL);
  v415 = v32 + 2;
  *v32 = v30;
  v32[1] = v31;
  v413 = v32;
  v414 = v32 + 2;
  v419 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v413);
  v33 = MIL::IRUnknownDimension::Make(a1, 0);
  v34 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)6);
  v35 = operator new(0x10uLL);
  v412 = v35 + 2;
  *v35 = v33;
  v35[1] = v34;
  __p = v35;
  v411 = v35 + 2;
  v420 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v418, 3, &v409);
  MIL::IRParameter::Make(&v409, (uint64_t *)&v394);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v26, "transform_matrix", (uint64_t *)&v394);
  v36 = v394;
  v394 = 0;
  if (v36)
    (*(void (**)(void *))(*(_QWORD *)v36 + 8))(v36);
  v37 = (std::__shared_weak_count *)v409.n128_u64[1];
  if (v409.n128_u64[1])
  {
    v38 = (unint64_t *)(v409.n128_u64[1] + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (__p)
  {
    v411 = __p;
    operator delete(__p);
  }
  if (v413)
  {
    v414 = v413;
    operator delete(v413);
  }
  if (Scalar)
  {
    p_on_zero_shared_weak = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v40 = v417;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v408);
  MIL::IRParameter::Make(&v408, (uint64_t *)&v418);
  v41 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v40, "output_height", (uint64_t *)&v418);
  v42 = v418;
  v418 = 0;
  if (v42)
    (*((void (**)(void **))*v42 + 1))(v42);
  v43 = (std::__shared_weak_count *)v408.n128_u64[1];
  if (v408.n128_u64[1])
  {
    v44 = (unint64_t *)(v408.n128_u64[1] + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v41 + 5) + 32))(*((_QWORD *)v41 + 5), 1);
  v46 = v417;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v407);
  MIL::IRParameter::Make(&v407, (uint64_t *)&v418);
  v47 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v46, "output_width", (uint64_t *)&v418);
  v48 = v418;
  v418 = 0;
  if (v48)
    (*((void (**)(void **))*v48 + 1))(v48);
  v49 = (std::__shared_weak_count *)v407.n128_u64[1];
  if (v407.n128_u64[1])
  {
    v50 = (unint64_t *)(v407.n128_u64[1] + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v47 + 5) + 32))(*((_QWORD *)v47 + 5), 1);
  v52 = v417;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v406);
  MIL::IRParameter::Make(&v406, (uint64_t *)&v418);
  v53 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v52, "sampling_mode", (uint64_t *)&v418);
  v54 = v418;
  v418 = 0;
  if (v54)
    (*((void (**)(void **))*v54 + 1))(v54);
  v55 = (std::__shared_weak_count *)v406.n128_u64[1];
  if (v406.n128_u64[1])
  {
    v56 = (unint64_t *)(v406.n128_u64[1] + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v53 + 5) + 32))(*((_QWORD *)v53 + 5), 1);
  v58 = v417;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v405);
  MIL::IRParameter::Make(&v405, (uint64_t *)&v418);
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v58, "padding_mode", (uint64_t *)&v418);
  v60 = v418;
  v418 = 0;
  if (v60)
    (*((void (**)(void **))*v60 + 1))(v60);
  v61 = (std::__shared_weak_count *)v405.n128_u64[1];
  if (v405.n128_u64[1])
  {
    v62 = (unint64_t *)(v405.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 32))(*((_QWORD *)v59 + 5), 1);
  v64 = v417;
  v418 = (void **)MIL::IRTensorValueType::MakeScalar(a1, 7);
  v419 = MIL::IRTensorValueType::MakeScalar(a1, 4);
  v420 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v418, 3, &v404);
  MIL::IRParameter::Make(&v404, (uint64_t *)&Scalar);
  v65 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v64, "padding_value", (uint64_t *)&Scalar);
  v66 = Scalar;
  Scalar = 0;
  if (v66)
    (*((void (**)(std::__shared_weak_count_vtbl *))v66->~__shared_weak_count + 1))(v66);
  v67 = (std::__shared_weak_count *)v404.n128_u64[1];
  if (v404.n128_u64[1])
  {
    v68 = (unint64_t *)(v404.n128_u64[1] + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v65 + 5) + 32))(*((_QWORD *)v65 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v65 + 5) + 48))(*((_QWORD *)v65 + 5), 1);
  v70 = v417;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v403);
  MIL::IRParameter::Make(&v403, (uint64_t *)&v418);
  v71 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v70, "coordinates_mode", (uint64_t *)&v418);
  v72 = v418;
  v418 = 0;
  if (v72)
    (*((void (**)(void **))*v72 + 1))(v72);
  v73 = (std::__shared_weak_count *)v403.n128_u64[1];
  if (v403.n128_u64[1])
  {
    v74 = (unint64_t *)(v403.n128_u64[1] + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v71 + 5) + 32))(*((_QWORD *)v71 + 5), 1);
  v76 = v417;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v402);
  MIL::IRParameter::Make(&v402, (uint64_t *)&v418);
  v77 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v76, "align_corners", (uint64_t *)&v418);
  v78 = v418;
  v418 = 0;
  if (v78)
    (*((void (**)(void **))*v78 + 1))(v78);
  v79 = (std::__shared_weak_count *)v402.n128_u64[1];
  if (v402.n128_u64[1])
  {
    v80 = (unint64_t *)(v402.n128_u64[1] + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v77 + 5) + 32))(*((_QWORD *)v77 + 5), 1);
  v401 = 0;
  v82 = operator new();
  *(_QWORD *)v82 = 0;
  *(_QWORD *)(v82 + 8) = 0;
  *(_QWORD *)(v82 + 16) = 0;
  v418 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v401, (void **)v82);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v418, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v401, 1uLL);
  v83 = v401;
  v84 = MIL::IRUnknownDimension::Make(a1, 0);
  v85 = MIL::IRUnknownDimension::Make(a1, 0);
  v86 = MIL::IRUnknownDimension::Make(a1, 0);
  v87 = MIL::IRUnknownDimension::Make(a1, 0);
  v88 = operator new(0x20uLL);
  v415 = v88 + 4;
  *v88 = v84;
  v88[1] = v85;
  v88[2] = v86;
  v88[3] = v87;
  v413 = v88;
  v414 = v88 + 4;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v413);
  v89 = MIL::IRUnknownDimension::Make(a1, 0);
  v90 = MIL::IRUnknownDimension::Make(a1, 0);
  v91 = MIL::IRUnknownDimension::Make(a1, 0);
  v92 = MIL::IRUnknownDimension::Make(a1, 0);
  v93 = operator new(0x20uLL);
  v412 = v93 + 4;
  *v93 = v89;
  v93[1] = v90;
  v93[2] = v91;
  v93[3] = v92;
  __p = v93;
  v411 = v93 + 4;
  p_on_zero_shared_weak = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v94 = MIL::IRUnknownDimension::Make(a1, 0);
  v95 = MIL::IRUnknownDimension::Make(a1, 0);
  v96 = MIL::IRUnknownDimension::Make(a1, 0);
  v97 = MIL::IRUnknownDimension::Make(a1, 0);
  v98 = operator new(0x20uLL);
  v396 = v98 + 4;
  *v98 = v94;
  v98[1] = v95;
  v98[2] = v96;
  v98[3] = v97;
  v394 = v98;
  v395 = v98 + 4;
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v394);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v397);
  MIL::IRParameter::Make(&v397, &v398);
  v99 = v398;
  v399 = v398;
  if (v398)
  {
    v100 = (_QWORD *)operator new();
    v101 = v398;
    *v100 = &unk_1EA99F888;
    v100[1] = 0;
    v100[2] = 0;
    v100[3] = v101;
  }
  else
  {
    v100 = 0;
  }
  v400 = v100;
  v398 = 0;
  v102 = v83[2];
  v103 = v83[1];
  if (v103 >= v102)
  {
    v105 = (v103 - *v83) >> 4;
    v106 = v105 + 1;
    if ((unint64_t)(v105 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v107 = v102 - *v83;
    if (v107 >> 3 > v106)
      v106 = v107 >> 3;
    if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFF0)
      v108 = 0xFFFFFFFFFFFFFFFLL;
    else
      v108 = v106;
    v421[1] = v83 + 2;
    v109 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v83 + 2), v108);
    v111 = (uint64_t *)&v109[16 * v105];
    *v111 = v99;
    v111[1] = (uint64_t)v100;
    v400 = 0;
    v399 = 0;
    v113 = *v83;
    v112 = v83[1];
    if (v112 == *v83)
    {
      v116 = (void **)v83[1];
      v114 = &v109[16 * v105];
    }
    else
    {
      v114 = &v109[16 * v105];
      do
      {
        v115 = *((_OWORD *)v112 - 1);
        v112 -= 16;
        *((_OWORD *)v114 - 1) = v115;
        v114 -= 16;
        *(_QWORD *)v112 = 0;
        *((_QWORD *)v112 + 1) = 0;
      }
      while (v112 != v113);
      v116 = (void **)*v83;
      v112 = v83[1];
    }
    v104 = (char *)(v111 + 2);
    *v83 = v114;
    v419 = (uint64_t)v116;
    v83[1] = (char *)(v111 + 2);
    v420 = (uint64_t)v112;
    v117 = v83[2];
    v83[2] = &v109[16 * v110];
    v421[0] = v117;
    v418 = v116;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v418);
  }
  else
  {
    *(_QWORD *)v103 = v99;
    *((_QWORD *)v103 + 1) = v100;
    v104 = v103 + 16;
    v400 = 0;
    v399 = 0;
  }
  v83[1] = v104;
  v118 = v398;
  v398 = 0;
  if (v118)
    (*(void (**)(uint64_t))(*(_QWORD *)v118 + 8))(v118);
  v119 = (std::__shared_weak_count *)v397.n128_u64[1];
  if (v397.n128_u64[1])
  {
    v120 = (unint64_t *)(v397.n128_u64[1] + 8);
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  if (v394)
  {
    v395 = v394;
    operator delete(v394);
  }
  if (__p)
  {
    v411 = __p;
    operator delete(__p);
  }
  if (v413)
  {
    v414 = v413;
    operator delete(v413);
  }
  *(_OWORD *)v392 = *(_OWORD *)a2;
  v393 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v122 = (uint64_t)v417;
  *(_QWORD *)&v391 = v417;
  if (v417)
  {
    v123 = (_QWORD *)operator new();
    *v123 = &unk_1EA99F8E8;
    v123[1] = 0;
    v123[2] = 0;
    v123[3] = v122;
  }
  else
  {
    v123 = 0;
  }
  *((_QWORD *)&v391 + 1) = v123;
  v417 = 0;
  *(_QWORD *)&v390 = v401;
  if (v401)
  {
    v124 = (_QWORD *)operator new();
    v125 = v401;
    *v124 = &unk_1EA99F948;
    v124[1] = 0;
    v124[2] = 0;
    v124[3] = v125;
  }
  else
  {
    v124 = 0;
  }
  *((_QWORD *)&v390 + 1) = v124;
  v401 = 0;
  v433[0] = &unk_1EA99FAC8;
  v433[1] = MIL::Operators::Common::ios18::CustomValidators::ValidateAffine;
  v434 = v433;
  v432 = 0;
  MIL::IROperator::Make((__int128 *)v392, &v391, &v390, (uint64_t)v433, (uint64_t)v431, a3);
  v126 = v432;
  if (v432 == v431)
  {
    v127 = 4;
    v126 = v431;
  }
  else
  {
    if (!v432)
      goto LABEL_117;
    v127 = 5;
  }
  (*(void (**)(void))(*v126 + 8 * v127))();
LABEL_117:
  v128 = v434;
  if (v434 == v433)
  {
    v129 = 4;
    v128 = v433;
    goto LABEL_121;
  }
  if (v434)
  {
    v129 = 5;
LABEL_121:
    (*(void (**)(void))(*v128 + 8 * v129))();
  }
  v130 = (std::__shared_weak_count *)*((_QWORD *)&v390 + 1);
  if (*((_QWORD *)&v390 + 1))
  {
    v131 = (unint64_t *)(*((_QWORD *)&v390 + 1) + 8);
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = (std::__shared_weak_count *)*((_QWORD *)&v391 + 1);
  if (*((_QWORD *)&v391 + 1))
  {
    v134 = (unint64_t *)(*((_QWORD *)&v391 + 1) + 8);
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
  if (SHIBYTE(v393) < 0)
    operator delete(v392[0]);
  v413 = 0;
  v136 = (_OWORD *)operator new();
  *v136 = 0u;
  v136[1] = 0u;
  *((_DWORD *)v136 + 8) = 1065353216;
  v413 = v136;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v389);
  MIL::IRParameter::Make(&v389, (uint64_t *)&v418);
  v137 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v136, "minimum_compute_type", (uint64_t *)&v418);
  v138 = v418;
  v418 = 0;
  if (v138)
    (*((void (**)(void **))*v138 + 1))(v138);
  v139 = (std::__shared_weak_count *)v389.n128_u64[1];
  if (v389.n128_u64[1])
  {
    v140 = (unint64_t *)(v389.n128_u64[1] + 8);
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v137 + 5) + 32))(*((_QWORD *)v137 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v137 + 5) + 48))(*((_QWORD *)v137 + 5), 1);
  v142 = *a3;
  v143 = (std::__shared_weak_count_vtbl *)v413;
  v387 = v413;
  if (v413)
  {
    v144 = (std::__shared_weak_count *)operator new();
    v144->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v144->__shared_owners_ = 0;
    v144->__shared_weak_owners_ = 0;
    v144[1].__vftable = v143;
  }
  else
  {
    v144 = 0;
  }
  v388 = v144;
  v413 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v142 + 184))(v142, &v387);
  v145 = v388;
  if (v388)
  {
    p_shared_owners = (unint64_t *)&v388->__shared_owners_;
    do
      v147 = __ldaxr(p_shared_owners);
    while (__stlxr(v147 - 1, p_shared_owners));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  v148 = *a3;
  v429[0] = &off_1EA99FBD8;
  v429[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceAffine;
  v430 = v429;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v148 + 200))(v148, v429);
  v149 = v430;
  if (v430 == v429)
  {
    v150 = 4;
    v149 = v429;
  }
  else
  {
    if (!v430)
      goto LABEL_154;
    v150 = 5;
  }
  (*(void (**)(void))(*v149 + 8 * v150))();
LABEL_154:
  MIL::Validation::TensorDTypeConstraints::Make(&v418);
  v151 = v418;
  std::string::basic_string[abi:ne180100]<0>(v383, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v383, 0, (uint64_t *)&Scalar);
  v385 = Scalar;
  if (Scalar)
  {
    v152 = (std::__shared_weak_count *)operator new();
    v153 = Scalar;
    v152->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v152->__shared_owners_ = 0;
    v152->__shared_weak_owners_ = 0;
    v152[1].__vftable = v153;
  }
  else
  {
    v152 = 0;
  }
  v386 = v152;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v381, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v151 + 3))(v151, &v385, v381);
  if (v382 < 0)
    operator delete(v381[0]);
  v154 = v386;
  if (v386)
  {
    v155 = (unint64_t *)&v386->__shared_owners_;
    do
      v156 = __ldaxr(v155);
    while (__stlxr(v156 - 1, v155));
    if (!v156)
    {
      ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
      std::__shared_weak_count::__release_weak(v154);
    }
  }
  v157 = Scalar;
  Scalar = 0;
  if (v157)
    (*((void (**)(std::__shared_weak_count_vtbl *))v157->~__shared_weak_count + 1))(v157);
  if (v384 < 0)
    operator delete(v383[0]);
  v158 = v418;
  std::string::basic_string[abi:ne180100]<0>(v377, "transform_matrix");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v377, 0, (uint64_t *)&Scalar);
  v379 = Scalar;
  if (Scalar)
  {
    v159 = (std::__shared_weak_count *)operator new();
    v160 = Scalar;
    v159->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v159->__shared_owners_ = 0;
    v159->__shared_weak_owners_ = 0;
    v159[1].__vftable = v160;
  }
  else
  {
    v159 = 0;
  }
  v380 = v159;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v375, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v158 + 3))(v158, &v379, v375);
  if (v376 < 0)
    operator delete(v375[0]);
  v161 = v380;
  if (v380)
  {
    v162 = (unint64_t *)&v380->__shared_owners_;
    do
      v163 = __ldaxr(v162);
    while (__stlxr(v163 - 1, v162));
    if (!v163)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  v164 = Scalar;
  Scalar = 0;
  if (v164)
    (*((void (**)(std::__shared_weak_count_vtbl *))v164->~__shared_weak_count + 1))(v164);
  if (v378 < 0)
    operator delete(v377[0]);
  v165 = v418;
  std::string::basic_string[abi:ne180100]<0>(v371, "padding_value");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v371, 1, (uint64_t *)&Scalar);
  v373 = Scalar;
  if (Scalar)
  {
    v166 = (std::__shared_weak_count *)operator new();
    v167 = Scalar;
    v166->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v166->__shared_owners_ = 0;
    v166->__shared_weak_owners_ = 0;
    v166[1].__vftable = v167;
  }
  else
  {
    v166 = 0;
  }
  v374 = v166;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v369, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v165 + 3))(v165, &v373, v369);
  if (v370 < 0)
    operator delete(v369[0]);
  v168 = v374;
  if (v374)
  {
    v169 = (unint64_t *)&v374->__shared_owners_;
    do
      v170 = __ldaxr(v169);
    while (__stlxr(v170 - 1, v169));
    if (!v170)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
  }
  v171 = Scalar;
  Scalar = 0;
  if (v171)
    (*((void (**)(std::__shared_weak_count_vtbl *))v171->~__shared_weak_count + 1))(v171);
  if (v372 < 0)
    operator delete(v371[0]);
  v172 = v418;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v367 = Scalar;
  if (Scalar)
  {
    v173 = (std::__shared_weak_count *)operator new();
    v174 = Scalar;
    v173->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v173->__shared_owners_ = 0;
    v173->__shared_weak_owners_ = 0;
    v173[1].__vftable = v174;
  }
  else
  {
    v173 = 0;
  }
  v368 = v173;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v365, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v172 + 3))(v172, &v367, v365);
  if (v366 < 0)
    operator delete(v365[0]);
  v175 = v368;
  if (v368)
  {
    v176 = (unint64_t *)&v368->__shared_owners_;
    do
      v177 = __ldaxr(v176);
    while (__stlxr(v177 - 1, v176));
    if (!v177)
    {
      ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
      std::__shared_weak_count::__release_weak(v175);
    }
  }
  v178 = Scalar;
  Scalar = 0;
  if (v178)
    (*((void (**)(std::__shared_weak_count_vtbl *))v178->~__shared_weak_count + 1))(v178);
  v179 = *a3;
  v363 = v418;
  if (v418)
  {
    v180 = (std::__shared_weak_count *)operator new();
    v181 = v418;
    v180->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v180->__shared_owners_ = 0;
    v180->__shared_weak_owners_ = 0;
    v180[1].__vftable = (std::__shared_weak_count_vtbl *)v181;
  }
  else
  {
    v180 = 0;
  }
  v364 = v180;
  v418 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v179 + 56))(v179, &v363);
  v182 = v364;
  if (v364)
  {
    v183 = (unint64_t *)&v364->__shared_owners_;
    do
      v184 = __ldaxr(v183);
    while (__stlxr(v184 - 1, v183));
    if (!v184)
    {
      ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
      std::__shared_weak_count::__release_weak(v182);
    }
  }
  v185 = v418;
  v418 = 0;
  if (v185)
    (*((void (**)(void **))*v185 + 1))(v185);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v418);
  v186 = v418;
  std::string::basic_string[abi:ne180100]<0>(v359, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v359, 0, (uint64_t *)&Scalar);
  v361 = Scalar;
  if (Scalar)
  {
    v187 = (std::__shared_weak_count *)operator new();
    v188 = Scalar;
    v187->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v187->__shared_owners_ = 0;
    v187->__shared_weak_owners_ = 0;
    v187[1].__vftable = v188;
  }
  else
  {
    v187 = 0;
  }
  v362 = v187;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v357, "B");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v186 + 3))(v186, &v361, 0, v357);
  if (v358 < 0)
    operator delete(v357[0]);
  v189 = v362;
  if (v362)
  {
    v190 = (unint64_t *)&v362->__shared_owners_;
    do
      v191 = __ldaxr(v190);
    while (__stlxr(v191 - 1, v190));
    if (!v191)
    {
      ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
      std::__shared_weak_count::__release_weak(v189);
    }
  }
  v192 = Scalar;
  Scalar = 0;
  if (v192)
    (*((void (**)(std::__shared_weak_count_vtbl *))v192->~__shared_weak_count + 1))(v192);
  if (v360 < 0)
    operator delete(v359[0]);
  v193 = v418;
  std::string::basic_string[abi:ne180100]<0>(v353, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v353, 0, (uint64_t *)&Scalar);
  v355 = Scalar;
  if (Scalar)
  {
    v194 = (std::__shared_weak_count *)operator new();
    v195 = Scalar;
    v194->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v194->__shared_owners_ = 0;
    v194->__shared_weak_owners_ = 0;
    v194[1].__vftable = v195;
  }
  else
  {
    v194 = 0;
  }
  v356 = v194;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v351, "C");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v193 + 3))(v193, &v355, 1, v351);
  if (v352 < 0)
    operator delete(v351[0]);
  v196 = v356;
  if (v356)
  {
    v197 = (unint64_t *)&v356->__shared_owners_;
    do
      v198 = __ldaxr(v197);
    while (__stlxr(v198 - 1, v197));
    if (!v198)
    {
      ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
      std::__shared_weak_count::__release_weak(v196);
    }
  }
  v199 = Scalar;
  Scalar = 0;
  if (v199)
    (*((void (**)(std::__shared_weak_count_vtbl *))v199->~__shared_weak_count + 1))(v199);
  if (v354 < 0)
    operator delete(v353[0]);
  v200 = v418;
  std::string::basic_string[abi:ne180100]<0>(v347, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v347, 0, (uint64_t *)&Scalar);
  v349 = Scalar;
  if (Scalar)
  {
    v201 = (std::__shared_weak_count *)operator new();
    v202 = Scalar;
    v201->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v201->__shared_owners_ = 0;
    v201->__shared_weak_owners_ = 0;
    v201[1].__vftable = v202;
  }
  else
  {
    v201 = 0;
  }
  v350 = v201;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v345, "H_in");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v200 + 3))(v200, &v349, 2, v345);
  if (v346 < 0)
    operator delete(v345[0]);
  v203 = v350;
  if (v350)
  {
    v204 = (unint64_t *)&v350->__shared_owners_;
    do
      v205 = __ldaxr(v204);
    while (__stlxr(v205 - 1, v204));
    if (!v205)
    {
      ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
      std::__shared_weak_count::__release_weak(v203);
    }
  }
  v206 = Scalar;
  Scalar = 0;
  if (v206)
    (*((void (**)(std::__shared_weak_count_vtbl *))v206->~__shared_weak_count + 1))(v206);
  if (v348 < 0)
    operator delete(v347[0]);
  v207 = v418;
  std::string::basic_string[abi:ne180100]<0>(v341, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v341, 0, (uint64_t *)&Scalar);
  v343 = Scalar;
  if (Scalar)
  {
    v208 = (std::__shared_weak_count *)operator new();
    v209 = Scalar;
    v208->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v208->__shared_owners_ = 0;
    v208->__shared_weak_owners_ = 0;
    v208[1].__vftable = v209;
  }
  else
  {
    v208 = 0;
  }
  v344 = v208;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v339, "W_in");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v207 + 3))(v207, &v343, 3, v339);
  if (v340 < 0)
    operator delete(v339[0]);
  v210 = v344;
  if (v344)
  {
    v211 = (unint64_t *)&v344->__shared_owners_;
    do
      v212 = __ldaxr(v211);
    while (__stlxr(v212 - 1, v211));
    if (!v212)
    {
      ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
      std::__shared_weak_count::__release_weak(v210);
    }
  }
  v213 = Scalar;
  Scalar = 0;
  if (v213)
    (*((void (**)(std::__shared_weak_count_vtbl *))v213->~__shared_weak_count + 1))(v213);
  if (v342 < 0)
    operator delete(v341[0]);
  v214 = v418;
  std::string::basic_string[abi:ne180100]<0>(v335, "transform_matrix");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v335, 0, (uint64_t *)&Scalar);
  v337 = Scalar;
  if (Scalar)
  {
    v215 = (std::__shared_weak_count *)operator new();
    v216 = Scalar;
    v215->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v215->__shared_owners_ = 0;
    v215->__shared_weak_owners_ = 0;
    v215[1].__vftable = v216;
  }
  else
  {
    v215 = 0;
  }
  v338 = v215;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v333, "D");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v214 + 3))(v214, &v337, 0, v333);
  if (v334 < 0)
    operator delete(v333[0]);
  v217 = v338;
  if (v338)
  {
    v218 = (unint64_t *)&v338->__shared_owners_;
    do
      v219 = __ldaxr(v218);
    while (__stlxr(v219 - 1, v218));
    if (!v219)
    {
      ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
      std::__shared_weak_count::__release_weak(v217);
    }
  }
  v220 = Scalar;
  Scalar = 0;
  if (v220)
    (*((void (**)(std::__shared_weak_count_vtbl *))v220->~__shared_weak_count + 1))(v220);
  if (v336 < 0)
    operator delete(v335[0]);
  v221 = v418;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v331 = Scalar;
  if (Scalar)
  {
    v222 = (std::__shared_weak_count *)operator new();
    v223 = Scalar;
    v222->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v222->__shared_owners_ = 0;
    v222->__shared_weak_owners_ = 0;
    v222[1].__vftable = v223;
  }
  else
  {
    v222 = 0;
  }
  v332 = v222;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v329, "B");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v221 + 3))(v221, &v331, 0, v329);
  if (v330 < 0)
    operator delete(v329[0]);
  v224 = v332;
  if (v332)
  {
    v225 = (unint64_t *)&v332->__shared_owners_;
    do
      v226 = __ldaxr(v225);
    while (__stlxr(v226 - 1, v225));
    if (!v226)
    {
      ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
      std::__shared_weak_count::__release_weak(v224);
    }
  }
  v227 = Scalar;
  Scalar = 0;
  if (v227)
    (*((void (**)(std::__shared_weak_count_vtbl *))v227->~__shared_weak_count + 1))(v227);
  v228 = v418;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v327 = Scalar;
  if (Scalar)
  {
    v229 = (std::__shared_weak_count *)operator new();
    v230 = Scalar;
    v229->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v229->__shared_owners_ = 0;
    v229->__shared_weak_owners_ = 0;
    v229[1].__vftable = v230;
  }
  else
  {
    v229 = 0;
  }
  v328 = v229;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v325, "C");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v228 + 3))(v228, &v327, 1, v325);
  if (v326 < 0)
    operator delete(v325[0]);
  v231 = v328;
  if (v328)
  {
    v232 = (unint64_t *)&v328->__shared_owners_;
    do
      v233 = __ldaxr(v232);
    while (__stlxr(v233 - 1, v232));
    if (!v233)
    {
      ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
      std::__shared_weak_count::__release_weak(v231);
    }
  }
  v234 = Scalar;
  Scalar = 0;
  if (v234)
    (*((void (**)(std::__shared_weak_count_vtbl *))v234->~__shared_weak_count + 1))(v234);
  v235 = v418;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v323 = Scalar;
  if (Scalar)
  {
    v236 = (std::__shared_weak_count *)operator new();
    v237 = Scalar;
    v236->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v236->__shared_owners_ = 0;
    v236->__shared_weak_owners_ = 0;
    v236[1].__vftable = v237;
  }
  else
  {
    v236 = 0;
  }
  v324 = v236;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v321, "H_out");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v235 + 3))(v235, &v323, 2, v321);
  if (v322 < 0)
    operator delete(v321[0]);
  v238 = v324;
  if (v324)
  {
    v239 = (unint64_t *)&v324->__shared_owners_;
    do
      v240 = __ldaxr(v239);
    while (__stlxr(v240 - 1, v239));
    if (!v240)
    {
      ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
      std::__shared_weak_count::__release_weak(v238);
    }
  }
  v241 = Scalar;
  Scalar = 0;
  if (v241)
    (*((void (**)(std::__shared_weak_count_vtbl *))v241->~__shared_weak_count + 1))(v241);
  v242 = v418;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v319 = Scalar;
  if (Scalar)
  {
    v243 = (std::__shared_weak_count *)operator new();
    v244 = Scalar;
    v243->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v243->__shared_owners_ = 0;
    v243->__shared_weak_owners_ = 0;
    v243[1].__vftable = v244;
  }
  else
  {
    v243 = 0;
  }
  v320 = v243;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v317, "W_out");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v242 + 3))(v242, &v319, 3, v317);
  if (v318 < 0)
    operator delete(v317[0]);
  v245 = v320;
  if (v320)
  {
    v246 = (unint64_t *)&v320->__shared_owners_;
    do
      v247 = __ldaxr(v246);
    while (__stlxr(v247 - 1, v246));
    if (!v247)
    {
      ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
      std::__shared_weak_count::__release_weak(v245);
    }
  }
  v248 = Scalar;
  Scalar = 0;
  if (v248)
    (*((void (**)(std::__shared_weak_count_vtbl *))v248->~__shared_weak_count + 1))(v248);
  v249 = *a3;
  v315 = v418;
  if (v418)
  {
    v250 = (std::__shared_weak_count *)operator new();
    v251 = v418;
    v250->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v250->__shared_owners_ = 0;
    v250->__shared_weak_owners_ = 0;
    v250[1].__vftable = (std::__shared_weak_count_vtbl *)v251;
  }
  else
  {
    v250 = 0;
  }
  v316 = v250;
  v418 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v249 + 56))(v249, &v315);
  v252 = v316;
  if (v316)
  {
    v253 = (unint64_t *)&v316->__shared_owners_;
    do
      v254 = __ldaxr(v253);
    while (__stlxr(v254 - 1, v253));
    if (!v254)
    {
      ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
      std::__shared_weak_count::__release_weak(v252);
    }
  }
  v255 = v418;
  v418 = 0;
  if (v255)
    (*((void (**)(void **))*v255 + 1))(v255);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v256 = __p;
  std::string::basic_string[abi:ne180100]<0>(v311, "sampling_mode");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v311, 0, (uint64_t *)&v394);
  v313 = v394;
  if (v394)
  {
    v257 = (std::__shared_weak_count *)operator new();
    v258 = (std::__shared_weak_count_vtbl *)v394;
    v257->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v257->__shared_owners_ = 0;
    v257->__shared_weak_owners_ = 0;
    v257[1].__vftable = v258;
  }
  else
  {
    v257 = 0;
  }
  v314 = v257;
  v394 = 0;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "bilinear");
  std::unordered_set<std::string>::unordered_set((uint64_t)&v418, (unsigned __int8 *)&Scalar, 1);
  (*(void (**)(void *, void **, void ***, uint64_t))(*(_QWORD *)v256 + 24))(v256, &v313, &v418, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v418);
  if (SHIBYTE(p_on_zero_shared) < 0)
    operator delete(Scalar);
  v259 = v314;
  if (v314)
  {
    v260 = (unint64_t *)&v314->__shared_owners_;
    do
      v261 = __ldaxr(v260);
    while (__stlxr(v261 - 1, v260));
    if (!v261)
    {
      ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
      std::__shared_weak_count::__release_weak(v259);
    }
  }
  v262 = v394;
  v394 = 0;
  if (v262)
    (*(void (**)(void *))(*(_QWORD *)v262 + 8))(v262);
  if (v312 < 0)
    operator delete(v311[0]);
  v263 = __p;
  std::string::basic_string[abi:ne180100]<0>(v307, "padding_mode");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v307, 0, (uint64_t *)&v394);
  v309 = v394;
  if (v394)
  {
    v264 = (std::__shared_weak_count *)operator new();
    v265 = (std::__shared_weak_count_vtbl *)v394;
    v264->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v264->__shared_owners_ = 0;
    v264->__shared_weak_owners_ = 0;
    v264[1].__vftable = v265;
  }
  else
  {
    v264 = 0;
  }
  v310 = v264;
  v394 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v418, "border");
  std::string::basic_string[abi:ne180100]<0>(v421, "constant");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v418, 2);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v263 + 24))(v263, &v309, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v421[i + 2]) < 0)
      operator delete((void *)v421[i]);
  }
  v267 = v310;
  if (v310)
  {
    v268 = (unint64_t *)&v310->__shared_owners_;
    do
      v269 = __ldaxr(v268);
    while (__stlxr(v269 - 1, v268));
    if (!v269)
    {
      ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
      std::__shared_weak_count::__release_weak(v267);
    }
  }
  v270 = v394;
  v394 = 0;
  if (v270)
    (*(void (**)(void *))(*(_QWORD *)v270 + 8))(v270);
  if (v308 < 0)
    operator delete(v307[0]);
  v271 = __p;
  std::string::basic_string[abi:ne180100]<0>(v303, "coordinates_mode");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v303, 0, (uint64_t *)&v394);
  v305 = v394;
  if (v394)
  {
    v272 = (std::__shared_weak_count *)operator new();
    v273 = (std::__shared_weak_count_vtbl *)v394;
    v272->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v272->__shared_owners_ = 0;
    v272->__shared_weak_owners_ = 0;
    v272[1].__vftable = v273;
  }
  else
  {
    v272 = 0;
  }
  v306 = v272;
  v394 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v418, "normalized_minus_one_to_one");
  std::string::basic_string[abi:ne180100]<0>(v421, "unnormalized");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v418, 2);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v271 + 24))(v271, &v305, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -6; j -= 3)
  {
    if (SHIBYTE(v421[j + 2]) < 0)
      operator delete((void *)v421[j]);
  }
  v275 = v306;
  if (v306)
  {
    v276 = (unint64_t *)&v306->__shared_owners_;
    do
      v277 = __ldaxr(v276);
    while (__stlxr(v277 - 1, v276));
    if (!v277)
    {
      ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
      std::__shared_weak_count::__release_weak(v275);
    }
  }
  v278 = v394;
  v394 = 0;
  if (v278)
    (*(void (**)(void *))(*(_QWORD *)v278 + 8))(v278);
  if (v304 < 0)
    operator delete(v303[0]);
  v279 = __p;
  std::string::basic_string[abi:ne180100]<0>(v299, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v299, 1, (uint64_t *)&v394);
  v301 = v394;
  if (v394)
  {
    v280 = (std::__shared_weak_count *)operator new();
    v281 = (std::__shared_weak_count_vtbl *)v394;
    v280->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v280->__shared_owners_ = 0;
    v280->__shared_weak_owners_ = 0;
    v280[1].__vftable = v281;
  }
  else
  {
    v280 = 0;
  }
  v302 = v280;
  v394 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v418, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v421, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v422, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v423, "int32");
  std::string::basic_string[abi:ne180100]<0>(v424, "int8");
  std::string::basic_string[abi:ne180100]<0>(v425, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v418, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v279 + 24))(v279, &v301, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (k = 0; k != -18; k -= 3)
  {
    if (SHIBYTE(v425[k + 2]) < 0)
      operator delete((void *)v425[k]);
  }
  v283 = v302;
  if (v302)
  {
    v284 = (unint64_t *)&v302->__shared_owners_;
    do
      v285 = __ldaxr(v284);
    while (__stlxr(v285 - 1, v284));
    if (!v285)
    {
      ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
      std::__shared_weak_count::__release_weak(v283);
    }
  }
  v286 = v394;
  v394 = 0;
  if (v286)
    (*(void (**)(void *))(*(_QWORD *)v286 + 8))(v286);
  if (v300 < 0)
    operator delete(v299[0]);
  v287 = *a3;
  v297 = __p;
  if (__p)
  {
    v288 = (std::__shared_weak_count *)operator new();
    v289 = (std::__shared_weak_count_vtbl *)__p;
    v288->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v288->__shared_owners_ = 0;
    v288->__shared_weak_owners_ = 0;
    v288[1].__vftable = v289;
  }
  else
  {
    v288 = 0;
  }
  v298 = v288;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v287 + 56))(v287, &v297);
  v290 = v298;
  if (v298)
  {
    v291 = (unint64_t *)&v298->__shared_owners_;
    do
      v292 = __ldaxr(v291);
    while (__stlxr(v292 - 1, v291));
    if (!v292)
    {
      ((void (*)(std::__shared_weak_count *))v290->__on_zero_shared)(v290);
      std::__shared_weak_count::__release_weak(v290);
    }
  }
  v293 = __p;
  __p = 0;
  if (v293)
    (*(void (**)(void *))(*(_QWORD *)v293 + 8))(v293);
  if (v413)
  {
    v294 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v413);
    MEMORY[0x1E0C023A0](v294, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v401, 0);
  result = (uint64_t)v417;
  if (v417)
  {
    v296 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v417);
    return MEMORY[0x1E0C023A0](v296, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09C4F4C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  unint64_t v3;
  uint64_t v4;

  v3 = STACK[0x4C8];
  STACK[0x4C8] = 0;
  if (v3)
    (*(void (**)(unint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x4E0], 0);
  v4 = *v1;
  *v1 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x440], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x508], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::CropResize::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count_vtbl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count_vtbl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  void *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count_vtbl *v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count_vtbl *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  void *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  std::__shared_weak_count_vtbl *v57;
  unsigned __int8 *v58;
  void *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  _QWORD *v63;
  unsigned __int8 *v64;
  void *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  _QWORD *v69;
  unsigned __int8 *v70;
  void *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  _QWORD *v75;
  unsigned __int8 *v76;
  void *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  _QWORD *v81;
  unsigned __int8 *v82;
  void *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  _QWORD *v87;
  unsigned __int8 *v88;
  void *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  _QWORD *v93;
  unsigned __int8 *v94;
  void *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  _QWORD *v99;
  unsigned __int8 *v100;
  std::__shared_weak_count_vtbl *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  char **v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  std::__shared_weak_count_vtbl *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  char *v135;
  char *v136;
  char *v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t *v144;
  char *v145;
  char *v146;
  char *v147;
  __int128 v148;
  char *v149;
  char *v150;
  uint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  _QWORD *v157;
  char **v158;
  _QWORD *v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  _OWORD *v169;
  unsigned __int8 *v170;
  void *v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  uint64_t v175;
  std::__shared_weak_count_vtbl *v176;
  std::__shared_weak_count *v177;
  std::__shared_weak_count *v178;
  unint64_t *p_shared_owners;
  unint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  void *v184;
  std::__shared_weak_count *v185;
  std::__shared_weak_count_vtbl *v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  std::__shared_weak_count_vtbl *v190;
  void *v191;
  std::__shared_weak_count *v192;
  std::__shared_weak_count_vtbl *v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  std::__shared_weak_count_vtbl *v197;
  void *v198;
  std::__shared_weak_count *v199;
  std::__shared_weak_count_vtbl *v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  std::__shared_weak_count_vtbl *v204;
  void *v205;
  std::__shared_weak_count *v206;
  std::__shared_weak_count_vtbl *v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  std::__shared_weak_count_vtbl *v211;
  void *v212;
  std::__shared_weak_count *v213;
  std::__shared_weak_count_vtbl *v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  std::__shared_weak_count_vtbl *v218;
  uint64_t v219;
  std::__shared_weak_count *v220;
  std::__shared_weak_count_vtbl *v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  void *v225;
  void *v226;
  std::__shared_weak_count *v227;
  std::__shared_weak_count_vtbl *v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  std::__shared_weak_count_vtbl *v232;
  void *v233;
  std::__shared_weak_count *v234;
  std::__shared_weak_count_vtbl *v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  std::__shared_weak_count_vtbl *v239;
  void *v240;
  std::__shared_weak_count *v241;
  std::__shared_weak_count_vtbl *v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  std::__shared_weak_count_vtbl *v246;
  void *v247;
  std::__shared_weak_count *v248;
  std::__shared_weak_count_vtbl *v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  std::__shared_weak_count_vtbl *v253;
  void *v254;
  std::__shared_weak_count *v255;
  std::__shared_weak_count_vtbl *v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  std::__shared_weak_count_vtbl *v260;
  void *v261;
  std::__shared_weak_count *v262;
  std::__shared_weak_count_vtbl *v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  std::__shared_weak_count_vtbl *v267;
  void *v268;
  std::__shared_weak_count *v269;
  std::__shared_weak_count_vtbl *v270;
  std::__shared_weak_count *v271;
  unint64_t *v272;
  unint64_t v273;
  std::__shared_weak_count_vtbl *v274;
  void *v275;
  std::__shared_weak_count *v276;
  std::__shared_weak_count_vtbl *v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  std::__shared_weak_count_vtbl *v281;
  void *v282;
  std::__shared_weak_count *v283;
  std::__shared_weak_count_vtbl *v284;
  std::__shared_weak_count *v285;
  unint64_t *v286;
  unint64_t v287;
  std::__shared_weak_count_vtbl *v288;
  void *v289;
  std::__shared_weak_count *v290;
  std::__shared_weak_count_vtbl *v291;
  std::__shared_weak_count *v292;
  unint64_t *v293;
  unint64_t v294;
  std::__shared_weak_count_vtbl *v295;
  uint64_t v296;
  std::__shared_weak_count *v297;
  std::__shared_weak_count_vtbl *v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  void *v302;
  void *v303;
  std::__shared_weak_count *v304;
  std::__shared_weak_count_vtbl *v305;
  uint64_t i;
  std::__shared_weak_count *v307;
  unint64_t *v308;
  unint64_t v309;
  void *v310;
  void *v311;
  std::__shared_weak_count *v312;
  std::__shared_weak_count_vtbl *v313;
  uint64_t j;
  std::__shared_weak_count *v315;
  unint64_t *v316;
  unint64_t v317;
  void *v318;
  void *v319;
  std::__shared_weak_count *v320;
  std::__shared_weak_count_vtbl *v321;
  uint64_t k;
  std::__shared_weak_count *v323;
  unint64_t *v324;
  unint64_t v325;
  void *v326;
  uint64_t v327;
  std::__shared_weak_count *v328;
  std::__shared_weak_count_vtbl *v329;
  std::__shared_weak_count *v330;
  unint64_t *v331;
  unint64_t v332;
  void *v333;
  uint64_t v334;
  uint64_t result;
  uint64_t v336;
  void *v337;
  std::__shared_weak_count *v338;
  void *v339[2];
  char v340;
  void *v341;
  std::__shared_weak_count *v342;
  void *v343[2];
  char v344;
  void *v345;
  std::__shared_weak_count *v346;
  void *v347[2];
  char v348;
  void *v349;
  std::__shared_weak_count *v350;
  void *v351;
  std::__shared_weak_count *v352;
  void *v353[2];
  char v354;
  std::__shared_weak_count_vtbl *v355;
  std::__shared_weak_count *v356;
  void *v357[2];
  char v358;
  std::__shared_weak_count_vtbl *v359;
  std::__shared_weak_count *v360;
  void *v361[2];
  char v362;
  std::__shared_weak_count_vtbl *v363;
  std::__shared_weak_count *v364;
  void *v365[2];
  char v366;
  std::__shared_weak_count_vtbl *v367;
  std::__shared_weak_count *v368;
  void *v369[2];
  char v370;
  void *v371[2];
  char v372;
  std::__shared_weak_count_vtbl *v373;
  std::__shared_weak_count *v374;
  void *v375[2];
  char v376;
  void *v377[2];
  char v378;
  std::__shared_weak_count_vtbl *v379;
  std::__shared_weak_count *v380;
  void *v381[2];
  char v382;
  void *v383[2];
  char v384;
  std::__shared_weak_count_vtbl *v385;
  std::__shared_weak_count *v386;
  void *v387[2];
  char v388;
  void *v389[2];
  char v390;
  std::__shared_weak_count_vtbl *v391;
  std::__shared_weak_count *v392;
  void *v393[2];
  char v394;
  void *v395[2];
  char v396;
  std::__shared_weak_count_vtbl *v397;
  std::__shared_weak_count *v398;
  void *v399[2];
  char v400;
  void *v401[2];
  char v402;
  std::__shared_weak_count_vtbl *v403;
  std::__shared_weak_count *v404;
  void *v405;
  std::__shared_weak_count *v406;
  void *v407[2];
  char v408;
  std::__shared_weak_count_vtbl *v409;
  std::__shared_weak_count *v410;
  void *v411[2];
  char v412;
  void *v413[2];
  char v414;
  std::__shared_weak_count_vtbl *v415;
  std::__shared_weak_count *v416;
  void *v417[2];
  char v418;
  void *v419[2];
  char v420;
  std::__shared_weak_count_vtbl *v421;
  std::__shared_weak_count *v422;
  void *v423[2];
  char v424;
  void *v425[2];
  char v426;
  std::__shared_weak_count_vtbl *v427;
  std::__shared_weak_count *v428;
  void *v429[2];
  char v430;
  void *v431[2];
  char v432;
  std::__shared_weak_count_vtbl *v433;
  std::__shared_weak_count *v434;
  std::__shared_weak_count_vtbl *v435;
  std::__shared_weak_count *v436;
  __n128 v437;
  __int128 v438;
  __int128 v439;
  void *v440[2];
  uint64_t v441;
  void *v442;
  void *v443;
  _QWORD *v444;
  __n128 v445;
  uint64_t v446;
  uint64_t v447;
  _QWORD *v448;
  char **v449;
  __n128 v450;
  __n128 v451;
  __n128 v452;
  __n128 v453;
  __n128 v454;
  __n128 v455;
  __n128 v456;
  __n128 v457;
  __n128 v458;
  void *__p;
  void *v460;
  _QWORD *v461;
  void *v462;
  void *v463;
  _QWORD *v464;
  void *v465;
  void *v466;
  _QWORD *v467;
  __n128 v468;
  _QWORD *v469;
  void *v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  _QWORD v475[3];
  _QWORD v476[3];
  _QWORD v477[3];
  _QWORD v478[3];
  _QWORD v479[3];
  _QWORD *v480;
  _BYTE v481[24];
  _BYTE *v482;
  _QWORD v483[3];
  _QWORD *v484;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_on_zero_shared_weak;
  uint64_t p_on_zero_shared;
  uint64_t v488;
  uint64_t v489;
  std::__shared_weak_count_vtbl *v490;
  uint64_t v491;
  _QWORD *v492;
  uint64_t v493;

  v493 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v469 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = (std::__shared_weak_count_vtbl *)operator new(0x20uLL);
  p_on_zero_shared_weak = (uint64_t)&v11->__on_zero_shared_weak;
  p_on_zero_shared = (uint64_t)&v11->__on_zero_shared_weak;
  v11->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v11->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  v11->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v9;
  v11->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v10;
  Scalar = v11;
  v470 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, 0);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = (std::__shared_weak_count_vtbl *)operator new(0x20uLL);
  v491 = (uint64_t)&v16->__on_zero_shared_weak;
  v492 = &v16->__on_zero_shared_weak;
  v16->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v12;
  v16->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v13;
  v16->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v14;
  v16->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v15;
  v490 = v16;
  v471 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v490);
  v17 = MIL::IRUnknownDimension::Make(a1, 0);
  v18 = MIL::IRUnknownDimension::Make(a1, 0);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = MIL::IRUnknownDimension::Make(a1, 0);
  v21 = operator new(0x20uLL);
  v467 = v21 + 4;
  *v21 = v17;
  v21[1] = v18;
  v21[2] = v19;
  v21[3] = v20;
  v465 = v21;
  v466 = v21 + 4;
  v472 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v465);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = MIL::IRUnknownDimension::Make(a1, 0);
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = operator new(0x20uLL);
  v464 = v26 + 4;
  *v26 = v22;
  v26[1] = v23;
  v26[2] = v24;
  v26[3] = v25;
  v462 = v26;
  v463 = v26 + 4;
  v473 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v462);
  v27 = MIL::IRUnknownDimension::Make(a1, 0);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = MIL::IRUnknownDimension::Make(a1, 0);
  v30 = MIL::IRUnknownDimension::Make(a1, 0);
  v31 = operator new(0x20uLL);
  v461 = v31 + 4;
  *v31 = v27;
  v31[1] = v28;
  v31[2] = v29;
  v31[3] = v30;
  __p = v31;
  v460 = v31 + 4;
  v474 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v470, 5, &v468);
  MIL::IRParameter::Make(&v468, (uint64_t *)&v442);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v442);
  v32 = v442;
  v442 = 0;
  if (v32)
    (*(void (**)(void *))(*(_QWORD *)v32 + 8))(v32);
  v33 = (std::__shared_weak_count *)v468.n128_u64[1];
  if (v468.n128_u64[1])
  {
    v34 = (unint64_t *)(v468.n128_u64[1] + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (__p)
  {
    v460 = __p;
    operator delete(__p);
  }
  if (v462)
  {
    v463 = v462;
    operator delete(v462);
  }
  if (v465)
  {
    v466 = v465;
    operator delete(v465);
  }
  if (v490)
  {
    v491 = (uint64_t)v490;
    operator delete(v490);
  }
  if (Scalar)
  {
    p_on_zero_shared_weak = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v36 = v469;
  v37 = MIL::IRUnknownDimension::Make(a1, 0);
  v38 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)4);
  v39 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared_weak = (uint64_t)&v39->__on_zero_shared;
  p_on_zero_shared = (uint64_t)&v39->__on_zero_shared;
  v39->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v37;
  v39->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v38;
  Scalar = v39;
  v470 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v40 = MIL::IRUnknownDimension::Make(a1, 0);
  v41 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)4);
  v42 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  v491 = (uint64_t)&v42->__on_zero_shared;
  v492 = &v42->__on_zero_shared;
  v42->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v40;
  v42->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v41;
  v490 = v42;
  v471 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v490);
  v43 = MIL::IRUnknownDimension::Make(a1, 0);
  v44 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)4);
  v45 = operator new(0x10uLL);
  v467 = v45 + 2;
  *v45 = v43;
  v45[1] = v44;
  v465 = v45;
  v466 = v45 + 2;
  v472 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v465);
  v46 = MIL::IRUnknownDimension::Make(a1, 0);
  v47 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)4);
  v48 = operator new(0x10uLL);
  v464 = v48 + 2;
  *v48 = v46;
  v48[1] = v47;
  v462 = v48;
  v463 = v48 + 2;
  v473 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v462);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v470, 4, &v458);
  MIL::IRParameter::Make(&v458, (uint64_t *)&__p);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v36, "boxes", (uint64_t *)&__p);
  v49 = __p;
  __p = 0;
  if (v49)
    (*(void (**)(void *))(*(_QWORD *)v49 + 8))(v49);
  v50 = (std::__shared_weak_count *)v458.n128_u64[1];
  if (v458.n128_u64[1])
  {
    v51 = (unint64_t *)(v458.n128_u64[1] + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  if (v462)
  {
    v463 = v462;
    operator delete(v462);
  }
  if (v465)
  {
    v466 = v465;
    operator delete(v465);
  }
  if (v490)
  {
    v491 = (uint64_t)v490;
    operator delete(v490);
  }
  if (Scalar)
  {
    p_on_zero_shared_weak = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v53 = v469;
  v54 = MIL::IRUnknownDimension::Make(a1, 0);
  v55 = operator new(8uLL);
  v470 = v55;
  *v55 = v54;
  v472 = (uint64_t)(v55 + 1);
  v471 = (uint64_t)(v55 + 1);
  v490 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v470);
  v56 = MIL::IRUnknownDimension::Make(a1, 0);
  v57 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v57;
  v57->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v56;
  p_on_zero_shared_weak = (uint64_t)&v57->~__shared_weak_count_0;
  p_on_zero_shared = (uint64_t)&v57->~__shared_weak_count_0;
  v491 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v490, 2, &v457);
  MIL::IRParameter::Make(&v457, (uint64_t *)&v465);
  v58 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v53, "box_indices", (uint64_t *)&v465);
  v59 = v465;
  v465 = 0;
  if (v59)
    (*(void (**)(void *))(*(_QWORD *)v59 + 8))(v59);
  v60 = (std::__shared_weak_count *)v457.n128_u64[1];
  if (v457.n128_u64[1])
  {
    v61 = (unint64_t *)(v457.n128_u64[1] + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  if (Scalar)
  {
    p_on_zero_shared_weak = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  if (v470)
  {
    v471 = (uint64_t)v470;
    operator delete(v470);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v58 + 5) + 48))(*((_QWORD *)v58 + 5), 1);
  v63 = v469;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v456);
  MIL::IRParameter::Make(&v456, (uint64_t *)&v470);
  v64 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v63, "target_height", (uint64_t *)&v470);
  v65 = v470;
  v470 = 0;
  if (v65)
    (*(void (**)(void *))(*(_QWORD *)v65 + 8))(v65);
  v66 = (std::__shared_weak_count *)v456.n128_u64[1];
  if (v456.n128_u64[1])
  {
    v67 = (unint64_t *)(v456.n128_u64[1] + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v64 + 5) + 32))(*((_QWORD *)v64 + 5), 1);
  v69 = v469;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v455);
  MIL::IRParameter::Make(&v455, (uint64_t *)&v470);
  v70 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v69, "target_width", (uint64_t *)&v470);
  v71 = v470;
  v470 = 0;
  if (v71)
    (*(void (**)(void *))(*(_QWORD *)v71 + 8))(v71);
  v72 = (std::__shared_weak_count *)v455.n128_u64[1];
  if (v455.n128_u64[1])
  {
    v73 = (unint64_t *)(v455.n128_u64[1] + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v70 + 5) + 32))(*((_QWORD *)v70 + 5), 1);
  v75 = v469;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v454);
  MIL::IRParameter::Make(&v454, (uint64_t *)&v470);
  v76 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[23],std::unique_ptr<MIL::IRParameter>>(v75, "normalized_coordinates", (uint64_t *)&v470);
  v77 = v470;
  v470 = 0;
  if (v77)
    (*(void (**)(void *))(*(_QWORD *)v77 + 8))(v77);
  v78 = (std::__shared_weak_count *)v454.n128_u64[1];
  if (v454.n128_u64[1])
  {
    v79 = (unint64_t *)(v454.n128_u64[1] + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v76 + 5) + 32))(*((_QWORD *)v76 + 5), 1);
  v81 = v469;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v453);
  MIL::IRParameter::Make(&v453, (uint64_t *)&v470);
  v82 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v81, "spatial_scale", (uint64_t *)&v470);
  v83 = v470;
  v470 = 0;
  if (v83)
    (*(void (**)(void *))(*(_QWORD *)v83 + 8))(v83);
  v84 = (std::__shared_weak_count *)v453.n128_u64[1];
  if (v453.n128_u64[1])
  {
    v85 = (unint64_t *)(v453.n128_u64[1] + 8);
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v82 + 5) + 32))(*((_QWORD *)v82 + 5), 1);
  v87 = v469;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v452);
  MIL::IRParameter::Make(&v452, (uint64_t *)&v470);
  v88 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[20],std::unique_ptr<MIL::IRParameter>>(v87, "box_coordinate_mode", (uint64_t *)&v470);
  v89 = v470;
  v470 = 0;
  if (v89)
    (*(void (**)(void *))(*(_QWORD *)v89 + 8))(v89);
  v90 = (std::__shared_weak_count *)v452.n128_u64[1];
  if (v452.n128_u64[1])
  {
    v91 = (unint64_t *)(v452.n128_u64[1] + 8);
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v88 + 5) + 32))(*((_QWORD *)v88 + 5), 1);
  v93 = v469;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v451);
  MIL::IRParameter::Make(&v451, (uint64_t *)&v470);
  v94 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v93, "sampling_mode", (uint64_t *)&v470);
  v95 = v470;
  v470 = 0;
  if (v95)
    (*(void (**)(void *))(*(_QWORD *)v95 + 8))(v95);
  v96 = (std::__shared_weak_count *)v451.n128_u64[1];
  if (v451.n128_u64[1])
  {
    v97 = (unint64_t *)(v451.n128_u64[1] + 8);
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v94 + 5) + 32))(*((_QWORD *)v94 + 5), 1);
  v99 = v469;
  v470 = (void *)MIL::IRTensorValueType::MakeScalar(a1, 7);
  v471 = MIL::IRTensorValueType::MakeScalar(a1, 4);
  v472 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  v473 = MIL::IRTensorValueType::MakeScalar(a1, 9);
  v474 = MIL::IRTensorValueType::MakeScalar(a1, 14);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v470, 5, &v450);
  MIL::IRParameter::Make(&v450, (uint64_t *)&Scalar);
  v100 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v99, "pad_value", (uint64_t *)&Scalar);
  v101 = Scalar;
  Scalar = 0;
  if (v101)
    (*((void (**)(std::__shared_weak_count_vtbl *))v101->~__shared_weak_count + 1))(v101);
  v102 = (std::__shared_weak_count *)v450.n128_u64[1];
  if (v450.n128_u64[1])
  {
    v103 = (unint64_t *)(v450.n128_u64[1] + 8);
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v100 + 5) + 32))(*((_QWORD *)v100 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v100 + 5) + 48))(*((_QWORD *)v100 + 5), 1);
  v449 = 0;
  v105 = operator new();
  *(_QWORD *)v105 = 0;
  *(_QWORD *)(v105 + 8) = 0;
  *(_QWORD *)(v105 + 16) = 0;
  v470 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v449, (void **)v105);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v470, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v449, 1uLL);
  v106 = v449;
  v107 = MIL::IRUnknownDimension::Make(a1, 0);
  v108 = MIL::IRUnknownDimension::Make(a1, 0);
  v109 = MIL::IRUnknownDimension::Make(a1, 0);
  v110 = MIL::IRUnknownDimension::Make(a1, 0);
  v111 = (std::__shared_weak_count_vtbl *)operator new(0x20uLL);
  v491 = (uint64_t)&v111->__on_zero_shared_weak;
  v492 = &v111->__on_zero_shared_weak;
  v111->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v107;
  v111->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v108;
  v111->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v109;
  v111->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v110;
  v490 = v111;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v490);
  v112 = MIL::IRUnknownDimension::Make(a1, 0);
  v113 = MIL::IRUnknownDimension::Make(a1, 0);
  v114 = MIL::IRUnknownDimension::Make(a1, 0);
  v115 = MIL::IRUnknownDimension::Make(a1, 0);
  v116 = operator new(0x20uLL);
  v467 = v116 + 4;
  *v116 = v112;
  v116[1] = v113;
  v116[2] = v114;
  v116[3] = v115;
  v465 = v116;
  v466 = v116 + 4;
  p_on_zero_shared_weak = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v465);
  v117 = MIL::IRUnknownDimension::Make(a1, 0);
  v118 = MIL::IRUnknownDimension::Make(a1, 0);
  v119 = MIL::IRUnknownDimension::Make(a1, 0);
  v120 = MIL::IRUnknownDimension::Make(a1, 0);
  v121 = operator new(0x20uLL);
  v464 = v121 + 4;
  *v121 = v117;
  v121[1] = v118;
  v121[2] = v119;
  v121[3] = v120;
  v462 = v121;
  v463 = v121 + 4;
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v462);
  v122 = MIL::IRUnknownDimension::Make(a1, 0);
  v123 = MIL::IRUnknownDimension::Make(a1, 0);
  v124 = MIL::IRUnknownDimension::Make(a1, 0);
  v125 = MIL::IRUnknownDimension::Make(a1, 0);
  v126 = operator new(0x20uLL);
  v461 = v126 + 4;
  *v126 = v122;
  v126[1] = v123;
  v126[2] = v124;
  v126[3] = v125;
  __p = v126;
  v460 = v126 + 4;
  v488 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&__p);
  v127 = MIL::IRUnknownDimension::Make(a1, 0);
  v128 = MIL::IRUnknownDimension::Make(a1, 0);
  v129 = MIL::IRUnknownDimension::Make(a1, 0);
  v130 = MIL::IRUnknownDimension::Make(a1, 0);
  v131 = operator new(0x20uLL);
  v444 = v131 + 4;
  *v131 = v127;
  v131[1] = v128;
  v131[2] = v129;
  v131[3] = v130;
  v442 = v131;
  v443 = v131 + 4;
  v489 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v442);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 5, &v445);
  MIL::IRParameter::Make(&v445, &v446);
  v132 = v446;
  v447 = v446;
  if (v446)
  {
    v133 = (_QWORD *)operator new();
    v134 = v446;
    *v133 = &unk_1EA99F888;
    v133[1] = 0;
    v133[2] = 0;
    v133[3] = v134;
  }
  else
  {
    v133 = 0;
  }
  v448 = v133;
  v446 = 0;
  v135 = v106[2];
  v136 = v106[1];
  if (v136 >= v135)
  {
    v138 = (v136 - *v106) >> 4;
    v139 = v138 + 1;
    if ((unint64_t)(v138 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v140 = v135 - *v106;
    if (v140 >> 3 > v139)
      v139 = v140 >> 3;
    if ((unint64_t)v140 >= 0x7FFFFFFFFFFFFFF0)
      v141 = 0xFFFFFFFFFFFFFFFLL;
    else
      v141 = v139;
    v474 = (uint64_t)(v106 + 2);
    v142 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v106 + 2), v141);
    v144 = (uint64_t *)&v142[16 * v138];
    *v144 = v132;
    v144[1] = (uint64_t)v133;
    v448 = 0;
    v447 = 0;
    v146 = *v106;
    v145 = v106[1];
    if (v145 == *v106)
    {
      v149 = v106[1];
      v147 = &v142[16 * v138];
    }
    else
    {
      v147 = &v142[16 * v138];
      do
      {
        v148 = *((_OWORD *)v145 - 1);
        v145 -= 16;
        *((_OWORD *)v147 - 1) = v148;
        v147 -= 16;
        *(_QWORD *)v145 = 0;
        *((_QWORD *)v145 + 1) = 0;
      }
      while (v145 != v146);
      v149 = *v106;
      v145 = v106[1];
    }
    v137 = (char *)(v144 + 2);
    *v106 = v147;
    v471 = (uint64_t)v149;
    v106[1] = (char *)(v144 + 2);
    v472 = (uint64_t)v145;
    v150 = v106[2];
    v106[2] = &v142[16 * v143];
    v473 = (uint64_t)v150;
    v470 = v149;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v470);
  }
  else
  {
    *(_QWORD *)v136 = v132;
    *((_QWORD *)v136 + 1) = v133;
    v137 = v136 + 16;
    v448 = 0;
    v447 = 0;
  }
  v106[1] = v137;
  v151 = v446;
  v446 = 0;
  if (v151)
    (*(void (**)(uint64_t))(*(_QWORD *)v151 + 8))(v151);
  v152 = (std::__shared_weak_count *)v445.n128_u64[1];
  if (v445.n128_u64[1])
  {
    v153 = (unint64_t *)(v445.n128_u64[1] + 8);
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
    }
  }
  if (v442)
  {
    v443 = v442;
    operator delete(v442);
  }
  if (__p)
  {
    v460 = __p;
    operator delete(__p);
  }
  if (v462)
  {
    v463 = v462;
    operator delete(v462);
  }
  if (v465)
  {
    v466 = v465;
    operator delete(v465);
  }
  if (v490)
  {
    v491 = (uint64_t)v490;
    operator delete(v490);
  }
  *(_OWORD *)v440 = *(_OWORD *)a2;
  v441 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v155 = (uint64_t)v469;
  *(_QWORD *)&v439 = v469;
  if (v469)
  {
    v156 = (_QWORD *)operator new();
    *v156 = &unk_1EA99F8E8;
    v156[1] = 0;
    v156[2] = 0;
    v156[3] = v155;
  }
  else
  {
    v156 = 0;
  }
  *((_QWORD *)&v439 + 1) = v156;
  v469 = 0;
  *(_QWORD *)&v438 = v449;
  if (v449)
  {
    v157 = (_QWORD *)operator new();
    v158 = v449;
    *v157 = &unk_1EA99F948;
    v157[1] = 0;
    v157[2] = 0;
    v157[3] = v158;
  }
  else
  {
    v157 = 0;
  }
  *((_QWORD *)&v438 + 1) = v157;
  v449 = 0;
  v483[0] = &unk_1EA99FAC8;
  v483[1] = MIL::Operators::Common::ios18::CustomValidators::ValidateCropResize;
  v484 = v483;
  v482 = 0;
  MIL::IROperator::Make((__int128 *)v440, &v439, &v438, (uint64_t)v483, (uint64_t)v481, a3);
  v159 = v482;
  if (v482 == v481)
  {
    v160 = 4;
    v159 = v481;
  }
  else
  {
    if (!v482)
      goto LABEL_138;
    v160 = 5;
  }
  (*(void (**)(void))(*v159 + 8 * v160))();
LABEL_138:
  v161 = v484;
  if (v484 == v483)
  {
    v162 = 4;
    v161 = v483;
    goto LABEL_142;
  }
  if (v484)
  {
    v162 = 5;
LABEL_142:
    (*(void (**)(void))(*v161 + 8 * v162))();
  }
  v163 = (std::__shared_weak_count *)*((_QWORD *)&v438 + 1);
  if (*((_QWORD *)&v438 + 1))
  {
    v164 = (unint64_t *)(*((_QWORD *)&v438 + 1) + 8);
    do
      v165 = __ldaxr(v164);
    while (__stlxr(v165 - 1, v164));
    if (!v165)
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v163);
    }
  }
  v166 = (std::__shared_weak_count *)*((_QWORD *)&v439 + 1);
  if (*((_QWORD *)&v439 + 1))
  {
    v167 = (unint64_t *)(*((_QWORD *)&v439 + 1) + 8);
    do
      v168 = __ldaxr(v167);
    while (__stlxr(v168 - 1, v167));
    if (!v168)
    {
      ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
      std::__shared_weak_count::__release_weak(v166);
    }
  }
  if (SHIBYTE(v441) < 0)
    operator delete(v440[0]);
  v490 = 0;
  v169 = (_OWORD *)operator new();
  *v169 = 0u;
  v169[1] = 0u;
  *((_DWORD *)v169 + 8) = 1065353216;
  v490 = (std::__shared_weak_count_vtbl *)v169;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v437);
  MIL::IRParameter::Make(&v437, (uint64_t *)&v470);
  v170 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v169, "minimum_compute_type", (uint64_t *)&v470);
  v171 = v470;
  v470 = 0;
  if (v171)
    (*(void (**)(void *))(*(_QWORD *)v171 + 8))(v171);
  v172 = (std::__shared_weak_count *)v437.n128_u64[1];
  if (v437.n128_u64[1])
  {
    v173 = (unint64_t *)(v437.n128_u64[1] + 8);
    do
      v174 = __ldaxr(v173);
    while (__stlxr(v174 - 1, v173));
    if (!v174)
    {
      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
      std::__shared_weak_count::__release_weak(v172);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v170 + 5) + 32))(*((_QWORD *)v170 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v170 + 5) + 48))(*((_QWORD *)v170 + 5), 1);
  v175 = *a3;
  v176 = v490;
  v435 = v490;
  if (v490)
  {
    v177 = (std::__shared_weak_count *)operator new();
    v177->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v177->__shared_owners_ = 0;
    v177->__shared_weak_owners_ = 0;
    v177[1].__vftable = v176;
  }
  else
  {
    v177 = 0;
  }
  v436 = v177;
  v490 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v175 + 184))(v175, &v435);
  v178 = v436;
  if (v436)
  {
    p_shared_owners = (unint64_t *)&v436->__shared_owners_;
    do
      v180 = __ldaxr(p_shared_owners);
    while (__stlxr(v180 - 1, p_shared_owners));
    if (!v180)
    {
      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
      std::__shared_weak_count::__release_weak(v178);
    }
  }
  v181 = *a3;
  v479[0] = &off_1EA99FBD8;
  v479[1] = MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceCropResize;
  v480 = v479;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v181 + 200))(v181, v479);
  v182 = v480;
  if (v480 == v479)
  {
    v183 = 4;
    v182 = v479;
  }
  else
  {
    if (!v480)
      goto LABEL_175;
    v183 = 5;
  }
  (*(void (**)(void))(*v182 + 8 * v183))();
LABEL_175:
  MIL::Validation::TensorDTypeConstraints::Make(&v470);
  v184 = v470;
  std::string::basic_string[abi:ne180100]<0>(v431, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v431, 0, (uint64_t *)&Scalar);
  v433 = Scalar;
  if (Scalar)
  {
    v185 = (std::__shared_weak_count *)operator new();
    v186 = Scalar;
    v185->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v185->__shared_owners_ = 0;
    v185->__shared_weak_owners_ = 0;
    v185[1].__vftable = v186;
  }
  else
  {
    v185 = 0;
  }
  v434 = v185;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v429, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v184 + 24))(v184, &v433, v429);
  if (v430 < 0)
    operator delete(v429[0]);
  v187 = v434;
  if (v434)
  {
    v188 = (unint64_t *)&v434->__shared_owners_;
    do
      v189 = __ldaxr(v188);
    while (__stlxr(v189 - 1, v188));
    if (!v189)
    {
      ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
      std::__shared_weak_count::__release_weak(v187);
    }
  }
  v190 = Scalar;
  Scalar = 0;
  if (v190)
    (*((void (**)(std::__shared_weak_count_vtbl *))v190->~__shared_weak_count + 1))(v190);
  if (v432 < 0)
    operator delete(v431[0]);
  v191 = v470;
  std::string::basic_string[abi:ne180100]<0>(v425, "boxes");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v425, 0, (uint64_t *)&Scalar);
  v427 = Scalar;
  if (Scalar)
  {
    v192 = (std::__shared_weak_count *)operator new();
    v193 = Scalar;
    v192->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v192->__shared_owners_ = 0;
    v192->__shared_weak_owners_ = 0;
    v192[1].__vftable = v193;
  }
  else
  {
    v192 = 0;
  }
  v428 = v192;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v423, "BOX_T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v191 + 24))(v191, &v427, v423);
  if (v424 < 0)
    operator delete(v423[0]);
  v194 = v428;
  if (v428)
  {
    v195 = (unint64_t *)&v428->__shared_owners_;
    do
      v196 = __ldaxr(v195);
    while (__stlxr(v196 - 1, v195));
    if (!v196)
    {
      ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
      std::__shared_weak_count::__release_weak(v194);
    }
  }
  v197 = Scalar;
  Scalar = 0;
  if (v197)
    (*((void (**)(std::__shared_weak_count_vtbl *))v197->~__shared_weak_count + 1))(v197);
  if (v426 < 0)
    operator delete(v425[0]);
  v198 = v470;
  std::string::basic_string[abi:ne180100]<0>(v419, "box_indices");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v419, 1, (uint64_t *)&Scalar);
  v421 = Scalar;
  if (Scalar)
  {
    v199 = (std::__shared_weak_count *)operator new();
    v200 = Scalar;
    v199->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v199->__shared_owners_ = 0;
    v199->__shared_weak_owners_ = 0;
    v199[1].__vftable = v200;
  }
  else
  {
    v199 = 0;
  }
  v422 = v199;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v417, "BOX_INDEX_T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v198 + 24))(v198, &v421, v417);
  if (v418 < 0)
    operator delete(v417[0]);
  v201 = v422;
  if (v422)
  {
    v202 = (unint64_t *)&v422->__shared_owners_;
    do
      v203 = __ldaxr(v202);
    while (__stlxr(v203 - 1, v202));
    if (!v203)
    {
      ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
      std::__shared_weak_count::__release_weak(v201);
    }
  }
  v204 = Scalar;
  Scalar = 0;
  if (v204)
    (*((void (**)(std::__shared_weak_count_vtbl *))v204->~__shared_weak_count + 1))(v204);
  if (v420 < 0)
    operator delete(v419[0]);
  v205 = v470;
  std::string::basic_string[abi:ne180100]<0>(v413, "pad_value");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v413, 1, (uint64_t *)&Scalar);
  v415 = Scalar;
  if (Scalar)
  {
    v206 = (std::__shared_weak_count *)operator new();
    v207 = Scalar;
    v206->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v206->__shared_owners_ = 0;
    v206->__shared_weak_owners_ = 0;
    v206[1].__vftable = v207;
  }
  else
  {
    v206 = 0;
  }
  v416 = v206;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v411, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v205 + 24))(v205, &v415, v411);
  if (v412 < 0)
    operator delete(v411[0]);
  v208 = v416;
  if (v416)
  {
    v209 = (unint64_t *)&v416->__shared_owners_;
    do
      v210 = __ldaxr(v209);
    while (__stlxr(v210 - 1, v209));
    if (!v210)
    {
      ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
      std::__shared_weak_count::__release_weak(v208);
    }
  }
  v211 = Scalar;
  Scalar = 0;
  if (v211)
    (*((void (**)(std::__shared_weak_count_vtbl *))v211->~__shared_weak_count + 1))(v211);
  if (v414 < 0)
    operator delete(v413[0]);
  v212 = v470;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v409 = Scalar;
  if (Scalar)
  {
    v213 = (std::__shared_weak_count *)operator new();
    v214 = Scalar;
    v213->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v213->__shared_owners_ = 0;
    v213->__shared_weak_owners_ = 0;
    v213[1].__vftable = v214;
  }
  else
  {
    v213 = 0;
  }
  v410 = v213;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v407, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v212 + 24))(v212, &v409, v407);
  if (v408 < 0)
    operator delete(v407[0]);
  v215 = v410;
  if (v410)
  {
    v216 = (unint64_t *)&v410->__shared_owners_;
    do
      v217 = __ldaxr(v216);
    while (__stlxr(v217 - 1, v216));
    if (!v217)
    {
      ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
      std::__shared_weak_count::__release_weak(v215);
    }
  }
  v218 = Scalar;
  Scalar = 0;
  if (v218)
    (*((void (**)(std::__shared_weak_count_vtbl *))v218->~__shared_weak_count + 1))(v218);
  v219 = *a3;
  v405 = v470;
  if (v470)
  {
    v220 = (std::__shared_weak_count *)operator new();
    v221 = (std::__shared_weak_count_vtbl *)v470;
    v220->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v220->__shared_owners_ = 0;
    v220->__shared_weak_owners_ = 0;
    v220[1].__vftable = v221;
  }
  else
  {
    v220 = 0;
  }
  v406 = v220;
  v470 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v219 + 56))(v219, &v405);
  v222 = v406;
  if (v406)
  {
    v223 = (unint64_t *)&v406->__shared_owners_;
    do
      v224 = __ldaxr(v223);
    while (__stlxr(v224 - 1, v223));
    if (!v224)
    {
      ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
      std::__shared_weak_count::__release_weak(v222);
    }
  }
  v225 = v470;
  v470 = 0;
  if (v225)
    (*(void (**)(void *))(*(_QWORD *)v225 + 8))(v225);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v470);
  v226 = v470;
  std::string::basic_string[abi:ne180100]<0>(v401, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v401, 0, (uint64_t *)&Scalar);
  v403 = Scalar;
  if (Scalar)
  {
    v227 = (std::__shared_weak_count *)operator new();
    v228 = Scalar;
    v227->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v227->__shared_owners_ = 0;
    v227->__shared_weak_owners_ = 0;
    v227[1].__vftable = v228;
  }
  else
  {
    v227 = 0;
  }
  v404 = v227;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v399, "B");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v226 + 24))(v226, &v403, 0, v399);
  if (v400 < 0)
    operator delete(v399[0]);
  v229 = v404;
  if (v404)
  {
    v230 = (unint64_t *)&v404->__shared_owners_;
    do
      v231 = __ldaxr(v230);
    while (__stlxr(v231 - 1, v230));
    if (!v231)
    {
      ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
      std::__shared_weak_count::__release_weak(v229);
    }
  }
  v232 = Scalar;
  Scalar = 0;
  if (v232)
    (*((void (**)(std::__shared_weak_count_vtbl *))v232->~__shared_weak_count + 1))(v232);
  if (v402 < 0)
    operator delete(v401[0]);
  v233 = v470;
  std::string::basic_string[abi:ne180100]<0>(v395, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v395, 0, (uint64_t *)&Scalar);
  v397 = Scalar;
  if (Scalar)
  {
    v234 = (std::__shared_weak_count *)operator new();
    v235 = Scalar;
    v234->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v234->__shared_owners_ = 0;
    v234->__shared_weak_owners_ = 0;
    v234[1].__vftable = v235;
  }
  else
  {
    v234 = 0;
  }
  v398 = v234;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v393, "C");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v233 + 24))(v233, &v397, 1, v393);
  if (v394 < 0)
    operator delete(v393[0]);
  v236 = v398;
  if (v398)
  {
    v237 = (unint64_t *)&v398->__shared_owners_;
    do
      v238 = __ldaxr(v237);
    while (__stlxr(v238 - 1, v237));
    if (!v238)
    {
      ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
      std::__shared_weak_count::__release_weak(v236);
    }
  }
  v239 = Scalar;
  Scalar = 0;
  if (v239)
    (*((void (**)(std::__shared_weak_count_vtbl *))v239->~__shared_weak_count + 1))(v239);
  if (v396 < 0)
    operator delete(v395[0]);
  v240 = v470;
  std::string::basic_string[abi:ne180100]<0>(v389, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v389, 0, (uint64_t *)&Scalar);
  v391 = Scalar;
  if (Scalar)
  {
    v241 = (std::__shared_weak_count *)operator new();
    v242 = Scalar;
    v241->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v241->__shared_owners_ = 0;
    v241->__shared_weak_owners_ = 0;
    v241[1].__vftable = v242;
  }
  else
  {
    v241 = 0;
  }
  v392 = v241;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v387, "H");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v240 + 24))(v240, &v391, 2, v387);
  if (v388 < 0)
    operator delete(v387[0]);
  v243 = v392;
  if (v392)
  {
    v244 = (unint64_t *)&v392->__shared_owners_;
    do
      v245 = __ldaxr(v244);
    while (__stlxr(v245 - 1, v244));
    if (!v245)
    {
      ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
      std::__shared_weak_count::__release_weak(v243);
    }
  }
  v246 = Scalar;
  Scalar = 0;
  if (v246)
    (*((void (**)(std::__shared_weak_count_vtbl *))v246->~__shared_weak_count + 1))(v246);
  if (v390 < 0)
    operator delete(v389[0]);
  v247 = v470;
  std::string::basic_string[abi:ne180100]<0>(v383, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v383, 0, (uint64_t *)&Scalar);
  v385 = Scalar;
  if (Scalar)
  {
    v248 = (std::__shared_weak_count *)operator new();
    v249 = Scalar;
    v248->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v248->__shared_owners_ = 0;
    v248->__shared_weak_owners_ = 0;
    v248[1].__vftable = v249;
  }
  else
  {
    v248 = 0;
  }
  v386 = v248;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v381, "W");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v247 + 24))(v247, &v385, 3, v381);
  if (v382 < 0)
    operator delete(v381[0]);
  v250 = v386;
  if (v386)
  {
    v251 = (unint64_t *)&v386->__shared_owners_;
    do
      v252 = __ldaxr(v251);
    while (__stlxr(v252 - 1, v251));
    if (!v252)
    {
      ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
      std::__shared_weak_count::__release_weak(v250);
    }
  }
  v253 = Scalar;
  Scalar = 0;
  if (v253)
    (*((void (**)(std::__shared_weak_count_vtbl *))v253->~__shared_weak_count + 1))(v253);
  if (v384 < 0)
    operator delete(v383[0]);
  v254 = v470;
  std::string::basic_string[abi:ne180100]<0>(v377, "boxes");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v377, 0, (uint64_t *)&Scalar);
  v379 = Scalar;
  if (Scalar)
  {
    v255 = (std::__shared_weak_count *)operator new();
    v256 = Scalar;
    v255->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v255->__shared_owners_ = 0;
    v255->__shared_weak_owners_ = 0;
    v255[1].__vftable = v256;
  }
  else
  {
    v255 = 0;
  }
  v380 = v255;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v375, "N");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v254 + 24))(v254, &v379, 0, v375);
  if (v376 < 0)
    operator delete(v375[0]);
  v257 = v380;
  if (v380)
  {
    v258 = (unint64_t *)&v380->__shared_owners_;
    do
      v259 = __ldaxr(v258);
    while (__stlxr(v259 - 1, v258));
    if (!v259)
    {
      ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
      std::__shared_weak_count::__release_weak(v257);
    }
  }
  v260 = Scalar;
  Scalar = 0;
  if (v260)
    (*((void (**)(std::__shared_weak_count_vtbl *))v260->~__shared_weak_count + 1))(v260);
  if (v378 < 0)
    operator delete(v377[0]);
  v261 = v470;
  std::string::basic_string[abi:ne180100]<0>(v371, "box_indices");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v371, 1, (uint64_t *)&Scalar);
  v373 = Scalar;
  if (Scalar)
  {
    v262 = (std::__shared_weak_count *)operator new();
    v263 = Scalar;
    v262->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v262->__shared_owners_ = 0;
    v262->__shared_weak_owners_ = 0;
    v262[1].__vftable = v263;
  }
  else
  {
    v262 = 0;
  }
  v374 = v262;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v369, "N");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v261 + 24))(v261, &v373, 0, v369);
  if (v370 < 0)
    operator delete(v369[0]);
  v264 = v374;
  if (v374)
  {
    v265 = (unint64_t *)&v374->__shared_owners_;
    do
      v266 = __ldaxr(v265);
    while (__stlxr(v266 - 1, v265));
    if (!v266)
    {
      ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
      std::__shared_weak_count::__release_weak(v264);
    }
  }
  v267 = Scalar;
  Scalar = 0;
  if (v267)
    (*((void (**)(std::__shared_weak_count_vtbl *))v267->~__shared_weak_count + 1))(v267);
  if (v372 < 0)
    operator delete(v371[0]);
  v268 = v470;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v367 = Scalar;
  if (Scalar)
  {
    v269 = (std::__shared_weak_count *)operator new();
    v270 = Scalar;
    v269->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v269->__shared_owners_ = 0;
    v269->__shared_weak_owners_ = 0;
    v269[1].__vftable = v270;
  }
  else
  {
    v269 = 0;
  }
  v368 = v269;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v365, "N");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v268 + 24))(v268, &v367, 0, v365);
  if (v366 < 0)
    operator delete(v365[0]);
  v271 = v368;
  if (v368)
  {
    v272 = (unint64_t *)&v368->__shared_owners_;
    do
      v273 = __ldaxr(v272);
    while (__stlxr(v273 - 1, v272));
    if (!v273)
    {
      ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
      std::__shared_weak_count::__release_weak(v271);
    }
  }
  v274 = Scalar;
  Scalar = 0;
  if (v274)
    (*((void (**)(std::__shared_weak_count_vtbl *))v274->~__shared_weak_count + 1))(v274);
  v275 = v470;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v363 = Scalar;
  if (Scalar)
  {
    v276 = (std::__shared_weak_count *)operator new();
    v277 = Scalar;
    v276->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v276->__shared_owners_ = 0;
    v276->__shared_weak_owners_ = 0;
    v276[1].__vftable = v277;
  }
  else
  {
    v276 = 0;
  }
  v364 = v276;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v361, "C");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v275 + 24))(v275, &v363, 1, v361);
  if (v362 < 0)
    operator delete(v361[0]);
  v278 = v364;
  if (v364)
  {
    v279 = (unint64_t *)&v364->__shared_owners_;
    do
      v280 = __ldaxr(v279);
    while (__stlxr(v280 - 1, v279));
    if (!v280)
    {
      ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
      std::__shared_weak_count::__release_weak(v278);
    }
  }
  v281 = Scalar;
  Scalar = 0;
  if (v281)
    (*((void (**)(std::__shared_weak_count_vtbl *))v281->~__shared_weak_count + 1))(v281);
  v282 = v470;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v359 = Scalar;
  if (Scalar)
  {
    v283 = (std::__shared_weak_count *)operator new();
    v284 = Scalar;
    v283->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v283->__shared_owners_ = 0;
    v283->__shared_weak_owners_ = 0;
    v283[1].__vftable = v284;
  }
  else
  {
    v283 = 0;
  }
  v360 = v283;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v357, "target_height");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v282 + 24))(v282, &v359, 2, v357);
  if (v358 < 0)
    operator delete(v357[0]);
  v285 = v360;
  if (v360)
  {
    v286 = (unint64_t *)&v360->__shared_owners_;
    do
      v287 = __ldaxr(v286);
    while (__stlxr(v287 - 1, v286));
    if (!v287)
    {
      ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
      std::__shared_weak_count::__release_weak(v285);
    }
  }
  v288 = Scalar;
  Scalar = 0;
  if (v288)
    (*((void (**)(std::__shared_weak_count_vtbl *))v288->~__shared_weak_count + 1))(v288);
  v289 = v470;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v355 = Scalar;
  if (Scalar)
  {
    v290 = (std::__shared_weak_count *)operator new();
    v291 = Scalar;
    v290->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v290->__shared_owners_ = 0;
    v290->__shared_weak_owners_ = 0;
    v290[1].__vftable = v291;
  }
  else
  {
    v290 = 0;
  }
  v356 = v290;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v353, "target_width");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v289 + 24))(v289, &v355, 3, v353);
  if (v354 < 0)
    operator delete(v353[0]);
  v292 = v356;
  if (v356)
  {
    v293 = (unint64_t *)&v356->__shared_owners_;
    do
      v294 = __ldaxr(v293);
    while (__stlxr(v294 - 1, v293));
    if (!v294)
    {
      ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
      std::__shared_weak_count::__release_weak(v292);
    }
  }
  v295 = Scalar;
  Scalar = 0;
  if (v295)
    (*((void (**)(std::__shared_weak_count_vtbl *))v295->~__shared_weak_count + 1))(v295);
  v296 = *a3;
  v351 = v470;
  if (v470)
  {
    v297 = (std::__shared_weak_count *)operator new();
    v298 = (std::__shared_weak_count_vtbl *)v470;
    v297->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v297->__shared_owners_ = 0;
    v297->__shared_weak_owners_ = 0;
    v297[1].__vftable = v298;
  }
  else
  {
    v297 = 0;
  }
  v352 = v297;
  v470 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v296 + 56))(v296, &v351);
  v299 = v352;
  if (v352)
  {
    v300 = (unint64_t *)&v352->__shared_owners_;
    do
      v301 = __ldaxr(v300);
    while (__stlxr(v301 - 1, v300));
    if (!v301)
    {
      ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
      std::__shared_weak_count::__release_weak(v299);
    }
  }
  v302 = v470;
  v470 = 0;
  if (v302)
    (*(void (**)(void *))(*(_QWORD *)v302 + 8))(v302);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v465);
  v303 = v465;
  std::string::basic_string[abi:ne180100]<0>(v347, "box_coordinate_mode");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v347, 0, (uint64_t *)&v462);
  v349 = v462;
  if (v462)
  {
    v304 = (std::__shared_weak_count *)operator new();
    v305 = (std::__shared_weak_count_vtbl *)v462;
    v304->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v304->__shared_owners_ = 0;
    v304->__shared_weak_owners_ = 0;
    v304[1].__vftable = v305;
  }
  else
  {
    v304 = 0;
  }
  v350 = v304;
  v462 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v470, "CENTER_SIZE_HEIGHT_FIRST");
  std::string::basic_string[abi:ne180100]<0>(&v473, "CENTER_SIZE_WIDTH_FIRST");
  std::string::basic_string[abi:ne180100]<0>(v475, "CORNERS_HEIGHT_FIRST");
  std::string::basic_string[abi:ne180100]<0>(v476, "CORNERS_WIDTH_FIRST");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v470, 4);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v303 + 24))(v303, &v349, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v476[i + 2]) < 0)
      operator delete((void *)v476[i]);
  }
  v307 = v350;
  if (v350)
  {
    v308 = (unint64_t *)&v350->__shared_owners_;
    do
      v309 = __ldaxr(v308);
    while (__stlxr(v309 - 1, v308));
    if (!v309)
    {
      ((void (*)(std::__shared_weak_count *))v307->__on_zero_shared)(v307);
      std::__shared_weak_count::__release_weak(v307);
    }
  }
  v310 = v462;
  v462 = 0;
  if (v310)
    (*(void (**)(void *))(*(_QWORD *)v310 + 8))(v310);
  if (v348 < 0)
    operator delete(v347[0]);
  v311 = v465;
  std::string::basic_string[abi:ne180100]<0>(v343, "sampling_mode");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v343, 0, (uint64_t *)&v462);
  v345 = v462;
  if (v462)
  {
    v312 = (std::__shared_weak_count *)operator new();
    v313 = (std::__shared_weak_count_vtbl *)v462;
    v312->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v312->__shared_owners_ = 0;
    v312->__shared_weak_owners_ = 0;
    v312[1].__vftable = v313;
  }
  else
  {
    v312 = 0;
  }
  v346 = v312;
  v462 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v470, "ALIGN_CORNERS");
  std::string::basic_string[abi:ne180100]<0>(&v473, "DEFAULT");
  std::string::basic_string[abi:ne180100]<0>(v475, "OFFSET_CORNERS");
  std::string::basic_string[abi:ne180100]<0>(v476, "STRICT_ALIGN_CORNERS");
  std::string::basic_string[abi:ne180100]<0>(v477, "UNALIGN_CORNERS");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v470, 5);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v311 + 24))(v311, &v345, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -15; j -= 3)
  {
    if (SHIBYTE(v477[j + 2]) < 0)
      operator delete((void *)v477[j]);
  }
  v315 = v346;
  if (v346)
  {
    v316 = (unint64_t *)&v346->__shared_owners_;
    do
      v317 = __ldaxr(v316);
    while (__stlxr(v317 - 1, v316));
    if (!v317)
    {
      ((void (*)(std::__shared_weak_count *))v315->__on_zero_shared)(v315);
      std::__shared_weak_count::__release_weak(v315);
    }
  }
  v318 = v462;
  v462 = 0;
  if (v318)
    (*(void (**)(void *))(*(_QWORD *)v318 + 8))(v318);
  if (v344 < 0)
    operator delete(v343[0]);
  v319 = v465;
  std::string::basic_string[abi:ne180100]<0>(v339, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v339, 1, (uint64_t *)&v462);
  v341 = v462;
  if (v462)
  {
    v320 = (std::__shared_weak_count *)operator new();
    v321 = (std::__shared_weak_count_vtbl *)v462;
    v320->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v320->__shared_owners_ = 0;
    v320->__shared_weak_owners_ = 0;
    v320[1].__vftable = v321;
  }
  else
  {
    v320 = 0;
  }
  v342 = v320;
  v462 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v470, "bf16");
  std::string::basic_string[abi:ne180100]<0>(&v473, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v475, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v476, "int32");
  std::string::basic_string[abi:ne180100]<0>(v477, "int8");
  std::string::basic_string[abi:ne180100]<0>(v478, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v470, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v319 + 24))(v319, &v341, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (k = 0; k != -18; k -= 3)
  {
    if (SHIBYTE(v478[k + 2]) < 0)
      operator delete((void *)v478[k]);
  }
  v323 = v342;
  if (v342)
  {
    v324 = (unint64_t *)&v342->__shared_owners_;
    do
      v325 = __ldaxr(v324);
    while (__stlxr(v325 - 1, v324));
    if (!v325)
    {
      ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
      std::__shared_weak_count::__release_weak(v323);
    }
  }
  v326 = v462;
  v462 = 0;
  if (v326)
    (*(void (**)(void *))(*(_QWORD *)v326 + 8))(v326);
  if (v340 < 0)
    operator delete(v339[0]);
  v327 = *a3;
  v337 = v465;
  if (v465)
  {
    v328 = (std::__shared_weak_count *)operator new();
    v329 = (std::__shared_weak_count_vtbl *)v465;
    v328->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v328->__shared_owners_ = 0;
    v328->__shared_weak_owners_ = 0;
    v328[1].__vftable = v329;
  }
  else
  {
    v328 = 0;
  }
  v338 = v328;
  v465 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v327 + 56))(v327, &v337);
  v330 = v338;
  if (v338)
  {
    v331 = (unint64_t *)&v338->__shared_owners_;
    do
      v332 = __ldaxr(v331);
    while (__stlxr(v332 - 1, v331));
    if (!v332)
    {
      ((void (*)(std::__shared_weak_count *))v330->__on_zero_shared)(v330);
      std::__shared_weak_count::__release_weak(v330);
    }
  }
  v333 = v465;
  v465 = 0;
  if (v333)
    (*(void (**)(void *))(*(_QWORD *)v333 + 8))(v333);
  if (v490)
  {
    v334 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v490);
    MEMORY[0x1E0C023A0](v334, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v449, 0);
  result = (uint64_t)v469;
  if (v469)
  {
    v336 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v469);
    return MEMORY[0x1E0C023A0](v336, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09C8448(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;

  v4 = STACK[0x558];
  STACK[0x558] = 0;
  if (v4)
    (*(void (**)(unint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 112), 0);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x490], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x580], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::Resample::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count_vtbl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count_vtbl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  _QWORD *v71;
  unsigned __int8 *v72;
  void **v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  _anonymous_namespace_ *v78;
  std::__shared_weak_count *v79;
  void **v80;
  std::__shared_weak_count *v81;
  unint64_t *p_shared_owners;
  unint64_t v83;
  void **v84;
  _QWORD *v85;
  unsigned __int8 *v86;
  void **v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  _anonymous_namespace_ *v92;
  std::__shared_weak_count *v93;
  void **v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  void **v98;
  _QWORD *v99;
  unsigned __int8 *v100;
  void **v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  _QWORD *v105;
  unsigned __int8 *v106;
  void **v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  _QWORD *v111;
  unsigned __int8 *v112;
  std::__shared_weak_count_vtbl *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  _QWORD *v117;
  unsigned __int8 *v118;
  void **v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  _QWORD *v123;
  unsigned __int8 *v124;
  void **v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  void ***v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  void *v146;
  _QWORD *v147;
  void *v148;
  unint64_t v149;
  void **v150;
  void **v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  char *v156;
  uint64_t v157;
  char *v158;
  void **v159;
  void **v160;
  char *v161;
  __int128 v162;
  void **v163;
  uint64_t v164;
  void *v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  _QWORD *v171;
  void *v172;
  _QWORD *v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  _OWORD *v183;
  unsigned __int8 *v184;
  void **v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  uint64_t v189;
  std::__shared_weak_count_vtbl *v190;
  std::__shared_weak_count *v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  uint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  void **v198;
  std::__shared_weak_count *v199;
  std::__shared_weak_count_vtbl *v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  std::__shared_weak_count_vtbl *v204;
  void **v205;
  std::__shared_weak_count *v206;
  std::__shared_weak_count_vtbl *v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  std::__shared_weak_count_vtbl *v211;
  void **v212;
  std::__shared_weak_count *v213;
  std::__shared_weak_count_vtbl *v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  std::__shared_weak_count_vtbl *v218;
  void **v219;
  std::__shared_weak_count *v220;
  std::__shared_weak_count_vtbl *v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  std::__shared_weak_count_vtbl *v225;
  uint64_t v226;
  std::__shared_weak_count *v227;
  void **v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  void **v232;
  void **v233;
  std::__shared_weak_count *v234;
  std::__shared_weak_count_vtbl *v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  std::__shared_weak_count_vtbl *v239;
  void **v240;
  std::__shared_weak_count *v241;
  std::__shared_weak_count_vtbl *v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  std::__shared_weak_count_vtbl *v246;
  void **v247;
  std::__shared_weak_count *v248;
  std::__shared_weak_count_vtbl *v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  std::__shared_weak_count_vtbl *v253;
  void **v254;
  std::__shared_weak_count *v255;
  std::__shared_weak_count_vtbl *v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  std::__shared_weak_count_vtbl *v260;
  void **v261;
  std::__shared_weak_count *v262;
  std::__shared_weak_count_vtbl *v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  std::__shared_weak_count_vtbl *v267;
  void **v268;
  std::__shared_weak_count *v269;
  std::__shared_weak_count_vtbl *v270;
  std::__shared_weak_count *v271;
  unint64_t *v272;
  unint64_t v273;
  std::__shared_weak_count_vtbl *v274;
  void **v275;
  std::__shared_weak_count *v276;
  std::__shared_weak_count_vtbl *v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  std::__shared_weak_count_vtbl *v281;
  void **v282;
  std::__shared_weak_count *v283;
  std::__shared_weak_count_vtbl *v284;
  std::__shared_weak_count *v285;
  unint64_t *v286;
  unint64_t v287;
  std::__shared_weak_count_vtbl *v288;
  void **v289;
  std::__shared_weak_count *v290;
  std::__shared_weak_count_vtbl *v291;
  std::__shared_weak_count *v292;
  unint64_t *v293;
  unint64_t v294;
  std::__shared_weak_count_vtbl *v295;
  void **v296;
  std::__shared_weak_count *v297;
  std::__shared_weak_count_vtbl *v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  std::__shared_weak_count_vtbl *v302;
  void **v303;
  std::__shared_weak_count *v304;
  std::__shared_weak_count_vtbl *v305;
  std::__shared_weak_count *v306;
  unint64_t *v307;
  unint64_t v308;
  std::__shared_weak_count_vtbl *v309;
  uint64_t v310;
  std::__shared_weak_count *v311;
  void **v312;
  std::__shared_weak_count *v313;
  unint64_t *v314;
  unint64_t v315;
  void **v316;
  void *v317;
  std::__shared_weak_count *v318;
  std::__shared_weak_count_vtbl *v319;
  uint64_t i;
  std::__shared_weak_count *v321;
  unint64_t *v322;
  unint64_t v323;
  void *v324;
  void *v325;
  std::__shared_weak_count *v326;
  std::__shared_weak_count_vtbl *v327;
  uint64_t j;
  std::__shared_weak_count *v329;
  unint64_t *v330;
  unint64_t v331;
  void *v332;
  void *v333;
  std::__shared_weak_count *v334;
  std::__shared_weak_count_vtbl *v335;
  uint64_t k;
  std::__shared_weak_count *v337;
  unint64_t *v338;
  unint64_t v339;
  void *v340;
  void *v341;
  std::__shared_weak_count *v342;
  std::__shared_weak_count_vtbl *v343;
  uint64_t m;
  std::__shared_weak_count *v345;
  unint64_t *v346;
  unint64_t v347;
  void *v348;
  void *v349;
  std::__shared_weak_count *v350;
  std::__shared_weak_count_vtbl *v351;
  uint64_t n;
  std::__shared_weak_count *v353;
  unint64_t *v354;
  unint64_t v355;
  void *v356;
  void *v357;
  std::__shared_weak_count *v358;
  std::__shared_weak_count_vtbl *v359;
  uint64_t ii;
  std::__shared_weak_count *v361;
  unint64_t *v362;
  unint64_t v363;
  void *v364;
  uint64_t v365;
  std::__shared_weak_count *v366;
  std::__shared_weak_count_vtbl *v367;
  std::__shared_weak_count *v368;
  unint64_t *v369;
  unint64_t v370;
  void *v371;
  uint64_t v372;
  uint64_t result;
  uint64_t v374;
  void *v375;
  std::__shared_weak_count *v376;
  void *v377[2];
  char v378;
  void *v379;
  std::__shared_weak_count *v380;
  void *v381[2];
  char v382;
  void *v383;
  std::__shared_weak_count *v384;
  void *v385[2];
  char v386;
  void *v387;
  std::__shared_weak_count *v388;
  void *v389[2];
  char v390;
  void *v391;
  std::__shared_weak_count *v392;
  void *v393[2];
  char v394;
  void *v395;
  std::__shared_weak_count *v396;
  void *v397[2];
  char v398;
  void *v399;
  std::__shared_weak_count *v400;
  void **v401;
  std::__shared_weak_count *v402;
  void *v403[2];
  char v404;
  std::__shared_weak_count_vtbl *v405;
  std::__shared_weak_count *v406;
  void *v407[2];
  char v408;
  std::__shared_weak_count_vtbl *v409;
  std::__shared_weak_count *v410;
  void *v411[2];
  char v412;
  std::__shared_weak_count_vtbl *v413;
  std::__shared_weak_count *v414;
  void *v415[2];
  char v416;
  std::__shared_weak_count_vtbl *v417;
  std::__shared_weak_count *v418;
  void *v419[2];
  char v420;
  void *v421[2];
  char v422;
  std::__shared_weak_count_vtbl *v423;
  std::__shared_weak_count *v424;
  void *v425[2];
  char v426;
  void *v427[2];
  char v428;
  std::__shared_weak_count_vtbl *v429;
  std::__shared_weak_count *v430;
  void *v431[2];
  char v432;
  void *v433[2];
  char v434;
  std::__shared_weak_count_vtbl *v435;
  std::__shared_weak_count *v436;
  void *v437[2];
  char v438;
  void *v439[2];
  char v440;
  std::__shared_weak_count_vtbl *v441;
  std::__shared_weak_count *v442;
  void *v443[2];
  char v444;
  void *v445[2];
  char v446;
  std::__shared_weak_count_vtbl *v447;
  std::__shared_weak_count *v448;
  void *v449[2];
  char v450;
  void *v451[2];
  char v452;
  std::__shared_weak_count_vtbl *v453;
  std::__shared_weak_count *v454;
  void *v455[2];
  char v456;
  void *v457[2];
  char v458;
  std::__shared_weak_count_vtbl *v459;
  std::__shared_weak_count *v460;
  void **v461;
  std::__shared_weak_count *v462;
  void *v463[2];
  char v464;
  std::__shared_weak_count_vtbl *v465;
  std::__shared_weak_count *v466;
  void *v467[2];
  char v468;
  void *v469[2];
  char v470;
  std::__shared_weak_count_vtbl *v471;
  std::__shared_weak_count *v472;
  void *v473[2];
  char v474;
  void *v475[2];
  char v476;
  std::__shared_weak_count_vtbl *v477;
  std::__shared_weak_count *v478;
  void *v479[2];
  char v480;
  void *v481[2];
  char v482;
  std::__shared_weak_count_vtbl *v483;
  std::__shared_weak_count *v484;
  void *v485;
  std::__shared_weak_count *v486;
  __n128 v487;
  __int128 v488;
  __int128 v489;
  void *v490[2];
  uint64_t v491;
  __n128 v492;
  __n128 v493;
  __n128 v494;
  __n128 v495;
  __n128 v496;
  __n128 v497;
  void *v498[2];
  char v499;
  void **v500;
  std::__shared_weak_count *v501;
  __n128 v502;
  void *v503[2];
  char v504;
  void **v505;
  std::__shared_weak_count *v506;
  __n128 v507;
  void *v508;
  void *v509;
  _QWORD *v510;
  void *v511;
  void *v512;
  _QWORD *v513;
  void *v514;
  void *v515;
  _QWORD *v516;
  void *v517;
  void *v518;
  _QWORD *v519;
  void *v520;
  void *v521;
  _QWORD *v522;
  __n128 v523;
  uint64_t v524;
  void *__p;
  void *v526;
  _QWORD *v527;
  void *v528;
  void *v529;
  _QWORD *v530;
  __n128 v531;
  _QWORD *v532;
  void **v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  _QWORD v539[3];
  _QWORD v540[3];
  uint64_t v541[3];
  _QWORD v542[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_on_zero_shared_weak;
  uint64_t v545;
  _QWORD v546[3];
  _QWORD *v547;
  _BYTE v548[24];
  _BYTE *v549;
  _BYTE v550[24];
  _BYTE *v551;
  uint64_t v552;

  v552 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v532 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = (std::__shared_weak_count_vtbl *)operator new(0x20uLL);
  p_on_zero_shared_weak = (uint64_t)&v11->__on_zero_shared_weak;
  v545 = (uint64_t)&v11->__on_zero_shared_weak;
  v11->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v11->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  v11->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v9;
  v11->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v10;
  Scalar = v11;
  v533 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, 0);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = operator new(0x20uLL);
  v530 = v16 + 4;
  *v16 = v12;
  v16[1] = v13;
  v16[2] = v14;
  v16[3] = v15;
  v528 = v16;
  v529 = v16 + 4;
  v534 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v528);
  v17 = MIL::IRUnknownDimension::Make(a1, 0);
  v18 = MIL::IRUnknownDimension::Make(a1, 0);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = MIL::IRUnknownDimension::Make(a1, 0);
  v21 = operator new(0x20uLL);
  v527 = v21 + 4;
  *v21 = v17;
  v21[1] = v18;
  v21[2] = v19;
  v21[3] = v20;
  __p = v21;
  v526 = v21 + 4;
  v535 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v533, 3, &v531);
  MIL::IRParameter::Make(&v531, (uint64_t *)&v520);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v520);
  v22 = v520;
  v520 = 0;
  if (v22)
    (*(void (**)(void *))(*(_QWORD *)v22 + 8))(v22);
  v23 = (std::__shared_weak_count *)v531.n128_u64[1];
  if (v531.n128_u64[1])
  {
    v24 = (unint64_t *)(v531.n128_u64[1] + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (__p)
  {
    v526 = __p;
    operator delete(__p);
  }
  if (v528)
  {
    v529 = v528;
    operator delete(v528);
  }
  if (Scalar)
  {
    p_on_zero_shared_weak = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v26 = v532;
  v27 = MIL::IRUnknownDimension::Make(a1, 0);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = MIL::IRUnknownDimension::Make(a1, 0);
  v30 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)2);
  v31 = (std::__shared_weak_count_vtbl *)operator new(0x20uLL);
  p_on_zero_shared_weak = (uint64_t)&v31->__on_zero_shared_weak;
  v545 = (uint64_t)&v31->__on_zero_shared_weak;
  v31->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v27;
  v31->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v28;
  v31->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v29;
  v31->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v30;
  Scalar = v31;
  v533 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  v32 = MIL::IRUnknownDimension::Make(a1, 0);
  v33 = MIL::IRUnknownDimension::Make(a1, 0);
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)2);
  v36 = operator new(0x20uLL);
  v530 = v36 + 4;
  *v36 = v32;
  v36[1] = v33;
  v36[2] = v34;
  v36[3] = v35;
  v528 = v36;
  v529 = v36 + 4;
  v534 = MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v528);
  v37 = MIL::IRUnknownDimension::Make(a1, 0);
  v38 = MIL::IRUnknownDimension::Make(a1, 0);
  v39 = MIL::IRUnknownDimension::Make(a1, 0);
  v40 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)2);
  v41 = operator new(0x20uLL);
  v527 = v41 + 4;
  *v41 = v37;
  v41[1] = v38;
  v41[2] = v39;
  v41[3] = v40;
  __p = v41;
  v526 = v41 + 4;
  v535 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = MIL::IRUnknownDimension::Make(a1, 0);
  v44 = MIL::IRUnknownDimension::Make(a1, 0);
  v45 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)2);
  v46 = operator new(0x20uLL);
  v522 = v46 + 4;
  *v46 = v42;
  v46[1] = v43;
  v46[2] = v44;
  v46[3] = v45;
  v520 = v46;
  v521 = v46 + 4;
  v536 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v520);
  v47 = MIL::IRUnknownDimension::Make(a1, 0);
  v48 = MIL::IRUnknownDimension::Make(a1, 0);
  v49 = MIL::IRUnknownDimension::Make(a1, 0);
  v50 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)2);
  v51 = operator new(0x20uLL);
  v519 = v51 + 4;
  *v51 = v47;
  v51[1] = v48;
  v51[2] = v49;
  v51[3] = v50;
  v517 = v51;
  v518 = v51 + 4;
  v537 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v517);
  v52 = MIL::IRUnknownDimension::Make(a1, 0);
  v53 = MIL::IRUnknownDimension::Make(a1, 0);
  v54 = MIL::IRUnknownDimension::Make(a1, 0);
  v55 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)2);
  v56 = operator new(0x20uLL);
  v516 = v56 + 4;
  *v56 = v52;
  v56[1] = v53;
  v56[2] = v54;
  v56[3] = v55;
  v514 = v56;
  v515 = v56 + 4;
  v538 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v514);
  v57 = MIL::IRUnknownDimension::Make(a1, 0);
  v58 = MIL::IRUnknownDimension::Make(a1, 0);
  v59 = MIL::IRUnknownDimension::Make(a1, 0);
  v60 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)2);
  v61 = operator new(0x20uLL);
  v513 = v61 + 4;
  *v61 = v57;
  v61[1] = v58;
  v61[2] = v59;
  v61[3] = v60;
  v511 = v61;
  v512 = v61 + 4;
  v539[0] = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v511);
  v62 = MIL::IRUnknownDimension::Make(a1, 0);
  v63 = MIL::IRUnknownDimension::Make(a1, 0);
  v64 = MIL::IRUnknownDimension::Make(a1, 0);
  v65 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)2);
  v66 = operator new(0x20uLL);
  v510 = v66 + 4;
  *v66 = v62;
  v66[1] = v63;
  v66[2] = v64;
  v66[3] = v65;
  v508 = v66;
  v509 = v66 + 4;
  v539[1] = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v508);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v533, 8, &v523);
  MIL::IRParameter::Make(&v523, &v524);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v26, "coordinates", &v524);
  v67 = v524;
  v524 = 0;
  if (v67)
    (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
  v68 = (std::__shared_weak_count *)v523.n128_u64[1];
  if (v523.n128_u64[1])
  {
    v69 = (unint64_t *)(v523.n128_u64[1] + 8);
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  if (v508)
  {
    v509 = v508;
    operator delete(v508);
  }
  if (v511)
  {
    v512 = v511;
    operator delete(v511);
  }
  if (v514)
  {
    v515 = v514;
    operator delete(v514);
  }
  if (v517)
  {
    v518 = v517;
    operator delete(v517);
  }
  if (v520)
  {
    v521 = v520;
    operator delete(v520);
  }
  if (__p)
  {
    v526 = __p;
    operator delete(__p);
  }
  if (v528)
  {
    v529 = v528;
    operator delete(v528);
  }
  if (Scalar)
  {
    p_on_zero_shared_weak = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v71 = v532;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v507);
  MIL::IRParameter::Make(&v507, (uint64_t *)&v533);
  v72 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[19],std::unique_ptr<MIL::IRParameter>>(v71, "coordinates_format", (uint64_t *)&v533);
  v73 = v533;
  v533 = 0;
  if (v73)
    (*((void (**)(void **))*v73 + 1))(v73);
  v74 = (std::__shared_weak_count *)v507.n128_u64[1];
  if (v507.n128_u64[1])
  {
    v75 = (unint64_t *)(v507.n128_u64[1] + 8);
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v72 + 5) + 32))(*((_QWORD *)v72 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v72 + 5) + 48))(*((_QWORD *)v72 + 5), 1);
  v77 = *((_QWORD *)v72 + 5);
  v78 = (_anonymous_namespace_ *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  std::string::basic_string[abi:ne180100]<0>(v503, "xy");
  MIL::IRTensorValueType::MakeStringValue(v78, (const MIL::IRTensorValueType *)v503, &v533);
  v505 = v533;
  if (v533)
  {
    v79 = (std::__shared_weak_count *)operator new();
    v80 = v533;
    v79->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992A68;
    v79->__shared_owners_ = 0;
    v79->__shared_weak_owners_ = 0;
    v79[1].__vftable = (std::__shared_weak_count_vtbl *)v80;
  }
  else
  {
    v79 = 0;
  }
  v506 = v79;
  v533 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v77 + 112))(v77, &v505);
  v81 = v506;
  if (v506)
  {
    p_shared_owners = (unint64_t *)&v506->__shared_owners_;
    do
      v83 = __ldaxr(p_shared_owners);
    while (__stlxr(v83 - 1, p_shared_owners));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = v533;
  v533 = 0;
  if (v84)
    (*((void (**)(void **))*v84 + 1))(v84);
  if (v504 < 0)
    operator delete(v503[0]);
  v85 = v532;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v502);
  MIL::IRParameter::Make(&v502, (uint64_t *)&v533);
  v86 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v85, "coordinates_type", (uint64_t *)&v533);
  v87 = v533;
  v533 = 0;
  if (v87)
    (*((void (**)(void **))*v87 + 1))(v87);
  v88 = (std::__shared_weak_count *)v502.n128_u64[1];
  if (v502.n128_u64[1])
  {
    v89 = (unint64_t *)(v502.n128_u64[1] + 8);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v86 + 5) + 32))(*((_QWORD *)v86 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v86 + 5) + 48))(*((_QWORD *)v86 + 5), 1);
  v91 = *((_QWORD *)v86 + 5);
  v92 = (_anonymous_namespace_ *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  std::string::basic_string[abi:ne180100]<0>(v498, "absolute");
  MIL::IRTensorValueType::MakeStringValue(v92, (const MIL::IRTensorValueType *)v498, &v533);
  v500 = v533;
  if (v533)
  {
    v93 = (std::__shared_weak_count *)operator new();
    v94 = v533;
    v93->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992A68;
    v93->__shared_owners_ = 0;
    v93->__shared_weak_owners_ = 0;
    v93[1].__vftable = (std::__shared_weak_count_vtbl *)v94;
  }
  else
  {
    v93 = 0;
  }
  v501 = v93;
  v533 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v91 + 112))(v91, &v500);
  v95 = v501;
  if (v501)
  {
    v96 = (unint64_t *)&v501->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = v533;
  v533 = 0;
  if (v98)
    (*((void (**)(void **))*v98 + 1))(v98);
  if (v499 < 0)
    operator delete(v498[0]);
  v99 = v532;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v497);
  MIL::IRParameter::Make(&v497, (uint64_t *)&v533);
  v100 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v99, "sampling_mode", (uint64_t *)&v533);
  v101 = v533;
  v533 = 0;
  if (v101)
    (*((void (**)(void **))*v101 + 1))(v101);
  v102 = (std::__shared_weak_count *)v497.n128_u64[1];
  if (v497.n128_u64[1])
  {
    v103 = (unint64_t *)(v497.n128_u64[1] + 8);
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v100 + 5) + 32))(*((_QWORD *)v100 + 5), 1);
  v105 = v532;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v496);
  MIL::IRParameter::Make(&v496, (uint64_t *)&v533);
  v106 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v105, "padding_mode", (uint64_t *)&v533);
  v107 = v533;
  v533 = 0;
  if (v107)
    (*((void (**)(void **))*v107 + 1))(v107);
  v108 = (std::__shared_weak_count *)v496.n128_u64[1];
  if (v496.n128_u64[1])
  {
    v109 = (unint64_t *)(v496.n128_u64[1] + 8);
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v106 + 5) + 32))(*((_QWORD *)v106 + 5), 1);
  v111 = v532;
  v533 = (void **)MIL::IRTensorValueType::MakeScalar(a1, 7);
  v534 = MIL::IRTensorValueType::MakeScalar(a1, 4);
  v535 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v533, 3, &v495);
  MIL::IRParameter::Make(&v495, (uint64_t *)&Scalar);
  v112 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v111, "padding_value", (uint64_t *)&Scalar);
  v113 = Scalar;
  Scalar = 0;
  if (v113)
    (*((void (**)(std::__shared_weak_count_vtbl *))v113->~__shared_weak_count + 1))(v113);
  v114 = (std::__shared_weak_count *)v495.n128_u64[1];
  if (v495.n128_u64[1])
  {
    v115 = (unint64_t *)(v495.n128_u64[1] + 8);
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v112 + 5) + 32))(*((_QWORD *)v112 + 5), 1);
  v117 = v532;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v494);
  MIL::IRParameter::Make(&v494, (uint64_t *)&v533);
  v118 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v117, "coordinates_mode", (uint64_t *)&v533);
  v119 = v533;
  v533 = 0;
  if (v119)
    (*((void (**)(void **))*v119 + 1))(v119);
  v120 = (std::__shared_weak_count *)v494.n128_u64[1];
  if (v494.n128_u64[1])
  {
    v121 = (unint64_t *)(v494.n128_u64[1] + 8);
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v118 + 5) + 32))(*((_QWORD *)v118 + 5), 1);
  v123 = v532;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v493);
  MIL::IRParameter::Make(&v493, (uint64_t *)&v533);
  v124 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v123, "align_corners", (uint64_t *)&v533);
  v125 = v533;
  v533 = 0;
  if (v125)
    (*((void (**)(void **))*v125 + 1))(v125);
  v126 = (std::__shared_weak_count *)v493.n128_u64[1];
  if (v493.n128_u64[1])
  {
    v127 = (unint64_t *)(v493.n128_u64[1] + 8);
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v124 + 5) + 32))(*((_QWORD *)v124 + 5), 1);
  v514 = 0;
  v129 = operator new();
  *(_QWORD *)v129 = 0;
  *(_QWORD *)(v129 + 8) = 0;
  *(_QWORD *)(v129 + 16) = 0;
  v533 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v514, (void **)v129);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v533, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)v514, 1uLL);
  v130 = (void ***)v514;
  v131 = MIL::IRUnknownDimension::Make(a1, 0);
  v132 = MIL::IRUnknownDimension::Make(a1, 0);
  v133 = MIL::IRUnknownDimension::Make(a1, 0);
  v134 = MIL::IRUnknownDimension::Make(a1, 0);
  v135 = operator new(0x20uLL);
  v530 = v135 + 4;
  *v135 = v131;
  v135[1] = v132;
  v135[2] = v133;
  v135[3] = v134;
  v528 = v135;
  v529 = v135 + 4;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v528);
  v136 = MIL::IRUnknownDimension::Make(a1, 0);
  v137 = MIL::IRUnknownDimension::Make(a1, 0);
  v138 = MIL::IRUnknownDimension::Make(a1, 0);
  v139 = MIL::IRUnknownDimension::Make(a1, 0);
  v140 = operator new(0x20uLL);
  v527 = v140 + 4;
  *v140 = v136;
  v140[1] = v137;
  v140[2] = v138;
  v140[3] = v139;
  __p = v140;
  v526 = v140 + 4;
  p_on_zero_shared_weak = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v141 = MIL::IRUnknownDimension::Make(a1, 0);
  v142 = MIL::IRUnknownDimension::Make(a1, 0);
  v143 = MIL::IRUnknownDimension::Make(a1, 0);
  v144 = MIL::IRUnknownDimension::Make(a1, 0);
  v145 = operator new(0x20uLL);
  v522 = v145 + 4;
  *v145 = v141;
  v145[1] = v142;
  v145[2] = v143;
  v145[3] = v144;
  v520 = v145;
  v521 = v145 + 4;
  v545 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v520);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v492);
  MIL::IRParameter::Make(&v492, (uint64_t *)&v511);
  v146 = v511;
  v517 = v511;
  if (v511)
  {
    v147 = (_QWORD *)operator new();
    v148 = v511;
    *v147 = &unk_1EA99F888;
    v147[1] = 0;
    v147[2] = 0;
    v147[3] = v148;
  }
  else
  {
    v147 = 0;
  }
  v518 = v147;
  v511 = 0;
  v149 = (unint64_t)v130[2];
  v150 = v130[1];
  if ((unint64_t)v150 >= v149)
  {
    v152 = ((char *)v150 - (char *)*v130) >> 4;
    v153 = v152 + 1;
    if ((unint64_t)(v152 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v154 = v149 - (_QWORD)*v130;
    if (v154 >> 3 > v153)
      v153 = v154 >> 3;
    if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFF0)
      v155 = 0xFFFFFFFFFFFFFFFLL;
    else
      v155 = v153;
    v537 = (uint64_t)(v130 + 2);
    v156 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v130 + 2), v155);
    v158 = &v156[16 * v152];
    *(_QWORD *)v158 = v146;
    *((_QWORD *)v158 + 1) = v147;
    v518 = 0;
    v517 = 0;
    v160 = *v130;
    v159 = v130[1];
    if (v159 == *v130)
    {
      v163 = v130[1];
      v161 = &v156[16 * v152];
    }
    else
    {
      v161 = &v156[16 * v152];
      do
      {
        v162 = *((_OWORD *)v159 - 1);
        v159 -= 2;
        *((_OWORD *)v161 - 1) = v162;
        v161 -= 16;
        *v159 = 0;
        v159[1] = 0;
      }
      while (v159 != v160);
      v163 = *v130;
      v159 = v130[1];
    }
    v151 = (void **)(v158 + 16);
    *v130 = (void **)v161;
    v534 = (uint64_t)v163;
    v130[1] = (void **)(v158 + 16);
    v535 = (uint64_t)v159;
    v164 = (uint64_t)v130[2];
    v130[2] = (void **)&v156[16 * v157];
    v536 = v164;
    v533 = v163;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v533);
  }
  else
  {
    *v150 = v146;
    v150[1] = v147;
    v151 = v150 + 2;
    v518 = 0;
    v517 = 0;
  }
  v130[1] = v151;
  v165 = v511;
  v511 = 0;
  if (v165)
    (*(void (**)(void *))(*(_QWORD *)v165 + 8))(v165);
  v166 = (std::__shared_weak_count *)v492.n128_u64[1];
  if (v492.n128_u64[1])
  {
    v167 = (unint64_t *)(v492.n128_u64[1] + 8);
    do
      v168 = __ldaxr(v167);
    while (__stlxr(v168 - 1, v167));
    if (!v168)
    {
      ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
      std::__shared_weak_count::__release_weak(v166);
    }
  }
  if (v520)
  {
    v521 = v520;
    operator delete(v520);
  }
  if (__p)
  {
    v526 = __p;
    operator delete(__p);
  }
  if (v528)
  {
    v529 = v528;
    operator delete(v528);
  }
  *(_OWORD *)v490 = *(_OWORD *)a2;
  v491 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v169 = (uint64_t)v532;
  *(_QWORD *)&v489 = v532;
  if (v532)
  {
    v170 = (_QWORD *)operator new();
    *v170 = &unk_1EA99F8E8;
    v170[1] = 0;
    v170[2] = 0;
    v170[3] = v169;
  }
  else
  {
    v170 = 0;
  }
  *((_QWORD *)&v489 + 1) = v170;
  v532 = 0;
  *(_QWORD *)&v488 = v514;
  if (v514)
  {
    v171 = (_QWORD *)operator new();
    v172 = v514;
    *v171 = &unk_1EA99F948;
    v171[1] = 0;
    v171[2] = 0;
    v171[3] = v172;
  }
  else
  {
    v171 = 0;
  }
  *((_QWORD *)&v488 + 1) = v171;
  v514 = 0;
  v551 = 0;
  v549 = 0;
  MIL::IROperator::Make((__int128 *)v490, &v489, &v488, (uint64_t)v550, (uint64_t)v548, a3);
  v173 = v549;
  if (v549 == v548)
  {
    v174 = 4;
    v173 = v548;
  }
  else
  {
    if (!v549)
      goto LABEL_151;
    v174 = 5;
  }
  (*(void (**)(void))(*v173 + 8 * v174))();
LABEL_151:
  v175 = v551;
  if (v551 == v550)
  {
    v176 = 4;
    v175 = v550;
    goto LABEL_155;
  }
  if (v551)
  {
    v176 = 5;
LABEL_155:
    (*(void (**)(void))(*v175 + 8 * v176))();
  }
  v177 = (std::__shared_weak_count *)*((_QWORD *)&v488 + 1);
  if (*((_QWORD *)&v488 + 1))
  {
    v178 = (unint64_t *)(*((_QWORD *)&v488 + 1) + 8);
    do
      v179 = __ldaxr(v178);
    while (__stlxr(v179 - 1, v178));
    if (!v179)
    {
      ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
      std::__shared_weak_count::__release_weak(v177);
    }
  }
  v180 = (std::__shared_weak_count *)*((_QWORD *)&v489 + 1);
  if (*((_QWORD *)&v489 + 1))
  {
    v181 = (unint64_t *)(*((_QWORD *)&v489 + 1) + 8);
    do
      v182 = __ldaxr(v181);
    while (__stlxr(v182 - 1, v181));
    if (!v182)
    {
      ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
      std::__shared_weak_count::__release_weak(v180);
    }
  }
  if (SHIBYTE(v491) < 0)
    operator delete(v490[0]);
  v528 = 0;
  v183 = (_OWORD *)operator new();
  *v183 = 0u;
  v183[1] = 0u;
  *((_DWORD *)v183 + 8) = 1065353216;
  v528 = v183;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v487);
  MIL::IRParameter::Make(&v487, (uint64_t *)&v533);
  v184 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v183, "minimum_compute_type", (uint64_t *)&v533);
  v185 = v533;
  v533 = 0;
  if (v185)
    (*((void (**)(void **))*v185 + 1))(v185);
  v186 = (std::__shared_weak_count *)v487.n128_u64[1];
  if (v487.n128_u64[1])
  {
    v187 = (unint64_t *)(v487.n128_u64[1] + 8);
    do
      v188 = __ldaxr(v187);
    while (__stlxr(v188 - 1, v187));
    if (!v188)
    {
      ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
      std::__shared_weak_count::__release_weak(v186);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v184 + 5) + 32))(*((_QWORD *)v184 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v184 + 5) + 48))(*((_QWORD *)v184 + 5), 1);
  v189 = *a3;
  v190 = (std::__shared_weak_count_vtbl *)v528;
  v485 = v528;
  if (v528)
  {
    v191 = (std::__shared_weak_count *)operator new();
    v191->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v191->__shared_owners_ = 0;
    v191->__shared_weak_owners_ = 0;
    v191[1].__vftable = v190;
  }
  else
  {
    v191 = 0;
  }
  v486 = v191;
  v528 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v189 + 184))(v189, &v485);
  v192 = v486;
  if (v486)
  {
    v193 = (unint64_t *)&v486->__shared_owners_;
    do
      v194 = __ldaxr(v193);
    while (__stlxr(v194 - 1, v193));
    if (!v194)
    {
      ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
      std::__shared_weak_count::__release_weak(v192);
    }
  }
  v195 = *a3;
  v546[0] = &off_1EA99FBD8;
  v546[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceResample;
  v547 = v546;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v195 + 200))(v195, v546);
  v196 = v547;
  if (v547 == v546)
  {
    v197 = 4;
    v196 = v546;
  }
  else
  {
    if (!v547)
      goto LABEL_188;
    v197 = 5;
  }
  (*(void (**)(void))(*v196 + 8 * v197))();
LABEL_188:
  MIL::Validation::TensorDTypeConstraints::Make(&v533);
  v198 = v533;
  std::string::basic_string[abi:ne180100]<0>(v481, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v481, 0, (uint64_t *)&Scalar);
  v483 = Scalar;
  if (Scalar)
  {
    v199 = (std::__shared_weak_count *)operator new();
    v200 = Scalar;
    v199->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v199->__shared_owners_ = 0;
    v199->__shared_weak_owners_ = 0;
    v199[1].__vftable = v200;
  }
  else
  {
    v199 = 0;
  }
  v484 = v199;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v479, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v198 + 3))(v198, &v483, v479);
  if (v480 < 0)
    operator delete(v479[0]);
  v201 = v484;
  if (v484)
  {
    v202 = (unint64_t *)&v484->__shared_owners_;
    do
      v203 = __ldaxr(v202);
    while (__stlxr(v203 - 1, v202));
    if (!v203)
    {
      ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
      std::__shared_weak_count::__release_weak(v201);
    }
  }
  v204 = Scalar;
  Scalar = 0;
  if (v204)
    (*((void (**)(std::__shared_weak_count_vtbl *))v204->~__shared_weak_count + 1))(v204);
  if (v482 < 0)
    operator delete(v481[0]);
  v205 = v533;
  std::string::basic_string[abi:ne180100]<0>(v475, "coordinates");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v475, 0, (uint64_t *)&Scalar);
  v477 = Scalar;
  if (Scalar)
  {
    v206 = (std::__shared_weak_count *)operator new();
    v207 = Scalar;
    v206->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v206->__shared_owners_ = 0;
    v206->__shared_weak_owners_ = 0;
    v206[1].__vftable = v207;
  }
  else
  {
    v206 = 0;
  }
  v478 = v206;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v473, "U");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v205 + 3))(v205, &v477, v473);
  if (v474 < 0)
    operator delete(v473[0]);
  v208 = v478;
  if (v478)
  {
    v209 = (unint64_t *)&v478->__shared_owners_;
    do
      v210 = __ldaxr(v209);
    while (__stlxr(v210 - 1, v209));
    if (!v210)
    {
      ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
      std::__shared_weak_count::__release_weak(v208);
    }
  }
  v211 = Scalar;
  Scalar = 0;
  if (v211)
    (*((void (**)(std::__shared_weak_count_vtbl *))v211->~__shared_weak_count + 1))(v211);
  if (v476 < 0)
    operator delete(v475[0]);
  v212 = v533;
  std::string::basic_string[abi:ne180100]<0>(v469, "padding_value");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v469, 0, (uint64_t *)&Scalar);
  v471 = Scalar;
  if (Scalar)
  {
    v213 = (std::__shared_weak_count *)operator new();
    v214 = Scalar;
    v213->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v213->__shared_owners_ = 0;
    v213->__shared_weak_owners_ = 0;
    v213[1].__vftable = v214;
  }
  else
  {
    v213 = 0;
  }
  v472 = v213;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v467, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v212 + 3))(v212, &v471, v467);
  if (v468 < 0)
    operator delete(v467[0]);
  v215 = v472;
  if (v472)
  {
    v216 = (unint64_t *)&v472->__shared_owners_;
    do
      v217 = __ldaxr(v216);
    while (__stlxr(v217 - 1, v216));
    if (!v217)
    {
      ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
      std::__shared_weak_count::__release_weak(v215);
    }
  }
  v218 = Scalar;
  Scalar = 0;
  if (v218)
    (*((void (**)(std::__shared_weak_count_vtbl *))v218->~__shared_weak_count + 1))(v218);
  if (v470 < 0)
    operator delete(v469[0]);
  v219 = v533;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v465 = Scalar;
  if (Scalar)
  {
    v220 = (std::__shared_weak_count *)operator new();
    v221 = Scalar;
    v220->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v220->__shared_owners_ = 0;
    v220->__shared_weak_owners_ = 0;
    v220[1].__vftable = v221;
  }
  else
  {
    v220 = 0;
  }
  v466 = v220;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v463, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v219 + 3))(v219, &v465, v463);
  if (v464 < 0)
    operator delete(v463[0]);
  v222 = v466;
  if (v466)
  {
    v223 = (unint64_t *)&v466->__shared_owners_;
    do
      v224 = __ldaxr(v223);
    while (__stlxr(v224 - 1, v223));
    if (!v224)
    {
      ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
      std::__shared_weak_count::__release_weak(v222);
    }
  }
  v225 = Scalar;
  Scalar = 0;
  if (v225)
    (*((void (**)(std::__shared_weak_count_vtbl *))v225->~__shared_weak_count + 1))(v225);
  v226 = *a3;
  v461 = v533;
  if (v533)
  {
    v227 = (std::__shared_weak_count *)operator new();
    v228 = v533;
    v227->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v227->__shared_owners_ = 0;
    v227->__shared_weak_owners_ = 0;
    v227[1].__vftable = (std::__shared_weak_count_vtbl *)v228;
  }
  else
  {
    v227 = 0;
  }
  v462 = v227;
  v533 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v226 + 56))(v226, &v461);
  v229 = v462;
  if (v462)
  {
    v230 = (unint64_t *)&v462->__shared_owners_;
    do
      v231 = __ldaxr(v230);
    while (__stlxr(v231 - 1, v230));
    if (!v231)
    {
      ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
      std::__shared_weak_count::__release_weak(v229);
    }
  }
  v232 = v533;
  v533 = 0;
  if (v232)
    (*((void (**)(void **))*v232 + 1))(v232);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v533);
  v233 = v533;
  std::string::basic_string[abi:ne180100]<0>(v457, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v457, 0, (uint64_t *)&Scalar);
  v459 = Scalar;
  if (Scalar)
  {
    v234 = (std::__shared_weak_count *)operator new();
    v235 = Scalar;
    v234->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v234->__shared_owners_ = 0;
    v234->__shared_weak_owners_ = 0;
    v234[1].__vftable = v235;
  }
  else
  {
    v234 = 0;
  }
  v460 = v234;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v455, "B");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v233 + 3))(v233, &v459, 0, v455);
  if (v456 < 0)
    operator delete(v455[0]);
  v236 = v460;
  if (v460)
  {
    v237 = (unint64_t *)&v460->__shared_owners_;
    do
      v238 = __ldaxr(v237);
    while (__stlxr(v238 - 1, v237));
    if (!v238)
    {
      ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
      std::__shared_weak_count::__release_weak(v236);
    }
  }
  v239 = Scalar;
  Scalar = 0;
  if (v239)
    (*((void (**)(std::__shared_weak_count_vtbl *))v239->~__shared_weak_count + 1))(v239);
  if (v458 < 0)
    operator delete(v457[0]);
  v240 = v533;
  std::string::basic_string[abi:ne180100]<0>(v451, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v451, 0, (uint64_t *)&Scalar);
  v453 = Scalar;
  if (Scalar)
  {
    v241 = (std::__shared_weak_count *)operator new();
    v242 = Scalar;
    v241->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v241->__shared_owners_ = 0;
    v241->__shared_weak_owners_ = 0;
    v241[1].__vftable = v242;
  }
  else
  {
    v241 = 0;
  }
  v454 = v241;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v449, "C");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v240 + 3))(v240, &v453, 1, v449);
  if (v450 < 0)
    operator delete(v449[0]);
  v243 = v454;
  if (v454)
  {
    v244 = (unint64_t *)&v454->__shared_owners_;
    do
      v245 = __ldaxr(v244);
    while (__stlxr(v245 - 1, v244));
    if (!v245)
    {
      ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
      std::__shared_weak_count::__release_weak(v243);
    }
  }
  v246 = Scalar;
  Scalar = 0;
  if (v246)
    (*((void (**)(std::__shared_weak_count_vtbl *))v246->~__shared_weak_count + 1))(v246);
  if (v452 < 0)
    operator delete(v451[0]);
  v247 = v533;
  std::string::basic_string[abi:ne180100]<0>(v445, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v445, 0, (uint64_t *)&Scalar);
  v447 = Scalar;
  if (Scalar)
  {
    v248 = (std::__shared_weak_count *)operator new();
    v249 = Scalar;
    v248->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v248->__shared_owners_ = 0;
    v248->__shared_weak_owners_ = 0;
    v248[1].__vftable = v249;
  }
  else
  {
    v248 = 0;
  }
  v448 = v248;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v443, "H_in");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v247 + 3))(v247, &v447, 2, v443);
  if (v444 < 0)
    operator delete(v443[0]);
  v250 = v448;
  if (v448)
  {
    v251 = (unint64_t *)&v448->__shared_owners_;
    do
      v252 = __ldaxr(v251);
    while (__stlxr(v252 - 1, v251));
    if (!v252)
    {
      ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
      std::__shared_weak_count::__release_weak(v250);
    }
  }
  v253 = Scalar;
  Scalar = 0;
  if (v253)
    (*((void (**)(std::__shared_weak_count_vtbl *))v253->~__shared_weak_count + 1))(v253);
  if (v446 < 0)
    operator delete(v445[0]);
  v254 = v533;
  std::string::basic_string[abi:ne180100]<0>(v439, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v439, 0, (uint64_t *)&Scalar);
  v441 = Scalar;
  if (Scalar)
  {
    v255 = (std::__shared_weak_count *)operator new();
    v256 = Scalar;
    v255->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v255->__shared_owners_ = 0;
    v255->__shared_weak_owners_ = 0;
    v255[1].__vftable = v256;
  }
  else
  {
    v255 = 0;
  }
  v442 = v255;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v437, "W_in");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v254 + 3))(v254, &v441, 3, v437);
  if (v438 < 0)
    operator delete(v437[0]);
  v257 = v442;
  if (v442)
  {
    v258 = (unint64_t *)&v442->__shared_owners_;
    do
      v259 = __ldaxr(v258);
    while (__stlxr(v259 - 1, v258));
    if (!v259)
    {
      ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
      std::__shared_weak_count::__release_weak(v257);
    }
  }
  v260 = Scalar;
  Scalar = 0;
  if (v260)
    (*((void (**)(std::__shared_weak_count_vtbl *))v260->~__shared_weak_count + 1))(v260);
  if (v440 < 0)
    operator delete(v439[0]);
  v261 = v533;
  std::string::basic_string[abi:ne180100]<0>(v433, "coordinates");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v433, 0, (uint64_t *)&Scalar);
  v435 = Scalar;
  if (Scalar)
  {
    v262 = (std::__shared_weak_count *)operator new();
    v263 = Scalar;
    v262->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v262->__shared_owners_ = 0;
    v262->__shared_weak_owners_ = 0;
    v262[1].__vftable = v263;
  }
  else
  {
    v262 = 0;
  }
  v436 = v262;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v431, "B");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v261 + 3))(v261, &v435, 0, v431);
  if (v432 < 0)
    operator delete(v431[0]);
  v264 = v436;
  if (v436)
  {
    v265 = (unint64_t *)&v436->__shared_owners_;
    do
      v266 = __ldaxr(v265);
    while (__stlxr(v266 - 1, v265));
    if (!v266)
    {
      ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
      std::__shared_weak_count::__release_weak(v264);
    }
  }
  v267 = Scalar;
  Scalar = 0;
  if (v267)
    (*((void (**)(std::__shared_weak_count_vtbl *))v267->~__shared_weak_count + 1))(v267);
  if (v434 < 0)
    operator delete(v433[0]);
  v268 = v533;
  std::string::basic_string[abi:ne180100]<0>(v427, "coordinates");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v427, 0, (uint64_t *)&Scalar);
  v429 = Scalar;
  if (Scalar)
  {
    v269 = (std::__shared_weak_count *)operator new();
    v270 = Scalar;
    v269->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v269->__shared_owners_ = 0;
    v269->__shared_weak_owners_ = 0;
    v269[1].__vftable = v270;
  }
  else
  {
    v269 = 0;
  }
  v430 = v269;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v425, "H_out");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v268 + 3))(v268, &v429, 1, v425);
  if (v426 < 0)
    operator delete(v425[0]);
  v271 = v430;
  if (v430)
  {
    v272 = (unint64_t *)&v430->__shared_owners_;
    do
      v273 = __ldaxr(v272);
    while (__stlxr(v273 - 1, v272));
    if (!v273)
    {
      ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
      std::__shared_weak_count::__release_weak(v271);
    }
  }
  v274 = Scalar;
  Scalar = 0;
  if (v274)
    (*((void (**)(std::__shared_weak_count_vtbl *))v274->~__shared_weak_count + 1))(v274);
  if (v428 < 0)
    operator delete(v427[0]);
  v275 = v533;
  std::string::basic_string[abi:ne180100]<0>(v421, "coordinates");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v421, 0, (uint64_t *)&Scalar);
  v423 = Scalar;
  if (Scalar)
  {
    v276 = (std::__shared_weak_count *)operator new();
    v277 = Scalar;
    v276->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v276->__shared_owners_ = 0;
    v276->__shared_weak_owners_ = 0;
    v276[1].__vftable = v277;
  }
  else
  {
    v276 = 0;
  }
  v424 = v276;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v419, "W_out");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v275 + 3))(v275, &v423, 2, v419);
  if (v420 < 0)
    operator delete(v419[0]);
  v278 = v424;
  if (v424)
  {
    v279 = (unint64_t *)&v424->__shared_owners_;
    do
      v280 = __ldaxr(v279);
    while (__stlxr(v280 - 1, v279));
    if (!v280)
    {
      ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
      std::__shared_weak_count::__release_weak(v278);
    }
  }
  v281 = Scalar;
  Scalar = 0;
  if (v281)
    (*((void (**)(std::__shared_weak_count_vtbl *))v281->~__shared_weak_count + 1))(v281);
  if (v422 < 0)
    operator delete(v421[0]);
  v282 = v533;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v417 = Scalar;
  if (Scalar)
  {
    v283 = (std::__shared_weak_count *)operator new();
    v284 = Scalar;
    v283->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v283->__shared_owners_ = 0;
    v283->__shared_weak_owners_ = 0;
    v283[1].__vftable = v284;
  }
  else
  {
    v283 = 0;
  }
  v418 = v283;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v415, "B");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v282 + 3))(v282, &v417, 0, v415);
  if (v416 < 0)
    operator delete(v415[0]);
  v285 = v418;
  if (v418)
  {
    v286 = (unint64_t *)&v418->__shared_owners_;
    do
      v287 = __ldaxr(v286);
    while (__stlxr(v287 - 1, v286));
    if (!v287)
    {
      ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
      std::__shared_weak_count::__release_weak(v285);
    }
  }
  v288 = Scalar;
  Scalar = 0;
  if (v288)
    (*((void (**)(std::__shared_weak_count_vtbl *))v288->~__shared_weak_count + 1))(v288);
  v289 = v533;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v413 = Scalar;
  if (Scalar)
  {
    v290 = (std::__shared_weak_count *)operator new();
    v291 = Scalar;
    v290->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v290->__shared_owners_ = 0;
    v290->__shared_weak_owners_ = 0;
    v290[1].__vftable = v291;
  }
  else
  {
    v290 = 0;
  }
  v414 = v290;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v411, "C");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v289 + 3))(v289, &v413, 1, v411);
  if (v412 < 0)
    operator delete(v411[0]);
  v292 = v414;
  if (v414)
  {
    v293 = (unint64_t *)&v414->__shared_owners_;
    do
      v294 = __ldaxr(v293);
    while (__stlxr(v294 - 1, v293));
    if (!v294)
    {
      ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
      std::__shared_weak_count::__release_weak(v292);
    }
  }
  v295 = Scalar;
  Scalar = 0;
  if (v295)
    (*((void (**)(std::__shared_weak_count_vtbl *))v295->~__shared_weak_count + 1))(v295);
  v296 = v533;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v409 = Scalar;
  if (Scalar)
  {
    v297 = (std::__shared_weak_count *)operator new();
    v298 = Scalar;
    v297->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v297->__shared_owners_ = 0;
    v297->__shared_weak_owners_ = 0;
    v297[1].__vftable = v298;
  }
  else
  {
    v297 = 0;
  }
  v410 = v297;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v407, "H_out");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v296 + 3))(v296, &v409, 2, v407);
  if (v408 < 0)
    operator delete(v407[0]);
  v299 = v410;
  if (v410)
  {
    v300 = (unint64_t *)&v410->__shared_owners_;
    do
      v301 = __ldaxr(v300);
    while (__stlxr(v301 - 1, v300));
    if (!v301)
    {
      ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
      std::__shared_weak_count::__release_weak(v299);
    }
  }
  v302 = Scalar;
  Scalar = 0;
  if (v302)
    (*((void (**)(std::__shared_weak_count_vtbl *))v302->~__shared_weak_count + 1))(v302);
  v303 = v533;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v405 = Scalar;
  if (Scalar)
  {
    v304 = (std::__shared_weak_count *)operator new();
    v305 = Scalar;
    v304->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v304->__shared_owners_ = 0;
    v304->__shared_weak_owners_ = 0;
    v304[1].__vftable = v305;
  }
  else
  {
    v304 = 0;
  }
  v406 = v304;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v403, "W_out");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v303 + 3))(v303, &v405, 3, v403);
  if (v404 < 0)
    operator delete(v403[0]);
  v306 = v406;
  if (v406)
  {
    v307 = (unint64_t *)&v406->__shared_owners_;
    do
      v308 = __ldaxr(v307);
    while (__stlxr(v308 - 1, v307));
    if (!v308)
    {
      ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
      std::__shared_weak_count::__release_weak(v306);
    }
  }
  v309 = Scalar;
  Scalar = 0;
  if (v309)
    (*((void (**)(std::__shared_weak_count_vtbl *))v309->~__shared_weak_count + 1))(v309);
  v310 = *a3;
  v401 = v533;
  if (v533)
  {
    v311 = (std::__shared_weak_count *)operator new();
    v312 = v533;
    v311->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v311->__shared_owners_ = 0;
    v311->__shared_weak_owners_ = 0;
    v311[1].__vftable = (std::__shared_weak_count_vtbl *)v312;
  }
  else
  {
    v311 = 0;
  }
  v402 = v311;
  v533 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v310 + 56))(v310, &v401);
  v313 = v402;
  if (v402)
  {
    v314 = (unint64_t *)&v402->__shared_owners_;
    do
      v315 = __ldaxr(v314);
    while (__stlxr(v315 - 1, v314));
    if (!v315)
    {
      ((void (*)(std::__shared_weak_count *))v313->__on_zero_shared)(v313);
      std::__shared_weak_count::__release_weak(v313);
    }
  }
  v316 = v533;
  v533 = 0;
  if (v316)
    (*((void (**)(void **))*v316 + 1))(v316);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v317 = __p;
  std::string::basic_string[abi:ne180100]<0>(v397, "coordinates_format");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v397, 1, (uint64_t *)&v520);
  v399 = v520;
  if (v520)
  {
    v318 = (std::__shared_weak_count *)operator new();
    v319 = (std::__shared_weak_count_vtbl *)v520;
    v318->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v318->__shared_owners_ = 0;
    v318->__shared_weak_owners_ = 0;
    v318[1].__vftable = v319;
  }
  else
  {
    v318 = 0;
  }
  v400 = v318;
  v520 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v533, "xy");
  std::string::basic_string[abi:ne180100]<0>(&v536, "yx");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v533, 2);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, _QWORD))(*(_QWORD *)v317 + 24))(v317, &v399, &Scalar, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -48; i -= 24)
  {
    if (*((char *)&v538 + i + 7) < 0)
      operator delete(*(void **)((char *)&v536 + i));
  }
  v321 = v400;
  if (v400)
  {
    v322 = (unint64_t *)&v400->__shared_owners_;
    do
      v323 = __ldaxr(v322);
    while (__stlxr(v323 - 1, v322));
    if (!v323)
    {
      ((void (*)(std::__shared_weak_count *))v321->__on_zero_shared)(v321);
      std::__shared_weak_count::__release_weak(v321);
    }
  }
  v324 = v520;
  v520 = 0;
  if (v324)
    (*(void (**)(void *))(*(_QWORD *)v324 + 8))(v324);
  if (v398 < 0)
    operator delete(v397[0]);
  v325 = __p;
  std::string::basic_string[abi:ne180100]<0>(v393, "coordinates_type");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v393, 1, (uint64_t *)&v520);
  v395 = v520;
  if (v520)
  {
    v326 = (std::__shared_weak_count *)operator new();
    v327 = (std::__shared_weak_count_vtbl *)v520;
    v326->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v326->__shared_owners_ = 0;
    v326->__shared_weak_owners_ = 0;
    v326[1].__vftable = v327;
  }
  else
  {
    v326 = 0;
  }
  v396 = v326;
  v520 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v533, "absolute");
  std::string::basic_string[abi:ne180100]<0>(&v536, "relative");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v533, 2);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, _QWORD))(*(_QWORD *)v325 + 24))(v325, &v395, &Scalar, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -48; j -= 24)
  {
    if (*((char *)&v538 + j + 7) < 0)
      operator delete(*(void **)((char *)&v536 + j));
  }
  v329 = v396;
  if (v396)
  {
    v330 = (unint64_t *)&v396->__shared_owners_;
    do
      v331 = __ldaxr(v330);
    while (__stlxr(v331 - 1, v330));
    if (!v331)
    {
      ((void (*)(std::__shared_weak_count *))v329->__on_zero_shared)(v329);
      std::__shared_weak_count::__release_weak(v329);
    }
  }
  v332 = v520;
  v520 = 0;
  if (v332)
    (*(void (**)(void *))(*(_QWORD *)v332 + 8))(v332);
  if (v394 < 0)
    operator delete(v393[0]);
  v333 = __p;
  std::string::basic_string[abi:ne180100]<0>(v389, "sampling_mode");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v389, 0, (uint64_t *)&v520);
  v391 = v520;
  if (v520)
  {
    v334 = (std::__shared_weak_count *)operator new();
    v335 = (std::__shared_weak_count_vtbl *)v520;
    v334->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v334->__shared_owners_ = 0;
    v334->__shared_weak_owners_ = 0;
    v334[1].__vftable = v335;
  }
  else
  {
    v334 = 0;
  }
  v392 = v334;
  v520 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v533, "bilinear");
  std::string::basic_string[abi:ne180100]<0>(&v536, "nearest");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v533, 2);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, _QWORD))(*(_QWORD *)v333 + 24))(v333, &v391, &Scalar, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (k = 0; k != -48; k -= 24)
  {
    if (*((char *)&v538 + k + 7) < 0)
      operator delete(*(void **)((char *)&v536 + k));
  }
  v337 = v392;
  if (v392)
  {
    v338 = (unint64_t *)&v392->__shared_owners_;
    do
      v339 = __ldaxr(v338);
    while (__stlxr(v339 - 1, v338));
    if (!v339)
    {
      ((void (*)(std::__shared_weak_count *))v337->__on_zero_shared)(v337);
      std::__shared_weak_count::__release_weak(v337);
    }
  }
  v340 = v520;
  v520 = 0;
  if (v340)
    (*(void (**)(void *))(*(_QWORD *)v340 + 8))(v340);
  if (v390 < 0)
    operator delete(v389[0]);
  v341 = __p;
  std::string::basic_string[abi:ne180100]<0>(v385, "padding_mode");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v385, 0, (uint64_t *)&v520);
  v387 = v520;
  if (v520)
  {
    v342 = (std::__shared_weak_count *)operator new();
    v343 = (std::__shared_weak_count_vtbl *)v520;
    v342->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v342->__shared_owners_ = 0;
    v342->__shared_weak_owners_ = 0;
    v342[1].__vftable = v343;
  }
  else
  {
    v342 = 0;
  }
  v388 = v342;
  v520 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v533, "border");
  std::string::basic_string[abi:ne180100]<0>(&v536, "constant");
  std::string::basic_string[abi:ne180100]<0>(v539, "reflection");
  std::string::basic_string[abi:ne180100]<0>(v540, "symmetric");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v533, 4);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, _QWORD))(*(_QWORD *)v341 + 24))(v341, &v387, &Scalar, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (m = 0; m != -12; m -= 3)
  {
    if (SHIBYTE(v540[m + 2]) < 0)
      operator delete((void *)v540[m]);
  }
  v345 = v388;
  if (v388)
  {
    v346 = (unint64_t *)&v388->__shared_owners_;
    do
      v347 = __ldaxr(v346);
    while (__stlxr(v347 - 1, v346));
    if (!v347)
    {
      ((void (*)(std::__shared_weak_count *))v345->__on_zero_shared)(v345);
      std::__shared_weak_count::__release_weak(v345);
    }
  }
  v348 = v520;
  v520 = 0;
  if (v348)
    (*(void (**)(void *))(*(_QWORD *)v348 + 8))(v348);
  if (v386 < 0)
    operator delete(v385[0]);
  v349 = __p;
  std::string::basic_string[abi:ne180100]<0>(v381, "coordinates_mode");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v381, 0, (uint64_t *)&v520);
  v383 = v520;
  if (v520)
  {
    v350 = (std::__shared_weak_count *)operator new();
    v351 = (std::__shared_weak_count_vtbl *)v520;
    v350->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v350->__shared_owners_ = 0;
    v350->__shared_weak_owners_ = 0;
    v350[1].__vftable = v351;
  }
  else
  {
    v350 = 0;
  }
  v384 = v350;
  v520 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v533, "normalized_minus_one_to_one");
  std::string::basic_string[abi:ne180100]<0>(&v536, "normalized_zero_to_one");
  std::string::basic_string[abi:ne180100]<0>(v539, "unnormalized");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v533, 3);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, _QWORD))(*(_QWORD *)v349 + 24))(v349, &v383, &Scalar, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (n = 0; n != -9; n -= 3)
  {
    if (SHIBYTE(v539[n + 2]) < 0)
      operator delete((void *)v539[n]);
  }
  v353 = v384;
  if (v384)
  {
    v354 = (unint64_t *)&v384->__shared_owners_;
    do
      v355 = __ldaxr(v354);
    while (__stlxr(v355 - 1, v354));
    if (!v355)
    {
      ((void (*)(std::__shared_weak_count *))v353->__on_zero_shared)(v353);
      std::__shared_weak_count::__release_weak(v353);
    }
  }
  v356 = v520;
  v520 = 0;
  if (v356)
    (*(void (**)(void *))(*(_QWORD *)v356 + 8))(v356);
  if (v382 < 0)
    operator delete(v381[0]);
  v357 = __p;
  std::string::basic_string[abi:ne180100]<0>(v377, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v377, 1, (uint64_t *)&v520);
  v379 = v520;
  if (v520)
  {
    v358 = (std::__shared_weak_count *)operator new();
    v359 = (std::__shared_weak_count_vtbl *)v520;
    v358->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v358->__shared_owners_ = 0;
    v358->__shared_weak_owners_ = 0;
    v358[1].__vftable = v359;
  }
  else
  {
    v358 = 0;
  }
  v380 = v358;
  v520 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v533, "bf16");
  std::string::basic_string[abi:ne180100]<0>(&v536, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v539, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v540, "int32");
  std::string::basic_string[abi:ne180100]<0>(v541, "int8");
  std::string::basic_string[abi:ne180100]<0>(v542, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v533, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v357 + 24))(v357, &v379, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (ii = 0; ii != -18; ii -= 3)
  {
    if (SHIBYTE(v542[ii + 2]) < 0)
      operator delete((void *)v542[ii]);
  }
  v361 = v380;
  if (v380)
  {
    v362 = (unint64_t *)&v380->__shared_owners_;
    do
      v363 = __ldaxr(v362);
    while (__stlxr(v363 - 1, v362));
    if (!v363)
    {
      ((void (*)(std::__shared_weak_count *))v361->__on_zero_shared)(v361);
      std::__shared_weak_count::__release_weak(v361);
    }
  }
  v364 = v520;
  v520 = 0;
  if (v364)
    (*(void (**)(void *))(*(_QWORD *)v364 + 8))(v364);
  if (v378 < 0)
    operator delete(v377[0]);
  v365 = *a3;
  v375 = __p;
  if (__p)
  {
    v366 = (std::__shared_weak_count *)operator new();
    v367 = (std::__shared_weak_count_vtbl *)__p;
    v366->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v366->__shared_owners_ = 0;
    v366->__shared_weak_owners_ = 0;
    v366[1].__vftable = v367;
  }
  else
  {
    v366 = 0;
  }
  v376 = v366;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v365 + 56))(v365, &v375);
  v368 = v376;
  if (v376)
  {
    v369 = (unint64_t *)&v376->__shared_owners_;
    do
      v370 = __ldaxr(v369);
    while (__stlxr(v370 - 1, v369));
    if (!v370)
    {
      ((void (*)(std::__shared_weak_count *))v368->__on_zero_shared)(v368);
      std::__shared_weak_count::__release_weak(v368);
    }
  }
  v371 = __p;
  __p = 0;
  if (v371)
    (*(void (**)(void *))(*(_QWORD *)v371 + 8))(v371);
  if (v528)
  {
    v372 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v528);
    MEMORY[0x1E0C023A0](v372, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v514, 0);
  result = (uint64_t)v532;
  if (v532)
  {
    v374 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v532);
    return MEMORY[0x1E0C023A0](v374, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09CBF8C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  unint64_t v3;
  uint64_t v4;

  v3 = STACK[0x628];
  STACK[0x628] = 0;
  if (v3)
    (*(void (**)(unint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x640], 0);
  v4 = *v1;
  *v1 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x5C8], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x668], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::Resize::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  std::__shared_weak_count_vtbl *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  unsigned __int8 *v33;
  void **v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  unsigned __int8 *v39;
  void **v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  unsigned __int8 *v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  char **v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t *v72;
  char *v73;
  char *v74;
  char *v75;
  __int128 v76;
  void **v77;
  char *v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  char **v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  _OWORD *v97;
  unsigned __int8 *v98;
  void **v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  std::__shared_weak_count_vtbl *v104;
  std::__shared_weak_count *v105;
  std::__shared_weak_count *v106;
  unint64_t *p_shared_owners;
  unint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  void **v112;
  std::__shared_weak_count *v113;
  std::__shared_weak_count_vtbl *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count_vtbl *v118;
  void **v119;
  std::__shared_weak_count *v120;
  std::__shared_weak_count_vtbl *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count_vtbl *v125;
  void **v126;
  std::__shared_weak_count *v127;
  std::__shared_weak_count_vtbl *v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count_vtbl *v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  void **v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  void **v139;
  void **v140;
  std::__shared_weak_count *v141;
  std::__shared_weak_count_vtbl *v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count_vtbl *v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  void **v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  void **v153;
  void *v154;
  std::__shared_weak_count *v155;
  std::__shared_weak_count_vtbl *v156;
  uint64_t i;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  void *v161;
  void *v162;
  std::__shared_weak_count *v163;
  std::__shared_weak_count_vtbl *v164;
  uint64_t j;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  void *v169;
  void *v170;
  std::__shared_weak_count *v171;
  std::__shared_weak_count_vtbl *v172;
  uint64_t k;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  void *v177;
  uint64_t v178;
  std::__shared_weak_count *v179;
  std::__shared_weak_count_vtbl *v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  void *v184;
  uint64_t v185;
  uint64_t result;
  uint64_t v187;
  void *v188;
  std::__shared_weak_count *v189;
  void *v190[2];
  char v191;
  void *v192;
  std::__shared_weak_count *v193;
  void *v194[2];
  char v195;
  void *v196;
  std::__shared_weak_count *v197;
  void *v198[2];
  char v199;
  void *v200;
  std::__shared_weak_count *v201;
  void **v202;
  std::__shared_weak_count *v203;
  void *v204[2];
  char v205;
  void *v206[2];
  char v207;
  std::__shared_weak_count_vtbl *v208;
  std::__shared_weak_count *v209;
  void **v210;
  std::__shared_weak_count *v211;
  void *v212[2];
  char v213;
  std::__shared_weak_count_vtbl *v214;
  std::__shared_weak_count *v215;
  void *v216[2];
  char v217;
  void *v218[2];
  char v219;
  std::__shared_weak_count_vtbl *v220;
  std::__shared_weak_count *v221;
  void *v222[2];
  char v223;
  void *v224[2];
  char v225;
  std::__shared_weak_count_vtbl *v226;
  std::__shared_weak_count *v227;
  void *v228;
  std::__shared_weak_count *v229;
  __n128 v230;
  __int128 v231;
  __int128 v232;
  void *v233[2];
  uint64_t v234;
  void *v235;
  void *v236;
  _QWORD *v237;
  __n128 v238;
  uint64_t v239;
  uint64_t v240;
  _QWORD *v241;
  char **v242;
  __n128 v243;
  __n128 v244;
  __n128 v245;
  __n128 v246;
  void *__p;
  void *v248;
  _QWORD *v249;
  void *v250;
  void *v251;
  _QWORD *v252;
  void *v253;
  void *v254;
  _QWORD *v255;
  __n128 v256;
  _QWORD *v257;
  void **v258;
  uint64_t v259;
  uint64_t v260;
  _QWORD v261[3];
  _QWORD v262[3];
  _QWORD v263[3];
  _QWORD v264[3];
  uint64_t v265[3];
  uint64_t v266[3];
  _QWORD v267[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  _QWORD v272[3];
  _QWORD *v273;
  _BYTE v274[24];
  _BYTE *v275;
  _QWORD v276[3];
  _QWORD *v277;
  uint64_t v278;

  v278 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v257 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v269 = (uint64_t)&v8->~__shared_weak_count_0;
  v270 = (uint64_t)&v8->~__shared_weak_count_0;
  v258 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v253 = v10;
  *v10 = v9;
  v255 = v10 + 1;
  v254 = v10 + 1;
  v259 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v253);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v250 = v12;
  *v12 = v11;
  v252 = v12 + 1;
  v251 = v12 + 1;
  v260 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v250);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v249 = v14 + 1;
  v248 = v14 + 1;
  v261[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v258, 4, &v256);
  MIL::IRParameter::Make(&v256, (uint64_t *)&v235);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v235);
  v15 = v235;
  v235 = 0;
  if (v15)
    (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v256.n128_u64[1];
  if (v256.n128_u64[1])
  {
    v17 = (unint64_t *)(v256.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v248 = __p;
    operator delete(__p);
  }
  if (v250)
  {
    v251 = v250;
    operator delete(v250);
  }
  if (v253)
  {
    v254 = v253;
    operator delete(v253);
  }
  if (Scalar)
  {
    v269 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v19 = v257;
  v20 = MIL::IRUnknownDimension::Make(a1, 0);
  v21 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v21;
  v21->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v20;
  v269 = (uint64_t)&v21->~__shared_weak_count_0;
  v270 = (uint64_t)&v21->~__shared_weak_count_0;
  v258 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&Scalar);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = operator new(8uLL);
  v253 = v23;
  *v23 = v22;
  v255 = v23 + 1;
  v254 = v23 + 1;
  v259 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v253);
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = operator new(8uLL);
  v250 = v25;
  *v25 = v24;
  v252 = v25 + 1;
  v251 = v25 + 1;
  v260 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v250);
  v26 = MIL::IRUnknownDimension::Make(a1, 0);
  v27 = operator new(8uLL);
  __p = v27;
  *v27 = v26;
  v249 = v27 + 1;
  v248 = v27 + 1;
  v261[0] = MIL::IRTensorValueType::MakeWithShape(a1, 16, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v258, 4, &v246);
  MIL::IRParameter::Make(&v246, (uint64_t *)&v235);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v19, "shape", (uint64_t *)&v235);
  v28 = v235;
  v235 = 0;
  if (v28)
    (*(void (**)(void *))(*(_QWORD *)v28 + 8))(v28);
  v29 = (std::__shared_weak_count *)v246.n128_u64[1];
  if (v246.n128_u64[1])
  {
    v30 = (unint64_t *)(v246.n128_u64[1] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (__p)
  {
    v248 = __p;
    operator delete(__p);
  }
  if (v250)
  {
    v251 = v250;
    operator delete(v250);
  }
  if (v253)
  {
    v254 = v253;
    operator delete(v253);
  }
  if (Scalar)
  {
    v269 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v32 = v257;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 16);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v245);
  MIL::IRParameter::Make(&v245, (uint64_t *)&v258);
  v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v32, "resized_dims", (uint64_t *)&v258);
  v34 = v258;
  v258 = 0;
  if (v34)
    (*((void (**)(void **))*v34 + 1))(v34);
  v35 = (std::__shared_weak_count *)v245.n128_u64[1];
  if (v245.n128_u64[1])
  {
    v36 = (unint64_t *)(v245.n128_u64[1] + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v33 + 5) + 32))(*((_QWORD *)v33 + 5), 1);
  v38 = v257;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v244);
  MIL::IRParameter::Make(&v244, (uint64_t *)&v258);
  v39 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[19],std::unique_ptr<MIL::IRParameter>>(v38, "interpolation_mode", (uint64_t *)&v258);
  v40 = v258;
  v258 = 0;
  if (v40)
    (*((void (**)(void **))*v40 + 1))(v40);
  v41 = (std::__shared_weak_count *)v244.n128_u64[1];
  if (v244.n128_u64[1])
  {
    v42 = (unint64_t *)(v244.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v39 + 5) + 32))(*((_QWORD *)v39 + 5), 1);
  v44 = v257;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v243);
  MIL::IRParameter::Make(&v243, (uint64_t *)&v258);
  v45 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v44, "sampling_mode", (uint64_t *)&v258);
  v46 = v258;
  v258 = 0;
  if (v46)
    (*((void (**)(void **))*v46 + 1))(v46);
  v47 = (std::__shared_weak_count *)v243.n128_u64[1];
  if (v243.n128_u64[1])
  {
    v48 = (unint64_t *)(v243.n128_u64[1] + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v45 + 5) + 32))(*((_QWORD *)v45 + 5), 1);
  v242 = 0;
  v50 = operator new();
  *(_QWORD *)v50 = 0;
  *(_QWORD *)(v50 + 8) = 0;
  *(_QWORD *)(v50 + 16) = 0;
  v258 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v242, (void **)v50);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v258, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v242, 1uLL);
  v51 = v242;
  v52 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v53 = operator new(8uLL);
  v253 = v53;
  *v53 = v52;
  v255 = v53 + 1;
  v254 = v53 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v253);
  v54 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v55 = operator new(8uLL);
  v250 = v55;
  *v55 = v54;
  v252 = v55 + 1;
  v251 = v55 + 1;
  v269 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v250);
  v56 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v57 = operator new(8uLL);
  __p = v57;
  *v57 = v56;
  v249 = v57 + 1;
  v248 = v57 + 1;
  v270 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v58 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v59 = operator new(8uLL);
  v235 = v59;
  *v59 = v58;
  v236 = v59 + 1;
  v237 = v59 + 1;
  v271 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v235);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 4, &v238);
  MIL::IRParameter::Make(&v238, &v239);
  v60 = v239;
  v240 = v239;
  if (v239)
  {
    v61 = (_QWORD *)operator new();
    v62 = v239;
    *v61 = &unk_1EA99F888;
    v61[1] = 0;
    v61[2] = 0;
    v61[3] = v62;
  }
  else
  {
    v61 = 0;
  }
  v241 = v61;
  v239 = 0;
  v63 = v51[2];
  v64 = v51[1];
  if (v64 >= v63)
  {
    v66 = (v64 - *v51) >> 4;
    v67 = v66 + 1;
    if ((unint64_t)(v66 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v68 = v63 - *v51;
    if (v68 >> 3 > v67)
      v67 = v68 >> 3;
    if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF0)
      v69 = 0xFFFFFFFFFFFFFFFLL;
    else
      v69 = v67;
    v261[1] = v51 + 2;
    v70 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v51 + 2), v69);
    v72 = (uint64_t *)&v70[16 * v66];
    *v72 = v60;
    v72[1] = (uint64_t)v61;
    v241 = 0;
    v240 = 0;
    v74 = *v51;
    v73 = v51[1];
    if (v73 == *v51)
    {
      v77 = (void **)v51[1];
      v75 = &v70[16 * v66];
    }
    else
    {
      v75 = &v70[16 * v66];
      do
      {
        v76 = *((_OWORD *)v73 - 1);
        v73 -= 16;
        *((_OWORD *)v75 - 1) = v76;
        v75 -= 16;
        *(_QWORD *)v73 = 0;
        *((_QWORD *)v73 + 1) = 0;
      }
      while (v73 != v74);
      v77 = (void **)*v51;
      v73 = v51[1];
    }
    v65 = (char *)(v72 + 2);
    *v51 = v75;
    v259 = (uint64_t)v77;
    v51[1] = (char *)(v72 + 2);
    v260 = (uint64_t)v73;
    v78 = v51[2];
    v51[2] = &v70[16 * v71];
    v261[0] = v78;
    v258 = v77;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v258);
  }
  else
  {
    *(_QWORD *)v64 = v60;
    *((_QWORD *)v64 + 1) = v61;
    v65 = v64 + 16;
    v241 = 0;
    v240 = 0;
  }
  v51[1] = v65;
  v79 = v239;
  v239 = 0;
  if (v79)
    (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
  v80 = (std::__shared_weak_count *)v238.n128_u64[1];
  if (v238.n128_u64[1])
  {
    v81 = (unint64_t *)(v238.n128_u64[1] + 8);
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  if (v235)
  {
    v236 = v235;
    operator delete(v235);
  }
  if (__p)
  {
    v248 = __p;
    operator delete(__p);
  }
  if (v250)
  {
    v251 = v250;
    operator delete(v250);
  }
  if (v253)
  {
    v254 = v253;
    operator delete(v253);
  }
  *(_OWORD *)v233 = *(_OWORD *)a2;
  v234 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v83 = (uint64_t)v257;
  *(_QWORD *)&v232 = v257;
  if (v257)
  {
    v84 = (_QWORD *)operator new();
    *v84 = &unk_1EA99F8E8;
    v84[1] = 0;
    v84[2] = 0;
    v84[3] = v83;
  }
  else
  {
    v84 = 0;
  }
  *((_QWORD *)&v232 + 1) = v84;
  v257 = 0;
  *(_QWORD *)&v231 = v242;
  if (v242)
  {
    v85 = (_QWORD *)operator new();
    v86 = v242;
    *v85 = &unk_1EA99F948;
    v85[1] = 0;
    v85[2] = 0;
    v85[3] = v86;
  }
  else
  {
    v85 = 0;
  }
  *((_QWORD *)&v231 + 1) = v85;
  v242 = 0;
  v276[0] = &unk_1EA99FAC8;
  v276[1] = MIL::Operators::Common::ios18::CustomValidators::ValidateResize;
  v277 = v276;
  v275 = 0;
  MIL::IROperator::Make((__int128 *)v233, &v232, &v231, (uint64_t)v276, (uint64_t)v274, a3);
  v87 = v275;
  if (v275 == v274)
  {
    v88 = 4;
    v87 = v274;
  }
  else
  {
    if (!v275)
      goto LABEL_95;
    v88 = 5;
  }
  (*(void (**)(void))(*v87 + 8 * v88))();
LABEL_95:
  v89 = v277;
  if (v277 == v276)
  {
    v90 = 4;
    v89 = v276;
    goto LABEL_99;
  }
  if (v277)
  {
    v90 = 5;
LABEL_99:
    (*(void (**)(void))(*v89 + 8 * v90))();
  }
  v91 = (std::__shared_weak_count *)*((_QWORD *)&v231 + 1);
  if (*((_QWORD *)&v231 + 1))
  {
    v92 = (unint64_t *)(*((_QWORD *)&v231 + 1) + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v94 = (std::__shared_weak_count *)*((_QWORD *)&v232 + 1);
  if (*((_QWORD *)&v232 + 1))
  {
    v95 = (unint64_t *)(*((_QWORD *)&v232 + 1) + 8);
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  if (SHIBYTE(v234) < 0)
    operator delete(v233[0]);
  v253 = 0;
  v97 = (_OWORD *)operator new();
  *v97 = 0u;
  v97[1] = 0u;
  *((_DWORD *)v97 + 8) = 1065353216;
  v253 = v97;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v230);
  MIL::IRParameter::Make(&v230, (uint64_t *)&v258);
  v98 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v97, "minimum_compute_type", (uint64_t *)&v258);
  v99 = v258;
  v258 = 0;
  if (v99)
    (*((void (**)(void **))*v99 + 1))(v99);
  v100 = (std::__shared_weak_count *)v230.n128_u64[1];
  if (v230.n128_u64[1])
  {
    v101 = (unint64_t *)(v230.n128_u64[1] + 8);
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v98 + 5) + 32))(*((_QWORD *)v98 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v98 + 5) + 48))(*((_QWORD *)v98 + 5), 1);
  v103 = *a3;
  v104 = (std::__shared_weak_count_vtbl *)v253;
  v228 = v253;
  if (v253)
  {
    v105 = (std::__shared_weak_count *)operator new();
    v105->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v105->__shared_owners_ = 0;
    v105->__shared_weak_owners_ = 0;
    v105[1].__vftable = v104;
  }
  else
  {
    v105 = 0;
  }
  v229 = v105;
  v253 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v103 + 184))(v103, &v228);
  v106 = v229;
  if (v229)
  {
    p_shared_owners = (unint64_t *)&v229->__shared_owners_;
    do
      v108 = __ldaxr(p_shared_owners);
    while (__stlxr(v108 - 1, p_shared_owners));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  v109 = *a3;
  v272[0] = &off_1EA99FBD8;
  v272[1] = MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceResize;
  v273 = v272;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v109 + 200))(v109, v272);
  v110 = v273;
  if (v273 == v272)
  {
    v111 = 4;
    v110 = v272;
  }
  else
  {
    if (!v273)
      goto LABEL_132;
    v111 = 5;
  }
  (*(void (**)(void))(*v110 + 8 * v111))();
LABEL_132:
  MIL::Validation::TensorDTypeConstraints::Make(&v258);
  v112 = v258;
  std::string::basic_string[abi:ne180100]<0>(v224, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v224, 0, (uint64_t *)&Scalar);
  v226 = Scalar;
  if (Scalar)
  {
    v113 = (std::__shared_weak_count *)operator new();
    v114 = Scalar;
    v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v113->__shared_owners_ = 0;
    v113->__shared_weak_owners_ = 0;
    v113[1].__vftable = v114;
  }
  else
  {
    v113 = 0;
  }
  v227 = v113;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v222, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v112 + 3))(v112, &v226, v222);
  if (v223 < 0)
    operator delete(v222[0]);
  v115 = v227;
  if (v227)
  {
    v116 = (unint64_t *)&v227->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = Scalar;
  Scalar = 0;
  if (v118)
    (*((void (**)(std::__shared_weak_count_vtbl *))v118->~__shared_weak_count + 1))(v118);
  if (v225 < 0)
    operator delete(v224[0]);
  v119 = v258;
  std::string::basic_string[abi:ne180100]<0>(v218, "shape");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v218, 0, (uint64_t *)&Scalar);
  v220 = Scalar;
  if (Scalar)
  {
    v120 = (std::__shared_weak_count *)operator new();
    v121 = Scalar;
    v120->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v120->__shared_owners_ = 0;
    v120->__shared_weak_owners_ = 0;
    v120[1].__vftable = v121;
  }
  else
  {
    v120 = 0;
  }
  v221 = v120;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v216, "U");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v119 + 3))(v119, &v220, v216);
  if (v217 < 0)
    operator delete(v216[0]);
  v122 = v221;
  if (v221)
  {
    v123 = (unint64_t *)&v221->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v125 = Scalar;
  Scalar = 0;
  if (v125)
    (*((void (**)(std::__shared_weak_count_vtbl *))v125->~__shared_weak_count + 1))(v125);
  if (v219 < 0)
    operator delete(v218[0]);
  v126 = v258;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v214 = Scalar;
  if (Scalar)
  {
    v127 = (std::__shared_weak_count *)operator new();
    v128 = Scalar;
    v127->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v127->__shared_owners_ = 0;
    v127->__shared_weak_owners_ = 0;
    v127[1].__vftable = v128;
  }
  else
  {
    v127 = 0;
  }
  v215 = v127;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v212, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v126 + 3))(v126, &v214, v212);
  if (v213 < 0)
    operator delete(v212[0]);
  v129 = v215;
  if (v215)
  {
    v130 = (unint64_t *)&v215->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v132 = Scalar;
  Scalar = 0;
  if (v132)
    (*((void (**)(std::__shared_weak_count_vtbl *))v132->~__shared_weak_count + 1))(v132);
  v133 = *a3;
  v210 = v258;
  if (v258)
  {
    v134 = (std::__shared_weak_count *)operator new();
    v135 = v258;
    v134->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v134->__shared_owners_ = 0;
    v134->__shared_weak_owners_ = 0;
    v134[1].__vftable = (std::__shared_weak_count_vtbl *)v135;
  }
  else
  {
    v134 = 0;
  }
  v211 = v134;
  v258 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v133 + 56))(v133, &v210);
  v136 = v211;
  if (v211)
  {
    v137 = (unint64_t *)&v211->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  v139 = v258;
  v258 = 0;
  if (v139)
    (*((void (**)(void **))*v139 + 1))(v139);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v258);
  v140 = v258;
  std::string::basic_string[abi:ne180100]<0>(v206, "shape");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v206, 0, (uint64_t *)&Scalar);
  v208 = Scalar;
  if (Scalar)
  {
    v141 = (std::__shared_weak_count *)operator new();
    v142 = Scalar;
    v141->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v141->__shared_owners_ = 0;
    v141->__shared_weak_owners_ = 0;
    v141[1].__vftable = v142;
  }
  else
  {
    v141 = 0;
  }
  v209 = v141;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v204, "K");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v140 + 3))(v140, &v208, 0, v204);
  if (v205 < 0)
    operator delete(v204[0]);
  v143 = v209;
  if (v209)
  {
    v144 = (unint64_t *)&v209->__shared_owners_;
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 - 1, v144));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  v146 = Scalar;
  Scalar = 0;
  if (v146)
    (*((void (**)(std::__shared_weak_count_vtbl *))v146->~__shared_weak_count + 1))(v146);
  if (v207 < 0)
    operator delete(v206[0]);
  v147 = *a3;
  v202 = v258;
  if (v258)
  {
    v148 = (std::__shared_weak_count *)operator new();
    v149 = v258;
    v148->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v148->__shared_owners_ = 0;
    v148->__shared_weak_owners_ = 0;
    v148[1].__vftable = (std::__shared_weak_count_vtbl *)v149;
  }
  else
  {
    v148 = 0;
  }
  v203 = v148;
  v258 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v147 + 56))(v147, &v202);
  v150 = v203;
  if (v203)
  {
    v151 = (unint64_t *)&v203->__shared_owners_;
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
  v153 = v258;
  v258 = 0;
  if (v153)
    (*((void (**)(void **))*v153 + 1))(v153);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v250);
  v154 = v250;
  std::string::basic_string[abi:ne180100]<0>(v198, "interpolation_mode");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v198, 0, (uint64_t *)&__p);
  v200 = __p;
  if (__p)
  {
    v155 = (std::__shared_weak_count *)operator new();
    v156 = (std::__shared_weak_count_vtbl *)__p;
    v155->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v155->__shared_owners_ = 0;
    v155->__shared_weak_owners_ = 0;
    v155[1].__vftable = v156;
  }
  else
  {
    v155 = 0;
  }
  v201 = v155;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&v258, "LINEAR");
  std::string::basic_string[abi:ne180100]<0>(v261, "NEAREST_NEIGHBOR");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v258, 2);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v154 + 24))(v154, &v200, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v261[i + 2]) < 0)
      operator delete((void *)v261[i]);
  }
  v158 = v201;
  if (v201)
  {
    v159 = (unint64_t *)&v201->__shared_owners_;
    do
      v160 = __ldaxr(v159);
    while (__stlxr(v160 - 1, v159));
    if (!v160)
    {
      ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
      std::__shared_weak_count::__release_weak(v158);
    }
  }
  v161 = __p;
  __p = 0;
  if (v161)
    (*(void (**)(void *))(*(_QWORD *)v161 + 8))(v161);
  if (v199 < 0)
    operator delete(v198[0]);
  v162 = v250;
  std::string::basic_string[abi:ne180100]<0>(v194, "sampling_mode");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v194, 0, (uint64_t *)&__p);
  v196 = __p;
  if (__p)
  {
    v163 = (std::__shared_weak_count *)operator new();
    v164 = (std::__shared_weak_count_vtbl *)__p;
    v163->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v163->__shared_owners_ = 0;
    v163->__shared_weak_owners_ = 0;
    v163[1].__vftable = v164;
  }
  else
  {
    v163 = 0;
  }
  v197 = v163;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&v258, "ALIGN_CORNERS");
  std::string::basic_string[abi:ne180100]<0>(v261, "DEFAULT");
  std::string::basic_string[abi:ne180100]<0>(v262, "OFFSET_CORNERS");
  std::string::basic_string[abi:ne180100]<0>(v263, "STRICT_ALIGN_CORNERS");
  std::string::basic_string[abi:ne180100]<0>(v264, "UNALIGN_CORNERS");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v258, 5);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v162 + 24))(v162, &v196, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -15; j -= 3)
  {
    if (SHIBYTE(v264[j + 2]) < 0)
      operator delete((void *)v264[j]);
  }
  v166 = v197;
  if (v197)
  {
    v167 = (unint64_t *)&v197->__shared_owners_;
    do
      v168 = __ldaxr(v167);
    while (__stlxr(v168 - 1, v167));
    if (!v168)
    {
      ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
      std::__shared_weak_count::__release_weak(v166);
    }
  }
  v169 = __p;
  __p = 0;
  if (v169)
    (*(void (**)(void *))(*(_QWORD *)v169 + 8))(v169);
  if (v195 < 0)
    operator delete(v194[0]);
  v170 = v250;
  std::string::basic_string[abi:ne180100]<0>(v190, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v190, 1, (uint64_t *)&__p);
  v192 = __p;
  if (__p)
  {
    v171 = (std::__shared_weak_count *)operator new();
    v172 = (std::__shared_weak_count_vtbl *)__p;
    v171->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v171->__shared_owners_ = 0;
    v171->__shared_weak_owners_ = 0;
    v171[1].__vftable = v172;
  }
  else
  {
    v171 = 0;
  }
  v193 = v171;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&v258, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v261, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v262, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v263, "int16");
  std::string::basic_string[abi:ne180100]<0>(v264, "int32");
  std::string::basic_string[abi:ne180100]<0>(v265, "int8");
  std::string::basic_string[abi:ne180100]<0>(v266, "uint16");
  std::string::basic_string[abi:ne180100]<0>(v267, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v258, 8);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v170 + 24))(v170, &v192, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (k = 0; k != -24; k -= 3)
  {
    if (SHIBYTE(v267[k + 2]) < 0)
      operator delete((void *)v267[k]);
  }
  v174 = v193;
  if (v193)
  {
    v175 = (unint64_t *)&v193->__shared_owners_;
    do
      v176 = __ldaxr(v175);
    while (__stlxr(v176 - 1, v175));
    if (!v176)
    {
      ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
      std::__shared_weak_count::__release_weak(v174);
    }
  }
  v177 = __p;
  __p = 0;
  if (v177)
    (*(void (**)(void *))(*(_QWORD *)v177 + 8))(v177);
  if (v191 < 0)
    operator delete(v190[0]);
  v178 = *a3;
  v188 = v250;
  if (v250)
  {
    v179 = (std::__shared_weak_count *)operator new();
    v180 = (std::__shared_weak_count_vtbl *)v250;
    v179->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v179->__shared_owners_ = 0;
    v179->__shared_weak_owners_ = 0;
    v179[1].__vftable = v180;
  }
  else
  {
    v179 = 0;
  }
  v189 = v179;
  v250 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v178 + 56))(v178, &v188);
  v181 = v189;
  if (v189)
  {
    v182 = (unint64_t *)&v189->__shared_owners_;
    do
      v183 = __ldaxr(v182);
    while (__stlxr(v183 - 1, v182));
    if (!v183)
    {
      ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
      std::__shared_weak_count::__release_weak(v181);
    }
  }
  v184 = v250;
  v250 = 0;
  if (v184)
    (*(void (**)(void *))(*(_QWORD *)v184 + 8))(v184);
  if (v253)
  {
    v185 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v253);
    MEMORY[0x1E0C023A0](v185, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v242, 0);
  result = (uint64_t)v257;
  if (v257)
  {
    v187 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v257);
    return MEMORY[0x1E0C023A0](v187, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09CE614(_Unwind_Exception *a1)
{
  uint64_t *v1;
  unint64_t v3;
  uint64_t v4;

  v3 = STACK[0x288];
  STACK[0x288] = 0;
  if (v3)
    (*(void (**)(unint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x2A0], 0);
  v4 = *v1;
  *v1 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x228], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x2C8], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::CustomValidators::ValidateMatMul(MIL::Operators::Common::ios18::CustomValidators *this@<X0>, uint64_t a2@<X8>)
{
  MIL::IRValueType *ParameterType;
  uint64_t v6;
  MIL::IRValueType *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const void *ParameterValue;
  int v12;
  const void *v13;
  int v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL CanBroadcastShapes;
  uint64_t i;
  void *v27;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  void *v39[2];
  char v40;
  _QWORD v41[2];
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  void *__p;
  _BYTE *v46;
  uint64_t v47;
  void *v48;
  _BYTE *v49;
  uint64_t v50;
  void *v51[2];
  char v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  void *v55;
  _BYTE *v56;
  uint64_t v57;
  void *v58;
  _BYTE *v59;
  uint64_t v60;
  char v61[8];
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  int v65;
  void **v66;
  char v67;
  void *v68[2];
  uint64_t v69;
  uint64_t v70;
  _QWORD v71[2];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  MIL::Operators::Common::ios17::CustomValidators::ValidateMatMul(this, (uint64_t)v61);
  if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)v61))
  {
    *(_OWORD *)(a2 + 8) = v62;
    v62 = 0uLL;
    *(_OWORD *)(a2 + 24) = v63;
    *(_QWORD *)(a2 + 40) = v64;
    v63 = 0uLL;
    v64 = 0;
    *(_QWORD *)a2 = &off_1EA99F170;
    *(_DWORD *)(a2 + 48) = v65;
    goto LABEL_20;
  }
  std::string::basic_string[abi:ne180100]<0>(v68, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v6 = MIL::IRValueType::AsTensorType(ParameterType);
  if (SHIBYTE(v69) < 0)
    operator delete(v68[0]);
  std::string::basic_string[abi:ne180100]<0>(v68, "y");
  v7 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v8 = MIL::IRValueType::AsTensorType(v7);
  if (SHIBYTE(v69) < 0)
    operator delete(v68[0]);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 104))(v6)
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 104))(v8) & 1) == 0)
  {
    MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a2);
    goto LABEL_20;
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 96))(v6);
  v58 = 0;
  v59 = 0;
  v60 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v58, *(const void **)v9, *(_QWORD *)(v9 + 8), (uint64_t)(*(_QWORD *)(v9 + 8) - *(_QWORD *)v9) >> 3);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 96))(v8);
  v55 = 0;
  v56 = 0;
  v57 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v55, *(const void **)v10, *(_QWORD *)(v10 + 8), (uint64_t)(*(_QWORD *)(v10 + 8) - *(_QWORD *)v10) >> 3);
  std::string::basic_string[abi:ne180100]<0>(v68, "transpose_x");
  ParameterValue = (const void *)MIL::IROperation::GetParameterValue(this);
  v12 = MIL::IRValue::GetScalar<BOOL>(ParameterValue);
  if (SHIBYTE(v69) < 0)
    operator delete(v68[0]);
  std::string::basic_string[abi:ne180100]<0>(v68, "transpose_y");
  v13 = (const void *)MIL::IROperation::GetParameterValue(this);
  v14 = MIL::IRValue::GetScalar<BOOL>(v13);
  if (SHIBYTE(v69) < 0)
    operator delete(v68[0]);
  v15 = (char *)v58;
  if (v59 - (_BYTE *)v58 != 8)
  {
    v16 = (char *)v58 + 8 * ((v59 - (_BYTE *)v58) >> 3);
    v17 = v16 - 8;
    v15 = v16 - 16;
    if (!v12)
      v15 = v17;
  }
  v18 = *(_QWORD *)v15;
  v19 = (char *)v55;
  if (v56 - (_BYTE *)v55 != 8)
  {
    v20 = (char *)v55 + 8 * ((v56 - (_BYTE *)v55) >> 3);
    if (v14)
      v19 = v20 - 8;
    else
      v19 = v20 - 16;
  }
  v21 = *(_QWORD *)v19;
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18))
  {
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21))
    {
      v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
      v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 48))(v22);
      v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
      if (v23 != (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 48))(v24))
      {
        LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
        v29 = (std::__shared_weak_count *)LocationPtr[1];
        v53 = *LocationPtr;
        v54 = v29;
        if (v29)
        {
          p_shared_owners = (unint64_t *)&v29->__shared_owners_;
          do
            v31 = __ldxr(p_shared_owners);
          while (__stxr(v31 + 1, p_shared_owners));
        }
        std::string::basic_string[abi:ne180100]<0>(v51, "x shape and y shape are not compatible.");
        MIL::ValidationResult::ValidationResult(a2, &v53, 315, v51);
        if (v52 < 0)
          operator delete(v51[0]);
        v32 = v54;
        if (v54)
        {
          v33 = (unint64_t *)&v54->__shared_owners_;
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        goto LABEL_37;
      }
    }
  }
  if ((unint64_t)(v59 - (_BYTE *)v58) >= 9 && (unint64_t)(v56 - (_BYTE *)v55) >= 9)
  {
    v48 = 0;
    v49 = 0;
    v50 = 0;
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<std::__wrap_iter<MIL::IRDimension const**>,std::__wrap_iter<MIL::IRDimension const**>>(&v48, v58, (uint64_t)(v59 - 16), (v59 - 16 - (_BYTE *)v58) >> 3);
    v46 = 0;
    v47 = 0;
    __p = 0;
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<std::__wrap_iter<MIL::IRDimension const**>,std::__wrap_iter<MIL::IRDimension const**>>(&__p, v55, (uint64_t)(v56 - 16), (v56 - 16 - (_BYTE *)v55) >> 3);
    v68[0] = 0;
    v68[1] = 0;
    v69 = 0;
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v68, v48, (uint64_t)v49, (v49 - (_BYTE *)v48) >> 3);
    v70 = 0;
    v71[0] = 0;
    v71[1] = 0;
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v70, __p, (uint64_t)v46, (v46 - (_BYTE *)__p) >> 3);
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v66 = (void **)&v42;
    v67 = 0;
    v42 = operator new(0x30uLL);
    v43 = v42;
    v44 = v42 + 6;
    v43 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<MIL::IRDimension const*>>,std::vector<MIL::IRDimension const*> const*,std::vector<MIL::IRDimension const*> const*,std::vector<MIL::IRDimension const*>*>((uint64_t)&v44, (uint64_t)v68, (uint64_t)&v72, v42);
    CanBroadcastShapes = MIL::Validation::CanBroadcastShapes((uint64_t *)&v42);
    v66 = (void **)&v42;
    std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v66);
    for (i = 0; i != -6; i -= 3)
    {
      v27 = (void *)v71[i - 1];
      if (v27)
      {
        v71[i] = v27;
        operator delete(v27);
      }
    }
    if (!CanBroadcastShapes)
    {
      v35 = (_QWORD *)MIL::IRObject::GetLocationPtr(this);
      v36 = v35[1];
      v41[0] = *v35;
      v41[1] = v36;
      if (v36)
      {
        v37 = (unint64_t *)(v36 + 8);
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
      }
      std::string::basic_string[abi:ne180100]<0>(v39, "x shape and y shape are not broadcastable.");
      MIL::ValidationResult::ValidationResult(a2, v41, 315, v39);
      if (v40 < 0)
        operator delete(v39[0]);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v41);
      if (__p)
      {
        v46 = __p;
        operator delete(__p);
      }
      if (v48)
      {
        v49 = v48;
        operator delete(v48);
      }
      goto LABEL_37;
    }
    if (__p)
    {
      v46 = __p;
      operator delete(__p);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
  }
  MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a2);
LABEL_37:
  if (v55)
  {
    v56 = v55;
    operator delete(v55);
  }
  if (v58)
  {
    v59 = v58;
    operator delete(v58);
  }
LABEL_20:
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v61);
}

void sub_1E09CF334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39)
{
  uint64_t v39;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (a21)
  {
    a22 = (uint64_t)a21;
    operator delete(a21);
  }
  if (a24)
  {
    a25 = (uint64_t)a24;
    operator delete(a24);
  }
  if (a35)
  {
    a36 = (uint64_t)a35;
    operator delete(a35);
  }
  if (a38)
  {
    a39 = (uint64_t)a38;
    operator delete(a38);
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)(v39 - 176));
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::Linear::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count_vtbl *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count_vtbl *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unsigned __int8 *v36;
  void *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  std::__shared_weak_count_vtbl *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  unsigned __int8 *v50;
  void *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  char **v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t *v77;
  char *v78;
  char *v79;
  char *v80;
  __int128 v81;
  void **v82;
  char *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  char **v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  _OWORD *v102;
  unsigned __int8 *v103;
  void **v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  std::__shared_weak_count_vtbl *v109;
  std::__shared_weak_count *v110;
  std::__shared_weak_count *v111;
  unint64_t *p_shared_owners;
  unint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  void **v117;
  std::__shared_weak_count *v118;
  std::__shared_weak_count_vtbl *v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count_vtbl *v123;
  void **v124;
  std::__shared_weak_count *v125;
  std::__shared_weak_count_vtbl *v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count_vtbl *v130;
  void **v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count_vtbl *v137;
  void **v138;
  std::__shared_weak_count *v139;
  std::__shared_weak_count_vtbl *v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count_vtbl *v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  void **v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  void **v151;
  void **v152;
  std::__shared_weak_count *v153;
  std::__shared_weak_count_vtbl *v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count_vtbl *v158;
  void **v159;
  std::__shared_weak_count *v160;
  std::__shared_weak_count_vtbl *v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count_vtbl *v165;
  void **v166;
  std::__shared_weak_count *v167;
  std::__shared_weak_count_vtbl *v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count_vtbl *v172;
  void **v173;
  std::__shared_weak_count *v174;
  std::__shared_weak_count_vtbl *v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count_vtbl *v179;
  uint64_t v180;
  std::__shared_weak_count *v181;
  void **v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  void **v186;
  void *v187;
  std::__shared_weak_count *v188;
  std::__shared_weak_count_vtbl *v189;
  uint64_t i;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  void *v194;
  uint64_t v195;
  std::__shared_weak_count *v196;
  std::__shared_weak_count_vtbl *v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  void *v201;
  uint64_t v202;
  uint64_t result;
  uint64_t v204;
  void *v205;
  std::__shared_weak_count *v206;
  void *v207[2];
  char v208;
  void *v209;
  std::__shared_weak_count *v210;
  void **v211;
  std::__shared_weak_count *v212;
  void *v213[2];
  char v214;
  void *v215[2];
  char v216;
  std::__shared_weak_count_vtbl *v217;
  std::__shared_weak_count *v218;
  void *v219[2];
  char v220;
  void *v221[2];
  char v222;
  std::__shared_weak_count_vtbl *v223;
  std::__shared_weak_count *v224;
  void *v225[2];
  char v226;
  void *v227[2];
  char v228;
  std::__shared_weak_count_vtbl *v229;
  std::__shared_weak_count *v230;
  void *v231[2];
  char v232;
  void *v233[2];
  char v234;
  std::__shared_weak_count_vtbl *v235;
  std::__shared_weak_count *v236;
  void **v237;
  std::__shared_weak_count *v238;
  void *v239[2];
  char v240;
  std::__shared_weak_count_vtbl *v241;
  std::__shared_weak_count *v242;
  void *v243[2];
  char v244;
  void *v245[2];
  char v246;
  std::__shared_weak_count_vtbl *v247;
  std::__shared_weak_count *v248;
  void *v249[2];
  char v250;
  void *v251[2];
  char v252;
  std::__shared_weak_count_vtbl *v253;
  std::__shared_weak_count *v254;
  void *v255[2];
  char v256;
  void *v257[2];
  char v258;
  std::__shared_weak_count_vtbl *v259;
  std::__shared_weak_count *v260;
  void *v261;
  std::__shared_weak_count *v262;
  __n128 v263;
  __int128 v264;
  __int128 v265;
  void *v266[2];
  uint64_t v267;
  void *v268;
  void *v269;
  _QWORD *v270;
  __n128 v271;
  uint64_t v272;
  uint64_t v273;
  _QWORD *v274;
  char **v275;
  __n128 v276;
  __n128 v277;
  void *__p;
  void *v279;
  _QWORD *v280;
  void *v281;
  void *v282;
  _QWORD *v283;
  void *v284;
  void *v285;
  _QWORD *v286;
  __n128 v287;
  _QWORD *v288;
  void **v289;
  uint64_t v290;
  uint64_t v291;
  _QWORD v292[3];
  uint64_t v293[3];
  uint64_t v294[3];
  uint64_t v295[3];
  _QWORD v296[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_on_zero_shared;
  uint64_t v299;
  uint64_t v300;
  _QWORD v301[3];
  _QWORD *v302;
  _BYTE v303[24];
  _BYTE *v304;
  _BYTE v305[24];
  _BYTE *v306;
  uint64_t v307;

  v307 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v288 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v9->__on_zero_shared;
  v299 = (uint64_t)&v9->__on_zero_shared;
  v9->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v9->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  Scalar = v9;
  v289 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v10 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = operator new(0x10uLL);
  v286 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v284 = v12;
  v285 = v12 + 2;
  v290 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v284);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = MIL::IRUnknownDimension::Make(a1, 0);
  v15 = operator new(0x10uLL);
  v283 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  v281 = v15;
  v282 = v15 + 2;
  v291 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v281);
  v16 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v17 = MIL::IRUnknownDimension::Make(a1, 0);
  v18 = operator new(0x10uLL);
  v280 = v18 + 2;
  *v18 = v16;
  v18[1] = v17;
  __p = v18;
  v279 = v18 + 2;
  v292[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v289, 4, &v287);
  MIL::IRParameter::Make(&v287, (uint64_t *)&v268);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v268);
  v19 = v268;
  v268 = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = (std::__shared_weak_count *)v287.n128_u64[1];
  if (v287.n128_u64[1])
  {
    v21 = (unint64_t *)(v287.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (__p)
  {
    v279 = __p;
    operator delete(__p);
  }
  if (v281)
  {
    v282 = v281;
    operator delete(v281);
  }
  if (v284)
  {
    v285 = v284;
    operator delete(v284);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v23 = v288;
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v26->__on_zero_shared;
  v299 = (uint64_t)&v26->__on_zero_shared;
  v26->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v24;
  v26->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v25;
  Scalar = v26;
  v289 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v27 = MIL::IRUnknownDimension::Make(a1, 0);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = operator new(0x10uLL);
  v286 = v29 + 2;
  *v29 = v27;
  v29[1] = v28;
  v284 = v29;
  v285 = v29 + 2;
  v290 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v284);
  v30 = MIL::IRUnknownDimension::Make(a1, 0);
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = operator new(0x10uLL);
  v283 = v32 + 2;
  *v32 = v30;
  v32[1] = v31;
  v281 = v32;
  v282 = v32 + 2;
  v291 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v281);
  v33 = MIL::IRUnknownDimension::Make(a1, 0);
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = operator new(0x10uLL);
  v280 = v35 + 2;
  *v35 = v33;
  v35[1] = v34;
  __p = v35;
  v279 = v35 + 2;
  v292[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v289, 4, &v277);
  MIL::IRParameter::Make(&v277, (uint64_t *)&v268);
  v36 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(v23, "weight", (uint64_t *)&v268);
  v37 = v268;
  v268 = 0;
  if (v37)
    (*(void (**)(void *))(*(_QWORD *)v37 + 8))(v37);
  v38 = (std::__shared_weak_count *)v277.n128_u64[1];
  if (v277.n128_u64[1])
  {
    v39 = (unint64_t *)(v277.n128_u64[1] + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (__p)
  {
    v279 = __p;
    operator delete(__p);
  }
  if (v281)
  {
    v282 = v281;
    operator delete(v281);
  }
  if (v284)
  {
    v285 = v284;
    operator delete(v284);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v36 + 5) + 32))(*((_QWORD *)v36 + 5), 1);
  v41 = v288;
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v43;
  v43->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v42;
  p_on_zero_shared = (uint64_t)&v43->~__shared_weak_count_0;
  v299 = (uint64_t)&v43->~__shared_weak_count_0;
  v289 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v44 = MIL::IRUnknownDimension::Make(a1, 0);
  v45 = operator new(8uLL);
  v284 = v45;
  *v45 = v44;
  v286 = v45 + 1;
  v285 = v45 + 1;
  v290 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v284);
  v46 = MIL::IRUnknownDimension::Make(a1, 0);
  v47 = operator new(8uLL);
  v281 = v47;
  *v47 = v46;
  v283 = v47 + 1;
  v282 = v47 + 1;
  v291 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v281);
  v48 = MIL::IRUnknownDimension::Make(a1, 0);
  v49 = operator new(8uLL);
  __p = v49;
  *v49 = v48;
  v280 = v49 + 1;
  v279 = v49 + 1;
  v292[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v289, 4, &v276);
  MIL::IRParameter::Make(&v276, (uint64_t *)&v268);
  v50 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v41, "bias", (uint64_t *)&v268);
  v51 = v268;
  v268 = 0;
  if (v51)
    (*(void (**)(void *))(*(_QWORD *)v51 + 8))(v51);
  v52 = (std::__shared_weak_count *)v276.n128_u64[1];
  if (v276.n128_u64[1])
  {
    v53 = (unint64_t *)(v276.n128_u64[1] + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  if (__p)
  {
    v279 = __p;
    operator delete(__p);
  }
  if (v281)
  {
    v282 = v281;
    operator delete(v281);
  }
  if (v284)
  {
    v285 = v284;
    operator delete(v284);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v50 + 5) + 32))(*((_QWORD *)v50 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v50 + 5) + 48))(*((_QWORD *)v50 + 5), 1);
  v275 = 0;
  v55 = operator new();
  *(_QWORD *)v55 = 0;
  *(_QWORD *)(v55 + 8) = 0;
  *(_QWORD *)(v55 + 16) = 0;
  v289 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v275, (void **)v55);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v289, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v275, 1uLL);
  v56 = v275;
  v57 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v58 = operator new(8uLL);
  v284 = v58;
  *v58 = v57;
  v286 = v58 + 1;
  v285 = v58 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v284);
  v59 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v60 = operator new(8uLL);
  v281 = v60;
  *v60 = v59;
  v283 = v60 + 1;
  v282 = v60 + 1;
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v281);
  v61 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v62 = operator new(8uLL);
  __p = v62;
  *v62 = v61;
  v280 = v62 + 1;
  v279 = v62 + 1;
  v299 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v63 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v64 = operator new(8uLL);
  v268 = v64;
  *v64 = v63;
  v270 = v64 + 1;
  v269 = v64 + 1;
  v300 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v268);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 4, &v271);
  MIL::IRParameter::Make(&v271, &v272);
  v65 = v272;
  v273 = v272;
  if (v272)
  {
    v66 = (_QWORD *)operator new();
    v67 = v272;
    *v66 = &unk_1EA99F888;
    v66[1] = 0;
    v66[2] = 0;
    v66[3] = v67;
  }
  else
  {
    v66 = 0;
  }
  v274 = v66;
  v272 = 0;
  v68 = v56[2];
  v69 = v56[1];
  if (v69 >= v68)
  {
    v71 = (v69 - *v56) >> 4;
    v72 = v71 + 1;
    if ((unint64_t)(v71 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v73 = v68 - *v56;
    if (v73 >> 3 > v72)
      v72 = v73 >> 3;
    if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF0)
      v74 = 0xFFFFFFFFFFFFFFFLL;
    else
      v74 = v72;
    v292[1] = v56 + 2;
    v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v56 + 2), v74);
    v77 = (uint64_t *)&v75[16 * v71];
    *v77 = v65;
    v77[1] = (uint64_t)v66;
    v274 = 0;
    v273 = 0;
    v79 = *v56;
    v78 = v56[1];
    if (v78 == *v56)
    {
      v82 = (void **)v56[1];
      v80 = &v75[16 * v71];
    }
    else
    {
      v80 = &v75[16 * v71];
      do
      {
        v81 = *((_OWORD *)v78 - 1);
        v78 -= 16;
        *((_OWORD *)v80 - 1) = v81;
        v80 -= 16;
        *(_QWORD *)v78 = 0;
        *((_QWORD *)v78 + 1) = 0;
      }
      while (v78 != v79);
      v82 = (void **)*v56;
      v78 = v56[1];
    }
    v70 = (char *)(v77 + 2);
    *v56 = v80;
    v290 = (uint64_t)v82;
    v56[1] = (char *)(v77 + 2);
    v291 = (uint64_t)v78;
    v83 = v56[2];
    v56[2] = &v75[16 * v76];
    v292[0] = v83;
    v289 = v82;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v289);
  }
  else
  {
    *(_QWORD *)v69 = v65;
    *((_QWORD *)v69 + 1) = v66;
    v70 = v69 + 16;
    v274 = 0;
    v273 = 0;
  }
  v56[1] = v70;
  v84 = v272;
  v272 = 0;
  if (v84)
    (*(void (**)(uint64_t))(*(_QWORD *)v84 + 8))(v84);
  v85 = (std::__shared_weak_count *)v271.n128_u64[1];
  if (v271.n128_u64[1])
  {
    v86 = (unint64_t *)(v271.n128_u64[1] + 8);
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  if (v268)
  {
    v269 = v268;
    operator delete(v268);
  }
  if (__p)
  {
    v279 = __p;
    operator delete(__p);
  }
  if (v281)
  {
    v282 = v281;
    operator delete(v281);
  }
  if (v284)
  {
    v285 = v284;
    operator delete(v284);
  }
  *(_OWORD *)v266 = *(_OWORD *)a2;
  v267 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v88 = (uint64_t)v288;
  *(_QWORD *)&v265 = v288;
  if (v288)
  {
    v89 = (_QWORD *)operator new();
    *v89 = &unk_1EA99F8E8;
    v89[1] = 0;
    v89[2] = 0;
    v89[3] = v88;
  }
  else
  {
    v89 = 0;
  }
  *((_QWORD *)&v265 + 1) = v89;
  v288 = 0;
  *(_QWORD *)&v264 = v275;
  if (v275)
  {
    v90 = (_QWORD *)operator new();
    v91 = v275;
    *v90 = &unk_1EA99F948;
    v90[1] = 0;
    v90[2] = 0;
    v90[3] = v91;
  }
  else
  {
    v90 = 0;
  }
  *((_QWORD *)&v264 + 1) = v90;
  v275 = 0;
  v306 = 0;
  v304 = 0;
  MIL::IROperator::Make((__int128 *)v266, &v265, &v264, (uint64_t)v305, (uint64_t)v303, a3);
  v92 = v304;
  if (v304 == v303)
  {
    v93 = 4;
    v92 = v303;
  }
  else
  {
    if (!v304)
      goto LABEL_89;
    v93 = 5;
  }
  (*(void (**)(void))(*v92 + 8 * v93))();
LABEL_89:
  v94 = v306;
  if (v306 == v305)
  {
    v95 = 4;
    v94 = v305;
    goto LABEL_93;
  }
  if (v306)
  {
    v95 = 5;
LABEL_93:
    (*(void (**)(void))(*v94 + 8 * v95))();
  }
  v96 = (std::__shared_weak_count *)*((_QWORD *)&v264 + 1);
  if (*((_QWORD *)&v264 + 1))
  {
    v97 = (unint64_t *)(*((_QWORD *)&v264 + 1) + 8);
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = (std::__shared_weak_count *)*((_QWORD *)&v265 + 1);
  if (*((_QWORD *)&v265 + 1))
  {
    v100 = (unint64_t *)(*((_QWORD *)&v265 + 1) + 8);
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  if (SHIBYTE(v267) < 0)
    operator delete(v266[0]);
  v284 = 0;
  v102 = (_OWORD *)operator new();
  *v102 = 0u;
  v102[1] = 0u;
  *((_DWORD *)v102 + 8) = 1065353216;
  v284 = v102;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v263);
  MIL::IRParameter::Make(&v263, (uint64_t *)&v289);
  v103 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v102, "minimum_compute_type", (uint64_t *)&v289);
  v104 = v289;
  v289 = 0;
  if (v104)
    (*((void (**)(void **))*v104 + 1))(v104);
  v105 = (std::__shared_weak_count *)v263.n128_u64[1];
  if (v263.n128_u64[1])
  {
    v106 = (unint64_t *)(v263.n128_u64[1] + 8);
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v103 + 5) + 32))(*((_QWORD *)v103 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v103 + 5) + 48))(*((_QWORD *)v103 + 5), 1);
  v108 = *a3;
  v109 = (std::__shared_weak_count_vtbl *)v284;
  v261 = v284;
  if (v284)
  {
    v110 = (std::__shared_weak_count *)operator new();
    v110->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v110->__shared_owners_ = 0;
    v110->__shared_weak_owners_ = 0;
    v110[1].__vftable = v109;
  }
  else
  {
    v110 = 0;
  }
  v262 = v110;
  v284 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v108 + 184))(v108, &v261);
  v111 = v262;
  if (v262)
  {
    p_shared_owners = (unint64_t *)&v262->__shared_owners_;
    do
      v113 = __ldaxr(p_shared_owners);
    while (__stlxr(v113 - 1, p_shared_owners));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = *a3;
  v301[0] = &off_1EA99FBD8;
  v301[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceLinear;
  v302 = v301;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v114 + 200))(v114, v301);
  v115 = v302;
  if (v302 == v301)
  {
    v116 = 4;
    v115 = v301;
  }
  else
  {
    if (!v302)
      goto LABEL_126;
    v116 = 5;
  }
  (*(void (**)(void))(*v115 + 8 * v116))();
LABEL_126:
  MIL::Validation::TensorDTypeConstraints::Make(&v289);
  v117 = v289;
  std::string::basic_string[abi:ne180100]<0>(v257, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v257, 0, (uint64_t *)&Scalar);
  v259 = Scalar;
  if (Scalar)
  {
    v118 = (std::__shared_weak_count *)operator new();
    v119 = Scalar;
    v118->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v118->__shared_owners_ = 0;
    v118->__shared_weak_owners_ = 0;
    v118[1].__vftable = v119;
  }
  else
  {
    v118 = 0;
  }
  v260 = v118;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v255, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v117 + 3))(v117, &v259, v255);
  if (v256 < 0)
    operator delete(v255[0]);
  v120 = v260;
  if (v260)
  {
    v121 = (unint64_t *)&v260->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v123 = Scalar;
  Scalar = 0;
  if (v123)
    (*((void (**)(std::__shared_weak_count_vtbl *))v123->~__shared_weak_count + 1))(v123);
  if (v258 < 0)
    operator delete(v257[0]);
  v124 = v289;
  std::string::basic_string[abi:ne180100]<0>(v251, "weight");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v251, 0, (uint64_t *)&Scalar);
  v253 = Scalar;
  if (Scalar)
  {
    v125 = (std::__shared_weak_count *)operator new();
    v126 = Scalar;
    v125->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v125->__shared_owners_ = 0;
    v125->__shared_weak_owners_ = 0;
    v125[1].__vftable = v126;
  }
  else
  {
    v125 = 0;
  }
  v254 = v125;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v249, "U");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v124 + 3))(v124, &v253, v249);
  if (v250 < 0)
    operator delete(v249[0]);
  v127 = v254;
  if (v254)
  {
    v128 = (unint64_t *)&v254->__shared_owners_;
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  v130 = Scalar;
  Scalar = 0;
  if (v130)
    (*((void (**)(std::__shared_weak_count_vtbl *))v130->~__shared_weak_count + 1))(v130);
  if (v252 < 0)
    operator delete(v251[0]);
  v131 = v289;
  std::string::basic_string[abi:ne180100]<0>(v245, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v245, 1, (uint64_t *)&Scalar);
  v247 = Scalar;
  if (Scalar)
  {
    v132 = (std::__shared_weak_count *)operator new();
    v133 = Scalar;
    v132->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v132->__shared_owners_ = 0;
    v132->__shared_weak_owners_ = 0;
    v132[1].__vftable = v133;
  }
  else
  {
    v132 = 0;
  }
  v248 = v132;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v243, "U");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v131 + 3))(v131, &v247, v243);
  if (v244 < 0)
    operator delete(v243[0]);
  v134 = v248;
  if (v248)
  {
    v135 = (unint64_t *)&v248->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  v137 = Scalar;
  Scalar = 0;
  if (v137)
    (*((void (**)(std::__shared_weak_count_vtbl *))v137->~__shared_weak_count + 1))(v137);
  if (v246 < 0)
    operator delete(v245[0]);
  v138 = v289;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v241 = Scalar;
  if (Scalar)
  {
    v139 = (std::__shared_weak_count *)operator new();
    v140 = Scalar;
    v139->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v139->__shared_owners_ = 0;
    v139->__shared_weak_owners_ = 0;
    v139[1].__vftable = v140;
  }
  else
  {
    v139 = 0;
  }
  v242 = v139;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v239, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v138 + 3))(v138, &v241, v239);
  if (v240 < 0)
    operator delete(v239[0]);
  v141 = v242;
  if (v242)
  {
    v142 = (unint64_t *)&v242->__shared_owners_;
    do
      v143 = __ldaxr(v142);
    while (__stlxr(v143 - 1, v142));
    if (!v143)
    {
      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
      std::__shared_weak_count::__release_weak(v141);
    }
  }
  v144 = Scalar;
  Scalar = 0;
  if (v144)
    (*((void (**)(std::__shared_weak_count_vtbl *))v144->~__shared_weak_count + 1))(v144);
  v145 = *a3;
  v237 = v289;
  if (v289)
  {
    v146 = (std::__shared_weak_count *)operator new();
    v147 = v289;
    v146->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v146->__shared_owners_ = 0;
    v146->__shared_weak_owners_ = 0;
    v146[1].__vftable = (std::__shared_weak_count_vtbl *)v147;
  }
  else
  {
    v146 = 0;
  }
  v238 = v146;
  v289 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v145 + 56))(v145, &v237);
  v148 = v238;
  if (v238)
  {
    v149 = (unint64_t *)&v238->__shared_owners_;
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
    }
  }
  v151 = v289;
  v289 = 0;
  if (v151)
    (*((void (**)(void **))*v151 + 1))(v151);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v289);
  v152 = v289;
  std::string::basic_string[abi:ne180100]<0>(v233, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v233, 0, (uint64_t *)&Scalar);
  v235 = Scalar;
  if (Scalar)
  {
    v153 = (std::__shared_weak_count *)operator new();
    v154 = Scalar;
    v153->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v153->__shared_owners_ = 0;
    v153->__shared_weak_owners_ = 0;
    v153[1].__vftable = v154;
  }
  else
  {
    v153 = 0;
  }
  v236 = v153;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v231, "D_in");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v152 + 3))(v152, &v235, -1, v231);
  if (v232 < 0)
    operator delete(v231[0]);
  v155 = v236;
  if (v236)
  {
    v156 = (unint64_t *)&v236->__shared_owners_;
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
  v158 = Scalar;
  Scalar = 0;
  if (v158)
    (*((void (**)(std::__shared_weak_count_vtbl *))v158->~__shared_weak_count + 1))(v158);
  if (v234 < 0)
    operator delete(v233[0]);
  v159 = v289;
  std::string::basic_string[abi:ne180100]<0>(v227, "weight");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v227, 0, (uint64_t *)&Scalar);
  v229 = Scalar;
  if (Scalar)
  {
    v160 = (std::__shared_weak_count *)operator new();
    v161 = Scalar;
    v160->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v160->__shared_owners_ = 0;
    v160->__shared_weak_owners_ = 0;
    v160[1].__vftable = v161;
  }
  else
  {
    v160 = 0;
  }
  v230 = v160;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v225, "D_out");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v159 + 3))(v159, &v229, 0, v225);
  if (v226 < 0)
    operator delete(v225[0]);
  v162 = v230;
  if (v230)
  {
    v163 = (unint64_t *)&v230->__shared_owners_;
    do
      v164 = __ldaxr(v163);
    while (__stlxr(v164 - 1, v163));
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
    }
  }
  v165 = Scalar;
  Scalar = 0;
  if (v165)
    (*((void (**)(std::__shared_weak_count_vtbl *))v165->~__shared_weak_count + 1))(v165);
  if (v228 < 0)
    operator delete(v227[0]);
  v166 = v289;
  std::string::basic_string[abi:ne180100]<0>(v221, "weight");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v221, 0, (uint64_t *)&Scalar);
  v223 = Scalar;
  if (Scalar)
  {
    v167 = (std::__shared_weak_count *)operator new();
    v168 = Scalar;
    v167->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v167->__shared_owners_ = 0;
    v167->__shared_weak_owners_ = 0;
    v167[1].__vftable = v168;
  }
  else
  {
    v167 = 0;
  }
  v224 = v167;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v219, "D_in");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v166 + 3))(v166, &v223, 1, v219);
  if (v220 < 0)
    operator delete(v219[0]);
  v169 = v224;
  if (v224)
  {
    v170 = (unint64_t *)&v224->__shared_owners_;
    do
      v171 = __ldaxr(v170);
    while (__stlxr(v171 - 1, v170));
    if (!v171)
    {
      ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
      std::__shared_weak_count::__release_weak(v169);
    }
  }
  v172 = Scalar;
  Scalar = 0;
  if (v172)
    (*((void (**)(std::__shared_weak_count_vtbl *))v172->~__shared_weak_count + 1))(v172);
  if (v222 < 0)
    operator delete(v221[0]);
  v173 = v289;
  std::string::basic_string[abi:ne180100]<0>(v215, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v215, 1, (uint64_t *)&Scalar);
  v217 = Scalar;
  if (Scalar)
  {
    v174 = (std::__shared_weak_count *)operator new();
    v175 = Scalar;
    v174->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v174->__shared_owners_ = 0;
    v174->__shared_weak_owners_ = 0;
    v174[1].__vftable = v175;
  }
  else
  {
    v174 = 0;
  }
  v218 = v174;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v213, "D_out");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v173 + 3))(v173, &v217, 0, v213);
  if (v214 < 0)
    operator delete(v213[0]);
  v176 = v218;
  if (v218)
  {
    v177 = (unint64_t *)&v218->__shared_owners_;
    do
      v178 = __ldaxr(v177);
    while (__stlxr(v178 - 1, v177));
    if (!v178)
    {
      ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
      std::__shared_weak_count::__release_weak(v176);
    }
  }
  v179 = Scalar;
  Scalar = 0;
  if (v179)
    (*((void (**)(std::__shared_weak_count_vtbl *))v179->~__shared_weak_count + 1))(v179);
  if (v216 < 0)
    operator delete(v215[0]);
  v180 = *a3;
  v211 = v289;
  if (v289)
  {
    v181 = (std::__shared_weak_count *)operator new();
    v182 = v289;
    v181->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v181->__shared_owners_ = 0;
    v181->__shared_weak_owners_ = 0;
    v181[1].__vftable = (std::__shared_weak_count_vtbl *)v182;
  }
  else
  {
    v181 = 0;
  }
  v212 = v181;
  v289 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v180 + 56))(v180, &v211);
  v183 = v212;
  if (v212)
  {
    v184 = (unint64_t *)&v212->__shared_owners_;
    do
      v185 = __ldaxr(v184);
    while (__stlxr(v185 - 1, v184));
    if (!v185)
    {
      ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
      std::__shared_weak_count::__release_weak(v183);
    }
  }
  v186 = v289;
  v289 = 0;
  if (v186)
    (*((void (**)(void **))*v186 + 1))(v186);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v281);
  v187 = v281;
  std::string::basic_string[abi:ne180100]<0>(v207, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v207, 1, (uint64_t *)&__p);
  v209 = __p;
  if (__p)
  {
    v188 = (std::__shared_weak_count *)operator new();
    v189 = (std::__shared_weak_count_vtbl *)__p;
    v188->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v188->__shared_owners_ = 0;
    v188->__shared_weak_owners_ = 0;
    v188[1].__vftable = v189;
  }
  else
  {
    v188 = 0;
  }
  v210 = v188;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&v289, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v292, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v293, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v294, "int32");
  std::string::basic_string[abi:ne180100]<0>(v295, "int8");
  std::string::basic_string[abi:ne180100]<0>(v296, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v289, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v187 + 24))(v187, &v209, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v296[i + 2]) < 0)
      operator delete((void *)v296[i]);
  }
  v191 = v210;
  if (v210)
  {
    v192 = (unint64_t *)&v210->__shared_owners_;
    do
      v193 = __ldaxr(v192);
    while (__stlxr(v193 - 1, v192));
    if (!v193)
    {
      ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
      std::__shared_weak_count::__release_weak(v191);
    }
  }
  v194 = __p;
  __p = 0;
  if (v194)
    (*(void (**)(void *))(*(_QWORD *)v194 + 8))(v194);
  if (v208 < 0)
    operator delete(v207[0]);
  v195 = *a3;
  v205 = v281;
  if (v281)
  {
    v196 = (std::__shared_weak_count *)operator new();
    v197 = (std::__shared_weak_count_vtbl *)v281;
    v196->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v196->__shared_owners_ = 0;
    v196->__shared_weak_owners_ = 0;
    v196[1].__vftable = v197;
  }
  else
  {
    v196 = 0;
  }
  v206 = v196;
  v281 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v195 + 56))(v195, &v205);
  v198 = v206;
  if (v206)
  {
    v199 = (unint64_t *)&v206->__shared_owners_;
    do
      v200 = __ldaxr(v199);
    while (__stlxr(v200 - 1, v199));
    if (!v200)
    {
      ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
      std::__shared_weak_count::__release_weak(v198);
    }
  }
  v201 = v281;
  v281 = 0;
  if (v201)
    (*(void (**)(void *))(*(_QWORD *)v201 + 8))(v201);
  if (v284)
  {
    v202 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v284);
    MEMORY[0x1E0C023A0](v202, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v275, 0);
  result = (uint64_t)v288;
  if (v288)
  {
    v204 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v288);
    return MEMORY[0x1E0C023A0](v204, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09D0E34(_Unwind_Exception *a1)
{
  uint64_t *v1;
  unint64_t v3;
  uint64_t v4;

  v3 = STACK[0x318];
  STACK[0x318] = 0;
  if (v3)
    (*(void (**)(unint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x330], 0);
  v4 = *v1;
  *v1 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x2D8], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x358], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::MatMul::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count_vtbl *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count_vtbl *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  void *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  unsigned __int8 *v41;
  void **v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  unsigned __int8 *v47;
  void **v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  char **v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t *v74;
  char *v75;
  char *v76;
  char *v77;
  __int128 v78;
  void **v79;
  char *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  char **v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  _OWORD *v99;
  unsigned __int8 *v100;
  void **v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  std::__shared_weak_count_vtbl *v106;
  std::__shared_weak_count *v107;
  std::__shared_weak_count *v108;
  unint64_t *p_shared_owners;
  unint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  void **v114;
  std::__shared_weak_count *v115;
  std::__shared_weak_count_vtbl *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count_vtbl *v120;
  void **v121;
  std::__shared_weak_count *v122;
  std::__shared_weak_count_vtbl *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count_vtbl *v127;
  void **v128;
  std::__shared_weak_count *v129;
  std::__shared_weak_count_vtbl *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count_vtbl *v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  void **v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  void **v141;
  void **v142;
  std::__shared_weak_count *v143;
  std::__shared_weak_count_vtbl *v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count_vtbl *v148;
  void **v149;
  std::__shared_weak_count *v150;
  std::__shared_weak_count_vtbl *v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count_vtbl *v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  void **v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  void **v162;
  void *v163;
  std::__shared_weak_count *v164;
  std::__shared_weak_count_vtbl *v165;
  uint64_t i;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  void *v170;
  uint64_t v171;
  std::__shared_weak_count *v172;
  std::__shared_weak_count_vtbl *v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  void *v177;
  uint64_t v178;
  uint64_t result;
  uint64_t v180;
  void *v181;
  std::__shared_weak_count *v182;
  void *v183[2];
  char v184;
  void *v185;
  std::__shared_weak_count *v186;
  void **v187;
  std::__shared_weak_count *v188;
  void *v189[2];
  char v190;
  void *v191[2];
  char v192;
  std::__shared_weak_count_vtbl *v193;
  std::__shared_weak_count *v194;
  void *v195[2];
  char v196;
  void *v197[2];
  char v198;
  std::__shared_weak_count_vtbl *v199;
  std::__shared_weak_count *v200;
  void **v201;
  std::__shared_weak_count *v202;
  void *v203[2];
  char v204;
  std::__shared_weak_count_vtbl *v205;
  std::__shared_weak_count *v206;
  void *v207[2];
  char v208;
  void *v209[2];
  char v210;
  std::__shared_weak_count_vtbl *v211;
  std::__shared_weak_count *v212;
  void *v213[2];
  char v214;
  void *v215[2];
  char v216;
  std::__shared_weak_count_vtbl *v217;
  std::__shared_weak_count *v218;
  void *v219;
  std::__shared_weak_count *v220;
  __n128 v221;
  __int128 v222;
  __int128 v223;
  void *v224[2];
  uint64_t v225;
  void *v226;
  void *v227;
  _QWORD *v228;
  __n128 v229;
  uint64_t v230;
  uint64_t v231;
  _QWORD *v232;
  char **v233;
  __n128 v234;
  __n128 v235;
  __n128 v236;
  void *__p;
  void *v238;
  _QWORD *v239;
  void *v240;
  void *v241;
  _QWORD *v242;
  void *v243;
  void *v244;
  _QWORD *v245;
  __n128 v246;
  _QWORD *v247;
  void **v248;
  uint64_t v249;
  uint64_t v250;
  _QWORD v251[3];
  uint64_t v252[3];
  uint64_t v253[3];
  uint64_t v254[3];
  _QWORD v255[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_on_zero_shared;
  uint64_t v258;
  uint64_t v259;
  _QWORD v260[3];
  _QWORD *v261;
  _BYTE v262[24];
  _BYTE *v263;
  _QWORD v264[3];
  _QWORD *v265;
  uint64_t v266;

  v266 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v247 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v9->__on_zero_shared;
  v258 = (uint64_t)&v9->__on_zero_shared;
  v9->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v9->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  Scalar = v9;
  v248 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v245 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v243 = v12;
  v244 = v12 + 2;
  v249 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v243);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v242 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  v240 = v15;
  v241 = v15 + 2;
  v250 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v240);
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(0x10uLL);
  v239 = v18 + 2;
  *v18 = v16;
  v18[1] = v17;
  __p = v18;
  v238 = v18 + 2;
  v251[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v248, 4, &v246);
  MIL::IRParameter::Make(&v246, (uint64_t *)&v226);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v226);
  v19 = v226;
  v226 = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = (std::__shared_weak_count *)v246.n128_u64[1];
  if (v246.n128_u64[1])
  {
    v21 = (unint64_t *)(v246.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (__p)
  {
    v238 = __p;
    operator delete(__p);
  }
  if (v240)
  {
    v241 = v240;
    operator delete(v240);
  }
  if (v243)
  {
    v244 = v243;
    operator delete(v243);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v23 = v247;
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v26->__on_zero_shared;
  v258 = (uint64_t)&v26->__on_zero_shared;
  v26->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v24;
  v26->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v25;
  Scalar = v26;
  v248 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v27 = MIL::IRUnknownDimension::Make(a1, 0);
  v28 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v29 = operator new(0x10uLL);
  v245 = v29 + 2;
  *v29 = v27;
  v29[1] = v28;
  v243 = v29;
  v244 = v29 + 2;
  v249 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v243);
  v30 = MIL::IRUnknownDimension::Make(a1, 0);
  v31 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v32 = operator new(0x10uLL);
  v242 = v32 + 2;
  *v32 = v30;
  v32[1] = v31;
  v240 = v32;
  v241 = v32 + 2;
  v250 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v240);
  v33 = MIL::IRUnknownDimension::Make(a1, 0);
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = operator new(0x10uLL);
  v239 = v35 + 2;
  *v35 = v33;
  v35[1] = v34;
  __p = v35;
  v238 = v35 + 2;
  v251[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v248, 4, &v236);
  MIL::IRParameter::Make(&v236, (uint64_t *)&v226);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v23, "y", (uint64_t *)&v226);
  v36 = v226;
  v226 = 0;
  if (v36)
    (*(void (**)(void *))(*(_QWORD *)v36 + 8))(v36);
  v37 = (std::__shared_weak_count *)v236.n128_u64[1];
  if (v236.n128_u64[1])
  {
    v38 = (unint64_t *)(v236.n128_u64[1] + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (__p)
  {
    v238 = __p;
    operator delete(__p);
  }
  if (v240)
  {
    v241 = v240;
    operator delete(v240);
  }
  if (v243)
  {
    v244 = v243;
    operator delete(v243);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v40 = v247;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v235);
  MIL::IRParameter::Make(&v235, (uint64_t *)&v248);
  v41 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v40, "transpose_x", (uint64_t *)&v248);
  v42 = v248;
  v248 = 0;
  if (v42)
    (*((void (**)(void **))*v42 + 1))(v42);
  v43 = (std::__shared_weak_count *)v235.n128_u64[1];
  if (v235.n128_u64[1])
  {
    v44 = (unint64_t *)(v235.n128_u64[1] + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v41 + 5) + 32))(*((_QWORD *)v41 + 5), 1);
  v46 = v247;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v234);
  MIL::IRParameter::Make(&v234, (uint64_t *)&v248);
  v47 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v46, "transpose_y", (uint64_t *)&v248);
  v48 = v248;
  v248 = 0;
  if (v48)
    (*((void (**)(void **))*v48 + 1))(v48);
  v49 = (std::__shared_weak_count *)v234.n128_u64[1];
  if (v234.n128_u64[1])
  {
    v50 = (unint64_t *)(v234.n128_u64[1] + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v47 + 5) + 32))(*((_QWORD *)v47 + 5), 1);
  v233 = 0;
  v52 = operator new();
  *(_QWORD *)v52 = 0;
  *(_QWORD *)(v52 + 8) = 0;
  *(_QWORD *)(v52 + 16) = 0;
  v248 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v233, (void **)v52);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v248, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v233, 1uLL);
  v53 = v233;
  v54 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v55 = operator new(8uLL);
  v243 = v55;
  *v55 = v54;
  v245 = v55 + 1;
  v244 = v55 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v243);
  v56 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v57 = operator new(8uLL);
  v240 = v57;
  *v57 = v56;
  v242 = v57 + 1;
  v241 = v57 + 1;
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v240);
  v58 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v59 = operator new(8uLL);
  __p = v59;
  *v59 = v58;
  v239 = v59 + 1;
  v238 = v59 + 1;
  v258 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v60 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v61 = operator new(8uLL);
  v226 = v61;
  *v61 = v60;
  v227 = v61 + 1;
  v228 = v61 + 1;
  v259 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v226);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 4, &v229);
  MIL::IRParameter::Make(&v229, &v230);
  v62 = v230;
  v231 = v230;
  if (v230)
  {
    v63 = (_QWORD *)operator new();
    v64 = v230;
    *v63 = &unk_1EA99F888;
    v63[1] = 0;
    v63[2] = 0;
    v63[3] = v64;
  }
  else
  {
    v63 = 0;
  }
  v232 = v63;
  v230 = 0;
  v65 = v53[2];
  v66 = v53[1];
  if (v66 >= v65)
  {
    v68 = (v66 - *v53) >> 4;
    v69 = v68 + 1;
    if ((unint64_t)(v68 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v70 = v65 - *v53;
    if (v70 >> 3 > v69)
      v69 = v70 >> 3;
    if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF0)
      v71 = 0xFFFFFFFFFFFFFFFLL;
    else
      v71 = v69;
    v251[1] = v53 + 2;
    v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v53 + 2), v71);
    v74 = (uint64_t *)&v72[16 * v68];
    *v74 = v62;
    v74[1] = (uint64_t)v63;
    v232 = 0;
    v231 = 0;
    v76 = *v53;
    v75 = v53[1];
    if (v75 == *v53)
    {
      v79 = (void **)v53[1];
      v77 = &v72[16 * v68];
    }
    else
    {
      v77 = &v72[16 * v68];
      do
      {
        v78 = *((_OWORD *)v75 - 1);
        v75 -= 16;
        *((_OWORD *)v77 - 1) = v78;
        v77 -= 16;
        *(_QWORD *)v75 = 0;
        *((_QWORD *)v75 + 1) = 0;
      }
      while (v75 != v76);
      v79 = (void **)*v53;
      v75 = v53[1];
    }
    v67 = (char *)(v74 + 2);
    *v53 = v77;
    v249 = (uint64_t)v79;
    v53[1] = (char *)(v74 + 2);
    v250 = (uint64_t)v75;
    v80 = v53[2];
    v53[2] = &v72[16 * v73];
    v251[0] = v80;
    v248 = v79;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v248);
  }
  else
  {
    *(_QWORD *)v66 = v62;
    *((_QWORD *)v66 + 1) = v63;
    v67 = v66 + 16;
    v232 = 0;
    v231 = 0;
  }
  v53[1] = v67;
  v81 = v230;
  v230 = 0;
  if (v81)
    (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
  v82 = (std::__shared_weak_count *)v229.n128_u64[1];
  if (v229.n128_u64[1])
  {
    v83 = (unint64_t *)(v229.n128_u64[1] + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  if (v226)
  {
    v227 = v226;
    operator delete(v226);
  }
  if (__p)
  {
    v238 = __p;
    operator delete(__p);
  }
  if (v240)
  {
    v241 = v240;
    operator delete(v240);
  }
  if (v243)
  {
    v244 = v243;
    operator delete(v243);
  }
  *(_OWORD *)v224 = *(_OWORD *)a2;
  v225 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v85 = (uint64_t)v247;
  *(_QWORD *)&v223 = v247;
  if (v247)
  {
    v86 = (_QWORD *)operator new();
    *v86 = &unk_1EA99F8E8;
    v86[1] = 0;
    v86[2] = 0;
    v86[3] = v85;
  }
  else
  {
    v86 = 0;
  }
  *((_QWORD *)&v223 + 1) = v86;
  v247 = 0;
  *(_QWORD *)&v222 = v233;
  if (v233)
  {
    v87 = (_QWORD *)operator new();
    v88 = v233;
    *v87 = &unk_1EA99F948;
    v87[1] = 0;
    v87[2] = 0;
    v87[3] = v88;
  }
  else
  {
    v87 = 0;
  }
  *((_QWORD *)&v222 + 1) = v87;
  v233 = 0;
  v264[0] = &unk_1EA99FAC8;
  v264[1] = MIL::Operators::Common::ios18::CustomValidators::ValidateMatMul;
  v265 = v264;
  v263 = 0;
  MIL::IROperator::Make((__int128 *)v224, &v223, &v222, (uint64_t)v264, (uint64_t)v262, a3);
  v89 = v263;
  if (v263 == v262)
  {
    v90 = 4;
    v89 = v262;
  }
  else
  {
    if (!v263)
      goto LABEL_88;
    v90 = 5;
  }
  (*(void (**)(void))(*v89 + 8 * v90))();
LABEL_88:
  v91 = v265;
  if (v265 == v264)
  {
    v92 = 4;
    v91 = v264;
    goto LABEL_92;
  }
  if (v265)
  {
    v92 = 5;
LABEL_92:
    (*(void (**)(void))(*v91 + 8 * v92))();
  }
  v93 = (std::__shared_weak_count *)*((_QWORD *)&v222 + 1);
  if (*((_QWORD *)&v222 + 1))
  {
    v94 = (unint64_t *)(*((_QWORD *)&v222 + 1) + 8);
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = (std::__shared_weak_count *)*((_QWORD *)&v223 + 1);
  if (*((_QWORD *)&v223 + 1))
  {
    v97 = (unint64_t *)(*((_QWORD *)&v223 + 1) + 8);
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  if (SHIBYTE(v225) < 0)
    operator delete(v224[0]);
  v243 = 0;
  v99 = (_OWORD *)operator new();
  *v99 = 0u;
  v99[1] = 0u;
  *((_DWORD *)v99 + 8) = 1065353216;
  v243 = v99;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v221);
  MIL::IRParameter::Make(&v221, (uint64_t *)&v248);
  v100 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v99, "minimum_compute_type", (uint64_t *)&v248);
  v101 = v248;
  v248 = 0;
  if (v101)
    (*((void (**)(void **))*v101 + 1))(v101);
  v102 = (std::__shared_weak_count *)v221.n128_u64[1];
  if (v221.n128_u64[1])
  {
    v103 = (unint64_t *)(v221.n128_u64[1] + 8);
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v100 + 5) + 32))(*((_QWORD *)v100 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v100 + 5) + 48))(*((_QWORD *)v100 + 5), 1);
  v105 = *a3;
  v106 = (std::__shared_weak_count_vtbl *)v243;
  v219 = v243;
  if (v243)
  {
    v107 = (std::__shared_weak_count *)operator new();
    v107->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v107->__shared_owners_ = 0;
    v107->__shared_weak_owners_ = 0;
    v107[1].__vftable = v106;
  }
  else
  {
    v107 = 0;
  }
  v220 = v107;
  v243 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v105 + 184))(v105, &v219);
  v108 = v220;
  if (v220)
  {
    p_shared_owners = (unint64_t *)&v220->__shared_owners_;
    do
      v110 = __ldaxr(p_shared_owners);
    while (__stlxr(v110 - 1, p_shared_owners));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = *a3;
  v260[0] = &off_1EA99FBD8;
  v260[1] = MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceMatMul;
  v261 = v260;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v111 + 200))(v111, v260);
  v112 = v261;
  if (v261 == v260)
  {
    v113 = 4;
    v112 = v260;
  }
  else
  {
    if (!v261)
      goto LABEL_125;
    v113 = 5;
  }
  (*(void (**)(void))(*v112 + 8 * v113))();
LABEL_125:
  MIL::Validation::TensorDTypeConstraints::Make(&v248);
  v114 = v248;
  std::string::basic_string[abi:ne180100]<0>(v215, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v215, 0, (uint64_t *)&Scalar);
  v217 = Scalar;
  if (Scalar)
  {
    v115 = (std::__shared_weak_count *)operator new();
    v116 = Scalar;
    v115->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v115->__shared_owners_ = 0;
    v115->__shared_weak_owners_ = 0;
    v115[1].__vftable = v116;
  }
  else
  {
    v115 = 0;
  }
  v218 = v115;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v213, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v114 + 3))(v114, &v217, v213);
  if (v214 < 0)
    operator delete(v213[0]);
  v117 = v218;
  if (v218)
  {
    v118 = (unint64_t *)&v218->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = Scalar;
  Scalar = 0;
  if (v120)
    (*((void (**)(std::__shared_weak_count_vtbl *))v120->~__shared_weak_count + 1))(v120);
  if (v216 < 0)
    operator delete(v215[0]);
  v121 = v248;
  std::string::basic_string[abi:ne180100]<0>(v209, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v209, 0, (uint64_t *)&Scalar);
  v211 = Scalar;
  if (Scalar)
  {
    v122 = (std::__shared_weak_count *)operator new();
    v123 = Scalar;
    v122->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v122->__shared_owners_ = 0;
    v122->__shared_weak_owners_ = 0;
    v122[1].__vftable = v123;
  }
  else
  {
    v122 = 0;
  }
  v212 = v122;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v207, "U");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v121 + 3))(v121, &v211, v207);
  if (v208 < 0)
    operator delete(v207[0]);
  v124 = v212;
  if (v212)
  {
    v125 = (unint64_t *)&v212->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = Scalar;
  Scalar = 0;
  if (v127)
    (*((void (**)(std::__shared_weak_count_vtbl *))v127->~__shared_weak_count + 1))(v127);
  if (v210 < 0)
    operator delete(v209[0]);
  v128 = v248;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v205 = Scalar;
  if (Scalar)
  {
    v129 = (std::__shared_weak_count *)operator new();
    v130 = Scalar;
    v129->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v129->__shared_owners_ = 0;
    v129->__shared_weak_owners_ = 0;
    v129[1].__vftable = v130;
  }
  else
  {
    v129 = 0;
  }
  v206 = v129;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v203, "V");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v128 + 3))(v128, &v205, v203);
  if (v204 < 0)
    operator delete(v203[0]);
  v131 = v206;
  if (v206)
  {
    v132 = (unint64_t *)&v206->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = Scalar;
  Scalar = 0;
  if (v134)
    (*((void (**)(std::__shared_weak_count_vtbl *))v134->~__shared_weak_count + 1))(v134);
  v135 = *a3;
  v201 = v248;
  if (v248)
  {
    v136 = (std::__shared_weak_count *)operator new();
    v137 = v248;
    v136->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v136->__shared_owners_ = 0;
    v136->__shared_weak_owners_ = 0;
    v136[1].__vftable = (std::__shared_weak_count_vtbl *)v137;
  }
  else
  {
    v136 = 0;
  }
  v202 = v136;
  v248 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v135 + 56))(v135, &v201);
  v138 = v202;
  if (v202)
  {
    v139 = (unint64_t *)&v202->__shared_owners_;
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }
  v141 = v248;
  v248 = 0;
  if (v141)
    (*((void (**)(void **))*v141 + 1))(v141);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v248);
  v142 = v248;
  std::string::basic_string[abi:ne180100]<0>(v197, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v197, 0, (uint64_t *)&Scalar);
  v199 = Scalar;
  if (Scalar)
  {
    v143 = (std::__shared_weak_count *)operator new();
    v144 = Scalar;
    v143->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v143->__shared_owners_ = 0;
    v143->__shared_weak_owners_ = 0;
    v143[1].__vftable = v144;
  }
  else
  {
    v143 = 0;
  }
  v200 = v143;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v195, "XD");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v142 + 3))(v142, &v199, 0, v195);
  if (v196 < 0)
    operator delete(v195[0]);
  v145 = v200;
  if (v200)
  {
    v146 = (unint64_t *)&v200->__shared_owners_;
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  v148 = Scalar;
  Scalar = 0;
  if (v148)
    (*((void (**)(std::__shared_weak_count_vtbl *))v148->~__shared_weak_count + 1))(v148);
  if (v198 < 0)
    operator delete(v197[0]);
  v149 = v248;
  std::string::basic_string[abi:ne180100]<0>(v191, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v191, 0, (uint64_t *)&Scalar);
  v193 = Scalar;
  if (Scalar)
  {
    v150 = (std::__shared_weak_count *)operator new();
    v151 = Scalar;
    v150->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v150->__shared_owners_ = 0;
    v150->__shared_weak_owners_ = 0;
    v150[1].__vftable = v151;
  }
  else
  {
    v150 = 0;
  }
  v194 = v150;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v189, "YD");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v149 + 3))(v149, &v193, 0, v189);
  if (v190 < 0)
    operator delete(v189[0]);
  v152 = v194;
  if (v194)
  {
    v153 = (unint64_t *)&v194->__shared_owners_;
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
    }
  }
  v155 = Scalar;
  Scalar = 0;
  if (v155)
    (*((void (**)(std::__shared_weak_count_vtbl *))v155->~__shared_weak_count + 1))(v155);
  if (v192 < 0)
    operator delete(v191[0]);
  v156 = *a3;
  v187 = v248;
  if (v248)
  {
    v157 = (std::__shared_weak_count *)operator new();
    v158 = v248;
    v157->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v157->__shared_owners_ = 0;
    v157->__shared_weak_owners_ = 0;
    v157[1].__vftable = (std::__shared_weak_count_vtbl *)v158;
  }
  else
  {
    v157 = 0;
  }
  v188 = v157;
  v248 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v156 + 56))(v156, &v187);
  v159 = v188;
  if (v188)
  {
    v160 = (unint64_t *)&v188->__shared_owners_;
    do
      v161 = __ldaxr(v160);
    while (__stlxr(v161 - 1, v160));
    if (!v161)
    {
      ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
      std::__shared_weak_count::__release_weak(v159);
    }
  }
  v162 = v248;
  v248 = 0;
  if (v162)
    (*((void (**)(void **))*v162 + 1))(v162);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v240);
  v163 = v240;
  std::string::basic_string[abi:ne180100]<0>(v183, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v183, 1, (uint64_t *)&__p);
  v185 = __p;
  if (__p)
  {
    v164 = (std::__shared_weak_count *)operator new();
    v165 = (std::__shared_weak_count_vtbl *)__p;
    v164->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v164->__shared_owners_ = 0;
    v164->__shared_weak_owners_ = 0;
    v164[1].__vftable = v165;
  }
  else
  {
    v164 = 0;
  }
  v186 = v164;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&v248, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v251, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v252, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v253, "int32");
  std::string::basic_string[abi:ne180100]<0>(v254, "int8");
  std::string::basic_string[abi:ne180100]<0>(v255, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v248, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v163 + 24))(v163, &v185, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v255[i + 2]) < 0)
      operator delete((void *)v255[i]);
  }
  v167 = v186;
  if (v186)
  {
    v168 = (unint64_t *)&v186->__shared_owners_;
    do
      v169 = __ldaxr(v168);
    while (__stlxr(v169 - 1, v168));
    if (!v169)
    {
      ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
      std::__shared_weak_count::__release_weak(v167);
    }
  }
  v170 = __p;
  __p = 0;
  if (v170)
    (*(void (**)(void *))(*(_QWORD *)v170 + 8))(v170);
  if (v184 < 0)
    operator delete(v183[0]);
  v171 = *a3;
  v181 = v240;
  if (v240)
  {
    v172 = (std::__shared_weak_count *)operator new();
    v173 = (std::__shared_weak_count_vtbl *)v240;
    v172->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v172->__shared_owners_ = 0;
    v172->__shared_weak_owners_ = 0;
    v172[1].__vftable = v173;
  }
  else
  {
    v172 = 0;
  }
  v182 = v172;
  v240 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v171 + 56))(v171, &v181);
  v174 = v182;
  if (v182)
  {
    v175 = (unint64_t *)&v182->__shared_owners_;
    do
      v176 = __ldaxr(v175);
    while (__stlxr(v176 - 1, v175));
    if (!v176)
    {
      ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
      std::__shared_weak_count::__release_weak(v174);
    }
  }
  v177 = v240;
  v240 = 0;
  if (v177)
    (*(void (**)(void *))(*(_QWORD *)v177 + 8))(v177);
  if (v243)
  {
    v178 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v243);
    MEMORY[0x1E0C023A0](v178, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v233, 0);
  result = (uint64_t)v247;
  if (v247)
  {
    v180 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v247);
    return MEMORY[0x1E0C023A0](v180, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09D2BAC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  unint64_t v3;
  uint64_t v4;

  v3 = STACK[0x268];
  STACK[0x268] = 0;
  if (v3)
    (*(void (**)(unint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x280], 0);
  v4 = *v1;
  *v1 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x218], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x2A8], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::CustomValueTypeInference::ValueTypeInferenceTensorToTensorBuffer(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = (std::__shared_weak_count *)a2[1];
  v10 = *a2;
  v11 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  MIL::Operators::Common::Shared::CustomValueTypeInference::ValueTypeInferenceTensorToTensorBuffer(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E09D32A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::CustomValueTypeInference::ValueTypeInferenceTensorBufferToTensor(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;

  v4 = *(std::__shared_weak_count **)(a2 + 8);
  v9 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  MIL::Operators::Common::Shared::CustomValueTypeInference::ValueTypeInferenceTensorBufferToTensor(a1, a3, a4);
  if (v9)
  {
    v7 = (unint64_t *)&v9->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1E09D333C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::PixelBufferToTensor::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t *v68;
  char *v69;
  char *v70;
  char *v71;
  __int128 v72;
  char *v73;
  char *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  char **v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  std::__shared_weak_count_vtbl *v98;
  std::__shared_weak_count *v99;
  unint64_t *p_shared_owners;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  std::__shared_weak_count_vtbl *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  std::__shared_weak_count_vtbl *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  std::__shared_weak_count_vtbl *v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  std::__shared_weak_count_vtbl *v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  std::__shared_weak_count_vtbl *v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  std::__shared_weak_count_vtbl *v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t result;
  uint64_t v153;
  uint64_t v154;
  std::__shared_weak_count *v155;
  void *v156[2];
  char v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  void *v160[2];
  char v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  void *v164[2];
  char v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  void *v168[2];
  char v169;
  void *v170[2];
  char v171;
  uint64_t v172;
  std::__shared_weak_count *v173;
  void *v174[2];
  char v175;
  void *v176[2];
  char v177;
  uint64_t v178;
  std::__shared_weak_count *v179;
  uint64_t v180;
  std::__shared_weak_count *v181;
  void *v182[2];
  char v183;
  uint64_t v184;
  std::__shared_weak_count *v185;
  __int128 v186;
  __int128 v187;
  void *v188[2];
  uint64_t v189;
  void *v190;
  void *v191;
  _QWORD *v192;
  void *v193;
  void *v194;
  _QWORD *v195;
  void *v196;
  void *v197;
  _QWORD *v198;
  void *v199;
  void *v200;
  _QWORD *v201;
  void *v202;
  void *v203;
  _QWORD *v204;
  void *v205;
  void *v206;
  _QWORD *v207;
  __n128 v208;
  uint64_t v209;
  uint64_t v210;
  _QWORD *v211;
  char **v212;
  __n128 v213;
  void *__p;
  void *v215;
  _QWORD *v216;
  __n128 v217;
  _QWORD *v218;
  _QWORD v219[3];
  _QWORD *v220;
  _BYTE v221[24];
  _BYTE *v222;
  _QWORD v223[3];
  _QWORD *v224;
  void *v225;
  void *v226;
  _QWORD *v227;
  __int128 v228;
  __int128 v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  __int128 v234;
  char *v235;
  char *v236;
  char **v237;
  uint64_t v238;

  v238 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v218 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = operator new(0x10uLL);
  *((_QWORD *)&v234 + 1) = v9 + 2;
  v235 = (char *)(v9 + 2);
  *v9 = v7;
  v9[1] = v8;
  *(_QWORD *)&v234 = v9;
  v10 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v11 = operator new(8uLL);
  __p = v11;
  *v11 = v10;
  v216 = v11 + 1;
  v215 = v11 + 1;
  v228 = 0u;
  v229 = 0u;
  LODWORD(v230) = 1065353216;
  v225 = (void *)MIL::IRPixelBufferValueType::MakeWithShape(a1, 0x14u, &v234, (uint64_t)&__p, (uint64_t *)&v228);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v225, 1, &v217);
  MIL::IRParameter::Make(&v217, (uint64_t *)&v205);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "input", (uint64_t *)&v205);
  v12 = v205;
  v205 = 0;
  if (v12)
    (*(void (**)(void *))(*(_QWORD *)v12 + 8))(v12);
  v13 = (std::__shared_weak_count *)v217.n128_u64[1];
  if (v217.n128_u64[1])
  {
    v14 = (unint64_t *)(v217.n128_u64[1] + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&v228);
  if (__p)
  {
    v215 = __p;
    operator delete(__p);
  }
  if ((_QWORD)v234)
  {
    *((_QWORD *)&v234 + 1) = v234;
    operator delete((void *)v234);
  }
  v16 = v218;
  *(_QWORD *)&v234 = MIL::IRTensorValueType::MakeScalar(a1, 14);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v234, 1, &v213);
  MIL::IRParameter::Make(&v213, (uint64_t *)&v228);
  v17 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v16, "plane_index", (uint64_t *)&v228);
  v18 = v228;
  *(_QWORD *)&v228 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = (std::__shared_weak_count *)v213.n128_u64[1];
  if (v213.n128_u64[1])
  {
    v20 = (unint64_t *)(v213.n128_u64[1] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v17 + 5) + 32))(*((_QWORD *)v17 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v17 + 5) + 48))(*((_QWORD *)v17 + 5), 1);
  v212 = 0;
  v22 = operator new();
  *(_QWORD *)v22 = 0;
  *(_QWORD *)(v22 + 8) = 0;
  *(_QWORD *)(v22 + 16) = 0;
  *(_QWORD *)&v228 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v212, (void **)v22);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v228, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v212, 1uLL);
  v23 = v212;
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = MIL::IRUnknownDimension::Make(a1, 0);
  v27 = operator new(0x18uLL);
  v216 = v27 + 3;
  *v27 = v24;
  v27[1] = v25;
  v27[2] = v26;
  __p = v27;
  v215 = v27 + 3;
  *(_QWORD *)&v228 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&__p);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = MIL::IRUnknownDimension::Make(a1, 0);
  v30 = MIL::IRUnknownDimension::Make(a1, 0);
  v31 = operator new(0x18uLL);
  v206 = v31 + 3;
  v207 = v31 + 3;
  *v31 = v28;
  v31[1] = v29;
  v31[2] = v30;
  v205 = v31;
  *((_QWORD *)&v228 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v205);
  v32 = MIL::IRUnknownDimension::Make(a1, 0);
  v33 = MIL::IRUnknownDimension::Make(a1, 0);
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = operator new(0x18uLL);
  v226 = v35 + 3;
  v227 = v35 + 3;
  *v35 = v32;
  v35[1] = v33;
  v35[2] = v34;
  v225 = v35;
  *(_QWORD *)&v229 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v225);
  v36 = MIL::IRUnknownDimension::Make(a1, 0);
  v37 = MIL::IRUnknownDimension::Make(a1, 0);
  v38 = MIL::IRUnknownDimension::Make(a1, 0);
  v39 = operator new(0x18uLL);
  v203 = v39 + 3;
  v204 = v39 + 3;
  *v39 = v36;
  v39[1] = v37;
  v39[2] = v38;
  v202 = v39;
  *((_QWORD *)&v229 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v202);
  v40 = MIL::IRUnknownDimension::Make(a1, 0);
  v41 = MIL::IRUnknownDimension::Make(a1, 0);
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = operator new(0x18uLL);
  v200 = v43 + 3;
  v201 = v43 + 3;
  *v43 = v40;
  v43[1] = v41;
  v43[2] = v42;
  v199 = v43;
  v230 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v199);
  v44 = MIL::IRUnknownDimension::Make(a1, 0);
  v45 = MIL::IRUnknownDimension::Make(a1, 0);
  v46 = MIL::IRUnknownDimension::Make(a1, 0);
  v47 = operator new(0x18uLL);
  v197 = v47 + 3;
  v198 = v47 + 3;
  *v47 = v44;
  v47[1] = v45;
  v47[2] = v46;
  v196 = v47;
  v231 = MIL::IRTensorValueType::MakeWithShape(a1, 16, (uint64_t)&v196);
  v48 = MIL::IRUnknownDimension::Make(a1, 0);
  v49 = MIL::IRUnknownDimension::Make(a1, 0);
  v50 = MIL::IRUnknownDimension::Make(a1, 0);
  v51 = operator new(0x18uLL);
  v194 = v51 + 3;
  v195 = v51 + 3;
  *v51 = v48;
  v51[1] = v49;
  v51[2] = v50;
  v193 = v51;
  v232 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v193);
  v52 = MIL::IRUnknownDimension::Make(a1, 0);
  v53 = MIL::IRUnknownDimension::Make(a1, 0);
  v54 = MIL::IRUnknownDimension::Make(a1, 0);
  v55 = operator new(0x18uLL);
  v191 = v55 + 3;
  v192 = v55 + 3;
  *v55 = v52;
  v55[1] = v53;
  v55[2] = v54;
  v190 = v55;
  v233 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v190);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v228, 8, &v208);
  MIL::IRParameter::Make(&v208, &v209);
  v56 = v209;
  v210 = v209;
  if (v209)
  {
    v57 = (_QWORD *)operator new();
    v58 = v209;
    *v57 = &unk_1EA99F888;
    v57[1] = 0;
    v57[2] = 0;
    v57[3] = v58;
  }
  else
  {
    v57 = 0;
  }
  v211 = v57;
  v209 = 0;
  v59 = v23[2];
  v60 = v23[1];
  if (v60 >= v59)
  {
    v62 = (v60 - *v23) >> 4;
    v63 = v62 + 1;
    if ((unint64_t)(v62 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v64 = v59 - *v23;
    if (v64 >> 3 > v63)
      v63 = v64 >> 3;
    if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF0)
      v65 = 0xFFFFFFFFFFFFFFFLL;
    else
      v65 = v63;
    v237 = v23 + 2;
    v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v23 + 2), v65);
    v68 = (uint64_t *)&v66[16 * v62];
    *v68 = v56;
    v68[1] = (uint64_t)v57;
    v211 = 0;
    v210 = 0;
    v70 = *v23;
    v69 = v23[1];
    if (v69 == *v23)
    {
      v73 = v23[1];
      v71 = &v66[16 * v62];
    }
    else
    {
      v71 = &v66[16 * v62];
      do
      {
        v72 = *((_OWORD *)v69 - 1);
        v69 -= 16;
        *((_OWORD *)v71 - 1) = v72;
        v71 -= 16;
        *(_QWORD *)v69 = 0;
        *((_QWORD *)v69 + 1) = 0;
      }
      while (v69 != v70);
      v73 = *v23;
      v69 = v23[1];
    }
    v61 = (char *)(v68 + 2);
    *v23 = v71;
    *(_QWORD *)&v234 = v73;
    *((_QWORD *)&v234 + 1) = v73;
    v23[1] = (char *)(v68 + 2);
    v235 = v69;
    v74 = v23[2];
    v23[2] = &v66[16 * v67];
    v236 = v74;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v234);
  }
  else
  {
    *(_QWORD *)v60 = v56;
    *((_QWORD *)v60 + 1) = v57;
    v61 = v60 + 16;
    v211 = 0;
    v210 = 0;
  }
  v23[1] = v61;
  v75 = v209;
  v209 = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  v76 = (std::__shared_weak_count *)v208.n128_u64[1];
  if (v208.n128_u64[1])
  {
    v77 = (unint64_t *)(v208.n128_u64[1] + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  if (v190)
  {
    v191 = v190;
    operator delete(v190);
  }
  if (v193)
  {
    v194 = v193;
    operator delete(v193);
  }
  if (v196)
  {
    v197 = v196;
    operator delete(v196);
  }
  if (v199)
  {
    v200 = v199;
    operator delete(v199);
  }
  if (v202)
  {
    v203 = v202;
    operator delete(v202);
  }
  if (v225)
  {
    v226 = v225;
    operator delete(v225);
  }
  if (v205)
  {
    v206 = v205;
    operator delete(v205);
  }
  if (__p)
  {
    v215 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v188 = *(_OWORD *)a2;
  v189 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v79 = (uint64_t)v218;
  *(_QWORD *)&v187 = v218;
  if (v218)
  {
    v80 = (_QWORD *)operator new();
    *v80 = &unk_1EA99F8E8;
    v80[1] = 0;
    v80[2] = 0;
    v80[3] = v79;
  }
  else
  {
    v80 = 0;
  }
  *((_QWORD *)&v187 + 1) = v80;
  v218 = 0;
  *(_QWORD *)&v186 = v212;
  if (v212)
  {
    v81 = (_QWORD *)operator new();
    v82 = v212;
    *v81 = &unk_1EA99F948;
    v81[1] = 0;
    v81[2] = 0;
    v81[3] = v82;
  }
  else
  {
    v81 = 0;
  }
  *((_QWORD *)&v186 + 1) = v81;
  v212 = 0;
  v223[0] = &unk_1EA99FAC8;
  v223[1] = MIL::Operators::Common::ios18::CustomValidators::ValidatePixelBufferToTensor;
  v224 = v223;
  v222 = 0;
  MIL::IROperator::Make((__int128 *)v188, &v187, &v186, (uint64_t)v223, (uint64_t)v221, a3);
  v83 = v222;
  if (v222 == v221)
  {
    v84 = 4;
    v83 = v221;
  }
  else
  {
    if (!v222)
      goto LABEL_70;
    v84 = 5;
  }
  (*(void (**)(void))(*v83 + 8 * v84))();
LABEL_70:
  v85 = v224;
  if (v224 == v223)
  {
    v86 = 4;
    v85 = v223;
    goto LABEL_74;
  }
  if (v224)
  {
    v86 = 5;
LABEL_74:
    (*(void (**)(void))(*v85 + 8 * v86))();
  }
  v87 = (std::__shared_weak_count *)*((_QWORD *)&v186 + 1);
  if (*((_QWORD *)&v186 + 1))
  {
    v88 = (unint64_t *)(*((_QWORD *)&v186 + 1) + 8);
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v90 = (std::__shared_weak_count *)*((_QWORD *)&v187 + 1);
  if (*((_QWORD *)&v187 + 1))
  {
    v91 = (unint64_t *)(*((_QWORD *)&v187 + 1) + 8);
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  if (SHIBYTE(v189) < 0)
    operator delete(v188[0]);
  v93 = *a3;
  v219[0] = &off_1EA99FBD8;
  v219[1] = MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferencePixelBufferToTensor;
  v220 = v219;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v93 + 200))(v93, v219);
  v94 = v220;
  if (v220 == v219)
  {
    v95 = 4;
    v94 = v219;
  }
  else
  {
    if (!v220)
      goto LABEL_92;
    v95 = 5;
  }
  (*(void (**)(void))(*v94 + 8 * v95))();
LABEL_92:
  MIL::Validation::TensorDTypeConstraints::Make(&v228);
  v96 = v228;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v234);
  v184 = v234;
  if ((_QWORD)v234)
  {
    v97 = (std::__shared_weak_count *)operator new();
    v98 = (std::__shared_weak_count_vtbl *)v234;
    v97->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v97->__shared_owners_ = 0;
    v97->__shared_weak_owners_ = 0;
    v97[1].__vftable = v98;
  }
  else
  {
    v97 = 0;
  }
  v185 = v97;
  *(_QWORD *)&v234 = 0;
  std::string::basic_string[abi:ne180100]<0>(v182, "T");
  (*(void (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v96 + 24))(v96, &v184, v182);
  if (v183 < 0)
    operator delete(v182[0]);
  v99 = v185;
  if (v185)
  {
    p_shared_owners = (unint64_t *)&v185->__shared_owners_;
    do
      v101 = __ldaxr(p_shared_owners);
    while (__stlxr(v101 - 1, p_shared_owners));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v102 = v234;
  *(_QWORD *)&v234 = 0;
  if (v102)
    (*(void (**)(uint64_t))(*(_QWORD *)v102 + 8))(v102);
  v103 = *a3;
  v180 = v228;
  if ((_QWORD)v228)
  {
    v104 = (std::__shared_weak_count *)operator new();
    v105 = (std::__shared_weak_count_vtbl *)v228;
    v104->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v104->__shared_owners_ = 0;
    v104->__shared_weak_owners_ = 0;
    v104[1].__vftable = v105;
  }
  else
  {
    v104 = 0;
  }
  v181 = v104;
  *(_QWORD *)&v228 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v103 + 56))(v103, &v180);
  v106 = v181;
  if (v181)
  {
    v107 = (unint64_t *)&v181->__shared_owners_;
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  v109 = v228;
  *(_QWORD *)&v228 = 0;
  if (v109)
    (*(void (**)(uint64_t))(*(_QWORD *)v109 + 8))(v109);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v228);
  v110 = v228;
  std::string::basic_string[abi:ne180100]<0>(v176, "input");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v176, 0, (uint64_t *)&v234);
  v178 = v234;
  if ((_QWORD)v234)
  {
    v111 = (std::__shared_weak_count *)operator new();
    v112 = (std::__shared_weak_count_vtbl *)v234;
    v111->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v111->__shared_owners_ = 0;
    v111->__shared_weak_owners_ = 0;
    v111[1].__vftable = v112;
  }
  else
  {
    v111 = 0;
  }
  v179 = v111;
  *(_QWORD *)&v234 = 0;
  std::string::basic_string[abi:ne180100]<0>(v174, "H");
  (*(void (**)(uint64_t, uint64_t *, _QWORD, void **))(*(_QWORD *)v110 + 24))(v110, &v178, 0, v174);
  if (v175 < 0)
    operator delete(v174[0]);
  v113 = v179;
  if (v179)
  {
    v114 = (unint64_t *)&v179->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  v116 = v234;
  *(_QWORD *)&v234 = 0;
  if (v116)
    (*(void (**)(uint64_t))(*(_QWORD *)v116 + 8))(v116);
  if (v177 < 0)
    operator delete(v176[0]);
  v117 = v228;
  std::string::basic_string[abi:ne180100]<0>(v170, "input");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v170, 0, (uint64_t *)&v234);
  v172 = v234;
  if ((_QWORD)v234)
  {
    v118 = (std::__shared_weak_count *)operator new();
    v119 = (std::__shared_weak_count_vtbl *)v234;
    v118->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v118->__shared_owners_ = 0;
    v118->__shared_weak_owners_ = 0;
    v118[1].__vftable = v119;
  }
  else
  {
    v118 = 0;
  }
  v173 = v118;
  *(_QWORD *)&v234 = 0;
  std::string::basic_string[abi:ne180100]<0>(v168, "W");
  (*(void (**)(uint64_t, uint64_t *, uint64_t, void **))(*(_QWORD *)v117 + 24))(v117, &v172, 1, v168);
  if (v169 < 0)
    operator delete(v168[0]);
  v120 = v173;
  if (v173)
  {
    v121 = (unint64_t *)&v173->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v123 = v234;
  *(_QWORD *)&v234 = 0;
  if (v123)
    (*(void (**)(uint64_t))(*(_QWORD *)v123 + 8))(v123);
  if (v171 < 0)
    operator delete(v170[0]);
  v124 = v228;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v234);
  v166 = v234;
  if ((_QWORD)v234)
  {
    v125 = (std::__shared_weak_count *)operator new();
    v126 = (std::__shared_weak_count_vtbl *)v234;
    v125->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v125->__shared_owners_ = 0;
    v125->__shared_weak_owners_ = 0;
    v125[1].__vftable = v126;
  }
  else
  {
    v125 = 0;
  }
  v167 = v125;
  *(_QWORD *)&v234 = 0;
  std::string::basic_string[abi:ne180100]<0>(v164, "C");
  (*(void (**)(uint64_t, uint64_t *, _QWORD, void **))(*(_QWORD *)v124 + 24))(v124, &v166, 0, v164);
  if (v165 < 0)
    operator delete(v164[0]);
  v127 = v167;
  if (v167)
  {
    v128 = (unint64_t *)&v167->__shared_owners_;
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  v130 = v234;
  *(_QWORD *)&v234 = 0;
  if (v130)
    (*(void (**)(uint64_t))(*(_QWORD *)v130 + 8))(v130);
  v131 = v228;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v234);
  v162 = v234;
  if ((_QWORD)v234)
  {
    v132 = (std::__shared_weak_count *)operator new();
    v133 = (std::__shared_weak_count_vtbl *)v234;
    v132->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v132->__shared_owners_ = 0;
    v132->__shared_weak_owners_ = 0;
    v132[1].__vftable = v133;
  }
  else
  {
    v132 = 0;
  }
  v163 = v132;
  *(_QWORD *)&v234 = 0;
  std::string::basic_string[abi:ne180100]<0>(v160, "H_OUT");
  (*(void (**)(uint64_t, uint64_t *, uint64_t, void **))(*(_QWORD *)v131 + 24))(v131, &v162, 1, v160);
  if (v161 < 0)
    operator delete(v160[0]);
  v134 = v163;
  if (v163)
  {
    v135 = (unint64_t *)&v163->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  v137 = v234;
  *(_QWORD *)&v234 = 0;
  if (v137)
    (*(void (**)(uint64_t))(*(_QWORD *)v137 + 8))(v137);
  v138 = v228;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v234);
  v158 = v234;
  if ((_QWORD)v234)
  {
    v139 = (std::__shared_weak_count *)operator new();
    v140 = (std::__shared_weak_count_vtbl *)v234;
    v139->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v139->__shared_owners_ = 0;
    v139->__shared_weak_owners_ = 0;
    v139[1].__vftable = v140;
  }
  else
  {
    v139 = 0;
  }
  v159 = v139;
  *(_QWORD *)&v234 = 0;
  std::string::basic_string[abi:ne180100]<0>(v156, "W_OUT");
  (*(void (**)(uint64_t, uint64_t *, uint64_t, void **))(*(_QWORD *)v138 + 24))(v138, &v158, 2, v156);
  if (v157 < 0)
    operator delete(v156[0]);
  v141 = v159;
  if (v159)
  {
    v142 = (unint64_t *)&v159->__shared_owners_;
    do
      v143 = __ldaxr(v142);
    while (__stlxr(v143 - 1, v142));
    if (!v143)
    {
      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
      std::__shared_weak_count::__release_weak(v141);
    }
  }
  v144 = v234;
  *(_QWORD *)&v234 = 0;
  if (v144)
    (*(void (**)(uint64_t))(*(_QWORD *)v144 + 8))(v144);
  v145 = *a3;
  v154 = v228;
  if ((_QWORD)v228)
  {
    v146 = (std::__shared_weak_count *)operator new();
    v147 = (std::__shared_weak_count_vtbl *)v228;
    v146->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v146->__shared_owners_ = 0;
    v146->__shared_weak_owners_ = 0;
    v146[1].__vftable = v147;
  }
  else
  {
    v146 = 0;
  }
  v155 = v146;
  *(_QWORD *)&v228 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v145 + 56))(v145, &v154);
  v148 = v155;
  if (v155)
  {
    v149 = (unint64_t *)&v155->__shared_owners_;
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
    }
  }
  v151 = v228;
  *(_QWORD *)&v228 = 0;
  if (v151)
    (*(void (**)(uint64_t))(*(_QWORD *)v151 + 8))(v151);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v212, 0);
  result = (uint64_t)v218;
  if (v218)
  {
    v153 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v218);
    return MEMORY[0x1E0C023A0](v153, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09D44D8(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 176);
  *(_QWORD *)(v2 - 176) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x230], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x270], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::TensorBufferToTensor::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  void *v85;
  _QWORD *v86;
  void *v87;
  unint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  _QWORD *v98;
  _QWORD *v99;
  char *v100;
  __int128 v101;
  _QWORD *v102;
  uint64_t v103;
  void *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  void *v111;
  _QWORD *v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  void **v125;
  std::__shared_weak_count *v126;
  std::__shared_weak_count_vtbl *v127;
  std::__shared_weak_count *v128;
  unint64_t *p_shared_owners;
  unint64_t v130;
  void *v131;
  void **v132;
  std::__shared_weak_count *v133;
  std::__shared_weak_count_vtbl *v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  void *v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  void **v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  void **v145;
  uint64_t result;
  uint64_t v147;
  void **v148;
  std::__shared_weak_count *v149;
  void *v150[2];
  char v151;
  void *v152;
  std::__shared_weak_count *v153;
  void *v154[2];
  char v155;
  void *v156[2];
  char v157;
  void *v158;
  std::__shared_weak_count *v159;
  __int128 v160;
  __int128 v161;
  void *v162[2];
  uint64_t v163;
  __n128 v164;
  void *__p;
  void *v166;
  _QWORD *v167;
  void *v168;
  void *v169;
  _QWORD *v170;
  void *v171;
  void *v172;
  _QWORD *v173;
  void *v174;
  void *v175;
  _QWORD *v176;
  void *v177;
  void *v178;
  _QWORD *v179;
  void *v180;
  void *v181;
  _QWORD *v182;
  void *v183;
  void *v184;
  _QWORD *v185;
  void *v186;
  void *v187;
  _QWORD *v188;
  void *v189;
  void *v190;
  _QWORD *v191;
  void *v192;
  void *v193;
  _QWORD *v194;
  void *v195;
  void *v196;
  _QWORD *v197;
  void *v198;
  void *v199;
  _QWORD *v200;
  void *v201;
  void *v202;
  _QWORD *v203;
  void *v204;
  void *v205;
  _QWORD *v206;
  void *v207;
  void *v208;
  _QWORD *v209;
  void *v210;
  void *v211;
  _QWORD *v212;
  void *v213;
  void *v214;
  _QWORD *v215;
  void *v216;
  void *v217;
  _QWORD *v218;
  void *v219;
  void *v220;
  _QWORD *v221;
  void *v222;
  void *v223;
  _QWORD *v224;
  void *v225;
  void *v226;
  _QWORD *v227;
  void *v228;
  void *v229;
  _QWORD *v230;
  void *v231;
  void *v232;
  _QWORD *v233;
  __n128 v234;
  uint64_t v235;
  uint64_t v236;
  void *v237;
  void *v238;
  _QWORD *v239;
  uint64_t v240;
  _QWORD *v241;
  _QWORD v242[3];
  _QWORD *v243;
  _BYTE v244[24];
  _BYTE *v245;
  _QWORD v246[3];
  _QWORD *v247;
  void **v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;

  v264 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v236 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v237 = v8;
  *v8 = v7;
  v239 = v8 + 1;
  v238 = v8 + 1;
  v9 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v231 = v10;
  *v10 = v9;
  v233 = v10 + 1;
  v232 = v10 + 1;
  v248 = (void **)MIL::IRTensorBufferValueType::MakeWithShape(a1, 9, (uint64_t)&v237, (uint64_t)&v231);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v228 = v12;
  *v12 = v11;
  v230 = v12 + 1;
  v229 = v12 + 1;
  v13 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  v225 = v14;
  *v14 = v13;
  v227 = v14 + 1;
  v226 = v14 + 1;
  v249 = MIL::IRTensorBufferValueType::MakeWithShape(a1, 10, (uint64_t)&v228, (uint64_t)&v225);
  v15 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v16 = operator new(8uLL);
  v222 = v16;
  *v16 = v15;
  v224 = v16 + 1;
  v223 = v16 + 1;
  v17 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  v219 = v18;
  *v18 = v17;
  v221 = v18 + 1;
  v220 = v18 + 1;
  v250 = MIL::IRTensorBufferValueType::MakeWithShape(a1, 11, (uint64_t)&v222, (uint64_t)&v219);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v216 = v20;
  *v20 = v19;
  v218 = v20 + 1;
  v217 = v20 + 1;
  v21 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  v213 = v22;
  *v22 = v21;
  v215 = v22 + 1;
  v214 = v22 + 1;
  v251 = MIL::IRTensorBufferValueType::MakeWithShape(a1, 14, (uint64_t)&v216, (uint64_t)&v213);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  v210 = v24;
  *v24 = v23;
  v212 = v24 + 1;
  v211 = v24 + 1;
  v25 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v26 = operator new(8uLL);
  v207 = v26;
  *v26 = v25;
  v209 = v26 + 1;
  v208 = v26 + 1;
  v252 = MIL::IRTensorBufferValueType::MakeWithShape(a1, 15, (uint64_t)&v210, (uint64_t)&v207);
  v27 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v28 = operator new(8uLL);
  v204 = v28;
  *v28 = v27;
  v206 = v28 + 1;
  v205 = v28 + 1;
  v29 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v30 = operator new(8uLL);
  v201 = v30;
  *v30 = v29;
  v202 = v30 + 1;
  v203 = v30 + 1;
  v253 = MIL::IRTensorBufferValueType::MakeWithShape(a1, 16, (uint64_t)&v204, (uint64_t)&v201);
  v31 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v32 = operator new(8uLL);
  v198 = v32;
  *v32 = v31;
  v199 = v32 + 1;
  v200 = v32 + 1;
  v33 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v34 = operator new(8uLL);
  v195 = v34;
  *v34 = v33;
  v196 = v34 + 1;
  v197 = v34 + 1;
  v254 = MIL::IRTensorBufferValueType::MakeWithShape(a1, 4, (uint64_t)&v198, (uint64_t)&v195);
  v35 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v36 = operator new(8uLL);
  v192 = v36;
  *v36 = v35;
  v193 = v36 + 1;
  v194 = v36 + 1;
  v37 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v38 = operator new(8uLL);
  v189 = v38;
  *v38 = v37;
  v190 = v38 + 1;
  v191 = v38 + 1;
  v255 = MIL::IRTensorBufferValueType::MakeWithShape(a1, 5, (uint64_t)&v192, (uint64_t)&v189);
  v39 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v40 = operator new(8uLL);
  v186 = v40;
  *v40 = v39;
  v187 = v40 + 1;
  v188 = v40 + 1;
  v41 = MIL::IRUnknownProperty::Make(a1, 0);
  v256 = MIL::IRTensorBufferValueType::MakeWithShapeAndRowAlignment(a1, 9, (uint64_t)&v186, v41);
  v42 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v43 = operator new(8uLL);
  v183 = v43;
  *v43 = v42;
  v184 = v43 + 1;
  v185 = v43 + 1;
  v44 = MIL::IRUnknownProperty::Make(a1, 0);
  v257 = MIL::IRTensorBufferValueType::MakeWithShapeAndRowAlignment(a1, 10, (uint64_t)&v183, v44);
  v45 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v46 = operator new(8uLL);
  v180 = v46;
  *v46 = v45;
  v181 = v46 + 1;
  v182 = v46 + 1;
  v47 = MIL::IRUnknownProperty::Make(a1, 0);
  v258 = MIL::IRTensorBufferValueType::MakeWithShapeAndRowAlignment(a1, 11, (uint64_t)&v180, v47);
  v48 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v49 = operator new(8uLL);
  v177 = v49;
  *v49 = v48;
  v178 = v49 + 1;
  v179 = v49 + 1;
  v50 = MIL::IRUnknownProperty::Make(a1, 0);
  v259 = MIL::IRTensorBufferValueType::MakeWithShapeAndRowAlignment(a1, 14, (uint64_t)&v177, v50);
  v51 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v52 = operator new(8uLL);
  v174 = v52;
  *v52 = v51;
  v175 = v52 + 1;
  v176 = v52 + 1;
  v53 = MIL::IRUnknownProperty::Make(a1, 0);
  v260 = MIL::IRTensorBufferValueType::MakeWithShapeAndRowAlignment(a1, 15, (uint64_t)&v174, v53);
  v54 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v55 = operator new(8uLL);
  v171 = v55;
  *v55 = v54;
  v172 = v55 + 1;
  v173 = v55 + 1;
  v56 = MIL::IRUnknownProperty::Make(a1, 0);
  v261 = MIL::IRTensorBufferValueType::MakeWithShapeAndRowAlignment(a1, 16, (uint64_t)&v171, v56);
  v57 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v58 = operator new(8uLL);
  v168 = v58;
  *v58 = v57;
  v169 = v58 + 1;
  v170 = v58 + 1;
  v59 = MIL::IRUnknownProperty::Make(a1, 0);
  v262 = MIL::IRTensorBufferValueType::MakeWithShapeAndRowAlignment(a1, 4, (uint64_t)&v168, v59);
  v60 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v61 = operator new(8uLL);
  __p = v61;
  *v61 = v60;
  v166 = v61 + 1;
  v167 = v61 + 1;
  v62 = MIL::IRUnknownProperty::Make(a1, 0);
  v263 = MIL::IRTensorBufferValueType::MakeWithShapeAndRowAlignment(a1, 5, (uint64_t)&__p, v62);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v248, 16, &v234);
  MIL::IRParameter::Make(&v234, &v235);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "input", &v235);
  v63 = v235;
  v235 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  v64 = (std::__shared_weak_count *)v234.n128_u64[1];
  if (v234.n128_u64[1])
  {
    v65 = (unint64_t *)(v234.n128_u64[1] + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  if (__p)
  {
    v166 = __p;
    operator delete(__p);
  }
  if (v168)
  {
    v169 = v168;
    operator delete(v168);
  }
  if (v171)
  {
    v172 = v171;
    operator delete(v171);
  }
  if (v174)
  {
    v175 = v174;
    operator delete(v174);
  }
  if (v177)
  {
    v178 = v177;
    operator delete(v177);
  }
  if (v180)
  {
    v181 = v180;
    operator delete(v180);
  }
  if (v183)
  {
    v184 = v183;
    operator delete(v183);
  }
  if (v186)
  {
    v187 = v186;
    operator delete(v186);
  }
  if (v189)
  {
    v190 = v189;
    operator delete(v189);
  }
  if (v192)
  {
    v193 = v192;
    operator delete(v192);
  }
  if (v195)
  {
    v196 = v195;
    operator delete(v195);
  }
  if (v198)
  {
    v199 = v198;
    operator delete(v198);
  }
  if (v201)
  {
    v202 = v201;
    operator delete(v201);
  }
  if (v204)
  {
    v205 = v204;
    operator delete(v204);
  }
  if (v207)
  {
    v208 = v207;
    operator delete(v207);
  }
  if (v210)
  {
    v211 = v210;
    operator delete(v210);
  }
  if (v213)
  {
    v214 = v213;
    operator delete(v213);
  }
  if (v216)
  {
    v217 = v216;
    operator delete(v216);
  }
  if (v219)
  {
    v220 = v219;
    operator delete(v219);
  }
  if (v222)
  {
    v223 = v222;
    operator delete(v222);
  }
  if (v225)
  {
    v226 = v225;
    operator delete(v225);
  }
  if (v228)
  {
    v229 = v228;
    operator delete(v228);
  }
  if (v231)
  {
    v232 = v231;
    operator delete(v231);
  }
  if (v237)
  {
    v238 = v237;
    operator delete(v237);
  }
  v204 = 0;
  v67 = operator new();
  *(_QWORD *)v67 = 0;
  *(_QWORD *)(v67 + 8) = 0;
  *(_QWORD *)(v67 + 16) = 0;
  v248 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v204, (void **)v67);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v248, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)v204, 1uLL);
  v68 = v204;
  v69 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v70 = operator new(8uLL);
  v231 = v70;
  *v70 = v69;
  v233 = v70 + 1;
  v232 = v70 + 1;
  v248 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v231);
  v71 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v72 = operator new(8uLL);
  v228 = v72;
  *v72 = v71;
  v230 = v72 + 1;
  v229 = v72 + 1;
  v249 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v228);
  v73 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v74 = operator new(8uLL);
  v225 = v74;
  *v74 = v73;
  v227 = v74 + 1;
  v226 = v74 + 1;
  v250 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v225);
  v75 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v76 = operator new(8uLL);
  v222 = v76;
  *v76 = v75;
  v224 = v76 + 1;
  v223 = v76 + 1;
  v251 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v222);
  v77 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v78 = operator new(8uLL);
  v219 = v78;
  *v78 = v77;
  v221 = v78 + 1;
  v220 = v78 + 1;
  v252 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v219);
  v79 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v80 = operator new(8uLL);
  v216 = v80;
  *v80 = v79;
  v218 = v80 + 1;
  v217 = v80 + 1;
  v253 = MIL::IRTensorValueType::MakeWithShape(a1, 16, (uint64_t)&v216);
  v81 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v82 = operator new(8uLL);
  v213 = v82;
  *v82 = v81;
  v215 = v82 + 1;
  v214 = v82 + 1;
  v254 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v213);
  v83 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v84 = operator new(8uLL);
  v210 = v84;
  *v84 = v83;
  v212 = v84 + 1;
  v211 = v84 + 1;
  v255 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v210);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v248, 8, &v164);
  MIL::IRParameter::Make(&v164, (uint64_t *)&v201);
  v85 = v201;
  v207 = v201;
  if (v201)
  {
    v86 = (_QWORD *)operator new();
    v87 = v201;
    *v86 = &unk_1EA99F888;
    v86[1] = 0;
    v86[2] = 0;
    v86[3] = v87;
  }
  else
  {
    v86 = 0;
  }
  v208 = v86;
  v201 = 0;
  v88 = v68[2];
  v89 = (_QWORD *)v68[1];
  if ((unint64_t)v89 >= v88)
  {
    v91 = ((uint64_t)v89 - *v68) >> 4;
    v92 = v91 + 1;
    if ((unint64_t)(v91 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v93 = v88 - *v68;
    if (v93 >> 3 > v92)
      v92 = v93 >> 3;
    if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF0)
      v94 = 0xFFFFFFFFFFFFFFFLL;
    else
      v94 = v92;
    v241 = v68 + 2;
    v95 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v68 + 2), v94);
    v97 = &v95[16 * v91];
    *(_QWORD *)v97 = v85;
    *((_QWORD *)v97 + 1) = v86;
    v208 = 0;
    v207 = 0;
    v99 = (_QWORD *)*v68;
    v98 = (_QWORD *)v68[1];
    if (v98 == (_QWORD *)*v68)
    {
      v102 = (_QWORD *)v68[1];
      v100 = &v95[16 * v91];
    }
    else
    {
      v100 = &v95[16 * v91];
      do
      {
        v101 = *((_OWORD *)v98 - 1);
        v98 -= 2;
        *((_OWORD *)v100 - 1) = v101;
        v100 -= 16;
        *v98 = 0;
        v98[1] = 0;
      }
      while (v98 != v99);
      v102 = (_QWORD *)*v68;
      v98 = (_QWORD *)v68[1];
    }
    v90 = v97 + 16;
    *v68 = v100;
    v238 = v102;
    v68[1] = v97 + 16;
    v239 = v98;
    v103 = v68[2];
    v68[2] = &v95[16 * v96];
    v240 = v103;
    v237 = v102;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v237);
  }
  else
  {
    *v89 = v85;
    v89[1] = v86;
    v90 = v89 + 2;
    v208 = 0;
    v207 = 0;
  }
  v68[1] = v90;
  v104 = v201;
  v201 = 0;
  if (v104)
    (*(void (**)(void *))(*(_QWORD *)v104 + 8))(v104);
  v105 = (std::__shared_weak_count *)v164.n128_u64[1];
  if (v164.n128_u64[1])
  {
    v106 = (unint64_t *)(v164.n128_u64[1] + 8);
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  if (v210)
  {
    v211 = v210;
    operator delete(v210);
  }
  if (v213)
  {
    v214 = v213;
    operator delete(v213);
  }
  if (v216)
  {
    v217 = v216;
    operator delete(v216);
  }
  if (v219)
  {
    v220 = v219;
    operator delete(v219);
  }
  if (v222)
  {
    v223 = v222;
    operator delete(v222);
  }
  if (v225)
  {
    v226 = v225;
    operator delete(v225);
  }
  if (v228)
  {
    v229 = v228;
    operator delete(v228);
  }
  if (v231)
  {
    v232 = v231;
    operator delete(v231);
  }
  *(_OWORD *)v162 = *(_OWORD *)a2;
  v163 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v108 = v236;
  *(_QWORD *)&v161 = v236;
  if (v236)
  {
    v109 = (_QWORD *)operator new();
    *v109 = &unk_1EA99F8E8;
    v109[1] = 0;
    v109[2] = 0;
    v109[3] = v108;
  }
  else
  {
    v109 = 0;
  }
  *((_QWORD *)&v161 + 1) = v109;
  v236 = 0;
  *(_QWORD *)&v160 = v204;
  if (v204)
  {
    v110 = (_QWORD *)operator new();
    v111 = v204;
    *v110 = &unk_1EA99F948;
    v110[1] = 0;
    v110[2] = 0;
    v110[3] = v111;
  }
  else
  {
    v110 = 0;
  }
  *((_QWORD *)&v160 + 1) = v110;
  v204 = 0;
  v246[0] = &unk_1EA99FAC8;
  v246[1] = MIL::Operators::Common::ios18::CustomValidators::ValidateTensorBufferToTensor;
  v247 = v246;
  v245 = 0;
  MIL::IROperator::Make((__int128 *)v162, &v161, &v160, (uint64_t)v246, (uint64_t)v244, a3);
  v112 = v245;
  if (v245 == v244)
  {
    v113 = 4;
    v112 = v244;
  }
  else
  {
    if (!v245)
      goto LABEL_107;
    v113 = 5;
  }
  (*(void (**)(void))(*v112 + 8 * v113))();
LABEL_107:
  v114 = v247;
  if (v247 == v246)
  {
    v115 = 4;
    v114 = v246;
    goto LABEL_111;
  }
  if (v247)
  {
    v115 = 5;
LABEL_111:
    (*(void (**)(void))(*v114 + 8 * v115))();
  }
  v116 = (std::__shared_weak_count *)*((_QWORD *)&v160 + 1);
  if (*((_QWORD *)&v160 + 1))
  {
    v117 = (unint64_t *)(*((_QWORD *)&v160 + 1) + 8);
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = (std::__shared_weak_count *)*((_QWORD *)&v161 + 1);
  if (*((_QWORD *)&v161 + 1))
  {
    v120 = (unint64_t *)(*((_QWORD *)&v161 + 1) + 8);
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  if (SHIBYTE(v163) < 0)
    operator delete(v162[0]);
  v122 = *a3;
  v242[0] = &off_1EA99FBD8;
  v242[1] = MIL::Operators::Common::ios18::CustomValueTypeInference::ValueTypeInferenceTensorBufferToTensor;
  v243 = v242;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v122 + 200))(v122, v242);
  v123 = v243;
  if (v243 == v242)
  {
    v124 = 4;
    v123 = v242;
  }
  else
  {
    if (!v243)
      goto LABEL_129;
    v124 = 5;
  }
  (*(void (**)(void))(*v123 + 8 * v124))();
LABEL_129:
  MIL::Validation::TensorDTypeConstraints::Make(&v248);
  v125 = v248;
  std::string::basic_string[abi:ne180100]<0>(v156, "input");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v156, 0, (uint64_t *)&v237);
  v158 = v237;
  if (v237)
  {
    v126 = (std::__shared_weak_count *)operator new();
    v127 = (std::__shared_weak_count_vtbl *)v237;
    v126->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v126->__shared_owners_ = 0;
    v126->__shared_weak_owners_ = 0;
    v126[1].__vftable = v127;
  }
  else
  {
    v126 = 0;
  }
  v159 = v126;
  v237 = 0;
  std::string::basic_string[abi:ne180100]<0>(v154, "T");
  (*((void (**)(void **, void **, void **))*v125 + 3))(v125, &v158, v154);
  if (v155 < 0)
    operator delete(v154[0]);
  v128 = v159;
  if (v159)
  {
    p_shared_owners = (unint64_t *)&v159->__shared_owners_;
    do
      v130 = __ldaxr(p_shared_owners);
    while (__stlxr(v130 - 1, p_shared_owners));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v131 = v237;
  v237 = 0;
  if (v131)
    (*(void (**)(void *))(*(_QWORD *)v131 + 8))(v131);
  if (v157 < 0)
    operator delete(v156[0]);
  v132 = v248;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v237);
  v152 = v237;
  if (v237)
  {
    v133 = (std::__shared_weak_count *)operator new();
    v134 = (std::__shared_weak_count_vtbl *)v237;
    v133->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v133->__shared_owners_ = 0;
    v133->__shared_weak_owners_ = 0;
    v133[1].__vftable = v134;
  }
  else
  {
    v133 = 0;
  }
  v153 = v133;
  v237 = 0;
  std::string::basic_string[abi:ne180100]<0>(v150, "T");
  (*((void (**)(void **, void **, void **))*v132 + 3))(v132, &v152, v150);
  if (v151 < 0)
    operator delete(v150[0]);
  v135 = v153;
  if (v153)
  {
    v136 = (unint64_t *)&v153->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = v237;
  v237 = 0;
  if (v138)
    (*(void (**)(void *))(*(_QWORD *)v138 + 8))(v138);
  v139 = *a3;
  v148 = v248;
  if (v248)
  {
    v140 = (std::__shared_weak_count *)operator new();
    v141 = v248;
    v140->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v140->__shared_owners_ = 0;
    v140->__shared_weak_owners_ = 0;
    v140[1].__vftable = (std::__shared_weak_count_vtbl *)v141;
  }
  else
  {
    v140 = 0;
  }
  v149 = v140;
  v248 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v139 + 56))(v139, &v148);
  v142 = v149;
  if (v149)
  {
    v143 = (unint64_t *)&v149->__shared_owners_;
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  v145 = v248;
  v248 = 0;
  if (v145)
    (*((void (**)(void **))*v145 + 1))(v145);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v204, 0);
  result = v236;
  if (v236)
  {
    v147 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v236);
    return MEMORY[0x1E0C023A0](v147, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09D5B00(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 200);
  *(_QWORD *)(v2 - 200) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x200], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x308], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::TensorToPixelBuffer::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unsigned __int8 *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  unsigned __int8 *v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  void **v52;
  unsigned __int8 *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  void **v60;
  unsigned __int8 *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  void ***v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  void *v73;
  _QWORD *v74;
  void *v75;
  unint64_t v76;
  void **v77;
  void **v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  void **v86;
  void **v87;
  char *v88;
  __int128 v89;
  void **v90;
  uint64_t v91;
  void *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  void *v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  void **v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  unint64_t *p_shared_owners;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  void **v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  void **v126;
  void **v127;
  std::__shared_weak_count *v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  uint64_t v133;
  void **v134;
  std::__shared_weak_count *v135;
  std::__shared_weak_count_vtbl *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  uint64_t v140;
  void **v141;
  std::__shared_weak_count *v142;
  std::__shared_weak_count_vtbl *v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  uint64_t v147;
  void **v148;
  std::__shared_weak_count *v149;
  std::__shared_weak_count_vtbl *v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  uint64_t v154;
  void **v155;
  std::__shared_weak_count *v156;
  std::__shared_weak_count_vtbl *v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  void **v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  void **v168;
  uint64_t result;
  uint64_t v170;
  void **v171;
  std::__shared_weak_count *v172;
  void *v173[2];
  char v174;
  uint64_t v175;
  std::__shared_weak_count *v176;
  void *v177[2];
  char v178;
  uint64_t v179;
  std::__shared_weak_count *v180;
  void *v181[2];
  char v182;
  void *v183[2];
  char v184;
  uint64_t v185;
  std::__shared_weak_count *v186;
  void *v187[2];
  char v188;
  void *v189[2];
  char v190;
  uint64_t v191;
  std::__shared_weak_count *v192;
  void *v193[2];
  char v194;
  void *v195[2];
  char v196;
  uint64_t v197;
  std::__shared_weak_count *v198;
  void **v199;
  std::__shared_weak_count *v200;
  void *v201[2];
  char v202;
  void *v203[2];
  char v204;
  uint64_t v205;
  std::__shared_weak_count *v206;
  __int128 v207;
  __int128 v208;
  void *v209[2];
  uint64_t v210;
  __n128 v211;
  __n128 v212;
  __n128 v213;
  __n128 v214;
  void *__p;
  void *v216;
  _QWORD *v217;
  void *v218;
  void *v219;
  _QWORD *v220;
  void *v221;
  void *v222;
  _QWORD *v223;
  void *v224;
  void *v225;
  _QWORD *v226;
  void *v227;
  void *v228;
  _QWORD *v229;
  __n128 v230;
  uint64_t v231;
  _QWORD *v232;
  _QWORD v233[3];
  _QWORD *v234;
  _BYTE v235[24];
  _BYTE *v236;
  _QWORD v237[3];
  _QWORD *v238;
  __int128 v239;
  __int128 v240;
  int v241;
  void *v242;
  void *v243;
  _QWORD *v244;
  __int128 v245;
  _QWORD *v246;
  void **v247;
  void **v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;

  v255 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v232 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = operator new(0x18uLL);
  *((_QWORD *)&v239 + 1) = v10 + 3;
  *(_QWORD *)&v240 = v10 + 3;
  *v10 = v7;
  v10[1] = v8;
  v10[2] = v9;
  *(_QWORD *)&v239 = v10;
  v247 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v239);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = operator new(0x18uLL);
  *((_QWORD *)&v245 + 1) = v14 + 3;
  v246 = v14 + 3;
  *v14 = v11;
  v14[1] = v12;
  v14[2] = v13;
  *(_QWORD *)&v245 = v14;
  v248 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v245);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, 0);
  v18 = operator new(0x18uLL);
  v229 = v18 + 3;
  *v18 = v15;
  v18[1] = v16;
  v18[2] = v17;
  v227 = v18;
  v228 = v18 + 3;
  v249 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v227);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = MIL::IRUnknownDimension::Make(a1, 0);
  v21 = MIL::IRUnknownDimension::Make(a1, 0);
  v22 = operator new(0x18uLL);
  v226 = v22 + 3;
  *v22 = v19;
  v22[1] = v20;
  v22[2] = v21;
  v224 = v22;
  v225 = v22 + 3;
  v250 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v224);
  v23 = MIL::IRUnknownDimension::Make(a1, 0);
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = operator new(0x18uLL);
  v223 = v26 + 3;
  *v26 = v23;
  v26[1] = v24;
  v26[2] = v25;
  v221 = v26;
  v222 = v26 + 3;
  v251 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v221);
  v27 = MIL::IRUnknownDimension::Make(a1, 0);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = MIL::IRUnknownDimension::Make(a1, 0);
  v30 = operator new(0x18uLL);
  v220 = v30 + 3;
  *v30 = v27;
  v30[1] = v28;
  v30[2] = v29;
  v218 = v30;
  v219 = v30 + 3;
  v252 = MIL::IRTensorValueType::MakeWithShape(a1, 16, (uint64_t)&v218);
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = MIL::IRUnknownDimension::Make(a1, 0);
  v33 = MIL::IRUnknownDimension::Make(a1, 0);
  v34 = operator new(0x18uLL);
  v243 = v34 + 3;
  v244 = v34 + 3;
  *v34 = v31;
  v34[1] = v32;
  v34[2] = v33;
  v242 = v34;
  v253 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v242);
  v35 = MIL::IRUnknownDimension::Make(a1, 0);
  v36 = MIL::IRUnknownDimension::Make(a1, 0);
  v37 = MIL::IRUnknownDimension::Make(a1, 0);
  v38 = operator new(0x18uLL);
  v216 = v38 + 3;
  v217 = v38 + 3;
  *v38 = v35;
  v38[1] = v36;
  v38[2] = v37;
  __p = v38;
  v254 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v247, 8, &v230);
  MIL::IRParameter::Make(&v230, &v231);
  v39 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "input", &v231);
  v40 = v231;
  v231 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v230.n128_u64[1];
  if (v230.n128_u64[1])
  {
    v42 = (unint64_t *)(v230.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (__p)
  {
    v216 = __p;
    operator delete(__p);
  }
  if (v242)
  {
    v243 = v242;
    operator delete(v242);
  }
  if (v218)
  {
    v219 = v218;
    operator delete(v218);
  }
  if (v221)
  {
    v222 = v221;
    operator delete(v221);
  }
  if (v224)
  {
    v225 = v224;
    operator delete(v224);
  }
  if (v227)
  {
    v228 = v227;
    operator delete(v227);
  }
  if ((_QWORD)v245)
  {
    *((_QWORD *)&v245 + 1) = v245;
    operator delete((void *)v245);
  }
  if ((_QWORD)v239)
  {
    *((_QWORD *)&v239 + 1) = v239;
    operator delete((void *)v239);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v39 + 5) + 64))(*((_QWORD *)v39 + 5), 1);
  v44 = v232;
  *(_QWORD *)&v239 = MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v239, 1, &v214);
  MIL::IRParameter::Make(&v214, (uint64_t *)&v247);
  v45 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[18],std::unique_ptr<MIL::IRParameter>>(v44, "pixel_format_type", (uint64_t *)&v247);
  v46 = v247;
  v247 = 0;
  if (v46)
    (*((void (**)(void **))*v46 + 1))(v46);
  v47 = (std::__shared_weak_count *)v214.n128_u64[1];
  if (v214.n128_u64[1])
  {
    v48 = (unint64_t *)(v214.n128_u64[1] + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v45 + 5) + 32))(*((_QWORD *)v45 + 5), 1);
  v50 = v232;
  v51 = MIL::IRUnknownDimension::Make(a1, 0);
  v52 = (void **)operator new(8uLL);
  v247 = v52;
  *v52 = (void *)v51;
  v248 = v52 + 1;
  v249 = (uint64_t)(v52 + 1);
  *(_QWORD *)&v245 = MIL::IRTensorValueType::MakeWithShape(a1, 12, (uint64_t)&v247);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v245, 1, &v213);
  MIL::IRParameter::Make(&v213, (uint64_t *)&v239);
  v53 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v50, "bytes_per_row", (uint64_t *)&v239);
  v54 = v239;
  *(_QWORD *)&v239 = 0;
  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  v55 = (std::__shared_weak_count *)v213.n128_u64[1];
  if (v213.n128_u64[1])
  {
    v56 = (unint64_t *)(v213.n128_u64[1] + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (v247)
  {
    v248 = v247;
    operator delete(v247);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v53 + 5) + 48))(*((_QWORD *)v53 + 5), 1);
  v58 = v232;
  v59 = MIL::IRUnknownDimension::Make(a1, 0);
  v60 = (void **)operator new(8uLL);
  v247 = v60;
  *v60 = (void *)v59;
  v248 = v60 + 1;
  v249 = (uint64_t)(v60 + 1);
  *(_QWORD *)&v245 = MIL::IRTensorValueType::MakeWithShape(a1, 12, (uint64_t)&v247);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v245, 1, &v212);
  MIL::IRParameter::Make(&v212, (uint64_t *)&v239);
  v61 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v58, "num_slices", (uint64_t *)&v239);
  v62 = v239;
  *(_QWORD *)&v239 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  v63 = (std::__shared_weak_count *)v212.n128_u64[1];
  if (v212.n128_u64[1])
  {
    v64 = (unint64_t *)(v212.n128_u64[1] + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  if (v247)
  {
    v248 = v247;
    operator delete(v247);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v61 + 5) + 48))(*((_QWORD *)v61 + 5), 1);
  v221 = 0;
  v66 = operator new();
  *(_QWORD *)v66 = 0;
  *(_QWORD *)(v66 + 8) = 0;
  *(_QWORD *)(v66 + 16) = 0;
  v247 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v221, (void **)v66);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v247, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)v221, 1uLL);
  v67 = (void ***)v221;
  v68 = MIL::IRUnknownDimension::Make(a1, 0);
  v69 = MIL::IRUnknownDimension::Make(a1, 0);
  v70 = operator new(0x10uLL);
  *((_QWORD *)&v245 + 1) = v70 + 2;
  v246 = v70 + 2;
  *v70 = v68;
  v70[1] = v69;
  *(_QWORD *)&v245 = v70;
  v71 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v72 = operator new(8uLL);
  v227 = v72;
  *v72 = v71;
  v229 = v72 + 1;
  v228 = v72 + 1;
  v239 = 0u;
  v240 = 0u;
  v241 = 1065353216;
  v242 = (void *)MIL::IRPixelBufferValueType::MakeWithShape(a1, 0x14u, &v245, (uint64_t)&v227, (uint64_t *)&v239);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v242, 1, &v211);
  MIL::IRParameter::Make(&v211, (uint64_t *)&v218);
  v73 = v218;
  v224 = v218;
  if (v218)
  {
    v74 = (_QWORD *)operator new();
    v75 = v218;
    *v74 = &unk_1EA99F888;
    v74[1] = 0;
    v74[2] = 0;
    v74[3] = v75;
  }
  else
  {
    v74 = 0;
  }
  v225 = v74;
  v218 = 0;
  v76 = (unint64_t)v67[2];
  v77 = v67[1];
  if ((unint64_t)v77 >= v76)
  {
    v79 = ((char *)v77 - (char *)*v67) >> 4;
    v80 = v79 + 1;
    if ((unint64_t)(v79 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v81 = v76 - (_QWORD)*v67;
    if (v81 >> 3 > v80)
      v80 = v81 >> 3;
    if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF0)
      v82 = 0xFFFFFFFFFFFFFFFLL;
    else
      v82 = v80;
    v251 = (uint64_t)(v67 + 2);
    v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v67 + 2), v82);
    v85 = &v83[16 * v79];
    *(_QWORD *)v85 = v73;
    *((_QWORD *)v85 + 1) = v74;
    v225 = 0;
    v224 = 0;
    v87 = *v67;
    v86 = v67[1];
    if (v86 == *v67)
    {
      v90 = v67[1];
      v88 = &v83[16 * v79];
    }
    else
    {
      v88 = &v83[16 * v79];
      do
      {
        v89 = *((_OWORD *)v86 - 1);
        v86 -= 2;
        *((_OWORD *)v88 - 1) = v89;
        v88 -= 16;
        *v86 = 0;
        v86[1] = 0;
      }
      while (v86 != v87);
      v90 = *v67;
      v86 = v67[1];
    }
    v78 = (void **)(v85 + 16);
    *v67 = (void **)v88;
    v247 = v90;
    v248 = v90;
    v67[1] = (void **)(v85 + 16);
    v249 = (uint64_t)v86;
    v91 = (uint64_t)v67[2];
    v67[2] = (void **)&v83[16 * v84];
    v250 = v91;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v247);
  }
  else
  {
    *v77 = v73;
    v77[1] = v74;
    v78 = v77 + 2;
    v225 = 0;
    v224 = 0;
  }
  v67[1] = v78;
  v92 = v218;
  v218 = 0;
  if (v92)
    (*(void (**)(void *))(*(_QWORD *)v92 + 8))(v92);
  v93 = (std::__shared_weak_count *)v211.n128_u64[1];
  if (v211.n128_u64[1])
  {
    v94 = (unint64_t *)(v211.n128_u64[1] + 8);
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&v239);
  if (v227)
  {
    v228 = v227;
    operator delete(v227);
  }
  if ((_QWORD)v245)
  {
    *((_QWORD *)&v245 + 1) = v245;
    operator delete((void *)v245);
  }
  *(_OWORD *)v209 = *(_OWORD *)a2;
  v210 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v96 = (uint64_t)v232;
  *(_QWORD *)&v208 = v232;
  if (v232)
  {
    v97 = (_QWORD *)operator new();
    *v97 = &unk_1EA99F8E8;
    v97[1] = 0;
    v97[2] = 0;
    v97[3] = v96;
  }
  else
  {
    v97 = 0;
  }
  *((_QWORD *)&v208 + 1) = v97;
  v232 = 0;
  *(_QWORD *)&v207 = v221;
  if (v221)
  {
    v98 = (_QWORD *)operator new();
    v99 = v221;
    *v98 = &unk_1EA99F948;
    v98[1] = 0;
    v98[2] = 0;
    v98[3] = v99;
  }
  else
  {
    v98 = 0;
  }
  *((_QWORD *)&v207 + 1) = v98;
  v221 = 0;
  v237[0] = &unk_1EA99FAC8;
  v237[1] = MIL::Operators::Common::ios18::CustomValidators::ValidateTensorToPixelBuffer;
  v238 = v237;
  v236 = 0;
  MIL::IROperator::Make((__int128 *)v209, &v208, &v207, (uint64_t)v237, (uint64_t)v235, a3);
  v100 = v236;
  if (v236 == v235)
  {
    v101 = 4;
    v100 = v235;
  }
  else
  {
    if (!v236)
      goto LABEL_88;
    v101 = 5;
  }
  (*(void (**)(void))(*v100 + 8 * v101))();
LABEL_88:
  v102 = v238;
  if (v238 == v237)
  {
    v103 = 4;
    v102 = v237;
    goto LABEL_92;
  }
  if (v238)
  {
    v103 = 5;
LABEL_92:
    (*(void (**)(void))(*v102 + 8 * v103))();
  }
  v104 = (std::__shared_weak_count *)*((_QWORD *)&v207 + 1);
  if (*((_QWORD *)&v207 + 1))
  {
    v105 = (unint64_t *)(*((_QWORD *)&v207 + 1) + 8);
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = (std::__shared_weak_count *)*((_QWORD *)&v208 + 1);
  if (*((_QWORD *)&v208 + 1))
  {
    v108 = (unint64_t *)(*((_QWORD *)&v208 + 1) + 8);
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  if (SHIBYTE(v210) < 0)
    operator delete(v209[0]);
  v110 = *a3;
  v233[0] = &off_1EA99FBD8;
  v233[1] = MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceTensorToPixelBuffer;
  v234 = v233;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v110 + 200))(v110, v233);
  v111 = v234;
  if (v234 == v233)
  {
    v112 = 4;
    v111 = v233;
  }
  else
  {
    if (!v234)
      goto LABEL_110;
    v112 = 5;
  }
  (*(void (**)(void))(*v111 + 8 * v112))();
LABEL_110:
  MIL::Validation::TensorDTypeConstraints::Make(&v247);
  v113 = v247;
  std::string::basic_string[abi:ne180100]<0>(v203, "input");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v203, 0, (uint64_t *)&v239);
  v205 = v239;
  if ((_QWORD)v239)
  {
    v114 = (std::__shared_weak_count *)operator new();
    v115 = (std::__shared_weak_count_vtbl *)v239;
    v114->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v114->__shared_owners_ = 0;
    v114->__shared_weak_owners_ = 0;
    v114[1].__vftable = v115;
  }
  else
  {
    v114 = 0;
  }
  v206 = v114;
  *(_QWORD *)&v239 = 0;
  std::string::basic_string[abi:ne180100]<0>(v201, "T");
  (*((void (**)(void **, uint64_t *, void **))*v113 + 3))(v113, &v205, v201);
  if (v202 < 0)
    operator delete(v201[0]);
  v116 = v206;
  if (v206)
  {
    p_shared_owners = (unint64_t *)&v206->__shared_owners_;
    do
      v118 = __ldaxr(p_shared_owners);
    while (__stlxr(v118 - 1, p_shared_owners));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = v239;
  *(_QWORD *)&v239 = 0;
  if (v119)
    (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
  if (v204 < 0)
    operator delete(v203[0]);
  v120 = *a3;
  v199 = v247;
  if (v247)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v122 = v247;
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = (std::__shared_weak_count_vtbl *)v122;
  }
  else
  {
    v121 = 0;
  }
  v200 = v121;
  v247 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v120 + 56))(v120, &v199);
  v123 = v200;
  if (v200)
  {
    v124 = (unint64_t *)&v200->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = v247;
  v247 = 0;
  if (v126)
    (*((void (**)(void **))*v126 + 1))(v126);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v247);
  v127 = v247;
  std::string::basic_string[abi:ne180100]<0>(v195, "input");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v195, 0, (uint64_t *)&v239);
  v197 = v239;
  if ((_QWORD)v239)
  {
    v128 = (std::__shared_weak_count *)operator new();
    v129 = (std::__shared_weak_count_vtbl *)v239;
    v128->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v128->__shared_owners_ = 0;
    v128->__shared_weak_owners_ = 0;
    v128[1].__vftable = v129;
  }
  else
  {
    v128 = 0;
  }
  v198 = v128;
  *(_QWORD *)&v239 = 0;
  std::string::basic_string[abi:ne180100]<0>(v193, "C");
  (*((void (**)(void **, uint64_t *, _QWORD, void **))*v127 + 3))(v127, &v197, 0, v193);
  if (v194 < 0)
    operator delete(v193[0]);
  v130 = v198;
  if (v198)
  {
    v131 = (unint64_t *)&v198->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = v239;
  *(_QWORD *)&v239 = 0;
  if (v133)
    (*(void (**)(uint64_t))(*(_QWORD *)v133 + 8))(v133);
  if (v196 < 0)
    operator delete(v195[0]);
  v134 = v247;
  std::string::basic_string[abi:ne180100]<0>(v189, "input");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v189, 0, (uint64_t *)&v239);
  v191 = v239;
  if ((_QWORD)v239)
  {
    v135 = (std::__shared_weak_count *)operator new();
    v136 = (std::__shared_weak_count_vtbl *)v239;
    v135->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v135->__shared_owners_ = 0;
    v135->__shared_weak_owners_ = 0;
    v135[1].__vftable = v136;
  }
  else
  {
    v135 = 0;
  }
  v192 = v135;
  *(_QWORD *)&v239 = 0;
  std::string::basic_string[abi:ne180100]<0>(v187, "H");
  (*((void (**)(void **, uint64_t *, uint64_t, void **))*v134 + 3))(v134, &v191, 1, v187);
  if (v188 < 0)
    operator delete(v187[0]);
  v137 = v192;
  if (v192)
  {
    v138 = (unint64_t *)&v192->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v140 = v239;
  *(_QWORD *)&v239 = 0;
  if (v140)
    (*(void (**)(uint64_t))(*(_QWORD *)v140 + 8))(v140);
  if (v190 < 0)
    operator delete(v189[0]);
  v141 = v247;
  std::string::basic_string[abi:ne180100]<0>(v183, "input");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v183, 0, (uint64_t *)&v239);
  v185 = v239;
  if ((_QWORD)v239)
  {
    v142 = (std::__shared_weak_count *)operator new();
    v143 = (std::__shared_weak_count_vtbl *)v239;
    v142->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v142->__shared_owners_ = 0;
    v142->__shared_weak_owners_ = 0;
    v142[1].__vftable = v143;
  }
  else
  {
    v142 = 0;
  }
  v186 = v142;
  *(_QWORD *)&v239 = 0;
  std::string::basic_string[abi:ne180100]<0>(v181, "W");
  (*((void (**)(void **, uint64_t *, uint64_t, void **))*v141 + 3))(v141, &v185, 2, v181);
  if (v182 < 0)
    operator delete(v181[0]);
  v144 = v186;
  if (v186)
  {
    v145 = (unint64_t *)&v186->__shared_owners_;
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
    }
  }
  v147 = v239;
  *(_QWORD *)&v239 = 0;
  if (v147)
    (*(void (**)(uint64_t))(*(_QWORD *)v147 + 8))(v147);
  if (v184 < 0)
    operator delete(v183[0]);
  v148 = v247;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v239);
  v179 = v239;
  if ((_QWORD)v239)
  {
    v149 = (std::__shared_weak_count *)operator new();
    v150 = (std::__shared_weak_count_vtbl *)v239;
    v149->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v149->__shared_owners_ = 0;
    v149->__shared_weak_owners_ = 0;
    v149[1].__vftable = v150;
  }
  else
  {
    v149 = 0;
  }
  v180 = v149;
  *(_QWORD *)&v239 = 0;
  std::string::basic_string[abi:ne180100]<0>(v177, "H_OUT");
  (*((void (**)(void **, uint64_t *, _QWORD, void **))*v148 + 3))(v148, &v179, 0, v177);
  if (v178 < 0)
    operator delete(v177[0]);
  v151 = v180;
  if (v180)
  {
    v152 = (unint64_t *)&v180->__shared_owners_;
    do
      v153 = __ldaxr(v152);
    while (__stlxr(v153 - 1, v152));
    if (!v153)
    {
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
    }
  }
  v154 = v239;
  *(_QWORD *)&v239 = 0;
  if (v154)
    (*(void (**)(uint64_t))(*(_QWORD *)v154 + 8))(v154);
  v155 = v247;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v239);
  v175 = v239;
  if ((_QWORD)v239)
  {
    v156 = (std::__shared_weak_count *)operator new();
    v157 = (std::__shared_weak_count_vtbl *)v239;
    v156->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v156->__shared_owners_ = 0;
    v156->__shared_weak_owners_ = 0;
    v156[1].__vftable = v157;
  }
  else
  {
    v156 = 0;
  }
  v176 = v156;
  *(_QWORD *)&v239 = 0;
  std::string::basic_string[abi:ne180100]<0>(v173, "W_OUT");
  (*((void (**)(void **, uint64_t *, uint64_t, void **))*v155 + 3))(v155, &v175, 1, v173);
  if (v174 < 0)
    operator delete(v173[0]);
  v158 = v176;
  if (v176)
  {
    v159 = (unint64_t *)&v176->__shared_owners_;
    do
      v160 = __ldaxr(v159);
    while (__stlxr(v160 - 1, v159));
    if (!v160)
    {
      ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
      std::__shared_weak_count::__release_weak(v158);
    }
  }
  v161 = v239;
  *(_QWORD *)&v239 = 0;
  if (v161)
    (*(void (**)(uint64_t))(*(_QWORD *)v161 + 8))(v161);
  v162 = *a3;
  v171 = v247;
  if (v247)
  {
    v163 = (std::__shared_weak_count *)operator new();
    v164 = v247;
    v163->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v163->__shared_owners_ = 0;
    v163->__shared_weak_owners_ = 0;
    v163[1].__vftable = (std::__shared_weak_count_vtbl *)v164;
  }
  else
  {
    v163 = 0;
  }
  v172 = v163;
  v247 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v162 + 56))(v162, &v171);
  v165 = v172;
  if (v172)
  {
    v166 = (unint64_t *)&v172->__shared_owners_;
    do
      v167 = __ldaxr(v166);
    while (__stlxr(v167 - 1, v166));
    if (!v167)
    {
      ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
      std::__shared_weak_count::__release_weak(v165);
    }
  }
  v168 = v247;
  v247 = 0;
  if (v168)
    (*((void (**)(void **))*v168 + 1))(v168);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v221, 0);
  result = (uint64_t)v232;
  if (v232)
  {
    v170 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v232);
    return MEMORY[0x1E0C023A0](v170, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09D74C0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 136);
  *(_QWORD *)(v2 - 136) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x218], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x278], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::TensorToTensorBuffer::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void **v29;
  unsigned __int8 *v30;
  char *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  unsigned __int8 *v36;
  void **v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  void **v43;
  unsigned __int8 *v44;
  char *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  char **v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  uint64_t v116;
  char *v117;
  char *v118;
  char *v119;
  char *v120;
  __int128 v121;
  char *v122;
  char *v123;
  char *v124;
  std::__shared_weak_count *v125;
  unint64_t *p_shared_owners;
  unint64_t v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  _QWORD *v134;
  char **v135;
  _QWORD *v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  void **v149;
  std::__shared_weak_count *v150;
  std::__shared_weak_count_vtbl *v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  char *v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  void **v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  void **v162;
  void **v163;
  std::__shared_weak_count *v164;
  std::__shared_weak_count_vtbl *v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  char *v169;
  void **v170;
  std::__shared_weak_count *v171;
  std::__shared_weak_count_vtbl *v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  char *v176;
  uint64_t v177;
  std::__shared_weak_count *v178;
  void **v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  void **v183;
  uint64_t result;
  uint64_t v185;
  void **v186;
  std::__shared_weak_count *v187;
  void *v188[2];
  char v189;
  void *v190[2];
  char v191;
  char *v192;
  std::__shared_weak_count *v193;
  void *v194[2];
  char v195;
  void *v196[2];
  char v197;
  char *v198;
  std::__shared_weak_count *v199;
  void **v200;
  std::__shared_weak_count *v201;
  void *v202[2];
  char v203;
  void *v204[2];
  char v205;
  char *v206;
  std::__shared_weak_count *v207;
  __int128 v208;
  __int128 v209;
  void *v210[2];
  uint64_t v211;
  void *v212;
  void *v213;
  _QWORD *v214;
  void *v215;
  void *v216;
  _QWORD *v217;
  void *v218;
  void *v219;
  _QWORD *v220;
  void *v221;
  void *v222;
  _QWORD *v223;
  void *v224;
  void *v225;
  _QWORD *v226;
  void *v227;
  void *v228;
  _QWORD *v229;
  void *v230;
  void *v231;
  _QWORD *v232;
  void *v233;
  void *v234;
  _QWORD *v235;
  void *v236;
  void *v237;
  _QWORD *v238;
  void *v239;
  void *v240;
  _QWORD *v241;
  void *v242;
  void *v243;
  _QWORD *v244;
  void *v245;
  void *v246;
  _QWORD *v247;
  void *v248;
  void *v249;
  _QWORD *v250;
  void *v251;
  void *v252;
  _QWORD *v253;
  void *v254;
  void *v255;
  _QWORD *v256;
  void *v257;
  void *v258;
  _QWORD *v259;
  void *v260;
  void *v261;
  _QWORD *v262;
  __n128 v263;
  uint64_t v264;
  __int128 v265;
  char **v266;
  __n128 v267;
  __n128 v268;
  __n128 v269;
  void *__p;
  void *v271;
  _QWORD *v272;
  void *v273;
  void *v274;
  _QWORD *v275;
  void *v276;
  void *v277;
  _QWORD *v278;
  void *v279;
  void *v280;
  _QWORD *v281;
  void *v282;
  void *v283;
  _QWORD *v284;
  void *v285;
  void *v286;
  _QWORD *v287;
  __n128 v288;
  _QWORD *v289;
  _QWORD v290[3];
  _QWORD *v291;
  _BYTE v292[24];
  _BYTE *v293;
  _QWORD v294[3];
  _QWORD *v295;
  void **v296;
  void **v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  void *v312;
  void *v313;
  _QWORD *v314;
  char *Scalar;
  char *v316;
  char *v317;
  char *v318;
  char **v319;
  uint64_t v320;

  v320 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v289 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (char *)operator new(8uLL);
  Scalar = v8;
  *(_QWORD *)v8 = v7;
  v316 = v8 + 8;
  v317 = v8 + 8;
  v296 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v312 = v10;
  *v10 = v9;
  v313 = v10 + 1;
  v314 = v10 + 1;
  v297 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v312);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v285 = v12;
  *v12 = v11;
  v287 = v12 + 1;
  v286 = v12 + 1;
  v298 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v285);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  v282 = v14;
  *v14 = v13;
  v284 = v14 + 1;
  v283 = v14 + 1;
  v299 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v282);
  v15 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v16 = operator new(8uLL);
  v279 = v16;
  *v16 = v15;
  v281 = v16 + 1;
  v280 = v16 + 1;
  v300 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v279);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  v276 = v18;
  *v18 = v17;
  v278 = v18 + 1;
  v277 = v18 + 1;
  v301 = MIL::IRTensorValueType::MakeWithShape(a1, 16, (uint64_t)&v276);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v273 = v20;
  *v20 = v19;
  v275 = v20 + 1;
  v274 = v20 + 1;
  v302 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v273);
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  __p = v22;
  *v22 = v21;
  v272 = v22 + 1;
  v271 = v22 + 1;
  v303 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v296, 8, &v288);
  MIL::IRParameter::Make(&v288, (uint64_t *)&v260);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "input", (uint64_t *)&v260);
  v23 = v260;
  v260 = 0;
  if (v23)
    (*(void (**)(void *))(*(_QWORD *)v23 + 8))(v23);
  v24 = (std::__shared_weak_count *)v288.n128_u64[1];
  if (v288.n128_u64[1])
  {
    v25 = (unint64_t *)(v288.n128_u64[1] + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (__p)
  {
    v271 = __p;
    operator delete(__p);
  }
  if (v273)
  {
    v274 = v273;
    operator delete(v273);
  }
  if (v276)
  {
    v277 = v276;
    operator delete(v276);
  }
  if (v279)
  {
    v280 = v279;
    operator delete(v279);
  }
  if (v282)
  {
    v283 = v282;
    operator delete(v282);
  }
  if (v285)
  {
    v286 = v285;
    operator delete(v285);
  }
  if (v312)
  {
    v313 = v312;
    operator delete(v312);
  }
  if (Scalar)
  {
    v316 = Scalar;
    operator delete(Scalar);
  }
  v27 = v289;
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = (void **)operator new(8uLL);
  v296 = v29;
  *v29 = (void *)v28;
  v297 = v29 + 1;
  v298 = (uint64_t)(v29 + 1);
  v312 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 12, (uint64_t)&v296);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v312, 1, &v269);
  MIL::IRParameter::Make(&v269, (uint64_t *)&Scalar);
  v30 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v27, "strides", (uint64_t *)&Scalar);
  v31 = Scalar;
  Scalar = 0;
  if (v31)
    (*(void (**)(char *))(*(_QWORD *)v31 + 8))(v31);
  v32 = (std::__shared_weak_count *)v269.n128_u64[1];
  if (v269.n128_u64[1])
  {
    v33 = (unint64_t *)(v269.n128_u64[1] + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (v296)
  {
    v297 = v296;
    operator delete(v296);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v30 + 5) + 32))(*((_QWORD *)v30 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v30 + 5) + 48))(*((_QWORD *)v30 + 5), 1);
  v35 = v289;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 17);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v268);
  MIL::IRParameter::Make(&v268, (uint64_t *)&v296);
  v36 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[23],std::unique_ptr<MIL::IRParameter>>(v35, "row_alignment_in_bytes", (uint64_t *)&v296);
  v37 = v296;
  v296 = 0;
  if (v37)
    (*((void (**)(void **))*v37 + 1))(v37);
  v38 = (std::__shared_weak_count *)v268.n128_u64[1];
  if (v268.n128_u64[1])
  {
    v39 = (unint64_t *)(v268.n128_u64[1] + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v36 + 5) + 32))(*((_QWORD *)v36 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v36 + 5) + 48))(*((_QWORD *)v36 + 5), 1);
  v41 = v289;
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = (void **)operator new(8uLL);
  v296 = v43;
  *v43 = (void *)v42;
  v297 = v43 + 1;
  v298 = (uint64_t)(v43 + 1);
  v312 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v296);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v312, 1, &v267);
  MIL::IRParameter::Make(&v267, (uint64_t *)&Scalar);
  v44 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[19],std::unique_ptr<MIL::IRParameter>>(v41, "interleave_factors", (uint64_t *)&Scalar);
  v45 = Scalar;
  Scalar = 0;
  if (v45)
    (*(void (**)(char *))(*(_QWORD *)v45 + 8))(v45);
  v46 = (std::__shared_weak_count *)v267.n128_u64[1];
  if (v267.n128_u64[1])
  {
    v47 = (unint64_t *)(v267.n128_u64[1] + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  if (v296)
  {
    v297 = v296;
    operator delete(v296);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v44 + 5) + 32))(*((_QWORD *)v44 + 5), 1);
  v266 = 0;
  v49 = operator new();
  *(_QWORD *)v49 = 0;
  *(_QWORD *)(v49 + 8) = 0;
  *(_QWORD *)(v49 + 16) = 0;
  v296 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v266, (void **)v49);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v296, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v266, 1uLL);
  v50 = v266;
  v51 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v52 = operator new(8uLL);
  v312 = v52;
  *v52 = v51;
  v313 = v52 + 1;
  v314 = v52 + 1;
  v53 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v54 = operator new(8uLL);
  v285 = v54;
  *v54 = v53;
  v287 = v54 + 1;
  v286 = v54 + 1;
  v296 = (void **)MIL::IRTensorBufferValueType::MakeWithShape(a1, 9, (uint64_t)&v312, (uint64_t)&v285);
  v55 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v56 = operator new(8uLL);
  v282 = v56;
  *v56 = v55;
  v284 = v56 + 1;
  v283 = v56 + 1;
  v57 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v58 = operator new(8uLL);
  v279 = v58;
  *v58 = v57;
  v281 = v58 + 1;
  v280 = v58 + 1;
  v297 = (void **)MIL::IRTensorBufferValueType::MakeWithShape(a1, 10, (uint64_t)&v282, (uint64_t)&v279);
  v59 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v60 = operator new(8uLL);
  v276 = v60;
  *v60 = v59;
  v278 = v60 + 1;
  v277 = v60 + 1;
  v61 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v62 = operator new(8uLL);
  v273 = v62;
  *v62 = v61;
  v275 = v62 + 1;
  v274 = v62 + 1;
  v298 = MIL::IRTensorBufferValueType::MakeWithShape(a1, 11, (uint64_t)&v276, (uint64_t)&v273);
  v63 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v64 = operator new(8uLL);
  __p = v64;
  *v64 = v63;
  v272 = v64 + 1;
  v271 = v64 + 1;
  v65 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v66 = operator new(8uLL);
  v260 = v66;
  *v66 = v65;
  v262 = v66 + 1;
  v261 = v66 + 1;
  v299 = MIL::IRTensorBufferValueType::MakeWithShape(a1, 14, (uint64_t)&__p, (uint64_t)&v260);
  v67 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v68 = operator new(8uLL);
  v257 = v68;
  *v68 = v67;
  v259 = v68 + 1;
  v258 = v68 + 1;
  v69 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v70 = operator new(8uLL);
  v254 = v70;
  *v70 = v69;
  v256 = v70 + 1;
  v255 = v70 + 1;
  v300 = MIL::IRTensorBufferValueType::MakeWithShape(a1, 15, (uint64_t)&v257, (uint64_t)&v254);
  v71 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v72 = operator new(8uLL);
  v251 = v72;
  *v72 = v71;
  v253 = v72 + 1;
  v252 = v72 + 1;
  v73 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v74 = operator new(8uLL);
  v248 = v74;
  *v74 = v73;
  v250 = v74 + 1;
  v249 = v74 + 1;
  v301 = MIL::IRTensorBufferValueType::MakeWithShape(a1, 16, (uint64_t)&v251, (uint64_t)&v248);
  v75 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v76 = operator new(8uLL);
  v245 = v76;
  *v76 = v75;
  v247 = v76 + 1;
  v246 = v76 + 1;
  v77 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v78 = operator new(8uLL);
  v242 = v78;
  *v78 = v77;
  v244 = v78 + 1;
  v243 = v78 + 1;
  v302 = MIL::IRTensorBufferValueType::MakeWithShape(a1, 4, (uint64_t)&v245, (uint64_t)&v242);
  v79 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v80 = operator new(8uLL);
  v239 = v80;
  *v80 = v79;
  v241 = v80 + 1;
  v240 = v80 + 1;
  v81 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v82 = operator new(8uLL);
  v236 = v82;
  *v82 = v81;
  v237 = v82 + 1;
  v238 = v82 + 1;
  v303 = MIL::IRTensorBufferValueType::MakeWithShape(a1, 5, (uint64_t)&v239, (uint64_t)&v236);
  v83 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v84 = operator new(8uLL);
  v233 = v84;
  *v84 = v83;
  v234 = v84 + 1;
  v235 = v84 + 1;
  v85 = MIL::IRUnknownProperty::Make(a1, 0);
  v304 = MIL::IRTensorBufferValueType::MakeWithShapeAndRowAlignment(a1, 9, (uint64_t)&v233, v85);
  v86 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v87 = operator new(8uLL);
  v230 = v87;
  *v87 = v86;
  v231 = v87 + 1;
  v232 = v87 + 1;
  v88 = MIL::IRUnknownProperty::Make(a1, 0);
  v305 = MIL::IRTensorBufferValueType::MakeWithShapeAndRowAlignment(a1, 10, (uint64_t)&v230, v88);
  v89 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v90 = operator new(8uLL);
  v227 = v90;
  *v90 = v89;
  v228 = v90 + 1;
  v229 = v90 + 1;
  v91 = MIL::IRUnknownProperty::Make(a1, 0);
  v306 = MIL::IRTensorBufferValueType::MakeWithShapeAndRowAlignment(a1, 11, (uint64_t)&v227, v91);
  v92 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v93 = operator new(8uLL);
  v224 = v93;
  *v93 = v92;
  v225 = v93 + 1;
  v226 = v93 + 1;
  v94 = MIL::IRUnknownProperty::Make(a1, 0);
  v307 = MIL::IRTensorBufferValueType::MakeWithShapeAndRowAlignment(a1, 14, (uint64_t)&v224, v94);
  v95 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v96 = operator new(8uLL);
  v221 = v96;
  *v96 = v95;
  v222 = v96 + 1;
  v223 = v96 + 1;
  v97 = MIL::IRUnknownProperty::Make(a1, 0);
  v308 = MIL::IRTensorBufferValueType::MakeWithShapeAndRowAlignment(a1, 15, (uint64_t)&v221, v97);
  v98 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v99 = operator new(8uLL);
  v218 = v99;
  *v99 = v98;
  v219 = v99 + 1;
  v220 = v99 + 1;
  v100 = MIL::IRUnknownProperty::Make(a1, 0);
  v309 = MIL::IRTensorBufferValueType::MakeWithShapeAndRowAlignment(a1, 16, (uint64_t)&v218, v100);
  v101 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v102 = operator new(8uLL);
  v215 = v102;
  *v102 = v101;
  v216 = v102 + 1;
  v217 = v102 + 1;
  v103 = MIL::IRUnknownProperty::Make(a1, 0);
  v310 = MIL::IRTensorBufferValueType::MakeWithShapeAndRowAlignment(a1, 4, (uint64_t)&v215, v103);
  v104 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v105 = operator new(8uLL);
  v212 = v105;
  *v105 = v104;
  v213 = v105 + 1;
  v214 = v105 + 1;
  v106 = MIL::IRUnknownProperty::Make(a1, 0);
  v311 = MIL::IRTensorBufferValueType::MakeWithShapeAndRowAlignment(a1, 5, (uint64_t)&v212, v106);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v296, 16, &v263);
  MIL::IRParameter::Make(&v263, &v264);
  *(_QWORD *)&v265 = v264;
  if (v264)
  {
    v107 = (_QWORD *)operator new();
    v108 = v264;
    *v107 = &unk_1EA99F888;
    v107[1] = 0;
    v107[2] = 0;
    v107[3] = v108;
  }
  else
  {
    v107 = 0;
  }
  *((_QWORD *)&v265 + 1) = v107;
  v264 = 0;
  v109 = v50[2];
  v110 = v50[1];
  if (v110 >= v109)
  {
    v111 = (v110 - *v50) >> 4;
    v112 = v111 + 1;
    if ((unint64_t)(v111 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v113 = v109 - *v50;
    if (v113 >> 3 > v112)
      v112 = v113 >> 3;
    if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF0)
      v114 = 0xFFFFFFFFFFFFFFFLL;
    else
      v114 = v112;
    v319 = v50 + 2;
    v115 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v50 + 2), v114);
    v117 = &v115[16 * v111];
    *(_OWORD *)v117 = v265;
    v265 = 0uLL;
    v119 = *v50;
    v118 = v50[1];
    if (v118 == *v50)
    {
      v122 = v50[1];
      v120 = &v115[16 * v111];
    }
    else
    {
      v120 = &v115[16 * v111];
      do
      {
        v121 = *((_OWORD *)v118 - 1);
        v118 -= 16;
        *((_OWORD *)v120 - 1) = v121;
        v120 -= 16;
        *(_QWORD *)v118 = 0;
        *((_QWORD *)v118 + 1) = 0;
      }
      while (v118 != v119);
      v122 = *v50;
      v118 = v50[1];
    }
    v123 = v117 + 16;
    *v50 = v120;
    Scalar = v122;
    v316 = v122;
    v50[1] = v117 + 16;
    v317 = v118;
    v124 = v50[2];
    v50[2] = &v115[16 * v116];
    v318 = v124;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
    v125 = (std::__shared_weak_count *)*((_QWORD *)&v265 + 1);
    v50[1] = v123;
    if (v125)
    {
      p_shared_owners = (unint64_t *)&v125->__shared_owners_;
      do
        v127 = __ldaxr(p_shared_owners);
      while (__stlxr(v127 - 1, p_shared_owners));
      if (!v127)
      {
        ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
        std::__shared_weak_count::__release_weak(v125);
      }
    }
  }
  else
  {
    *(_QWORD *)v110 = v265;
    *((_QWORD *)v110 + 1) = v107;
    v265 = 0uLL;
    v50[1] = v110 + 16;
  }
  v128 = v264;
  v264 = 0;
  if (v128)
    (*(void (**)(uint64_t))(*(_QWORD *)v128 + 8))(v128);
  v129 = (std::__shared_weak_count *)v263.n128_u64[1];
  if (v263.n128_u64[1])
  {
    v130 = (unint64_t *)(v263.n128_u64[1] + 8);
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  if (v212)
  {
    v213 = v212;
    operator delete(v212);
  }
  if (v215)
  {
    v216 = v215;
    operator delete(v215);
  }
  if (v218)
  {
    v219 = v218;
    operator delete(v218);
  }
  if (v221)
  {
    v222 = v221;
    operator delete(v221);
  }
  if (v224)
  {
    v225 = v224;
    operator delete(v224);
  }
  if (v227)
  {
    v228 = v227;
    operator delete(v227);
  }
  if (v230)
  {
    v231 = v230;
    operator delete(v230);
  }
  if (v233)
  {
    v234 = v233;
    operator delete(v233);
  }
  if (v236)
  {
    v237 = v236;
    operator delete(v236);
  }
  if (v239)
  {
    v240 = v239;
    operator delete(v239);
  }
  if (v242)
  {
    v243 = v242;
    operator delete(v242);
  }
  if (v245)
  {
    v246 = v245;
    operator delete(v245);
  }
  if (v248)
  {
    v249 = v248;
    operator delete(v248);
  }
  if (v251)
  {
    v252 = v251;
    operator delete(v251);
  }
  if (v254)
  {
    v255 = v254;
    operator delete(v254);
  }
  if (v257)
  {
    v258 = v257;
    operator delete(v257);
  }
  if (v260)
  {
    v261 = v260;
    operator delete(v260);
  }
  if (__p)
  {
    v271 = __p;
    operator delete(__p);
  }
  if (v273)
  {
    v274 = v273;
    operator delete(v273);
  }
  if (v276)
  {
    v277 = v276;
    operator delete(v276);
  }
  if (v279)
  {
    v280 = v279;
    operator delete(v279);
  }
  if (v282)
  {
    v283 = v282;
    operator delete(v282);
  }
  if (v285)
  {
    v286 = v285;
    operator delete(v285);
  }
  if (v312)
  {
    v313 = v312;
    operator delete(v312);
  }
  *(_OWORD *)v210 = *(_OWORD *)a2;
  v211 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v132 = (uint64_t)v289;
  *(_QWORD *)&v209 = v289;
  if (v289)
  {
    v133 = (_QWORD *)operator new();
    *v133 = &unk_1EA99F8E8;
    v133[1] = 0;
    v133[2] = 0;
    v133[3] = v132;
  }
  else
  {
    v133 = 0;
  }
  *((_QWORD *)&v209 + 1) = v133;
  v289 = 0;
  *(_QWORD *)&v208 = v266;
  if (v266)
  {
    v134 = (_QWORD *)operator new();
    v135 = v266;
    *v134 = &unk_1EA99F948;
    v134[1] = 0;
    v134[2] = 0;
    v134[3] = v135;
  }
  else
  {
    v134 = 0;
  }
  *((_QWORD *)&v208 + 1) = v134;
  v266 = 0;
  v294[0] = &unk_1EA99FAC8;
  v294[1] = MIL::Operators::Common::ios18::CustomValidators::ValidateTensorToTensorBuffer;
  v295 = v294;
  v293 = 0;
  MIL::IROperator::Make((__int128 *)v210, &v209, &v208, (uint64_t)v294, (uint64_t)v292, a3);
  v136 = v293;
  if (v293 == v292)
  {
    v137 = 4;
    v136 = v292;
  }
  else
  {
    if (!v293)
      goto LABEL_136;
    v137 = 5;
  }
  (*(void (**)(void))(*v136 + 8 * v137))();
LABEL_136:
  v138 = v295;
  if (v295 == v294)
  {
    v139 = 4;
    v138 = v294;
    goto LABEL_140;
  }
  if (v295)
  {
    v139 = 5;
LABEL_140:
    (*(void (**)(void))(*v138 + 8 * v139))();
  }
  v140 = (std::__shared_weak_count *)*((_QWORD *)&v208 + 1);
  if (*((_QWORD *)&v208 + 1))
  {
    v141 = (unint64_t *)(*((_QWORD *)&v208 + 1) + 8);
    do
      v142 = __ldaxr(v141);
    while (__stlxr(v142 - 1, v141));
    if (!v142)
    {
      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
      std::__shared_weak_count::__release_weak(v140);
    }
  }
  v143 = (std::__shared_weak_count *)*((_QWORD *)&v209 + 1);
  if (*((_QWORD *)&v209 + 1))
  {
    v144 = (unint64_t *)(*((_QWORD *)&v209 + 1) + 8);
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 - 1, v144));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  if (SHIBYTE(v211) < 0)
    operator delete(v210[0]);
  v146 = *a3;
  v290[0] = &off_1EA99FBD8;
  v290[1] = MIL::Operators::Common::ios18::CustomValueTypeInference::ValueTypeInferenceTensorToTensorBuffer;
  v291 = v290;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v146 + 200))(v146, v290);
  v147 = v291;
  if (v291 == v290)
  {
    v148 = 4;
    v147 = v290;
  }
  else
  {
    if (!v291)
      goto LABEL_158;
    v148 = 5;
  }
  (*(void (**)(void))(*v147 + 8 * v148))();
LABEL_158:
  MIL::Validation::TensorDTypeConstraints::Make(&v296);
  v149 = v296;
  std::string::basic_string[abi:ne180100]<0>(v204, "input");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v204, 0, (uint64_t *)&Scalar);
  v206 = Scalar;
  if (Scalar)
  {
    v150 = (std::__shared_weak_count *)operator new();
    v151 = (std::__shared_weak_count_vtbl *)Scalar;
    v150->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v150->__shared_owners_ = 0;
    v150->__shared_weak_owners_ = 0;
    v150[1].__vftable = v151;
  }
  else
  {
    v150 = 0;
  }
  v207 = v150;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v202, "T");
  (*((void (**)(void **, char **, void **))*v149 + 3))(v149, &v206, v202);
  if (v203 < 0)
    operator delete(v202[0]);
  v152 = v207;
  if (v207)
  {
    v153 = (unint64_t *)&v207->__shared_owners_;
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
    }
  }
  v155 = Scalar;
  Scalar = 0;
  if (v155)
    (*(void (**)(char *))(*(_QWORD *)v155 + 8))(v155);
  if (v205 < 0)
    operator delete(v204[0]);
  v156 = *a3;
  v200 = v296;
  if (v296)
  {
    v157 = (std::__shared_weak_count *)operator new();
    v158 = v296;
    v157->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v157->__shared_owners_ = 0;
    v157->__shared_weak_owners_ = 0;
    v157[1].__vftable = (std::__shared_weak_count_vtbl *)v158;
  }
  else
  {
    v157 = 0;
  }
  v201 = v157;
  v296 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v156 + 56))(v156, &v200);
  v159 = v201;
  if (v201)
  {
    v160 = (unint64_t *)&v201->__shared_owners_;
    do
      v161 = __ldaxr(v160);
    while (__stlxr(v161 - 1, v160));
    if (!v161)
    {
      ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
      std::__shared_weak_count::__release_weak(v159);
    }
  }
  v162 = v296;
  v296 = 0;
  if (v162)
    (*((void (**)(void **))*v162 + 1))(v162);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v296);
  v163 = v296;
  std::string::basic_string[abi:ne180100]<0>(v196, "strides");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v196, 1, (uint64_t *)&Scalar);
  v198 = Scalar;
  if (Scalar)
  {
    v164 = (std::__shared_weak_count *)operator new();
    v165 = (std::__shared_weak_count_vtbl *)Scalar;
    v164->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v164->__shared_owners_ = 0;
    v164->__shared_weak_owners_ = 0;
    v164[1].__vftable = v165;
  }
  else
  {
    v164 = 0;
  }
  v199 = v164;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v194, "D");
  (*((void (**)(void **, char **, _QWORD, void **))*v163 + 3))(v163, &v198, 0, v194);
  if (v195 < 0)
    operator delete(v194[0]);
  v166 = v199;
  if (v199)
  {
    v167 = (unint64_t *)&v199->__shared_owners_;
    do
      v168 = __ldaxr(v167);
    while (__stlxr(v168 - 1, v167));
    if (!v168)
    {
      ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
      std::__shared_weak_count::__release_weak(v166);
    }
  }
  v169 = Scalar;
  Scalar = 0;
  if (v169)
    (*(void (**)(char *))(*(_QWORD *)v169 + 8))(v169);
  if (v197 < 0)
    operator delete(v196[0]);
  v170 = v296;
  std::string::basic_string[abi:ne180100]<0>(v190, "interleave_factors");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v190, 0, (uint64_t *)&Scalar);
  v192 = Scalar;
  if (Scalar)
  {
    v171 = (std::__shared_weak_count *)operator new();
    v172 = (std::__shared_weak_count_vtbl *)Scalar;
    v171->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v171->__shared_owners_ = 0;
    v171->__shared_weak_owners_ = 0;
    v171[1].__vftable = v172;
  }
  else
  {
    v171 = 0;
  }
  v193 = v171;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v188, "D");
  (*((void (**)(void **, char **, _QWORD, void **))*v170 + 3))(v170, &v192, 0, v188);
  if (v189 < 0)
    operator delete(v188[0]);
  v173 = v193;
  if (v193)
  {
    v174 = (unint64_t *)&v193->__shared_owners_;
    do
      v175 = __ldaxr(v174);
    while (__stlxr(v175 - 1, v174));
    if (!v175)
    {
      ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
      std::__shared_weak_count::__release_weak(v173);
    }
  }
  v176 = Scalar;
  Scalar = 0;
  if (v176)
    (*(void (**)(char *))(*(_QWORD *)v176 + 8))(v176);
  if (v191 < 0)
    operator delete(v190[0]);
  v177 = *a3;
  v186 = v296;
  if (v296)
  {
    v178 = (std::__shared_weak_count *)operator new();
    v179 = v296;
    v178->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v178->__shared_owners_ = 0;
    v178->__shared_weak_owners_ = 0;
    v178[1].__vftable = (std::__shared_weak_count_vtbl *)v179;
  }
  else
  {
    v178 = 0;
  }
  v187 = v178;
  v296 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v177 + 56))(v177, &v186);
  v180 = v187;
  if (v187)
  {
    v181 = (unint64_t *)&v187->__shared_owners_;
    do
      v182 = __ldaxr(v181);
    while (__stlxr(v182 - 1, v181));
    if (!v182)
    {
      ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
      std::__shared_weak_count::__release_weak(v180);
    }
  }
  v183 = v296;
  v296 = 0;
  if (v183)
    (*((void (**)(void **))*v183 + 1))(v183);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v266, 0);
  result = (uint64_t)v289;
  if (v289)
  {
    v185 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v289);
    return MEMORY[0x1E0C023A0](v185, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09D9098(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 248);
  *(_QWORD *)(v2 - 248) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x2E8], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x3C0], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::BatchNorm::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  std::__shared_weak_count_vtbl *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  unsigned __int8 *v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  std::__shared_weak_count_vtbl *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  unsigned __int8 *v42;
  void *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  std::__shared_weak_count_vtbl *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  unsigned __int8 *v54;
  void *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  std::__shared_weak_count_vtbl *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  unsigned __int8 *v66;
  void *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  _QWORD *v71;
  unsigned __int8 *v72;
  std::__shared_weak_count_vtbl *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  char **v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t *v97;
  char *v98;
  char *v99;
  char *v100;
  __int128 v101;
  char *v102;
  char *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  char **v111;
  _QWORD *v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  _OWORD *v122;
  unsigned __int8 *v123;
  void *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  uint64_t v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  std::__shared_weak_count *v131;
  unint64_t *p_shared_owners;
  unint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  void *v137;
  std::__shared_weak_count *v138;
  std::__shared_weak_count_vtbl *v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count_vtbl *v143;
  void *v144;
  std::__shared_weak_count *v145;
  std::__shared_weak_count_vtbl *v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count_vtbl *v150;
  void *v151;
  std::__shared_weak_count *v152;
  std::__shared_weak_count_vtbl *v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count_vtbl *v157;
  void *v158;
  std::__shared_weak_count *v159;
  std::__shared_weak_count_vtbl *v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count_vtbl *v164;
  void *v165;
  std::__shared_weak_count *v166;
  std::__shared_weak_count_vtbl *v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count_vtbl *v171;
  void *v172;
  std::__shared_weak_count *v173;
  std::__shared_weak_count_vtbl *v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count_vtbl *v178;
  void *v179;
  std::__shared_weak_count *v180;
  std::__shared_weak_count_vtbl *v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count_vtbl *v185;
  uint64_t v186;
  std::__shared_weak_count *v187;
  std::__shared_weak_count_vtbl *v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  void *v192;
  void *v193;
  std::__shared_weak_count *v194;
  std::__shared_weak_count_vtbl *v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count_vtbl *v199;
  uint64_t v200;
  std::__shared_weak_count *v201;
  std::__shared_weak_count_vtbl *v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  void *v206;
  void *v207;
  std::__shared_weak_count *v208;
  std::__shared_weak_count_vtbl *v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  std::__shared_weak_count_vtbl *v213;
  void *v214;
  std::__shared_weak_count *v215;
  std::__shared_weak_count_vtbl *v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  std::__shared_weak_count_vtbl *v220;
  void *v221;
  std::__shared_weak_count *v222;
  std::__shared_weak_count_vtbl *v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  std::__shared_weak_count_vtbl *v227;
  void *v228;
  std::__shared_weak_count *v229;
  std::__shared_weak_count_vtbl *v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  std::__shared_weak_count_vtbl *v234;
  void *v235;
  std::__shared_weak_count *v236;
  std::__shared_weak_count_vtbl *v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  std::__shared_weak_count_vtbl *v241;
  uint64_t v242;
  std::__shared_weak_count *v243;
  std::__shared_weak_count_vtbl *v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  void *v248;
  void *v249;
  std::__shared_weak_count *v250;
  std::__shared_weak_count_vtbl *v251;
  uint64_t i;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  void *v256;
  uint64_t v257;
  std::__shared_weak_count *v258;
  std::__shared_weak_count_vtbl *v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  void *v263;
  uint64_t v264;
  uint64_t result;
  uint64_t v266;
  void *v267;
  std::__shared_weak_count *v268;
  void *v269[2];
  char v270;
  void *v271;
  std::__shared_weak_count *v272;
  void *v273;
  std::__shared_weak_count *v274;
  void *v275[2];
  char v276;
  void *v277[2];
  char v278;
  std::__shared_weak_count_vtbl *v279;
  std::__shared_weak_count *v280;
  void *v281[2];
  char v282;
  void *v283[2];
  char v284;
  std::__shared_weak_count_vtbl *v285;
  std::__shared_weak_count *v286;
  void *v287[2];
  char v288;
  void *v289[2];
  char v290;
  std::__shared_weak_count_vtbl *v291;
  std::__shared_weak_count *v292;
  void *v293[2];
  char v294;
  void *v295[2];
  char v296;
  std::__shared_weak_count_vtbl *v297;
  std::__shared_weak_count *v298;
  void *v299[2];
  char v300;
  void *v301[2];
  char v302;
  std::__shared_weak_count_vtbl *v303;
  std::__shared_weak_count *v304;
  void *v305;
  std::__shared_weak_count *v306;
  void *v307[2];
  char v308;
  std::__shared_weak_count_vtbl *v309;
  std::__shared_weak_count *v310;
  void *v311;
  std::__shared_weak_count *v312;
  void *v313[2];
  char v314;
  std::__shared_weak_count_vtbl *v315;
  std::__shared_weak_count *v316;
  void *v317[2];
  char v318;
  void *v319[2];
  char v320;
  std::__shared_weak_count_vtbl *v321;
  std::__shared_weak_count *v322;
  void *v323[2];
  char v324;
  void *v325[2];
  char v326;
  std::__shared_weak_count_vtbl *v327;
  std::__shared_weak_count *v328;
  void *v329[2];
  char v330;
  void *v331[2];
  char v332;
  std::__shared_weak_count_vtbl *v333;
  std::__shared_weak_count *v334;
  void *v335[2];
  char v336;
  void *v337[2];
  char v338;
  std::__shared_weak_count_vtbl *v339;
  std::__shared_weak_count *v340;
  void *v341[2];
  char v342;
  void *v343[2];
  char v344;
  std::__shared_weak_count_vtbl *v345;
  std::__shared_weak_count *v346;
  void *v347[2];
  char v348;
  void *v349[2];
  char v350;
  std::__shared_weak_count_vtbl *v351;
  std::__shared_weak_count *v352;
  void *v353;
  std::__shared_weak_count *v354;
  __n128 v355;
  __int128 v356;
  __int128 v357;
  void *v358[2];
  uint64_t v359;
  void *v360;
  void *v361;
  _QWORD *v362;
  __n128 v363;
  uint64_t v364;
  uint64_t v365;
  _QWORD *v366;
  char **v367;
  __n128 v368;
  __n128 v369;
  __n128 v370;
  __n128 v371;
  __n128 v372;
  void *__p;
  void *v374;
  _QWORD *v375;
  void *v376;
  void *v377;
  _QWORD *v378;
  __n128 v379;
  _QWORD *v380;
  void *Scalar;
  uint64_t v382;
  uint64_t v383;
  _QWORD v384[3];
  uint64_t v385[3];
  uint64_t v386[3];
  uint64_t v387[3];
  _QWORD v388[3];
  std::__shared_weak_count_vtbl *v389;
  uint64_t p_get_deleter;
  uint64_t v391;
  _BYTE v392[24];
  _BYTE *v393;
  _BYTE v394[24];
  _BYTE *v395;
  _QWORD v396[3];
  _QWORD *v397;
  uint64_t v398;

  v398 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v380 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (uint64_t)&v10->__get_deleter;
  v391 = (uint64_t)&v10->__get_deleter;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v10->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  v10->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v9;
  v389 = v10;
  Scalar = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v389);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(0x18uLL);
  v378 = v14 + 3;
  *v14 = v11;
  v14[1] = v12;
  v14[2] = v13;
  v376 = v14;
  v377 = v14 + 3;
  v382 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v376);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(0x18uLL);
  v375 = v18 + 3;
  *v18 = v15;
  v18[1] = v16;
  v18[2] = v17;
  __p = v18;
  v374 = v18 + 3;
  v383 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v379);
  MIL::IRParameter::Make(&v379, (uint64_t *)&v360);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v360);
  v19 = v360;
  v360 = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = (std::__shared_weak_count *)v379.n128_u64[1];
  if (v379.n128_u64[1])
  {
    v21 = (unint64_t *)(v379.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (__p)
  {
    v374 = __p;
    operator delete(__p);
  }
  if (v376)
  {
    v377 = v376;
    operator delete(v376);
  }
  if (v389)
  {
    p_get_deleter = (uint64_t)v389;
    operator delete(v389);
  }
  v23 = v380;
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v389 = v25;
  v25->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v24;
  p_get_deleter = (uint64_t)&v25->~__shared_weak_count_0;
  v391 = (uint64_t)&v25->~__shared_weak_count_0;
  Scalar = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v389);
  v26 = MIL::IRUnknownDimension::Make(a1, 0);
  v27 = operator new(8uLL);
  v376 = v27;
  *v27 = v26;
  v378 = v27 + 1;
  v377 = v27 + 1;
  v382 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v376);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = operator new(8uLL);
  __p = v29;
  *v29 = v28;
  v375 = v29 + 1;
  v374 = v29 + 1;
  v383 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v372);
  MIL::IRParameter::Make(&v372, (uint64_t *)&v360);
  v30 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v23, "mean", (uint64_t *)&v360);
  v31 = v360;
  v360 = 0;
  if (v31)
    (*(void (**)(void *))(*(_QWORD *)v31 + 8))(v31);
  v32 = (std::__shared_weak_count *)v372.n128_u64[1];
  if (v372.n128_u64[1])
  {
    v33 = (unint64_t *)(v372.n128_u64[1] + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (__p)
  {
    v374 = __p;
    operator delete(__p);
  }
  if (v376)
  {
    v377 = v376;
    operator delete(v376);
  }
  if (v389)
  {
    p_get_deleter = (uint64_t)v389;
    operator delete(v389);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v30 + 5) + 32))(*((_QWORD *)v30 + 5), 1);
  v35 = v380;
  v36 = MIL::IRUnknownDimension::Make(a1, 0);
  v37 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v389 = v37;
  v37->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v36;
  p_get_deleter = (uint64_t)&v37->~__shared_weak_count_0;
  v391 = (uint64_t)&v37->~__shared_weak_count_0;
  Scalar = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v389);
  v38 = MIL::IRUnknownDimension::Make(a1, 0);
  v39 = operator new(8uLL);
  v376 = v39;
  *v39 = v38;
  v378 = v39 + 1;
  v377 = v39 + 1;
  v382 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v376);
  v40 = MIL::IRUnknownDimension::Make(a1, 0);
  v41 = operator new(8uLL);
  __p = v41;
  *v41 = v40;
  v375 = v41 + 1;
  v374 = v41 + 1;
  v383 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v371);
  MIL::IRParameter::Make(&v371, (uint64_t *)&v360);
  v42 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v35, "variance", (uint64_t *)&v360);
  v43 = v360;
  v360 = 0;
  if (v43)
    (*(void (**)(void *))(*(_QWORD *)v43 + 8))(v43);
  v44 = (std::__shared_weak_count *)v371.n128_u64[1];
  if (v371.n128_u64[1])
  {
    v45 = (unint64_t *)(v371.n128_u64[1] + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (__p)
  {
    v374 = __p;
    operator delete(__p);
  }
  if (v376)
  {
    v377 = v376;
    operator delete(v376);
  }
  if (v389)
  {
    p_get_deleter = (uint64_t)v389;
    operator delete(v389);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v42 + 5) + 32))(*((_QWORD *)v42 + 5), 1);
  v47 = v380;
  v48 = MIL::IRUnknownDimension::Make(a1, 0);
  v49 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v389 = v49;
  v49->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v48;
  p_get_deleter = (uint64_t)&v49->~__shared_weak_count_0;
  v391 = (uint64_t)&v49->~__shared_weak_count_0;
  Scalar = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v389);
  v50 = MIL::IRUnknownDimension::Make(a1, 0);
  v51 = operator new(8uLL);
  v376 = v51;
  *v51 = v50;
  v378 = v51 + 1;
  v377 = v51 + 1;
  v382 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v376);
  v52 = MIL::IRUnknownDimension::Make(a1, 0);
  v53 = operator new(8uLL);
  __p = v53;
  *v53 = v52;
  v375 = v53 + 1;
  v374 = v53 + 1;
  v383 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v370);
  MIL::IRParameter::Make(&v370, (uint64_t *)&v360);
  v54 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v47, "beta", (uint64_t *)&v360);
  v55 = v360;
  v360 = 0;
  if (v55)
    (*(void (**)(void *))(*(_QWORD *)v55 + 8))(v55);
  v56 = (std::__shared_weak_count *)v370.n128_u64[1];
  if (v370.n128_u64[1])
  {
    v57 = (unint64_t *)(v370.n128_u64[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (__p)
  {
    v374 = __p;
    operator delete(__p);
  }
  if (v376)
  {
    v377 = v376;
    operator delete(v376);
  }
  if (v389)
  {
    p_get_deleter = (uint64_t)v389;
    operator delete(v389);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v54 + 5) + 32))(*((_QWORD *)v54 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v54 + 5) + 48))(*((_QWORD *)v54 + 5), 1);
  v59 = v380;
  v60 = MIL::IRUnknownDimension::Make(a1, 0);
  v61 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v389 = v61;
  v61->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v60;
  p_get_deleter = (uint64_t)&v61->~__shared_weak_count_0;
  v391 = (uint64_t)&v61->~__shared_weak_count_0;
  Scalar = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v389);
  v62 = MIL::IRUnknownDimension::Make(a1, 0);
  v63 = operator new(8uLL);
  v376 = v63;
  *v63 = v62;
  v378 = v63 + 1;
  v377 = v63 + 1;
  v382 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v376);
  v64 = MIL::IRUnknownDimension::Make(a1, 0);
  v65 = operator new(8uLL);
  __p = v65;
  *v65 = v64;
  v375 = v65 + 1;
  v374 = v65 + 1;
  v383 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v369);
  MIL::IRParameter::Make(&v369, (uint64_t *)&v360);
  v66 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v59, "gamma", (uint64_t *)&v360);
  v67 = v360;
  v360 = 0;
  if (v67)
    (*(void (**)(void *))(*(_QWORD *)v67 + 8))(v67);
  v68 = (std::__shared_weak_count *)v369.n128_u64[1];
  if (v369.n128_u64[1])
  {
    v69 = (unint64_t *)(v369.n128_u64[1] + 8);
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  if (__p)
  {
    v374 = __p;
    operator delete(__p);
  }
  if (v376)
  {
    v377 = v376;
    operator delete(v376);
  }
  if (v389)
  {
    p_get_deleter = (uint64_t)v389;
    operator delete(v389);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v66 + 5) + 32))(*((_QWORD *)v66 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v66 + 5) + 48))(*((_QWORD *)v66 + 5), 1);
  v71 = v380;
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar(a1, 7);
  v382 = MIL::IRTensorValueType::MakeScalar(a1, 4);
  v383 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v368);
  MIL::IRParameter::Make(&v368, (uint64_t *)&v389);
  v72 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v71, "epsilon", (uint64_t *)&v389);
  v73 = v389;
  v389 = 0;
  if (v73)
    (*((void (**)(std::__shared_weak_count_vtbl *))v73->~__shared_weak_count + 1))(v73);
  v74 = (std::__shared_weak_count *)v368.n128_u64[1];
  if (v368.n128_u64[1])
  {
    v75 = (unint64_t *)(v368.n128_u64[1] + 8);
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v72 + 5) + 32))(*((_QWORD *)v72 + 5), 1);
  v367 = 0;
  v77 = operator new();
  *(_QWORD *)v77 = 0;
  *(_QWORD *)(v77 + 8) = 0;
  *(_QWORD *)(v77 + 16) = 0;
  Scalar = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v367, (void **)v77);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&Scalar, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v367, 1uLL);
  v78 = v367;
  v79 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v80 = operator new(8uLL);
  v376 = v80;
  *v80 = v79;
  v378 = v80 + 1;
  v377 = v80 + 1;
  v389 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v376);
  v81 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v82 = operator new(8uLL);
  __p = v82;
  *v82 = v81;
  v375 = v82 + 1;
  v374 = v82 + 1;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v83 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v84 = operator new(8uLL);
  v360 = v84;
  *v84 = v83;
  v362 = v84 + 1;
  v361 = v84 + 1;
  v391 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v360);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v389, 3, &v363);
  MIL::IRParameter::Make(&v363, &v364);
  v85 = v364;
  v365 = v364;
  if (v364)
  {
    v86 = (_QWORD *)operator new();
    v87 = v364;
    *v86 = &unk_1EA99F888;
    v86[1] = 0;
    v86[2] = 0;
    v86[3] = v87;
  }
  else
  {
    v86 = 0;
  }
  v366 = v86;
  v364 = 0;
  v88 = v78[2];
  v89 = v78[1];
  if (v89 >= v88)
  {
    v91 = (v89 - *v78) >> 4;
    v92 = v91 + 1;
    if ((unint64_t)(v91 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v93 = v88 - *v78;
    if (v93 >> 3 > v92)
      v92 = v93 >> 3;
    if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF0)
      v94 = 0xFFFFFFFFFFFFFFFLL;
    else
      v94 = v92;
    v384[1] = v78 + 2;
    v95 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v78 + 2), v94);
    v97 = (uint64_t *)&v95[16 * v91];
    *v97 = v85;
    v97[1] = (uint64_t)v86;
    v366 = 0;
    v365 = 0;
    v99 = *v78;
    v98 = v78[1];
    if (v98 == *v78)
    {
      v102 = v78[1];
      v100 = &v95[16 * v91];
    }
    else
    {
      v100 = &v95[16 * v91];
      do
      {
        v101 = *((_OWORD *)v98 - 1);
        v98 -= 16;
        *((_OWORD *)v100 - 1) = v101;
        v100 -= 16;
        *(_QWORD *)v98 = 0;
        *((_QWORD *)v98 + 1) = 0;
      }
      while (v98 != v99);
      v102 = *v78;
      v98 = v78[1];
    }
    v90 = (char *)(v97 + 2);
    *v78 = v100;
    v382 = (uint64_t)v102;
    v78[1] = (char *)(v97 + 2);
    v383 = (uint64_t)v98;
    v103 = v78[2];
    v78[2] = &v95[16 * v96];
    v384[0] = v103;
    Scalar = v102;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v89 = v85;
    *((_QWORD *)v89 + 1) = v86;
    v90 = v89 + 16;
    v366 = 0;
    v365 = 0;
  }
  v78[1] = v90;
  v104 = v364;
  v364 = 0;
  if (v104)
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  v105 = (std::__shared_weak_count *)v363.n128_u64[1];
  if (v363.n128_u64[1])
  {
    v106 = (unint64_t *)(v363.n128_u64[1] + 8);
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  if (v360)
  {
    v361 = v360;
    operator delete(v360);
  }
  if (__p)
  {
    v374 = __p;
    operator delete(__p);
  }
  if (v376)
  {
    v377 = v376;
    operator delete(v376);
  }
  *(_OWORD *)v358 = *(_OWORD *)a2;
  v359 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v108 = (uint64_t)v380;
  *(_QWORD *)&v357 = v380;
  if (v380)
  {
    v109 = (_QWORD *)operator new();
    *v109 = &unk_1EA99F8E8;
    v109[1] = 0;
    v109[2] = 0;
    v109[3] = v108;
  }
  else
  {
    v109 = 0;
  }
  *((_QWORD *)&v357 + 1) = v109;
  v380 = 0;
  *(_QWORD *)&v356 = v367;
  if (v367)
  {
    v110 = (_QWORD *)operator new();
    v111 = v367;
    *v110 = &unk_1EA99F948;
    v110[1] = 0;
    v110[2] = 0;
    v110[3] = v111;
  }
  else
  {
    v110 = 0;
  }
  *((_QWORD *)&v356 + 1) = v110;
  v367 = 0;
  v396[0] = &unk_1EA99FAC8;
  v396[1] = MIL::Operators::Common::ios18::CustomValidators::ValidateBatchNorm;
  v397 = v396;
  v395 = 0;
  MIL::IROperator::Make((__int128 *)v358, &v357, &v356, (uint64_t)v396, (uint64_t)v394, a3);
  v112 = v395;
  if (v395 == v394)
  {
    v113 = 4;
    v112 = v394;
  }
  else
  {
    if (!v395)
      goto LABEL_114;
    v113 = 5;
  }
  (*(void (**)(void))(*v112 + 8 * v113))();
LABEL_114:
  v114 = v397;
  if (v397 == v396)
  {
    v115 = 4;
    v114 = v396;
    goto LABEL_118;
  }
  if (v397)
  {
    v115 = 5;
LABEL_118:
    (*(void (**)(void))(*v114 + 8 * v115))();
  }
  v116 = (std::__shared_weak_count *)*((_QWORD *)&v356 + 1);
  if (*((_QWORD *)&v356 + 1))
  {
    v117 = (unint64_t *)(*((_QWORD *)&v356 + 1) + 8);
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = (std::__shared_weak_count *)*((_QWORD *)&v357 + 1);
  if (*((_QWORD *)&v357 + 1))
  {
    v120 = (unint64_t *)(*((_QWORD *)&v357 + 1) + 8);
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  if (SHIBYTE(v359) < 0)
    operator delete(v358[0]);
  v376 = 0;
  v122 = (_OWORD *)operator new();
  *v122 = 0u;
  v122[1] = 0u;
  *((_DWORD *)v122 + 8) = 1065353216;
  v376 = v122;
  v389 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v389, 1, &v355);
  MIL::IRParameter::Make(&v355, (uint64_t *)&Scalar);
  v123 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v122, "minimum_compute_type", (uint64_t *)&Scalar);
  v124 = Scalar;
  Scalar = 0;
  if (v124)
    (*(void (**)(void *))(*(_QWORD *)v124 + 8))(v124);
  v125 = (std::__shared_weak_count *)v355.n128_u64[1];
  if (v355.n128_u64[1])
  {
    v126 = (unint64_t *)(v355.n128_u64[1] + 8);
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v123 + 5) + 32))(*((_QWORD *)v123 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v123 + 5) + 48))(*((_QWORD *)v123 + 5), 1);
  v128 = *a3;
  v129 = (std::__shared_weak_count_vtbl *)v376;
  v353 = v376;
  if (v376)
  {
    v130 = (std::__shared_weak_count *)operator new();
    v130->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v130->__shared_owners_ = 0;
    v130->__shared_weak_owners_ = 0;
    v130[1].__vftable = v129;
  }
  else
  {
    v130 = 0;
  }
  v354 = v130;
  v376 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v128 + 184))(v128, &v353);
  v131 = v354;
  if (v354)
  {
    p_shared_owners = (unint64_t *)&v354->__shared_owners_;
    do
      v133 = __ldaxr(p_shared_owners);
    while (__stlxr(v133 - 1, p_shared_owners));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&Scalar, (uint64_t)v392);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v134 + 200))(v134, v392);
  v135 = v393;
  if (v393 == v392)
  {
    v136 = 4;
    v135 = v392;
  }
  else
  {
    if (!v393)
      goto LABEL_151;
    v136 = 5;
  }
  (*(void (**)(void))(*v135 + 8 * v136))();
LABEL_151:
  if (SHIBYTE(v383) < 0)
    operator delete(Scalar);
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v137 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v349, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v349, 0, (uint64_t *)&v389);
  v351 = v389;
  if (v389)
  {
    v138 = (std::__shared_weak_count *)operator new();
    v139 = v389;
    v138->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v138->__shared_owners_ = 0;
    v138->__shared_weak_owners_ = 0;
    v138[1].__vftable = v139;
  }
  else
  {
    v138 = 0;
  }
  v352 = v138;
  v389 = 0;
  std::string::basic_string[abi:ne180100]<0>(v347, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v137 + 24))(v137, &v351, v347);
  if (v348 < 0)
    operator delete(v347[0]);
  v140 = v352;
  if (v352)
  {
    v141 = (unint64_t *)&v352->__shared_owners_;
    do
      v142 = __ldaxr(v141);
    while (__stlxr(v142 - 1, v141));
    if (!v142)
    {
      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
      std::__shared_weak_count::__release_weak(v140);
    }
  }
  v143 = v389;
  v389 = 0;
  if (v143)
    (*((void (**)(std::__shared_weak_count_vtbl *))v143->~__shared_weak_count + 1))(v143);
  if (v350 < 0)
    operator delete(v349[0]);
  v144 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v343, "mean");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v343, 0, (uint64_t *)&v389);
  v345 = v389;
  if (v389)
  {
    v145 = (std::__shared_weak_count *)operator new();
    v146 = v389;
    v145->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v145->__shared_owners_ = 0;
    v145->__shared_weak_owners_ = 0;
    v145[1].__vftable = v146;
  }
  else
  {
    v145 = 0;
  }
  v346 = v145;
  v389 = 0;
  std::string::basic_string[abi:ne180100]<0>(v341, "CONST_TYPE");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v144 + 24))(v144, &v345, v341);
  if (v342 < 0)
    operator delete(v341[0]);
  v147 = v346;
  if (v346)
  {
    v148 = (unint64_t *)&v346->__shared_owners_;
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
  v150 = v389;
  v389 = 0;
  if (v150)
    (*((void (**)(std::__shared_weak_count_vtbl *))v150->~__shared_weak_count + 1))(v150);
  if (v344 < 0)
    operator delete(v343[0]);
  v151 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v337, "variance");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v337, 0, (uint64_t *)&v389);
  v339 = v389;
  if (v389)
  {
    v152 = (std::__shared_weak_count *)operator new();
    v153 = v389;
    v152->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v152->__shared_owners_ = 0;
    v152->__shared_weak_owners_ = 0;
    v152[1].__vftable = v153;
  }
  else
  {
    v152 = 0;
  }
  v340 = v152;
  v389 = 0;
  std::string::basic_string[abi:ne180100]<0>(v335, "CONST_TYPE");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v151 + 24))(v151, &v339, v335);
  if (v336 < 0)
    operator delete(v335[0]);
  v154 = v340;
  if (v340)
  {
    v155 = (unint64_t *)&v340->__shared_owners_;
    do
      v156 = __ldaxr(v155);
    while (__stlxr(v156 - 1, v155));
    if (!v156)
    {
      ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
      std::__shared_weak_count::__release_weak(v154);
    }
  }
  v157 = v389;
  v389 = 0;
  if (v157)
    (*((void (**)(std::__shared_weak_count_vtbl *))v157->~__shared_weak_count + 1))(v157);
  if (v338 < 0)
    operator delete(v337[0]);
  v158 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v331, "beta");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v331, 1, (uint64_t *)&v389);
  v333 = v389;
  if (v389)
  {
    v159 = (std::__shared_weak_count *)operator new();
    v160 = v389;
    v159->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v159->__shared_owners_ = 0;
    v159->__shared_weak_owners_ = 0;
    v159[1].__vftable = v160;
  }
  else
  {
    v159 = 0;
  }
  v334 = v159;
  v389 = 0;
  std::string::basic_string[abi:ne180100]<0>(v329, "CONST_TYPE");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v158 + 24))(v158, &v333, v329);
  if (v330 < 0)
    operator delete(v329[0]);
  v161 = v334;
  if (v334)
  {
    v162 = (unint64_t *)&v334->__shared_owners_;
    do
      v163 = __ldaxr(v162);
    while (__stlxr(v163 - 1, v162));
    if (!v163)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  v164 = v389;
  v389 = 0;
  if (v164)
    (*((void (**)(std::__shared_weak_count_vtbl *))v164->~__shared_weak_count + 1))(v164);
  if (v332 < 0)
    operator delete(v331[0]);
  v165 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v325, "gamma");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v325, 1, (uint64_t *)&v389);
  v327 = v389;
  if (v389)
  {
    v166 = (std::__shared_weak_count *)operator new();
    v167 = v389;
    v166->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v166->__shared_owners_ = 0;
    v166->__shared_weak_owners_ = 0;
    v166[1].__vftable = v167;
  }
  else
  {
    v166 = 0;
  }
  v328 = v166;
  v389 = 0;
  std::string::basic_string[abi:ne180100]<0>(v323, "CONST_TYPE");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v165 + 24))(v165, &v327, v323);
  if (v324 < 0)
    operator delete(v323[0]);
  v168 = v328;
  if (v328)
  {
    v169 = (unint64_t *)&v328->__shared_owners_;
    do
      v170 = __ldaxr(v169);
    while (__stlxr(v170 - 1, v169));
    if (!v170)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
  }
  v171 = v389;
  v389 = 0;
  if (v171)
    (*((void (**)(std::__shared_weak_count_vtbl *))v171->~__shared_weak_count + 1))(v171);
  if (v326 < 0)
    operator delete(v325[0]);
  v172 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v319, "epsilon");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v319, 0, (uint64_t *)&v389);
  v321 = v389;
  if (v389)
  {
    v173 = (std::__shared_weak_count *)operator new();
    v174 = v389;
    v173->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v173->__shared_owners_ = 0;
    v173->__shared_weak_owners_ = 0;
    v173[1].__vftable = v174;
  }
  else
  {
    v173 = 0;
  }
  v322 = v173;
  v389 = 0;
  std::string::basic_string[abi:ne180100]<0>(v317, "CONST_TYPE");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v172 + 24))(v172, &v321, v317);
  if (v318 < 0)
    operator delete(v317[0]);
  v175 = v322;
  if (v322)
  {
    v176 = (unint64_t *)&v322->__shared_owners_;
    do
      v177 = __ldaxr(v176);
    while (__stlxr(v177 - 1, v176));
    if (!v177)
    {
      ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
      std::__shared_weak_count::__release_weak(v175);
    }
  }
  v178 = v389;
  v389 = 0;
  if (v178)
    (*((void (**)(std::__shared_weak_count_vtbl *))v178->~__shared_weak_count + 1))(v178);
  if (v320 < 0)
    operator delete(v319[0]);
  v179 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v389);
  v315 = v389;
  if (v389)
  {
    v180 = (std::__shared_weak_count *)operator new();
    v181 = v389;
    v180->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v180->__shared_owners_ = 0;
    v180->__shared_weak_owners_ = 0;
    v180[1].__vftable = v181;
  }
  else
  {
    v180 = 0;
  }
  v316 = v180;
  v389 = 0;
  std::string::basic_string[abi:ne180100]<0>(v313, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v179 + 24))(v179, &v315, v313);
  if (v314 < 0)
    operator delete(v313[0]);
  v182 = v316;
  if (v316)
  {
    v183 = (unint64_t *)&v316->__shared_owners_;
    do
      v184 = __ldaxr(v183);
    while (__stlxr(v184 - 1, v183));
    if (!v184)
    {
      ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
      std::__shared_weak_count::__release_weak(v182);
    }
  }
  v185 = v389;
  v389 = 0;
  if (v185)
    (*((void (**)(std::__shared_weak_count_vtbl *))v185->~__shared_weak_count + 1))(v185);
  v186 = *a3;
  v311 = Scalar;
  if (Scalar)
  {
    v187 = (std::__shared_weak_count *)operator new();
    v188 = (std::__shared_weak_count_vtbl *)Scalar;
    v187->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v187->__shared_owners_ = 0;
    v187->__shared_weak_owners_ = 0;
    v187[1].__vftable = v188;
  }
  else
  {
    v187 = 0;
  }
  v312 = v187;
  Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v186 + 56))(v186, &v311);
  v189 = v312;
  if (v312)
  {
    v190 = (unint64_t *)&v312->__shared_owners_;
    do
      v191 = __ldaxr(v190);
    while (__stlxr(v191 - 1, v190));
    if (!v191)
    {
      ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
      std::__shared_weak_count::__release_weak(v189);
    }
  }
  v192 = Scalar;
  Scalar = 0;
  if (v192)
    (*(void (**)(void *))(*(_QWORD *)v192 + 8))(v192);
  MIL::Validation::TensorRankValueConstraints::Make(&Scalar);
  v193 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v307, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v307, 0, (uint64_t *)&v389);
  v309 = v389;
  if (v389)
  {
    v194 = (std::__shared_weak_count *)operator new();
    v195 = v389;
    v194->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v194->__shared_owners_ = 0;
    v194->__shared_weak_owners_ = 0;
    v194[1].__vftable = v195;
  }
  else
  {
    v194 = 0;
  }
  v310 = v194;
  v389 = 0;
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))(*(_QWORD *)v193 + 32))(v193, &v309, 3, 5);
  v196 = v310;
  if (v310)
  {
    v197 = (unint64_t *)&v310->__shared_owners_;
    do
      v198 = __ldaxr(v197);
    while (__stlxr(v198 - 1, v197));
    if (!v198)
    {
      ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
      std::__shared_weak_count::__release_weak(v196);
    }
  }
  v199 = v389;
  v389 = 0;
  if (v199)
    (*((void (**)(std::__shared_weak_count_vtbl *))v199->~__shared_weak_count + 1))(v199);
  if (v308 < 0)
    operator delete(v307[0]);
  v200 = *a3;
  v305 = Scalar;
  if (Scalar)
  {
    v201 = (std::__shared_weak_count *)operator new();
    v202 = (std::__shared_weak_count_vtbl *)Scalar;
    v201->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FC78;
    v201->__shared_owners_ = 0;
    v201->__shared_weak_owners_ = 0;
    v201[1].__vftable = v202;
  }
  else
  {
    v201 = 0;
  }
  v306 = v201;
  Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v200 + 56))(v200, &v305);
  v203 = v306;
  if (v306)
  {
    v204 = (unint64_t *)&v306->__shared_owners_;
    do
      v205 = __ldaxr(v204);
    while (__stlxr(v205 - 1, v204));
    if (!v205)
    {
      ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
      std::__shared_weak_count::__release_weak(v203);
    }
  }
  v206 = Scalar;
  Scalar = 0;
  if (v206)
    (*(void (**)(void *))(*(_QWORD *)v206 + 8))(v206);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&Scalar);
  v207 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v301, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v301, 0, (uint64_t *)&v389);
  v303 = v389;
  if (v389)
  {
    v208 = (std::__shared_weak_count *)operator new();
    v209 = v389;
    v208->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v208->__shared_owners_ = 0;
    v208->__shared_weak_owners_ = 0;
    v208[1].__vftable = v209;
  }
  else
  {
    v208 = 0;
  }
  v304 = v208;
  v389 = 0;
  std::string::basic_string[abi:ne180100]<0>(v299, "C");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v207 + 24))(v207, &v303, 1, v299);
  if (v300 < 0)
    operator delete(v299[0]);
  v210 = v304;
  if (v304)
  {
    v211 = (unint64_t *)&v304->__shared_owners_;
    do
      v212 = __ldaxr(v211);
    while (__stlxr(v212 - 1, v211));
    if (!v212)
    {
      ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
      std::__shared_weak_count::__release_weak(v210);
    }
  }
  v213 = v389;
  v389 = 0;
  if (v213)
    (*((void (**)(std::__shared_weak_count_vtbl *))v213->~__shared_weak_count + 1))(v213);
  if (v302 < 0)
    operator delete(v301[0]);
  v214 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v295, "mean");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v295, 0, (uint64_t *)&v389);
  v297 = v389;
  if (v389)
  {
    v215 = (std::__shared_weak_count *)operator new();
    v216 = v389;
    v215->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v215->__shared_owners_ = 0;
    v215->__shared_weak_owners_ = 0;
    v215[1].__vftable = v216;
  }
  else
  {
    v215 = 0;
  }
  v298 = v215;
  v389 = 0;
  std::string::basic_string[abi:ne180100]<0>(v293, "C");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v214 + 24))(v214, &v297, 0, v293);
  if (v294 < 0)
    operator delete(v293[0]);
  v217 = v298;
  if (v298)
  {
    v218 = (unint64_t *)&v298->__shared_owners_;
    do
      v219 = __ldaxr(v218);
    while (__stlxr(v219 - 1, v218));
    if (!v219)
    {
      ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
      std::__shared_weak_count::__release_weak(v217);
    }
  }
  v220 = v389;
  v389 = 0;
  if (v220)
    (*((void (**)(std::__shared_weak_count_vtbl *))v220->~__shared_weak_count + 1))(v220);
  if (v296 < 0)
    operator delete(v295[0]);
  v221 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v289, "variance");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v289, 0, (uint64_t *)&v389);
  v291 = v389;
  if (v389)
  {
    v222 = (std::__shared_weak_count *)operator new();
    v223 = v389;
    v222->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v222->__shared_owners_ = 0;
    v222->__shared_weak_owners_ = 0;
    v222[1].__vftable = v223;
  }
  else
  {
    v222 = 0;
  }
  v292 = v222;
  v389 = 0;
  std::string::basic_string[abi:ne180100]<0>(v287, "C");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v221 + 24))(v221, &v291, 0, v287);
  if (v288 < 0)
    operator delete(v287[0]);
  v224 = v292;
  if (v292)
  {
    v225 = (unint64_t *)&v292->__shared_owners_;
    do
      v226 = __ldaxr(v225);
    while (__stlxr(v226 - 1, v225));
    if (!v226)
    {
      ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
      std::__shared_weak_count::__release_weak(v224);
    }
  }
  v227 = v389;
  v389 = 0;
  if (v227)
    (*((void (**)(std::__shared_weak_count_vtbl *))v227->~__shared_weak_count + 1))(v227);
  if (v290 < 0)
    operator delete(v289[0]);
  v228 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v283, "beta");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v283, 1, (uint64_t *)&v389);
  v285 = v389;
  if (v389)
  {
    v229 = (std::__shared_weak_count *)operator new();
    v230 = v389;
    v229->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v229->__shared_owners_ = 0;
    v229->__shared_weak_owners_ = 0;
    v229[1].__vftable = v230;
  }
  else
  {
    v229 = 0;
  }
  v286 = v229;
  v389 = 0;
  std::string::basic_string[abi:ne180100]<0>(v281, "C");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v228 + 24))(v228, &v285, 0, v281);
  if (v282 < 0)
    operator delete(v281[0]);
  v231 = v286;
  if (v286)
  {
    v232 = (unint64_t *)&v286->__shared_owners_;
    do
      v233 = __ldaxr(v232);
    while (__stlxr(v233 - 1, v232));
    if (!v233)
    {
      ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
      std::__shared_weak_count::__release_weak(v231);
    }
  }
  v234 = v389;
  v389 = 0;
  if (v234)
    (*((void (**)(std::__shared_weak_count_vtbl *))v234->~__shared_weak_count + 1))(v234);
  if (v284 < 0)
    operator delete(v283[0]);
  v235 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v277, "gamma");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v277, 1, (uint64_t *)&v389);
  v279 = v389;
  if (v389)
  {
    v236 = (std::__shared_weak_count *)operator new();
    v237 = v389;
    v236->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v236->__shared_owners_ = 0;
    v236->__shared_weak_owners_ = 0;
    v236[1].__vftable = v237;
  }
  else
  {
    v236 = 0;
  }
  v280 = v236;
  v389 = 0;
  std::string::basic_string[abi:ne180100]<0>(v275, "C");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v235 + 24))(v235, &v279, 0, v275);
  if (v276 < 0)
    operator delete(v275[0]);
  v238 = v280;
  if (v280)
  {
    v239 = (unint64_t *)&v280->__shared_owners_;
    do
      v240 = __ldaxr(v239);
    while (__stlxr(v240 - 1, v239));
    if (!v240)
    {
      ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
      std::__shared_weak_count::__release_weak(v238);
    }
  }
  v241 = v389;
  v389 = 0;
  if (v241)
    (*((void (**)(std::__shared_weak_count_vtbl *))v241->~__shared_weak_count + 1))(v241);
  if (v278 < 0)
    operator delete(v277[0]);
  v242 = *a3;
  v273 = Scalar;
  if (Scalar)
  {
    v243 = (std::__shared_weak_count *)operator new();
    v244 = (std::__shared_weak_count_vtbl *)Scalar;
    v243->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v243->__shared_owners_ = 0;
    v243->__shared_weak_owners_ = 0;
    v243[1].__vftable = v244;
  }
  else
  {
    v243 = 0;
  }
  v274 = v243;
  Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v242 + 56))(v242, &v273);
  v245 = v274;
  if (v274)
  {
    v246 = (unint64_t *)&v274->__shared_owners_;
    do
      v247 = __ldaxr(v246);
    while (__stlxr(v247 - 1, v246));
    if (!v247)
    {
      ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
      std::__shared_weak_count::__release_weak(v245);
    }
  }
  v248 = Scalar;
  Scalar = 0;
  if (v248)
    (*(void (**)(void *))(*(_QWORD *)v248 + 8))(v248);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v249 = __p;
  std::string::basic_string[abi:ne180100]<0>(v269, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v269, 1, (uint64_t *)&v360);
  v271 = v360;
  if (v360)
  {
    v250 = (std::__shared_weak_count *)operator new();
    v251 = (std::__shared_weak_count_vtbl *)v360;
    v250->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v250->__shared_owners_ = 0;
    v250->__shared_weak_owners_ = 0;
    v250[1].__vftable = v251;
  }
  else
  {
    v250 = 0;
  }
  v272 = v250;
  v360 = 0;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v384, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v385, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v386, "int32");
  std::string::basic_string[abi:ne180100]<0>(v387, "int8");
  std::string::basic_string[abi:ne180100]<0>(v388, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&v389, (unsigned __int8 *)&Scalar, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v249 + 24))(v249, &v271, &v389, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v389);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v388[i + 2]) < 0)
      operator delete((void *)v388[i]);
  }
  v253 = v272;
  if (v272)
  {
    v254 = (unint64_t *)&v272->__shared_owners_;
    do
      v255 = __ldaxr(v254);
    while (__stlxr(v255 - 1, v254));
    if (!v255)
    {
      ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
      std::__shared_weak_count::__release_weak(v253);
    }
  }
  v256 = v360;
  v360 = 0;
  if (v256)
    (*(void (**)(void *))(*(_QWORD *)v256 + 8))(v256);
  if (v270 < 0)
    operator delete(v269[0]);
  v257 = *a3;
  v267 = __p;
  if (__p)
  {
    v258 = (std::__shared_weak_count *)operator new();
    v259 = (std::__shared_weak_count_vtbl *)__p;
    v258->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v258->__shared_owners_ = 0;
    v258->__shared_weak_owners_ = 0;
    v258[1].__vftable = v259;
  }
  else
  {
    v258 = 0;
  }
  v268 = v258;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v257 + 56))(v257, &v267);
  v260 = v268;
  if (v268)
  {
    v261 = (unint64_t *)&v268->__shared_owners_;
    do
      v262 = __ldaxr(v261);
    while (__stlxr(v262 - 1, v261));
    if (!v262)
    {
      ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
      std::__shared_weak_count::__release_weak(v260);
    }
  }
  v263 = __p;
  __p = 0;
  if (v263)
    (*(void (**)(void *))(*(_QWORD *)v263 + 8))(v263);
  if (v376)
  {
    v264 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v376);
    MEMORY[0x1E0C023A0](v264, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v367, 0);
  result = (uint64_t)v380;
  if (v380)
  {
    v266 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v380);
    return MEMORY[0x1E0C023A0](v266, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09DB9D4(_Unwind_Exception *a1)
{
  uint64_t *v1;
  unint64_t v3;
  uint64_t v4;

  v3 = STACK[0x478];
  STACK[0x478] = 0;
  if (v3)
    (*(void (**)(unint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x490], 0);
  v4 = *v1;
  *v1 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x420], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x4B8], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::InstanceNorm::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  std::__shared_weak_count_vtbl *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  unsigned __int8 *v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  std::__shared_weak_count_vtbl *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  unsigned __int8 *v42;
  void *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  unsigned __int8 *v48;
  std::__shared_weak_count_vtbl *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  char **v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t *v73;
  char *v74;
  char *v75;
  char *v76;
  __int128 v77;
  char *v78;
  char *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  char **v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  _OWORD *v98;
  unsigned __int8 *v99;
  void *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  std::__shared_weak_count_vtbl *v105;
  std::__shared_weak_count *v106;
  std::__shared_weak_count *v107;
  unint64_t *p_shared_owners;
  unint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  void *v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count_vtbl *v119;
  void *v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count_vtbl *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count_vtbl *v126;
  void *v127;
  std::__shared_weak_count *v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count_vtbl *v133;
  void *v134;
  std::__shared_weak_count *v135;
  std::__shared_weak_count_vtbl *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count_vtbl *v140;
  void *v141;
  std::__shared_weak_count *v142;
  std::__shared_weak_count_vtbl *v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count_vtbl *v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  std::__shared_weak_count_vtbl *v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  void *v154;
  void *v155;
  std::__shared_weak_count *v156;
  std::__shared_weak_count_vtbl *v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count_vtbl *v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  std::__shared_weak_count_vtbl *v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  void *v168;
  void *v169;
  std::__shared_weak_count *v170;
  std::__shared_weak_count_vtbl *v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count_vtbl *v175;
  void *v176;
  std::__shared_weak_count *v177;
  std::__shared_weak_count_vtbl *v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count_vtbl *v182;
  void *v183;
  std::__shared_weak_count *v184;
  std::__shared_weak_count_vtbl *v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  std::__shared_weak_count_vtbl *v189;
  uint64_t v190;
  std::__shared_weak_count *v191;
  std::__shared_weak_count_vtbl *v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  void *v196;
  void *v197;
  std::__shared_weak_count *v198;
  std::__shared_weak_count_vtbl *v199;
  uint64_t i;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  void *v204;
  uint64_t v205;
  std::__shared_weak_count *v206;
  std::__shared_weak_count_vtbl *v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  void *v211;
  uint64_t v212;
  uint64_t result;
  uint64_t v214;
  void *v215;
  std::__shared_weak_count *v216;
  void *v217[2];
  char v218;
  void *v219;
  std::__shared_weak_count *v220;
  void *v221;
  std::__shared_weak_count *v222;
  void *v223[2];
  char v224;
  void *v225[2];
  char v226;
  std::__shared_weak_count_vtbl *v227;
  std::__shared_weak_count *v228;
  void *v229[2];
  char v230;
  void *v231[2];
  char v232;
  std::__shared_weak_count_vtbl *v233;
  std::__shared_weak_count *v234;
  void *v235[2];
  char v236;
  void *v237[2];
  char v238;
  std::__shared_weak_count_vtbl *v239;
  std::__shared_weak_count *v240;
  void *v241;
  std::__shared_weak_count *v242;
  void *v243[2];
  char v244;
  std::__shared_weak_count_vtbl *v245;
  std::__shared_weak_count *v246;
  void *v247;
  std::__shared_weak_count *v248;
  void *v249[2];
  char v250;
  std::__shared_weak_count_vtbl *v251;
  std::__shared_weak_count *v252;
  void *v253[2];
  char v254;
  void *v255[2];
  char v256;
  std::__shared_weak_count_vtbl *v257;
  std::__shared_weak_count *v258;
  void *v259[2];
  char v260;
  void *v261[2];
  char v262;
  std::__shared_weak_count_vtbl *v263;
  std::__shared_weak_count *v264;
  void *v265[2];
  char v266;
  void *v267[2];
  char v268;
  std::__shared_weak_count_vtbl *v269;
  std::__shared_weak_count *v270;
  void *v271[2];
  char v272;
  void *v273[2];
  char v274;
  std::__shared_weak_count_vtbl *v275;
  std::__shared_weak_count *v276;
  void *v277;
  std::__shared_weak_count *v278;
  __n128 v279;
  __int128 v280;
  __int128 v281;
  void *v282[2];
  uint64_t v283;
  void *v284;
  void *v285;
  _QWORD *v286;
  __n128 v287;
  uint64_t v288;
  uint64_t v289;
  _QWORD *v290;
  char **v291;
  __n128 v292;
  __n128 v293;
  __n128 v294;
  void *__p;
  void *v296;
  _QWORD *v297;
  void *v298;
  void *v299;
  _QWORD *v300;
  __n128 v301;
  _QWORD *v302;
  void *Scalar;
  uint64_t v304;
  uint64_t v305;
  _QWORD v306[3];
  uint64_t v307[3];
  uint64_t v308[3];
  uint64_t v309[3];
  _QWORD v310[3];
  std::__shared_weak_count_vtbl *v311;
  uint64_t p_get_deleter;
  uint64_t v313;
  _BYTE v314[24];
  _BYTE *v315;
  _BYTE v316[24];
  _BYTE *v317;
  _BYTE v318[24];
  _BYTE *v319;
  uint64_t v320;

  v320 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v302 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (uint64_t)&v10->__get_deleter;
  v313 = (uint64_t)&v10->__get_deleter;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v10->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  v10->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v9;
  v311 = v10;
  Scalar = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v311);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(0x18uLL);
  v300 = v14 + 3;
  *v14 = v11;
  v14[1] = v12;
  v14[2] = v13;
  v298 = v14;
  v299 = v14 + 3;
  v304 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v298);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(0x18uLL);
  v297 = v18 + 3;
  *v18 = v15;
  v18[1] = v16;
  v18[2] = v17;
  __p = v18;
  v296 = v18 + 3;
  v305 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v301);
  MIL::IRParameter::Make(&v301, (uint64_t *)&v284);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v284);
  v19 = v284;
  v284 = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = (std::__shared_weak_count *)v301.n128_u64[1];
  if (v301.n128_u64[1])
  {
    v21 = (unint64_t *)(v301.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (__p)
  {
    v296 = __p;
    operator delete(__p);
  }
  if (v298)
  {
    v299 = v298;
    operator delete(v298);
  }
  if (v311)
  {
    p_get_deleter = (uint64_t)v311;
    operator delete(v311);
  }
  v23 = v302;
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v311 = v25;
  v25->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v24;
  p_get_deleter = (uint64_t)&v25->~__shared_weak_count_0;
  v313 = (uint64_t)&v25->~__shared_weak_count_0;
  Scalar = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v311);
  v26 = MIL::IRUnknownDimension::Make(a1, 0);
  v27 = operator new(8uLL);
  v298 = v27;
  *v27 = v26;
  v300 = v27 + 1;
  v299 = v27 + 1;
  v304 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v298);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = operator new(8uLL);
  __p = v29;
  *v29 = v28;
  v297 = v29 + 1;
  v296 = v29 + 1;
  v305 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v294);
  MIL::IRParameter::Make(&v294, (uint64_t *)&v284);
  v30 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v23, "beta", (uint64_t *)&v284);
  v31 = v284;
  v284 = 0;
  if (v31)
    (*(void (**)(void *))(*(_QWORD *)v31 + 8))(v31);
  v32 = (std::__shared_weak_count *)v294.n128_u64[1];
  if (v294.n128_u64[1])
  {
    v33 = (unint64_t *)(v294.n128_u64[1] + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (__p)
  {
    v296 = __p;
    operator delete(__p);
  }
  if (v298)
  {
    v299 = v298;
    operator delete(v298);
  }
  if (v311)
  {
    p_get_deleter = (uint64_t)v311;
    operator delete(v311);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v30 + 5) + 32))(*((_QWORD *)v30 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v30 + 5) + 48))(*((_QWORD *)v30 + 5), 1);
  v35 = v302;
  v36 = MIL::IRUnknownDimension::Make(a1, 0);
  v37 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v311 = v37;
  v37->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v36;
  p_get_deleter = (uint64_t)&v37->~__shared_weak_count_0;
  v313 = (uint64_t)&v37->~__shared_weak_count_0;
  Scalar = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v311);
  v38 = MIL::IRUnknownDimension::Make(a1, 0);
  v39 = operator new(8uLL);
  v298 = v39;
  *v39 = v38;
  v300 = v39 + 1;
  v299 = v39 + 1;
  v304 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v298);
  v40 = MIL::IRUnknownDimension::Make(a1, 0);
  v41 = operator new(8uLL);
  __p = v41;
  *v41 = v40;
  v297 = v41 + 1;
  v296 = v41 + 1;
  v305 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v293);
  MIL::IRParameter::Make(&v293, (uint64_t *)&v284);
  v42 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v35, "gamma", (uint64_t *)&v284);
  v43 = v284;
  v284 = 0;
  if (v43)
    (*(void (**)(void *))(*(_QWORD *)v43 + 8))(v43);
  v44 = (std::__shared_weak_count *)v293.n128_u64[1];
  if (v293.n128_u64[1])
  {
    v45 = (unint64_t *)(v293.n128_u64[1] + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (__p)
  {
    v296 = __p;
    operator delete(__p);
  }
  if (v298)
  {
    v299 = v298;
    operator delete(v298);
  }
  if (v311)
  {
    p_get_deleter = (uint64_t)v311;
    operator delete(v311);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v42 + 5) + 32))(*((_QWORD *)v42 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v42 + 5) + 48))(*((_QWORD *)v42 + 5), 1);
  v47 = v302;
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar(a1, 7);
  v304 = MIL::IRTensorValueType::MakeScalar(a1, 4);
  v305 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v292);
  MIL::IRParameter::Make(&v292, (uint64_t *)&v311);
  v48 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v47, "epsilon", (uint64_t *)&v311);
  v49 = v311;
  v311 = 0;
  if (v49)
    (*((void (**)(std::__shared_weak_count_vtbl *))v49->~__shared_weak_count + 1))(v49);
  v50 = (std::__shared_weak_count *)v292.n128_u64[1];
  if (v292.n128_u64[1])
  {
    v51 = (unint64_t *)(v292.n128_u64[1] + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v48 + 5) + 32))(*((_QWORD *)v48 + 5), 1);
  v291 = 0;
  v53 = operator new();
  *(_QWORD *)v53 = 0;
  *(_QWORD *)(v53 + 8) = 0;
  *(_QWORD *)(v53 + 16) = 0;
  Scalar = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v291, (void **)v53);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&Scalar, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v291, 1uLL);
  v54 = v291;
  v55 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v56 = operator new(8uLL);
  v298 = v56;
  *v56 = v55;
  v300 = v56 + 1;
  v299 = v56 + 1;
  v311 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v298);
  v57 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v58 = operator new(8uLL);
  __p = v58;
  *v58 = v57;
  v297 = v58 + 1;
  v296 = v58 + 1;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v59 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v60 = operator new(8uLL);
  v284 = v60;
  *v60 = v59;
  v286 = v60 + 1;
  v285 = v60 + 1;
  v313 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v284);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v311, 3, &v287);
  MIL::IRParameter::Make(&v287, &v288);
  v61 = v288;
  v289 = v288;
  if (v288)
  {
    v62 = (_QWORD *)operator new();
    v63 = v288;
    *v62 = &unk_1EA99F888;
    v62[1] = 0;
    v62[2] = 0;
    v62[3] = v63;
  }
  else
  {
    v62 = 0;
  }
  v290 = v62;
  v288 = 0;
  v64 = v54[2];
  v65 = v54[1];
  if (v65 >= v64)
  {
    v67 = (v65 - *v54) >> 4;
    v68 = v67 + 1;
    if ((unint64_t)(v67 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v69 = v64 - *v54;
    if (v69 >> 3 > v68)
      v68 = v69 >> 3;
    if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF0)
      v70 = 0xFFFFFFFFFFFFFFFLL;
    else
      v70 = v68;
    v306[1] = v54 + 2;
    v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v54 + 2), v70);
    v73 = (uint64_t *)&v71[16 * v67];
    *v73 = v61;
    v73[1] = (uint64_t)v62;
    v290 = 0;
    v289 = 0;
    v75 = *v54;
    v74 = v54[1];
    if (v74 == *v54)
    {
      v78 = v54[1];
      v76 = &v71[16 * v67];
    }
    else
    {
      v76 = &v71[16 * v67];
      do
      {
        v77 = *((_OWORD *)v74 - 1);
        v74 -= 16;
        *((_OWORD *)v76 - 1) = v77;
        v76 -= 16;
        *(_QWORD *)v74 = 0;
        *((_QWORD *)v74 + 1) = 0;
      }
      while (v74 != v75);
      v78 = *v54;
      v74 = v54[1];
    }
    v66 = (char *)(v73 + 2);
    *v54 = v76;
    v304 = (uint64_t)v78;
    v54[1] = (char *)(v73 + 2);
    v305 = (uint64_t)v74;
    v79 = v54[2];
    v54[2] = &v71[16 * v72];
    v306[0] = v79;
    Scalar = v78;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v65 = v61;
    *((_QWORD *)v65 + 1) = v62;
    v66 = v65 + 16;
    v290 = 0;
    v289 = 0;
  }
  v54[1] = v66;
  v80 = v288;
  v288 = 0;
  if (v80)
    (*(void (**)(uint64_t))(*(_QWORD *)v80 + 8))(v80);
  v81 = (std::__shared_weak_count *)v287.n128_u64[1];
  if (v287.n128_u64[1])
  {
    v82 = (unint64_t *)(v287.n128_u64[1] + 8);
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  if (v284)
  {
    v285 = v284;
    operator delete(v284);
  }
  if (__p)
  {
    v296 = __p;
    operator delete(__p);
  }
  if (v298)
  {
    v299 = v298;
    operator delete(v298);
  }
  *(_OWORD *)v282 = *(_OWORD *)a2;
  v283 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v84 = (uint64_t)v302;
  *(_QWORD *)&v281 = v302;
  if (v302)
  {
    v85 = (_QWORD *)operator new();
    *v85 = &unk_1EA99F8E8;
    v85[1] = 0;
    v85[2] = 0;
    v85[3] = v84;
  }
  else
  {
    v85 = 0;
  }
  *((_QWORD *)&v281 + 1) = v85;
  v302 = 0;
  *(_QWORD *)&v280 = v291;
  if (v291)
  {
    v86 = (_QWORD *)operator new();
    v87 = v291;
    *v86 = &unk_1EA99F948;
    v86[1] = 0;
    v86[2] = 0;
    v86[3] = v87;
  }
  else
  {
    v86 = 0;
  }
  *((_QWORD *)&v280 + 1) = v86;
  v291 = 0;
  v319 = 0;
  v317 = 0;
  MIL::IROperator::Make((__int128 *)v282, &v281, &v280, (uint64_t)v318, (uint64_t)v316, a3);
  v88 = v317;
  if (v317 == v316)
  {
    v89 = 4;
    v88 = v316;
  }
  else
  {
    if (!v317)
      goto LABEL_88;
    v89 = 5;
  }
  (*(void (**)(void))(*v88 + 8 * v89))();
LABEL_88:
  v90 = v319;
  if (v319 == v318)
  {
    v91 = 4;
    v90 = v318;
    goto LABEL_92;
  }
  if (v319)
  {
    v91 = 5;
LABEL_92:
    (*(void (**)(void))(*v90 + 8 * v91))();
  }
  v92 = (std::__shared_weak_count *)*((_QWORD *)&v280 + 1);
  if (*((_QWORD *)&v280 + 1))
  {
    v93 = (unint64_t *)(*((_QWORD *)&v280 + 1) + 8);
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = (std::__shared_weak_count *)*((_QWORD *)&v281 + 1);
  if (*((_QWORD *)&v281 + 1))
  {
    v96 = (unint64_t *)(*((_QWORD *)&v281 + 1) + 8);
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  if (SHIBYTE(v283) < 0)
    operator delete(v282[0]);
  v298 = 0;
  v98 = (_OWORD *)operator new();
  *v98 = 0u;
  v98[1] = 0u;
  *((_DWORD *)v98 + 8) = 1065353216;
  v298 = v98;
  v311 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v311, 1, &v279);
  MIL::IRParameter::Make(&v279, (uint64_t *)&Scalar);
  v99 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v98, "minimum_compute_type", (uint64_t *)&Scalar);
  v100 = Scalar;
  Scalar = 0;
  if (v100)
    (*(void (**)(void *))(*(_QWORD *)v100 + 8))(v100);
  v101 = (std::__shared_weak_count *)v279.n128_u64[1];
  if (v279.n128_u64[1])
  {
    v102 = (unint64_t *)(v279.n128_u64[1] + 8);
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v99 + 5) + 32))(*((_QWORD *)v99 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v99 + 5) + 48))(*((_QWORD *)v99 + 5), 1);
  v104 = *a3;
  v105 = (std::__shared_weak_count_vtbl *)v298;
  v277 = v298;
  if (v298)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = v105;
  }
  else
  {
    v106 = 0;
  }
  v278 = v106;
  v298 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v104 + 184))(v104, &v277);
  v107 = v278;
  if (v278)
  {
    p_shared_owners = (unint64_t *)&v278->__shared_owners_;
    do
      v109 = __ldaxr(p_shared_owners);
    while (__stlxr(v109 - 1, p_shared_owners));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&Scalar, (uint64_t)v314);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v110 + 200))(v110, v314);
  v111 = v315;
  if (v315 == v314)
  {
    v112 = 4;
    v111 = v314;
  }
  else
  {
    if (!v315)
      goto LABEL_125;
    v112 = 5;
  }
  (*(void (**)(void))(*v111 + 8 * v112))();
LABEL_125:
  if (SHIBYTE(v305) < 0)
    operator delete(Scalar);
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v113 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v273, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v273, 0, (uint64_t *)&v311);
  v275 = v311;
  if (v311)
  {
    v114 = (std::__shared_weak_count *)operator new();
    v115 = v311;
    v114->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v114->__shared_owners_ = 0;
    v114->__shared_weak_owners_ = 0;
    v114[1].__vftable = v115;
  }
  else
  {
    v114 = 0;
  }
  v276 = v114;
  v311 = 0;
  std::string::basic_string[abi:ne180100]<0>(v271, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v113 + 24))(v113, &v275, v271);
  if (v272 < 0)
    operator delete(v271[0]);
  v116 = v276;
  if (v276)
  {
    v117 = (unint64_t *)&v276->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = v311;
  v311 = 0;
  if (v119)
    (*((void (**)(std::__shared_weak_count_vtbl *))v119->~__shared_weak_count + 1))(v119);
  if (v274 < 0)
    operator delete(v273[0]);
  v120 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v267, "beta");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v267, 1, (uint64_t *)&v311);
  v269 = v311;
  if (v311)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v122 = v311;
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = v122;
  }
  else
  {
    v121 = 0;
  }
  v270 = v121;
  v311 = 0;
  std::string::basic_string[abi:ne180100]<0>(v265, "CONST_TYPE");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v120 + 24))(v120, &v269, v265);
  if (v266 < 0)
    operator delete(v265[0]);
  v123 = v270;
  if (v270)
  {
    v124 = (unint64_t *)&v270->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = v311;
  v311 = 0;
  if (v126)
    (*((void (**)(std::__shared_weak_count_vtbl *))v126->~__shared_weak_count + 1))(v126);
  if (v268 < 0)
    operator delete(v267[0]);
  v127 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v261, "gamma");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v261, 1, (uint64_t *)&v311);
  v263 = v311;
  if (v311)
  {
    v128 = (std::__shared_weak_count *)operator new();
    v129 = v311;
    v128->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v128->__shared_owners_ = 0;
    v128->__shared_weak_owners_ = 0;
    v128[1].__vftable = v129;
  }
  else
  {
    v128 = 0;
  }
  v264 = v128;
  v311 = 0;
  std::string::basic_string[abi:ne180100]<0>(v259, "CONST_TYPE");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v127 + 24))(v127, &v263, v259);
  if (v260 < 0)
    operator delete(v259[0]);
  v130 = v264;
  if (v264)
  {
    v131 = (unint64_t *)&v264->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = v311;
  v311 = 0;
  if (v133)
    (*((void (**)(std::__shared_weak_count_vtbl *))v133->~__shared_weak_count + 1))(v133);
  if (v262 < 0)
    operator delete(v261[0]);
  v134 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v255, "epsilon");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v255, 0, (uint64_t *)&v311);
  v257 = v311;
  if (v311)
  {
    v135 = (std::__shared_weak_count *)operator new();
    v136 = v311;
    v135->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v135->__shared_owners_ = 0;
    v135->__shared_weak_owners_ = 0;
    v135[1].__vftable = v136;
  }
  else
  {
    v135 = 0;
  }
  v258 = v135;
  v311 = 0;
  std::string::basic_string[abi:ne180100]<0>(v253, "CONST_TYPE");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v134 + 24))(v134, &v257, v253);
  if (v254 < 0)
    operator delete(v253[0]);
  v137 = v258;
  if (v258)
  {
    v138 = (unint64_t *)&v258->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v140 = v311;
  v311 = 0;
  if (v140)
    (*((void (**)(std::__shared_weak_count_vtbl *))v140->~__shared_weak_count + 1))(v140);
  if (v256 < 0)
    operator delete(v255[0]);
  v141 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v311);
  v251 = v311;
  if (v311)
  {
    v142 = (std::__shared_weak_count *)operator new();
    v143 = v311;
    v142->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v142->__shared_owners_ = 0;
    v142->__shared_weak_owners_ = 0;
    v142[1].__vftable = v143;
  }
  else
  {
    v142 = 0;
  }
  v252 = v142;
  v311 = 0;
  std::string::basic_string[abi:ne180100]<0>(v249, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v141 + 24))(v141, &v251, v249);
  if (v250 < 0)
    operator delete(v249[0]);
  v144 = v252;
  if (v252)
  {
    v145 = (unint64_t *)&v252->__shared_owners_;
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
    }
  }
  v147 = v311;
  v311 = 0;
  if (v147)
    (*((void (**)(std::__shared_weak_count_vtbl *))v147->~__shared_weak_count + 1))(v147);
  v148 = *a3;
  v247 = Scalar;
  if (Scalar)
  {
    v149 = (std::__shared_weak_count *)operator new();
    v150 = (std::__shared_weak_count_vtbl *)Scalar;
    v149->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v149->__shared_owners_ = 0;
    v149->__shared_weak_owners_ = 0;
    v149[1].__vftable = v150;
  }
  else
  {
    v149 = 0;
  }
  v248 = v149;
  Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v148 + 56))(v148, &v247);
  v151 = v248;
  if (v248)
  {
    v152 = (unint64_t *)&v248->__shared_owners_;
    do
      v153 = __ldaxr(v152);
    while (__stlxr(v153 - 1, v152));
    if (!v153)
    {
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
    }
  }
  v154 = Scalar;
  Scalar = 0;
  if (v154)
    (*(void (**)(void *))(*(_QWORD *)v154 + 8))(v154);
  MIL::Validation::TensorRankValueConstraints::Make(&Scalar);
  v155 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v243, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v243, 0, (uint64_t *)&v311);
  v245 = v311;
  if (v311)
  {
    v156 = (std::__shared_weak_count *)operator new();
    v157 = v311;
    v156->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v156->__shared_owners_ = 0;
    v156->__shared_weak_owners_ = 0;
    v156[1].__vftable = v157;
  }
  else
  {
    v156 = 0;
  }
  v246 = v156;
  v311 = 0;
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))(*(_QWORD *)v155 + 32))(v155, &v245, 3, 4);
  v158 = v246;
  if (v246)
  {
    v159 = (unint64_t *)&v246->__shared_owners_;
    do
      v160 = __ldaxr(v159);
    while (__stlxr(v160 - 1, v159));
    if (!v160)
    {
      ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
      std::__shared_weak_count::__release_weak(v158);
    }
  }
  v161 = v311;
  v311 = 0;
  if (v161)
    (*((void (**)(std::__shared_weak_count_vtbl *))v161->~__shared_weak_count + 1))(v161);
  if (v244 < 0)
    operator delete(v243[0]);
  v162 = *a3;
  v241 = Scalar;
  if (Scalar)
  {
    v163 = (std::__shared_weak_count *)operator new();
    v164 = (std::__shared_weak_count_vtbl *)Scalar;
    v163->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FC78;
    v163->__shared_owners_ = 0;
    v163->__shared_weak_owners_ = 0;
    v163[1].__vftable = v164;
  }
  else
  {
    v163 = 0;
  }
  v242 = v163;
  Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v162 + 56))(v162, &v241);
  v165 = v242;
  if (v242)
  {
    v166 = (unint64_t *)&v242->__shared_owners_;
    do
      v167 = __ldaxr(v166);
    while (__stlxr(v167 - 1, v166));
    if (!v167)
    {
      ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
      std::__shared_weak_count::__release_weak(v165);
    }
  }
  v168 = Scalar;
  Scalar = 0;
  if (v168)
    (*(void (**)(void *))(*(_QWORD *)v168 + 8))(v168);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&Scalar);
  v169 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v237, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v237, 0, (uint64_t *)&v311);
  v239 = v311;
  if (v311)
  {
    v170 = (std::__shared_weak_count *)operator new();
    v171 = v311;
    v170->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v170->__shared_owners_ = 0;
    v170->__shared_weak_owners_ = 0;
    v170[1].__vftable = v171;
  }
  else
  {
    v170 = 0;
  }
  v240 = v170;
  v311 = 0;
  std::string::basic_string[abi:ne180100]<0>(v235, "C");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v169 + 24))(v169, &v239, 1, v235);
  if (v236 < 0)
    operator delete(v235[0]);
  v172 = v240;
  if (v240)
  {
    v173 = (unint64_t *)&v240->__shared_owners_;
    do
      v174 = __ldaxr(v173);
    while (__stlxr(v174 - 1, v173));
    if (!v174)
    {
      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
      std::__shared_weak_count::__release_weak(v172);
    }
  }
  v175 = v311;
  v311 = 0;
  if (v175)
    (*((void (**)(std::__shared_weak_count_vtbl *))v175->~__shared_weak_count + 1))(v175);
  if (v238 < 0)
    operator delete(v237[0]);
  v176 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v231, "beta");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v231, 1, (uint64_t *)&v311);
  v233 = v311;
  if (v311)
  {
    v177 = (std::__shared_weak_count *)operator new();
    v178 = v311;
    v177->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v177->__shared_owners_ = 0;
    v177->__shared_weak_owners_ = 0;
    v177[1].__vftable = v178;
  }
  else
  {
    v177 = 0;
  }
  v234 = v177;
  v311 = 0;
  std::string::basic_string[abi:ne180100]<0>(v229, "C");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v176 + 24))(v176, &v233, 0, v229);
  if (v230 < 0)
    operator delete(v229[0]);
  v179 = v234;
  if (v234)
  {
    v180 = (unint64_t *)&v234->__shared_owners_;
    do
      v181 = __ldaxr(v180);
    while (__stlxr(v181 - 1, v180));
    if (!v181)
    {
      ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
      std::__shared_weak_count::__release_weak(v179);
    }
  }
  v182 = v311;
  v311 = 0;
  if (v182)
    (*((void (**)(std::__shared_weak_count_vtbl *))v182->~__shared_weak_count + 1))(v182);
  if (v232 < 0)
    operator delete(v231[0]);
  v183 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v225, "gamma");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v225, 1, (uint64_t *)&v311);
  v227 = v311;
  if (v311)
  {
    v184 = (std::__shared_weak_count *)operator new();
    v185 = v311;
    v184->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v184->__shared_owners_ = 0;
    v184->__shared_weak_owners_ = 0;
    v184[1].__vftable = v185;
  }
  else
  {
    v184 = 0;
  }
  v228 = v184;
  v311 = 0;
  std::string::basic_string[abi:ne180100]<0>(v223, "C");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v183 + 24))(v183, &v227, 0, v223);
  if (v224 < 0)
    operator delete(v223[0]);
  v186 = v228;
  if (v228)
  {
    v187 = (unint64_t *)&v228->__shared_owners_;
    do
      v188 = __ldaxr(v187);
    while (__stlxr(v188 - 1, v187));
    if (!v188)
    {
      ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
      std::__shared_weak_count::__release_weak(v186);
    }
  }
  v189 = v311;
  v311 = 0;
  if (v189)
    (*((void (**)(std::__shared_weak_count_vtbl *))v189->~__shared_weak_count + 1))(v189);
  if (v226 < 0)
    operator delete(v225[0]);
  v190 = *a3;
  v221 = Scalar;
  if (Scalar)
  {
    v191 = (std::__shared_weak_count *)operator new();
    v192 = (std::__shared_weak_count_vtbl *)Scalar;
    v191->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v191->__shared_owners_ = 0;
    v191->__shared_weak_owners_ = 0;
    v191[1].__vftable = v192;
  }
  else
  {
    v191 = 0;
  }
  v222 = v191;
  Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v190 + 56))(v190, &v221);
  v193 = v222;
  if (v222)
  {
    v194 = (unint64_t *)&v222->__shared_owners_;
    do
      v195 = __ldaxr(v194);
    while (__stlxr(v195 - 1, v194));
    if (!v195)
    {
      ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
      std::__shared_weak_count::__release_weak(v193);
    }
  }
  v196 = Scalar;
  Scalar = 0;
  if (v196)
    (*(void (**)(void *))(*(_QWORD *)v196 + 8))(v196);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v197 = __p;
  std::string::basic_string[abi:ne180100]<0>(v217, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v217, 1, (uint64_t *)&v284);
  v219 = v284;
  if (v284)
  {
    v198 = (std::__shared_weak_count *)operator new();
    v199 = (std::__shared_weak_count_vtbl *)v284;
    v198->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v198->__shared_owners_ = 0;
    v198->__shared_weak_owners_ = 0;
    v198[1].__vftable = v199;
  }
  else
  {
    v198 = 0;
  }
  v220 = v198;
  v284 = 0;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v306, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v307, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v308, "int32");
  std::string::basic_string[abi:ne180100]<0>(v309, "int8");
  std::string::basic_string[abi:ne180100]<0>(v310, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&v311, (unsigned __int8 *)&Scalar, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v197 + 24))(v197, &v219, &v311, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v311);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v310[i + 2]) < 0)
      operator delete((void *)v310[i]);
  }
  v201 = v220;
  if (v220)
  {
    v202 = (unint64_t *)&v220->__shared_owners_;
    do
      v203 = __ldaxr(v202);
    while (__stlxr(v203 - 1, v202));
    if (!v203)
    {
      ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
      std::__shared_weak_count::__release_weak(v201);
    }
  }
  v204 = v284;
  v284 = 0;
  if (v204)
    (*(void (**)(void *))(*(_QWORD *)v204 + 8))(v204);
  if (v218 < 0)
    operator delete(v217[0]);
  v205 = *a3;
  v215 = __p;
  if (__p)
  {
    v206 = (std::__shared_weak_count *)operator new();
    v207 = (std::__shared_weak_count_vtbl *)__p;
    v206->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v206->__shared_owners_ = 0;
    v206->__shared_weak_owners_ = 0;
    v206[1].__vftable = v207;
  }
  else
  {
    v206 = 0;
  }
  v216 = v206;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v205 + 56))(v205, &v215);
  v208 = v216;
  if (v216)
  {
    v209 = (unint64_t *)&v216->__shared_owners_;
    do
      v210 = __ldaxr(v209);
    while (__stlxr(v210 - 1, v209));
    if (!v210)
    {
      ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
      std::__shared_weak_count::__release_weak(v208);
    }
  }
  v211 = __p;
  __p = 0;
  if (v211)
    (*(void (**)(void *))(*(_QWORD *)v211 + 8))(v211);
  if (v298)
  {
    v212 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v298);
    MEMORY[0x1E0C023A0](v212, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v291, 0);
  result = (uint64_t)v302;
  if (v302)
  {
    v214 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v302);
    return MEMORY[0x1E0C023A0](v214, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09DDEA0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  unint64_t v3;
  uint64_t v4;

  v3 = STACK[0x358];
  STACK[0x358] = 0;
  if (v3)
    (*(void (**)(unint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x370], 0);
  v4 = *v1;
  *v1 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x320], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x398], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::L2Norm::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  unsigned __int8 *v24;
  std::__shared_weak_count_vtbl *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  char **v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t *v49;
  char *v50;
  char *v51;
  char *v52;
  __int128 v53;
  char *v54;
  char *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  char **v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  _OWORD *v74;
  unsigned __int8 *v75;
  void *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  std::__shared_weak_count_vtbl *v81;
  std::__shared_weak_count *v82;
  std::__shared_weak_count *v83;
  unint64_t *p_shared_owners;
  unint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  void *v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count_vtbl *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count_vtbl *v95;
  void *v96;
  std::__shared_weak_count *v97;
  std::__shared_weak_count_vtbl *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count_vtbl *v102;
  void *v103;
  std::__shared_weak_count *v104;
  std::__shared_weak_count_vtbl *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count_vtbl *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  std::__shared_weak_count_vtbl *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  void *v116;
  void *v117;
  std::__shared_weak_count *v118;
  std::__shared_weak_count_vtbl *v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count_vtbl *v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  std::__shared_weak_count_vtbl *v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  void *v130;
  void *v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count_vtbl *v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  std::__shared_weak_count_vtbl *v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  void *v144;
  void *v145;
  std::__shared_weak_count *v146;
  std::__shared_weak_count_vtbl *v147;
  uint64_t i;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  void *v152;
  uint64_t v153;
  std::__shared_weak_count *v154;
  std::__shared_weak_count_vtbl *v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t result;
  uint64_t v162;
  void *v163;
  std::__shared_weak_count *v164;
  void *v165[2];
  char v166;
  void *v167;
  std::__shared_weak_count *v168;
  void *v169;
  std::__shared_weak_count *v170;
  void *v171[2];
  char v172;
  void *v173[2];
  char v174;
  std::__shared_weak_count_vtbl *v175;
  std::__shared_weak_count *v176;
  void *v177;
  std::__shared_weak_count *v178;
  void *v179[2];
  char v180;
  std::__shared_weak_count_vtbl *v181;
  std::__shared_weak_count *v182;
  void *v183;
  std::__shared_weak_count *v184;
  void *v185[2];
  char v186;
  std::__shared_weak_count_vtbl *v187;
  std::__shared_weak_count *v188;
  void *v189[2];
  char v190;
  void *v191[2];
  char v192;
  std::__shared_weak_count_vtbl *v193;
  std::__shared_weak_count *v194;
  void *v195[2];
  char v196;
  void *v197[2];
  char v198;
  std::__shared_weak_count_vtbl *v199;
  std::__shared_weak_count *v200;
  void *v201;
  std::__shared_weak_count *v202;
  __n128 v203;
  __int128 v204;
  __int128 v205;
  void *v206[2];
  uint64_t v207;
  void *v208;
  void *v209;
  _QWORD *v210;
  __n128 v211;
  uint64_t v212;
  uint64_t v213;
  _QWORD *v214;
  char **v215;
  __n128 v216;
  void *__p;
  void *v218;
  _QWORD *v219;
  void *v220;
  void *v221;
  _QWORD *v222;
  __n128 v223;
  _QWORD *v224;
  void *Scalar;
  uint64_t v226;
  uint64_t v227;
  _QWORD v228[3];
  uint64_t v229[3];
  uint64_t v230[3];
  uint64_t v231[3];
  _QWORD v232[3];
  std::__shared_weak_count_vtbl *v233;
  uint64_t p_get_deleter;
  uint64_t v235;
  _BYTE v236[24];
  _BYTE *v237;
  _BYTE v238[24];
  _BYTE *v239;
  _BYTE v240[24];
  _BYTE *v241;
  uint64_t v242;

  v242 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v224 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (uint64_t)&v10->__get_deleter;
  v235 = (uint64_t)&v10->__get_deleter;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v10->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  v10->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v9;
  v233 = v10;
  Scalar = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v233);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(0x18uLL);
  v222 = v14 + 3;
  *v14 = v11;
  v14[1] = v12;
  v14[2] = v13;
  v220 = v14;
  v221 = v14 + 3;
  v226 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v220);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(0x18uLL);
  v219 = v18 + 3;
  *v18 = v15;
  v18[1] = v16;
  v18[2] = v17;
  __p = v18;
  v218 = v18 + 3;
  v227 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v223);
  MIL::IRParameter::Make(&v223, (uint64_t *)&v208);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v208);
  v19 = v208;
  v208 = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = (std::__shared_weak_count *)v223.n128_u64[1];
  if (v223.n128_u64[1])
  {
    v21 = (unint64_t *)(v223.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (__p)
  {
    v218 = __p;
    operator delete(__p);
  }
  if (v220)
  {
    v221 = v220;
    operator delete(v220);
  }
  if (v233)
  {
    p_get_deleter = (uint64_t)v233;
    operator delete(v233);
  }
  v23 = v224;
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar(a1, 7);
  v226 = MIL::IRTensorValueType::MakeScalar(a1, 4);
  v227 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v216);
  MIL::IRParameter::Make(&v216, (uint64_t *)&v233);
  v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v23, "epsilon", (uint64_t *)&v233);
  v25 = v233;
  v233 = 0;
  if (v25)
    (*((void (**)(std::__shared_weak_count_vtbl *))v25->~__shared_weak_count + 1))(v25);
  v26 = (std::__shared_weak_count *)v216.n128_u64[1];
  if (v216.n128_u64[1])
  {
    v27 = (unint64_t *)(v216.n128_u64[1] + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v24 + 5) + 32))(*((_QWORD *)v24 + 5), 1);
  v215 = 0;
  v29 = operator new();
  *(_QWORD *)v29 = 0;
  *(_QWORD *)(v29 + 8) = 0;
  *(_QWORD *)(v29 + 16) = 0;
  Scalar = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v215, (void **)v29);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&Scalar, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v215, 1uLL);
  v30 = v215;
  v31 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v32 = operator new(8uLL);
  v220 = v32;
  *v32 = v31;
  v222 = v32 + 1;
  v221 = v32 + 1;
  v233 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v220);
  v33 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v34 = operator new(8uLL);
  __p = v34;
  *v34 = v33;
  v219 = v34 + 1;
  v218 = v34 + 1;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v35 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v36 = operator new(8uLL);
  v208 = v36;
  *v36 = v35;
  v209 = v36 + 1;
  v210 = v36 + 1;
  v235 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v208);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v233, 3, &v211);
  MIL::IRParameter::Make(&v211, &v212);
  v37 = v212;
  v213 = v212;
  if (v212)
  {
    v38 = (_QWORD *)operator new();
    v39 = v212;
    *v38 = &unk_1EA99F888;
    v38[1] = 0;
    v38[2] = 0;
    v38[3] = v39;
  }
  else
  {
    v38 = 0;
  }
  v214 = v38;
  v212 = 0;
  v40 = v30[2];
  v41 = v30[1];
  if (v41 >= v40)
  {
    v43 = (v41 - *v30) >> 4;
    v44 = v43 + 1;
    if ((unint64_t)(v43 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v45 = v40 - *v30;
    if (v45 >> 3 > v44)
      v44 = v45 >> 3;
    if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF0)
      v46 = 0xFFFFFFFFFFFFFFFLL;
    else
      v46 = v44;
    v228[1] = v30 + 2;
    v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v30 + 2), v46);
    v49 = (uint64_t *)&v47[16 * v43];
    *v49 = v37;
    v49[1] = (uint64_t)v38;
    v214 = 0;
    v213 = 0;
    v51 = *v30;
    v50 = v30[1];
    if (v50 == *v30)
    {
      v54 = v30[1];
      v52 = &v47[16 * v43];
    }
    else
    {
      v52 = &v47[16 * v43];
      do
      {
        v53 = *((_OWORD *)v50 - 1);
        v50 -= 16;
        *((_OWORD *)v52 - 1) = v53;
        v52 -= 16;
        *(_QWORD *)v50 = 0;
        *((_QWORD *)v50 + 1) = 0;
      }
      while (v50 != v51);
      v54 = *v30;
      v50 = v30[1];
    }
    v42 = (char *)(v49 + 2);
    *v30 = v52;
    v226 = (uint64_t)v54;
    v30[1] = (char *)(v49 + 2);
    v227 = (uint64_t)v50;
    v55 = v30[2];
    v30[2] = &v47[16 * v48];
    v228[0] = v55;
    Scalar = v54;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v41 = v37;
    *((_QWORD *)v41 + 1) = v38;
    v42 = v41 + 16;
    v214 = 0;
    v213 = 0;
  }
  v30[1] = v42;
  v56 = v212;
  v212 = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  v57 = (std::__shared_weak_count *)v211.n128_u64[1];
  if (v211.n128_u64[1])
  {
    v58 = (unint64_t *)(v211.n128_u64[1] + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  if (v208)
  {
    v209 = v208;
    operator delete(v208);
  }
  if (__p)
  {
    v218 = __p;
    operator delete(__p);
  }
  if (v220)
  {
    v221 = v220;
    operator delete(v220);
  }
  *(_OWORD *)v206 = *(_OWORD *)a2;
  v207 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v60 = (uint64_t)v224;
  *(_QWORD *)&v205 = v224;
  if (v224)
  {
    v61 = (_QWORD *)operator new();
    *v61 = &unk_1EA99F8E8;
    v61[1] = 0;
    v61[2] = 0;
    v61[3] = v60;
  }
  else
  {
    v61 = 0;
  }
  *((_QWORD *)&v205 + 1) = v61;
  v224 = 0;
  *(_QWORD *)&v204 = v215;
  if (v215)
  {
    v62 = (_QWORD *)operator new();
    v63 = v215;
    *v62 = &unk_1EA99F948;
    v62[1] = 0;
    v62[2] = 0;
    v62[3] = v63;
  }
  else
  {
    v62 = 0;
  }
  *((_QWORD *)&v204 + 1) = v62;
  v215 = 0;
  v241 = 0;
  v239 = 0;
  MIL::IROperator::Make((__int128 *)v206, &v205, &v204, (uint64_t)v240, (uint64_t)v238, a3);
  v64 = v239;
  if (v239 == v238)
  {
    v65 = 4;
    v64 = v238;
  }
  else
  {
    if (!v239)
      goto LABEL_62;
    v65 = 5;
  }
  (*(void (**)(void))(*v64 + 8 * v65))();
LABEL_62:
  v66 = v241;
  if (v241 == v240)
  {
    v67 = 4;
    v66 = v240;
    goto LABEL_66;
  }
  if (v241)
  {
    v67 = 5;
LABEL_66:
    (*(void (**)(void))(*v66 + 8 * v67))();
  }
  v68 = (std::__shared_weak_count *)*((_QWORD *)&v204 + 1);
  if (*((_QWORD *)&v204 + 1))
  {
    v69 = (unint64_t *)(*((_QWORD *)&v204 + 1) + 8);
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v71 = (std::__shared_weak_count *)*((_QWORD *)&v205 + 1);
  if (*((_QWORD *)&v205 + 1))
  {
    v72 = (unint64_t *)(*((_QWORD *)&v205 + 1) + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  if (SHIBYTE(v207) < 0)
    operator delete(v206[0]);
  v220 = 0;
  v74 = (_OWORD *)operator new();
  *v74 = 0u;
  v74[1] = 0u;
  *((_DWORD *)v74 + 8) = 1065353216;
  v220 = v74;
  v233 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v233, 1, &v203);
  MIL::IRParameter::Make(&v203, (uint64_t *)&Scalar);
  v75 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v74, "minimum_compute_type", (uint64_t *)&Scalar);
  v76 = Scalar;
  Scalar = 0;
  if (v76)
    (*(void (**)(void *))(*(_QWORD *)v76 + 8))(v76);
  v77 = (std::__shared_weak_count *)v203.n128_u64[1];
  if (v203.n128_u64[1])
  {
    v78 = (unint64_t *)(v203.n128_u64[1] + 8);
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v75 + 5) + 32))(*((_QWORD *)v75 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v75 + 5) + 48))(*((_QWORD *)v75 + 5), 1);
  v80 = *a3;
  v81 = (std::__shared_weak_count_vtbl *)v220;
  v201 = v220;
  if (v220)
  {
    v82 = (std::__shared_weak_count *)operator new();
    v82->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v82->__shared_owners_ = 0;
    v82->__shared_weak_owners_ = 0;
    v82[1].__vftable = v81;
  }
  else
  {
    v82 = 0;
  }
  v202 = v82;
  v220 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v80 + 184))(v80, &v201);
  v83 = v202;
  if (v202)
  {
    p_shared_owners = (unint64_t *)&v202->__shared_owners_;
    do
      v85 = __ldaxr(p_shared_owners);
    while (__stlxr(v85 - 1, p_shared_owners));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&Scalar, (uint64_t)v236);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v86 + 200))(v86, v236);
  v87 = v237;
  if (v237 == v236)
  {
    v88 = 4;
    v87 = v236;
  }
  else
  {
    if (!v237)
      goto LABEL_99;
    v88 = 5;
  }
  (*(void (**)(void))(*v87 + 8 * v88))();
LABEL_99:
  if (SHIBYTE(v227) < 0)
    operator delete(Scalar);
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v89 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v197, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v197, 0, (uint64_t *)&v233);
  v199 = v233;
  if (v233)
  {
    v90 = (std::__shared_weak_count *)operator new();
    v91 = v233;
    v90->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v90->__shared_owners_ = 0;
    v90->__shared_weak_owners_ = 0;
    v90[1].__vftable = v91;
  }
  else
  {
    v90 = 0;
  }
  v200 = v90;
  v233 = 0;
  std::string::basic_string[abi:ne180100]<0>(v195, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v89 + 24))(v89, &v199, v195);
  if (v196 < 0)
    operator delete(v195[0]);
  v92 = v200;
  if (v200)
  {
    v93 = (unint64_t *)&v200->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = v233;
  v233 = 0;
  if (v95)
    (*((void (**)(std::__shared_weak_count_vtbl *))v95->~__shared_weak_count + 1))(v95);
  if (v198 < 0)
    operator delete(v197[0]);
  v96 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v191, "epsilon");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v191, 0, (uint64_t *)&v233);
  v193 = v233;
  if (v233)
  {
    v97 = (std::__shared_weak_count *)operator new();
    v98 = v233;
    v97->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v97->__shared_owners_ = 0;
    v97->__shared_weak_owners_ = 0;
    v97[1].__vftable = v98;
  }
  else
  {
    v97 = 0;
  }
  v194 = v97;
  v233 = 0;
  std::string::basic_string[abi:ne180100]<0>(v189, "CONST_TYPE");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v96 + 24))(v96, &v193, v189);
  if (v190 < 0)
    operator delete(v189[0]);
  v99 = v194;
  if (v194)
  {
    v100 = (unint64_t *)&v194->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v102 = v233;
  v233 = 0;
  if (v102)
    (*((void (**)(std::__shared_weak_count_vtbl *))v102->~__shared_weak_count + 1))(v102);
  if (v192 < 0)
    operator delete(v191[0]);
  v103 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v233);
  v187 = v233;
  if (v233)
  {
    v104 = (std::__shared_weak_count *)operator new();
    v105 = v233;
    v104->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v104->__shared_owners_ = 0;
    v104->__shared_weak_owners_ = 0;
    v104[1].__vftable = v105;
  }
  else
  {
    v104 = 0;
  }
  v188 = v104;
  v233 = 0;
  std::string::basic_string[abi:ne180100]<0>(v185, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v103 + 24))(v103, &v187, v185);
  if (v186 < 0)
    operator delete(v185[0]);
  v106 = v188;
  if (v188)
  {
    v107 = (unint64_t *)&v188->__shared_owners_;
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  v109 = v233;
  v233 = 0;
  if (v109)
    (*((void (**)(std::__shared_weak_count_vtbl *))v109->~__shared_weak_count + 1))(v109);
  v110 = *a3;
  v183 = Scalar;
  if (Scalar)
  {
    v111 = (std::__shared_weak_count *)operator new();
    v112 = (std::__shared_weak_count_vtbl *)Scalar;
    v111->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v111->__shared_owners_ = 0;
    v111->__shared_weak_owners_ = 0;
    v111[1].__vftable = v112;
  }
  else
  {
    v111 = 0;
  }
  v184 = v111;
  Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v110 + 56))(v110, &v183);
  v113 = v184;
  if (v184)
  {
    v114 = (unint64_t *)&v184->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  v116 = Scalar;
  Scalar = 0;
  if (v116)
    (*(void (**)(void *))(*(_QWORD *)v116 + 8))(v116);
  MIL::Validation::TensorRankValueConstraints::Make(&Scalar);
  v117 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v179, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v179, 0, (uint64_t *)&v233);
  v181 = v233;
  if (v233)
  {
    v118 = (std::__shared_weak_count *)operator new();
    v119 = v233;
    v118->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v118->__shared_owners_ = 0;
    v118->__shared_weak_owners_ = 0;
    v118[1].__vftable = v119;
  }
  else
  {
    v118 = 0;
  }
  v182 = v118;
  v233 = 0;
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))(*(_QWORD *)v117 + 32))(v117, &v181, 3, 5);
  v120 = v182;
  if (v182)
  {
    v121 = (unint64_t *)&v182->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v123 = v233;
  v233 = 0;
  if (v123)
    (*((void (**)(std::__shared_weak_count_vtbl *))v123->~__shared_weak_count + 1))(v123);
  if (v180 < 0)
    operator delete(v179[0]);
  v124 = *a3;
  v177 = Scalar;
  if (Scalar)
  {
    v125 = (std::__shared_weak_count *)operator new();
    v126 = (std::__shared_weak_count_vtbl *)Scalar;
    v125->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FC78;
    v125->__shared_owners_ = 0;
    v125->__shared_weak_owners_ = 0;
    v125[1].__vftable = v126;
  }
  else
  {
    v125 = 0;
  }
  v178 = v125;
  Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v124 + 56))(v124, &v177);
  v127 = v178;
  if (v178)
  {
    v128 = (unint64_t *)&v178->__shared_owners_;
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  v130 = Scalar;
  Scalar = 0;
  if (v130)
    (*(void (**)(void *))(*(_QWORD *)v130 + 8))(v130);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&Scalar);
  v131 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v173, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v173, 0, (uint64_t *)&v233);
  v175 = v233;
  if (v233)
  {
    v132 = (std::__shared_weak_count *)operator new();
    v133 = v233;
    v132->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v132->__shared_owners_ = 0;
    v132->__shared_weak_owners_ = 0;
    v132[1].__vftable = v133;
  }
  else
  {
    v132 = 0;
  }
  v176 = v132;
  v233 = 0;
  std::string::basic_string[abi:ne180100]<0>(v171, "C");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v131 + 24))(v131, &v175, 1, v171);
  if (v172 < 0)
    operator delete(v171[0]);
  v134 = v176;
  if (v176)
  {
    v135 = (unint64_t *)&v176->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  v137 = v233;
  v233 = 0;
  if (v137)
    (*((void (**)(std::__shared_weak_count_vtbl *))v137->~__shared_weak_count + 1))(v137);
  if (v174 < 0)
    operator delete(v173[0]);
  v138 = *a3;
  v169 = Scalar;
  if (Scalar)
  {
    v139 = (std::__shared_weak_count *)operator new();
    v140 = (std::__shared_weak_count_vtbl *)Scalar;
    v139->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v139->__shared_owners_ = 0;
    v139->__shared_weak_owners_ = 0;
    v139[1].__vftable = v140;
  }
  else
  {
    v139 = 0;
  }
  v170 = v139;
  Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v138 + 56))(v138, &v169);
  v141 = v170;
  if (v170)
  {
    v142 = (unint64_t *)&v170->__shared_owners_;
    do
      v143 = __ldaxr(v142);
    while (__stlxr(v143 - 1, v142));
    if (!v143)
    {
      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
      std::__shared_weak_count::__release_weak(v141);
    }
  }
  v144 = Scalar;
  Scalar = 0;
  if (v144)
    (*(void (**)(void *))(*(_QWORD *)v144 + 8))(v144);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v145 = __p;
  std::string::basic_string[abi:ne180100]<0>(v165, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v165, 1, (uint64_t *)&v208);
  v167 = v208;
  if (v208)
  {
    v146 = (std::__shared_weak_count *)operator new();
    v147 = (std::__shared_weak_count_vtbl *)v208;
    v146->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v146->__shared_owners_ = 0;
    v146->__shared_weak_owners_ = 0;
    v146[1].__vftable = v147;
  }
  else
  {
    v146 = 0;
  }
  v168 = v146;
  v208 = 0;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v228, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v229, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v230, "int32");
  std::string::basic_string[abi:ne180100]<0>(v231, "int8");
  std::string::basic_string[abi:ne180100]<0>(v232, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&v233, (unsigned __int8 *)&Scalar, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v145 + 24))(v145, &v167, &v233, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v233);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v232[i + 2]) < 0)
      operator delete((void *)v232[i]);
  }
  v149 = v168;
  if (v168)
  {
    v150 = (unint64_t *)&v168->__shared_owners_;
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  v152 = v208;
  v208 = 0;
  if (v152)
    (*(void (**)(void *))(*(_QWORD *)v152 + 8))(v152);
  if (v166 < 0)
    operator delete(v165[0]);
  v153 = *a3;
  v163 = __p;
  if (__p)
  {
    v154 = (std::__shared_weak_count *)operator new();
    v155 = (std::__shared_weak_count_vtbl *)__p;
    v154->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v154->__shared_owners_ = 0;
    v154->__shared_weak_owners_ = 0;
    v154[1].__vftable = v155;
  }
  else
  {
    v154 = 0;
  }
  v164 = v154;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v153 + 56))(v153, &v163);
  v156 = v164;
  if (v164)
  {
    v157 = (unint64_t *)&v164->__shared_owners_;
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  v159 = __p;
  __p = 0;
  if (v159)
    (*(void (**)(void *))(*(_QWORD *)v159 + 8))(v159);
  if (v220)
  {
    v160 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v220);
    MEMORY[0x1E0C023A0](v160, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v215, 0);
  result = (uint64_t)v224;
  if (v224)
  {
    v162 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v224);
    return MEMORY[0x1E0C023A0](v162, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09DFA14(_Unwind_Exception *a1)
{
  uint64_t *v1;
  unint64_t v3;
  uint64_t v4;

  v3 = STACK[0x238];
  STACK[0x238] = 0;
  if (v3)
    (*(void (**)(unint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x250], 0);
  v4 = *v1;
  *v1 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x220], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x278], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::LayerNorm::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  unsigned __int8 *v20;
  std::__shared_weak_count_vtbl *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count_vtbl *v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count_vtbl *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unsigned __int8 *v35;
  void *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count_vtbl *v43;
  uint64_t v44;
  uint64_t v45;
  std::__shared_weak_count_vtbl *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  unsigned __int8 *v50;
  void *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  unsigned __int8 *v56;
  std::__shared_weak_count_vtbl *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  char **v62;
  uint64_t v63;
  std::__shared_weak_count_vtbl *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t *v81;
  char *v82;
  char *v83;
  char *v84;
  __int128 v85;
  char *v86;
  char *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  char **v95;
  _QWORD *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  _OWORD *v106;
  unsigned __int8 *v107;
  void *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  std::__shared_weak_count_vtbl *v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count *v115;
  unint64_t *p_shared_owners;
  unint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  void *v121;
  std::__shared_weak_count *v122;
  std::__shared_weak_count_vtbl *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count_vtbl *v127;
  void *v128;
  std::__shared_weak_count *v129;
  std::__shared_weak_count_vtbl *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count_vtbl *v134;
  void *v135;
  std::__shared_weak_count *v136;
  std::__shared_weak_count_vtbl *v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count_vtbl *v141;
  void *v142;
  std::__shared_weak_count *v143;
  std::__shared_weak_count_vtbl *v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count_vtbl *v148;
  void *v149;
  std::__shared_weak_count *v150;
  std::__shared_weak_count_vtbl *v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count_vtbl *v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  std::__shared_weak_count_vtbl *v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  void *v162;
  void *v163;
  std::__shared_weak_count *v164;
  std::__shared_weak_count_vtbl *v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count_vtbl *v169;
  uint64_t v170;
  std::__shared_weak_count *v171;
  std::__shared_weak_count_vtbl *v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  void *v176;
  void *v177;
  std::__shared_weak_count *v178;
  std::__shared_weak_count_vtbl *v179;
  uint64_t i;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  void *v184;
  uint64_t v185;
  std::__shared_weak_count *v186;
  std::__shared_weak_count_vtbl *v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  void *v191;
  uint64_t v192;
  uint64_t result;
  uint64_t v194;
  void *v195;
  std::__shared_weak_count *v196;
  void *v197[2];
  char v198;
  void *v199;
  std::__shared_weak_count *v200;
  void *v201;
  std::__shared_weak_count *v202;
  void *v203[2];
  char v204;
  void *v205[2];
  char v206;
  std::__shared_weak_count_vtbl *v207;
  std::__shared_weak_count *v208;
  void *v209;
  std::__shared_weak_count *v210;
  void *v211[2];
  char v212;
  std::__shared_weak_count_vtbl *v213;
  std::__shared_weak_count *v214;
  void *v215[2];
  char v216;
  void *v217[2];
  char v218;
  std::__shared_weak_count_vtbl *v219;
  std::__shared_weak_count *v220;
  void *v221[2];
  char v222;
  void *v223[2];
  char v224;
  std::__shared_weak_count_vtbl *v225;
  std::__shared_weak_count *v226;
  void *v227[2];
  char v228;
  void *v229[2];
  char v230;
  std::__shared_weak_count_vtbl *v231;
  std::__shared_weak_count *v232;
  void *v233[2];
  char v234;
  void *v235[2];
  char v236;
  std::__shared_weak_count_vtbl *v237;
  std::__shared_weak_count *v238;
  std::__shared_weak_count_vtbl *v239;
  std::__shared_weak_count *v240;
  __n128 v241;
  __int128 v242;
  __int128 v243;
  void *v244[2];
  uint64_t v245;
  void *v246;
  void *v247;
  _QWORD *v248;
  __n128 v249;
  uint64_t v250;
  uint64_t v251;
  _QWORD *v252;
  char **v253;
  __n128 v254;
  __n128 v255;
  __n128 v256;
  __n128 v257;
  void *__p;
  void *v259;
  _QWORD *v260;
  __n128 v261;
  _QWORD *v262;
  void *Scalar;
  uint64_t v264;
  uint64_t v265;
  _QWORD v266[3];
  uint64_t v267[3];
  uint64_t v268[3];
  uint64_t v269[3];
  _QWORD v270[3];
  std::__shared_weak_count_vtbl *v271;
  uint64_t p_on_zero_shared;
  uint64_t v273;
  _BYTE v274[24];
  _BYTE *v275;
  _BYTE v276[24];
  _BYTE *v277;
  _BYTE v278[24];
  _BYTE *v279;
  std::__shared_weak_count_vtbl *v280;
  std::__shared_weak_count_vtbl *v281;
  _QWORD *v282;
  uint64_t v283;

  v283 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v262 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v271 = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  p_on_zero_shared = (uint64_t)&v8->~__shared_weak_count_0;
  v273 = (uint64_t)&v8->~__shared_weak_count_0;
  Scalar = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v271);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v280 = v10;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v281 = (std::__shared_weak_count_vtbl *)&v10->~__shared_weak_count_0;
  v282 = &v10->~__shared_weak_count_0;
  v264 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v280);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v260 = v12 + 1;
  v259 = v12 + 1;
  v265 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v261);
  MIL::IRParameter::Make(&v261, (uint64_t *)&v246);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v246);
  v13 = v246;
  v246 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v261.n128_u64[1];
  if (v261.n128_u64[1])
  {
    v15 = (unint64_t *)(v261.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v259 = __p;
    operator delete(__p);
  }
  if (v280)
  {
    v281 = v280;
    operator delete(v280);
  }
  if (v271)
  {
    p_on_zero_shared = (uint64_t)v271;
    operator delete(v271);
  }
  v17 = v262;
  v18 = MIL::IRUnknownDimension::Make(a1, 0);
  v19 = operator new(8uLL);
  Scalar = v19;
  *v19 = v18;
  v265 = (uint64_t)(v19 + 1);
  v264 = (uint64_t)(v19 + 1);
  v280 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v280, 1, &v257);
  MIL::IRParameter::Make(&v257, (uint64_t *)&v271);
  v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v17, "axes", (uint64_t *)&v271);
  v21 = v271;
  v271 = 0;
  if (v21)
    (*((void (**)(std::__shared_weak_count_vtbl *))v21->~__shared_weak_count + 1))(v21);
  v22 = (std::__shared_weak_count *)v257.n128_u64[1];
  if (v257.n128_u64[1])
  {
    v23 = (unint64_t *)(v257.n128_u64[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (Scalar)
  {
    v264 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v20 + 5) + 32))(*((_QWORD *)v20 + 5), 1);
  v25 = v262;
  v26 = MIL::IRUnknownDimension::Make(a1, 0);
  v27 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v28 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v28->__on_zero_shared;
  v273 = (uint64_t)&v28->__on_zero_shared;
  v28->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v26;
  v28->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v27;
  v271 = v28;
  Scalar = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v271);
  v29 = MIL::IRUnknownDimension::Make(a1, 0);
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  v281 = (std::__shared_weak_count_vtbl *)&v31->__on_zero_shared;
  v282 = &v31->__on_zero_shared;
  v31->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v29;
  v31->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v30;
  v280 = v31;
  v264 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v280);
  v32 = MIL::IRUnknownDimension::Make(a1, 0);
  v33 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v34 = operator new(0x10uLL);
  v260 = v34 + 2;
  *v34 = v32;
  v34[1] = v33;
  __p = v34;
  v259 = v34 + 2;
  v265 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v256);
  MIL::IRParameter::Make(&v256, (uint64_t *)&v246);
  v35 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v25, "gamma", (uint64_t *)&v246);
  v36 = v246;
  v246 = 0;
  if (v36)
    (*(void (**)(void *))(*(_QWORD *)v36 + 8))(v36);
  v37 = (std::__shared_weak_count *)v256.n128_u64[1];
  if (v256.n128_u64[1])
  {
    v38 = (unint64_t *)(v256.n128_u64[1] + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (__p)
  {
    v259 = __p;
    operator delete(__p);
  }
  if (v280)
  {
    v281 = v280;
    operator delete(v280);
  }
  if (v271)
  {
    p_on_zero_shared = (uint64_t)v271;
    operator delete(v271);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v35 + 5) + 32))(*((_QWORD *)v35 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v35 + 5) + 48))(*((_QWORD *)v35 + 5), 1);
  v40 = v262;
  v41 = MIL::IRUnknownDimension::Make(a1, 0);
  v42 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v43 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v43->__on_zero_shared;
  v273 = (uint64_t)&v43->__on_zero_shared;
  v43->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v41;
  v43->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v42;
  v271 = v43;
  Scalar = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v271);
  v44 = MIL::IRUnknownDimension::Make(a1, 0);
  v45 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v46 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  v281 = (std::__shared_weak_count_vtbl *)&v46->__on_zero_shared;
  v282 = &v46->__on_zero_shared;
  v46->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v44;
  v46->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v45;
  v280 = v46;
  v264 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v280);
  v47 = MIL::IRUnknownDimension::Make(a1, 0);
  v48 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v49 = operator new(0x10uLL);
  v260 = v49 + 2;
  *v49 = v47;
  v49[1] = v48;
  __p = v49;
  v259 = v49 + 2;
  v265 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v255);
  MIL::IRParameter::Make(&v255, (uint64_t *)&v246);
  v50 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v40, "beta", (uint64_t *)&v246);
  v51 = v246;
  v246 = 0;
  if (v51)
    (*(void (**)(void *))(*(_QWORD *)v51 + 8))(v51);
  v52 = (std::__shared_weak_count *)v255.n128_u64[1];
  if (v255.n128_u64[1])
  {
    v53 = (unint64_t *)(v255.n128_u64[1] + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  if (__p)
  {
    v259 = __p;
    operator delete(__p);
  }
  if (v280)
  {
    v281 = v280;
    operator delete(v280);
  }
  if (v271)
  {
    p_on_zero_shared = (uint64_t)v271;
    operator delete(v271);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v50 + 5) + 32))(*((_QWORD *)v50 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v50 + 5) + 48))(*((_QWORD *)v50 + 5), 1);
  v55 = v262;
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar(a1, 7);
  v264 = MIL::IRTensorValueType::MakeScalar(a1, 4);
  v265 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v254);
  MIL::IRParameter::Make(&v254, (uint64_t *)&v271);
  v56 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v55, "epsilon", (uint64_t *)&v271);
  v57 = v271;
  v271 = 0;
  if (v57)
    (*((void (**)(std::__shared_weak_count_vtbl *))v57->~__shared_weak_count + 1))(v57);
  v58 = (std::__shared_weak_count *)v254.n128_u64[1];
  if (v254.n128_u64[1])
  {
    v59 = (unint64_t *)(v254.n128_u64[1] + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v56 + 5) + 32))(*((_QWORD *)v56 + 5), 1);
  v253 = 0;
  v61 = operator new();
  *(_QWORD *)v61 = 0;
  *(_QWORD *)(v61 + 8) = 0;
  *(_QWORD *)(v61 + 16) = 0;
  Scalar = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v253, (void **)v61);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&Scalar, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v253, 1uLL);
  v62 = v253;
  v63 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v64 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v280 = v64;
  v64->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v63;
  v281 = (std::__shared_weak_count_vtbl *)&v64->~__shared_weak_count_0;
  v282 = &v64->~__shared_weak_count_0;
  v271 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v280);
  v65 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v66 = operator new(8uLL);
  __p = v66;
  *v66 = v65;
  v260 = v66 + 1;
  v259 = v66 + 1;
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v67 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v68 = operator new(8uLL);
  v246 = v68;
  *v68 = v67;
  v248 = v68 + 1;
  v247 = v68 + 1;
  v273 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v246);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v271, 3, &v249);
  MIL::IRParameter::Make(&v249, &v250);
  v69 = v250;
  v251 = v250;
  if (v250)
  {
    v70 = (_QWORD *)operator new();
    v71 = v250;
    *v70 = &unk_1EA99F888;
    v70[1] = 0;
    v70[2] = 0;
    v70[3] = v71;
  }
  else
  {
    v70 = 0;
  }
  v252 = v70;
  v250 = 0;
  v72 = v62[2];
  v73 = v62[1];
  if (v73 >= v72)
  {
    v75 = (v73 - *v62) >> 4;
    v76 = v75 + 1;
    if ((unint64_t)(v75 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v77 = v72 - *v62;
    if (v77 >> 3 > v76)
      v76 = v77 >> 3;
    if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF0)
      v78 = 0xFFFFFFFFFFFFFFFLL;
    else
      v78 = v76;
    v266[1] = v62 + 2;
    v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v62 + 2), v78);
    v81 = (uint64_t *)&v79[16 * v75];
    *v81 = v69;
    v81[1] = (uint64_t)v70;
    v252 = 0;
    v251 = 0;
    v83 = *v62;
    v82 = v62[1];
    if (v82 == *v62)
    {
      v86 = v62[1];
      v84 = &v79[16 * v75];
    }
    else
    {
      v84 = &v79[16 * v75];
      do
      {
        v85 = *((_OWORD *)v82 - 1);
        v82 -= 16;
        *((_OWORD *)v84 - 1) = v85;
        v84 -= 16;
        *(_QWORD *)v82 = 0;
        *((_QWORD *)v82 + 1) = 0;
      }
      while (v82 != v83);
      v86 = *v62;
      v82 = v62[1];
    }
    v74 = (char *)(v81 + 2);
    *v62 = v84;
    v264 = (uint64_t)v86;
    v62[1] = (char *)(v81 + 2);
    v265 = (uint64_t)v82;
    v87 = v62[2];
    v62[2] = &v79[16 * v80];
    v266[0] = v87;
    Scalar = v86;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v73 = v69;
    *((_QWORD *)v73 + 1) = v70;
    v74 = v73 + 16;
    v252 = 0;
    v251 = 0;
  }
  v62[1] = v74;
  v88 = v250;
  v250 = 0;
  if (v88)
    (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
  v89 = (std::__shared_weak_count *)v249.n128_u64[1];
  if (v249.n128_u64[1])
  {
    v90 = (unint64_t *)(v249.n128_u64[1] + 8);
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  if (v246)
  {
    v247 = v246;
    operator delete(v246);
  }
  if (__p)
  {
    v259 = __p;
    operator delete(__p);
  }
  if (v280)
  {
    v281 = v280;
    operator delete(v280);
  }
  *(_OWORD *)v244 = *(_OWORD *)a2;
  v245 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v92 = (uint64_t)v262;
  *(_QWORD *)&v243 = v262;
  if (v262)
  {
    v93 = (_QWORD *)operator new();
    *v93 = &unk_1EA99F8E8;
    v93[1] = 0;
    v93[2] = 0;
    v93[3] = v92;
  }
  else
  {
    v93 = 0;
  }
  *((_QWORD *)&v243 + 1) = v93;
  v262 = 0;
  *(_QWORD *)&v242 = v253;
  if (v253)
  {
    v94 = (_QWORD *)operator new();
    v95 = v253;
    *v94 = &unk_1EA99F948;
    v94[1] = 0;
    v94[2] = 0;
    v94[3] = v95;
  }
  else
  {
    v94 = 0;
  }
  *((_QWORD *)&v242 + 1) = v94;
  v253 = 0;
  v279 = 0;
  v277 = 0;
  MIL::IROperator::Make((__int128 *)v244, &v243, &v242, (uint64_t)v278, (uint64_t)v276, a3);
  v96 = v277;
  if (v277 == v276)
  {
    v97 = 4;
    v96 = v276;
  }
  else
  {
    if (!v277)
      goto LABEL_97;
    v97 = 5;
  }
  (*(void (**)(void))(*v96 + 8 * v97))();
LABEL_97:
  v98 = v279;
  if (v279 == v278)
  {
    v99 = 4;
    v98 = v278;
    goto LABEL_101;
  }
  if (v279)
  {
    v99 = 5;
LABEL_101:
    (*(void (**)(void))(*v98 + 8 * v99))();
  }
  v100 = (std::__shared_weak_count *)*((_QWORD *)&v242 + 1);
  if (*((_QWORD *)&v242 + 1))
  {
    v101 = (unint64_t *)(*((_QWORD *)&v242 + 1) + 8);
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = (std::__shared_weak_count *)*((_QWORD *)&v243 + 1);
  if (*((_QWORD *)&v243 + 1))
  {
    v104 = (unint64_t *)(*((_QWORD *)&v243 + 1) + 8);
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  if (SHIBYTE(v245) < 0)
    operator delete(v244[0]);
  v280 = 0;
  v106 = (_OWORD *)operator new();
  *v106 = 0u;
  v106[1] = 0u;
  *((_DWORD *)v106 + 8) = 1065353216;
  v280 = (std::__shared_weak_count_vtbl *)v106;
  v271 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v271, 1, &v241);
  MIL::IRParameter::Make(&v241, (uint64_t *)&Scalar);
  v107 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v106, "minimum_compute_type", (uint64_t *)&Scalar);
  v108 = Scalar;
  Scalar = 0;
  if (v108)
    (*(void (**)(void *))(*(_QWORD *)v108 + 8))(v108);
  v109 = (std::__shared_weak_count *)v241.n128_u64[1];
  if (v241.n128_u64[1])
  {
    v110 = (unint64_t *)(v241.n128_u64[1] + 8);
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v107 + 5) + 32))(*((_QWORD *)v107 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v107 + 5) + 48))(*((_QWORD *)v107 + 5), 1);
  v112 = *a3;
  v113 = v280;
  v239 = v280;
  if (v280)
  {
    v114 = (std::__shared_weak_count *)operator new();
    v114->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v114->__shared_owners_ = 0;
    v114->__shared_weak_owners_ = 0;
    v114[1].__vftable = v113;
  }
  else
  {
    v114 = 0;
  }
  v240 = v114;
  v280 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v112 + 184))(v112, &v239);
  v115 = v240;
  if (v240)
  {
    p_shared_owners = (unint64_t *)&v240->__shared_owners_;
    do
      v117 = __ldaxr(p_shared_owners);
    while (__stlxr(v117 - 1, p_shared_owners));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&Scalar, (uint64_t)v274);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v118 + 200))(v118, v274);
  v119 = v275;
  if (v275 == v274)
  {
    v120 = 4;
    v119 = v274;
  }
  else
  {
    if (!v275)
      goto LABEL_134;
    v120 = 5;
  }
  (*(void (**)(void))(*v119 + 8 * v120))();
LABEL_134:
  if (SHIBYTE(v265) < 0)
    operator delete(Scalar);
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v121 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v235, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v235, 0, (uint64_t *)&v271);
  v237 = v271;
  if (v271)
  {
    v122 = (std::__shared_weak_count *)operator new();
    v123 = v271;
    v122->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v122->__shared_owners_ = 0;
    v122->__shared_weak_owners_ = 0;
    v122[1].__vftable = v123;
  }
  else
  {
    v122 = 0;
  }
  v238 = v122;
  v271 = 0;
  std::string::basic_string[abi:ne180100]<0>(v233, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v121 + 24))(v121, &v237, v233);
  if (v234 < 0)
    operator delete(v233[0]);
  v124 = v238;
  if (v238)
  {
    v125 = (unint64_t *)&v238->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = v271;
  v271 = 0;
  if (v127)
    (*((void (**)(std::__shared_weak_count_vtbl *))v127->~__shared_weak_count + 1))(v127);
  if (v236 < 0)
    operator delete(v235[0]);
  v128 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v229, "gamma");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v229, 1, (uint64_t *)&v271);
  v231 = v271;
  if (v271)
  {
    v129 = (std::__shared_weak_count *)operator new();
    v130 = v271;
    v129->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v129->__shared_owners_ = 0;
    v129->__shared_weak_owners_ = 0;
    v129[1].__vftable = v130;
  }
  else
  {
    v129 = 0;
  }
  v232 = v129;
  v271 = 0;
  std::string::basic_string[abi:ne180100]<0>(v227, "CONST_TYPE");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v128 + 24))(v128, &v231, v227);
  if (v228 < 0)
    operator delete(v227[0]);
  v131 = v232;
  if (v232)
  {
    v132 = (unint64_t *)&v232->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = v271;
  v271 = 0;
  if (v134)
    (*((void (**)(std::__shared_weak_count_vtbl *))v134->~__shared_weak_count + 1))(v134);
  if (v230 < 0)
    operator delete(v229[0]);
  v135 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v223, "beta");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v223, 1, (uint64_t *)&v271);
  v225 = v271;
  if (v271)
  {
    v136 = (std::__shared_weak_count *)operator new();
    v137 = v271;
    v136->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v136->__shared_owners_ = 0;
    v136->__shared_weak_owners_ = 0;
    v136[1].__vftable = v137;
  }
  else
  {
    v136 = 0;
  }
  v226 = v136;
  v271 = 0;
  std::string::basic_string[abi:ne180100]<0>(v221, "CONST_TYPE");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v135 + 24))(v135, &v225, v221);
  if (v222 < 0)
    operator delete(v221[0]);
  v138 = v226;
  if (v226)
  {
    v139 = (unint64_t *)&v226->__shared_owners_;
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }
  v141 = v271;
  v271 = 0;
  if (v141)
    (*((void (**)(std::__shared_weak_count_vtbl *))v141->~__shared_weak_count + 1))(v141);
  if (v224 < 0)
    operator delete(v223[0]);
  v142 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v217, "epsilon");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v217, 0, (uint64_t *)&v271);
  v219 = v271;
  if (v271)
  {
    v143 = (std::__shared_weak_count *)operator new();
    v144 = v271;
    v143->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v143->__shared_owners_ = 0;
    v143->__shared_weak_owners_ = 0;
    v143[1].__vftable = v144;
  }
  else
  {
    v143 = 0;
  }
  v220 = v143;
  v271 = 0;
  std::string::basic_string[abi:ne180100]<0>(v215, "CONST_TYPE");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v142 + 24))(v142, &v219, v215);
  if (v216 < 0)
    operator delete(v215[0]);
  v145 = v220;
  if (v220)
  {
    v146 = (unint64_t *)&v220->__shared_owners_;
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  v148 = v271;
  v271 = 0;
  if (v148)
    (*((void (**)(std::__shared_weak_count_vtbl *))v148->~__shared_weak_count + 1))(v148);
  if (v218 < 0)
    operator delete(v217[0]);
  v149 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v271);
  v213 = v271;
  if (v271)
  {
    v150 = (std::__shared_weak_count *)operator new();
    v151 = v271;
    v150->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v150->__shared_owners_ = 0;
    v150->__shared_weak_owners_ = 0;
    v150[1].__vftable = v151;
  }
  else
  {
    v150 = 0;
  }
  v214 = v150;
  v271 = 0;
  std::string::basic_string[abi:ne180100]<0>(v211, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v149 + 24))(v149, &v213, v211);
  if (v212 < 0)
    operator delete(v211[0]);
  v152 = v214;
  if (v214)
  {
    v153 = (unint64_t *)&v214->__shared_owners_;
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
    }
  }
  v155 = v271;
  v271 = 0;
  if (v155)
    (*((void (**)(std::__shared_weak_count_vtbl *))v155->~__shared_weak_count + 1))(v155);
  v156 = *a3;
  v209 = Scalar;
  if (Scalar)
  {
    v157 = (std::__shared_weak_count *)operator new();
    v158 = (std::__shared_weak_count_vtbl *)Scalar;
    v157->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v157->__shared_owners_ = 0;
    v157->__shared_weak_owners_ = 0;
    v157[1].__vftable = v158;
  }
  else
  {
    v157 = 0;
  }
  v210 = v157;
  Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v156 + 56))(v156, &v209);
  v159 = v210;
  if (v210)
  {
    v160 = (unint64_t *)&v210->__shared_owners_;
    do
      v161 = __ldaxr(v160);
    while (__stlxr(v161 - 1, v160));
    if (!v161)
    {
      ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
      std::__shared_weak_count::__release_weak(v159);
    }
  }
  v162 = Scalar;
  Scalar = 0;
  if (v162)
    (*(void (**)(void *))(*(_QWORD *)v162 + 8))(v162);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&Scalar);
  v163 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v205, "axes");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v205, 0, (uint64_t *)&v271);
  v207 = v271;
  if (v271)
  {
    v164 = (std::__shared_weak_count *)operator new();
    v165 = v271;
    v164->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v164->__shared_owners_ = 0;
    v164->__shared_weak_owners_ = 0;
    v164[1].__vftable = v165;
  }
  else
  {
    v164 = 0;
  }
  v208 = v164;
  v271 = 0;
  std::string::basic_string[abi:ne180100]<0>(v203, "K");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v163 + 24))(v163, &v207, 0, v203);
  if (v204 < 0)
    operator delete(v203[0]);
  v166 = v208;
  if (v208)
  {
    v167 = (unint64_t *)&v208->__shared_owners_;
    do
      v168 = __ldaxr(v167);
    while (__stlxr(v168 - 1, v167));
    if (!v168)
    {
      ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
      std::__shared_weak_count::__release_weak(v166);
    }
  }
  v169 = v271;
  v271 = 0;
  if (v169)
    (*((void (**)(std::__shared_weak_count_vtbl *))v169->~__shared_weak_count + 1))(v169);
  if (v206 < 0)
    operator delete(v205[0]);
  v170 = *a3;
  v201 = Scalar;
  if (Scalar)
  {
    v171 = (std::__shared_weak_count *)operator new();
    v172 = (std::__shared_weak_count_vtbl *)Scalar;
    v171->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v171->__shared_owners_ = 0;
    v171->__shared_weak_owners_ = 0;
    v171[1].__vftable = v172;
  }
  else
  {
    v171 = 0;
  }
  v202 = v171;
  Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v170 + 56))(v170, &v201);
  v173 = v202;
  if (v202)
  {
    v174 = (unint64_t *)&v202->__shared_owners_;
    do
      v175 = __ldaxr(v174);
    while (__stlxr(v175 - 1, v174));
    if (!v175)
    {
      ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
      std::__shared_weak_count::__release_weak(v173);
    }
  }
  v176 = Scalar;
  Scalar = 0;
  if (v176)
    (*(void (**)(void *))(*(_QWORD *)v176 + 8))(v176);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v177 = __p;
  std::string::basic_string[abi:ne180100]<0>(v197, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v197, 1, (uint64_t *)&v246);
  v199 = v246;
  if (v246)
  {
    v178 = (std::__shared_weak_count *)operator new();
    v179 = (std::__shared_weak_count_vtbl *)v246;
    v178->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v178->__shared_owners_ = 0;
    v178->__shared_weak_owners_ = 0;
    v178[1].__vftable = v179;
  }
  else
  {
    v178 = 0;
  }
  v200 = v178;
  v246 = 0;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v266, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v267, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v268, "int32");
  std::string::basic_string[abi:ne180100]<0>(v269, "int8");
  std::string::basic_string[abi:ne180100]<0>(v270, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&v271, (unsigned __int8 *)&Scalar, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v177 + 24))(v177, &v199, &v271, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v271);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v270[i + 2]) < 0)
      operator delete((void *)v270[i]);
  }
  v181 = v200;
  if (v200)
  {
    v182 = (unint64_t *)&v200->__shared_owners_;
    do
      v183 = __ldaxr(v182);
    while (__stlxr(v183 - 1, v182));
    if (!v183)
    {
      ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
      std::__shared_weak_count::__release_weak(v181);
    }
  }
  v184 = v246;
  v246 = 0;
  if (v184)
    (*(void (**)(void *))(*(_QWORD *)v184 + 8))(v184);
  if (v198 < 0)
    operator delete(v197[0]);
  v185 = *a3;
  v195 = __p;
  if (__p)
  {
    v186 = (std::__shared_weak_count *)operator new();
    v187 = (std::__shared_weak_count_vtbl *)__p;
    v186->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v186->__shared_owners_ = 0;
    v186->__shared_weak_owners_ = 0;
    v186[1].__vftable = v187;
  }
  else
  {
    v186 = 0;
  }
  v196 = v186;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v185 + 56))(v185, &v195);
  v188 = v196;
  if (v196)
  {
    v189 = (unint64_t *)&v196->__shared_owners_;
    do
      v190 = __ldaxr(v189);
    while (__stlxr(v190 - 1, v189));
    if (!v190)
    {
      ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
      std::__shared_weak_count::__release_weak(v188);
    }
  }
  v191 = __p;
  __p = 0;
  if (v191)
    (*(void (**)(void *))(*(_QWORD *)v191 + 8))(v191);
  if (v280)
  {
    v192 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v280);
    MEMORY[0x1E0C023A0](v192, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v253, 0);
  result = (uint64_t)v262;
  if (v262)
  {
    v194 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v262);
    return MEMORY[0x1E0C023A0](v194, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09E17BC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;

  v4 = STACK[0x2A8];
  STACK[0x2A8] = 0;
  if (v4)
    (*(void (**)(unint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 96), 0);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x260], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x2D0], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::LocalResponseNorm::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  unsigned __int8 *v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  unsigned __int8 *v30;
  std::__shared_weak_count_vtbl *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  unsigned __int8 *v36;
  std::__shared_weak_count_vtbl *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  unsigned __int8 *v42;
  std::__shared_weak_count_vtbl *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  char **v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t *v67;
  char *v68;
  char *v69;
  char *v70;
  __int128 v71;
  char *v72;
  char *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  char **v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  _OWORD *v92;
  unsigned __int8 *v93;
  void *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  std::__shared_weak_count_vtbl *v99;
  std::__shared_weak_count *v100;
  std::__shared_weak_count *v101;
  unint64_t *p_shared_owners;
  unint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  void *v107;
  std::__shared_weak_count *v108;
  std::__shared_weak_count_vtbl *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count_vtbl *v113;
  void *v114;
  std::__shared_weak_count *v115;
  std::__shared_weak_count_vtbl *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count_vtbl *v120;
  void *v121;
  std::__shared_weak_count *v122;
  std::__shared_weak_count_vtbl *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count_vtbl *v127;
  void *v128;
  std::__shared_weak_count *v129;
  std::__shared_weak_count_vtbl *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count_vtbl *v134;
  void *v135;
  std::__shared_weak_count *v136;
  std::__shared_weak_count_vtbl *v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count_vtbl *v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  std::__shared_weak_count_vtbl *v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  void *v148;
  void *v149;
  std::__shared_weak_count *v150;
  std::__shared_weak_count_vtbl *v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count_vtbl *v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  std::__shared_weak_count_vtbl *v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  void *v162;
  void *v163;
  std::__shared_weak_count *v164;
  std::__shared_weak_count_vtbl *v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count_vtbl *v169;
  uint64_t v170;
  std::__shared_weak_count *v171;
  std::__shared_weak_count_vtbl *v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  void *v176;
  void *v177;
  std::__shared_weak_count *v178;
  std::__shared_weak_count_vtbl *v179;
  uint64_t i;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  void *v184;
  uint64_t v185;
  std::__shared_weak_count *v186;
  std::__shared_weak_count_vtbl *v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  void *v191;
  uint64_t v192;
  uint64_t result;
  uint64_t v194;
  void *v195;
  std::__shared_weak_count *v196;
  void *v197[2];
  char v198;
  void *v199;
  std::__shared_weak_count *v200;
  void *v201;
  std::__shared_weak_count *v202;
  void *v203[2];
  char v204;
  void *v205[2];
  char v206;
  std::__shared_weak_count_vtbl *v207;
  std::__shared_weak_count *v208;
  void *v209;
  std::__shared_weak_count *v210;
  void *v211[2];
  char v212;
  std::__shared_weak_count_vtbl *v213;
  std::__shared_weak_count *v214;
  void *v215;
  std::__shared_weak_count *v216;
  void *v217[2];
  char v218;
  std::__shared_weak_count_vtbl *v219;
  std::__shared_weak_count *v220;
  void *v221[2];
  char v222;
  void *v223[2];
  char v224;
  std::__shared_weak_count_vtbl *v225;
  std::__shared_weak_count *v226;
  void *v227[2];
  char v228;
  void *v229[2];
  char v230;
  std::__shared_weak_count_vtbl *v231;
  std::__shared_weak_count *v232;
  void *v233[2];
  char v234;
  void *v235[2];
  char v236;
  std::__shared_weak_count_vtbl *v237;
  std::__shared_weak_count *v238;
  void *v239[2];
  char v240;
  void *v241[2];
  char v242;
  std::__shared_weak_count_vtbl *v243;
  std::__shared_weak_count *v244;
  void *v245;
  std::__shared_weak_count *v246;
  __n128 v247;
  __int128 v248;
  __int128 v249;
  void *v250[2];
  uint64_t v251;
  void *v252;
  void *v253;
  _QWORD *v254;
  __n128 v255;
  uint64_t v256;
  uint64_t v257;
  _QWORD *v258;
  char **v259;
  __n128 v260;
  __n128 v261;
  __n128 v262;
  __n128 v263;
  void *__p;
  void *v265;
  _QWORD *v266;
  void *v267;
  void *v268;
  _QWORD *v269;
  __n128 v270;
  _QWORD *v271;
  void *v272;
  uint64_t v273;
  uint64_t v274;
  _QWORD v275[3];
  uint64_t v276[3];
  uint64_t v277[3];
  uint64_t v278[3];
  _QWORD v279[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_get_deleter;
  uint64_t v282;
  _BYTE v283[24];
  _BYTE *v284;
  _BYTE v285[24];
  _BYTE *v286;
  _BYTE v287[24];
  _BYTE *v288;
  uint64_t v289;

  v289 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v271 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (uint64_t)&v10->__get_deleter;
  v282 = (uint64_t)&v10->__get_deleter;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v10->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  v10->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v9;
  Scalar = v10;
  v272 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(0x18uLL);
  v269 = v14 + 3;
  *v14 = v11;
  v14[1] = v12;
  v14[2] = v13;
  v267 = v14;
  v268 = v14 + 3;
  v273 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v267);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(0x18uLL);
  v266 = v18 + 3;
  *v18 = v15;
  v18[1] = v16;
  v18[2] = v17;
  __p = v18;
  v265 = v18 + 3;
  v274 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v272, 3, &v270);
  MIL::IRParameter::Make(&v270, (uint64_t *)&v252);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v252);
  v19 = v252;
  v252 = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = (std::__shared_weak_count *)v270.n128_u64[1];
  if (v270.n128_u64[1])
  {
    v21 = (unint64_t *)(v270.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (__p)
  {
    v265 = __p;
    operator delete(__p);
  }
  if (v267)
  {
    v268 = v267;
    operator delete(v267);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v23 = v271;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v263);
  MIL::IRParameter::Make(&v263, (uint64_t *)&v272);
  v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v23, "size", (uint64_t *)&v272);
  v25 = v272;
  v272 = 0;
  if (v25)
    (*(void (**)(void *))(*(_QWORD *)v25 + 8))(v25);
  v26 = (std::__shared_weak_count *)v263.n128_u64[1];
  if (v263.n128_u64[1])
  {
    v27 = (unint64_t *)(v263.n128_u64[1] + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v24 + 5) + 32))(*((_QWORD *)v24 + 5), 1);
  v29 = v271;
  v272 = (void *)MIL::IRTensorValueType::MakeScalar(a1, 7);
  v273 = MIL::IRTensorValueType::MakeScalar(a1, 4);
  v274 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v272, 3, &v262);
  MIL::IRParameter::Make(&v262, (uint64_t *)&Scalar);
  v30 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v29, "alpha", (uint64_t *)&Scalar);
  v31 = Scalar;
  Scalar = 0;
  if (v31)
    (*((void (**)(std::__shared_weak_count_vtbl *))v31->~__shared_weak_count + 1))(v31);
  v32 = (std::__shared_weak_count *)v262.n128_u64[1];
  if (v262.n128_u64[1])
  {
    v33 = (unint64_t *)(v262.n128_u64[1] + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v30 + 5) + 32))(*((_QWORD *)v30 + 5), 1);
  v35 = v271;
  v272 = (void *)MIL::IRTensorValueType::MakeScalar(a1, 7);
  v273 = MIL::IRTensorValueType::MakeScalar(a1, 4);
  v274 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v272, 3, &v261);
  MIL::IRParameter::Make(&v261, (uint64_t *)&Scalar);
  v36 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v35, "beta", (uint64_t *)&Scalar);
  v37 = Scalar;
  Scalar = 0;
  if (v37)
    (*((void (**)(std::__shared_weak_count_vtbl *))v37->~__shared_weak_count + 1))(v37);
  v38 = (std::__shared_weak_count *)v261.n128_u64[1];
  if (v261.n128_u64[1])
  {
    v39 = (unint64_t *)(v261.n128_u64[1] + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v36 + 5) + 32))(*((_QWORD *)v36 + 5), 1);
  v41 = v271;
  v272 = (void *)MIL::IRTensorValueType::MakeScalar(a1, 7);
  v273 = MIL::IRTensorValueType::MakeScalar(a1, 4);
  v274 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v272, 3, &v260);
  MIL::IRParameter::Make(&v260, (uint64_t *)&Scalar);
  v42 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v41, "k", (uint64_t *)&Scalar);
  v43 = Scalar;
  Scalar = 0;
  if (v43)
    (*((void (**)(std::__shared_weak_count_vtbl *))v43->~__shared_weak_count + 1))(v43);
  v44 = (std::__shared_weak_count *)v260.n128_u64[1];
  if (v260.n128_u64[1])
  {
    v45 = (unint64_t *)(v260.n128_u64[1] + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v42 + 5) + 32))(*((_QWORD *)v42 + 5), 1);
  v259 = 0;
  v47 = operator new();
  *(_QWORD *)v47 = 0;
  *(_QWORD *)(v47 + 8) = 0;
  *(_QWORD *)(v47 + 16) = 0;
  v272 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v259, (void **)v47);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v272, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v259, 1uLL);
  v48 = v259;
  v49 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v50 = operator new(8uLL);
  v267 = v50;
  *v50 = v49;
  v269 = v50 + 1;
  v268 = v50 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v267);
  v51 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v52 = operator new(8uLL);
  __p = v52;
  *v52 = v51;
  v266 = v52 + 1;
  v265 = v52 + 1;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v53 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v54 = operator new(8uLL);
  v252 = v54;
  *v54 = v53;
  v254 = v54 + 1;
  v253 = v54 + 1;
  v282 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v252);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v255);
  MIL::IRParameter::Make(&v255, &v256);
  v55 = v256;
  v257 = v256;
  if (v256)
  {
    v56 = (_QWORD *)operator new();
    v57 = v256;
    *v56 = &unk_1EA99F888;
    v56[1] = 0;
    v56[2] = 0;
    v56[3] = v57;
  }
  else
  {
    v56 = 0;
  }
  v258 = v56;
  v256 = 0;
  v58 = v48[2];
  v59 = v48[1];
  if (v59 >= v58)
  {
    v61 = (v59 - *v48) >> 4;
    v62 = v61 + 1;
    if ((unint64_t)(v61 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v63 = v58 - *v48;
    if (v63 >> 3 > v62)
      v62 = v63 >> 3;
    if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF0)
      v64 = 0xFFFFFFFFFFFFFFFLL;
    else
      v64 = v62;
    v275[1] = v48 + 2;
    v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v48 + 2), v64);
    v67 = (uint64_t *)&v65[16 * v61];
    *v67 = v55;
    v67[1] = (uint64_t)v56;
    v258 = 0;
    v257 = 0;
    v69 = *v48;
    v68 = v48[1];
    if (v68 == *v48)
    {
      v72 = v48[1];
      v70 = &v65[16 * v61];
    }
    else
    {
      v70 = &v65[16 * v61];
      do
      {
        v71 = *((_OWORD *)v68 - 1);
        v68 -= 16;
        *((_OWORD *)v70 - 1) = v71;
        v70 -= 16;
        *(_QWORD *)v68 = 0;
        *((_QWORD *)v68 + 1) = 0;
      }
      while (v68 != v69);
      v72 = *v48;
      v68 = v48[1];
    }
    v60 = (char *)(v67 + 2);
    *v48 = v70;
    v273 = (uint64_t)v72;
    v48[1] = (char *)(v67 + 2);
    v274 = (uint64_t)v68;
    v73 = v48[2];
    v48[2] = &v65[16 * v66];
    v275[0] = v73;
    v272 = v72;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v272);
  }
  else
  {
    *(_QWORD *)v59 = v55;
    *((_QWORD *)v59 + 1) = v56;
    v60 = v59 + 16;
    v258 = 0;
    v257 = 0;
  }
  v48[1] = v60;
  v74 = v256;
  v256 = 0;
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  v75 = (std::__shared_weak_count *)v255.n128_u64[1];
  if (v255.n128_u64[1])
  {
    v76 = (unint64_t *)(v255.n128_u64[1] + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  if (v252)
  {
    v253 = v252;
    operator delete(v252);
  }
  if (__p)
  {
    v265 = __p;
    operator delete(__p);
  }
  if (v267)
  {
    v268 = v267;
    operator delete(v267);
  }
  *(_OWORD *)v250 = *(_OWORD *)a2;
  v251 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v78 = (uint64_t)v271;
  *(_QWORD *)&v249 = v271;
  if (v271)
  {
    v79 = (_QWORD *)operator new();
    *v79 = &unk_1EA99F8E8;
    v79[1] = 0;
    v79[2] = 0;
    v79[3] = v78;
  }
  else
  {
    v79 = 0;
  }
  *((_QWORD *)&v249 + 1) = v79;
  v271 = 0;
  *(_QWORD *)&v248 = v259;
  if (v259)
  {
    v80 = (_QWORD *)operator new();
    v81 = v259;
    *v80 = &unk_1EA99F948;
    v80[1] = 0;
    v80[2] = 0;
    v80[3] = v81;
  }
  else
  {
    v80 = 0;
  }
  *((_QWORD *)&v248 + 1) = v80;
  v259 = 0;
  v288 = 0;
  v286 = 0;
  MIL::IROperator::Make((__int128 *)v250, &v249, &v248, (uint64_t)v287, (uint64_t)v285, a3);
  v82 = v286;
  if (v286 == v285)
  {
    v83 = 4;
    v82 = v285;
  }
  else
  {
    if (!v286)
      goto LABEL_83;
    v83 = 5;
  }
  (*(void (**)(void))(*v82 + 8 * v83))();
LABEL_83:
  v84 = v288;
  if (v288 == v287)
  {
    v85 = 4;
    v84 = v287;
    goto LABEL_87;
  }
  if (v288)
  {
    v85 = 5;
LABEL_87:
    (*(void (**)(void))(*v84 + 8 * v85))();
  }
  v86 = (std::__shared_weak_count *)*((_QWORD *)&v248 + 1);
  if (*((_QWORD *)&v248 + 1))
  {
    v87 = (unint64_t *)(*((_QWORD *)&v248 + 1) + 8);
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = (std::__shared_weak_count *)*((_QWORD *)&v249 + 1);
  if (*((_QWORD *)&v249 + 1))
  {
    v90 = (unint64_t *)(*((_QWORD *)&v249 + 1) + 8);
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  if (SHIBYTE(v251) < 0)
    operator delete(v250[0]);
  v267 = 0;
  v92 = (_OWORD *)operator new();
  *v92 = 0u;
  v92[1] = 0u;
  *((_DWORD *)v92 + 8) = 1065353216;
  v267 = v92;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v247);
  MIL::IRParameter::Make(&v247, (uint64_t *)&v272);
  v93 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v92, "minimum_compute_type", (uint64_t *)&v272);
  v94 = v272;
  v272 = 0;
  if (v94)
    (*(void (**)(void *))(*(_QWORD *)v94 + 8))(v94);
  v95 = (std::__shared_weak_count *)v247.n128_u64[1];
  if (v247.n128_u64[1])
  {
    v96 = (unint64_t *)(v247.n128_u64[1] + 8);
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v93 + 5) + 32))(*((_QWORD *)v93 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v93 + 5) + 48))(*((_QWORD *)v93 + 5), 1);
  v98 = *a3;
  v99 = (std::__shared_weak_count_vtbl *)v267;
  v245 = v267;
  if (v267)
  {
    v100 = (std::__shared_weak_count *)operator new();
    v100->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v100->__shared_owners_ = 0;
    v100->__shared_weak_owners_ = 0;
    v100[1].__vftable = v99;
  }
  else
  {
    v100 = 0;
  }
  v246 = v100;
  v267 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v98 + 184))(v98, &v245);
  v101 = v246;
  if (v246)
  {
    p_shared_owners = (unint64_t *)&v246->__shared_owners_;
    do
      v103 = __ldaxr(p_shared_owners);
    while (__stlxr(v103 - 1, p_shared_owners));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v272, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v272, (uint64_t)v283);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v104 + 200))(v104, v283);
  v105 = v284;
  if (v284 == v283)
  {
    v106 = 4;
    v105 = v283;
  }
  else
  {
    if (!v284)
      goto LABEL_120;
    v106 = 5;
  }
  (*(void (**)(void))(*v105 + 8 * v106))();
LABEL_120:
  if (SHIBYTE(v274) < 0)
    operator delete(v272);
  MIL::Validation::TensorDTypeConstraints::Make(&v272);
  v107 = v272;
  std::string::basic_string[abi:ne180100]<0>(v241, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v241, 0, (uint64_t *)&Scalar);
  v243 = Scalar;
  if (Scalar)
  {
    v108 = (std::__shared_weak_count *)operator new();
    v109 = Scalar;
    v108->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v108->__shared_owners_ = 0;
    v108->__shared_weak_owners_ = 0;
    v108[1].__vftable = v109;
  }
  else
  {
    v108 = 0;
  }
  v244 = v108;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v239, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v107 + 24))(v107, &v243, v239);
  if (v240 < 0)
    operator delete(v239[0]);
  v110 = v244;
  if (v244)
  {
    v111 = (unint64_t *)&v244->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  v113 = Scalar;
  Scalar = 0;
  if (v113)
    (*((void (**)(std::__shared_weak_count_vtbl *))v113->~__shared_weak_count + 1))(v113);
  if (v242 < 0)
    operator delete(v241[0]);
  v114 = v272;
  std::string::basic_string[abi:ne180100]<0>(v235, "alpha");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v235, 0, (uint64_t *)&Scalar);
  v237 = Scalar;
  if (Scalar)
  {
    v115 = (std::__shared_weak_count *)operator new();
    v116 = Scalar;
    v115->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v115->__shared_owners_ = 0;
    v115->__shared_weak_owners_ = 0;
    v115[1].__vftable = v116;
  }
  else
  {
    v115 = 0;
  }
  v238 = v115;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v233, "CONST_TYPE");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v114 + 24))(v114, &v237, v233);
  if (v234 < 0)
    operator delete(v233[0]);
  v117 = v238;
  if (v238)
  {
    v118 = (unint64_t *)&v238->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = Scalar;
  Scalar = 0;
  if (v120)
    (*((void (**)(std::__shared_weak_count_vtbl *))v120->~__shared_weak_count + 1))(v120);
  if (v236 < 0)
    operator delete(v235[0]);
  v121 = v272;
  std::string::basic_string[abi:ne180100]<0>(v229, "beta");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v229, 0, (uint64_t *)&Scalar);
  v231 = Scalar;
  if (Scalar)
  {
    v122 = (std::__shared_weak_count *)operator new();
    v123 = Scalar;
    v122->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v122->__shared_owners_ = 0;
    v122->__shared_weak_owners_ = 0;
    v122[1].__vftable = v123;
  }
  else
  {
    v122 = 0;
  }
  v232 = v122;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v227, "CONST_TYPE");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v121 + 24))(v121, &v231, v227);
  if (v228 < 0)
    operator delete(v227[0]);
  v124 = v232;
  if (v232)
  {
    v125 = (unint64_t *)&v232->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = Scalar;
  Scalar = 0;
  if (v127)
    (*((void (**)(std::__shared_weak_count_vtbl *))v127->~__shared_weak_count + 1))(v127);
  if (v230 < 0)
    operator delete(v229[0]);
  v128 = v272;
  std::string::basic_string[abi:ne180100]<0>(v223, "k");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v223, 0, (uint64_t *)&Scalar);
  v225 = Scalar;
  if (Scalar)
  {
    v129 = (std::__shared_weak_count *)operator new();
    v130 = Scalar;
    v129->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v129->__shared_owners_ = 0;
    v129->__shared_weak_owners_ = 0;
    v129[1].__vftable = v130;
  }
  else
  {
    v129 = 0;
  }
  v226 = v129;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v221, "CONST_TYPE");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v128 + 24))(v128, &v225, v221);
  if (v222 < 0)
    operator delete(v221[0]);
  v131 = v226;
  if (v226)
  {
    v132 = (unint64_t *)&v226->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = Scalar;
  Scalar = 0;
  if (v134)
    (*((void (**)(std::__shared_weak_count_vtbl *))v134->~__shared_weak_count + 1))(v134);
  if (v224 < 0)
    operator delete(v223[0]);
  v135 = v272;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v219 = Scalar;
  if (Scalar)
  {
    v136 = (std::__shared_weak_count *)operator new();
    v137 = Scalar;
    v136->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v136->__shared_owners_ = 0;
    v136->__shared_weak_owners_ = 0;
    v136[1].__vftable = v137;
  }
  else
  {
    v136 = 0;
  }
  v220 = v136;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v217, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v135 + 24))(v135, &v219, v217);
  if (v218 < 0)
    operator delete(v217[0]);
  v138 = v220;
  if (v220)
  {
    v139 = (unint64_t *)&v220->__shared_owners_;
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }
  v141 = Scalar;
  Scalar = 0;
  if (v141)
    (*((void (**)(std::__shared_weak_count_vtbl *))v141->~__shared_weak_count + 1))(v141);
  v142 = *a3;
  v215 = v272;
  if (v272)
  {
    v143 = (std::__shared_weak_count *)operator new();
    v144 = (std::__shared_weak_count_vtbl *)v272;
    v143->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v143->__shared_owners_ = 0;
    v143->__shared_weak_owners_ = 0;
    v143[1].__vftable = v144;
  }
  else
  {
    v143 = 0;
  }
  v216 = v143;
  v272 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v142 + 56))(v142, &v215);
  v145 = v216;
  if (v216)
  {
    v146 = (unint64_t *)&v216->__shared_owners_;
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  v148 = v272;
  v272 = 0;
  if (v148)
    (*(void (**)(void *))(*(_QWORD *)v148 + 8))(v148);
  MIL::Validation::TensorRankValueConstraints::Make(&v272);
  v149 = v272;
  std::string::basic_string[abi:ne180100]<0>(v211, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v211, 0, (uint64_t *)&Scalar);
  v213 = Scalar;
  if (Scalar)
  {
    v150 = (std::__shared_weak_count *)operator new();
    v151 = Scalar;
    v150->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v150->__shared_owners_ = 0;
    v150->__shared_weak_owners_ = 0;
    v150[1].__vftable = v151;
  }
  else
  {
    v150 = 0;
  }
  v214 = v150;
  Scalar = 0;
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))(*(_QWORD *)v149 + 32))(v149, &v213, 3, 5);
  v152 = v214;
  if (v214)
  {
    v153 = (unint64_t *)&v214->__shared_owners_;
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
    }
  }
  v155 = Scalar;
  Scalar = 0;
  if (v155)
    (*((void (**)(std::__shared_weak_count_vtbl *))v155->~__shared_weak_count + 1))(v155);
  if (v212 < 0)
    operator delete(v211[0]);
  v156 = *a3;
  v209 = v272;
  if (v272)
  {
    v157 = (std::__shared_weak_count *)operator new();
    v158 = (std::__shared_weak_count_vtbl *)v272;
    v157->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FC78;
    v157->__shared_owners_ = 0;
    v157->__shared_weak_owners_ = 0;
    v157[1].__vftable = v158;
  }
  else
  {
    v157 = 0;
  }
  v210 = v157;
  v272 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v156 + 56))(v156, &v209);
  v159 = v210;
  if (v210)
  {
    v160 = (unint64_t *)&v210->__shared_owners_;
    do
      v161 = __ldaxr(v160);
    while (__stlxr(v161 - 1, v160));
    if (!v161)
    {
      ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
      std::__shared_weak_count::__release_weak(v159);
    }
  }
  v162 = v272;
  v272 = 0;
  if (v162)
    (*(void (**)(void *))(*(_QWORD *)v162 + 8))(v162);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v272);
  v163 = v272;
  std::string::basic_string[abi:ne180100]<0>(v205, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v205, 0, (uint64_t *)&Scalar);
  v207 = Scalar;
  if (Scalar)
  {
    v164 = (std::__shared_weak_count *)operator new();
    v165 = Scalar;
    v164->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v164->__shared_owners_ = 0;
    v164->__shared_weak_owners_ = 0;
    v164[1].__vftable = v165;
  }
  else
  {
    v164 = 0;
  }
  v208 = v164;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v203, "C");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v163 + 24))(v163, &v207, 1, v203);
  if (v204 < 0)
    operator delete(v203[0]);
  v166 = v208;
  if (v208)
  {
    v167 = (unint64_t *)&v208->__shared_owners_;
    do
      v168 = __ldaxr(v167);
    while (__stlxr(v168 - 1, v167));
    if (!v168)
    {
      ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
      std::__shared_weak_count::__release_weak(v166);
    }
  }
  v169 = Scalar;
  Scalar = 0;
  if (v169)
    (*((void (**)(std::__shared_weak_count_vtbl *))v169->~__shared_weak_count + 1))(v169);
  if (v206 < 0)
    operator delete(v205[0]);
  v170 = *a3;
  v201 = v272;
  if (v272)
  {
    v171 = (std::__shared_weak_count *)operator new();
    v172 = (std::__shared_weak_count_vtbl *)v272;
    v171->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v171->__shared_owners_ = 0;
    v171->__shared_weak_owners_ = 0;
    v171[1].__vftable = v172;
  }
  else
  {
    v171 = 0;
  }
  v202 = v171;
  v272 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v170 + 56))(v170, &v201);
  v173 = v202;
  if (v202)
  {
    v174 = (unint64_t *)&v202->__shared_owners_;
    do
      v175 = __ldaxr(v174);
    while (__stlxr(v175 - 1, v174));
    if (!v175)
    {
      ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
      std::__shared_weak_count::__release_weak(v173);
    }
  }
  v176 = v272;
  v272 = 0;
  if (v176)
    (*(void (**)(void *))(*(_QWORD *)v176 + 8))(v176);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v177 = __p;
  std::string::basic_string[abi:ne180100]<0>(v197, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v197, 1, (uint64_t *)&v252);
  v199 = v252;
  if (v252)
  {
    v178 = (std::__shared_weak_count *)operator new();
    v179 = (std::__shared_weak_count_vtbl *)v252;
    v178->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v178->__shared_owners_ = 0;
    v178->__shared_weak_owners_ = 0;
    v178[1].__vftable = v179;
  }
  else
  {
    v178 = 0;
  }
  v200 = v178;
  v252 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v272, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v275, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v276, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v277, "int32");
  std::string::basic_string[abi:ne180100]<0>(v278, "int8");
  std::string::basic_string[abi:ne180100]<0>(v279, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v272, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v177 + 24))(v177, &v199, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v279[i + 2]) < 0)
      operator delete((void *)v279[i]);
  }
  v181 = v200;
  if (v200)
  {
    v182 = (unint64_t *)&v200->__shared_owners_;
    do
      v183 = __ldaxr(v182);
    while (__stlxr(v183 - 1, v182));
    if (!v183)
    {
      ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
      std::__shared_weak_count::__release_weak(v181);
    }
  }
  v184 = v252;
  v252 = 0;
  if (v184)
    (*(void (**)(void *))(*(_QWORD *)v184 + 8))(v184);
  if (v198 < 0)
    operator delete(v197[0]);
  v185 = *a3;
  v195 = __p;
  if (__p)
  {
    v186 = (std::__shared_weak_count *)operator new();
    v187 = (std::__shared_weak_count_vtbl *)__p;
    v186->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v186->__shared_owners_ = 0;
    v186->__shared_weak_owners_ = 0;
    v186[1].__vftable = v187;
  }
  else
  {
    v186 = 0;
  }
  v196 = v186;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v185 + 56))(v185, &v195);
  v188 = v196;
  if (v196)
  {
    v189 = (unint64_t *)&v196->__shared_owners_;
    do
      v190 = __ldaxr(v189);
    while (__stlxr(v190 - 1, v189));
    if (!v190)
    {
      ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
      std::__shared_weak_count::__release_weak(v188);
    }
  }
  v191 = __p;
  __p = 0;
  if (v191)
    (*(void (**)(void *))(*(_QWORD *)v191 + 8))(v191);
  if (v267)
  {
    v192 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v267);
    MEMORY[0x1E0C023A0](v192, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v259, 0);
  result = (uint64_t)v271;
  if (v271)
  {
    v194 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v271);
    return MEMORY[0x1E0C023A0](v194, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09E36AC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  unint64_t v3;
  uint64_t v4;

  v3 = STACK[0x2E8];
  STACK[0x2E8] = 0;
  if (v3)
    (*(void (**)(unint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x300], 0);
  v4 = *v1;
  *v1 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x2A0], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x328], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::CustomValueTypeInference::ValueTypeInferenceBasePool(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v7 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceBasePool(a1, &v7, a3, a4);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1E09E3E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::BasePool::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count_vtbl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  unsigned __int8 *v28;
  std::__shared_weak_count_vtbl *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  unsigned __int8 *v36;
  std::__shared_weak_count_vtbl *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  unsigned __int8 *v42;
  void *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  unsigned __int8 *v51;
  std::__shared_weak_count_vtbl *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  _QWORD *v56;
  unsigned __int8 *v57;
  void *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  char **v63;
  uint64_t v64;
  std::__shared_weak_count_vtbl *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t *v82;
  char *v83;
  char *v84;
  char *v85;
  __int128 v86;
  char *v87;
  char *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  char **v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  _OWORD *v107;
  unsigned __int8 *v108;
  void *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  std::__shared_weak_count_vtbl *v114;
  std::__shared_weak_count *v115;
  std::__shared_weak_count *v116;
  unint64_t *p_shared_owners;
  unint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  void *v122;
  std::__shared_weak_count *v123;
  std::__shared_weak_count_vtbl *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count_vtbl *v128;
  void *v129;
  std::__shared_weak_count *v130;
  std::__shared_weak_count_vtbl *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count_vtbl *v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  std::__shared_weak_count_vtbl *v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  void *v142;
  void *v143;
  std::__shared_weak_count *v144;
  std::__shared_weak_count_vtbl *v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count_vtbl *v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  std::__shared_weak_count_vtbl *v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  void *v156;
  void *v157;
  std::__shared_weak_count *v158;
  std::__shared_weak_count_vtbl *v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count_vtbl *v163;
  void *v164;
  std::__shared_weak_count *v165;
  std::__shared_weak_count_vtbl *v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count_vtbl *v170;
  void *v171;
  std::__shared_weak_count *v172;
  std::__shared_weak_count_vtbl *v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count_vtbl *v177;
  void *v178;
  std::__shared_weak_count *v179;
  std::__shared_weak_count_vtbl *v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count_vtbl *v184;
  void *v185;
  std::__shared_weak_count *v186;
  std::__shared_weak_count_vtbl *v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  std::__shared_weak_count_vtbl *v191;
  uint64_t v192;
  std::__shared_weak_count *v193;
  std::__shared_weak_count_vtbl *v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  void *v198;
  void *v199;
  std::__shared_weak_count *v200;
  std::__shared_weak_count_vtbl *v201;
  uint64_t i;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  void *v206;
  void *v207;
  std::__shared_weak_count *v208;
  std::__shared_weak_count_vtbl *v209;
  uint64_t j;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  void *v214;
  uint64_t v215;
  std::__shared_weak_count *v216;
  std::__shared_weak_count_vtbl *v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  void *v221;
  uint64_t v222;
  uint64_t result;
  uint64_t v224;
  void *v225;
  std::__shared_weak_count *v226;
  void *v227[2];
  char v228;
  void *v229;
  std::__shared_weak_count *v230;
  void *v231[2];
  char v232;
  void *v233;
  std::__shared_weak_count *v234;
  void *v235;
  std::__shared_weak_count *v236;
  void *v237[2];
  char v238;
  void *v239[2];
  char v240;
  std::__shared_weak_count_vtbl *v241;
  std::__shared_weak_count *v242;
  void *v243[2];
  char v244;
  void *v245[2];
  char v246;
  std::__shared_weak_count_vtbl *v247;
  std::__shared_weak_count *v248;
  void *v249[2];
  char v250;
  void *v251[2];
  char v252;
  std::__shared_weak_count_vtbl *v253;
  std::__shared_weak_count *v254;
  void *v255[2];
  char v256;
  void *v257[2];
  char v258;
  std::__shared_weak_count_vtbl *v259;
  std::__shared_weak_count *v260;
  void *v261[2];
  char v262;
  void *v263[2];
  char v264;
  std::__shared_weak_count_vtbl *v265;
  std::__shared_weak_count *v266;
  void *v267;
  std::__shared_weak_count *v268;
  void *v269[2];
  char v270;
  std::__shared_weak_count_vtbl *v271;
  std::__shared_weak_count *v272;
  void *v273;
  std::__shared_weak_count *v274;
  void *v275[2];
  char v276;
  std::__shared_weak_count_vtbl *v277;
  std::__shared_weak_count *v278;
  void *v279[2];
  char v280;
  void *v281[2];
  char v282;
  std::__shared_weak_count_vtbl *v283;
  std::__shared_weak_count *v284;
  std::__shared_weak_count_vtbl *v285;
  std::__shared_weak_count *v286;
  __n128 v287;
  __int128 v288;
  __int128 v289;
  void *v290[2];
  uint64_t v291;
  void *v292;
  void *v293;
  _QWORD *v294;
  __n128 v295;
  uint64_t v296;
  uint64_t v297;
  _QWORD *v298;
  char **v299;
  __n128 v300;
  __n128 v301;
  __n128 v302;
  __n128 v303;
  __n128 v304;
  void *__p;
  void *v306;
  _QWORD *v307;
  __n128 v308;
  _QWORD *v309;
  void *v310;
  uint64_t v311;
  uint64_t v312;
  _QWORD v313[3];
  _QWORD v314[3];
  _QWORD v315[3];
  uint64_t v316[3];
  _QWORD v317[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_get_deleter;
  uint64_t v320;
  _QWORD v321[3];
  _QWORD *v322;
  _BYTE v323[24];
  _BYTE *v324;
  _QWORD v325[3];
  _QWORD *v326;
  std::__shared_weak_count_vtbl *v327;
  std::__shared_weak_count_vtbl *v328;
  _QWORD *v329;
  uint64_t v330;

  v330 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v309 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (uint64_t)&v12->__get_deleter;
  v320 = (uint64_t)&v12->__get_deleter;
  v12->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v12->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v10;
  v12->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v11;
  Scalar = v12;
  v310 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, 0);
  v15 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v16 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  v328 = (std::__shared_weak_count_vtbl *)&v16->__get_deleter;
  v329 = &v16->__get_deleter;
  v16->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v13;
  v16->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v14;
  v16->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v15;
  v327 = v16;
  v311 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v327);
  v17 = MIL::IRUnknownDimension::Make(a1, 0);
  v18 = MIL::IRUnknownDimension::Make(a1, 0);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(0x18uLL);
  v307 = v20 + 3;
  *v20 = v17;
  v20[1] = v18;
  v20[2] = v19;
  __p = v20;
  v306 = v20 + 3;
  v312 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v310, 3, &v308);
  MIL::IRParameter::Make(&v308, (uint64_t *)&v292);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", (uint64_t *)&v292);
  v21 = v292;
  v292 = 0;
  if (v21)
    (*(void (**)(void *))(*(_QWORD *)v21 + 8))(v21);
  v22 = (std::__shared_weak_count *)v308.n128_u64[1];
  if (v308.n128_u64[1])
  {
    v23 = (unint64_t *)(v308.n128_u64[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (__p)
  {
    v306 = __p;
    operator delete(__p);
  }
  if (v327)
  {
    v328 = v327;
    operator delete(v327);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v25 = v309;
  v26 = MIL::IRUnknownDimension::Make(a1, 0);
  v27 = operator new(8uLL);
  v310 = v27;
  *v27 = v26;
  v312 = (uint64_t)(v27 + 1);
  v311 = (uint64_t)(v27 + 1);
  v327 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v310);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v327, 1, &v304);
  MIL::IRParameter::Make(&v304, (uint64_t *)&Scalar);
  v28 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v25, "kernel_sizes", (uint64_t *)&Scalar);
  v29 = Scalar;
  Scalar = 0;
  if (v29)
    (*((void (**)(std::__shared_weak_count_vtbl *))v29->~__shared_weak_count + 1))(v29);
  v30 = (std::__shared_weak_count *)v304.n128_u64[1];
  if (v304.n128_u64[1])
  {
    v31 = (unint64_t *)(v304.n128_u64[1] + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (v310)
  {
    v311 = (uint64_t)v310;
    operator delete(v310);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v28 + 5) + 32))(*((_QWORD *)v28 + 5), 1);
  v33 = v309;
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = operator new(8uLL);
  v310 = v35;
  *v35 = v34;
  v312 = (uint64_t)(v35 + 1);
  v311 = (uint64_t)(v35 + 1);
  v327 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v310);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v327, 1, &v303);
  MIL::IRParameter::Make(&v303, (uint64_t *)&Scalar);
  v36 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v33, "strides", (uint64_t *)&Scalar);
  v37 = Scalar;
  Scalar = 0;
  if (v37)
    (*((void (**)(std::__shared_weak_count_vtbl *))v37->~__shared_weak_count + 1))(v37);
  v38 = (std::__shared_weak_count *)v303.n128_u64[1];
  if (v303.n128_u64[1])
  {
    v39 = (unint64_t *)(v303.n128_u64[1] + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (v310)
  {
    v311 = (uint64_t)v310;
    operator delete(v310);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v36 + 5) + 32))(*((_QWORD *)v36 + 5), 1);
  v41 = v309;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v302);
  MIL::IRParameter::Make(&v302, (uint64_t *)&v310);
  v42 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v41, "pad_type", (uint64_t *)&v310);
  v43 = v310;
  v310 = 0;
  if (v43)
    (*(void (**)(void *))(*(_QWORD *)v43 + 8))(v43);
  v44 = (std::__shared_weak_count *)v302.n128_u64[1];
  if (v302.n128_u64[1])
  {
    v45 = (unint64_t *)(v302.n128_u64[1] + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v42 + 5) + 32))(*((_QWORD *)v42 + 5), 1);
  v47 = v309;
  v48 = MIL::IRUnknownDimension::Make(a1, 0);
  v49 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v50 = operator new(0x10uLL);
  v312 = (uint64_t)(v50 + 2);
  *v50 = v48;
  v50[1] = v49;
  v310 = v50;
  v311 = (uint64_t)(v50 + 2);
  v327 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v310);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v327, 1, &v301);
  MIL::IRParameter::Make(&v301, (uint64_t *)&Scalar);
  v51 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[4],std::unique_ptr<MIL::IRParameter>>(v47, "pad", (uint64_t *)&Scalar);
  v52 = Scalar;
  Scalar = 0;
  if (v52)
    (*((void (**)(std::__shared_weak_count_vtbl *))v52->~__shared_weak_count + 1))(v52);
  v53 = (std::__shared_weak_count *)v301.n128_u64[1];
  if (v301.n128_u64[1])
  {
    v54 = (unint64_t *)(v301.n128_u64[1] + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  if (v310)
  {
    v311 = (uint64_t)v310;
    operator delete(v310);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v51 + 5) + 32))(*((_QWORD *)v51 + 5), 1);
  v56 = v309;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v300);
  MIL::IRParameter::Make(&v300, (uint64_t *)&v310);
  v57 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v56, "ceil_mode", (uint64_t *)&v310);
  v58 = v310;
  v310 = 0;
  if (v58)
    (*(void (**)(void *))(*(_QWORD *)v58 + 8))(v58);
  v59 = (std::__shared_weak_count *)v300.n128_u64[1];
  if (v300.n128_u64[1])
  {
    v60 = (unint64_t *)(v300.n128_u64[1] + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v57 + 5) + 32))(*((_QWORD *)v57 + 5), 1);
  v299 = 0;
  v62 = operator new();
  *(_QWORD *)v62 = 0;
  *(_QWORD *)(v62 + 8) = 0;
  *(_QWORD *)(v62 + 16) = 0;
  v310 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v299, (void **)v62);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v310, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v299, 1uLL);
  v63 = v299;
  v64 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v65 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v327 = v65;
  v65->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v64;
  v328 = (std::__shared_weak_count_vtbl *)&v65->~__shared_weak_count_0;
  v329 = &v65->~__shared_weak_count_0;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v327);
  v66 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v67 = operator new(8uLL);
  __p = v67;
  *v67 = v66;
  v307 = v67 + 1;
  v306 = v67 + 1;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v68 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v69 = operator new(8uLL);
  v292 = v69;
  *v69 = v68;
  v294 = v69 + 1;
  v293 = v69 + 1;
  v320 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v292);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v295);
  MIL::IRParameter::Make(&v295, &v296);
  v70 = v296;
  v297 = v296;
  if (v296)
  {
    v71 = (_QWORD *)operator new();
    v72 = v296;
    *v71 = &unk_1EA99F888;
    v71[1] = 0;
    v71[2] = 0;
    v71[3] = v72;
  }
  else
  {
    v71 = 0;
  }
  v298 = v71;
  v296 = 0;
  v73 = v63[2];
  v74 = v63[1];
  if (v74 >= v73)
  {
    v76 = (v74 - *v63) >> 4;
    v77 = v76 + 1;
    if ((unint64_t)(v76 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v78 = v73 - *v63;
    if (v78 >> 3 > v77)
      v77 = v78 >> 3;
    if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF0)
      v79 = 0xFFFFFFFFFFFFFFFLL;
    else
      v79 = v77;
    v313[1] = v63 + 2;
    v80 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v63 + 2), v79);
    v82 = (uint64_t *)&v80[16 * v76];
    *v82 = v70;
    v82[1] = (uint64_t)v71;
    v298 = 0;
    v297 = 0;
    v84 = *v63;
    v83 = v63[1];
    if (v83 == *v63)
    {
      v87 = v63[1];
      v85 = &v80[16 * v76];
    }
    else
    {
      v85 = &v80[16 * v76];
      do
      {
        v86 = *((_OWORD *)v83 - 1);
        v83 -= 16;
        *((_OWORD *)v85 - 1) = v86;
        v85 -= 16;
        *(_QWORD *)v83 = 0;
        *((_QWORD *)v83 + 1) = 0;
      }
      while (v83 != v84);
      v87 = *v63;
      v83 = v63[1];
    }
    v75 = (char *)(v82 + 2);
    *v63 = v85;
    v311 = (uint64_t)v87;
    v63[1] = (char *)(v82 + 2);
    v312 = (uint64_t)v83;
    v88 = v63[2];
    v63[2] = &v80[16 * v81];
    v313[0] = v88;
    v310 = v87;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v310);
  }
  else
  {
    *(_QWORD *)v74 = v70;
    *((_QWORD *)v74 + 1) = v71;
    v75 = v74 + 16;
    v298 = 0;
    v297 = 0;
  }
  v63[1] = v75;
  v89 = v296;
  v296 = 0;
  if (v89)
    (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
  v90 = (std::__shared_weak_count *)v295.n128_u64[1];
  if (v295.n128_u64[1])
  {
    v91 = (unint64_t *)(v295.n128_u64[1] + 8);
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  if (v292)
  {
    v293 = v292;
    operator delete(v292);
  }
  if (__p)
  {
    v306 = __p;
    operator delete(__p);
  }
  if (v327)
  {
    v328 = v327;
    operator delete(v327);
  }
  *(_OWORD *)v290 = *(_OWORD *)a2;
  v291 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v93 = (uint64_t)v309;
  *(_QWORD *)&v289 = v309;
  if (v309)
  {
    v94 = (_QWORD *)operator new();
    *v94 = &unk_1EA99F8E8;
    v94[1] = 0;
    v94[2] = 0;
    v94[3] = v93;
  }
  else
  {
    v94 = 0;
  }
  *((_QWORD *)&v289 + 1) = v94;
  v309 = 0;
  *(_QWORD *)&v288 = v299;
  if (v299)
  {
    v95 = (_QWORD *)operator new();
    v96 = v299;
    *v95 = &unk_1EA99F948;
    v95[1] = 0;
    v95[2] = 0;
    v95[3] = v96;
  }
  else
  {
    v95 = 0;
  }
  *((_QWORD *)&v288 + 1) = v95;
  v299 = 0;
  if (*(_QWORD *)(a3 + 24))
  {
    std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v325, a3);
  }
  else
  {
    v325[0] = &unk_1EA99FAC8;
    v325[1] = MIL::Operators::Common::ios18::CustomValidators::ValidateBasePool;
    v326 = v325;
  }
  v324 = 0;
  MIL::IROperator::Make((__int128 *)v290, &v289, &v288, (uint64_t)v325, (uint64_t)v323, a4);
  v97 = v324;
  if (v324 == v323)
  {
    v98 = 4;
    v97 = v323;
  }
  else
  {
    if (!v324)
      goto LABEL_99;
    v98 = 5;
  }
  (*(void (**)(void))(*v97 + 8 * v98))();
LABEL_99:
  v99 = v326;
  if (v326 == v325)
  {
    v100 = 4;
    v99 = v325;
    goto LABEL_103;
  }
  if (v326)
  {
    v100 = 5;
LABEL_103:
    (*(void (**)(void))(*v99 + 8 * v100))();
  }
  v101 = (std::__shared_weak_count *)*((_QWORD *)&v288 + 1);
  if (*((_QWORD *)&v288 + 1))
  {
    v102 = (unint64_t *)(*((_QWORD *)&v288 + 1) + 8);
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = (std::__shared_weak_count *)*((_QWORD *)&v289 + 1);
  if (*((_QWORD *)&v289 + 1))
  {
    v105 = (unint64_t *)(*((_QWORD *)&v289 + 1) + 8);
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  if (SHIBYTE(v291) < 0)
    operator delete(v290[0]);
  v327 = 0;
  v107 = (_OWORD *)operator new();
  *v107 = 0u;
  v107[1] = 0u;
  *((_DWORD *)v107 + 8) = 1065353216;
  v327 = (std::__shared_weak_count_vtbl *)v107;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v287);
  MIL::IRParameter::Make(&v287, (uint64_t *)&v310);
  v108 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v107, "minimum_compute_type", (uint64_t *)&v310);
  v109 = v310;
  v310 = 0;
  if (v109)
    (*(void (**)(void *))(*(_QWORD *)v109 + 8))(v109);
  v110 = (std::__shared_weak_count *)v287.n128_u64[1];
  if (v287.n128_u64[1])
  {
    v111 = (unint64_t *)(v287.n128_u64[1] + 8);
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v108 + 5) + 32))(*((_QWORD *)v108 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v108 + 5) + 48))(*((_QWORD *)v108 + 5), 1);
  v113 = *a4;
  v114 = v327;
  v285 = v327;
  if (v327)
  {
    v115 = (std::__shared_weak_count *)operator new();
    v115->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v115->__shared_owners_ = 0;
    v115->__shared_weak_owners_ = 0;
    v115[1].__vftable = v114;
  }
  else
  {
    v115 = 0;
  }
  v286 = v115;
  v327 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v113 + 184))(v113, &v285);
  v116 = v286;
  if (v286)
  {
    p_shared_owners = (unint64_t *)&v286->__shared_owners_;
    do
      v118 = __ldaxr(p_shared_owners);
    while (__stlxr(v118 - 1, p_shared_owners));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = *a4;
  v321[0] = &off_1EA99FBD8;
  v321[1] = MIL::Operators::Common::ios18::CustomValueTypeInference::ValueTypeInferenceBasePool;
  v322 = v321;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v119 + 200))(v119, v321);
  v120 = v322;
  if (v322 == v321)
  {
    v121 = 4;
    v120 = v321;
  }
  else
  {
    if (!v322)
      goto LABEL_136;
    v121 = 5;
  }
  (*(void (**)(void))(*v120 + 8 * v121))();
LABEL_136:
  MIL::Validation::TensorDTypeConstraints::Make(&v310);
  v122 = v310;
  std::string::basic_string[abi:ne180100]<0>(v281, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v281, 0, (uint64_t *)&Scalar);
  v283 = Scalar;
  if (Scalar)
  {
    v123 = (std::__shared_weak_count *)operator new();
    v124 = Scalar;
    v123->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v123->__shared_owners_ = 0;
    v123->__shared_weak_owners_ = 0;
    v123[1].__vftable = v124;
  }
  else
  {
    v123 = 0;
  }
  v284 = v123;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v279, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v122 + 24))(v122, &v283, v279);
  if (v280 < 0)
    operator delete(v279[0]);
  v125 = v284;
  if (v284)
  {
    v126 = (unint64_t *)&v284->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  v128 = Scalar;
  Scalar = 0;
  if (v128)
    (*((void (**)(std::__shared_weak_count_vtbl *))v128->~__shared_weak_count + 1))(v128);
  if (v282 < 0)
    operator delete(v281[0]);
  v129 = v310;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v277 = Scalar;
  if (Scalar)
  {
    v130 = (std::__shared_weak_count *)operator new();
    v131 = Scalar;
    v130->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v130->__shared_owners_ = 0;
    v130->__shared_weak_owners_ = 0;
    v130[1].__vftable = v131;
  }
  else
  {
    v130 = 0;
  }
  v278 = v130;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v275, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v129 + 24))(v129, &v277, v275);
  if (v276 < 0)
    operator delete(v275[0]);
  v132 = v278;
  if (v278)
  {
    v133 = (unint64_t *)&v278->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  v135 = Scalar;
  Scalar = 0;
  if (v135)
    (*((void (**)(std::__shared_weak_count_vtbl *))v135->~__shared_weak_count + 1))(v135);
  v136 = *a4;
  v273 = v310;
  if (v310)
  {
    v137 = (std::__shared_weak_count *)operator new();
    v138 = (std::__shared_weak_count_vtbl *)v310;
    v137->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v137->__shared_owners_ = 0;
    v137->__shared_weak_owners_ = 0;
    v137[1].__vftable = v138;
  }
  else
  {
    v137 = 0;
  }
  v274 = v137;
  v310 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v136 + 56))(v136, &v273);
  v139 = v274;
  if (v274)
  {
    v140 = (unint64_t *)&v274->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  v142 = v310;
  v310 = 0;
  if (v142)
    (*(void (**)(void *))(*(_QWORD *)v142 + 8))(v142);
  MIL::Validation::TensorRankValueConstraints::Make(&v310);
  v143 = v310;
  std::string::basic_string[abi:ne180100]<0>(v269, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v269, 0, (uint64_t *)&Scalar);
  v271 = Scalar;
  if (Scalar)
  {
    v144 = (std::__shared_weak_count *)operator new();
    v145 = Scalar;
    v144->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v144->__shared_owners_ = 0;
    v144->__shared_weak_owners_ = 0;
    v144[1].__vftable = v145;
  }
  else
  {
    v144 = 0;
  }
  v272 = v144;
  Scalar = 0;
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))(*(_QWORD *)v143 + 32))(v143, &v271, 3, 5);
  v146 = v272;
  if (v272)
  {
    v147 = (unint64_t *)&v272->__shared_owners_;
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  v149 = Scalar;
  Scalar = 0;
  if (v149)
    (*((void (**)(std::__shared_weak_count_vtbl *))v149->~__shared_weak_count + 1))(v149);
  if (v270 < 0)
    operator delete(v269[0]);
  v150 = *a4;
  v267 = v310;
  if (v310)
  {
    v151 = (std::__shared_weak_count *)operator new();
    v152 = (std::__shared_weak_count_vtbl *)v310;
    v151->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FC78;
    v151->__shared_owners_ = 0;
    v151->__shared_weak_owners_ = 0;
    v151[1].__vftable = v152;
  }
  else
  {
    v151 = 0;
  }
  v268 = v151;
  v310 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v150 + 56))(v150, &v267);
  v153 = v268;
  if (v268)
  {
    v154 = (unint64_t *)&v268->__shared_owners_;
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
      std::__shared_weak_count::__release_weak(v153);
    }
  }
  v156 = v310;
  v310 = 0;
  if (v156)
    (*(void (**)(void *))(*(_QWORD *)v156 + 8))(v156);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v310);
  v157 = v310;
  std::string::basic_string[abi:ne180100]<0>(v263, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v263, 0, (uint64_t *)&Scalar);
  v265 = Scalar;
  if (Scalar)
  {
    v158 = (std::__shared_weak_count *)operator new();
    v159 = Scalar;
    v158->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v158->__shared_owners_ = 0;
    v158->__shared_weak_owners_ = 0;
    v158[1].__vftable = v159;
  }
  else
  {
    v158 = 0;
  }
  v266 = v158;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v261, "C_in");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v157 + 24))(v157, &v265, 1, v261);
  if (v262 < 0)
    operator delete(v261[0]);
  v160 = v266;
  if (v266)
  {
    v161 = (unint64_t *)&v266->__shared_owners_;
    do
      v162 = __ldaxr(v161);
    while (__stlxr(v162 - 1, v161));
    if (!v162)
    {
      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
      std::__shared_weak_count::__release_weak(v160);
    }
  }
  v163 = Scalar;
  Scalar = 0;
  if (v163)
    (*((void (**)(std::__shared_weak_count_vtbl *))v163->~__shared_weak_count + 1))(v163);
  if (v264 < 0)
    operator delete(v263[0]);
  v164 = v310;
  std::string::basic_string[abi:ne180100]<0>(v257, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v257, 0, (uint64_t *)&Scalar);
  v259 = Scalar;
  if (Scalar)
  {
    v165 = (std::__shared_weak_count *)operator new();
    v166 = Scalar;
    v165->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v165->__shared_owners_ = 0;
    v165->__shared_weak_owners_ = 0;
    v165[1].__vftable = v166;
  }
  else
  {
    v165 = 0;
  }
  v260 = v165;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v255, "S");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, uint64_t, void **))(*(_QWORD *)v164 + 32))(v164, &v259, 2, -1, v255);
  if (v256 < 0)
    operator delete(v255[0]);
  v167 = v260;
  if (v260)
  {
    v168 = (unint64_t *)&v260->__shared_owners_;
    do
      v169 = __ldaxr(v168);
    while (__stlxr(v169 - 1, v168));
    if (!v169)
    {
      ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
      std::__shared_weak_count::__release_weak(v167);
    }
  }
  v170 = Scalar;
  Scalar = 0;
  if (v170)
    (*((void (**)(std::__shared_weak_count_vtbl *))v170->~__shared_weak_count + 1))(v170);
  if (v258 < 0)
    operator delete(v257[0]);
  v171 = v310;
  std::string::basic_string[abi:ne180100]<0>(v251, "kernel_sizes");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v251, 0, (uint64_t *)&Scalar);
  v253 = Scalar;
  if (Scalar)
  {
    v172 = (std::__shared_weak_count *)operator new();
    v173 = Scalar;
    v172->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v172->__shared_owners_ = 0;
    v172->__shared_weak_owners_ = 0;
    v172[1].__vftable = v173;
  }
  else
  {
    v172 = 0;
  }
  v254 = v172;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v249, "S");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v171 + 24))(v171, &v253, 0, v249);
  if (v250 < 0)
    operator delete(v249[0]);
  v174 = v254;
  if (v254)
  {
    v175 = (unint64_t *)&v254->__shared_owners_;
    do
      v176 = __ldaxr(v175);
    while (__stlxr(v176 - 1, v175));
    if (!v176)
    {
      ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
      std::__shared_weak_count::__release_weak(v174);
    }
  }
  v177 = Scalar;
  Scalar = 0;
  if (v177)
    (*((void (**)(std::__shared_weak_count_vtbl *))v177->~__shared_weak_count + 1))(v177);
  if (v252 < 0)
    operator delete(v251[0]);
  v178 = v310;
  std::string::basic_string[abi:ne180100]<0>(v245, "strides");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v245, 0, (uint64_t *)&Scalar);
  v247 = Scalar;
  if (Scalar)
  {
    v179 = (std::__shared_weak_count *)operator new();
    v180 = Scalar;
    v179->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v179->__shared_owners_ = 0;
    v179->__shared_weak_owners_ = 0;
    v179[1].__vftable = v180;
  }
  else
  {
    v179 = 0;
  }
  v248 = v179;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v243, "S");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v178 + 24))(v178, &v247, 0, v243);
  if (v244 < 0)
    operator delete(v243[0]);
  v181 = v248;
  if (v248)
  {
    v182 = (unint64_t *)&v248->__shared_owners_;
    do
      v183 = __ldaxr(v182);
    while (__stlxr(v183 - 1, v182));
    if (!v183)
    {
      ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
      std::__shared_weak_count::__release_weak(v181);
    }
  }
  v184 = Scalar;
  Scalar = 0;
  if (v184)
    (*((void (**)(std::__shared_weak_count_vtbl *))v184->~__shared_weak_count + 1))(v184);
  if (v246 < 0)
    operator delete(v245[0]);
  v185 = v310;
  std::string::basic_string[abi:ne180100]<0>(v239, "pad");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v239, 0, (uint64_t *)&Scalar);
  v241 = Scalar;
  if (Scalar)
  {
    v186 = (std::__shared_weak_count *)operator new();
    v187 = Scalar;
    v186->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v186->__shared_owners_ = 0;
    v186->__shared_weak_owners_ = 0;
    v186[1].__vftable = v187;
  }
  else
  {
    v186 = 0;
  }
  v242 = v186;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v237, "D");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v185 + 24))(v185, &v241, 0, v237);
  if (v238 < 0)
    operator delete(v237[0]);
  v188 = v242;
  if (v242)
  {
    v189 = (unint64_t *)&v242->__shared_owners_;
    do
      v190 = __ldaxr(v189);
    while (__stlxr(v190 - 1, v189));
    if (!v190)
    {
      ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
      std::__shared_weak_count::__release_weak(v188);
    }
  }
  v191 = Scalar;
  Scalar = 0;
  if (v191)
    (*((void (**)(std::__shared_weak_count_vtbl *))v191->~__shared_weak_count + 1))(v191);
  if (v240 < 0)
    operator delete(v239[0]);
  v192 = *a4;
  v235 = v310;
  if (v310)
  {
    v193 = (std::__shared_weak_count *)operator new();
    v194 = (std::__shared_weak_count_vtbl *)v310;
    v193->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v193->__shared_owners_ = 0;
    v193->__shared_weak_owners_ = 0;
    v193[1].__vftable = v194;
  }
  else
  {
    v193 = 0;
  }
  v236 = v193;
  v310 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v192 + 56))(v192, &v235);
  v195 = v236;
  if (v236)
  {
    v196 = (unint64_t *)&v236->__shared_owners_;
    do
      v197 = __ldaxr(v196);
    while (__stlxr(v197 - 1, v196));
    if (!v197)
    {
      ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
      std::__shared_weak_count::__release_weak(v195);
    }
  }
  v198 = v310;
  v310 = 0;
  if (v198)
    (*(void (**)(void *))(*(_QWORD *)v198 + 8))(v198);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v199 = __p;
  std::string::basic_string[abi:ne180100]<0>(v231, "pad_type");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v231, 0, (uint64_t *)&v292);
  v233 = v292;
  if (v292)
  {
    v200 = (std::__shared_weak_count *)operator new();
    v201 = (std::__shared_weak_count_vtbl *)v292;
    v200->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v200->__shared_owners_ = 0;
    v200->__shared_weak_owners_ = 0;
    v200[1].__vftable = v201;
  }
  else
  {
    v200 = 0;
  }
  v234 = v200;
  v292 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v310, "custom");
  std::string::basic_string[abi:ne180100]<0>(v313, "same");
  std::string::basic_string[abi:ne180100]<0>(v314, "same_lower");
  std::string::basic_string[abi:ne180100]<0>(v315, "valid");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v310, 4);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v199 + 24))(v199, &v233, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v315[i + 2]) < 0)
      operator delete((void *)v315[i]);
  }
  v203 = v234;
  if (v234)
  {
    v204 = (unint64_t *)&v234->__shared_owners_;
    do
      v205 = __ldaxr(v204);
    while (__stlxr(v205 - 1, v204));
    if (!v205)
    {
      ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
      std::__shared_weak_count::__release_weak(v203);
    }
  }
  v206 = v292;
  v292 = 0;
  if (v206)
    (*(void (**)(void *))(*(_QWORD *)v206 + 8))(v206);
  if (v232 < 0)
    operator delete(v231[0]);
  v207 = __p;
  std::string::basic_string[abi:ne180100]<0>(v227, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v227, 1, (uint64_t *)&v292);
  v229 = v292;
  if (v292)
  {
    v208 = (std::__shared_weak_count *)operator new();
    v209 = (std::__shared_weak_count_vtbl *)v292;
    v208->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v208->__shared_owners_ = 0;
    v208->__shared_weak_owners_ = 0;
    v208[1].__vftable = v209;
  }
  else
  {
    v208 = 0;
  }
  v230 = v208;
  v292 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v310, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v313, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v314, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v315, "int32");
  std::string::basic_string[abi:ne180100]<0>(v316, "int8");
  std::string::basic_string[abi:ne180100]<0>(v317, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v310, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v207 + 24))(v207, &v229, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -18; j -= 3)
  {
    if (SHIBYTE(v317[j + 2]) < 0)
      operator delete((void *)v317[j]);
  }
  v211 = v230;
  if (v230)
  {
    v212 = (unint64_t *)&v230->__shared_owners_;
    do
      v213 = __ldaxr(v212);
    while (__stlxr(v213 - 1, v212));
    if (!v213)
    {
      ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
      std::__shared_weak_count::__release_weak(v211);
    }
  }
  v214 = v292;
  v292 = 0;
  if (v214)
    (*(void (**)(void *))(*(_QWORD *)v214 + 8))(v214);
  if (v228 < 0)
    operator delete(v227[0]);
  v215 = *a4;
  v225 = __p;
  if (__p)
  {
    v216 = (std::__shared_weak_count *)operator new();
    v217 = (std::__shared_weak_count_vtbl *)__p;
    v216->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v216->__shared_owners_ = 0;
    v216->__shared_weak_owners_ = 0;
    v216[1].__vftable = v217;
  }
  else
  {
    v216 = 0;
  }
  v226 = v216;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v215 + 56))(v215, &v225);
  v218 = v226;
  if (v226)
  {
    v219 = (unint64_t *)&v226->__shared_owners_;
    do
      v220 = __ldaxr(v219);
    while (__stlxr(v220 - 1, v219));
    if (!v220)
    {
      ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
      std::__shared_weak_count::__release_weak(v218);
    }
  }
  v221 = __p;
  __p = 0;
  if (v221)
    (*(void (**)(void *))(*(_QWORD *)v221 + 8))(v221);
  if (v327)
  {
    v222 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v327);
    MEMORY[0x1E0C023A0](v222, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v299, 0);
  result = (uint64_t)v309;
  if (v309)
  {
    v224 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v309);
    return MEMORY[0x1E0C023A0](v224, 0x10A0C408EF24B1CLL);
  }
  return result;
}

