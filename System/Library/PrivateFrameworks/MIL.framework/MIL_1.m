void std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(std::basic_regex<char> *this)
{
  uint64_t v2;
  unsigned int v3;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if ((this->__flags_ & 2) == 0)
  {
    v2 = operator new();
    v3 = this->__marked_count_ + 1;
    this->__marked_count_ = v3;
    end = this->__end_;
    first = end->__first_;
    *(_QWORD *)v2 = &unk_1EA999ED0;
    *(_QWORD *)(v2 + 8) = first;
    *(_DWORD *)(v2 + 16) = v3;
    end->__first_ = (std::__node<char> *)v2;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
  }
}

void std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(std::basic_regex<char> *this, unsigned int a2)
{
  uint64_t v4;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if ((this->__flags_ & 2) == 0)
  {
    v4 = operator new();
    end = this->__end_;
    first = end->__first_;
    *(_QWORD *)v4 = &unk_1EA999F18;
    *(_QWORD *)(v4 + 8) = first;
    *(_DWORD *)(v4 + 16) = a2;
    end->__first_ = (std::__node<char> *)v4;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1E0C01FC8](exception, 11);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1E05D6FEC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_BYTE *std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v3;
  int v4;
  BOOL v5;

  v3 = a2;
  if (a2 != a3)
  {
    v4 = (char)*a2;
    v5 = (v4 - 36) > 0x3A || ((1 << (*a2 - 36)) & 0x7800000080004F1) == 0;
    if (v5 && (v4 - 123) >= 3)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v4);
      ++v3;
    }
  }
  return v3;
}

void (__cdecl ***std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1E0C023A0);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1E0C01FC8](exception, 3);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1E05D7140(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_decimal_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  int v4;
  unsigned int v5;
  int v6;

  v3 = a2;
  if (a2 != a3)
  {
    v4 = *a2;
    v5 = v4 - 48;
    if (v4 == 48)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
      return ++v3;
    }
    if ((v4 - 49) > 8)
      return v3;
    if (++v3 == a3)
    {
      v3 = a3;
    }
    else
    {
      while (1)
      {
        v6 = *v3;
        if ((v6 - 48) > 9)
          break;
        if (v5 >= 0x19999999)
          goto LABEL_16;
        ++v3;
        v5 = v6 + 10 * v5 - 48;
        if (v3 == a3)
        {
          v3 = a3;
          break;
        }
      }
      if (!v5)
        goto LABEL_16;
    }
    if (v5 <= a1->__marked_count_)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(a1, v5);
      return v3;
    }
LABEL_16:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  return v3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  char *v3;
  int v4;
  BOOL v5;
  BOOL v6;
  std::__bracket_expression<char, std::regex_traits<char>> *started;
  int v8;
  BOOL v9;
  std::__bracket_expression<char, std::regex_traits<char>> *v10;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v4 = *a2;
  if (v4 > 99)
  {
    if (v4 == 119)
    {
      v5 = 0;
      goto LABEL_15;
    }
    if (v4 == 115)
    {
      v9 = 0;
      goto LABEL_17;
    }
    if (v4 != 100)
      return v3;
    v6 = 0;
LABEL_12:
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(a1, v6);
    v8 = started->__mask_ | 0x400;
LABEL_18:
    started->__mask_ = v8;
    goto LABEL_19;
  }
  switch(v4)
  {
    case 'D':
      v6 = 1;
      goto LABEL_12;
    case 'S':
      v9 = 1;
LABEL_17:
      started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(a1, v9);
      v8 = started->__mask_ | 0x4000;
      goto LABEL_18;
    case 'W':
      v5 = 1;
LABEL_15:
      v10 = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(a1, v5);
      v10->__mask_ |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v10, 95);
LABEL_19:
      ++v3;
      break;
  }
  return v3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4)
{
  std::basic_regex<char> *v4;
  int locale_low;
  char v6;
  std::string *v7;
  std::basic_regex<char>::value_type locale;
  int v9;
  int v10;
  char v11;
  int v12;
  char v13;
  int v14;
  char v15;
  std::string::value_type v16;
  unsigned int v17;
  std::string::value_type v18;

  v4 = this;
  if (this != a3)
  {
    locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
    if (locale_low > 109)
    {
      v6 = 0;
      switch(LOBYTE(this->__traits_.__loc_.__locale_))
      {
        case 'n':
          if (a4)
          {
            v7 = a4;
            locale = 10;
            goto LABEL_52;
          }
          locale = 10;
          goto LABEL_61;
        case 'r':
          if (a4)
          {
            v7 = a4;
            locale = 13;
            goto LABEL_52;
          }
          locale = 13;
          goto LABEL_61;
        case 't':
          if (a4)
          {
            v7 = a4;
            locale = 9;
            goto LABEL_52;
          }
          locale = 9;
          goto LABEL_61;
        case 'u':
          if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3)
            goto LABEL_66;
          v9 = BYTE1(this->__traits_.__loc_.__locale_);
          if ((v9 & 0xF8) != 0x30 && (v9 & 0xFE) != 0x38 && (v9 | 0x20u) - 97 >= 6)
            goto LABEL_66;
          v4 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2);
          if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) == a3)
            goto LABEL_66;
          v10 = LOBYTE(v4->__traits_.__loc_.__locale_);
          v11 = -48;
          if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38)
            goto LABEL_24;
          v10 |= 0x20u;
          if ((v10 - 97) >= 6)
            goto LABEL_66;
          v11 = -87;
LABEL_24:
          v6 = 16 * (v11 + v10);
LABEL_25:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 1) == a3)
            goto LABEL_66;
          v12 = BYTE1(v4->__traits_.__loc_.__locale_);
          v13 = -48;
          if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38)
            goto LABEL_30;
          v12 |= 0x20u;
          if ((v12 - 97) >= 6)
            goto LABEL_66;
          v13 = -87;
LABEL_30:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 2) == a3)
            goto LABEL_66;
          v14 = BYTE2(v4->__traits_.__loc_.__locale_);
          v15 = -48;
          if ((v14 & 0xF8) == 0x30 || (v14 & 0xFE) == 0x38)
            goto LABEL_35;
          v14 |= 0x20u;
          if ((v14 - 97) >= 6)
            goto LABEL_66;
          v15 = -87;
LABEL_35:
          v16 = v15 + v14 + 16 * (v13 + v12 + v6);
          if (a4)
            std::string::operator=(a4, v16);
          else
            std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v16);
          return (std::basic_regex<char> *)((char *)v4 + 3);
        case 'v':
          if (a4)
          {
            v7 = a4;
            locale = 11;
            goto LABEL_52;
          }
          locale = 11;
          break;
        case 'x':
          goto LABEL_25;
        default:
          goto LABEL_47;
      }
      goto LABEL_61;
    }
    if (locale_low == 48)
    {
      if (a4)
      {
        v7 = a4;
        locale = 0;
        goto LABEL_52;
      }
      locale = 0;
LABEL_61:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, locale);
      return (std::basic_regex<char> *)((char *)v4 + 1);
    }
    if (locale_low != 99)
    {
      if (locale_low == 102)
      {
        if (a4)
        {
          v7 = a4;
          locale = 12;
LABEL_52:
          std::string::operator=(v7, locale);
          return (std::basic_regex<char> *)((char *)v4 + 1);
        }
        locale = 12;
        goto LABEL_61;
      }
LABEL_47:
      if (LOBYTE(this->__traits_.__loc_.__locale_) != 95
        && ((locale_low & 0x80) != 0
         || (a1->__traits_.__ct_->__tab_[LOBYTE(this->__traits_.__loc_.__locale_)] & 0x500) == 0))
      {
        locale = (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_;
        if (a4)
        {
          v7 = a4;
          goto LABEL_52;
        }
        goto LABEL_61;
      }
LABEL_66:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3)
      goto LABEL_66;
    if (SBYTE1(this->__traits_.__loc_.__locale_) < 65)
      goto LABEL_66;
    v17 = BYTE1(this->__traits_.__loc_.__locale_);
    if (v17 >= 0x5B && (v17 - 97) > 0x19u)
      goto LABEL_66;
    v18 = v17 & 0x1F;
    if (a4)
      std::string::operator=(a4, v18);
    else
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v18);
    return (std::basic_regex<char> *)((char *)v4 + 2);
  }
  return v4;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  uint64_t v2;
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  uint64_t v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  uint64_t v8;
  std::__node<char> *first;

  v2 = __c;
  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = operator new();
    std::__match_char_icase<char,std::regex_traits<char>>::__match_char_icase[abi:ne180100](v8, (uint64_t)this, v2, (uint64_t)this->__end_->__first_);
LABEL_6:
    this->__end_->__first_ = (std::__node<char> *)v8;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = operator new();
    first = this->__end_->__first_;
    *(_QWORD *)v8 = &unk_1EA999D20;
    *(_QWORD *)(v8 + 8) = first;
    std::locale::locale((std::locale *)(v8 + 16), &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    *(_BYTE *)(v8 + 40) = v2;
    goto LABEL_6;
  }
  v5 = operator new();
  end = this->__end_;
  v7 = end->__first_;
  *(_QWORD *)v5 = &unk_1EA999D68;
  *(_QWORD *)(v5 + 8) = v7;
  *(_BYTE *)(v5 + 16) = v2;
  end->__first_ = (std::__node<char> *)v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void sub_1E05D76B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1E0C023A0](v1, 0x10E1C4010F5D982);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1E0C01FC8](exception, 4);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1E05D770C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  uint64_t v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  std::locale *v8;
  std::locale *v9;
  std::__node<char> *first;
  char *v11;

  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    first = this->__end_->__first_;
LABEL_6:
    v8->__locale_ = (std::locale::__imp *)(v11 + 16);
    v8[1].__locale_ = (std::locale::__imp *)first;
    std::locale::locale(v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)&v9[3].__locale_ = *(_OWORD *)&this->__traits_.__ct_;
    LODWORD(v9[5].__locale_) = __i;
    this->__end_->__first_ = (std::__node<char> *)v9;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    first = this->__end_->__first_;
    goto LABEL_6;
  }
  v5 = operator new();
  end = this->__end_;
  v7 = end->__first_;
  *(_QWORD *)v5 = &unk_1EA999E40;
  *(_QWORD *)(v5 + 8) = v7;
  *(_DWORD *)(v5 + 16) = __i;
  end->__first_ = (std::__node<char> *)v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__match_char_icase[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)a1 = &unk_1EA999CD8;
  *(_QWORD *)(a1 + 8) = a4;
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 40) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), a3);
  return a1;
}

void sub_1E05D7888(_Unwind_Exception *a1)
{
  void (__cdecl ***v1)(std::__owns_one_state<char> *__hidden);
  std::locale *v2;
  void (__cdecl **v4)(std::__owns_one_state<char> *__hidden);

  std::locale::~locale(v2);
  v4 = v1[1];
  if (v4)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  _Unwind_Resume(a1);
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1EA999CD8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1EA999CD8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1E0C023A0);
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (v4 = result,
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(result + 24) + 40))(*(_QWORD *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(_QWORD *)(a2 + 16);
    v5 = *(_QWORD *)(v4 + 8);
  }
  *(_QWORD *)(a2 + 80) = v5;
  return result;
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1EA999D20;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1EA999D20;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1E0C023A0);
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

void (__cdecl ***std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1E0C023A0);
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1EA999DB0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1EA999DB0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1E0C023A0);
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v3 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (*(_BYTE *)(v3 + 16))
  {
    v4 = *(_QWORD *)(v3 + 8) - *(_QWORD *)v3;
    v5 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(a2 + 24) - v5 >= v4)
    {
      v7 = result;
      if (v4 < 1)
      {
LABEL_9:
        *(_DWORD *)a2 = -994;
        *(_QWORD *)(a2 + 16) = v5 + v4;
        v6 = *(_QWORD *)(v7 + 8);
        goto LABEL_10;
      }
      v8 = 0;
      while (1)
      {
        v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)(*(_QWORD *)v3 + v8));
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)(*(_QWORD *)(a2 + 16) + v8));
        if (v9 != (_DWORD)result)
          break;
        if (v4 == ++v8)
        {
          v5 = *(_QWORD *)(a2 + 16);
          goto LABEL_9;
        }
      }
    }
  }
  v6 = 0;
  *(_DWORD *)a2 = -993;
LABEL_10:
  *(_QWORD *)(a2 + 80) = v6;
  return result;
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1EA999DF8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1EA999DF8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1E0C023A0);
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;

  v2 = *(_DWORD *)(result + 40) - 1;
  v3 = *(_QWORD *)(a2 + 32);
  if (*(_BYTE *)(v3 + 24 * v2 + 16))
  {
    v4 = (unsigned __int8 **)(v3 + 24 * v2);
    v5 = *v4;
    v6 = v4[1] - *v4;
    v7 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(a2 + 24) - v7 >= v6)
    {
      if (v6 < 1)
      {
LABEL_8:
        *(_DWORD *)a2 = -994;
        *(_QWORD *)(a2 + 16) = v7 + v6;
        v8 = *(_QWORD *)(result + 8);
        goto LABEL_9;
      }
      v9 = *(unsigned __int8 **)(a2 + 16);
      v10 = v6;
      while (1)
      {
        v12 = *v5++;
        v11 = v12;
        v13 = *v9++;
        if (v11 != v13)
          break;
        if (!--v10)
          goto LABEL_8;
      }
    }
  }
  v8 = 0;
  *(_DWORD *)a2 = -993;
LABEL_9:
  *(_QWORD *)(a2 + 80) = v8;
  return result;
}

void (__cdecl ***std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1E0C023A0);
}

unsigned int *std::__back_ref<char>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v5;
  unsigned int *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = result[4];
  v3 = *(_QWORD *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 40) - v3) >> 3) < v2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  v5 = v2 - 1;
  if (*(_BYTE *)(v3 + 24 * v5 + 16)
    && (v6 = result,
        v7 = v3 + 24 * v5,
        result = *(unsigned int **)v7,
        v8 = *(_QWORD *)(v7 + 8) - *(_QWORD *)v7,
        v9 = *(_QWORD *)(a2 + 16),
        *(_QWORD *)(a2 + 24) - v9 >= v8)
    && (result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !(_DWORD)result))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 16) = v9 + v8;
    v10 = *((_QWORD *)v6 + 1);
  }
  else
  {
    v10 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(_QWORD *)(a2 + 80) = v10;
  return result;
}

std::__bracket_expression<char, std::regex_traits<char>> *__cdecl std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(std::basic_regex<char> *this, BOOL __negate)
{
  std::__bracket_expression<char, std::regex_traits<char>> *v4;

  v4 = (std::__bracket_expression<char, std::regex_traits<char>> *)operator new();
  std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v4, (uint64_t)this, (uint64_t)this->__end_->__first_, __negate, this->__flags_ & 1, (this->__flags_ & 8) != 0);
  this->__end_->__first_ = v4;
  this->__end_ = v4;
  return v4;
}

void sub_1E05D809C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1E0C023A0](v1, 0x10F1C4061CF1F02);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  unint64_t *v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  _BYTE *v22;
  char v23;
  unint64_t v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  _BYTE *v29;
  char v30;
  _BYTE *v31;
  char v32;

  v2 = a2;
  if (*(_BYTE *)(a1 + 169))
  {
    v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
    v5 = *(_BYTE **)(a1 + 48);
    v4 = *(_QWORD *)(a1 + 56);
    if ((unint64_t)v5 >= v4)
    {
      v6 = (unint64_t *)(a1 + 40);
      v7 = *(_QWORD *)(a1 + 40);
      v8 = &v5[-v7];
      v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        v10 = v4 - v7;
        if (2 * v10 > v9)
          v9 = 2 * v10;
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
          v11 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v11 = v9;
        if (v11)
          v12 = operator new(v11);
        else
          v12 = 0;
        v20 = &v8[(_QWORD)v12];
        v21 = (char *)v12 + v11;
        v8[(_QWORD)v12] = v2;
        v19 = (uint64_t)&v8[(_QWORD)v12 + 1];
        if (v5 != (_BYTE *)v7)
        {
          v22 = &v5[~v7];
          do
          {
            v23 = *--v5;
            (v22--)[(_QWORD)v12] = v23;
          }
          while (v5 != (_BYTE *)v7);
LABEL_45:
          v5 = (_BYTE *)*v6;
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_22;
  }
  v6 = (unint64_t *)(a1 + 40);
  v5 = *(_BYTE **)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  if (!*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      v24 = *v6;
      v25 = &v5[-*v6];
      v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        v27 = v13 - v24;
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
          v28 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
          v12 = operator new(v28);
        else
          v12 = 0;
        v20 = &v25[(_QWORD)v12];
        v21 = (char *)v12 + v28;
        v25[(_QWORD)v12] = v2;
        v19 = (uint64_t)&v25[(_QWORD)v12 + 1];
        if (v5 != (_BYTE *)v24)
        {
          v31 = &v5[~v24];
          do
          {
            v32 = *--v5;
            (v31--)[(_QWORD)v12] = v32;
          }
          while (v5 != (_BYTE *)v24);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *v5 = v2;
    v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v13)
    goto LABEL_22;
  v14 = *v6;
  v15 = &v5[-*v6];
  v16 = (unint64_t)(v15 + 1);
  if ((uint64_t)(v15 + 1) < 0)
    goto LABEL_50;
  v17 = v13 - v14;
  if (2 * v17 > v16)
    v16 = 2 * v17;
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL)
    v18 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v18 = v16;
  if (v18)
    v12 = operator new(v18);
  else
    v12 = 0;
  v20 = &v15[(_QWORD)v12];
  v21 = (char *)v12 + v18;
  v15[(_QWORD)v12] = v2;
  v19 = (uint64_t)&v15[(_QWORD)v12 + 1];
  if (v5 != (_BYTE *)v14)
  {
    v29 = &v5[~v14];
    do
    {
      v30 = *--v5;
      (v29--)[(_QWORD)v12] = v30;
    }
    while (v5 != (_BYTE *)v14);
    goto LABEL_45;
  }
LABEL_46:
  v12 = v20;
LABEL_47:
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = v19;
  *(_QWORD *)(a1 + 56) = v21;
  if (v5)
    operator delete(v5);
LABEL_49:
  *(_QWORD *)(a1 + 48) = v19;
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  const std::locale *v11;
  __int128 v12;
  BOOL v13;
  std::locale v15;
  std::string v16;

  *(_QWORD *)(a1 + 8) = a3;
  v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  v12 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 24) = v12;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_BYTE *)(a1 + 168) = a4;
  *(_BYTE *)(a1 + 169) = a5;
  *(_BYTE *)(a1 + 170) = a6;
  std::locale::locale(&v15, v11);
  std::locale::name(&v16, &v15);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
    v13 = v16.__r_.__value_.__l.__size_ != 1 || *v16.__r_.__value_.__l.__data_ != 67;
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  else
  {
    v13 = SHIBYTE(v16.__r_.__value_.__r.__words[2]) != 1 || v16.__r_.__value_.__s.__data_[0] != 67;
  }
  std::locale::~locale(&v15);
  *(_BYTE *)(a1 + 171) = v13;
  return a1;
}

void sub_1E05D83FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10)
{
  void (__cdecl ***v10)(std::__owns_one_state<char> *__hidden);
  std::locale *v11;
  void **v12;
  void (__cdecl **v14)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v15)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v16)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v17)(std::__owns_one_state<char> *__hidden);

  std::locale::~locale((std::locale *)&a9);
  a10 = v10 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  v14 = v10[14];
  if (v14)
  {
    v10[15] = v14;
    operator delete(v14);
  }
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  v15 = v10[8];
  if (v15)
  {
    v10[9] = v15;
    operator delete(v15);
  }
  v16 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))*v12;
  if (*v12)
  {
    v10[6] = v16;
    operator delete(v16);
  }
  std::locale::~locale(v11);
  v17 = v10[1];
  if (v17)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v17 + 1))(v17);
  _Unwind_Resume(a1);
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale *v7;

  v7 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  v7 = a1 + 11;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  v5 = a1[1].__locale_;
  if (v5)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale *v7;

  v7 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  v7 = a1 + 11;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  v5 = a1[1].__locale_;
  if (v5)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v5 + 8))(v5);
  return MEMORY[0x1E0C023A0](a1, 0x10F1C4061CF1F02);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  char *current;
  char *last;
  signed __int8 v6;
  signed __int8 v7;
  std::regex_traits<char> *p_traits;
  std::vector<std::pair<char, char>>::pointer begin;
  uint64_t v10;
  uint64_t v11;
  char *p_second;
  std::vector<std::pair<std::string, std::string>>::pointer v14;
  char v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  const void *p_p;
  uint64_t v21;
  BOOL v22;
  int v23;
  size_t size;
  std::vector<std::pair<std::string, std::string>>::pointer v25;
  size_t v26;
  int v27;
  _BOOL4 v28;
  int v29;
  size_t v30;
  std::string *data;
  size_t v32;
  int v33;
  BOOL v34;
  int v35;
  _BOOL4 negate;
  uint64_t v37;
  size_t v38;
  unsigned __int8 v39;
  std::vector<char>::pointer v40;
  unint64_t v41;
  int v42;
  std::regex_traits<char>::char_class_type v43;
  int v44;
  std::vector<char>::pointer end;
  std::vector<char>::pointer v46;
  char *v47;
  std::vector<std::pair<std::string, std::string>>::pointer v48;
  std::vector<std::pair<std::string, std::string>>::pointer v49;
  int64_t v50;
  uint64_t v51;
  unint64_t v52;
  size_t v53;
  const void *v54;
  uint64_t v55;
  BOOL v56;
  int v57;
  size_t v58;
  std::vector<std::pair<std::string, std::string>>::pointer v59;
  size_t v60;
  int v61;
  _BOOL4 v62;
  int v63;
  size_t v64;
  std::string *v65;
  size_t v66;
  int v67;
  BOOL v68;
  std::vector<std::string>::pointer v69;
  uint64_t v70;
  int64_t v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  size_t v75;
  size_t v76;
  uint64_t v77;
  BOOL v78;
  std::string *v79;
  std::string::size_type v80;
  int v81;
  std::string *v82;
  void **v83;
  uint64_t v84;
  unint64_t v85;
  int v86;
  std::regex_traits<char>::char_class_type v87;
  int v88;
  std::vector<std::string>::pointer v89;
  uint64_t v90;
  int64_t v91;
  uint64_t v92;
  unint64_t v93;
  size_t v94;
  void *v95;
  size_t v96;
  uint64_t v97;
  BOOL v98;
  std::string *v99;
  std::string::size_type v100;
  int v101;
  std::string *v102;
  void **v103;
  uint64_t v104;
  int v105;
  std::regex_traits<char>::char_class_type mask;
  const std::ctype_base::mask *tab;
  std::ctype_base::mask v108;
  std::regex_traits<char>::char_class_type neg_mask;
  int v110;
  std::__node<char> *first;
  int v112;
  char v113;
  char v114;
  uint64_t v115;
  _BOOL4 v116;
  _BOOL4 v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void *__p;
  size_t v123;
  char v124;
  unsigned __int8 v125;
  unsigned __int8 v126;
  uint64_t v127;

  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    v37 = 0;
    negate = this->__negate_;
    goto LABEL_221;
  }
  if (!this->__might_have_digraph_ || current + 1 == last)
    goto LABEL_58;
  v6 = *current;
  v125 = *current;
  v7 = current[1];
  v126 = v7;
  if (this->__icase_)
  {
    v125 = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    v126 = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  p_traits = &this->__traits_;
  std::regex_traits<char>::__lookup_collatename<char *>((uint64_t)&this->__traits_, (char *)&v125, (char *)&v127, (uint64_t)&__p);
  if ((v124 & 0x80000000) == 0)
  {
    if (v124)
      goto LABEL_8;
LABEL_58:
    negate = 0;
    v37 = 1;
    goto LABEL_59;
  }
  v38 = v123;
  operator delete(__p);
  if (!v38)
    goto LABEL_58;
LABEL_8:
  begin = this->__digraphs_.__begin_;
  v10 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v10)
  {
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    p_second = &begin->second;
    do
    {
      if (v125 == *(p_second - 1) && v126 == *p_second)
        goto LABEL_218;
      p_second += 2;
      --v11;
    }
    while (v11);
  }
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    negate = 0;
  }
  else
  {
    std::regex_traits<char>::transform<char *>((uint64_t)&this->__traits_, (char *)&v125, (char *)&v127);
    v14 = this->__ranges_.__begin_;
    v15 = v124;
    v16 = (char *)this->__ranges_.__end_ - (char *)v14;
    if (v16)
    {
      v17 = 0;
      v18 = v16 / 48;
      v113 = v124;
      if (v124 >= 0)
        v19 = v124;
      else
        v19 = v123;
      if (v124 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      if (v18 <= 1)
        v21 = 1;
      else
        v21 = v16 / 48;
      v22 = 1;
      while (1)
      {
        v23 = SHIBYTE(v14->first.__r_.__value_.__r.__words[2]);
        if (v23 >= 0)
          size = HIBYTE(v14->first.__r_.__value_.__r.__words[2]);
        else
          size = v14->first.__r_.__value_.__l.__size_;
        if (v23 >= 0)
          v25 = v14;
        else
          v25 = (std::vector<std::pair<std::string, std::string>>::pointer)v14->first.__r_.__value_.__r.__words[0];
        if (size >= v19)
          v26 = v19;
        else
          v26 = size;
        v27 = memcmp(p_p, v25, v26);
        v28 = v19 >= size;
        if (v27)
          v28 = v27 >= 0;
        if (v28)
        {
          v29 = SHIBYTE(v14->second.__r_.__value_.__r.__words[2]);
          if (v29 >= 0)
            v30 = HIBYTE(v14->second.__r_.__value_.__r.__words[2]);
          else
            v30 = v14->second.__r_.__value_.__l.__size_;
          if (v29 >= 0)
            data = &v14->second;
          else
            data = (std::string *)v14->second.__r_.__value_.__l.__data_;
          if (v19 >= v30)
            v32 = v30;
          else
            v32 = v19;
          v33 = memcmp(data, p_p, v32);
          v34 = v30 >= v19;
          if (v33)
            v34 = v33 >= 0;
          if (v34)
            break;
        }
        v22 = ++v17 < v18;
        ++v14;
        if (v21 == v17)
        {
          v35 = 0;
          negate = 0;
          goto LABEL_162;
        }
      }
      negate = 1;
      v35 = 5;
LABEL_162:
      p_traits = &this->__traits_;
      v15 = v113;
    }
    else
    {
      v22 = 0;
      v35 = 0;
      negate = 0;
    }
    if (v15 < 0)
      operator delete(__p);
    if (v22)
      goto LABEL_195;
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
    goto LABEL_200;
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)p_traits, (char *)&v125, (char *)&v127, (uint64_t)&__p);
  v89 = this->__equivalences_.__begin_;
  v90 = v124;
  v91 = (char *)this->__equivalences_.__end_ - (char *)v89;
  if (v91)
  {
    v92 = 0;
    v93 = v91 / 24;
    v95 = __p;
    v94 = v123;
    if (v124 >= 0)
      v96 = v124;
    else
      v96 = v123;
    if (v93 <= 1)
      v97 = 1;
    else
      v97 = v91 / 24;
    v98 = 1;
    while (1)
    {
      v99 = &v89[v92];
      v100 = HIBYTE(v99->__r_.__value_.__r.__words[2]);
      v101 = (char)v100;
      if ((v100 & 0x80u) != 0)
        v100 = v99->__r_.__value_.__l.__size_;
      if (v96 == v100)
      {
        if (v101 >= 0)
          v102 = &v89[v92];
        else
          v102 = (std::string *)v99->__r_.__value_.__r.__words[0];
        if ((v90 & 0x80) == 0)
        {
          if ((_DWORD)v90)
          {
            v103 = &__p;
            v104 = v90;
            do
            {
              if (*(unsigned __int8 *)v103 != v102->__r_.__value_.__s.__data_[0])
                goto LABEL_188;
              v103 = (void **)((char *)v103 + 1);
              v102 = (std::string *)((char *)v102 + 1);
              --v104;
            }
            while (v104);
            negate = 1;
            v35 = 5;
            goto LABEL_192;
          }
          negate = 1;
          if (v98)
            goto LABEL_220;
LABEL_200:
          if ((char)v125 < 0)
          {
            neg_mask = this->__neg_mask_;
            goto LABEL_213;
          }
          mask = this->__mask_;
          tab = this->__traits_.__ct_->__tab_;
          v108 = tab[v125];
          if ((v108 & mask) == 0 && (v125 != 95 || (mask & 0x80) == 0)
            || (char)v126 < 0
            || (tab[v126] & mask) == 0 && ((mask & 0x80) == 0 || v126 != 95))
          {
            neg_mask = this->__neg_mask_;
            if ((v108 & neg_mask) != 0 || v125 == 95 && (neg_mask & 0x80) != 0)
            {
LABEL_217:
              v110 = negate;
              goto LABEL_219;
            }
LABEL_213:
            if (((char)v126 & 0x80000000) == 0)
            {
              if ((this->__traits_.__ct_->__tab_[v126] & neg_mask) != 0)
                goto LABEL_217;
              v110 = 1;
              if (v126 == 95 && (neg_mask & 0x80) != 0)
                goto LABEL_217;
LABEL_219:
              negate = v110;
LABEL_220:
              v37 = 2;
              goto LABEL_221;
            }
          }
LABEL_218:
          v110 = 1;
          goto LABEL_219;
        }
        v118 = v93;
        v121 = v90;
        v105 = memcmp(v95, v102, v94);
        v93 = v118;
        v90 = v121;
        if (!v105)
          break;
      }
LABEL_188:
      v98 = ++v92 < v93;
      if (v92 == v97)
        goto LABEL_191;
    }
    v35 = 5;
    negate = 1;
    goto LABEL_193;
  }
  v98 = 0;
LABEL_191:
  v35 = 0;
LABEL_192:
  if ((v90 & 0x80) != 0)
LABEL_193:
    operator delete(__p);
  if (!v98)
    goto LABEL_200;
LABEL_195:
  if (v35)
    goto LABEL_220;
  v37 = 2;
LABEL_59:
  v39 = *a2->__current_;
  v125 = v39;
  if (this->__icase_)
  {
    v39 = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v39);
    v125 = v39;
  }
  v40 = this->__chars_.__begin_;
  v41 = this->__chars_.__end_ - v40;
  if (v41)
  {
    if (v41 <= 1)
      v41 = 1;
    while (1)
    {
      v42 = *v40++;
      if (v42 == v39)
        break;
      if (!--v41)
        goto LABEL_66;
    }
LABEL_77:
    negate = 1;
    goto LABEL_221;
  }
LABEL_66:
  v43 = this->__neg_mask_;
  if (v43 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v39 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v39] & v43) == 0)
      v44 = (v39 == 95) & (v43 >> 7);
    else
      LOBYTE(v44) = 1;
    end = this->__neg_chars_.__end_;
    v46 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v39, end - this->__neg_chars_.__begin_);
    v47 = v46 ? v46 : end;
    if ((v44 & 1) == 0 && v47 == end)
      goto LABEL_77;
  }
  v49 = this->__ranges_.__begin_;
  v48 = this->__ranges_.__end_;
  if (v49 != v48)
  {
    if (this->__collate_)
    {
      std::regex_traits<char>::transform<char *>((uint64_t)&this->__traits_, (char *)&v125, (char *)&v126);
      v49 = this->__ranges_.__begin_;
      v48 = this->__ranges_.__end_;
    }
    else
    {
      v124 = 1;
      LOWORD(__p) = v39;
    }
    v50 = (char *)v48 - (char *)v49;
    if (v50)
    {
      v119 = v37;
      v116 = negate;
      v51 = 0;
      v52 = v50 / 48;
      v114 = v124;
      if (v124 >= 0)
        v53 = v124;
      else
        v53 = v123;
      if (v124 >= 0)
        v54 = &__p;
      else
        v54 = __p;
      if (v52 <= 1)
        v55 = 1;
      else
        v55 = v50 / 48;
      v56 = 1;
      while (1)
      {
        v57 = SHIBYTE(v49->first.__r_.__value_.__r.__words[2]);
        if (v57 >= 0)
          v58 = HIBYTE(v49->first.__r_.__value_.__r.__words[2]);
        else
          v58 = v49->first.__r_.__value_.__l.__size_;
        if (v57 >= 0)
          v59 = v49;
        else
          v59 = (std::vector<std::pair<std::string, std::string>>::pointer)v49->first.__r_.__value_.__r.__words[0];
        if (v58 >= v53)
          v60 = v53;
        else
          v60 = v58;
        v61 = memcmp(v54, v59, v60);
        v62 = v53 >= v58;
        if (v61)
          v62 = v61 >= 0;
        if (v62)
        {
          v63 = SHIBYTE(v49->second.__r_.__value_.__r.__words[2]);
          if (v63 >= 0)
            v64 = HIBYTE(v49->second.__r_.__value_.__r.__words[2]);
          else
            v64 = v49->second.__r_.__value_.__l.__size_;
          if (v63 >= 0)
            v65 = &v49->second;
          else
            v65 = (std::string *)v49->second.__r_.__value_.__l.__data_;
          if (v53 >= v64)
            v66 = v64;
          else
            v66 = v53;
          v67 = memcmp(v65, v54, v66);
          v68 = v64 >= v53;
          if (v67)
            v68 = v67 >= 0;
          if (v68)
            break;
        }
        v56 = ++v51 < v52;
        ++v49;
        if (v55 == v51)
        {
          negate = v116;
          goto LABEL_123;
        }
      }
      negate = 1;
LABEL_123:
      v37 = v119;
      if ((v114 & 0x80) == 0)
        goto LABEL_125;
    }
    else
    {
      v56 = 0;
      if ((v124 & 0x80) == 0)
        goto LABEL_125;
    }
    operator delete(__p);
LABEL_125:
    if (v56)
      goto LABEL_221;
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
    goto LABEL_154;
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)&this->__traits_, (char *)&v125, (char *)&v126, (uint64_t)&__p);
  v69 = this->__equivalences_.__begin_;
  v70 = v124;
  v71 = (char *)this->__equivalences_.__end_ - (char *)v69;
  if (v71)
  {
    v120 = v37;
    v72 = 0;
    v73 = v71 / 24;
    v74 = __p;
    v75 = v123;
    if (v124 >= 0)
      v76 = v124;
    else
      v76 = v123;
    if (v73 <= 1)
      v77 = 1;
    else
      v77 = v71 / 24;
    v78 = 1;
    while (1)
    {
      v79 = &v69[v72];
      v80 = HIBYTE(v79->__r_.__value_.__r.__words[2]);
      v81 = (char)v80;
      if ((v80 & 0x80u) != 0)
        v80 = v79->__r_.__value_.__l.__size_;
      if (v76 == v80)
      {
        if (v81 >= 0)
          v82 = &v69[v72];
        else
          v82 = (std::string *)v79->__r_.__value_.__r.__words[0];
        if ((v70 & 0x80) != 0)
        {
          v117 = negate;
          v85 = v73;
          v115 = v77;
          v86 = memcmp(v74, v82, v75);
          v77 = v115;
          v73 = v85;
          negate = v117;
          if (!v86)
          {
            negate = 1;
            v37 = v120;
            goto LABEL_152;
          }
        }
        else
        {
          if (!(_DWORD)v70)
          {
            negate = 1;
            v37 = v120;
            if (!v78)
              goto LABEL_154;
            goto LABEL_221;
          }
          v83 = &__p;
          v84 = v70;
          while (*(unsigned __int8 *)v83 == v82->__r_.__value_.__s.__data_[0])
          {
            v83 = (void **)((char *)v83 + 1);
            v82 = (std::string *)((char *)v82 + 1);
            if (!--v84)
            {
              negate = 1;
              goto LABEL_149;
            }
          }
        }
      }
      v78 = ++v72 < v73;
      if (v72 == v77)
      {
LABEL_149:
        v37 = v120;
        if ((v70 & 0x80) == 0)
          goto LABEL_153;
        goto LABEL_152;
      }
    }
  }
  v78 = 0;
  if (v124 < 0)
LABEL_152:
    operator delete(__p);
LABEL_153:
  if (!v78)
  {
LABEL_154:
    if ((char)v125 < 0)
      goto LABEL_221;
    v87 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v125] & v87) == 0)
    {
      v88 = (v87 >> 7) & 1;
      if (v125 != 95)
        v88 = 0;
      if (v88 != 1)
        goto LABEL_221;
    }
    goto LABEL_77;
  }
LABEL_221:
  if (negate == this->__negate_)
  {
    first = 0;
    v112 = -993;
  }
  else
  {
    a2->__current_ += v37;
    first = this->__first_;
    v112 = -995;
  }
  a2->__do_ = v112;
  a2->__node_ = first;
}

void std::regex_traits<char>::transform<char *>(uint64_t a1, char *a2, char *a3)
{
  unint64_t v4;
  void **v5;
  void *__p[2];
  unsigned __int8 v7;

  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a2, a3, a3 - a2);
  v4 = v7;
  if ((v7 & 0x80u) == 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if ((v7 & 0x80u) != 0)
    v4 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v5, (char *)v5 + v4);
  if ((char)v7 < 0)
    operator delete(__p[0]);
}

void sub_1E05D8F3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__lookup_collatename<char *>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  std::string *p_s;
  unint64_t v7;
  unint64_t v8;
  std::string::size_type size;
  std::string *v10;
  int v11;
  uint64_t v12;
  std::string v13;
  std::string __s;

  std::string::__init_with_size[abi:ne180100]<char *,char *>(&__s, a2, a3, a3 - a2);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_)
      goto LABEL_9;
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&__s.__r_.__value_.__s + 23))
      return;
    p_s = &__s;
  }
  std::__get_collation_name(&v13, (const char *)p_s);
  *(_OWORD *)a4 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  v7 = v13.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a4 + 16) = *((_QWORD *)&v13.__r_.__value_.__l + 2);
  v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8)
    goto LABEL_9;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_9;
    v10 = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
      return;
    v10 = &__s;
  }
  (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**(_QWORD **)(a1 + 16) + 32))(&v13, *(_QWORD *)(a1 + 16), v10, (char *)v10 + size);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(std::string *)a4 = v13;
  if ((*(char *)(a4 + 23) & 0x80000000) == 0)
  {
    v11 = *(unsigned __int8 *)(a4 + 23);
    if (v11 != 12 && v11 != 1)
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_25;
  }
  v12 = *(_QWORD *)(a4 + 8);
  if (v12 == 1 || v12 == 12)
  {
LABEL_25:
    std::string::operator=((std::string *)a4, &__s);
    goto LABEL_9;
  }
  **(_BYTE **)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
}

void sub_1E05D90B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::__init_with_size[abi:ne180100]<char *,char *>(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *v4 = result;
    v4 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v4 = v10;
    v4 = (_QWORD *)((char *)v4 + 1);
  }
  *(_BYTE *)v4 = 0;
  return result;
}

void std::regex_traits<char>::__transform_primary<char *>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6;
  void **v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *__p[2];
  unsigned __int8 v12;

  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a2, a3, a3 - a2);
  v6 = v12;
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v7, (char *)v7 + v6);
  v8 = *(unsigned __int8 *)(a4 + 23);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0)
        v10 = (_BYTE *)a4;
      else
        v10 = *(_BYTE **)a4;
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(_BYTE **)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
    }
  }
  if ((char)v12 < 0)
    operator delete(__p[0]);
}

void sub_1E05D9268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1E0C01FC8](exception, 5);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1E05D92BC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  char *v4;
  int v5;
  uint64_t v6;
  int v9;
  char *v10;
  int v11;
  int v12;
  char *v13;
  char *v14;
  int v15;
  std::string *v16;
  _BYTE *v17;
  char *v18;
  char *v19;
  std::string::size_type size;
  char v21;
  std::string __p;
  std::string v24;
  std::string v25;
  std::string v26;

  v4 = a2;
  if (a2 == a3)
    return v4;
  v5 = *a2;
  if (v5 == 93)
    return v4;
  v6 = (uint64_t)a4;
  memset(&v26, 0, sizeof(v26));
  if (a2 + 1 == a3 || v5 != 91)
  {
LABEL_9:
    v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_10;
  }
  v9 = a2[1];
  if (v9 != 46)
  {
    if (v9 == 58)
    {
      v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_class<std::__wrap_iter<char const*>>(a1, a2 + 2, a3, (uint64_t)a4);
      goto LABEL_38;
    }
    if (v9 == 61)
    {
      v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<std::__wrap_iter<char const*>>(a1, a2 + 2, a3, a4);
LABEL_38:
      v6 = (uint64_t)v10;
      v21 = 0;
      goto LABEL_42;
    }
    goto LABEL_9;
  }
  v19 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, a2 + 2, a3, (uint64_t)&v26);
  v4 = v19;
  v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v26.__r_.__value_.__l.__size_;
  v14 = v19;
  if (!size)
  {
LABEL_10:
    if ((v11 | 0x40) == 0x40)
    {
      v12 = *v4;
      if (v12 == 92)
      {
        v13 = v4 + 1;
        if (v11)
        {
          v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v13, a3, &v26);
        }
        else
        {
          v14 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v13, (std::basic_regex<char> *)a3, &v26, v6);
          v11 = 0;
        }
        goto LABEL_16;
      }
    }
    else
    {
      LOBYTE(v12) = *v4;
    }
    std::string::operator=(&v26, v12);
    v14 = v4 + 1;
  }
LABEL_16:
  if (v14 == a3
    || (v15 = *v14, v15 == 93)
    || (v17 = v14 + 1, v14 + 1 == a3)
    || v15 != 45
    || *v17 == 93)
  {
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v26.__r_.__value_.__l.__size_)
      {
        if (v26.__r_.__value_.__l.__size_ != 1)
        {
          v16 = (std::string *)v26.__r_.__value_.__r.__words[0];
LABEL_40:
          std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v6, v16->__r_.__value_.__s.__data_[0], v16->__r_.__value_.__s.__data_[1]);
          goto LABEL_41;
        }
        v16 = (std::string *)v26.__r_.__value_.__r.__words[0];
        goto LABEL_25;
      }
    }
    else if (*((_BYTE *)&v26.__r_.__value_.__s + 23))
    {
      v16 = &v26;
      if (HIBYTE(v26.__r_.__value_.__r.__words[2]) != 1)
        goto LABEL_40;
LABEL_25:
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v6, v16->__r_.__value_.__s.__data_[0]);
    }
LABEL_41:
    v21 = 1;
    v4 = v14;
    goto LABEL_42;
  }
  memset(&v25, 0, sizeof(v25));
  v4 = v14 + 2;
  if (v14 + 2 != a3 && *v17 == 91 && *v4 == 46)
  {
    v18 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, v14 + 3, a3, (uint64_t)&v25);
LABEL_55:
    v4 = v18;
    goto LABEL_56;
  }
  if ((v11 | 0x40) == 0x40)
  {
    LODWORD(v17) = *v17;
    if ((_DWORD)v17 == 92)
    {
      if (v11)
        v18 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v14 + 2, a3, &v25);
      else
        v18 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)(v14 + 2), (std::basic_regex<char> *)a3, &v25, v6);
      goto LABEL_55;
    }
  }
  else
  {
    LOBYTE(v17) = *v17;
  }
  std::string::operator=(&v25, (std::string::value_type)v17);
LABEL_56:
  v24 = v26;
  memset(&v26, 0, sizeof(v26));
  __p = v25;
  memset(&v25, 0, sizeof(v25));
  std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](v6, (char *)&v24, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  v21 = 1;
LABEL_42:
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if ((v21 & 1) != 0)
    return v4;
  return (char *)v6;
}

void sub_1E05D961C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
    operator delete(__p);
  if (*(char *)(v28 - 49) < 0)
    operator delete(*(void **)(v28 - 72));
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  char *v6;
  char *v7;
  char *v8;
  char *i;
  int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  void *__p[2];
  unsigned __int8 v19;
  void *v20;
  uint64_t v21;
  unsigned __int8 v22;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_33;
  v6 = a3 - 2;
  v7 = a2;
  v8 = a2;
  for (i = a2; ; v8 = i)
  {
    v10 = *i++;
    if (v10 == 61 && *i == 93)
      break;
    if (a2 == v6)
      goto LABEL_33;
    ++v7;
    --v6;
  }
  if (v8 == a3)
LABEL_33:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(a1, a2, v7, (uint64_t)&v20);
  if (((char)v22 & 0x80000000) == 0)
  {
    v11 = v22;
    if (v22)
    {
      v12 = (char *)&v20;
      goto LABEL_14;
    }
LABEL_34:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  v11 = v21;
  if (!v21)
    goto LABEL_34;
  v12 = (char *)v20;
LABEL_14:
  std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(a1, v12, &v12[v11], (uint64_t)__p);
  v13 = v19;
  if ((v19 & 0x80u) != 0)
    v13 = (unint64_t)__p[1];
  if (v13)
  {
    std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100](a4, (__int128 *)__p);
  }
  else
  {
    v14 = v22;
    if ((v22 & 0x80u) != 0)
      v14 = v21;
    if (v14 == 2)
    {
      v16 = (char *)&v20;
      if ((v22 & 0x80u) != 0)
        v16 = (char *)v20;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)a4, *v16, v16[1]);
    }
    else
    {
      if (v14 != 1)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
      v15 = (char *)&v20;
      if ((v22 & 0x80u) != 0)
        v15 = (char *)v20;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)a4, *v15);
    }
  }
  if ((char)v19 < 0)
    operator delete(__p[0]);
  if ((char)v22 < 0)
    operator delete(v20);
  return v7 + 2;
}

void sub_1E05D9838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  char *v5;
  char *v6;
  char *v7;
  char *i;
  int v9;
  int v10;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_11;
  v5 = a3 - 2;
  v6 = a2;
  v7 = a2;
  for (i = a2; ; v7 = i)
  {
    v9 = *i++;
    if (v9 == 58 && *i == 93)
      break;
    if (a2 == v5)
      goto LABEL_11;
    ++v6;
    --v5;
  }
  if (v7 == a3)
LABEL_11:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  v10 = std::regex_traits<char>::__lookup_classname<std::__wrap_iter<char const*>>(a1, a2, v6, *(_DWORD *)(a1 + 24) & 1);
  if (!v10)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
  *(_DWORD *)(a4 + 160) |= v10;
  return v6 + 2;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  char *v5;
  char *v6;
  char *v7;
  char *i;
  int v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v13;
  unint64_t v14;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_15;
  v5 = a3 - 2;
  v6 = a2;
  v7 = a2;
  for (i = a2; ; v7 = i)
  {
    v9 = *i++;
    if (v9 == 46 && *i == 93)
      break;
    if (a2 == v5)
      goto LABEL_15;
    ++v6;
    --v5;
  }
  if (v7 == a3)
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(a1, a2, v6, (uint64_t)&v13);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v13;
  v10 = v14;
  *(_QWORD *)(a4 + 16) = v14;
  v11 = HIBYTE(v10);
  if ((v11 & 0x80u) != 0)
    v11 = *(_QWORD *)(a4 + 8);
  if (v11 - 1 >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  return v6 + 2;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4, uint64_t a5)
{
  int locale_low;
  int v7;
  int v8;
  std::string::value_type v9;
  std::string *v10;

  if (this == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low > 97)
  {
    if (locale_low > 114)
    {
      if (locale_low != 115)
      {
        if (locale_low != 119)
          return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
        *(_DWORD *)(a5 + 160) |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (locale_low == 98)
      {
        v10 = a4;
        v9 = 8;
LABEL_19:
        std::string::operator=(v10, v9);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      if (locale_low != 100)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
      v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 160) = v8;
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  if (locale_low <= 82)
  {
    if (LOBYTE(this->__traits_.__loc_.__locale_))
    {
      if (locale_low == 68)
      {
        v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_21:
        *(_DWORD *)(a5 + 164) = v7;
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
    }
    v9 = 0;
    v10 = a4;
    goto LABEL_19;
  }
  if (locale_low == 83)
  {
    v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_21;
  }
  if (locale_low == 87)
  {
    *(_DWORD *)(a5 + 164) |= 0x500u;
    std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3, std::string *this)
{
  int v5;
  std::string *v6;
  std::string::value_type v7;
  char *v8;
  char v9;
  int v10;
  std::string::value_type v11;

  if (a2 == a3)
LABEL_52:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v5 = *a2;
  if (v5 > 97)
  {
    switch(v5)
    {
      case 'n':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 10;
          goto LABEL_16;
        }
        LOBYTE(v5) = 10;
        goto LABEL_49;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_21;
      case 'r':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 13;
          goto LABEL_16;
        }
        LOBYTE(v5) = 13;
        goto LABEL_49;
      case 't':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 9;
          goto LABEL_16;
        }
        LOBYTE(v5) = 9;
        goto LABEL_49;
      case 'v':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 11;
          goto LABEL_16;
        }
        LOBYTE(v5) = 11;
        goto LABEL_49;
      default:
        if (v5 == 98)
        {
          if (this)
          {
            v6 = this;
            LOBYTE(v5) = 8;
            goto LABEL_16;
          }
          LOBYTE(v5) = 8;
        }
        else
        {
          if (v5 != 102)
            goto LABEL_21;
          if (this)
          {
            v6 = this;
            LOBYTE(v5) = 12;
            goto LABEL_16;
          }
          LOBYTE(v5) = 12;
        }
        break;
    }
    goto LABEL_49;
  }
  if (v5 > 91)
  {
    if (v5 != 92)
    {
      if (v5 != 97)
        goto LABEL_21;
      if (this)
      {
        v6 = this;
        LOBYTE(v5) = 7;
LABEL_16:
        std::string::operator=(v6, v5);
        return a2 + 1;
      }
      LOBYTE(v5) = 7;
LABEL_49:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
      return a2 + 1;
    }
LABEL_14:
    if (this)
    {
      v6 = this;
      goto LABEL_16;
    }
    goto LABEL_49;
  }
  if (v5 == 34 || v5 == 47)
    goto LABEL_14;
LABEL_21:
  if ((v5 & 0xFFFFFFF8) != 0x30)
    goto LABEL_52;
  v7 = v5 - 48;
  v8 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v8 & 0xF8) != 0x30)
      goto LABEL_39;
    v7 = *v8 + 8 * v7 - 48;
    if (a2 + 2 != a3)
    {
      v9 = a2[2];
      v10 = v9 & 0xF8;
      v11 = v9 + 8 * v7 - 48;
      if (v10 == 48)
        v8 = a2 + 3;
      else
        v8 = a2 + 2;
      if (v10 == 48)
        v7 = v11;
      goto LABEL_39;
    }
  }
  v8 = a3;
LABEL_39:
  if (this)
    std::string::operator=(this, v7);
  else
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
  return v8;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](uint64_t a1, char *a2, char *a3)
{
  char *v3;
  char *v4;
  unint64_t i;
  unint64_t v7;
  char *v8;
  char v9;
  char *v10;
  unint64_t j;
  unint64_t v12;
  char *v13;
  char v14;
  char *v15;
  uint64_t v16;
  unint64_t k;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t m;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char v31;
  _BYTE *v32;
  char *v33;
  char v34;
  _BYTE *v35;
  void *v36[2];
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  void *v40[2];
  uint64_t v41;
  void *__p[2];
  uint64_t v43;

  v3 = a3;
  v4 = a2;
  if (*(_BYTE *)(a1 + 170))
  {
    if (*(_BYTE *)(a1 + 169))
    {
      for (i = 0; ; ++i)
      {
        v7 = v4[23] < 0 ? *((_QWORD *)v4 + 1) : v4[23];
        if (i >= v7)
          break;
        v8 = v4;
        if (v4[23] < 0)
          v8 = *(char **)v4;
        v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v8[i]);
        v10 = v4;
        if (v4[23] < 0)
          v10 = *(char **)v4;
        v10[i] = v9;
      }
      for (j = 0; ; ++j)
      {
        v12 = v3[23] < 0 ? *((_QWORD *)v3 + 1) : v3[23];
        if (j >= v12)
          break;
        v13 = v3;
        if (v3[23] < 0)
          v13 = *(char **)v3;
        v14 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v13[j]);
        v15 = v3;
        if (v3[23] < 0)
          v15 = *(char **)v3;
        v15[j] = v14;
      }
    }
    else
    {
      for (k = 0; ; ++k)
      {
        v18 = a2[23] < 0 ? *((_QWORD *)a2 + 1) : a2[23];
        if (k >= v18)
          break;
        v19 = a2;
        if (a2[23] < 0)
          v19 = *(char **)a2;
        v20 = a2;
        if (a2[23] < 0)
          v20 = *(char **)a2;
        v20[k] = v19[k];
      }
      for (m = 0; ; ++m)
      {
        v22 = a3[23] < 0 ? *((_QWORD *)a3 + 1) : a3[23];
        if (m >= v22)
          break;
        v23 = a3;
        if (a3[23] < 0)
          v23 = *(char **)a3;
        v24 = a3;
        if (a3[23] < 0)
          v24 = *(char **)a3;
        v24[m] = v23[m];
      }
    }
    if (v4[23] < 0)
    {
      v26 = v4;
      v4 = *(char **)v4;
      v25 = *((_QWORD *)v26 + 1);
    }
    else
    {
      v25 = v4[23];
    }
    std::regex_traits<char>::transform<std::__wrap_iter<char *>>(a1 + 16, v4, &v4[v25]);
    if (v3[23] < 0)
    {
      v28 = v3;
      v3 = *(char **)v3;
      v27 = *((_QWORD *)v28 + 1);
    }
    else
    {
      v27 = v3[23];
    }
    std::regex_traits<char>::transform<std::__wrap_iter<char *>>(a1 + 16, v3, &v3[v27]);
    *(_OWORD *)v40 = v38;
    v41 = v39;
    *(_OWORD *)__p = *(_OWORD *)v36;
    v43 = v37;
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((std::vector<std::pair<std::string, std::string>> *)(a1 + 88), (__int128 *)v40);
    if (SHIBYTE(v43) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v41) < 0)
      operator delete(v40[0]);
  }
  else
  {
    if (a2[23] < 0)
      v16 = *((_QWORD *)a2 + 1);
    else
      v16 = a2[23];
    if (v16 != 1 || (a3[23] < 0 ? (v29 = *((_QWORD *)a3 + 1)) : (v29 = a3[23]), v29 != 1))
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>();
    if (*(_BYTE *)(a1 + 169))
    {
      v30 = a2;
      if (a2[23] < 0)
        v30 = *(char **)a2;
      v31 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v30);
      v32 = v4;
      if (v4[23] < 0)
        v32 = *(_BYTE **)v4;
      *v32 = v31;
      v33 = v3;
      if (v3[23] < 0)
        v33 = *(char **)v3;
      v34 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v33);
      v35 = v3;
      if (v3[23] < 0)
        v35 = *(_BYTE **)v3;
      *v35 = v34;
    }
    *(_OWORD *)v40 = *(_OWORD *)v4;
    v41 = *((_QWORD *)v4 + 2);
    *((_QWORD *)v4 + 1) = 0;
    *((_QWORD *)v4 + 2) = 0;
    *(_QWORD *)v4 = 0;
    *(_OWORD *)__p = *(_OWORD *)v3;
    v43 = *((_QWORD *)v3 + 2);
    *(_QWORD *)v3 = 0;
    *((_QWORD *)v3 + 1) = 0;
    *((_QWORD *)v3 + 2) = 0;
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((std::vector<std::pair<std::string, std::string>> *)(a1 + 88), (__int128 *)v40);
    if (SHIBYTE(v43) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v41) < 0)
      operator delete(v40[0]);
  }
}

void sub_1E05DA078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::pair<std::string,std::string>::~pair((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  __int16 v6;
  unint64_t v7;
  __int16 v8;
  _WORD *v9;
  char **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  _WORD *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  __int16 v39;
  char *v40;
  __int16 v41;

  if (!*(_BYTE *)(a1 + 169))
  {
    v18 = a1 + 128;
    v19 = *(_QWORD *)(a1 + 128);
    v10 = (char **)(a1 + 112);
    v8 = a2 | (unsigned __int16)((_WORD)a3 << 8);
    v9 = *(_WORD **)(a1 + 120);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v9 < v19)
        goto LABEL_24;
      v20 = (char *)v9 - *v10;
      if (v20 > -3)
      {
        v21 = v20 >> 1;
        v22 = v19 - (_QWORD)*v10;
        if (v22 <= (v20 >> 1) + 1)
          v23 = v21 + 1;
        else
          v23 = v22;
        if (v22 >= 0x7FFFFFFFFFFFFFFELL)
          v24 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        if (v24)
          v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>(v18, v24);
        else
          v25 = 0;
        v27 = &v25[2 * v21];
        v28 = &v25[2 * v24];
        *(_WORD *)v27 = v8;
        v26 = v27 + 2;
        v38 = *(char **)(a1 + 112);
        v29 = *(char **)(a1 + 120);
        if (v29 == v38)
          goto LABEL_46;
        do
        {
          v39 = *((_WORD *)v29 - 1);
          v29 -= 2;
          *((_WORD *)v27 - 1) = v39;
          v27 -= 2;
        }
        while (v29 != v38);
        goto LABEL_45;
      }
    }
    else
    {
      if ((unint64_t)v9 < v19)
        goto LABEL_24;
      v32 = (char *)v9 - *v10;
      if (v32 > -3)
      {
        v33 = v32 >> 1;
        v34 = v19 - (_QWORD)*v10;
        if (v34 <= (v32 >> 1) + 1)
          v35 = v33 + 1;
        else
          v35 = v34;
        if (v34 >= 0x7FFFFFFFFFFFFFFELL)
          v36 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        if (v36)
          v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>(v18, v36);
        else
          v37 = 0;
        v27 = &v37[2 * v33];
        v28 = &v37[2 * v36];
        *(_WORD *)v27 = v8;
        v26 = v27 + 2;
        v40 = *(char **)(a1 + 112);
        v29 = *(char **)(a1 + 120);
        if (v29 == v40)
          goto LABEL_46;
        do
        {
          v41 = *((_WORD *)v29 - 1);
          v29 -= 2;
          *((_WORD *)v27 - 1) = v41;
          v27 -= 2;
        }
        while (v29 != v40);
        goto LABEL_45;
      }
    }
LABEL_49:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a3);
  v7 = *(_QWORD *)(a1 + 128);
  v8 = v5 | (unsigned __int16)(v6 << 8);
  v9 = *(_WORD **)(a1 + 120);
  if ((unint64_t)v9 < v7)
  {
LABEL_24:
    *v9 = v8;
    v26 = v9 + 1;
    goto LABEL_48;
  }
  v10 = (char **)(a1 + 112);
  v11 = *(_QWORD *)(a1 + 112);
  v12 = (uint64_t)v9 - v11;
  if ((uint64_t)v9 - v11 <= -3)
    goto LABEL_49;
  v13 = v12 >> 1;
  v14 = v7 - v11;
  if (v14 <= (v12 >> 1) + 1)
    v15 = v13 + 1;
  else
    v15 = v14;
  if (v14 >= 0x7FFFFFFFFFFFFFFELL)
    v16 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v16 = v15;
  if (v16)
    v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>(a1 + 128, v16);
  else
    v17 = 0;
  v27 = &v17[2 * v13];
  v28 = &v17[2 * v16];
  *(_WORD *)v27 = v8;
  v26 = v27 + 2;
  v30 = *(char **)(a1 + 112);
  v29 = *(char **)(a1 + 120);
  if (v29 == v30)
    goto LABEL_46;
  do
  {
    v31 = *((_WORD *)v29 - 1);
    v29 -= 2;
    *((_WORD *)v27 - 1) = v31;
    v27 -= 2;
  }
  while (v29 != v30);
LABEL_45:
  v29 = *v10;
LABEL_46:
  *(_QWORD *)(a1 + 112) = v27;
  *(_QWORD *)(a1 + 120) = v26;
  *(_QWORD *)(a1 + 128) = v28;
  if (v29)
    operator delete(v29);
LABEL_48:
  *(_QWORD *)(a1 + 120) = v26;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1E0C01FC8](exception, 1);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1E05DA324(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100](uint64_t *a1, __int128 *a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t result;

  v3 = a1 + 17;
  v4 = a1[18];
  if (v4 >= a1[19])
  {
    result = std::vector<std::string>::__push_back_slow_path<std::string const&>(v3, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v3, a2);
    result = v4 + 24;
  }
  a1[18] = result;
  return result;
}

void std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  std::string *p_s;
  unint64_t v7;
  unint64_t v8;
  std::string::size_type size;
  std::string *v10;
  int v11;
  uint64_t v12;
  std::string v13;
  std::string __s;

  std::string::__init_with_size[abi:ne180100]<char *,char *>(&__s, a2, a3, a3 - a2);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_)
      goto LABEL_9;
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&__s.__r_.__value_.__s + 23))
      return;
    p_s = &__s;
  }
  std::__get_collation_name(&v13, (const char *)p_s);
  *(_OWORD *)a4 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  v7 = v13.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a4 + 16) = *((_QWORD *)&v13.__r_.__value_.__l + 2);
  v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8)
    goto LABEL_9;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_9;
    v10 = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
      return;
    v10 = &__s;
  }
  (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**(_QWORD **)(a1 + 16) + 32))(&v13, *(_QWORD *)(a1 + 16), v10, (char *)v10 + size);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(std::string *)a4 = v13;
  if ((*(char *)(a4 + 23) & 0x80000000) == 0)
  {
    v11 = *(unsigned __int8 *)(a4 + 23);
    if (v11 != 12 && v11 != 1)
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_25;
  }
  v12 = *(_QWORD *)(a4 + 8);
  if (v12 == 1 || v12 == 12)
  {
LABEL_25:
    std::string::operator=((std::string *)a4, &__s);
    goto LABEL_9;
  }
  **(_BYTE **)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
}

void sub_1E05DA4D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6;
  void **v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *__p[2];
  unsigned __int8 v12;

  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a2, a3, a3 - a2);
  v6 = v12;
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v7, (char *)v7 + v6);
  v8 = *(unsigned __int8 *)(a4 + 23);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0)
        v10 = (_BYTE *)a4;
      else
        v10 = *(_BYTE **)a4;
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(_BYTE **)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
    }
  }
  if ((char)v12 < 0)
    operator delete(__p[0]);
}

void sub_1E05DA5E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1E0C01FC8](exception, 2);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1E05DA638(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::regex_traits<char>::__lookup_classname<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, BOOL a4)
{
  unint64_t v6;
  void **v7;
  void **v8;
  uint64_t classname;
  void *__p[2];
  unsigned __int8 v12;

  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a2, a3, a3 - a2);
  v6 = v12;
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v7, (char *)v7 + v6);
  if ((v12 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  classname = std::__get_classname((const char *)v8, a4);
  if ((char)v12 < 0)
    operator delete(__p[0]);
  return classname;
}

void sub_1E05DA6E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  unint64_t *v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  _BYTE *v22;
  char v23;
  unint64_t v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  _BYTE *v29;
  char v30;
  _BYTE *v31;
  char v32;

  v2 = a2;
  if (*(_BYTE *)(a1 + 169))
  {
    v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
    v5 = *(_BYTE **)(a1 + 72);
    v4 = *(_QWORD *)(a1 + 80);
    if ((unint64_t)v5 >= v4)
    {
      v6 = (unint64_t *)(a1 + 64);
      v7 = *(_QWORD *)(a1 + 64);
      v8 = &v5[-v7];
      v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        v10 = v4 - v7;
        if (2 * v10 > v9)
          v9 = 2 * v10;
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
          v11 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v11 = v9;
        if (v11)
          v12 = operator new(v11);
        else
          v12 = 0;
        v20 = &v8[(_QWORD)v12];
        v21 = (char *)v12 + v11;
        v8[(_QWORD)v12] = v2;
        v19 = (uint64_t)&v8[(_QWORD)v12 + 1];
        if (v5 != (_BYTE *)v7)
        {
          v22 = &v5[~v7];
          do
          {
            v23 = *--v5;
            (v22--)[(_QWORD)v12] = v23;
          }
          while (v5 != (_BYTE *)v7);
LABEL_45:
          v5 = (_BYTE *)*v6;
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_22;
  }
  v6 = (unint64_t *)(a1 + 64);
  v5 = *(_BYTE **)(a1 + 72);
  v13 = *(_QWORD *)(a1 + 80);
  if (!*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      v24 = *v6;
      v25 = &v5[-*v6];
      v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        v27 = v13 - v24;
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
          v28 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
          v12 = operator new(v28);
        else
          v12 = 0;
        v20 = &v25[(_QWORD)v12];
        v21 = (char *)v12 + v28;
        v25[(_QWORD)v12] = v2;
        v19 = (uint64_t)&v25[(_QWORD)v12 + 1];
        if (v5 != (_BYTE *)v24)
        {
          v31 = &v5[~v24];
          do
          {
            v32 = *--v5;
            (v31--)[(_QWORD)v12] = v32;
          }
          while (v5 != (_BYTE *)v24);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *v5 = v2;
    v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v13)
    goto LABEL_22;
  v14 = *v6;
  v15 = &v5[-*v6];
  v16 = (unint64_t)(v15 + 1);
  if ((uint64_t)(v15 + 1) < 0)
    goto LABEL_50;
  v17 = v13 - v14;
  if (2 * v17 > v16)
    v16 = 2 * v17;
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL)
    v18 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v18 = v16;
  if (v18)
    v12 = operator new(v18);
  else
    v12 = 0;
  v20 = &v15[(_QWORD)v12];
  v21 = (char *)v12 + v18;
  v15[(_QWORD)v12] = v2;
  v19 = (uint64_t)&v15[(_QWORD)v12 + 1];
  if (v5 != (_BYTE *)v14)
  {
    v29 = &v5[~v14];
    do
    {
      v30 = *--v5;
      (v29--)[(_QWORD)v12] = v30;
    }
    while (v5 != (_BYTE *)v14);
    goto LABEL_45;
  }
LABEL_46:
  v12 = v20;
LABEL_47:
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 72) = v19;
  *(_QWORD *)(a1 + 80) = v21;
  if (v5)
    operator delete(v5);
LABEL_49:
  *(_QWORD *)(a1 + 72) = v19;
}

void std::regex_traits<char>::transform<std::__wrap_iter<char *>>(uint64_t a1, char *a2, char *a3)
{
  unint64_t v4;
  void **v5;
  void *__p[2];
  unsigned __int8 v7;

  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a2, a3, a3 - a2);
  v4 = v7;
  if ((v7 & 0x80u) == 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if ((v7 & 0x80u) != 0)
    v4 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v5, (char *)v5 + v4);
  if ((char)v7 < 0)
    operator delete(__p[0]);
}

void sub_1E05DA9B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1E0C01FC8](exception, 9);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1E05DAA04(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1E0C023A0);
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(*(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1E0C023A0);
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)a2 = -994;
  v2 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(_QWORD *)(v2 + 8) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(v2 + 16) = 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
  int v8;
  int v9;
  _QWORD *v14;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  uint64_t v17;
  unsigned int loop_count;
  std::__node<char> *v19;
  std::__node<char> *v20;

  v8 = __mexp_end;
  v9 = __mexp_begin;
  v14 = (_QWORD *)operator new();
  end = this->__end_;
  first = end->__first_;
  v14[1] = first;
  end->__first_ = 0;
  v17 = operator new();
  loop_count = this->__loop_count_;
  v19 = __s->__first_;
  *(_QWORD *)v17 = &unk_1EA999F60;
  *(_QWORD *)(v17 + 8) = v19;
  *(_QWORD *)(v17 + 16) = v14;
  *(_QWORD *)(v17 + 24) = __min;
  *(_QWORD *)(v17 + 32) = __max;
  *(_DWORD *)(v17 + 40) = loop_count;
  *(_DWORD *)(v17 + 44) = v9;
  *(_DWORD *)(v17 + 48) = v8;
  *(_BYTE *)(v17 + 52) = __greedy;
  __s->__first_ = 0;
  v20 = (std::__node<char> *)operator new();
  v20->__vftable = (std::__node<char>_vtbl *)&unk_1EA999FF0;
  v20[1].__vftable = (std::__node<char>_vtbl *)v17;
  this->__end_->__first_ = v20;
  this->__end_ = *(std::__owns_one_state<char> **)(v17 + 16);
  __s->__first_ = (std::__node<char> *)v17;
  ++this->__loop_count_;
}

void sub_1E05DACD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, int *a4)
{
  int v4;
  int v5;
  int v6;

  if (a2 != a3)
  {
    v4 = *a2;
    if ((v4 & 0xF8) == 0x30 || (v4 & 0xFE) == 0x38)
    {
      v5 = v4 - 48;
      *a4 = v5;
      if (++a2 == a3)
      {
        return a3;
      }
      else
      {
        while (1)
        {
          v6 = *a2;
          if ((v6 & 0xF8) != 0x30 && (v6 & 0xFE) != 0x38)
            break;
          if (v5 >= 214748364)
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
          v5 = v6 + 10 * v5 - 48;
          *a4 = v5;
          if (++a2 == a3)
            return a3;
        }
      }
    }
  }
  return a2;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1E0C01FC8](exception, 8);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1E05DADCC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1E0C01FC8](exception, 7);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1E05DAE18(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1EA999FC0;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1EA999FC0;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x1E0C023A0);
}

unsigned int *std::__loop<char>::__exec(unsigned int *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL4 v8;
  uint64_t v10;

  v2 = result[10];
  v3 = a2[7];
  v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 == -991)
  {
    v5 = *v4 + 1;
    *v4 = v5;
    v6 = *((_QWORD *)result + 3);
    v7 = *((_QWORD *)result + 4);
    v8 = v5 < v7;
    if (v5 < v7 && v5 >= v6)
    {
      v10 = *(_QWORD *)(v3 + 16 * v2 + 8);
      v8 = v5 < v7 && v10 != a2[2];
    }
    if (!v8 || v5 < v6)
    {
      *(_DWORD *)a2 = -994;
      if (!v8)
        goto LABEL_25;
LABEL_22:
      a2[10] = *((_QWORD *)result + 1);
      return std::__loop<char>::__init_repeat[abi:ne180100](result, a2);
    }
    goto LABEL_23;
  }
  *v4 = 0;
  if (*((_QWORD *)result + 4))
  {
    if (*((_QWORD *)result + 3))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_22;
    }
LABEL_23:
    *(_DWORD *)a2 = -992;
    return result;
  }
  *(_DWORD *)a2 = -994;
LABEL_25:
  a2[10] = *((_QWORD *)result + 2);
  return result;
}

unsigned int *std::__loop<char>::__exec_split(unsigned int *result, int a2, _QWORD *a3)
{
  *(_DWORD *)a3 = -994;
  if (*((unsigned __int8 *)result + 52) == a2)
  {
    a3[10] = *((_QWORD *)result + 2);
  }
  else
  {
    a3[10] = *((_QWORD *)result + 1);
    return std::__loop<char>::__init_repeat[abi:ne180100](result, a3);
  }
  return result;
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1EA999FC0;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1EA999FC0;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x1E0C023A0);
}

unsigned int *std::__loop<char>::__init_repeat[abi:ne180100](unsigned int *result, _QWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = result[11];
  *(_QWORD *)(a2[7] + 16 * result[10] + 8) = a2[2];
  v3 = result[12];
  if (v2 != v3)
  {
    v4 = v2 - 1;
    v5 = a2[3];
    v6 = v3 - 1 - v4;
    v7 = a2[4] + 24 * v4 + 8;
    do
    {
      *(_QWORD *)(v7 - 8) = v5;
      *(_QWORD *)v7 = v5;
      *(_BYTE *)(v7 + 8) = 0;
      v7 += 24;
      --v6;
    }
    while (v6);
  }
  return result;
}

void std::__repeat_one_loop<char>::~__repeat_one_loop()
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1EA999FC0;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1EA999FC0;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x1E0C023A0);
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;

  *(_DWORD *)a3 = -994;
  v3 = 8;
  if (a2)
    v3 = 16;
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + v3);
  return result;
}

void std::__empty_non_own_state<char>::~__empty_non_own_state()
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_RE_expression<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  do
  {
    v5 = a2;
    a2 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>(a1, a2, a3);
  }
  while (v5 != a2);
  return v5;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1E0C01FC8](exception, 15);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1E05DB30C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  unsigned int marked_count;
  unsigned __int8 *v8;

  if (a2 == a3)
    return (unsigned __int8 *)a2;
  end = a1->__end_;
  marked_count = a1->__marked_count_;
  v8 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v8 == (unsigned __int8 *)a2)
    return (unsigned __int8 *)a2;
  else
    return std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v8, (unsigned __int8 *)a3, end, marked_count + 1, a1->__marked_count_ + 1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  char *v6;
  char *v7;
  uint64_t v9;
  unsigned int marked_count;
  char *v11;
  _BOOL4 v12;
  uint64_t v13;

  v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__wrap_iter<char const*>>(a1, a2, a3);
  v7 = v6;
  if (a2 == v6 && a2 != a3 && a2 + 1 != a3)
  {
    v9 = (uint64_t)v6;
    if (*a2 == 92)
      v9 = (uint64_t)&a2[2 * (a2[1] == 40)];
    if ((char *)v9 == a2)
    {
      if (*a2 == 92)
      {
        v12 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(a1, a2[1]);
        v13 = 2;
        if (!v12)
          v13 = 0;
        return &a2[v13];
      }
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
      marked_count = a1->__marked_count_;
      v11 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_RE_expression<std::__wrap_iter<char const*>>((uint64_t)a1, v9, (uint64_t)a3);
      if (v11 == a3 || v11 + 1 == a3 || *v11 != 92 || v11[1] != 41)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      v7 = v11 + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, marked_count);
    }
  }
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end)
{
  unsigned __int8 *v6;
  unsigned int v7;
  unsigned int v8;
  int v11;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  size_t v18;
  size_t v19;
  size_t v20;
  size_t v21;
  std::basic_regex<char> *v22;
  int v24;
  int v25;

  v6 = a2;
  if (a2 != a3)
  {
    v7 = __mexp_end;
    v8 = __mexp_begin;
    v11 = *a2;
    if (v11 == 42)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(this, 0, 0xFFFFFFFFFFFFFFFFLL, __s, __mexp_begin, __mexp_end, 1);
      return ++v6;
    }
    if (a2 + 1 != a3 && v11 == 92 && a2[1] == 123)
    {
      v13 = a2 + 2;
      v25 = 0;
      v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>((uint64_t)this, a2 + 2, a3, &v25);
      if (v13 == v14)
        goto LABEL_16;
      if (v14 != a3)
      {
        v15 = v14 + 1;
        v16 = *v14;
        if (v16 == 44)
        {
          v24 = -1;
          v17 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>((uint64_t)this, v15, a3, &v24);
          if (v17 != a3 && v17 + 1 != a3 && *v17 == 92 && v17[1] == 125)
          {
            v19 = v24;
            v18 = v25;
            if (v24 == -1)
            {
              v19 = -1;
            }
            else if (v24 < v25)
            {
LABEL_16:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
            }
            v6 = &v17[2 * (v17[1] == 125)];
            v20 = v8;
            v21 = v7;
            v22 = this;
LABEL_23:
            std::basic_regex<char,std::regex_traits<char>>::__push_loop(v22, v18, v19, __s, v20, v21, 1);
            return v6;
          }
        }
        else if (v15 != a3 && v16 == 92 && *v15 == 125)
        {
          v6 = v14 + 2;
          v18 = v25;
          v20 = v8;
          v21 = v7;
          v22 = this;
          v19 = v25;
          goto LABEL_23;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
  }
  return v6;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, char *a2, char *a3)
{
  int v6;
  char *result;
  std::__node<char> *v9;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if (a2 == a3)
  {
    result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<std::__wrap_iter<char const*>>(this, a2, a3);
    if (result != a2)
      return result;
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, a2, a3);
  }
  v6 = *a2;
  if ((a2 + 1 != a3 || v6 != 36)
    && ((v6 - 46) > 0x2E || ((1 << (v6 - 46)) & 0x600000000001) == 0))
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v6);
    return a2 + 1;
  }
  result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<std::__wrap_iter<char const*>>(this, a2, a3);
  if (result != a2)
    return result;
  if (*a2 != 46)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, a2, a3);
  v9 = (std::__node<char> *)operator new();
  end = this->__end_;
  first = end->__first_;
  v9->__vftable = (std::__node<char>_vtbl *)&unk_1EA99A0C8;
  v9[1].__vftable = (std::__node<char>_vtbl *)first;
  end->__first_ = v9;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
  return a2 + 1;
}

_BYTE *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v3;
  int v4;

  v3 = a2;
  if (a2 != a3 && a2 + 1 != a3 && *a2 == 92)
  {
    v4 = (char)a2[1];
    if ((v4 - 36) <= 0x3A && ((1 << (a2[1] - 36)) & 0x580000000000441) != 0)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v4);
      v3 += 2;
    }
  }
  return v3;
}

void (__cdecl ***std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1E0C023A0);
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  _BYTE *v2;
  uint64_t v3;

  v2 = *(_BYTE **)(a2 + 16);
  if (v2 == *(_BYTE **)(a2 + 24) || !*v2)
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8)
    return 0;
  if (a2 - 48 > this->__marked_count_)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
  return 1;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;

  v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  do
  {
    v7 = v6;
    v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)v6, a3);
  }
  while (v7 != v6);
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::__owns_one_state<char> *v6;
  int v7;
  char *v8;
  unsigned __int8 *v9;
  int locale_low;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unsigned int v16;
  std::basic_regex<char> *v17;
  std::basic_regex<char> *v18;

  v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 28);
  v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_ERE<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
  v9 = (unsigned __int8 *)v8;
  if (v8 != (char *)a2 || v8 == (char *)a3)
    goto LABEL_12;
  locale_low = SLOBYTE(a2->__traits_.__loc_.__locale_);
  switch(locale_low)
  {
    case '$':
      v11 = operator new();
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
      goto LABEL_8;
    case '(':
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression((std::basic_regex<char> *)a1);
      v16 = *(_DWORD *)(a1 + 28);
      ++*(_DWORD *)(a1 + 36);
      v17 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 1, a3);
      if (v17 == a3 || (v18 = v17, LOBYTE(v17->__traits_.__loc_.__locale_) != 41))
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression((std::basic_regex<char> *)a1, v16);
      --*(_DWORD *)(a1 + 36);
      v9 = (unsigned __int8 *)&v18->__traits_.__loc_.__locale_ + 1;
LABEL_12:
      if (v9 != (unsigned __int8 *)a2)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v9, (unsigned __int8 *)a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
      return (unsigned __int8 *)a2;
    case '^':
      v11 = operator new();
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
LABEL_8:
      v15 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)v11 = v14 + 16;
      *(_QWORD *)(v11 + 8) = v15;
      *(_BYTE *)(v11 + 16) = v12;
      *(_QWORD *)(v13 + 8) = v11;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v9 = (unsigned __int8 *)&a2->__traits_.__loc_.__locale_ + 1;
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v9, (unsigned __int8 *)a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
  }
  return (unsigned __int8 *)a2;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_ERE<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  char *result;
  std::__node<char> *v7;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  result = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (result == (char *)a2)
  {
    result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__wrap_iter<char const*>>((uint64_t)a1, (char *)a2, (char *)a3);
    if (result == (char *)a2)
    {
      if (a2 == a3 || LOBYTE(a2->__traits_.__loc_.__locale_) != 46)
      {
        return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)a1, (char *)a2, (char *)a3);
      }
      else
      {
        v7 = (std::__node<char> *)operator new();
        end = a1->__end_;
        first = end->__first_;
        v7->__vftable = (std::__node<char>_vtbl *)&unk_1EA99A0C8;
        v7[1].__vftable = (std::__node<char>_vtbl *)first;
        end->__first_ = v7;
        a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
        return (char *)&a2->__traits_.__loc_.__locale_ + 1;
      }
    }
  }
  return result;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *v3;
  int locale_low;
  uint64_t v5;

  v3 = this;
  if (this != a3)
  {
    locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
    v5 = (locale_low - 36);
    if (v5 > 0x3A)
      goto LABEL_8;
    if (((1 << (locale_low - 36)) & 0x5800000080004D1) != 0)
      return v3;
    if (v5 == 5)
    {
      if (a1->__open_count_)
        return v3;
    }
    else
    {
LABEL_8:
      if ((locale_low - 123) < 2)
        return v3;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
    return (std::basic_regex<char> *)((char *)v3 + 1);
  }
  return v3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  char *v4;
  int v5;
  char v6;
  BOOL v7;
  _BOOL4 v9;
  uint64_t v10;

  v3 = a2;
  if (a2 != a3)
  {
    v4 = a2 + 1;
    if (v3 + 1 != a3 && *v3 == 92)
    {
      v5 = *v4;
      v6 = *v4;
      v7 = (v5 - 36) > 0x3A || ((1 << (*v4 - 36)) & 0x5800000080004F1) == 0;
      if (v7 && (v5 - 123) >= 3)
      {
        if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
        {
          return std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v4, a3, 0);
        }
        else
        {
          v9 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v6);
          v10 = 2;
          if (!v9)
            v10 = 0;
          v3 += v10;
        }
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v6);
        v3 += 2;
      }
    }
  }
  return v3;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  _QWORD *v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD v29[2];
  char v30;

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = operator new(0x40uLL);
  v29[0] = v17;
  v29[1] = a1 + 16;
  *v17 = 0;
  v17[1] = v10;
  v18 = *a4;
  v19 = **a4;
  v17[4] = *((_QWORD *)*a4 + 2);
  *((_OWORD *)v17 + 1) = v19;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = 0;
  v17[6] = 0;
  v17[7] = 0;
  v17[5] = 0;
  v30 = 1;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v26)
  {
    *(_QWORD *)v29[0] = *v26;
    *v26 = v29[0];
  }
  else
  {
    *(_QWORD *)v29[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v29[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v29[0])
    {
      v27 = *(_QWORD *)(*(_QWORD *)v29[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v27 >= v11)
          v27 %= v11;
      }
      else
      {
        v27 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v29[0];
    }
  }
  i = (unsigned __int8 *)v29[0];
  v29[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v29, 0);
  return i;
}

void sub_1E05DBFC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::default_delete<MIL::Attributes::BuildInfo::Impl>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(a2 + 96);
    std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy(a2 + 72, *(char **)(a2 + 80));
    if (*(char *)(a2 + 71) < 0)
      operator delete(*(void **)(a2 + 48));
    if (*(char *)(a2 + 47) < 0)
      operator delete(*(void **)(a2 + 24));
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    JUMPOUT(0x1E0C023A0);
  }
}

void std::__function::__func<MIL::Attributes::BuildInfo::GetPrivateInformation(void)::$_0,std::allocator<MIL::Attributes::BuildInfo::GetPrivateInformation(void)::$_0>,BOOL ()(std::string const&)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<MIL::Attributes::BuildInfo::GetPrivateInformation(void)::$_0,std::allocator<MIL::Attributes::BuildInfo::GetPrivateInformation(void)::$_0>,BOOL ()(std::string const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1EA99A110;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MIL::Attributes::BuildInfo::GetPrivateInformation(void)::$_0,std::allocator<MIL::Attributes::BuildInfo::GetPrivateInformation(void)::$_0>,BOOL ()(std::string const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1EA99A110;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<MIL::Attributes::BuildInfo::GetPrivateInformation(void)::$_0,std::allocator<MIL::Attributes::BuildInfo::GetPrivateInformation(void)::$_0>,BOOL ()(std::string const&)>::operator()(uint64_t a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::match_results<const char *> __p;

  v2 = *(_QWORD *)(a1 + 8);
  memset(&__p.__prefix_, 0, 17);
  memset(&__p.__suffix_, 0, 17);
  __p.__ready_ = 0;
  __p.__position_start_ = 0;
  memset(&__p, 0, 41);
  v3 = a2[23];
  v4 = *((_QWORD *)a2 + 1);
  if ((v3 & 0x80u) != 0)
  {
    a2 = *(char **)a2;
    v3 = v4;
  }
  v5 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(v2, a2, &a2[v3], &__p, 0);
  if (__p.__matches_.__begin_)
  {
    __p.__matches_.__end_ = __p.__matches_.__begin_;
    operator delete(__p.__matches_.__begin_);
  }
  return v5;
}

void sub_1E05DC14C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<MIL::Attributes::BuildInfo::GetPrivateInformation(void)::$_0,std::allocator<MIL::Attributes::BuildInfo::GetPrivateInformation(void)::$_0>,BOOL ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Attributes::BuildInfo::GetPrivateInformation(void)::$_0,std::allocator<MIL::Attributes::BuildInfo::GetPrivateInformation(void)::$_0>,BOOL ()(std::string const&)>::target_type()
{
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(uint64_t a1, char *__f, char *__l, std::match_results<const char *> *this, int a5)
{
  int v9;
  std::match_results<const char *>::value_type *p_unmatched;
  const char *first;
  const char *second;
  uint64_t result;
  int v14;
  const char *v15;
  int v16;
  std::vector<std::csub_match>::pointer end;
  std::vector<std::csub_match>::pointer begin;

  if ((a5 & 0x80) != 0)
    v9 = a5 & 0xFFA;
  else
    v9 = a5;
  std::match_results<char const*>::__init(this, *(_DWORD *)(a1 + 28) + 1, __f, __l, (unsigned __int16)(v9 & 0x800) >> 11);
  if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, __f, __l, (uint64_t *)this, v9, (v9 & 0x800) == 0))
  {
    if (this->__matches_.__end_ == this->__matches_.__begin_)
      p_unmatched = &this->__unmatched_;
    else
      p_unmatched = this->__matches_.__begin_;
LABEL_8:
    first = p_unmatched->first;
    this->__prefix_.second = p_unmatched->first;
    this->__prefix_.matched = this->__prefix_.first != first;
    second = p_unmatched->second;
    this->__suffix_.first = second;
    this->__suffix_.matched = second != this->__suffix_.second;
    return 1;
  }
  if (__f != __l && (v9 & 0x40) == 0)
  {
    v14 = v9 | 0x80;
    v15 = __f + 1;
    if (v15 != __l)
    {
      while (1)
      {
        std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__matches_.__end_ - (char *)this->__matches_.__begin_) >> 3), &this->__unmatched_);
        v16 = std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, v15, __l, (uint64_t *)this, v14, 0);
        begin = this->__matches_.__begin_;
        end = this->__matches_.__end_;
        if (v16)
          break;
        std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3), &this->__unmatched_);
        if (++v15 == __l)
          goto LABEL_14;
      }
      if (end == begin)
        p_unmatched = &this->__unmatched_;
      else
        p_unmatched = this->__matches_.__begin_;
      goto LABEL_8;
    }
LABEL_14:
    std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__matches_.__end_ - (char *)this->__matches_.__begin_) >> 3), &this->__unmatched_);
    if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, __l, __l, (uint64_t *)this, v14, 0))
    {
      if (this->__matches_.__end_ == this->__matches_.__begin_)
        p_unmatched = &this->__unmatched_;
      else
        p_unmatched = this->__matches_.__begin_;
      goto LABEL_8;
    }
  }
  result = 0;
  this->__matches_.__end_ = this->__matches_.__begin_;
  return result;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0)
    return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, a2, a3, a4, a5, a6);
  if (*(_DWORD *)(a1 + 28))
    return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, a2, a3, a4, a5, a6);
  return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)a2, (uint64_t)a3, a4, a5, a6);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  BOOL v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  unint64_t v43;
  _QWORD *v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  char v53;
  _BYTE v55[40];
  __int128 v56;
  void *__p[2];
  _QWORD v58[3];
  __int128 v59;
  __int128 v60;
  __int128 v61;

  v60 = 0u;
  v61 = 0u;
  v59 = 0u;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    *(_DWORD *)v55 = 0;
    memset(&v55[8], 0, 32);
    v56 = 0uLL;
    *(_OWORD *)__p = 0uLL;
    memset(v58, 0, 21);
    std::deque<std::__state<char>>::push_back(&v59, (uint64_t)v55);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(_QWORD *)&v55[32])
    {
      *(_QWORD *)&v56 = *(_QWORD *)&v55[32];
      operator delete(*(void **)&v55[32]);
    }
    v12 = *((_QWORD *)&v59 + 1);
    v13 = *((_QWORD *)&v61 + 1) + v61 - 1;
    v14 = v13 / 0x2A;
    v15 = *(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * (v13 / 0x2A));
    v16 = 3 * (v13 % 0x2A);
    v17 = v15 + 32 * v16;
    *(_DWORD *)v17 = 0;
    *(_QWORD *)(v17 + 8) = a2;
    *(_QWORD *)(*(_QWORD *)(v12 + 8 * v14) + 32 * v16 + 16) = a2;
    *(_QWORD *)(*(_QWORD *)(v12 + 8 * v14) + 32 * v16 + 24) = a3;
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(*(_QWORD *)(v12 + 8 * v14) + 32 * v16 + 56), *(unsigned int *)(a1 + 32));
    v53 = 0;
    v18 = 0;
    v51 = 0;
    v52 = a2;
    v19 = a3 - a2;
    v20 = *((_QWORD *)&v61 + 1);
    v21 = *((_QWORD *)&v59 + 1);
    v22 = *((_QWORD *)&v61 + 1) + v61 - 1;
    v23 = v22 / 0x2A;
    v24 = 3 * (v22 % 0x2A);
    *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * v23) + 32 * v24 + 80) = v6;
    v25 = *(_QWORD *)(v21 + 8 * v23) + 32 * v24;
    *(_DWORD *)(v25 + 88) = a5;
    *(_BYTE *)(v25 + 92) = a6;
    while (2)
    {
      if ((++v18 & 0xFFF) == 0 && (int)(v18 >> 12) >= (int)v19)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      v27 = v20 + v61 - 1;
      v28 = *(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * (v27 / 0x2A));
      v29 = v27 % 0x2A;
      v30 = v28 + 96 * (v27 % 0x2A);
      v32 = (_QWORD *)(v30 + 80);
      v31 = *(_QWORD *)(v30 + 80);
      if (v31)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v31 + 16))(v31, v28 + 96 * v29);
      switch(*(_DWORD *)v30)
      {
        case 0xFFFFFC18:
          v33 = *(_QWORD *)(v28 + 96 * v29 + 16);
          v35 = (a5 & 0x1000) == 0 || v33 == a3;
          v36 = v33 != v52 || (a5 & 0x20) == 0;
          if (!v36 || !v35)
            goto LABEL_37;
          v37 = v33 - *(_QWORD *)(v28 + 96 * v29 + 8);
          v38 = v51;
          if ((v53 & (v51 >= v37)) == 0)
            v38 = v37;
          if (v38 != v19)
          {
            v51 = v38;
            std::deque<std::__state<char>>::pop_back(&v59);
            v53 = 1;
            goto LABEL_38;
          }
          v39 = (void **)*((_QWORD *)&v59 + 1);
          v40 = v60;
          if ((_QWORD)v60 == *((_QWORD *)&v59 + 1))
          {
            v40 = *((_QWORD *)&v59 + 1);
          }
          else
          {
            v41 = (_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * ((unint64_t)v61 / 0x2A));
            v42 = (_QWORD *)(*v41 + 96 * ((unint64_t)v61 % 0x2A));
            v43 = *(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * ((*((_QWORD *)&v61 + 1) + (_QWORD)v61) / 0x2AuLL))
                + 96 * ((*((_QWORD *)&v61 + 1) + (_QWORD)v61) % 0x2AuLL);
            if (v42 != (_QWORD *)v43)
            {
              do
              {
                std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)&v61 + 8, v42);
                v42 += 12;
                if ((_QWORD *)((char *)v42 - *v41) == (_QWORD *)4032)
                {
                  v44 = (_QWORD *)v41[1];
                  ++v41;
                  v42 = v44;
                }
              }
              while (v42 != (_QWORD *)v43);
              v39 = (void **)*((_QWORD *)&v59 + 1);
              v40 = v60;
            }
          }
          *((_QWORD *)&v61 + 1) = 0;
          v47 = v40 - (_QWORD)v39;
          if (v47 >= 0x11)
          {
            do
            {
              operator delete(*v39);
              v39 = (void **)(*((_QWORD *)&v59 + 1) + 8);
              *((_QWORD *)&v59 + 1) = v39;
              v47 = v60 - (_QWORD)v39;
            }
            while ((_QWORD)v60 - (_QWORD)v39 > 0x10uLL);
          }
          if (v47 >> 3 == 1)
          {
            v48 = 21;
          }
          else
          {
            if (v47 >> 3 != 2)
              goto LABEL_53;
            v48 = 42;
          }
          *(_QWORD *)&v61 = v48;
LABEL_53:
          v53 = 1;
          v51 = v19;
LABEL_38:
          v20 = *((_QWORD *)&v61 + 1);
          if (*((_QWORD *)&v61 + 1))
            continue;
          if ((v53 & 1) != 0)
          {
            v49 = *a4;
            *(_QWORD *)v49 = v52;
            *(_QWORD *)(v49 + 8) = v52 + v51;
            v6 = 1;
            *(_BYTE *)(v49 + 16) = 1;
          }
          else
          {
            v6 = 0;
          }
          break;
        case 0xFFFFFC19:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_38;
        case 0xFFFFFC1D:
          std::deque<std::__state<char>>::push_front((uint64_t)&v59, v28 + 96 * v29);
          goto LABEL_37;
        case 0xFFFFFC1F:
LABEL_37:
          std::deque<std::__state<char>>::pop_back(&v59);
          goto LABEL_38;
        case 0xFFFFFC20:
          v45 = *(_OWORD *)(v30 + 16);
          *(_OWORD *)v55 = *(_OWORD *)v30;
          *(_OWORD *)&v55[16] = v45;
          v56 = 0uLL;
          *(_QWORD *)&v55[32] = 0;
          std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v55[32], *(__int128 **)(v28 + 96 * v29 + 32), *(__int128 **)(v28 + 96 * v29 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v28 + 96 * v29 + 40) - *(_QWORD *)(v28 + 96 * v29 + 32)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v58[0] = 0;
          std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *(__int128 **)(v28 + 96 * v29 + 56), *(__int128 **)(v28 + 96 * v29 + 64), (uint64_t)(*(_QWORD *)(v28 + 96 * v29 + 64) - *(_QWORD *)(v28 + 96 * v29 + 56)) >> 4);
          v46 = *v32;
          *(_QWORD *)((char *)&v58[1] + 5) = *(_QWORD *)(v30 + 85);
          v58[1] = v46;
          (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)*v32 + 24))(*v32, 1, v28 + 96 * v29);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v58[1] + 24))(v58[1], 0, v55);
          std::deque<std::__state<char>>::push_back(&v59, (uint64_t)v55);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if (*(_QWORD *)&v55[32])
          {
            *(_QWORD *)&v56 = *(_QWORD *)&v55[32];
            operator delete(*(void **)&v55[32]);
          }
          goto LABEL_38;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      break;
    }
  }
  std::deque<std::__state<char>>::~deque[abi:ne180100](&v59);
  return v6;
}

void sub_1E05DC890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  uint64_t v22;

  std::deque<std::__state<char>>::~deque[abi:ne180100]((_QWORD *)(v22 - 144));
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  _OWORD *v11;
  unsigned int v12;
  const char *v13;
  _OWORD *v14;
  BOOL v15;
  uint64_t v16;
  _QWORD *v17;
  _BYTE *v18;
  const char *v19;
  _OWORD *v20;
  __int128 v21;
  void *v22;
  _OWORD *v23;
  __int128 v24;
  uint64_t v25;
  const char *v26;
  const char *v27;
  __int128 v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  _OWORD *v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t *v41;
  const char *v42;
  char v43;
  _BYTE v46[56];
  void *__p[2];
  _QWORD v48[4];
  std::vector<std::csub_match>::value_type __x;
  _BYTE v50[40];
  __int128 v51;
  void *v52[6];
  _OWORD *v53;
  _OWORD *v54;
  _QWORD v55[3];

  v53 = 0;
  v54 = 0;
  v55[0] = 0;
  *(_DWORD *)v50 = 0;
  memset(&v50[8], 0, 32);
  v51 = 0u;
  memset(v52, 0, 37);
  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
    goto LABEL_43;
  __x.first = a3;
  __x.second = a3;
  __x.matched = 0;
  *(_DWORD *)v46 = 0;
  memset(&v46[8], 0, 48);
  *(_OWORD *)__p = 0uLL;
  memset(v48, 0, 21);
  v54 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v53, (uint64_t)v46);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (*(_QWORD *)&v46[32])
  {
    *(_QWORD *)&v46[40] = *(_QWORD *)&v46[32];
    operator delete(*(void **)&v46[32]);
  }
  v41 = a4;
  v11 = v54;
  *((_DWORD *)v54 - 24) = 0;
  *((_QWORD *)v11 - 11) = a2;
  *((_QWORD *)v11 - 10) = a2;
  *((_QWORD *)v11 - 9) = a3;
  std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v11 - 4), *(unsigned int *)(a1 + 28), &__x);
  std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)((char *)v54 - 40), *(unsigned int *)(a1 + 32));
  v42 = 0;
  v43 = 0;
  v12 = 0;
  v13 = (const char *)(a3 - a2);
  v14 = v54;
  *((_QWORD *)v54 - 2) = v6;
  *((_DWORD *)v14 - 2) = a5;
  *((_BYTE *)v14 - 4) = a6;
  do
  {
    v15 = (++v12 & 0xFFF) != 0 || (int)(v12 >> 12) < (int)v13;
    if (!v15)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    v17 = v14 - 1;
    v16 = *((_QWORD *)v14 - 2);
    v18 = v14 - 6;
    if (v16)
      (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v16 + 16))(v16, v14 - 6);
    switch(*(_DWORD *)v18)
    {
      case 0xFFFFFC18:
        v19 = (const char *)*((_QWORD *)v14 - 10);
        if ((a5 & 0x20) != 0 && v19 == a2 || (a5 & 0x1000) != 0 && v19 != a3)
          goto LABEL_19;
        v26 = &v19[-*((_QWORD *)v14 - 11)];
        v27 = v42;
        if ((v43 & ((uint64_t)v42 >= (uint64_t)v26)) == 0)
        {
          v28 = *(v14 - 5);
          *(_OWORD *)v50 = *(_OWORD *)v18;
          *(_OWORD *)&v50[16] = v28;
          if (v50 != v18)
          {
            std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v50[32], *((__int128 **)v14 - 8), *((__int128 **)v14 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v14 - 7) - *((_QWORD *)v14 - 8)) >> 3));
            std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(v52, *((uint64_t **)v14 - 5), *((uint64_t **)v14 - 4), (uint64_t)(*((_QWORD *)v14 - 4) - *((_QWORD *)v14 - 5)) >> 4);
          }
          v29 = (void *)*v17;
          *(void **)((char *)&v52[3] + 5) = *(void **)((char *)v14 - 11);
          v52[3] = v29;
          v27 = v26;
        }
        v30 = v54;
        if (v27 == v13)
        {
          v31 = (uint64_t)v53;
          while (v30 != (_QWORD *)v31)
          {
            v30 -= 12;
            std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v55, v30);
          }
          v54 = (_OWORD *)v31;
          v43 = 1;
          v42 = (const char *)(a3 - a2);
        }
        else
        {
          v42 = v27;
          v32 = v54 - 6;
          std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v55, (_QWORD *)v54 - 12);
          v54 = v32;
          v43 = 1;
        }
        break;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        break;
      case 0xFFFFFC1F:
LABEL_19:
        v20 = v54 - 6;
        std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v55, (_QWORD *)v54 - 12);
        v54 = v20;
        break;
      case 0xFFFFFC20:
        v21 = *(v14 - 5);
        *(_OWORD *)v46 = *(_OWORD *)v18;
        *(_OWORD *)&v46[16] = v21;
        memset(&v46[32], 0, 24);
        std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v46[32], *((__int128 **)v14 - 8), *((__int128 **)v14 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v14 - 7) - *((_QWORD *)v14 - 8)) >> 3));
        __p[0] = 0;
        __p[1] = 0;
        v48[0] = 0;
        std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((__int128 **)v14 - 5), *((__int128 **)v14 - 4), (uint64_t)(*((_QWORD *)v14 - 4) - *((_QWORD *)v14 - 5)) >> 4);
        v22 = (void *)*v17;
        *(_QWORD *)((char *)&v48[1] + 5) = *(_QWORD *)((char *)v14 - 11);
        v48[1] = v22;
        (*(void (**)(_QWORD, uint64_t, _OWORD *))(*(_QWORD *)*v17 + 24))(*v17, 1, v14 - 6);
        (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v48[1] + 24))(v48[1], 0, v46);
        v23 = v54;
        if ((unint64_t)v54 >= v55[0])
        {
          v54 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v53, (uint64_t)v46);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        else
        {
          v24 = *(_OWORD *)&v46[16];
          *v54 = *(_OWORD *)v46;
          v23[1] = v24;
          *((_QWORD *)v23 + 4) = 0;
          *((_QWORD *)v23 + 5) = 0;
          *((_QWORD *)v23 + 6) = 0;
          *((_QWORD *)v23 + 7) = 0;
          v23[2] = *(_OWORD *)&v46[32];
          *((_QWORD *)v23 + 6) = *(_QWORD *)&v46[48];
          memset(&v46[32], 0, 24);
          *((_QWORD *)v23 + 8) = 0;
          *((_QWORD *)v23 + 9) = 0;
          *(_OWORD *)((char *)v23 + 56) = *(_OWORD *)__p;
          *((_QWORD *)v23 + 9) = v48[0];
          __p[0] = 0;
          __p[1] = 0;
          v48[0] = 0;
          v25 = v48[1];
          *(_QWORD *)((char *)v23 + 85) = *(_QWORD *)((char *)&v48[1] + 5);
          *((_QWORD *)v23 + 10) = v25;
          v54 = v23 + 6;
        }
        if (*(_QWORD *)&v46[32])
        {
          *(_QWORD *)&v46[40] = *(_QWORD *)&v46[32];
          operator delete(*(void **)&v46[32]);
        }
        break;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
    v14 = v54;
  }
  while (v53 != v54);
  if ((v43 & 1) != 0)
  {
    v33 = *v41;
    *(_QWORD *)v33 = a2;
    *(_QWORD *)(v33 + 8) = &v42[(_QWORD)a2];
    *(_BYTE *)(v33 + 16) = 1;
    if ((_QWORD)v51 != *(_QWORD *)&v50[32])
    {
      v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v51 - *(_QWORD *)&v50[32]) >> 3);
      v35 = (_BYTE *)(*(_QWORD *)&v50[32] + 16);
      v36 = 1;
      do
      {
        v37 = v33 + 24 * v36;
        *(_OWORD *)v37 = *((_OWORD *)v35 - 1);
        v38 = *v35;
        v35 += 24;
        *(_BYTE *)(v37 + 16) = v38;
        v15 = v34 > v36++;
      }
      while (v15);
    }
    v39 = 1;
  }
  else
  {
LABEL_43:
    v39 = 0;
  }
  if (v52[0])
  {
    v52[1] = v52[0];
    operator delete(v52[0]);
  }
  if (*(_QWORD *)&v50[32])
  {
    *(_QWORD *)&v51 = *(_QWORD *)&v50[32];
    operator delete(*(void **)&v50[32]);
  }
  *(_QWORD *)v50 = &v53;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v50);
  return v39;
}

void sub_1E05DCDE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;

  std::__state<char>::~__state(&a19);
  std::__state<char>::~__state(&a35);
  a35 = v35 - 120;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  _Unwind_Resume(a1);
}

__n128 std::deque<std::__state<char>>::push_back(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __n128 result;
  uint64_t v11;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 42 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::__state<char>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x2A)) + 96 * (v7 % 0x2A);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 16) = v9;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v8 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(v8 + 56) = 0;
  *(_QWORD *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 72) = 0;
  result = *(__n128 *)(a2 + 56);
  *(__n128 *)(v8 + 56) = result;
  *(_QWORD *)(v8 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v11 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v8 + 85) = *(_QWORD *)(a2 + 85);
  *(_QWORD *)(v8 + 80) = v11;
  ++a1[5];
  return result;
}

uint64_t std::deque<std::__state<char>>::pop_back(_QWORD *a1)
{
  _QWORD *v2;
  unint64_t v3;

  v2 = a1 + 5;
  v3 = a1[5] + a1[4] - 1;
  std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)(a1 + 5), (_QWORD *)(*(_QWORD *)(a1[1] + 8 * (v3 / 0x2A)) + 96 * (v3 % 0x2A)));
  --*v2;
  return std::deque<std::__state<char>>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
}

int64x2_t std::deque<std::__state<char>>::push_front(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  int64x2_t result;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    std::deque<std::__state<char>>::__add_front_capacity((void **)a1);
    v4 = *(_QWORD *)(a1 + 32);
  }
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (_QWORD *)(v5 + 8 * (v4 / 0x2A));
  v7 = *v6 + 96 * (v4 % 0x2A);
  if (*(_QWORD *)(a1 + 16) == v5)
    v7 = 0;
  if (v7 == *v6)
    v7 = *(v6 - 1) + 4032;
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v7 - 96) = *(_OWORD *)a2;
  *(_OWORD *)(v7 - 80) = v8;
  *(_QWORD *)(v7 - 56) = 0;
  *(_QWORD *)(v7 - 48) = 0;
  *(_QWORD *)(v7 - 64) = 0;
  *(_OWORD *)(v7 - 64) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v7 - 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(v7 - 40) = 0;
  *(_QWORD *)(v7 - 32) = 0;
  *(_QWORD *)(v7 - 24) = 0;
  *(_OWORD *)(v7 - 40) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(v7 - 24) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v9 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v7 - 11) = *(_QWORD *)(a2 + 85);
  *(_QWORD *)(v7 - 16) = v9;
  result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_1E0B02280);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

void std::deque<std::__state<char>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x2A;
  v4 = v2 - 42;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFC0uLL);
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFC0uLL);
  std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1E05DD380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *> &>::push_back(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *> &>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

uint64_t std::deque<std::__state<char>>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 42 * ((v2 - v3) >> 3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x2A)
    a2 = 1;
  if (v5 < 0x54)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void std::deque<std::__state<char>>::__add_front_capacity(void **a1)
{
  _BYTE *v2;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  void *__p;
  char *v43;
  char *v44;
  char *v45;
  _QWORD *v46;

  v2 = a1[1];
  v3 = a1[2];
  v4 = (v3 - v2) >> 3;
  if (v3 == v2)
    v5 = 0;
  else
    v5 = 42 * v4 - 1;
  v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(_QWORD)a1[5]] < 0x2A)
  {
    v7 = (uint64_t)(a1 + 3);
    v8 = a1[3];
    v9 = *a1;
    v10 = v8 - (_BYTE *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9)
        v11 = 1;
      else
        v11 = v10 >> 2;
      v46 = a1 + 3;
      __p = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v7, v11);
      v43 = (char *)__p;
      v44 = (char *)__p;
      v45 = (char *)__p + 8 * v12;
      v41 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *> &>::push_back(&__p, &v41);
      v13 = (char *)a1[1];
      v14 = v44;
      if (v13 == a1[2])
      {
        v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            v15 = v43 - (_BYTE *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p)
                v23 = 1;
              else
                v23 = (v14 - (_BYTE *)__p) >> 2;
              v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v46, v23);
              v26 = v43;
              v14 = &v24[8 * (v23 >> 2)];
              v27 = v44 - v43;
              if (v44 != v43)
              {
                v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                v28 = 8 * (v27 >> 3);
                v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  v30 = *(_QWORD *)v26;
                  v26 += 8;
                  *(_QWORD *)v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              v31 = __p;
              __p = v24;
              v43 = &v24[8 * (v23 >> 2)];
              v44 = v14;
              v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                v14 = v44;
              }
            }
            else
            {
              v16 = v15 >> 3;
              v17 = v15 >> 3 < -1;
              v18 = (v15 >> 3) + 2;
              if (v17)
                v19 = v18;
              else
                v19 = v16 + 1;
              v20 = &v43[-8 * (v19 >> 1)];
              v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                v14 = v43;
              }
              v22 = &v14[-8 * (v19 >> 1)];
              v14 = &v20[v21];
              v43 = v22;
              v44 = &v20[v21];
            }
          }
          v32 = *(_QWORD *)v13;
          v13 += 8;
          *(_QWORD *)v14 = v32;
          v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        v33 = (char *)a1[1];
      }
      v36 = *a1;
      v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __p = v36;
      v43 = v33;
      v38 = (char *)a1[3];
      v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      v44 = v13;
      v45 = v38;
      if (v14 - v37 == 8)
        v40 = 21;
      else
        v40 = (uint64_t)a1[4] + 42;
      a1[4] = (void *)v40;
      if (v13 != v33)
        v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v36)
        operator delete(v36);
    }
    else
    {
      if (v2 == v9)
      {
        __p = operator new(0xFC0uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(a1, &__p);
        v34 = a1[2];
        __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        __p = operator new(0xFC0uLL);
      }
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)a1, &__p);
      if ((_BYTE *)a1[2] - (_BYTE *)a1[1] == 8)
        v35 = 21;
      else
        v35 = (uint64_t)a1[4] + 42;
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 42;
    __p = (void *)*((_QWORD *)v3 - 1);
    a1[2] = v3 - 8;
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)a1, &__p);
  }
}

void sub_1E05DDB68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  void *v12;

  operator delete(v12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::__state<char>>::~deque[abi:ne180100](_QWORD *a1)
{
  _QWORD *v2;
  void **v3;
  void **v4;
  unint64_t v5;
  void **v6;
  char *v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = a1 + 5;
  v3 = (void **)a1[1];
  v4 = (void **)a1[2];
  if (v4 == v3)
  {
    v4 = (void **)a1[1];
  }
  else
  {
    v5 = a1[4];
    v6 = &v3[v5 / 0x2A];
    v7 = (char *)*v6 + 96 * (v5 % 0x2A);
    v8 = (unint64_t)v3[(a1[5] + v5) / 0x2A] + 96 * ((a1[5] + v5) % 0x2A);
    if (v7 != (char *)v8)
    {
      do
      {
        std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v2, v7);
        v7 += 96;
        if (v7 - (_BYTE *)*v6 == 4032)
        {
          v9 = (char *)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != (char *)v8);
      v3 = (void **)a1[1];
      v4 = (void **)a1[2];
    }
  }
  *v2 = 0;
  v10 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      v4 = (void **)a1[2];
      v3 = (void **)(a1[1] + 8);
      a1[1] = v3;
      v10 = (char *)v4 - (char *)v3;
    }
    while ((unint64_t)((char *)v4 - (char *)v3) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 21;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_16;
    v12 = 42;
  }
  a1[4] = v12;
LABEL_16:
  while (v3 != v4)
  {
    v13 = *v3++;
    operator delete(v13);
  }
  return std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

char *std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(_QWORD *a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  __int128 *v6;
  uint64_t v8;
  char *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  __int128 v17;
  int64_t v18;
  char *v19;
  unint64_t v20;
  __int128 *v21;
  char *v22;
  char *v23;
  __int128 v24;
  char *v25;
  char *v26;

  v6 = a2;
  v8 = a1[2];
  result = (char *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= a4)
  {
    v19 = (char *)a1[1];
    v14 = a1 + 1;
    v13 = v19;
    v20 = 0xAAAAAAAAAAAAAAABLL * ((v19 - result) >> 3);
    if (v20 >= a4)
    {
      v25 = result;
      if (a2 != a3)
      {
        v26 = result;
        do
        {
          *(_OWORD *)v26 = *v6;
          v26[16] = *((_BYTE *)v6 + 16);
          v25 += 24;
          v6 = (__int128 *)((char *)v6 + 24);
          v26 += 24;
        }
        while (v6 != a3);
      }
      v18 = v25 - result;
      v13 = result;
    }
    else
    {
      v21 = (__int128 *)((char *)a2 + 24 * v20);
      if (v13 != result)
      {
        do
        {
          *(_OWORD *)result = *v6;
          result[16] = *((_BYTE *)v6 + 16);
          v6 = (__int128 *)((char *)v6 + 24);
          result += 24;
        }
        while (v6 != v21);
      }
      v22 = v13;
      if (v21 != a3)
      {
        v23 = v13;
        do
        {
          v24 = *v21;
          *((_QWORD *)v23 + 2) = *((_QWORD *)v21 + 2);
          *(_OWORD *)v23 = v24;
          v23 += 24;
          v21 = (__int128 *)((char *)v21 + 24);
          v22 += 24;
        }
        while (v21 != a3);
      }
      v18 = v22 - v13;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v11;
    result = std::vector<std::string>::__vallocate[abi:ne180100](a1, v12);
    v15 = (char *)a1[1];
    v14 = a1 + 1;
    v13 = v15;
    v16 = v15;
    if (v6 != a3)
    {
      v16 = v13;
      do
      {
        v17 = *v6;
        *((_QWORD *)v16 + 2) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v16 = v17;
        v16 += 24;
        v6 = (__int128 *)((char *)v6 + 24);
      }
      while (v6 != a3);
    }
    v18 = v16 - v13;
  }
  *v14 = &v13[v18];
  return result;
}

char *std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(_QWORD *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  char *result;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  char *v18;
  unint64_t v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;

  v6 = a2;
  v8 = a1[2];
  result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 4)
  {
    v18 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v18;
    v19 = (v18 - result) >> 4;
    if (v19 >= a4)
    {
      v26 = result;
      if (a2 != a3)
      {
        v27 = result;
        do
        {
          v28 = *v6;
          v29 = v6[1];
          v6 += 2;
          *(_QWORD *)v27 = v28;
          *((_QWORD *)v27 + 1) = v29;
          v27 += 16;
          v26 += 16;
        }
        while (v6 != a3);
      }
      v17 = (char *)(v26 - result);
      v12 = result;
    }
    else
    {
      v20 = (__int128 *)&a2[2 * v19];
      if (v12 != result)
      {
        do
        {
          v21 = *v6;
          v22 = v6[1];
          v6 += 2;
          *(_QWORD *)result = v21;
          *((_QWORD *)result + 1) = v22;
          result += 16;
        }
        while (v6 != (uint64_t *)v20);
      }
      v23 = v12;
      if (v20 != (__int128 *)a3)
      {
        v24 = v12;
        do
        {
          v25 = *v20++;
          *(_OWORD *)v24 = v25;
          v24 += 16;
          v23 += 16;
        }
        while (v20 != (__int128 *)a3);
      }
      v17 = (char *)(v23 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__vallocate[abi:ne180100](a1, v11);
    v14 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v14;
    v15 = v14;
    if (v6 != a3)
    {
      v15 = v12;
      do
      {
        v16 = *(_OWORD *)v6;
        v6 += 2;
        *(_OWORD *)v15 = v16;
        v15 += 16;
      }
      while (v6 != a3);
    }
    v17 = (char *)(v15 - v12);
  }
  *v13 = &v17[(_QWORD)v12];
  return result;
}

void std::__function::__func<MIL::Attributes::BuildInfo::GetPublicInformation(void)::$_0,std::allocator<MIL::Attributes::BuildInfo::GetPublicInformation(void)::$_0>,BOOL ()(std::string const&)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

__n128 std::__function::__func<MIL::Attributes::BuildInfo::GetPublicInformation(void)::$_0,std::allocator<MIL::Attributes::BuildInfo::GetPublicInformation(void)::$_0>,BOOL ()(std::string const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1EA99A190;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<MIL::Attributes::BuildInfo::GetPublicInformation(void)::$_0,std::allocator<MIL::Attributes::BuildInfo::GetPublicInformation(void)::$_0>,BOOL ()(std::string const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1EA99A190;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<MIL::Attributes::BuildInfo::GetPublicInformation(void)::$_0,std::allocator<MIL::Attributes::BuildInfo::GetPublicInformation(void)::$_0>,BOOL ()(std::string const&)>::operator()(_QWORD *a1, char *a2)
{
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  std::match_results<const char *> __p;

  v2 = a2;
  v4 = a1[1];
  memset(&__p.__prefix_, 0, 17);
  memset(&__p.__suffix_, 0, 17);
  __p.__ready_ = 0;
  __p.__position_start_ = 0;
  memset(&__p, 0, 41);
  v5 = a2[23];
  v6 = *((_QWORD *)a2 + 1);
  if ((v5 & 0x80u) != 0)
  {
    a2 = *(char **)a2;
    v5 = v6;
  }
  v7 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(v4, a2, &a2[v5], &__p, 0);
  if (__p.__matches_.__begin_)
  {
    __p.__matches_.__end_ = __p.__matches_.__begin_;
    operator delete(__p.__matches_.__begin_);
  }
  if ((v7 & 1) != 0)
    return 1;
  v8 = a1[2];
  memset(&__p.__prefix_, 0, 17);
  memset(&__p.__suffix_, 0, 17);
  __p.__ready_ = 0;
  __p.__position_start_ = 0;
  memset(&__p, 0, 41);
  v9 = v2[23];
  if ((v9 & 0x80u) == 0)
    v10 = v2;
  else
    v10 = *(char **)v2;
  if ((v9 & 0x80u) != 0)
    v9 = *((_QWORD *)v2 + 1);
  v11 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(v8, v10, &v10[v9], &__p, 0);
  if (__p.__matches_.__begin_)
  {
    __p.__matches_.__end_ = __p.__matches_.__begin_;
    operator delete(__p.__matches_.__begin_);
  }
  if ((v11 & 1) != 0)
    return 1;
  v14 = a1[3];
  memset(&__p.__prefix_, 0, 17);
  memset(&__p.__suffix_, 0, 17);
  __p.__ready_ = 0;
  __p.__position_start_ = 0;
  memset(&__p, 0, 41);
  v15 = v2[23];
  if ((v15 & 0x80u) == 0)
    v16 = v2;
  else
    v16 = *(char **)v2;
  if ((v15 & 0x80u) != 0)
    v15 = *((_QWORD *)v2 + 1);
  v12 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(v14, v16, &v16[v15], &__p, 0);
  if (__p.__matches_.__begin_)
  {
    __p.__matches_.__end_ = __p.__matches_.__begin_;
    operator delete(__p.__matches_.__begin_);
  }
  return v12;
}

void sub_1E05DE234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<MIL::Attributes::BuildInfo::GetPublicInformation(void)::$_0,std::allocator<MIL::Attributes::BuildInfo::GetPublicInformation(void)::$_0>,BOOL ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Attributes::BuildInfo::GetPublicInformation(void)::$_0,std::allocator<MIL::Attributes::BuildInfo::GetPublicInformation(void)::$_0>,BOOL ()(std::string const&)>::target_type()
{
}

void MIL::Attributes::FlexibleShapeInfo::~FlexibleShapeInfo(MIL::Attributes::FlexibleShapeInfo *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
    std::default_delete<MIL::Attributes::FlexibleShapeInfo::Impl>::operator()[abi:ne180100]((uint64_t)this, v1);
}

{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
    std::default_delete<MIL::Attributes::FlexibleShapeInfo::Impl>::operator()[abi:ne180100]((uint64_t)this, v1);
}

_QWORD *MIL::Attributes::FlexibleShapeInfo::FlexibleShapeInfo(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

_QWORD *MIL::Attributes::FlexibleShapeInfo::Make@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  _QWORD *result;

  v3 = operator new();
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_DWORD *)(v3 + 48) = 1065353216;
  *(_QWORD *)(v3 + 64) = 0;
  result = (_QWORD *)operator new();
  *result = v3;
  *a1 = result;
  return result;
}

void sub_1E05DE3A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  a10 = 0;
  std::default_delete<MIL::Attributes::FlexibleShapeInfo::Impl>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  _Unwind_Resume(a1);
}

_QWORD *MIL::Attributes::FlexibleShapeInfo::Make@<X0>(void (***this)(MIL::MILContextImpl *__hidden this)@<X0>, MIL::MILContext *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t Attribute;
  MIL::IRValue *v7;
  MIL::IRTupleValue *v8;
  uint64_t Values;
  uint64_t v10;
  MIL::IRValue **v11;
  MIL::IRTupleValue *v12;
  uint64_t v13;
  const void **v14;
  std::string::size_type size;
  std::string *v16;
  std::string::size_type v17;
  uint64_t v18;
  MIL::IRValue **v20;
  MIL::MILContext *v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::string *v27;
  std::string::size_type v28;
  std::string::size_type v29;
  MIL::IRValue **v31;
  MIL::IRDictionaryValue *v32;
  uint64_t v33;
  uint64_t v34;
  MIL::MILContext *v35;
  unsigned __int8 *v36;
  std::string *v37;
  std::string::size_type v38;
  int v39;
  MIL::IRValue **v41;
  MIL::IRDictionaryValue *v42;
  uint64_t v43;
  uint64_t v44;
  MIL::IRListValue *v45;
  uint64_t v46;
  uint64_t v47;
  MIL::IRValue **v48;
  MIL::IRValue **v49;
  uint64_t *v50;
  unsigned int *Data;
  uint64_t v52;
  uint64_t v53;
  std::string::size_type v54;
  std::string::size_type v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  std::string::size_type v62;
  uint64_t v63;
  unsigned __int8 *v64;
  void *v65;
  _QWORD *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  _OWORD *v71;
  _OWORD *v72;
  __int128 v73;
  __int128 v74;
  unint64_t v75;
  _QWORD *v77;
  std::runtime_error *exception;
  std::string *v79;
  __int128 v80;
  _QWORD *v81;
  uint64_t v82;
  MIL::IRValue **v83;
  _anonymous_namespace_ *v85[2];
  void *__p[2];
  __int128 v87;
  int v88;
  std::string v89;
  _QWORD v90[2];
  __int128 v91;
  __int128 v92;
  __int128 v93;
  int v94;
  __int128 v95;
  _BYTE v96[32];
  int v97;
  std::string v98;
  __int128 *v99[2];

  std::string::basic_string[abi:ne180100]<0>(v96, "FlexibleShapeInformation");
  Attribute = MIL::IRObject::TryGetAttribute((uint64_t)a2, v96);
  v7 = (MIL::IRValue *)Attribute;
  if ((v96[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v96);
    if (v7)
      goto LABEL_3;
    return MIL::Attributes::FlexibleShapeInfo::Make(a3);
  }
  if (!Attribute)
    return MIL::Attributes::FlexibleShapeInfo::Make(a3);
LABEL_3:
  v81 = a3;
  v95 = 0uLL;
  v92 = 0u;
  v93 = 0u;
  v94 = 1065353216;
  v91 = 0uLL;
  v8 = (MIL::IRTupleValue *)MIL::IRValue::AsTuple(v7);
  Values = MIL::IRTupleValue::GetValues(v8);
  if (v10)
  {
    v11 = (MIL::IRValue **)Values;
    v82 = Values + 16 * v10;
    while (1)
    {
      v12 = (MIL::IRTupleValue *)MIL::IRValue::AsTuple(*v11);
      v90[0] = MIL::IRTupleValue::GetValues(v12);
      v90[1] = v13;
      v14 = (const void **)MIL::Util::Span<std::shared_ptr<MIL::IRValue const> const,18446744073709551615ul>::At(v90, 0);
      MIL::IRValue::GetScalar<std::string>(*v14, &v89);
      size = HIBYTE(v89.__r_.__value_.__r.__words[2]);
      if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v89.__r_.__value_.__l.__size_;
      v83 = v11;
      if (size == 9)
        break;
      if (size != 16)
      {
        if (size != 13)
          goto LABEL_88;
        v16 = &v89;
        if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v16 = (std::string *)v89.__r_.__value_.__r.__words[0];
        v17 = v16->__r_.__value_.__r.__words[0];
        v18 = *(std::string::size_type *)((char *)v16->__r_.__value_.__r.__words + 5);
        if (v17 != 0x53746C7561666544 || v18 != 0x736570616853746CLL)
          goto LABEL_88;
        v20 = (MIL::IRValue **)MIL::Util::Span<std::shared_ptr<MIL::IRValue const> const,18446744073709551615ul>::At(v90, 1uLL);
        v21 = (MIL::MILContext *)MIL::IRValue::AsDictionary(*v20);
        v22 = operator new(0x40uLL);
        v22[2] = 0;
        *v22 = &unk_1EA99A210;
        v22[1] = 0;
        v23 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table((uint64_t)(v22 + 3), (uint64_t *)v96);
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v95 + 1);
        *(_QWORD *)&v95 = v23;
        *((_QWORD *)&v95 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
LABEL_74:
        std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::~__hash_table((uint64_t)v96);
        goto LABEL_75;
      }
      v27 = &v89;
      if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v27 = (std::string *)v89.__r_.__value_.__r.__words[0];
      v29 = v27->__r_.__value_.__r.__words[0];
      v28 = v27->__r_.__value_.__l.__size_;
      if (v29 != 0x746172656D756E45 || v28 != 0x7365706168536465)
        goto LABEL_88;
      v31 = (MIL::IRValue **)MIL::Util::Span<std::shared_ptr<MIL::IRValue const> const,18446744073709551615ul>::At(v90, 1uLL);
      v32 = (MIL::IRDictionaryValue *)MIL::IRValue::AsDictionary(*v31);
      *(_OWORD *)__p = 0u;
      v87 = 0u;
      v88 = 1065353216;
      v33 = MIL::IRDictionaryValue::begin(v32);
      v34 = MIL::IRDictionaryValue::end(v32);
      while (v33 != v34)
      {
        MIL::IRValue::GetScalar<std::string>(*(const void **)(v33 + 16), &v98);
        v35 = (MIL::MILContext *)MIL::IRValue::AsDictionary(*(MIL::IRValue **)(v33 + 32));
        v99[0] = (__int128 *)&v98;
        v36 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (unsigned __int8 *)&v98, (uint64_t)&std::piecewise_construct, v99);
        std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__move_assign((uint64_t)(v36 + 40), (uint64_t *)v96);
        std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::~__hash_table((uint64_t)v96);
        if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v98.__r_.__value_.__l.__data_);
        v33 = *(_QWORD *)v33;
      }
      std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>::__move_assign((uint64_t)&v92, (uint64_t *)__p);
      std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>::~__hash_table((uint64_t)__p);
LABEL_75:
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v89.__r_.__value_.__l.__data_);
      v11 = v83 + 2;
      if (v83 + 2 == (MIL::IRValue **)v82)
        goto LABEL_78;
    }
    v37 = &v89;
    if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v37 = (std::string *)v89.__r_.__value_.__r.__words[0];
    v38 = v37->__r_.__value_.__r.__words[0];
    v39 = v37->__r_.__value_.__s.__data_[8];
    if (v38 != 0x6D694465676E6152 || v39 != 115)
    {
LABEL_88:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      v79 = std::string::append((std::string *)__p, "'.");
      v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
      *(_QWORD *)&v96[16] = *((_QWORD *)&v79->__r_.__value_.__l + 2);
      *(_OWORD *)v96 = v80;
      v79->__r_.__value_.__l.__size_ = 0;
      v79->__r_.__value_.__r.__words[2] = 0;
      v79->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, (const std::string *)v96);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v41 = (MIL::IRValue **)MIL::Util::Span<std::shared_ptr<MIL::IRValue const> const,18446744073709551615ul>::At(v90, 1uLL);
    v42 = (MIL::IRDictionaryValue *)MIL::IRValue::AsDictionary(*v41);
    memset(v96, 0, sizeof(v96));
    v97 = 1065353216;
    v43 = MIL::IRDictionaryValue::begin(v42);
    v44 = MIL::IRDictionaryValue::end(v42);
    while (v43 != v44)
    {
      MIL::IRValue::GetScalar<std::string>(*(const void **)(v43 + 16), (std::string *)__p);
      v45 = (MIL::IRListValue *)MIL::IRValue::AsList(*(MIL::IRValue **)(v43 + 32));
      v46 = MIL::IRListValue::GetValues(v45);
      memset(&v98, 0, sizeof(v98));
      if (v47)
      {
        v48 = (MIL::IRValue **)v46;
        v49 = (MIL::IRValue **)(v46 + 16 * v47);
        do
        {
          v50 = (uint64_t *)MIL::IRValue::AsTensor(*v48);
          Data = (unsigned int *)MIL::IRTensorValue::GetDataView<int>(v50);
          v53 = *Data;
          v52 = Data[1];
          v54 = v98.__r_.__value_.__l.__size_;
          if (v98.__r_.__value_.__l.__size_ >= v98.__r_.__value_.__r.__words[2])
          {
            v56 = (uint64_t)(v98.__r_.__value_.__l.__size_ - v98.__r_.__value_.__r.__words[0]) >> 3;
            if ((unint64_t)(v56 + 1) >> 61)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v57 = (uint64_t)(v98.__r_.__value_.__r.__words[2] - v98.__r_.__value_.__r.__words[0]) >> 2;
            if (v57 <= v56 + 1)
              v57 = v56 + 1;
            if (v98.__r_.__value_.__r.__words[2] - v98.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8)
              v58 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v58 = v57;
            if (v58)
              v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v98.__r_.__value_.__r.__words[2], v58);
            else
              v59 = 0;
            v60 = &v59[8 * v56];
            *(_QWORD *)v60 = v53 | (v52 << 32);
            v55 = (std::string::size_type)(v60 + 8);
            v61 = (char *)v98.__r_.__value_.__l.__size_;
            v62 = v98.__r_.__value_.__r.__words[0];
            if (v98.__r_.__value_.__l.__size_ != v98.__r_.__value_.__r.__words[0])
            {
              do
              {
                v63 = *((_QWORD *)v61 - 1);
                v61 -= 8;
                *((_QWORD *)v60 - 1) = v63;
                v60 -= 8;
              }
              while (v61 != (char *)v62);
              v61 = (char *)v98.__r_.__value_.__r.__words[0];
            }
            v98.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
            v98.__r_.__value_.__l.__size_ = v55;
            v98.__r_.__value_.__r.__words[2] = (std::string::size_type)&v59[8 * v58];
            if (v61)
              operator delete(v61);
          }
          else
          {
            *(_QWORD *)v98.__r_.__value_.__l.__size_ = v53 | (v52 << 32);
            v55 = v54 + 8;
          }
          v98.__r_.__value_.__l.__size_ = v55;
          v48 += 2;
        }
        while (v48 != v49);
      }
      v99[0] = (__int128 *)__p;
      v64 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v96, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, v99);
      v65 = (void *)*((_QWORD *)v64 + 5);
      if (v65)
      {
        *((_QWORD *)v64 + 6) = v65;
        operator delete(v65);
        *((_QWORD *)v64 + 5) = 0;
        *((_QWORD *)v64 + 6) = 0;
        *((_QWORD *)v64 + 7) = 0;
      }
      *(std::string *)(v64 + 40) = v98;
      if (SBYTE7(v87) < 0)
        operator delete(__p[0]);
      v43 = *(_QWORD *)v43;
    }
    v66 = operator new(0x40uLL);
    v66[2] = 0;
    *v66 = &unk_1EA99A260;
    v66[1] = 0;
    v67 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table((uint64_t)(v66 + 3), (uint64_t *)v96);
    v68 = (std::__shared_weak_count *)*((_QWORD *)&v91 + 1);
    *(_QWORD *)&v91 = v67;
    *((_QWORD *)&v91 + 1) = v66;
    if (v68)
    {
      v69 = (unint64_t *)&v68->__shared_owners_;
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    goto LABEL_74;
  }
LABEL_78:
  v71 = (_OWORD *)operator new();
  v72 = v71;
  v73 = v95;
  v95 = 0uLL;
  v74 = v92;
  v92 = 0uLL;
  *(_OWORD *)v96 = v74;
  *(_OWORD *)&v96[16] = v93;
  v97 = v94;
  if (*((_QWORD *)&v93 + 1))
  {
    v75 = *(_QWORD *)(v93 + 8);
    if ((*((_QWORD *)&v74 + 1) & (*((_QWORD *)&v74 + 1) - 1)) != 0)
    {
      if (v75 >= *((_QWORD *)&v74 + 1))
        v75 %= *((_QWORD *)&v74 + 1);
    }
    else
    {
      v75 &= *((_QWORD *)&v74 + 1) - 1;
    }
    *(_QWORD *)(v74 + 8 * v75) = &v96[16];
    v93 = 0uLL;
  }
  *(_OWORD *)v85 = v91;
  v91 = 0uLL;
  *v71 = v73;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table((uint64_t)(v71 + 1), (uint64_t *)v96);
  *(_OWORD *)((char *)v72 + 56) = *(_OWORD *)v85;
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>::~__hash_table((uint64_t)v96);
  v77 = (_QWORD *)operator new();
  *v77 = v72;
  *v81 = v77;
  return (_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>::~__hash_table((uint64_t)&v92);
}

void sub_1E05DEAB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  a17 = 0;
  std::default_delete<MIL::Attributes::FlexibleShapeInfo::Impl>::operator()[abi:ne180100]((uint64_t)&a17, v35);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>::~__hash_table((uint64_t)&a35);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v36 - 192);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::ParseParamShapes(void (***this)(MIL::MILContextImpl *__hidden this)@<X0>, MIL::MILContext *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t i;
  uint64_t *v8;
  unsigned int *Data;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  MIL::MILContext *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unsigned __int8 *v26;
  void *v27;
  __int128 v29;
  char *v30;
  std::string __p;
  std::string *p_p;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  v6 = MIL::IRDictionaryValue::begin(a2);
  for (i = MIL::IRDictionaryValue::end(a2); v6 != i; v6 = *(_QWORD *)v6)
  {
    MIL::IRValue::GetScalar<std::string>(*(const void **)(v6 + 16), &__p);
    v8 = (uint64_t *)MIL::IRValue::AsTensor(*(MIL::IRValue **)(v6 + 32));
    Data = (unsigned int *)MIL::IRTensorValue::GetDataView<int>(v8);
    v11 = v10;
    v29 = 0uLL;
    v30 = 0;
    std::vector<std::string const*>::reserve((void **)&v29, v10);
    if (v11)
    {
      v12 = &Data[v11];
      do
      {
        v13 = (MIL::MILContext *)*Data;
        if ((v13 & 0x80000000) != 0)
          v14 = MIL::IRUnknownDimension::Make(this, 0);
        else
          v14 = MIL::IRConstantDimension::Make(this, v13);
        v15 = v14;
        v16 = *((_QWORD *)&v29 + 1);
        if (*((_QWORD *)&v29 + 1) >= (unint64_t)v30)
        {
          v18 = (uint64_t)(*((_QWORD *)&v29 + 1) - v29) >> 3;
          if ((unint64_t)(v18 + 1) >> 61)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v19 = (uint64_t)&v30[-v29] >> 2;
          if (v19 <= v18 + 1)
            v19 = v18 + 1;
          if ((unint64_t)&v30[-v29] >= 0x7FFFFFFFFFFFFFF8)
            v20 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v20 = v19;
          if (v20)
            v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v30, v20);
          else
            v21 = 0;
          v22 = (uint64_t *)&v21[8 * v18];
          *v22 = v15;
          v17 = v22 + 1;
          v23 = (char *)*((_QWORD *)&v29 + 1);
          v24 = (char *)v29;
          if (*((_QWORD *)&v29 + 1) != (_QWORD)v29)
          {
            do
            {
              v25 = *((_QWORD *)v23 - 1);
              v23 -= 8;
              *--v22 = v25;
            }
            while (v23 != v24);
            v23 = (char *)v29;
          }
          *(_QWORD *)&v29 = v22;
          *((_QWORD *)&v29 + 1) = v17;
          v30 = &v21[8 * v20];
          if (v23)
            operator delete(v23);
        }
        else
        {
          **((_QWORD **)&v29 + 1) = v14;
          v17 = (_QWORD *)(v16 + 8);
        }
        *((_QWORD *)&v29 + 1) = v17;
        ++Data;
      }
      while (Data != v12);
    }
    p_p = &__p;
    v26 = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
    v27 = (void *)*((_QWORD *)v26 + 5);
    if (v27)
    {
      *((_QWORD *)v26 + 6) = v27;
      operator delete(v27);
      *((_QWORD *)v26 + 5) = 0;
      *((_QWORD *)v26 + 6) = 0;
      *((_QWORD *)v26 + 7) = 0;
    }
    *(_OWORD *)(v26 + 40) = v29;
    *((_QWORD *)v26 + 7) = v30;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1E05DEE50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::~__hash_table(a10);
  _Unwind_Resume(a1);
}

uint64_t MIL::Attributes::FlexibleShapeInfo::GetEnumeratedShapes(MIL::Attributes::FlexibleShapeInfo *this)
{
  return *(_QWORD *)this + 16;
}

void MIL::Attributes::FlexibleShapeInfo::AddEnumeratedShapes(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  void *__p[2];
  uint64_t v7;
  void **v8;

  v4 = *a1;
  *(_OWORD *)__p = *(_OWORD *)a2;
  v7 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = __p;
  v5 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4 + 16, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v8);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__move_assign((uint64_t)(v5 + 40), a3);
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
}

void sub_1E05DEF30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *MIL::Attributes::FlexibleShapeInfo::RemoveEnumeratedShapes(uint64_t a1, unsigned __int8 *a2)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>::__erase_unique<std::string>((_QWORD *)(*(_QWORD *)a1 + 16), a2);
}

_QWORD **MIL::Attributes::FlexibleShapeInfo::TryGetDefaultShapes@<X0>(_QWORD **this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = (*this)[1];
  *a2 = **this;
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void MIL::Attributes::FlexibleShapeInfo::SetDefaultShapes(uint64_t *a1, uint64_t *a2)
{
  MIL::Attributes::FlexibleShapeInfo::Impl::SetDefaultShapes(*a1, a2);
}

void MIL::Attributes::FlexibleShapeInfo::Impl::SetDefaultShapes(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;

  v4 = operator new(0x40uLL);
  v4[2] = 0;
  *v4 = &unk_1EA99A210;
  v4[1] = 0;
  *(_QWORD *)&v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table((uint64_t)(v4 + 3), a2);
  *((_QWORD *)&v8 + 1) = v4;
  std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](a1, &v8);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void MIL::Attributes::FlexibleShapeInfo::RemoveDefaultShapes(MIL::Attributes::FlexibleShapeInfo *this)
{
  std::shared_ptr<MIL::IRScope const>::reset[abi:ne180100](*(_QWORD **)this);
}

uint64_t MIL::Attributes::FlexibleShapeInfo::TryGetRangeShapes@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)this + 64);
  *a2 = *(_QWORD *)(*(_QWORD *)this + 56);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void MIL::Attributes::FlexibleShapeInfo::SetRangeShapes(uint64_t *a1, uint64_t *a2)
{
  MIL::Attributes::FlexibleShapeInfo::Impl::SetRangeShapes(*a1, a2);
}

void MIL::Attributes::FlexibleShapeInfo::Impl::SetRangeShapes(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;

  v4 = operator new(0x40uLL);
  v4[2] = 0;
  *v4 = &unk_1EA99A260;
  v4[1] = 0;
  *(_QWORD *)&v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table((uint64_t)(v4 + 3), a2);
  *((_QWORD *)&v8 + 1) = v4;
  std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](a1 + 56, &v8);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void MIL::Attributes::FlexibleShapeInfo::RemoveRangeShapes(MIL::Attributes::FlexibleShapeInfo *this)
{
  std::shared_ptr<MIL::IRScope const>::reset[abi:ne180100]((_QWORD *)(*(_QWORD *)this + 56));
}

void MIL::Attributes::FlexibleShapeInfo::Replace(uint64_t **this, void (***a2)(MIL::MILContextImpl *__hidden this), MIL::IRFunction *a3)
{
  uint64_t *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  char v15;
  MIL::MILContext *Scalar;
  uint64_t v17;
  _QWORD *v18;
  const MIL::IRValueType *v19;
  const MIL::IRValueType *v20;
  void (***v21)(MIL::MILContextImpl *__hidden);
  uint64_t *i;
  uint64_t *j;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  void *v30;
  MIL::IRDictionaryValue *v31;
  _QWORD *v32;
  void *v33;
  _QWORD *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  void *v38;
  MIL::IRDictionaryValue *v39;
  uint64_t *k;
  _QWORD *v41;
  void *v42;
  _QWORD *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  void *v47;
  MIL::IRDictionaryValue *v48;
  _QWORD *v49;
  MIL::MILContext *v50;
  uint64_t *m;
  unsigned int *v52;
  unsigned int *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  MIL::IRTupleValue *v57;
  _QWORD *v58;
  MIL::IRTupleValue *v59;
  MIL::IRDictionaryValue *v60;
  MIL::IRDictionaryValue *v61;
  int64_t v62;
  unint64_t v63;
  int64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  MIL::IRTupleValue **v68;
  MIL::IRDictionaryValue *v69;
  MIL::IRDictionaryValue *v70;
  MIL::IRDictionaryValue *v71;
  __int128 v72;
  int64x2_t v73;
  uint64_t v74;
  MIL::IRTupleValue *v75;
  MIL::IRDictionaryValue *v76;
  MIL::IRDictionaryValue *v77;
  uint64_t v78;
  _QWORD *v79;
  MIL::IRTupleValue *v80;
  _QWORD *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  MIL::IRTupleValue *v85;
  MIL::IRListValue *v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD *v89;
  MIL::IRTupleValue *v90;
  _QWORD *v91;
  MIL::IRTupleValue *v92;
  MIL::IRDictionaryValue *v93;
  uint64_t v94;
  __int128 v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t n;
  const MIL::IRValueType *v99;
  MIL::IRTupleValue *v100;
  MIL::IRTupleValue *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  MIL::IRTupleValue *v106;
  _QWORD *v107;
  MIL::IRTupleValue *v108;
  MIL::IRDictionaryValue *v109;
  uint64_t v110;
  __int128 v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t ii;
  MIL::IRTupleValue *v115;
  MIL::IRTupleValue *v116;
  const MIL::IRValueType *v117;
  const MIL::IRDimension *v118;
  const MIL::IRValueType *v119;
  MIL::MILContext *v120;
  const MIL::IRValueType *v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  _QWORD *v126;
  MIL::IRTupleValue *v127;
  _QWORD *v128;
  MIL::IRDictionaryValue *v129;
  MIL::IRDictionaryValue *v130;
  uint64_t v131;
  __int128 v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t jj;
  MIL::IRDictionaryValue *v136;
  MIL::IRTupleValue *v137;
  void (***v138)(MIL::MILContextImpl *__hidden);
  MIL::IRDictionaryValue *v139;
  uint64_t v140;
  char *v141;
  MIL::IRDictionaryValue *v142;
  MIL::IRDictionaryValue *v143;
  MIL::IRDictionaryValue *v144;
  uint64_t v145;
  MIL::IRTupleValue *v146;
  _QWORD *v147;
  MIL::IRTupleValue *v148;
  _QWORD *v149;
  void *v150;
  int64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  char *v155;
  uint64_t v156;
  MIL::IRTupleValue **v157;
  _QWORD *v158;
  _QWORD *v159;
  char *v160;
  __int128 v161;
  int64x2_t v162;
  char *v163;
  MIL::IRDictionaryValue *v164;
  MIL::IRDictionaryValue *v165;
  int64_t v166;
  unint64_t v167;
  unint64_t v168;
  char *v169;
  MIL::IRDictionaryValue *v170;
  char *v171;
  MIL::IRDictionaryValue *v172;
  MIL::IRDictionaryValue *v173;
  uint64_t v174;
  MIL::IRTupleValue *v175;
  _QWORD *v176;
  MIL::IRTupleValue *v177;
  _QWORD *v178;
  void *v179;
  int64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  char *v184;
  uint64_t v185;
  MIL::IRTupleValue **v186;
  _QWORD *v187;
  _QWORD *v188;
  char *v189;
  __int128 v190;
  int64x2_t v191;
  char *v192;
  MIL::IRDictionaryValue *v193;
  MIL::IRDictionaryValue *v194;
  int64_t v195;
  unint64_t v196;
  unint64_t v197;
  char *v198;
  MIL::IRDictionaryValue *v199;
  char *v200;
  MIL::IRDictionaryValue *v201;
  MIL::IRDictionaryValue *v202;
  uint64_t v203;
  MIL::IRTupleValue *v204;
  _QWORD *v205;
  MIL::IRTupleValue *v206;
  _QWORD *v207;
  void *v208;
  int64_t v209;
  unint64_t v210;
  uint64_t v211;
  unint64_t v212;
  char *v213;
  uint64_t v214;
  MIL::IRTupleValue **v215;
  _QWORD *v216;
  _QWORD *v217;
  char *v218;
  __int128 v219;
  int64x2_t v220;
  char *v221;
  uint64_t v222;
  _QWORD *v223;
  uint64_t v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  MIL::IRTupleValue *v228;
  MIL::IRTupleValue *v229;
  MIL::IRTupleValue *v230;
  MIL::IRTupleValue *v231;
  unint64_t *v232;
  unint64_t v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  MIL::IRFunction *v237;
  uint64_t v238;
  int v239;
  _BOOL4 v240;
  MIL::IRValueType *v241;
  __int128 v243;
  void *v244[2];
  char v245;
  MIL::IRDictionaryValue *v246;
  void *v247[2];
  char v248;
  MIL::IRTupleValue *v249;
  void *v250[4];
  MIL::IRTupleValue *v251;
  void *v252[2];
  char v253;
  std::string v254;
  void *__p[2];
  char *v256;
  MIL::IRTupleValue *v257;
  MIL::IRTupleValue *v258;
  _QWORD *v259;
  MIL::IRDictionaryValue *v260[2];
  _QWORD v261[2];
  _OWORD v262[2];
  int v263;
  std::string v264;
  _OWORD v265[2];
  int v266;
  std::string v267;
  std::string v268;
  _OWORD v269[2];
  int v270;
  uint64_t v271;
  std::__shared_weak_count *v272;
  uint64_t v273;
  std::__shared_weak_count *v274;
  _OWORD v275[2];
  void **v276;
  uint64_t v277;

  v277 = *MEMORY[0x1E0C80C00];
  v4 = *this;
  v5 = **this;
  v6 = (std::__shared_weak_count *)(*this)[1];
  v273 = v5;
  v274 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v4 = *this;
  }
  v9 = v4[7];
  v10 = (std::__shared_weak_count *)v4[8];
  v271 = v9;
  v272 = v10;
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = v5 && *(_QWORD *)(v5 + 24);
  v14 = v4[5];
  if (v9 && *(_QWORD *)(v9 + 24))
  {
    v239 = 1;
LABEL_20:
    Scalar = (MIL::MILContext *)MIL::IRTensorValueType::MakeScalar(a2, 3);
    v17 = MIL::IRUnknownDimension::Make(a2, 0);
    v18 = operator new(8uLL);
    *(_QWORD *)&v275[0] = v18;
    *v18 = v17;
    *((_QWORD *)&v275[0] + 1) = v18 + 1;
    *(_QWORD *)&v275[1] = v18 + 1;
    v20 = (const MIL::IRValueType *)MIL::IRTensorValueType::MakeWithShape(a2, 11, (uint64_t)v275);
    v240 = v13;
    if (*(_QWORD *)&v275[0])
    {
      *((_QWORD *)&v275[0] + 1) = *(_QWORD *)&v275[0];
      operator delete(*(void **)&v275[0]);
    }
    v237 = a3;
    v21 = a2;
    v241 = (MIL::IRValueType *)MIL::IRDictionaryValueType::Make(a2, Scalar, v20, v19);
    memset(v269, 0, sizeof(v269));
    v270 = 1065353216;
    v238 = v14;
    if (v14)
    {
      for (i = (uint64_t *)v4[4]; i; i = (uint64_t *)*i)
      {
        memset(v275, 0, sizeof(v275));
        LODWORD(v276) = 1065353216;
        for (j = (uint64_t *)i[7]; j; j = (uint64_t *)*j)
        {
          if (*((char *)j + 39) < 0)
            std::string::__init_copy_ctor_external(&v268, (const std::string::value_type *)j[2], j[3]);
          else
            v268 = *(std::string *)(j + 2);
          MIL::IRTensorValueType::MakeStringValue(Scalar, (const MIL::IRTensorValueType *)&v268, __p);
          *(void **)&v265[0] = __p[0];
          if (__p[0])
          {
            v24 = (_QWORD *)operator new();
            v25 = __p[0];
            *v24 = &unk_1EA992A68;
            v24[1] = 0;
            v24[2] = 0;
            v24[3] = v25;
          }
          else
          {
            v24 = 0;
          }
          *((_QWORD *)&v265[0] + 1) = v24;
          __p[0] = 0;
          *(_QWORD *)&v262[0] = v265;
          v26 = std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::shared_ptr<MIL::IRValue const>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::IRValue const>&&>,std::tuple<>>((uint64_t)v275, v265, (uint64_t)&std::piecewise_construct, (_OWORD **)v262);
          std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>(v26 + 4, (uint64_t *)v260);
          v27 = (std::__shared_weak_count *)*((_QWORD *)&v265[0] + 1);
          if (*((_QWORD *)&v265[0] + 1))
          {
            v28 = (unint64_t *)(*((_QWORD *)&v265[0] + 1) + 8);
            do
              v29 = __ldaxr(v28);
            while (__stlxr(v29 - 1, v28));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
              std::__shared_weak_count::__release_weak(v27);
            }
          }
          v30 = __p[0];
          __p[0] = 0;
          if (v30)
            (*(void (**)(void *))(*(_QWORD *)v30 + 8))(v30);
          if (SHIBYTE(v268.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v268.__r_.__value_.__l.__data_);
          v31 = v260[0];
          v260[0] = 0;
          if (v31)
            (*(void (**)(MIL::IRDictionaryValue *))(*(_QWORD *)v31 + 8))(v31);
        }
        MIL::IRDictionaryValueType::MakeValue((uint64_t)v241, (uint64_t)v275, (uint64_t *)v260);
        if (*((char *)i + 39) < 0)
          std::string::__init_copy_ctor_external(&v267, (const std::string::value_type *)i[2], i[3]);
        else
          v267 = *(std::string *)(i + 2);
        MIL::IRTensorValueType::MakeStringValue(Scalar, (const MIL::IRTensorValueType *)&v267, __p);
        *(void **)&v265[0] = __p[0];
        if (__p[0])
        {
          v32 = (_QWORD *)operator new();
          v33 = __p[0];
          *v32 = &unk_1EA992A68;
          v32[1] = 0;
          v32[2] = 0;
          v32[3] = v33;
        }
        else
        {
          v32 = 0;
        }
        *((_QWORD *)&v265[0] + 1) = v32;
        __p[0] = 0;
        *(_QWORD *)&v262[0] = v265;
        v34 = std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::shared_ptr<MIL::IRValue const>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::IRValue const>&&>,std::tuple<>>((uint64_t)v269, v265, (uint64_t)&std::piecewise_construct, (_OWORD **)v262);
        std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRDictionaryValue const,std::default_delete<MIL::IRDictionaryValue const>,void>(v34 + 4, (uint64_t *)v260);
        v35 = (std::__shared_weak_count *)*((_QWORD *)&v265[0] + 1);
        if (*((_QWORD *)&v265[0] + 1))
        {
          v36 = (unint64_t *)(*((_QWORD *)&v265[0] + 1) + 8);
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        v38 = __p[0];
        __p[0] = 0;
        if (v38)
          (*(void (**)(void *))(*(_QWORD *)v38 + 8))(v38);
        if (SHIBYTE(v267.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v267.__r_.__value_.__l.__data_);
        v39 = v260[0];
        v260[0] = 0;
        if (v39)
        {
          MIL::IRDictionaryValue::~IRDictionaryValue(v39);
          MEMORY[0x1E0C023A0]();
        }
        std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v275);
      }
    }
    memset(v265, 0, sizeof(v265));
    v266 = 1065353216;
    if (v240)
    {
      for (k = *(uint64_t **)(v273 + 16); k; k = (uint64_t *)*k)
      {
        if (*((char *)k + 39) < 0)
          std::string::__init_copy_ctor_external(&v264, (const std::string::value_type *)k[2], k[3]);
        else
          v264 = *(std::string *)(k + 2);
        MIL::IRTensorValueType::MakeStringValue(Scalar, (const MIL::IRTensorValueType *)&v264, __p);
        *(void **)&v275[0] = __p[0];
        if (__p[0])
        {
          v41 = (_QWORD *)operator new();
          v42 = __p[0];
          *v41 = &unk_1EA992A68;
          v41[1] = 0;
          v41[2] = 0;
          v41[3] = v42;
        }
        else
        {
          v41 = 0;
        }
        *((_QWORD *)&v275[0] + 1) = v41;
        __p[0] = 0;
        *(_QWORD *)&v262[0] = v275;
        v43 = std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::shared_ptr<MIL::IRValue const>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::IRValue const>&&>,std::tuple<>>((uint64_t)v265, v275, (uint64_t)&std::piecewise_construct, (_OWORD **)v262);
        std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>(v43 + 4, (uint64_t *)v260);
        v44 = (std::__shared_weak_count *)*((_QWORD *)&v275[0] + 1);
        if (*((_QWORD *)&v275[0] + 1))
        {
          v45 = (unint64_t *)(*((_QWORD *)&v275[0] + 1) + 8);
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        v47 = __p[0];
        __p[0] = 0;
        if (v47)
          (*(void (**)(void *))(*(_QWORD *)v47 + 8))(v47);
        if (SHIBYTE(v264.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v264.__r_.__value_.__l.__data_);
        v48 = v260[0];
        v260[0] = 0;
        if (v48)
          (*(void (**)(MIL::IRDictionaryValue *))(*(_QWORD *)v48 + 8))(v48);
      }
    }
    v49 = operator new(8uLL);
    *(_QWORD *)&v275[0] = v49;
    *v49 = 2;
    *((_QWORD *)&v275[0] + 1) = v49 + 1;
    *(_QWORD *)&v275[1] = v49 + 1;
    v50 = (MIL::MILContext *)MIL::IRTensorValueType::Make(a2, 11, (MIL::MILContext ***)v275);
    if (*(_QWORD *)&v275[0])
    {
      *((_QWORD *)&v275[0] + 1) = *(_QWORD *)&v275[0];
      operator delete(*(void **)&v275[0]);
    }
    memset(v262, 0, sizeof(v262));
    v263 = 1065353216;
    if (v239)
    {
      for (m = *(uint64_t **)(v271 + 16); m; m = (uint64_t *)*m)
      {
        v260[0] = 0;
        v260[1] = 0;
        v261[0] = 0;
        v52 = (unsigned int *)m[5];
        v53 = (unsigned int *)m[6];
        if (v52 == v53)
        {
          v77 = 0;
          v76 = 0;
        }
        else
        {
          do
          {
            v54 = *v52;
            v55 = v52[1];
            v56 = operator new(8uLL);
            __p[0] = v56;
            *v56 = v54 | (v55 << 32);
            __p[1] = v56 + 1;
            v256 = (char *)(v56 + 1);
            MIL::IRTensorValueType::MakeInt32Value((uint64_t)v50, (uint64_t)__p, &v257);
            v57 = v257;
            v258 = v257;
            if (v257)
            {
              v58 = (_QWORD *)operator new();
              v59 = v257;
              *v58 = &unk_1EA992A68;
              v58[1] = 0;
              v58[2] = 0;
              v58[3] = v59;
            }
            else
            {
              v58 = 0;
            }
            v259 = v58;
            v257 = 0;
            v60 = v260[1];
            if (v260[1] >= (MIL::IRDictionaryValue *)v261[0])
            {
              v62 = (v260[1] - v260[0]) >> 4;
              v63 = v62 + 1;
              if ((unint64_t)(v62 + 1) >> 60)
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              v64 = v261[0] - (unint64_t)v260[0];
              if ((uint64_t)(v261[0] - (unint64_t)v260[0]) >> 3 > v63)
                v63 = v64 >> 3;
              if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF0)
                v65 = 0xFFFFFFFFFFFFFFFLL;
              else
                v65 = v63;
              v276 = (void **)v261;
              v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)v261, v65);
              v68 = (MIL::IRTupleValue **)&v66[16 * v62];
              *v68 = v57;
              v68[1] = (MIL::IRTupleValue *)v58;
              v258 = 0;
              v259 = 0;
              v70 = v260[0];
              v69 = v260[1];
              if (v260[1] == v260[0])
              {
                v73 = vdupq_n_s64((unint64_t)v260[1]);
                v71 = (MIL::IRDictionaryValue *)&v66[16 * v62];
              }
              else
              {
                v71 = (MIL::IRDictionaryValue *)&v66[16 * v62];
                do
                {
                  v72 = *((_OWORD *)v69 - 1);
                  v69 = (MIL::IRDictionaryValue *)((char *)v69 - 16);
                  *((_OWORD *)v71 - 1) = v72;
                  v71 = (MIL::IRDictionaryValue *)((char *)v71 - 16);
                  *(_QWORD *)v69 = 0;
                  *((_QWORD *)v69 + 1) = 0;
                }
                while (v69 != v70);
                v73 = *(int64x2_t *)v260;
              }
              v61 = (MIL::IRDictionaryValue *)(v68 + 2);
              v260[0] = v71;
              v260[1] = (MIL::IRDictionaryValue *)(v68 + 2);
              *(int64x2_t *)((char *)v275 + 8) = v73;
              v74 = v261[0];
              v261[0] = &v66[16 * v67];
              *((_QWORD *)&v275[1] + 1) = v74;
              *(_QWORD *)&v275[0] = v73.i64[0];
              std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)v275);
            }
            else
            {
              *(_QWORD *)v260[1] = v57;
              *((_QWORD *)v60 + 1) = v58;
              v61 = (MIL::IRDictionaryValue *)((char *)v60 + 16);
            }
            v260[1] = v61;
            v75 = v257;
            v257 = 0;
            if (v75)
              (*(void (**)(MIL::IRTupleValue *))(*(_QWORD *)v75 + 8))(v75);
            v21 = a2;
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            v52 += 2;
          }
          while (v52 != v53);
          v77 = v260[0];
          v76 = v260[1];
        }
        v78 = MIL::IRListValueType::Make(v21, v50, (const MIL::IRValueType *)((v76 - v77) >> 4));
        MIL::IRListValueType::MakeValue(v78, (uint64_t)v260, (uint64_t *)__p);
        if (*((char *)m + 39) < 0)
          std::string::__init_copy_ctor_external(&v254, (const std::string::value_type *)m[2], m[3]);
        else
          v254 = *(std::string *)(m + 2);
        MIL::IRTensorValueType::MakeStringValue(Scalar, (const MIL::IRTensorValueType *)&v254, &v257);
        *(_QWORD *)&v275[0] = v257;
        if (v257)
        {
          v79 = (_QWORD *)operator new();
          v80 = v257;
          *v79 = &unk_1EA992A68;
          v79[1] = 0;
          v79[2] = 0;
          v79[3] = v80;
        }
        else
        {
          v79 = 0;
        }
        *((_QWORD *)&v275[0] + 1) = v79;
        v257 = 0;
        v258 = (MIL::IRTupleValue *)v275;
        v81 = std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::shared_ptr<MIL::IRValue const>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::IRValue const>&&>,std::tuple<>>((uint64_t)v262, v275, (uint64_t)&std::piecewise_construct, (_OWORD **)&v258);
        std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRListValue const,std::default_delete<MIL::IRListValue const>,void>(v81 + 4, (uint64_t *)__p);
        v82 = (std::__shared_weak_count *)*((_QWORD *)&v275[0] + 1);
        if (*((_QWORD *)&v275[0] + 1))
        {
          v83 = (unint64_t *)(*((_QWORD *)&v275[0] + 1) + 8);
          do
            v84 = __ldaxr(v83);
          while (__stlxr(v84 - 1, v83));
          if (!v84)
          {
            ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
            std::__shared_weak_count::__release_weak(v82);
          }
        }
        v85 = v257;
        v257 = 0;
        if (v85)
          (*(void (**)(MIL::IRTupleValue *))(*(_QWORD *)v85 + 8))(v85);
        if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v254.__r_.__value_.__l.__data_);
        v86 = (MIL::IRListValue *)__p[0];
        __p[0] = 0;
        if (v86)
        {
          MIL::IRListValue::~IRListValue(v86);
          MEMORY[0x1E0C023A0]();
        }
        *(_QWORD *)&v275[0] = v260;
        std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)v275);
      }
    }
    v87 = operator new(0x10uLL);
    *((_QWORD *)&v275[0] + 1) = v87 + 2;
    *(_QWORD *)&v275[1] = v87 + 2;
    *v87 = Scalar;
    v87[1] = v241;
    *(_QWORD *)&v275[0] = v87;
    v88 = MIL::IRTupleValueType::Make(v21, (uint64_t)v275);
    if (*(_QWORD *)&v275[0])
    {
      *((_QWORD *)&v275[0] + 1) = *(_QWORD *)&v275[0];
      operator delete(*(void **)&v275[0]);
    }
    v253 = 13;
    strcpy((char *)v252, "DefaultShapes");
    MIL::IRTensorValueType::MakeStringValue(Scalar, (const MIL::IRTensorValueType *)v252, &v258);
    *(_QWORD *)&v275[0] = v258;
    if (v258)
    {
      v89 = (_QWORD *)operator new();
      v90 = v258;
      *v89 = &unk_1EA992A68;
      v89[1] = 0;
      v89[2] = 0;
      v89[3] = v90;
    }
    else
    {
      v89 = 0;
    }
    *((_QWORD *)&v275[0] + 1) = v89;
    v258 = 0;
    MIL::IRDictionaryValueType::MakeValue((uint64_t)v241, (uint64_t)v265, (uint64_t *)&v251);
    *(_QWORD *)&v275[1] = v251;
    if (v251)
    {
      v91 = (_QWORD *)operator new();
      v92 = v251;
      *v91 = &unk_1EA999830;
      v91[1] = 0;
      v91[2] = 0;
      v91[3] = v92;
    }
    else
    {
      v91 = 0;
    }
    *((_QWORD *)&v275[1] + 1) = v91;
    v251 = 0;
    v260[1] = 0;
    v261[0] = 0;
    v260[0] = 0;
    __p[0] = v260;
    LOBYTE(__p[1]) = 0;
    v93 = (MIL::IRDictionaryValue *)operator new(0x20uLL);
    v94 = 0;
    v260[0] = v93;
    v260[1] = v93;
    v261[0] = (char *)v93 + 32;
    do
    {
      v95 = v275[v94];
      *(_OWORD *)v93 = v95;
      if (*((_QWORD *)&v95 + 1))
      {
        v96 = (unint64_t *)(*((_QWORD *)&v95 + 1) + 8);
        do
          v97 = __ldxr(v96);
        while (__stxr(v97 + 1, v96));
      }
      ++v94;
      v93 = (MIL::IRDictionaryValue *)((char *)v93 + 16);
    }
    while (v94 != 2);
    v260[1] = v93;
    MIL::IRTupleValueType::MakeValue(v88, (uint64_t)v260, (uint64_t *)&v257);
    __p[0] = v260;
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    for (n = 1; n != -1; --n)
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v275[n]);
    v100 = v251;
    v251 = 0;
    if (v100)
    {
      MIL::IRDictionaryValue::~IRDictionaryValue(v100);
      MEMORY[0x1E0C023A0]();
    }
    v101 = v258;
    v258 = 0;
    if (v101)
      (*(void (**)(MIL::IRTupleValue *))(*(_QWORD *)v101 + 8))(v101);
    if (v253 < 0)
      operator delete(v252[0]);
    v102 = MIL::IRDictionaryValueType::Make(a2, Scalar, v241, v99);
    v103 = operator new(0x10uLL);
    *((_QWORD *)&v275[0] + 1) = v103 + 2;
    *(_QWORD *)&v275[1] = v103 + 2;
    *v103 = Scalar;
    v103[1] = v102;
    *(_QWORD *)&v275[0] = v103;
    v104 = MIL::IRTupleValueType::Make(a2, (uint64_t)v275);
    if (*(_QWORD *)&v275[0])
    {
      *((_QWORD *)&v275[0] + 1) = *(_QWORD *)&v275[0];
      operator delete(*(void **)&v275[0]);
    }
    HIBYTE(v250[2]) = 16;
    strcpy((char *)v250, "EnumeratedShapes");
    MIL::IRTensorValueType::MakeStringValue(Scalar, (const MIL::IRTensorValueType *)v250, &v258);
    *(_QWORD *)&v275[0] = v258;
    if (v258)
    {
      v105 = (_QWORD *)operator new();
      v106 = v258;
      *v105 = &unk_1EA992A68;
      v105[1] = 0;
      v105[2] = 0;
      v105[3] = v106;
    }
    else
    {
      v105 = 0;
    }
    *((_QWORD *)&v275[0] + 1) = v105;
    v258 = 0;
    MIL::IRDictionaryValueType::MakeValue(v102, (uint64_t)v269, (uint64_t *)&v249);
    *(_QWORD *)&v275[1] = v249;
    if (v249)
    {
      v107 = (_QWORD *)operator new();
      v108 = v249;
      *v107 = &unk_1EA999830;
      v107[1] = 0;
      v107[2] = 0;
      v107[3] = v108;
    }
    else
    {
      v107 = 0;
    }
    *((_QWORD *)&v275[1] + 1) = v107;
    v249 = 0;
    v260[1] = 0;
    v261[0] = 0;
    v260[0] = 0;
    __p[0] = v260;
    LOBYTE(__p[1]) = 0;
    v109 = (MIL::IRDictionaryValue *)operator new(0x20uLL);
    v110 = 0;
    v260[0] = v109;
    v260[1] = v109;
    v261[0] = (char *)v109 + 32;
    do
    {
      v111 = v275[v110];
      *(_OWORD *)v109 = v111;
      if (*((_QWORD *)&v111 + 1))
      {
        v112 = (unint64_t *)(*((_QWORD *)&v111 + 1) + 8);
        do
          v113 = __ldxr(v112);
        while (__stxr(v113 + 1, v112));
      }
      ++v110;
      v109 = (MIL::IRDictionaryValue *)((char *)v109 + 16);
    }
    while (v110 != 2);
    v260[1] = v109;
    MIL::IRTupleValueType::MakeValue(v104, (uint64_t)v260, (uint64_t *)&v251);
    __p[0] = v260;
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    for (ii = 1; ii != -1; --ii)
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v275[ii]);
    v115 = v249;
    v249 = 0;
    if (v115)
    {
      MIL::IRDictionaryValue::~IRDictionaryValue(v115);
      MEMORY[0x1E0C023A0]();
    }
    v116 = v258;
    v258 = 0;
    if (v116)
      (*(void (**)(MIL::IRTupleValue *))(*(_QWORD *)v116 + 8))(v116);
    if (SHIBYTE(v250[2]) < 0)
      operator delete(v250[0]);
    v117 = (const MIL::IRValueType *)MIL::IRUnknownDimension::Make(a2, 0);
    v119 = (const MIL::IRValueType *)MIL::IRListValueType::MakeWithDimension(a2, v50, v117, v118);
    v120 = (MIL::MILContext *)MIL::IRTensorValueType::MakeScalar(a2, 3);
    v122 = MIL::IRDictionaryValueType::Make(a2, v120, v119, v121);
    v123 = MIL::IRTensorValueType::MakeScalar(a2, 3);
    v124 = operator new(0x10uLL);
    *((_QWORD *)&v275[0] + 1) = v124 + 2;
    *(_QWORD *)&v275[1] = v124 + 2;
    *v124 = v123;
    v124[1] = v122;
    *(_QWORD *)&v275[0] = v124;
    v125 = MIL::IRTupleValueType::Make(a2, (uint64_t)v275);
    if (*(_QWORD *)&v275[0])
    {
      *((_QWORD *)&v275[0] + 1) = *(_QWORD *)&v275[0];
      operator delete(*(void **)&v275[0]);
    }
    v248 = 9;
    strcpy((char *)v247, "RangeDims");
    MIL::IRTensorValueType::MakeStringValue(Scalar, (const MIL::IRTensorValueType *)v247, &v258);
    *(_QWORD *)&v275[0] = v258;
    if (v258)
    {
      v126 = (_QWORD *)operator new();
      v127 = v258;
      *v126 = &unk_1EA992A68;
      v126[1] = 0;
      v126[2] = 0;
      v126[3] = v127;
    }
    else
    {
      v126 = 0;
    }
    *((_QWORD *)&v275[0] + 1) = v126;
    v258 = 0;
    MIL::IRDictionaryValueType::MakeValue(v122, (uint64_t)v262, (uint64_t *)&v246);
    *(_QWORD *)&v275[1] = v246;
    if (v246)
    {
      v128 = (_QWORD *)operator new();
      v129 = v246;
      *v128 = &unk_1EA999830;
      v128[1] = 0;
      v128[2] = 0;
      v128[3] = v129;
    }
    else
    {
      v128 = 0;
    }
    *((_QWORD *)&v275[1] + 1) = v128;
    v246 = 0;
    v260[1] = 0;
    v261[0] = 0;
    v260[0] = 0;
    __p[0] = v260;
    LOBYTE(__p[1]) = 0;
    v130 = (MIL::IRDictionaryValue *)operator new(0x20uLL);
    v131 = 0;
    v260[0] = v130;
    v260[1] = v130;
    v261[0] = (char *)v130 + 32;
    do
    {
      v132 = v275[v131];
      *(_OWORD *)v130 = v132;
      if (*((_QWORD *)&v132 + 1))
      {
        v133 = (unint64_t *)(*((_QWORD *)&v132 + 1) + 8);
        do
          v134 = __ldxr(v133);
        while (__stxr(v134 + 1, v133));
      }
      ++v131;
      v130 = (MIL::IRDictionaryValue *)((char *)v130 + 16);
    }
    while (v131 != 2);
    v260[1] = v130;
    MIL::IRTupleValueType::MakeValue(v125, (uint64_t)v260, (uint64_t *)&v249);
    __p[0] = v260;
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    for (jj = 1; jj != -1; --jj)
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v275[jj]);
    v136 = v246;
    v246 = 0;
    if (v136)
    {
      MIL::IRDictionaryValue::~IRDictionaryValue(v136);
      MEMORY[0x1E0C023A0]();
    }
    v137 = v258;
    v258 = 0;
    v138 = a2;
    if (v137)
      (*(void (**)(MIL::IRTupleValue *))(*(_QWORD *)v137 + 8))(v137);
    if (v248 < 0)
      operator delete(v247[0]);
    v260[0] = 0;
    v260[1] = 0;
    v261[0] = 0;
    __p[0] = 0;
    __p[1] = 0;
    v256 = 0;
    if (v240)
    {
      v139 = (MIL::IRDictionaryValue *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v261, 1uLL);
      v141 = (char *)v139 + 8 * v140;
      *(_QWORD *)v139 = v88;
      v142 = (MIL::IRDictionaryValue *)((char *)v139 + 8);
      v144 = v260[0];
      v143 = v260[1];
      if (v260[1] != v260[0])
      {
        do
        {
          v145 = *((_QWORD *)v143 - 1);
          v143 = (MIL::IRDictionaryValue *)((char *)v143 - 8);
          *((_QWORD *)v139 - 1) = v145;
          v139 = (MIL::IRDictionaryValue *)((char *)v139 - 8);
        }
        while (v143 != v144);
        v143 = v260[0];
      }
      v260[0] = v139;
      v260[1] = v142;
      v261[0] = v141;
      if (v143)
        operator delete(v143);
      v260[1] = v142;
      v146 = v257;
      v258 = v257;
      if (v257)
      {
        v147 = (_QWORD *)operator new();
        v148 = v257;
        *v147 = &unk_1EA999890;
        v147[1] = 0;
        v147[2] = 0;
        v147[3] = v148;
      }
      else
      {
        v147 = 0;
      }
      v259 = v147;
      v257 = 0;
      v149 = __p[1];
      if (__p[1] >= v256)
      {
        v151 = ((char *)__p[1] - (char *)__p[0]) >> 4;
        v152 = v151 + 1;
        if ((unint64_t)(v151 + 1) >> 60)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v153 = v256 - (char *)__p[0];
        if ((v256 - (char *)__p[0]) >> 3 > v152)
          v152 = v153 >> 3;
        if ((unint64_t)v153 >= 0x7FFFFFFFFFFFFFF0)
          v154 = 0xFFFFFFFFFFFFFFFLL;
        else
          v154 = v152;
        v276 = (void **)&v256;
        v155 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)&v256, v154);
        v157 = (MIL::IRTupleValue **)&v155[16 * v151];
        *v157 = v146;
        v157[1] = (MIL::IRTupleValue *)v147;
        v159 = __p[0];
        v158 = __p[1];
        if (__p[1] == __p[0])
        {
          v162 = vdupq_n_s64((unint64_t)__p[1]);
          v160 = &v155[16 * v151];
          v138 = a2;
        }
        else
        {
          v160 = &v155[16 * v151];
          v138 = a2;
          do
          {
            v161 = *((_OWORD *)v158 - 1);
            v158 -= 2;
            *((_OWORD *)v160 - 1) = v161;
            v160 -= 16;
            *v158 = 0;
            v158[1] = 0;
          }
          while (v158 != v159);
          v162 = *(int64x2_t *)__p;
        }
        v150 = v157 + 2;
        __p[0] = v160;
        __p[1] = v157 + 2;
        *(int64x2_t *)((char *)v275 + 8) = v162;
        v163 = v256;
        v256 = &v155[16 * v156];
        *((_QWORD *)&v275[1] + 1) = v163;
        *(_QWORD *)&v275[0] = v162.i64[0];
        std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)v275);
      }
      else
      {
        *(_QWORD *)__p[1] = v146;
        v149[1] = v147;
        v150 = v149 + 2;
      }
      __p[1] = v150;
    }
    if (v238)
    {
      v164 = v260[1];
      if (v260[1] >= (MIL::IRDictionaryValue *)v261[0])
      {
        v166 = (v260[1] - v260[0]) >> 3;
        if ((unint64_t)(v166 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v167 = (uint64_t)(v261[0] - (unint64_t)v260[0]) >> 2;
        if (v167 <= v166 + 1)
          v167 = v166 + 1;
        if (v261[0] - (unint64_t)v260[0] >= 0x7FFFFFFFFFFFFFF8)
          v168 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v168 = v167;
        if (v168)
          v169 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v261, v168);
        else
          v169 = 0;
        v170 = (MIL::IRDictionaryValue *)&v169[8 * v166];
        v171 = &v169[8 * v168];
        *(_QWORD *)v170 = v104;
        v165 = (MIL::IRDictionaryValue *)((char *)v170 + 8);
        v173 = v260[0];
        v172 = v260[1];
        if (v260[1] != v260[0])
        {
          do
          {
            v174 = *((_QWORD *)v172 - 1);
            v172 = (MIL::IRDictionaryValue *)((char *)v172 - 8);
            *((_QWORD *)v170 - 1) = v174;
            v170 = (MIL::IRDictionaryValue *)((char *)v170 - 8);
          }
          while (v172 != v173);
          v172 = v260[0];
        }
        v260[0] = v170;
        v260[1] = v165;
        v261[0] = v171;
        if (v172)
          operator delete(v172);
      }
      else
      {
        *(_QWORD *)v260[1] = v104;
        v165 = (MIL::IRDictionaryValue *)((char *)v164 + 8);
      }
      v260[1] = v165;
      v175 = v251;
      v258 = v251;
      if (v251)
      {
        v176 = (_QWORD *)operator new();
        v177 = v251;
        *v176 = &unk_1EA999890;
        v176[1] = 0;
        v176[2] = 0;
        v176[3] = v177;
      }
      else
      {
        v176 = 0;
      }
      v259 = v176;
      v251 = 0;
      v178 = __p[1];
      if (__p[1] >= v256)
      {
        v180 = ((char *)__p[1] - (char *)__p[0]) >> 4;
        v181 = v180 + 1;
        if ((unint64_t)(v180 + 1) >> 60)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v182 = v256 - (char *)__p[0];
        if ((v256 - (char *)__p[0]) >> 3 > v181)
          v181 = v182 >> 3;
        if ((unint64_t)v182 >= 0x7FFFFFFFFFFFFFF0)
          v183 = 0xFFFFFFFFFFFFFFFLL;
        else
          v183 = v181;
        v276 = (void **)&v256;
        v184 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)&v256, v183);
        v186 = (MIL::IRTupleValue **)&v184[16 * v180];
        *v186 = v175;
        v186[1] = (MIL::IRTupleValue *)v176;
        v188 = __p[0];
        v187 = __p[1];
        if (__p[1] == __p[0])
        {
          v191 = vdupq_n_s64((unint64_t)__p[1]);
          v189 = &v184[16 * v180];
          v138 = a2;
        }
        else
        {
          v189 = &v184[16 * v180];
          v138 = a2;
          do
          {
            v190 = *((_OWORD *)v187 - 1);
            v187 -= 2;
            *((_OWORD *)v189 - 1) = v190;
            v189 -= 16;
            *v187 = 0;
            v187[1] = 0;
          }
          while (v187 != v188);
          v191 = *(int64x2_t *)__p;
        }
        v179 = v186 + 2;
        __p[0] = v189;
        __p[1] = v186 + 2;
        *(int64x2_t *)((char *)v275 + 8) = v191;
        v192 = v256;
        v256 = &v184[16 * v185];
        *((_QWORD *)&v275[1] + 1) = v192;
        *(_QWORD *)&v275[0] = v191.i64[0];
        std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)v275);
      }
      else
      {
        *(_QWORD *)__p[1] = v175;
        v178[1] = v176;
        v179 = v178 + 2;
      }
      __p[1] = v179;
    }
    if (v239)
    {
      v193 = v260[1];
      if (v260[1] >= (MIL::IRDictionaryValue *)v261[0])
      {
        v195 = (v260[1] - v260[0]) >> 3;
        if ((unint64_t)(v195 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v196 = (uint64_t)(v261[0] - (unint64_t)v260[0]) >> 2;
        if (v196 <= v195 + 1)
          v196 = v195 + 1;
        if (v261[0] - (unint64_t)v260[0] >= 0x7FFFFFFFFFFFFFF8)
          v197 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v197 = v196;
        if (v197)
          v198 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v261, v197);
        else
          v198 = 0;
        v199 = (MIL::IRDictionaryValue *)&v198[8 * v195];
        v200 = &v198[8 * v197];
        *(_QWORD *)v199 = v125;
        v194 = (MIL::IRDictionaryValue *)((char *)v199 + 8);
        v202 = v260[0];
        v201 = v260[1];
        if (v260[1] != v260[0])
        {
          do
          {
            v203 = *((_QWORD *)v201 - 1);
            v201 = (MIL::IRDictionaryValue *)((char *)v201 - 8);
            *((_QWORD *)v199 - 1) = v203;
            v199 = (MIL::IRDictionaryValue *)((char *)v199 - 8);
          }
          while (v201 != v202);
          v201 = v260[0];
        }
        v260[0] = v199;
        v260[1] = v194;
        v261[0] = v200;
        if (v201)
          operator delete(v201);
      }
      else
      {
        *(_QWORD *)v260[1] = v125;
        v194 = (MIL::IRDictionaryValue *)((char *)v193 + 8);
      }
      v260[1] = v194;
      v204 = v249;
      v258 = v249;
      if (v249)
      {
        v205 = (_QWORD *)operator new();
        v206 = v249;
        *v205 = &unk_1EA999890;
        v205[1] = 0;
        v205[2] = 0;
        v205[3] = v206;
      }
      else
      {
        v205 = 0;
      }
      v259 = v205;
      v249 = 0;
      v207 = __p[1];
      if (__p[1] >= v256)
      {
        v209 = ((char *)__p[1] - (char *)__p[0]) >> 4;
        v210 = v209 + 1;
        if ((unint64_t)(v209 + 1) >> 60)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v211 = v256 - (char *)__p[0];
        if ((v256 - (char *)__p[0]) >> 3 > v210)
          v210 = v211 >> 3;
        if ((unint64_t)v211 >= 0x7FFFFFFFFFFFFFF0)
          v212 = 0xFFFFFFFFFFFFFFFLL;
        else
          v212 = v210;
        v276 = (void **)&v256;
        v213 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)&v256, v212);
        v215 = (MIL::IRTupleValue **)&v213[16 * v209];
        *v215 = v204;
        v215[1] = (MIL::IRTupleValue *)v205;
        v217 = __p[0];
        v216 = __p[1];
        if (__p[1] == __p[0])
        {
          v220 = vdupq_n_s64((unint64_t)__p[1]);
          v218 = &v213[16 * v209];
          v138 = a2;
        }
        else
        {
          v218 = &v213[16 * v209];
          v138 = a2;
          do
          {
            v219 = *((_OWORD *)v216 - 1);
            v216 -= 2;
            *((_OWORD *)v218 - 1) = v219;
            v218 -= 16;
            *v216 = 0;
            v216[1] = 0;
          }
          while (v216 != v217);
          v220 = *(int64x2_t *)__p;
        }
        v208 = v215 + 2;
        __p[0] = v218;
        __p[1] = v215 + 2;
        *(int64x2_t *)((char *)v275 + 8) = v220;
        v221 = v256;
        v256 = &v213[16 * v214];
        *((_QWORD *)&v275[1] + 1) = v221;
        *(_QWORD *)&v275[0] = v220.i64[0];
        std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)v275);
      }
      else
      {
        *(_QWORD *)__p[1] = v204;
        v207[1] = v205;
        v208 = v207 + 2;
      }
      __p[1] = v208;
    }
    v222 = MIL::IRTupleValueType::Make(v138, (uint64_t)v260);
    std::string::basic_string[abi:ne180100]<0>(v244, "FlexibleShapeInformation");
    MIL::IRTupleValueType::MakeValue(v222, (uint64_t)__p, (uint64_t *)v275);
    *(_QWORD *)&v243 = *(_QWORD *)&v275[0];
    if (*(_QWORD *)&v275[0])
    {
      v223 = (_QWORD *)operator new();
      v224 = *(_QWORD *)&v275[0];
      *v223 = &unk_1EA999890;
      v223[1] = 0;
      v223[2] = 0;
      v223[3] = v224;
    }
    else
    {
      v223 = 0;
    }
    *((_QWORD *)&v243 + 1) = v223;
    *(_QWORD *)&v275[0] = 0;
    MIL::IRObject::SetAttribute((uint64_t)v237, (unsigned __int8 *)v244, &v243);
    v225 = (std::__shared_weak_count *)*((_QWORD *)&v243 + 1);
    if (*((_QWORD *)&v243 + 1))
    {
      v226 = (unint64_t *)(*((_QWORD *)&v243 + 1) + 8);
      do
        v227 = __ldaxr(v226);
      while (__stlxr(v227 - 1, v226));
      if (!v227)
      {
        ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
        std::__shared_weak_count::__release_weak(v225);
      }
    }
    v228 = *(MIL::IRTupleValue **)&v275[0];
    *(_QWORD *)&v275[0] = 0;
    if (v228)
    {
      MIL::IRTupleValue::~IRTupleValue(v228);
      MEMORY[0x1E0C023A0]();
    }
    if (v245 < 0)
      operator delete(v244[0]);
    *(_QWORD *)&v275[0] = __p;
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)v275);
    if (v260[0])
    {
      v260[1] = v260[0];
      operator delete(v260[0]);
    }
    v229 = v249;
    v249 = 0;
    if (v229)
    {
      MIL::IRTupleValue::~IRTupleValue(v229);
      MEMORY[0x1E0C023A0]();
    }
    v230 = v251;
    v251 = 0;
    if (v230)
    {
      MIL::IRTupleValue::~IRTupleValue(v230);
      MEMORY[0x1E0C023A0]();
    }
    v231 = v257;
    v257 = 0;
    if (v231)
    {
      MIL::IRTupleValue::~IRTupleValue(v231);
      MEMORY[0x1E0C023A0]();
    }
    std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v262);
    std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v265);
    std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v269);
    v10 = v272;
    goto LABEL_308;
  }
  if (v14)
    v15 = 1;
  else
    v15 = v13;
  if ((v15 & 1) != 0)
  {
    v239 = 0;
    goto LABEL_20;
  }
  std::string::basic_string[abi:ne180100]<0>(v275, "FlexibleShapeInformation");
  MIL::IRObject::RemoveAttribute((uint64_t)a3, (unsigned __int8 *)v275);
  if (SBYTE7(v275[1]) < 0)
    operator delete(*(void **)&v275[0]);
LABEL_308:
  if (v10)
  {
    v232 = (unint64_t *)&v10->__shared_owners_;
    do
      v233 = __ldaxr(v232);
    while (__stlxr(v233 - 1, v232));
    if (!v233)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v234 = v274;
  if (v274)
  {
    v235 = (unint64_t *)&v274->__shared_owners_;
    do
      v236 = __ldaxr(v235);
    while (__stlxr(v236 - 1, v235));
    if (!v236)
    {
      ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
      std::__shared_weak_count::__release_weak(v234);
    }
  }
}

void sub_1E05E0858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,MIL::IRTupleValue *a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,MIL::IRTupleValue *a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  uint64_t v57;

  a41 = (uint64_t)&a37;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a41);
  if (__p)
  {
    a44 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<MIL::IRTupleValue const>::reset[abi:ne180100](&a24, 0);
  std::unique_ptr<MIL::IRTupleValue const>::reset[abi:ne180100](&a29, 0);
  std::unique_ptr<MIL::IRTupleValue const>::reset[abi:ne180100]((MIL::IRTupleValue **)&a40, 0);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a47);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a57);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v57 - 224);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v57 - 176);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v57 - 160);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::ShapeToTensorValue(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  unsigned int *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  std::vector<unsigned int>::pointer end;
  unsigned int *v16;
  std::vector<unsigned int>::pointer v17;
  unsigned int *v18;
  std::vector<unsigned int>::pointer begin;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  char *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  std::vector<unsigned int> __p;

  v7 = (_QWORD *)*a2;
  v6 = a2[1];
  v8 = (unsigned int *)operator new(8uLL);
  __p.__begin_ = v8;
  *(_QWORD *)v8 = (v6 - (uint64_t)v7) >> 3;
  __p.__end_ = v8 + 2;
  __p.__end_cap_.__value_ = v8 + 2;
  v9 = MIL::IRTensorValueType::Make(a1, 11, (MIL::MILContext ***)&__p);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  memset(&__p, 0, sizeof(__p));
  std::vector<int>::reserve(&__p, (uint64_t)(a2[1] - *a2) >> 3);
  v10 = (_QWORD *)*a2;
  v11 = (_QWORD *)a2[1];
  if ((_QWORD *)*a2 != v11)
  {
    do
    {
      v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v10 + 16))(*v10);
      if (v12)
      {
        v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 48))(v12);
        v14 = v13;
        end = __p.__end_;
        if (__p.__end_ >= __p.__end_cap_.__value_)
        {
          begin = __p.__begin_;
          v20 = __p.__end_ - __p.__begin_;
          v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 62)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v22 = (char *)__p.__end_cap_.__value_ - (char *)__p.__begin_;
          if (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 1 > v21)
            v21 = v22 >> 1;
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
            v23 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v23 = v21;
          if (v23)
          {
            v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&__p.__end_cap_, v23);
            begin = __p.__begin_;
            end = __p.__end_;
          }
          else
          {
            v24 = 0;
          }
          v28 = (unsigned int *)&v24[4 * v20];
          *v28 = v14;
          v18 = v28 + 1;
          while (end != begin)
          {
            v29 = *--end;
            *--v28 = v29;
          }
LABEL_34:
          __p.__begin_ = v28;
          __p.__end_ = v18;
          __p.__end_cap_.__value_ = (unsigned int *)&v24[4 * v23];
          if (begin)
            operator delete(begin);
          goto LABEL_36;
        }
        *__p.__end_ = v13;
        v16 = end + 1;
      }
      else
      {
        v17 = __p.__end_;
        if (__p.__end_ >= __p.__end_cap_.__value_)
        {
          begin = __p.__begin_;
          v25 = __p.__end_ - __p.__begin_;
          v26 = v25 + 1;
          if ((unint64_t)(v25 + 1) >> 62)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v27 = (char *)__p.__end_cap_.__value_ - (char *)__p.__begin_;
          if (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 1 > v26)
            v26 = v27 >> 1;
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
            v23 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v23 = v26;
          if (v23)
          {
            v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&__p.__end_cap_, v23);
            begin = __p.__begin_;
            v17 = __p.__end_;
          }
          else
          {
            v24 = 0;
          }
          v28 = (unsigned int *)&v24[4 * v25];
          *v28 = -1;
          v18 = v28 + 1;
          while (v17 != begin)
          {
            v30 = *--v17;
            *--v28 = v30;
          }
          goto LABEL_34;
        }
        *__p.__end_ = -1;
        v16 = v17 + 1;
      }
      v18 = v16;
LABEL_36:
      __p.__end_ = v18;
      ++v10;
    }
    while (v10 != v11);
  }
  MIL::IRTensorValueType::MakeInt32Value(v9, (uint64_t)&__p, a3);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_1E05E10F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRListValue const,std::default_delete<MIL::IRListValue const>,void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  if (*a2)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &unk_1EA99A2B0;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  *a2 = 0;
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v5;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void MIL::Attributes::FlexibleShapeInfo::Rewrite(uint64_t **this@<X0>, void (***a2)(MIL::MILContextImpl *__hidden this)@<X1>, const MIL::IRFunction *a3@<X2>, MIL::IRFunction **a4@<X8>)
{
  (*(void (**)(MIL::IRFunction **__return_ptr, const MIL::IRFunction *))(*(_QWORD *)a3 + 232))(a4, a3);
  MIL::Attributes::FlexibleShapeInfo::Replace(this, a2, *a4);
}

void sub_1E05E1220(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

BOOL MIL::Attributes::FlexibleShapeInfo::operator==(uint64_t **a1, uint64_t *a2)
{
  return MIL::Attributes::FlexibleShapeInfo::Impl::operator==(*a1, *a2);
}

BOOL MIL::Attributes::FlexibleShapeInfo::Impl::operator==(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *a1;
  v5 = *(_QWORD **)a2;
  if ((v4 == 0) != (v5 == 0)
    || v4
    && !std::operator==[abi:ne180100]<std::string,std::vector<MIL::IRDimension const*>,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,std::vector<MIL::IRDimension const*>>>>(v4, v5))
  {
    return 0;
  }
  v6 = a1[7];
  v7 = *(_QWORD **)(a2 + 56);
  return (v6 == 0) == (v7 == 0)
      && (!v6
       || std::operator==[abi:ne180100]<std::string,std::vector<std::pair<int,int>>,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,std::vector<std::pair<int,int>>>>>(v6, v7))&& std::operator==[abi:ne180100]<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>((uint64_t)(a1 + 2), (_QWORD *)(a2 + 16));
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1E05E1560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1E05E1600(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  char *v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD v29[2];
  char v30;

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (char *)operator new(0x50uLL);
  v29[0] = v17;
  v29[1] = a1 + 16;
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = v10;
  v18 = *a4;
  v19 = **a4;
  *((_QWORD *)v17 + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)v17 + 1) = v19;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = 0;
  *(_OWORD *)(v17 + 40) = 0u;
  *(_OWORD *)(v17 + 56) = 0u;
  *((_DWORD *)v17 + 18) = 1065353216;
  v30 = 1;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v26)
  {
    *(_QWORD *)v29[0] = *v26;
    *v26 = v29[0];
  }
  else
  {
    *(_QWORD *)v29[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v29[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v29[0])
    {
      v27 = *(_QWORD *)(*(_QWORD *)v29[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v27 >= v11)
          v27 %= v11;
      }
      else
      {
        v27 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v29[0];
    }
  }
  i = (unsigned __int8 *)v29[0];
  v29[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v29, 0);
  return i;
}

void sub_1E05E18B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::clear(a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1E05E1C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1E05E1CDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>::__erase_unique<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unsigned __int8 *result;
  _BYTE v4[24];

  result = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::remove(a1, result, (uint64_t)v4);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v4, 0);
    return (unsigned __int8 *)1;
  }
  return result;
}

void std::vector<int>::reserve(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  std::__compressed_pair<unsigned int *> *p_end_cap;
  unsigned int *value;
  int64_t v5;
  char *v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int *v9;
  std::vector<unsigned int>::pointer begin;
  unsigned int *end;
  unsigned int *v12;
  unsigned int v13;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (__n > value - this->__begin_)
  {
    if (__n >> 62)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v5 = (char *)this->__end_ - (char *)this->__begin_;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)p_end_cap, __n);
    v7 = (unsigned int *)&v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = (unsigned int *)&v6[4 * v8];
    begin = this->__begin_;
    end = this->__end_;
    v12 = v7;
    if (end != this->__begin_)
    {
      v12 = v7;
      do
      {
        v13 = *--end;
        *--v12 = v13;
      }
      while (end != begin);
    }
    this->__begin_ = v12;
    this->__end_ = v7;
    this->__end_cap_.__value_ = v9;
    if (begin)
      operator delete(begin);
  }
}

BOOL std::operator==[abi:ne180100]<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;
  _BOOL8 v4;
  const void **v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned __int8 *v12;

  if (*(_QWORD *)(a1 + 24) != a2[3])
    return 0;
  v3 = (uint64_t *)(a1 + 16);
  do
  {
    v3 = (uint64_t *)*v3;
    v4 = v3 == 0;
    if (!v3)
      break;
    v5 = (const void **)(v3 + 2);
    v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)v3 + 16);
    if (!v6)
      break;
    v7 = v6;
    v8 = *((unsigned __int8 *)v3 + 39);
    if ((v8 & 0x80u) == 0)
      v9 = *((unsigned __int8 *)v3 + 39);
    else
      v9 = v3[3];
    v10 = v6[39];
    v11 = (char)v10;
    if ((v10 & 0x80u) != 0)
      v10 = *((_QWORD *)v6 + 3);
    if (v9 != v10)
      break;
    if (v11 >= 0)
      v12 = v6 + 16;
    else
      v12 = (unsigned __int8 *)*((_QWORD *)v6 + 2);
    if ((v8 & 0x80) != 0)
    {
      if (memcmp(*v5, v12, v3[3]))
        return v4;
    }
    else if (*((_BYTE *)v3 + 39))
    {
      while (*(unsigned __int8 *)v5 == *v12)
      {
        v5 = (const void **)((char *)v5 + 1);
        ++v12;
        if (!--v8)
          goto LABEL_20;
      }
      return 0;
    }
LABEL_20:
    ;
  }
  while (std::operator==[abi:ne180100]<std::string,std::vector<MIL::IRDimension const*>,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,std::vector<MIL::IRDimension const*>>>>((uint64_t)(v3 + 5), (_QWORD *)v7 + 5));
  return v4;
}

BOOL std::operator==[abi:ne180100]<std::string,std::vector<MIL::IRDimension const*>,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,std::vector<MIL::IRDimension const*>>>>(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;
  _BOOL8 v4;
  const void **v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned __int8 *v12;
  const void *v13;
  size_t v14;
  const void *v15;

  if (*(_QWORD *)(a1 + 24) != a2[3])
    return 0;
  v3 = (uint64_t *)(a1 + 16);
  do
  {
    v3 = (uint64_t *)*v3;
    v4 = v3 == 0;
    if (!v3)
      break;
    v5 = (const void **)(v3 + 2);
    v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)v3 + 16);
    if (!v6)
      break;
    v7 = v6;
    v8 = *((unsigned __int8 *)v3 + 39);
    if ((v8 & 0x80u) == 0)
      v9 = *((unsigned __int8 *)v3 + 39);
    else
      v9 = v3[3];
    v10 = v6[39];
    v11 = (char)v10;
    if ((v10 & 0x80u) != 0)
      v10 = *((_QWORD *)v6 + 3);
    if (v9 != v10)
      break;
    if (v11 >= 0)
      v12 = v6 + 16;
    else
      v12 = (unsigned __int8 *)*((_QWORD *)v6 + 2);
    if ((v8 & 0x80) != 0)
    {
      if (memcmp(*v5, v12, v3[3]))
        return v4;
    }
    else if (*((_BYTE *)v3 + 39))
    {
      while (*(unsigned __int8 *)v5 == *v12)
      {
        v5 = (const void **)((char *)v5 + 1);
        ++v12;
        if (!--v8)
          goto LABEL_20;
      }
      return 0;
    }
LABEL_20:
    v13 = (const void *)v3[5];
    v14 = v3[6] - (_QWORD)v13;
    v15 = (const void *)*((_QWORD *)v7 + 5);
  }
  while (v14 == *((_QWORD *)v7 + 6) - (_QWORD)v15 && !memcmp(v13, v15, v14));
  return v4;
}

uint64_t std::operator==[abi:ne180100]<std::string,std::vector<std::pair<int,int>>,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,std::vector<std::pair<int,int>>>>>(uint64_t a1, _QWORD *a2)
{
  uint64_t *v2;
  const void **v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned __int8 *v11;
  char *v12;
  char *v13;
  _DWORD *v14;

  if (*(_QWORD *)(a1 + 24) != a2[3])
    return 0;
  v2 = *(uint64_t **)(a1 + 16);
  if (!v2)
    return 1;
  do
  {
    v4 = (const void **)(v2 + 2);
    result = (uint64_t)std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)v2 + 16);
    if (!result)
      break;
    v6 = result;
    v7 = *((unsigned __int8 *)v2 + 39);
    if ((v7 & 0x80u) == 0)
      v8 = *((unsigned __int8 *)v2 + 39);
    else
      v8 = v2[3];
    v9 = *(unsigned __int8 *)(result + 39);
    v10 = (char)v9;
    if ((v9 & 0x80u) != 0)
      v9 = *(_QWORD *)(result + 24);
    if (v8 != v9)
      return 0;
    if (v10 >= 0)
      v11 = (unsigned __int8 *)(result + 16);
    else
      v11 = *(unsigned __int8 **)(result + 16);
    if ((v7 & 0x80) != 0)
    {
      if (memcmp(*v4, v11, v2[3]))
        return 0;
    }
    else if (*((_BYTE *)v2 + 39))
    {
      while (*(unsigned __int8 *)v4 == *v11)
      {
        v4 = (const void **)((char *)v4 + 1);
        ++v11;
        if (!--v7)
          goto LABEL_19;
      }
      return 0;
    }
LABEL_19:
    v13 = (char *)v2[5];
    v12 = (char *)v2[6];
    v14 = *(_DWORD **)(v6 + 40);
    if (v12 - v13 != *(_QWORD *)(v6 + 48) - (_QWORD)v14)
      return 0;
    while (v13 != v12)
    {
      if (*(_DWORD *)v13 != *v14 || *((_DWORD *)v13 + 1) != v14[1])
        return 0;
      v13 += 8;
      v14 += 2;
    }
    v2 = (uint64_t *)*v2;
    result = 1;
  }
  while (v2);
  return result;
}

void std::__shared_ptr_emplace<std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99A210;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99A210;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E0C023A0);
}

uint64_t std::__shared_ptr_emplace<std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>::__on_zero_shared(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::~__hash_table(a1 + 24);
}

void std::__shared_ptr_emplace<std::unordered_map<std::string,std::vector<std::pair<int,int>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99A260;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::unordered_map<std::string,std::vector<std::pair<int,int>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99A260;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E0C023A0);
}

uint64_t std::__shared_ptr_emplace<std::unordered_map<std::string,std::vector<std::pair<int,int>>>>::__on_zero_shared(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::~__hash_table(a1 + 24);
}

void std::default_delete<MIL::Attributes::FlexibleShapeInfo::Impl>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](a2 + 56);
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>::~__hash_table(a2 + 16);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](a2);
    JUMPOUT(0x1E0C023A0);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>::clear(a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

MIL::IRListValue *std::unique_ptr<MIL::IRListValue const>::reset[abi:ne180100](MIL::IRListValue **a1, MIL::IRListValue *a2)
{
  MIL::IRListValue *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    MIL::IRListValue::~IRListValue(result);
    JUMPOUT(0x1E0C023A0);
  }
  return result;
}

void std::__shared_ptr_pointer<MIL::IRListValue const *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E0C023A0);
}

MIL::IRListValue *std::__shared_ptr_pointer<MIL::IRListValue const *>::__on_zero_shared(uint64_t a1)
{
  MIL::IRListValue *result;

  result = *(MIL::IRListValue **)(a1 + 24);
  if (result)
  {
    MIL::IRListValue::~IRListValue(result);
    JUMPOUT(0x1E0C023A0);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IRListValue const *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

void MIL::Attributes::IOAliasInfo::~IOAliasInfo(MIL::Attributes::IOAliasInfo *this)
{
  std::unique_ptr<MIL::Attributes::IOAliasInfo::Impl>::reset[abi:ne180100]((uint64_t *)this, 0);
}

{
  std::unique_ptr<MIL::Attributes::IOAliasInfo::Impl>::reset[abi:ne180100]((uint64_t *)this, 0);
}

_QWORD *MIL::Attributes::IOAliasInfo::IOAliasInfo(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

uint64_t *MIL::Attributes::IOAliasInfo::Make@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;

  v3 = operator new();
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_DWORD *)(v3 + 32) = 1065353216;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_DWORD *)(v3 + 72) = 1065353216;
  v7 = v3;
  v4 = (_QWORD *)operator new();
  v5 = v7;
  v7 = 0;
  *v4 = v5;
  *a1 = v4;
  return std::unique_ptr<MIL::Attributes::IOAliasInfo::Impl>::reset[abi:ne180100](&v7, 0);
}

void sub_1E05E24BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<MIL::Attributes::IOAliasInfo::Impl>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t *MIL::Attributes::IOAliasInfo::Make@<X0>(MIL::MILContext *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t Attribute;
  MIL::IRValue *v6;
  MIL::IRDictionaryValue *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  std::string::size_type v12;
  uint64_t v13;
  _QWORD *v14;
  std::string::size_type v15;
  std::runtime_error *exception;
  std::string *v18;
  __int128 v19;
  std::runtime_error *v20;
  std::string v21;
  std::string v22;
  std::string __p;
  std::string v24;
  _OWORD v25[2];
  int v26;
  __int128 v27;
  __int128 v28;
  int v29;

  BYTE7(v28) = 9;
  strcpy((char *)&v27, "IOAliases");
  Attribute = MIL::IRObject::TryGetAttribute((uint64_t)a1, (unsigned __int8 *)&v27);
  v6 = (MIL::IRValue *)Attribute;
  if ((SBYTE7(v28) & 0x80000000) == 0)
  {
    if (Attribute)
      goto LABEL_3;
    return MIL::Attributes::IOAliasInfo::Make(a2);
  }
  operator delete((void *)v27);
  if (!v6)
    return MIL::Attributes::IOAliasInfo::Make(a2);
LABEL_3:
  v7 = (MIL::IRDictionaryValue *)MIL::IRValue::AsDictionary(v6);
  v27 = 0u;
  v28 = 0u;
  v29 = 1065353216;
  memset(v25, 0, sizeof(v25));
  v26 = 1065353216;
  v8 = MIL::IRDictionaryValue::begin(v7);
  v9 = MIL::IRDictionaryValue::end(v7);
  while (v8 != v9)
  {
    MIL::IRValue::GetScalar<std::string>(*(const void **)(v8 + 16), &v24);
    MIL::IRValue::GetScalar<std::string>(*(const void **)(v8 + 32), &__p);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::string&,std::string&>((uint64_t)&v27, (unsigned __int8 *)&v24, (__int128 *)&v24, (__int128 *)&__p);
    if (!v10)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      v18 = std::string::append(&v21, "' aliased to multiple internal names.");
      v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v22.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v22);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::string&,std::string&>((uint64_t)v25, (unsigned __int8 *)&__p, (__int128 *)&__p, (__int128 *)&v24);
    if (!v11)
    {
      v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(v20, &v22);
      __cxa_throw(v20, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
    v8 = *(_QWORD *)v8;
  }
  v12 = operator new();
  v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(v12, (uint64_t *)&v27);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(v13 + 40, (uint64_t *)v25);
  v24.__r_.__value_.__r.__words[0] = v12;
  v14 = (_QWORD *)operator new();
  v15 = v24.__r_.__value_.__r.__words[0];
  v24.__r_.__value_.__r.__words[0] = 0;
  *v14 = v15;
  *a2 = v14;
  std::unique_ptr<MIL::Attributes::IOAliasInfo::Impl>::reset[abi:ne180100]((uint64_t *)&v24, 0);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v25);
  return (uint64_t *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v27);
}

void sub_1E05E2758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  uint64_t v35;

  std::unique_ptr<MIL::Attributes::IOAliasInfo::Impl>::reset[abi:ne180100]((uint64_t *)&a29, 0);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v35 - 96);
  _Unwind_Resume(a1);
}

unsigned __int8 *MIL::Attributes::IOAliasInfo::SetAlias(uint64_t *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  std::logic_error *exception;
  std::string *v8;
  __int128 v9;
  std::logic_error *v10;
  std::string *v11;
  __int128 v12;
  std::string v13;
  std::string v14;

  if (std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>((_QWORD *)*a1, a2))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v8 = std::string::append(&v13, "' already exists.");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v14.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &v14);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  if (std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>((_QWORD *)(*a1 + 40), a3))
  {
    v10 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v11 = std::string::append(&v13, "' already exists.");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v14.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(v10, &v14);
    v10->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(v10, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::string&,std::string&>(*a1, a2, (__int128 *)a2, (__int128 *)a3);
  return std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::string,std::string>(*a1 + 40, a3, (uint64_t)a3, (uint64_t)a2);
}

void sub_1E05E29E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  char v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if ((v22 & 1) != 0)
    __cxa_free_exception(v21);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Attributes::IOAliasInfo::GetExternalToInternalNames(MIL::Attributes::IOAliasInfo *this)
{
  return *(_QWORD *)this;
}

uint64_t MIL::Attributes::IOAliasInfo::GetInternalToExternalNames(MIL::Attributes::IOAliasInfo *this)
{
  return *(_QWORD *)this + 40;
}

uint64_t MIL::Attributes::IOAliasInfo::TrySetAlias(uint64_t *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>((_QWORD *)*a1, a2)|| std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>((_QWORD *)(*a1 + 40), a3))
  {
    return 0;
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::string&,std::string&>(*a1, a2, (__int128 *)a2, (__int128 *)a3);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::string,std::string>(*a1 + 40, a3, (uint64_t)a3, (uint64_t)a2);
  return 1;
}

BOOL MIL::Attributes::IOAliasInfo::TryRemoveAlias(_QWORD **a1, unsigned __int8 *a2)
{
  _QWORD *v2;
  unsigned __int8 *v3;
  _BYTE v5[24];

  v2 = *a1;
  v3 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(*a1, a2);
  if (v3)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_unique<std::string>(v2 + 5, v3 + 40);
    std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::remove(v2, v3, (uint64_t)v5);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v5, 0);
  }
  return v3 != 0;
}

unsigned __int8 *MIL::Attributes::IOAliasInfo::GetExternalName(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;

  v2 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>((_QWORD *)(*(_QWORD *)a1 + 40), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return v2 + 40;
}

unsigned __int8 *MIL::Attributes::IOAliasInfo::TryGetExternalName(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;

  v2 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>((_QWORD *)(*(_QWORD *)a1 + 40), a2);
  if (v2)
    return v2 + 40;
  else
    return 0;
}

unsigned __int8 *MIL::Attributes::IOAliasInfo::GetInternalName(_QWORD **a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;

  v2 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(*a1, a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return v2 + 40;
}

unsigned __int8 *MIL::Attributes::IOAliasInfo::TryGetInternalName(_QWORD **a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;

  v2 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(*a1, a2);
  if (v2)
    return v2 + 40;
  else
    return 0;
}

void MIL::Attributes::IOAliasInfo::Replace(MIL::Attributes::IOAliasInfo *this, void (***a2)(MIL::MILContextImpl *__hidden this), MIL::IRFunction *a3)
{
  uint64_t Scalar;
  uint64_t *v7;
  _anonymous_namespace_ *v8;
  std::__shared_weak_count *v9;
  MIL::IRDictionaryValue *v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  MIL::IRDictionaryValue *v15;
  uint64_t v16;
  MIL::MILContext *v17;
  const MIL::IRValueType *v18;
  const MIL::IRValueType *v19;
  uint64_t v20;
  _QWORD *v21;
  MIL::IRDictionaryValue *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  MIL::IRDictionaryValue *v26;
  __int128 v27;
  void *v28[2];
  char v29;
  std::string v30;
  MIL::IRDictionaryValue *v31;
  MIL::IRDictionaryValue *v32;
  std::__shared_weak_count *v33;
  std::string v34;
  uint64_t v35;
  void *__p[2];
  __int128 v37;
  int v38;
  MIL::IRDictionaryValue **v39;

  if (*(_QWORD *)(*(_QWORD *)this + 24))
  {
    *(_OWORD *)__p = 0u;
    v37 = 0u;
    v38 = 1065353216;
    Scalar = MIL::IRTensorValueType::MakeScalar(a2, 3);
    v7 = *(uint64_t **)(*(_QWORD *)this + 16);
    if (v7)
    {
      v8 = (_anonymous_namespace_ *)Scalar;
      do
      {
        if (*((char *)v7 + 63) < 0)
          std::string::__init_copy_ctor_external(&v34, (const std::string::value_type *)v7[5], v7[6]);
        else
          v34 = *(std::string *)(v7 + 5);
        MIL::IRTensorValueType::MakeStringValue(v8, (const MIL::IRTensorValueType *)&v34, &v35);
        if (*((char *)v7 + 39) < 0)
          std::string::__init_copy_ctor_external(&v30, (const std::string::value_type *)v7[2], v7[3]);
        else
          v30 = *(std::string *)(v7 + 2);
        MIL::IRTensorValueType::MakeStringValue(v8, (const MIL::IRTensorValueType *)&v30, &v31);
        v32 = v31;
        if (v31)
        {
          v9 = (std::__shared_weak_count *)operator new();
          v10 = v31;
          v9->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992A68;
          v9->__shared_owners_ = 0;
          v9->__shared_weak_owners_ = 0;
          v9[1].__vftable = (std::__shared_weak_count_vtbl *)v10;
        }
        else
        {
          v9 = 0;
        }
        v33 = v9;
        v31 = 0;
        v39 = &v32;
        v11 = std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::shared_ptr<MIL::IRValue const>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::IRValue const>&&>,std::tuple<>>((uint64_t)__p, &v32, (uint64_t)&std::piecewise_construct, (_OWORD **)&v39);
        std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>(v11 + 4, &v35);
        v12 = v33;
        if (v33)
        {
          p_shared_owners = (unint64_t *)&v33->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v15 = v31;
        v31 = 0;
        if (v15)
          (*(void (**)(MIL::IRDictionaryValue *))(*(_QWORD *)v15 + 8))(v15);
        if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v30.__r_.__value_.__l.__data_);
        v16 = v35;
        v35 = 0;
        if (v16)
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
        if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v34.__r_.__value_.__l.__data_);
        v7 = (uint64_t *)*v7;
      }
      while (v7);
    }
    v17 = (MIL::MILContext *)MIL::IRTensorValueType::MakeScalar(a2, 3);
    v18 = (const MIL::IRValueType *)MIL::IRTensorValueType::MakeScalar(a2, 3);
    v20 = MIL::IRDictionaryValueType::Make(a2, v17, v18, v19);
    MIL::IRDictionaryValueType::MakeValue(v20, (uint64_t)__p, (uint64_t *)&v32);
    v29 = 9;
    strcpy((char *)v28, "IOAliases");
    *(_QWORD *)&v27 = v32;
    if (v32)
    {
      v21 = (_QWORD *)operator new();
      v22 = v32;
      *v21 = &unk_1EA999830;
      v21[1] = 0;
      v21[2] = 0;
      v21[3] = v22;
    }
    else
    {
      v21 = 0;
    }
    *((_QWORD *)&v27 + 1) = v21;
    v32 = 0;
    MIL::IRObject::SetAttribute((uint64_t)a3, (unsigned __int8 *)v28, &v27);
    v23 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
    if (*((_QWORD *)&v27 + 1))
    {
      v24 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (v29 < 0)
      operator delete(v28[0]);
    v26 = v32;
    v32 = 0;
    if (v26)
    {
      MIL::IRDictionaryValue::~IRDictionaryValue(v26);
      MEMORY[0x1E0C023A0]();
    }
    std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)__p);
  }
  else
  {
    BYTE7(v37) = 9;
    strcpy((char *)__p, "IOAliases");
    MIL::IRObject::RemoveAttribute((uint64_t)a3, (unsigned __int8 *)__p);
    if (SBYTE7(v37) < 0)
      operator delete(__p[0]);
  }
}

void sub_1E05E2F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a39 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MIL::Attributes::IOAliasInfo::Rewrite(MIL::Attributes::IOAliasInfo *this@<X0>, void (***a2)(MIL::MILContextImpl *__hidden this)@<X1>, const MIL::IRFunction *a3@<X2>, MIL::IRFunction **a4@<X8>)
{
  (*(void (**)(MIL::IRFunction **__return_ptr, const MIL::IRFunction *))(*(_QWORD *)a3 + 232))(a4, a3);
  MIL::Attributes::IOAliasInfo::Replace(this, a2, *a4);
}

void sub_1E05E3098(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Attributes::IOAliasInfo::operator==(uint64_t *a1, _QWORD **a2)
{
  return std::operator==[abi:ne180100]<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,std::string>>>(*a1, *a2);
}

uint64_t *std::unique_ptr<MIL::Attributes::IOAliasInfo::Impl>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v2 + 40);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v2);
    JUMPOUT(0x1E0C023A0);
  }
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::string,std::string>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 *i;
  unint64_t v17;
  char *v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD v28[2];
  char v29;

  v9 = (_QWORD *)(a1 + 24);
  v10 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v15 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      for (i = *v15; i; i = *(unsigned __int8 **)i)
      {
        v17 = *((_QWORD *)i + 1);
        if (v17 == v11)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12)
              v17 %= v12;
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4)
            break;
        }
      }
    }
  }
  v18 = (char *)operator new(0x40uLL);
  v28[0] = v18;
  v28[1] = a1 + 16;
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = v11;
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_QWORD *)v18 + 4) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_OWORD *)(v18 + 40) = *(_OWORD *)a4;
  *((_QWORD *)v18 + 7) = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  v29 = 1;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v12 || (float)(v20 * (float)v12) < v19)
  {
    v21 = 1;
    if (v12 >= 3)
      v21 = (v12 & (v12 - 1)) != 0;
    v22 = v21 | (2 * v12);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v24);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v4 = v11 % v12;
      else
        v4 = v11;
    }
    else
    {
      v4 = (v12 - 1) & v11;
    }
  }
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v25)
  {
    *(_QWORD *)v28[0] = *v25;
    *v25 = v28[0];
  }
  else
  {
    *(_QWORD *)v28[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v28[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v28[0])
    {
      v26 = *(_QWORD *)(*(_QWORD *)v28[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v26 >= v12)
          v26 %= v12;
      }
      else
      {
        v26 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v28[0];
    }
  }
  i = (unsigned __int8 *)v28[0];
  v28[0] = 0;
  ++*v9;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v28, 0);
  return i;
}

void sub_1E05E33B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void MIL::Attributes::TraceabilityInfo::~TraceabilityInfo(void ***this)
{
  void **v1;

  v1 = *this;
  *this = 0;
  if (v1)
    std::default_delete<MIL::Attributes::TraceabilityInfo::Impl>::operator()[abi:ne180100]((uint64_t)this, v1);
}

{
  void **v1;

  v1 = *this;
  *this = 0;
  if (v1)
    std::default_delete<MIL::Attributes::TraceabilityInfo::Impl>::operator()[abi:ne180100]((uint64_t)this, v1);
}

_QWORD *MIL::Attributes::TraceabilityInfo::TraceabilityInfo(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

_QWORD *MIL::Attributes::TraceabilityInfo::Make@<X0>(_QWORD *a1@<X8>)
{
  _OWORD *v3;
  _QWORD *result;

  v3 = (_OWORD *)operator new();
  *v3 = 0u;
  v3[1] = 0u;
  v3[2] = 0u;
  result = (_QWORD *)operator new();
  *result = v3;
  *a1 = result;
  return result;
}

void sub_1E05E34C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void **v10;

  a10 = 0;
  std::default_delete<MIL::Attributes::TraceabilityInfo::Impl>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  _Unwind_Resume(a1);
}

const MIL::IRValue *MIL::Attributes::TraceabilityInfo::Make@<X0>(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  MIL::IRDictionaryValue *v6;
  _anonymous_namespace_ *Scalar;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  const MIL::IRValue *v30;
  const MIL::IRValue *result;
  std::runtime_error *exception;
  std::runtime_error *v33;
  uint64_t v34[2];
  __int128 v35;
  uint64_t v36;
  uint64_t v37[2];
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *__p[2];
  char v45;
  const MIL::IRValue *v46;
  void *v47[2];
  char v48;
  const MIL::IRValue *v49;
  _QWORD v50[3];
  void **v51[3];
  void ***v52;

  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "TraceabilityInfo is not a IRDictionaryType.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v6 = (MIL::IRDictionaryValue *)v5;
  Scalar = (_anonymous_namespace_ *)MIL::IRTensorValueType::MakeScalar(*a1, 3);
  std::string::basic_string[abi:ne180100]<0>(v47, "scope_name");
  MIL::IRTensorValueType::MakeStringValue(Scalar, (const MIL::IRTensorValueType *)v47, &v49);
  if (v48 < 0)
    operator delete(v47[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "scope_type");
  MIL::IRTensorValueType::MakeStringValue(Scalar, (const MIL::IRTensorValueType *)__p, &v46);
  if (v45 < 0)
    operator delete(__p[0]);
  MIL::IRDictionaryValue::TryGetValueForKey(v6, v49, &v42);
  MIL::IRDictionaryValue::TryGetValueForKey(v6, v46, &v40);
  if (!(v42 | v40))
  {
    v33 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v33, "Atleast one of scope_name or scope_type should be a key in the TraceabilityInfo Dict.");
    __cxa_throw(v33, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v8 = (std::__shared_weak_count *)v43;
  v37[0] = v42;
  v37[1] = v43;
  if (v43)
  {
    v9 = (unint64_t *)(v43 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (std::__shared_weak_count *)v41;
  v34[0] = v40;
  v34[1] = v41;
  if (v41)
  {
    v14 = (unint64_t *)(v41 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  if (v13)
  {
    v16 = (unint64_t *)&v13->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v18 = operator new();
  v19 = v39;
  v20 = v38;
  v39 = 0;
  v38 = 0uLL;
  v21 = v36;
  v22 = v35;
  v36 = 0;
  v35 = 0uLL;
  *(_OWORD *)v18 = v20;
  *(_QWORD *)(v18 + 16) = v19;
  v50[2] = 0;
  memset(v51, 0, sizeof(v51));
  *(_OWORD *)(v18 + 24) = v22;
  *(_QWORD *)(v18 + 40) = v21;
  v50[0] = 0;
  v50[1] = 0;
  v52 = (void ***)v50;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
  v52 = v51;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
  v23 = (_QWORD *)operator new();
  *v23 = v18;
  *a3 = v23;
  v51[0] = (void **)&v35;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v51);
  v51[0] = (void **)&v38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v51);
  v24 = (std::__shared_weak_count *)v41;
  if (v41)
  {
    v25 = (unint64_t *)(v41 + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = (std::__shared_weak_count *)v43;
  if (v43)
  {
    v28 = (unint64_t *)(v43 + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = v46;
  v46 = 0;
  if (v30)
    (*(void (**)(const MIL::IRValue *))(*(_QWORD *)v30 + 8))(v30);
  result = v49;
  v49 = 0;
  if (result)
    return (const MIL::IRValue *)(*(uint64_t (**)(const MIL::IRValue *))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1E05E3844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  v33 = *(_QWORD *)(v31 - 128);
  *(_QWORD *)(v31 - 128) = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  v34 = *(_QWORD *)(v31 - 96);
  *(_QWORD *)(v31 - 96) = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  _Unwind_Resume(a1);
}

void sub_1E05E3940()
{
  uint64_t v0;

  if (*(char *)(v0 - 97) < 0)
    operator delete(*(void **)(v0 - 120));
  JUMPOUT(0x1E05E3938);
}

void `anonymous namespace'::ExtractTraceabilityInfo(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  MIL::IRListValue *v4;
  MIL::IRListValue *v5;
  uint64_t Type;
  MIL::IRValueType *v7;
  uint64_t v8;
  MIL::IRTensorValueType *v9;
  uint64_t Values;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  std::string *v25;
  std::string *v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  unint64_t *v30;
  unint64_t v31;
  std::runtime_error *v32;
  std::runtime_error *exception;
  std::string __p;
  const void *v35;
  std::__shared_weak_count *v36;
  std::__split_buffer<std::string> __v;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v2 = *a1;
  if (v2)
  {
    v4 = (MIL::IRListValue *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
    v5 = v4;
    if (!v4)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Traceability scope_name and scope_type should be of ListValueType.");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    Type = MIL::IRListValue::GetType(v4);
    v7 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)Type + 64))(Type);
    if (!(*(uint64_t (**)(MIL::IRValueType *))(*(_QWORD *)v7 + 24))(v7)
      || (v8 = MIL::IRValueType::AsTensorType(v7),
          (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 88))(v8) != 3)
      || (v9 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v7), !MIL::IRTensorValueType::IsScalar(v9)))
    {
      v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v32, "Each element of traceability scope_name/scope_type list should be a IRTensorValueType of type scalar string.");
      __cxa_throw(v32, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    Values = MIL::IRListValue::GetValues(v5);
    if (v11)
    {
      v12 = Values;
      v13 = Values + 16 * v11;
      do
      {
        v14 = *(const void **)v12;
        v15 = *(std::__shared_weak_count **)(v12 + 8);
        v35 = *(const void **)v12;
        v36 = v15;
        if (v15)
        {
          p_shared_owners = (unint64_t *)&v15->__shared_owners_;
          do
            v17 = __ldxr(p_shared_owners);
          while (__stxr(v17 + 1, p_shared_owners));
        }
        MIL::IRValue::GetScalar<std::string>(v14, &__p);
        v19 = *(_QWORD *)(a2 + 8);
        v18 = *(_QWORD *)(a2 + 16);
        if (v19 >= v18)
        {
          v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *(_QWORD *)a2) >> 3);
          v22 = v21 + 1;
          if (v21 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *(_QWORD *)a2) >> 3);
          if (2 * v23 > v22)
            v22 = 2 * v23;
          if (v23 >= 0x555555555555555)
            v24 = 0xAAAAAAAAAAAAAAALL;
          else
            v24 = v22;
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
          if (v24)
            v25 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v24);
          else
            v25 = 0;
          v26 = v25 + v21;
          __v.__first_ = v25;
          __v.__begin_ = v26;
          __v.__end_cap_.__value_ = &v25[v24];
          v27 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          v26->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v27;
          memset(&__p, 0, sizeof(__p));
          __v.__end_ = v26 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
          v28 = *(_QWORD *)(a2 + 8);
          std::__split_buffer<std::string>::~__split_buffer(&__v);
          v29 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          *(_QWORD *)(a2 + 8) = v28;
          if (v29 < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            if (v15)
            {
LABEL_25:
              v30 = (unint64_t *)&v15->__shared_owners_;
              do
                v31 = __ldaxr(v30);
              while (__stlxr(v31 - 1, v30));
              if (!v31)
              {
                ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
                std::__shared_weak_count::__release_weak(v15);
              }
            }
          }
          else if (v15)
          {
            goto LABEL_25;
          }
        }
        else
        {
          v20 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(_QWORD *)(v19 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)v19 = v20;
          *(_QWORD *)(a2 + 8) = v19 + 24;
          if (v15)
            goto LABEL_25;
        }
        v12 += 16;
      }
      while (v12 != v13);
    }
  }
}

void sub_1E05E3C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, std::__split_buffer<std::string> *a17)
{
  void *v17;

  __cxa_free_exception(v17);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void MIL::Attributes::TraceabilityInfo::Make(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t Attribute;
  uint64_t v7;
  void (***v8)(MIL::MILContextImpl *__hidden);
  void (***v9)(MIL::MILContextImpl *__hidden);
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void (***v14[2])(MIL::MILContextImpl *__hidden);
  void *__p[2];
  char v16;

  v5 = *a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "TraceabilityInfo");
  Attribute = MIL::IRObject::TryGetAttribute(v5, (unsigned __int8 *)__p);
  v7 = Attribute;
  if (v16 < 0)
  {
    operator delete(__p[0]);
    if (v7)
      goto LABEL_3;
LABEL_12:
    MIL::Attributes::TraceabilityInfo::Make(a3);
    return;
  }
  if (!Attribute)
    goto LABEL_12;
LABEL_3:
  v8 = *a1;
  v9 = a1[1];
  v14[0] = v8;
  v14[1] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 1);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  MIL::Attributes::TraceabilityInfo::Make(v14, v7, a3);
  if (v9)
  {
    v12 = (unint64_t *)(v9 + 1);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      (*v9)[2]((MIL::MILContextImpl *)v9);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v9);
    }
  }
}

void sub_1E05E3D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void MIL::Attributes::TraceabilityInfo::GetValue(__int128 ***a1@<X0>, void (****a2)(MIL::MILContextImpl *__hidden this)@<X1>, uint64_t *a3@<X8>)
{
  __int128 **v6;
  __int128 **v7;
  MIL::MILContext *Scalar;
  std::string::size_type i;
  std::string::size_type size;
  __int128 v11;
  _OWORD *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count_vtbl *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  _QWORD *v24;
  _QWORD *v25;
  char *v26;
  __int128 v27;
  int64x2_t v28;
  uint64_t v29;
  _OWORD *v30;
  std::string::size_type j;
  std::string::size_type v32;
  __int128 v33;
  _OWORD *v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count_vtbl *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  _QWORD *v46;
  _QWORD *v47;
  char *v48;
  __int128 v49;
  int64x2_t v50;
  uint64_t v51;
  _OWORD *v52;
  std::__shared_weak_count *v53;
  std::__shared_weak_count_vtbl *v54;
  _QWORD *v55;
  std::__shared_weak_count *v56;
  unint64_t *p_shared_owners;
  unint64_t v58;
  _OWORD *v59;
  MIL::IRListValue *v60;
  std::__shared_weak_count *v61;
  std::__shared_weak_count_vtbl *v62;
  _QWORD *v63;
  const MIL::IRValueType *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  _OWORD *v68;
  MIL::IRListValue *v69;
  uint64_t v70;
  void ***v71;
  void (****v72)(MIL::MILContextImpl *__hidden);
  const MIL::IRValueType *v73;
  void *v74[2];
  char v75;
  void *__p[2];
  char v77;
  _OWORD *v78;
  MIL::IRListValue *v79;
  std::string v80;
  std::string v81;
  _OWORD *v82;
  std::__shared_weak_count *v83;
  int64x2_t v84;
  _QWORD v85[2];
  int64x2_t v86;
  _QWORD v87[2];
  std::string v88;
  std::string v89;
  _OWORD v90[2];
  _QWORD *v91;
  _OWORD *v92[3];

  v6 = *a1;
  memset(&v89, 0, sizeof(v89));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v89, *v6, v6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v6[1] - (char *)*v6) >> 3));
  v7 = *a1;
  memset(&v88, 0, sizeof(v88));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v88, v7[3], v7[4], 0xAAAAAAAAAAAAAAABLL * (((char *)v7[4] - (char *)v7[3]) >> 3));
  Scalar = (MIL::MILContext *)MIL::IRTensorValueType::MakeScalar(*a2, 3);
  v72 = a2;
  v73 = (const MIL::IRValueType *)MIL::IRListValueType::Make(*a2, Scalar, (const MIL::IRValueType *)(0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v89.__r_.__value_.__l.__size_- v89.__r_.__value_.__r.__words[0]) >> 3)));
  v86 = 0uLL;
  v87[0] = 0;
  v84 = 0uLL;
  v85[0] = 0;
  size = v89.__r_.__value_.__l.__size_;
  for (i = v89.__r_.__value_.__r.__words[0]; i != size; i += 24)
  {
    if (*(char *)(i + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v81, *(const std::string::value_type **)i, *(_QWORD *)(i + 8));
    }
    else
    {
      v11 = *(_OWORD *)i;
      v81.__r_.__value_.__r.__words[2] = *(_QWORD *)(i + 16);
      *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v11;
    }
    MIL::IRTensorValueType::MakeStringValue(Scalar, (const MIL::IRTensorValueType *)&v81, v92);
    v12 = v92[0];
    v82 = v92[0];
    if (v92[0])
    {
      v13 = (std::__shared_weak_count *)operator new();
      v14 = (std::__shared_weak_count_vtbl *)v92[0];
      v13->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992A68;
      v13->__shared_owners_ = 0;
      v13->__shared_weak_owners_ = 0;
      v13[1].__vftable = v14;
    }
    else
    {
      v13 = 0;
    }
    v83 = v13;
    v92[0] = 0;
    v15 = v86.i64[1];
    if (v86.i64[1] >= v87[0])
    {
      v17 = (v86.i64[1] - v86.i64[0]) >> 4;
      v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 60)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v19 = v87[0] - v86.i64[0];
      if ((v87[0] - v86.i64[0]) >> 3 > v18)
        v18 = v19 >> 3;
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0)
        v20 = 0xFFFFFFFFFFFFFFFLL;
      else
        v20 = v18;
      v91 = v87;
      v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)v87, v20);
      v23 = &v21[16 * v17];
      *(_QWORD *)v23 = v12;
      *((_QWORD *)v23 + 1) = v13;
      v82 = 0;
      v83 = 0;
      v24 = (_QWORD *)v86.i64[1];
      v25 = (_QWORD *)v86.i64[0];
      if (v86.i64[1] == v86.i64[0])
      {
        v28 = vdupq_n_s64(v86.u64[1]);
        v26 = &v21[16 * v17];
      }
      else
      {
        v26 = &v21[16 * v17];
        do
        {
          v27 = *((_OWORD *)v24 - 1);
          v24 -= 2;
          *((_OWORD *)v26 - 1) = v27;
          v26 -= 16;
          *v24 = 0;
          v24[1] = 0;
        }
        while (v24 != v25);
        v28 = v86;
      }
      v16 = v23 + 16;
      v86.i64[0] = (uint64_t)v26;
      v86.i64[1] = (uint64_t)(v23 + 16);
      *(int64x2_t *)((char *)v90 + 8) = v28;
      v29 = v87[0];
      v87[0] = &v21[16 * v22];
      *((_QWORD *)&v90[1] + 1) = v29;
      *(_QWORD *)&v90[0] = v28.i64[0];
      std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)v90);
    }
    else
    {
      *(_QWORD *)v86.i64[1] = v12;
      *(_QWORD *)(v15 + 8) = v13;
      v16 = (_QWORD *)(v15 + 16);
    }
    v86.i64[1] = (uint64_t)v16;
    v30 = v92[0];
    v92[0] = 0;
    if (v30)
      (*(void (**)(_OWORD *))(*(_QWORD *)v30 + 8))(v30);
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v81.__r_.__value_.__l.__data_);
  }
  v32 = v88.__r_.__value_.__l.__size_;
  for (j = v88.__r_.__value_.__r.__words[0]; j != v32; j += 24)
  {
    if (*(char *)(j + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v80, *(const std::string::value_type **)j, *(_QWORD *)(j + 8));
    }
    else
    {
      v33 = *(_OWORD *)j;
      v80.__r_.__value_.__r.__words[2] = *(_QWORD *)(j + 16);
      *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v33;
    }
    MIL::IRTensorValueType::MakeStringValue(Scalar, (const MIL::IRTensorValueType *)&v80, v92);
    v34 = v92[0];
    v82 = v92[0];
    if (v92[0])
    {
      v35 = (std::__shared_weak_count *)operator new();
      v36 = (std::__shared_weak_count_vtbl *)v92[0];
      v35->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992A68;
      v35->__shared_owners_ = 0;
      v35->__shared_weak_owners_ = 0;
      v35[1].__vftable = v36;
    }
    else
    {
      v35 = 0;
    }
    v83 = v35;
    v92[0] = 0;
    v37 = v84.i64[1];
    if (v84.i64[1] >= v85[0])
    {
      v39 = (v84.i64[1] - v84.i64[0]) >> 4;
      v40 = v39 + 1;
      if ((unint64_t)(v39 + 1) >> 60)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v41 = v85[0] - v84.i64[0];
      if ((v85[0] - v84.i64[0]) >> 3 > v40)
        v40 = v41 >> 3;
      if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0)
        v42 = 0xFFFFFFFFFFFFFFFLL;
      else
        v42 = v40;
      v91 = v85;
      v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)v85, v42);
      v45 = &v43[16 * v39];
      *(_QWORD *)v45 = v34;
      *((_QWORD *)v45 + 1) = v35;
      v82 = 0;
      v83 = 0;
      v46 = (_QWORD *)v84.i64[1];
      v47 = (_QWORD *)v84.i64[0];
      if (v84.i64[1] == v84.i64[0])
      {
        v50 = vdupq_n_s64(v84.u64[1]);
        v48 = &v43[16 * v39];
      }
      else
      {
        v48 = &v43[16 * v39];
        do
        {
          v49 = *((_OWORD *)v46 - 1);
          v46 -= 2;
          *((_OWORD *)v48 - 1) = v49;
          v48 -= 16;
          *v46 = 0;
          v46[1] = 0;
        }
        while (v46 != v47);
        v50 = v84;
      }
      v38 = v45 + 16;
      v84.i64[0] = (uint64_t)v48;
      v84.i64[1] = (uint64_t)(v45 + 16);
      *(int64x2_t *)((char *)v90 + 8) = v50;
      v51 = v85[0];
      v85[0] = &v43[16 * v44];
      *((_QWORD *)&v90[1] + 1) = v51;
      *(_QWORD *)&v90[0] = v50.i64[0];
      std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)v90);
    }
    else
    {
      *(_QWORD *)v84.i64[1] = v34;
      *(_QWORD *)(v37 + 8) = v35;
      v38 = (_QWORD *)(v37 + 16);
    }
    v84.i64[1] = (uint64_t)v38;
    v52 = v92[0];
    v92[0] = 0;
    if (v52)
      (*(void (**)(_OWORD *))(*(_QWORD *)v52 + 8))(v52);
    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v80.__r_.__value_.__l.__data_);
  }
  memset(v90, 0, sizeof(v90));
  LODWORD(v91) = 1065353216;
  MIL::IRListValueType::MakeValue((uint64_t)v73, (uint64_t)&v86, (uint64_t *)&v79);
  std::string::basic_string[abi:ne180100]<0>(__p, "scope_name");
  MIL::IRTensorValueType::MakeStringValue(Scalar, (const MIL::IRTensorValueType *)__p, &v78);
  v82 = v78;
  if (v78)
  {
    v53 = (std::__shared_weak_count *)operator new();
    v54 = (std::__shared_weak_count_vtbl *)v78;
    v53->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992A68;
    v53->__shared_owners_ = 0;
    v53->__shared_weak_owners_ = 0;
    v53[1].__vftable = v54;
  }
  else
  {
    v53 = 0;
  }
  v83 = v53;
  v78 = 0;
  v92[0] = &v82;
  v55 = std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::shared_ptr<MIL::IRValue const>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::IRValue const>&&>,std::tuple<>>((uint64_t)v90, &v82, (uint64_t)&std::piecewise_construct, v92);
  std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRListValue const,std::default_delete<MIL::IRListValue const>,void>(v55 + 4, (uint64_t *)&v79);
  v56 = v83;
  if (v83)
  {
    p_shared_owners = (unint64_t *)&v83->__shared_owners_;
    do
      v58 = __ldaxr(p_shared_owners);
    while (__stlxr(v58 - 1, p_shared_owners));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = v78;
  v78 = 0;
  if (v59)
    (*(void (**)(_OWORD *))(*(_QWORD *)v59 + 8))(v59);
  if (v77 < 0)
    operator delete(__p[0]);
  v60 = v79;
  v79 = 0;
  if (v60)
  {
    MIL::IRListValue::~IRListValue(v60);
    MEMORY[0x1E0C023A0]();
  }
  MIL::IRListValueType::MakeValue((uint64_t)v73, (uint64_t)&v84, (uint64_t *)&v79);
  std::string::basic_string[abi:ne180100]<0>(v74, "scope_type");
  MIL::IRTensorValueType::MakeStringValue(Scalar, (const MIL::IRTensorValueType *)v74, &v78);
  v82 = v78;
  if (v78)
  {
    v61 = (std::__shared_weak_count *)operator new();
    v62 = (std::__shared_weak_count_vtbl *)v78;
    v61->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992A68;
    v61->__shared_owners_ = 0;
    v61->__shared_weak_owners_ = 0;
    v61[1].__vftable = v62;
  }
  else
  {
    v61 = 0;
  }
  v83 = v61;
  v78 = 0;
  v92[0] = &v82;
  v63 = std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::shared_ptr<MIL::IRValue const>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::IRValue const>&&>,std::tuple<>>((uint64_t)v90, &v82, (uint64_t)&std::piecewise_construct, v92);
  std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRListValue const,std::default_delete<MIL::IRListValue const>,void>(v63 + 4, (uint64_t *)&v79);
  v65 = v83;
  if (v83)
  {
    v66 = (unint64_t *)&v83->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v68 = v78;
  v78 = 0;
  if (v68)
    (*(void (**)(_OWORD *))(*(_QWORD *)v68 + 8))(v68);
  if (v75 < 0)
    operator delete(v74[0]);
  v69 = v79;
  v79 = 0;
  if (v69)
  {
    MIL::IRListValue::~IRListValue(v69);
    MEMORY[0x1E0C023A0]();
  }
  v70 = MIL::IRDictionaryValueType::Make(*v72, Scalar, v73, v64);
  MIL::IRDictionaryValueType::MakeValue(v70, (uint64_t)v90, a3);
  v71 = (void ***)std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v90);
  *(_QWORD *)&v90[0] = &v84;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](v71);
  *(_QWORD *)&v90[0] = &v86;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)v90);
  *(_QWORD *)&v90[0] = &v88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v90);
  *(_QWORD *)&v90[0] = &v89;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v90);
}

void sub_1E05E448C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,MIL::IRListValue *a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t **a41,uint64_t a42,uint64_t *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  uint64_t v47;

  if (a25)
    (*(void (**)(uint64_t))(*(_QWORD *)a25 + 8))(a25);
  if (a18 < 0)
    operator delete(__p);
  std::unique_ptr<MIL::IRListValue const>::reset[abi:ne180100](&a26, 0);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v47 - 160);
  a41 = &a43;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a41);
  a43 = &a47;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a43);
  a47 = v47 - 208;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a47);
  a47 = v47 - 184;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a47);
  _Unwind_Resume(a1);
}

void MIL::Attributes::TraceabilityInfo::AddNames(std::vector<std::string> **a1, __int128 **a2)
{
  std::vector<std::string> *v2;
  std::string v3;
  std::string *v4;

  v2 = *a1;
  memset(&v3, 0, sizeof(v3));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v3, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  if (v2 != (std::vector<std::string> *)&v3)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v2, (std::string *)v3.__r_.__value_.__l.__data_, (__int128 *)v3.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3.__r_.__value_.__l.__size_ - v3.__r_.__value_.__r.__words[0]) >> 3));
  v4 = &v3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v4);
}

void sub_1E05E46C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void MIL::Attributes::TraceabilityInfo::AddTypes(std::vector<std::string> **a1, __int128 **a2)
{
  std::vector<std::string> *v2;
  std::string v3;
  std::string *v4;

  v2 = *a1;
  memset(&v3, 0, sizeof(v3));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v3, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  if (&v2[1] != (std::vector<std::string> *)&v3)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v2 + 1, (std::string *)v3.__r_.__value_.__l.__data_, (__int128 *)v3.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3.__r_.__value_.__l.__size_ - v3.__r_.__value_.__r.__words[0]) >> 3));
  v4 = &v3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v4);
}

void sub_1E05E476C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

std::string *MIL::Attributes::TraceabilityInfo::GetNames@<X0>(__int128 ***this@<X0>, std::string *a2@<X8>)
{
  __int128 **v2;

  v2 = *this;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, *v2, v2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v2[1] - (char *)*v2) >> 3));
}

std::string *MIL::Attributes::TraceabilityInfo::GetTypes@<X0>(MIL::Attributes::TraceabilityInfo *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, *(__int128 **)(v2 + 24), *(__int128 **)(v2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v2 + 32) - *(_QWORD *)(v2 + 24)) >> 3));
}

void MIL::Attributes::TraceabilityInfo::RemoveNames(uint64_t **this)
{
  std::vector<std::string>::__clear[abi:ne180100](*this);
}

void MIL::Attributes::TraceabilityInfo::RemoveTypes(MIL::Attributes::TraceabilityInfo *this)
{
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)(*(_QWORD *)this + 24));
}

void MIL::Attributes::TraceabilityInfo::Clear(uint64_t **this)
{
  uint64_t *v1;

  v1 = *this;
  std::vector<std::string>::__clear[abi:ne180100](*this);
  std::vector<std::string>::__clear[abi:ne180100](v1 + 3);
}

void MIL::Attributes::TraceabilityInfo::Replace(__int128 ***a1, uint64_t a2, uint64_t *a3)
{
  __int128 **v6;
  __int128 **v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  MIL::IRDictionaryValue *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  MIL::IRDictionaryValue *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  MIL::IRDictionaryValue *v22;
  uint64_t v23;
  void (***v24)(MIL::MILContextImpl *__hidden);
  std::__shared_weak_count *v25;
  __int128 v26;
  void *__p[2];
  char v28;
  MIL::IRDictionaryValue *v29[2];
  char v30;
  std::string v31;
  std::string v32;

  v6 = *a1;
  memset(&v32, 0, sizeof(v32));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v32, *v6, v6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v6[1] - (char *)*v6) >> 3));
  v7 = *a1;
  memset(&v31, 0, sizeof(v31));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v31, v7[3], v7[4], 0xAAAAAAAAAAAAAAABLL * (((char *)v7[4] - (char *)v7[3]) >> 3));
  if (v32.__r_.__value_.__r.__words[0] == v32.__r_.__value_.__l.__size_
    && v31.__r_.__value_.__r.__words[0] == v31.__r_.__value_.__l.__size_)
  {
    v23 = *a3;
    std::string::basic_string[abi:ne180100]<0>(v29, "TraceabilityInfo");
    MIL::IRObject::RemoveAttribute(v23, (unsigned __int8 *)v29);
    if ((v30 & 0x80000000) == 0)
      goto LABEL_24;
    v22 = v29[0];
    goto LABEL_23;
  }
  v8 = *a3;
  std::string::basic_string[abi:ne180100]<0>(__p, "TraceabilityInfo");
  v9 = *(std::__shared_weak_count **)(a2 + 8);
  v24 = *(void (****)(MIL::MILContextImpl *__hidden))a2;
  v25 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Attributes::TraceabilityInfo::GetValue(a1, &v24, (uint64_t *)v29);
  *(MIL::IRDictionaryValue **)&v26 = v29[0];
  if (v29[0])
  {
    v12 = (_QWORD *)operator new();
    v13 = v29[0];
    *v12 = &unk_1EA999830;
    v12[1] = 0;
    v12[2] = 0;
    v12[3] = v13;
  }
  else
  {
    v12 = 0;
  }
  *((_QWORD *)&v26 + 1) = v12;
  v29[0] = 0;
  MIL::IRObject::SetAttribute(v8, (unsigned __int8 *)__p, &v26);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
  if (*((_QWORD *)&v26 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v29[0];
  v29[0] = 0;
  if (v17)
  {
    MIL::IRDictionaryValue::~IRDictionaryValue(v17);
    MEMORY[0x1E0C023A0](v18);
  }
  v19 = v25;
  if (v25)
  {
    v20 = (unint64_t *)&v25->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (v28 < 0)
  {
    v22 = (MIL::IRDictionaryValue *)__p[0];
LABEL_23:
    operator delete(v22);
  }
LABEL_24:
  v29[0] = (MIL::IRDictionaryValue *)&v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v29);
  v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
}

void sub_1E05E4A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  uint64_t v25;

  if (a24 < 0)
    operator delete(__p);
  __p = &a25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = (char *)(v25 - 56);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void MIL::Attributes::TraceabilityInfo::Rewrite(__int128 ***a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD v16[2];
  uint64_t v17;

  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)a3 + 32))(&v17);
  v7 = v17;
  *a4 = v17;
  if (v7)
  {
    v8 = (_QWORD *)operator new();
    v9 = v17;
    *v8 = &unk_1EA992FA8;
    v8[1] = 0;
    v8[2] = 0;
    v8[3] = v9;
  }
  else
  {
    v8 = 0;
  }
  a4[1] = (uint64_t)v8;
  v10 = *a2;
  v11 = (std::__shared_weak_count *)a2[1];
  v16[0] = v10;
  v16[1] = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  MIL::Attributes::TraceabilityInfo::Replace(a1, (uint64_t)v16, a4);
  if (v11)
  {
    v14 = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1E05E4BD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Attributes::TraceabilityInfo::operator==(unsigned __int8 ***a1, uint64_t *a2)
{
  return MIL::Attributes::TraceabilityInfo::Impl::operator==(*a1, *a2);
}

uint64_t MIL::Attributes::TraceabilityInfo::Impl::operator==(unsigned __int8 **a1, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t result;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  char v13;
  char v14;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(unsigned __int8 **)a2;
  if (v3 - *a1 != *(_QWORD *)(a2 + 8) - *(_QWORD *)a2)
    return 0;
  while (v2 != v3)
  {
    result = std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v13, v2, v4);
    if (!(_DWORD)result)
      return result;
    v2 += 24;
    v4 += 24;
  }
  v10 = a1 + 3;
  v8 = a1[3];
  v9 = v10[1];
  v12 = a2 + 24;
  v11 = *(unsigned __int8 **)(a2 + 24);
  if (v9 - v8 != *(_QWORD *)(v12 + 8) - (_QWORD)v11)
    return 0;
  if (v8 == v9)
    return 1;
  do
  {
    result = std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v14, v8, v11);
    if (!(_DWORD)result)
      break;
    v8 += 24;
    v11 += 24;
  }
  while (v8 != v9);
  return result;
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(std::vector<std::string> *this, std::string *__str, __int128 *a3, unint64_t a4)
{
  std::__compressed_pair<std::string *> *p_end_cap;
  std::string *begin;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  std::vector<std::string>::pointer end;

  p_end_cap = &this->__end_cap_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(this);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::string>::__vallocate[abi:ne180100](this, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (__int128 *)__str, a3, this->__end_);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 3) < a4)
  {
    v13 = (std::string *)((char *)__str + 8 * (((char *)this->__end_ - (char *)begin) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, v13, begin);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (__int128 *)v13, a3, this->__end_);
LABEL_11:
    this->__end_ = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, (std::string *)a3, begin);
  v15 = v14;
  end = this->__end_;
  if (end != v14)
  {
    do
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(end[-1].__r_.__value_.__l.__data_);
      --end;
    }
    while (end != v15);
  }
  this->__end_ = v15;
}

void sub_1E05E4E48(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1E05E4E50(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(std::string *__str, std::string *a2, std::string *this)
{
  const std::string *v4;

  v4 = __str;
  if (__str != a2)
  {
    do
      std::string::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::string *)v4;
}

uint64_t std::default_delete<MIL::Attributes::TraceabilityInfo::Impl>::operator()[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t result;
  void **v4;

  if (a2)
  {
    v4 = a2 + 3;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
    v4 = a2;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
    return MEMORY[0x1E0C023A0](a2, 0x20C40A759441BLL);
  }
  return result;
}

void MIL::Blob::TryGetDataOffsetAndByteLength(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  std::string *p_p;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t DataOffset;
  uint64_t DataSize;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unsigned __int8 *v18;
  unint64_t v19;
  uint64_t FileDataOffsetAndByteLength;
  uint64_t v21;
  unint64_t *v22;
  __int128 v23;
  char v24;
  std::string __p;
  std::string v26;

  std::string::basic_string[abi:ne180100]<0>(&__p, "path");
  v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  if (!v6)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MIL::IRValue::GetScalar<std::string>(*((const void **)v6 + 5), &v26);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*a1 != &off_1EA999688)
    __cxa_bad_cast();
  std::string::basic_string[abi:ne180100]<0>(&v23, "type");
  v7 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)&v23);
  MIL::IRValue::GetScalar<std::string>(*((const void **)v7 + 5), &__p);
  if (v24 < 0)
    operator delete((void *)v23);
  if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (__p.__r_.__value_.__l.__size_ != 8)
    {
      if (__p.__r_.__value_.__l.__size_ != 14)
        goto LABEL_26;
      if (*(_QWORD *)__p.__r_.__value_.__l.__data_ != 0x4C4259434147454CLL
        || *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 6) != 0x454C4946424F4C42)
      {
        goto LABEL_26;
      }
      goto LABEL_39;
    }
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (HIBYTE(__p.__r_.__value_.__r.__words[2]) != 8)
    {
      if (HIBYTE(__p.__r_.__value_.__r.__words[2]) != 14)
        goto LABEL_26;
      if (__p.__r_.__value_.__r.__words[0] != 0x4C4259434147454CLL
        || *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 6) != 0x454C4946424F4C42)
      {
        goto LABEL_26;
      }
LABEL_39:
      std::string::basic_string[abi:ne180100]<0>(&v23, "identifier");
      v18 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)&v23);
      if (!v18)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v19 = MIL::IRValue::GetScalar<unsigned long long>(*((const void **)v18 + 5));
      if (v24 < 0)
        operator delete((void *)v23);
      MIL::MILContextImpl::GetOrCreateLegacyStorageReader((uint64_t)a1, (unsigned __int8 *)&v26, (std::string::size_type *)&v23);
      FileDataOffsetAndByteLength = MIL::Blob::LegacyStorageReader::GetFileDataOffsetAndByteLength((MIL::Blob::LegacyStorageReader *)v23, v19);
      *(_BYTE *)a3 = 1;
      *(_QWORD *)(a3 + 8) = FileDataOffsetAndByteLength;
      *(_QWORD *)(a3 + 16) = v21;
      v15 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
      if (*((_QWORD *)&v23 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
        do
          v17 = __ldaxr(v22);
        while (__stlxr(v17 - 1, v22));
        goto LABEL_45;
      }
      goto LABEL_27;
    }
    p_p = &__p;
  }
  if (p_p->__r_.__value_.__r.__words[0] != 0x454C4946424F4C42)
  {
LABEL_26:
    LOBYTE(v23) = 0;
    *(_QWORD *)((char *)&v23 + 4) = 0;
    *(_BYTE *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    goto LABEL_27;
  }
  std::string::basic_string[abi:ne180100]<0>(&v23, "offset");
  v11 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)&v23);
  if (!v11)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v12 = MIL::IRValue::GetScalar<unsigned long long>(*((const void **)v11 + 5));
  if (v24 < 0)
    operator delete((void *)v23);
  MIL::MILContextImpl::GetOrCreateStorageReader((uint64_t)a1, (unsigned __int8 *)&v26, (std::string::size_type *)&v23);
  DataOffset = MIL::Blob::StorageReader::GetDataOffset((MIL::Blob::StorageReader::Impl **)v23, v12);
  DataSize = MIL::Blob::StorageReader::GetDataSize((MIL::Blob::StorageReader::Impl **)v23, v12);
  *(_BYTE *)a3 = 1;
  *(_QWORD *)(a3 + 8) = DataOffset;
  *(_QWORD *)(a3 + 16) = DataSize;
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
LABEL_45:
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
LABEL_27:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
}

void sub_1E05E5240(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,__int128 a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a21 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete((void *)a22);
  __cxa_begin_catch(a1);
  LOBYTE(a22) = 0;
  *(_QWORD *)((char *)&a22 + 4) = 0;
  *(_BYTE *)v26 = 0;
  *(_QWORD *)(v26 + 8) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  __cxa_end_catch();
  JUMPOUT(0x1E05E50C0);
}

void MIL::Blob::FileWriter::~FileWriter(MIL::Blob::FileWriter *this)
{
  char *v1;

  v1 = (char *)this + 432;
  MEMORY[0x1E0C020C4]((char *)this + 24);
  std::iostream::~basic_iostream();
  MEMORY[0x1E0C022F8](v1);
}

void (__cdecl ***std::fstream::~fstream(void (__cdecl ***a1)(std::fstream *__hidden this)))(std::fstream *__hidden this)
{
  _QWORD *v2;

  v2 = a1 + 54;
  MEMORY[0x1E0C020C4](a1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x1E0C022F8](v2);
  return a1;
}

uint64_t MIL::Blob::FileWriter::FileWriter(uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6;
  std::ios_base::openmode v7;
  int v8;
  std::runtime_error *exception;
  std::string *v11;
  __int128 v12;
  std::string v13;
  std::string v14;

  v6 = a1 + 24;
  *(_QWORD *)(a1 + 432) = &unk_1EA99A480;
  *(_QWORD *)a1 = &unk_1EA99A458;
  *(_QWORD *)(a1 + 8) = 0;
  std::ios_base::init((std::ios_base *)(a1 + 432), (void *)(a1 + 24));
  *(_QWORD *)(a1 + 568) = 0;
  *(_DWORD *)(a1 + 576) = -1;
  MEMORY[0x1E0C020B8](v6);
  if (a3)
    v7 = 60;
  else
    v7 = 28;
  std::fstream::open((std::fstream *)a1, a2, v7);
  v8 = *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 32);
  if ((v8 & 5) != 0)
  {
    std::fstream::open((std::fstream *)a1, a2, 0x14u);
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24)), *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 32) | 4);
    std::fstream::open((std::fstream *)a1, a2, v7);
    v8 = *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 32);
  }
  if ((v8 & 5) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v11 = std::string::append(&v13, " file stream for writing");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v14.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v14);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return a1;
}

void sub_1E05E55A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void (__cdecl ***v21)(std::fstream *__hidden);
  void *v22;
  int v23;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:
      std::fstream::~fstream(v21);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void std::fstream::open(std::fstream *this, const std::string *__s, std::ios_base::openmode __mode)
{
  uint64_t v4;
  std::ios_base *v5;
  std::ios_base::iostate v6;

  v4 = std::filebuf::open();
  v5 = (std::ios_base *)((char *)this + *((_QWORD *)this->__sb_.__extbuf_ - 3));
  if (v4)
    v6 = 0;
  else
    v6 = v5->__rdstate_ | 4;
  std::ios_base::clear(v5, v6);
}

unint64_t MIL::Blob::FileWriter::GetNextAlignedOffset(MIL::Blob::FileWriter *this)
{
  uint64_t v2;

  std::istream::seekg();
  std::istream::tellg();
  return (v2 + 63) & 0xFFFFFFFFFFFFFFC0;
}

uint64_t MIL::Blob::FileWriter::GetFileSize(MIL::Blob::FileWriter *this)
{
  uint64_t v2;

  std::istream::seekg();
  std::istream::tellg();
  return v2;
}

unint64_t MIL::Blob::FileWriter::AppendData(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  char *v5;
  std::runtime_error *exception;
  _BYTE v8[16];
  _QWORD v9[16];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  std::istream::seekg();
  std::istream::tellg();
  v2 = v10;
  v3 = a1 + 2;
  MEMORY[0x1E0C0210C](v8, a1 + 2);
  v4 = (v2 + 63) & 0xFFFFFFFFFFFFFFC0;
  v5 = (char *)v3 + *(_QWORD *)(*v3 - 24);
  if ((v5[32] & 5) == 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD, unint64_t, _QWORD, uint64_t))(**((_QWORD **)v5 + 5)
                                                                                            + 32))(v9, *((_QWORD *)v5 + 5), v4, 0, 16);
    if (v10 == -1)
      std::ios_base::clear((std::ios_base *)((char *)v3 + *(_QWORD *)(*v3 - 24)), *(_DWORD *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 32) | 4);
  }
  MEMORY[0x1E0C02118](v8);
  std::ostream::write();
  if (*(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL FileWriter]: Unknown error occured while writing data to the file.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return v4;
}

void sub_1E05E58E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  MEMORY[0x1E0C02118](&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Blob::FileWriter::WriteData(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  char *v7;
  uint64_t result;
  std::runtime_error *exception;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  std::string::size_type size;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  std::runtime_error *v20;
  std::string v21;
  std::string v22;
  std::string v23;
  std::string v24;
  std::string v25;
  std::string v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if ((a4 & 0x3F) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v22, a4);
    v10 = std::string::insert(&v22, 0, "[MIL FileWriter]: Provided offset not aligned. offset=");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v12 = std::string::append(&v23, " alignment=");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v21, 0x40uLL);
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &v21;
    else
      v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v21.__r_.__value_.__r.__words[2]);
    else
      size = v21.__r_.__value_.__l.__size_;
    v16 = std::string::append(&v24, (const std::string::value_type *)v14, size);
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    v18 = std::string::append(&v25, ".");
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v26);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v6 = a1 + 2;
  MEMORY[0x1E0C0210C](&v25, a1 + 2);
  v7 = (char *)v6 + *(_QWORD *)(*v6 - 24);
  if ((v7[32] & 5) == 0)
  {
    (*(void (**)(std::string *__return_ptr, _QWORD, unint64_t, _QWORD, uint64_t))(**((_QWORD **)v7 + 5)
                                                                                                 + 32))(&v26, *((_QWORD *)v7 + 5), a4, 0, 16);
    if (v27 == -1)
      std::ios_base::clear((std::ios_base *)((char *)v6 + *(_QWORD *)(*v6 - 24)), *(_DWORD *)((char *)v6 + *(_QWORD *)(*v6 - 24) + 32) | 4);
  }
  MEMORY[0x1E0C02118](&v25);
  result = std::ostream::write();
  if (*(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32))
  {
    v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v20, "[MIL FileWriter]: Unknown error occured while writing data to the file.");
    __cxa_throw(v20, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1E05E5B60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  void *v47;
  int v48;

  if (a47 < 0)
    operator delete(__p);
  if (a40 < 0)
    operator delete(a35);
  if (a14 < 0)
    operator delete(a9);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v48 & 1) == 0)
LABEL_16:
      _Unwind_Resume(a1);
  }
  else if (!v48)
  {
    goto LABEL_16;
  }
  __cxa_free_exception(v47);
  goto LABEL_16;
}

uint64_t MIL::Blob::FileWriter::ReadData(_QWORD *a1)
{
  uint64_t result;
  std::runtime_error *exception;

  std::istream::seekg();
  result = std::istream::read();
  if (*(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL FileWriter]: Unknown error occured while reading data from the file.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1E05E5CD8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'std::fstream::~fstream(void (__cdecl ***a1)(std::fstream *__hidden this))
{
  MEMORY[0x1E0C020C4](a1 + 1);
  std::iostream::~basic_iostream();
  JUMPOUT(0x1E0C022F8);
}

{
  _QWORD *v1;

  v1 = a1 + 52;
  MEMORY[0x1E0C020C4](a1 + 1);
  std::iostream::~basic_iostream();
  MEMORY[0x1E0C022F8](v1);
  JUMPOUT(0x1E0C023A0);
}

void `virtual thunk to'std::fstream::~fstream(_QWORD *a1)
{
  void (__cdecl ***v1)(std::fstream *__hidden);

  v1 = (void (__cdecl ***)(std::fstream *__hidden))((char *)a1 + *(_QWORD *)(*a1 - 24));
  MEMORY[0x1E0C020C4](v1 + 3);
  std::iostream::~basic_iostream();
  JUMPOUT(0x1E0C022F8);
}

{
  void (__cdecl ***v1)(std::fstream *__hidden);

  v1 = (void (__cdecl ***)(std::fstream *__hidden))((char *)a1 + *(_QWORD *)(*a1 - 24));
  MEMORY[0x1E0C020C4](v1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x1E0C022F8](v1 + 54);
  JUMPOUT(0x1E0C023A0);
}

void std::fstream::~fstream(void (__cdecl ***a1)(std::fstream *__hidden this))
{
  _QWORD *v1;

  v1 = a1 + 54;
  MEMORY[0x1E0C020C4](a1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x1E0C022F8](v1);
  JUMPOUT(0x1E0C023A0);
}

void MIL::Blob::LegacyStorageReader::~LegacyStorageReader(MIL::Blob::MMapFileReader **this)
{
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)(this + 5));
  std::unique_ptr<MIL::Blob::MMapFileReader const>::reset[abi:ne180100](this + 4, 0);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

double MIL::Blob::LegacyStorageReader::LegacyStorageReader(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  double result;

  v2 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  return result;
}

void MIL::Blob::LegacyStorageReader::EnsureLoaded(MIL::Blob::LegacyStorageReader *this)
{
  unint64_t *v1;
  unint64_t v2;
  MIL::Blob::LegacyStorageReader **v3;
  MIL::Blob::LegacyStorageReader *v4;
  MIL::Blob::LegacyStorageReader ****v5;
  MIL::Blob::LegacyStorageReader ***v6;

  v4 = this;
  v1 = (unint64_t *)((char *)this + 24);
  v3 = &v4;
  v2 = atomic_load(v1);
  if (v2 != -1)
  {
    v6 = &v3;
    v5 = &v6;
    std::__call_once(v1, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<MIL::Blob::LegacyStorageReader::EnsureLoaded(void)::$_1 &&>>);
  }
}

uint64_t MIL::Blob::LegacyStorageReader::GetFileDataOffsetAndByteLength(MIL::Blob::LegacyStorageReader *this, unint64_t a2)
{
  _QWORD *v3;
  std::runtime_error *exception;
  unint64_t v6;

  v6 = a2;
  MIL::Blob::LegacyStorageReader::EnsureLoaded(this);
  v3 = std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>((_QWORD *)this + 5, &v6);
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "blobv1 identifier not found");
    __cxa_throw(exception, (struct type_info *)off_1EA992578, MEMORY[0x1E0DE42B0]);
  }
  return v3[3];
}

void sub_1E05E6060(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Blob::LegacyStorageReader::IsEncrypted(MIL::Blob::MMapFileReader **this)
{
  return MIL::Blob::MMapFileReader::IsEncrypted(this[4]);
}

unint64_t MIL::Blob::LegacyStorageReader::GetDataView<MIL::Fp16>(MIL::Blob::MMapFileReader **a1, unint64_t a2)
{
  unint64_t FileDataOffsetAndByteLength;
  uint64_t v4;
  unint64_t result;
  unint64_t v6;

  FileDataOffsetAndByteLength = MIL::Blob::LegacyStorageReader::GetFileDataOffsetAndByteLength((MIL::Blob::LegacyStorageReader *)a1, a2);
  result = MIL::Blob::MMapFileReader::ReadData(a1[4], FileDataOffsetAndByteLength, v4);
  if (v6 < 2)
    return 0;
  return result;
}

unint64_t MIL::Blob::LegacyStorageReader::GetDataView<float>(MIL::Blob::MMapFileReader **a1, unint64_t a2)
{
  unint64_t FileDataOffsetAndByteLength;
  uint64_t v4;
  unint64_t result;
  unint64_t v6;

  FileDataOffsetAndByteLength = MIL::Blob::LegacyStorageReader::GetFileDataOffsetAndByteLength((MIL::Blob::LegacyStorageReader *)a1, a2);
  result = MIL::Blob::MMapFileReader::ReadData(a1[4], FileDataOffsetAndByteLength, v4);
  if (v6 < 4)
    return 0;
  return result;
}

MIL::Blob::MMapFileReader *std::unique_ptr<MIL::Blob::MMapFileReader const>::reset[abi:ne180100](MIL::Blob::MMapFileReader **a1, MIL::Blob::MMapFileReader *a2)
{
  MIL::Blob::MMapFileReader *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    MIL::Blob::MMapFileReader::~MMapFileReader(result);
    JUMPOUT(0x1E0C023A0);
  }
  return result;
}

uint64_t std::__call_once_proxy[abi:ne180100]<std::tuple<MIL::Blob::LegacyStorageReader::EnsureLoaded(void)::$_1 &&>>(uint64_t ****a1)
{
  uint64_t v1;
  MIL::Blob::MMapFileReader *v2;
  unint64_t *Data;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _OWORD v12[2];
  int v13;
  _QWORD *v14;

  v1 = ****a1;
  v2 = (MIL::Blob::MMapFileReader *)operator new();
  MIL::Blob::MMapFileReader::MMapFileReader(v2, v1);
  Data = (unint64_t *)MIL::Blob::MMapFileReader::ReadData(v2, 0, 8);
  v4 = *Data;
  memset(v12, 0, sizeof(v12));
  v13 = 1065353216;
  if (v4)
  {
    v5 = 0;
    v6 = 8;
    v7 = (16 * v4) | 8;
    do
    {
      v8 = (_QWORD *)MIL::Blob::MMapFileReader::ReadData(v2, v6, 16);
      v14 = v8;
      v9 = std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v12, v8, (uint64_t)&std::piecewise_construct, &v14);
      v9[3] = v7;
      v10 = v8[1];
      v9[4] = v10;
      v7 += v10;
      ++v5;
      v6 += 16;
    }
    while (v5 < *Data);
  }
  std::unique_ptr<MIL::Blob::MMapFileReader const>::reset[abi:ne180100]((MIL::Blob::MMapFileReader **)(v1 + 32), v2);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign(v1 + 40, (uint64_t *)v12);
  return std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v12);
}

void sub_1E05E6268(_Unwind_Exception *a1)
{
  MIL::Blob::MMapFileReader *v1;

  MIL::Blob::MMapFileReader::~MMapFileReader(v1);
  MEMORY[0x1E0C023A0]();
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x28uLL);
  *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  i[4] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *i = *v20;
LABEL_38:
    *v20 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v21 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1E05E64BC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::clear((_QWORD *)a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::clear(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;

  if (result[3])
  {
    v1 = result;
    result = (_QWORD *)result[2];
    if (result)
    {
      do
      {
        v2 = (_QWORD *)*result;
        operator delete(result);
        result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    v3 = v1[1];
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t MIL::Blob::MMapEncryptedFileReader::MMapEncryptedFileReader(uint64_t a1, std::string::size_type a2)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  std::runtime_error *exception;
  std::string *v13;
  __int128 v14;
  std::runtime_error *v15;
  std::string *v16;
  __int128 v17;
  std::runtime_error *v18;
  std::string *v19;
  __int128 v20;
  unint64_t v21;
  std::runtime_error *v22;
  std::string *v23;
  __int128 v24;
  unint64_t v25;
  std::runtime_error *v26;
  std::string *v27;
  __int128 v28;
  _OWORD *v29;
  std::runtime_error *v30;
  std::string v31;
  std::string v32;

  v3 = *(_QWORD *)(MIL::Blob::MMapFileReader::MMapFileReader(a1, a2) + 48);
  if (v3 >= 0x40)
  {
    v4 = *(_QWORD *)(a1 + 40);
    if (*(_DWORD *)v4 == 1162759500)
    {
      v5 = *(unsigned __int8 *)(v4 + 4);
      if ((v5 - 3) <= 0xFFFFFFFD)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v31, *(unsigned __int8 *)(v4 + 4));
        v13 = std::string::insert(&v31, 0, "Invalid Encrypted file header: Unsupported major version = ");
        v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        v32.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v32);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      if (v5 == 1)
        v6 = 64;
      else
        v6 = *(unsigned __int8 *)(v4 + 7);
      v7 = v6;
      if (v3 <= v6)
      {
        v15 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v31, v7);
        v16 = std::string::insert(&v31, 0, "Invalid Encrypted file header: File does not contain any payload, size of Header = ");
        v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
        v32.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v17;
        v16->__r_.__value_.__l.__size_ = 0;
        v16->__r_.__value_.__r.__words[2] = 0;
        v16->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v15, &v32);
        __cxa_throw(v15, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v8 = *(_QWORD *)(v4 + 8);
      if (v8 - 1 >= v3 - v6)
      {
        v18 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v31, v8);
        v19 = std::string::insert(&v31, 0, "Invalid Encrypted file header: Incorrect size of decrypted file size = ");
        v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        v32.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v18, &v32);
        __cxa_throw(v18, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v9 = *(_QWORD *)(v4 + 16);
      if (v9)
      {
        if (v9 >> 52)
        {
          v21 = *(_QWORD *)(v4 + 16);
          v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v31, v21);
          v23 = std::string::insert(&v31, 0, "Invalid Encrypted file header: Incorrect number of encrypted pages = ");
          v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
          v32.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v24;
          v23->__r_.__value_.__l.__size_ = 0;
          v23->__r_.__value_.__r.__words[2] = 0;
          v23->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v22, &v32);
          __cxa_throw(v22, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        if (v3 < v9 << 12)
        {
          v25 = *(_QWORD *)(v4 + 16);
          v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v31, v25);
          v27 = std::string::insert(&v31, 0, "Invalid Encrypted file header: Incorrect number of encrypted bytes = ");
          v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
          v32.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v28;
          v27->__r_.__value_.__l.__size_ = 0;
          v27->__r_.__value_.__r.__words[2] = 0;
          v27->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v26, &v32);
          __cxa_throw(v26, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v10 = mremap_encrypted();
        if (v10)
        {
          v29 = operator new(0x108uLL);
          v32.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
          *(_OWORD *)&v32.__r_.__value_.__r.__words[1] = xmmword_1E0B02510;
          *v29 = 0u;
          v29[1] = 0u;
          v29[2] = 0u;
          v29[3] = 0u;
          v29[4] = 0u;
          v29[5] = 0u;
          v29[6] = 0u;
          v29[7] = 0u;
          v29[8] = 0u;
          v29[9] = 0u;
          v29[10] = 0u;
          v29[11] = 0u;
          v29[12] = 0u;
          v29[13] = 0u;
          v29[14] = 0u;
          v29[15] = 0u;
          *((_BYTE *)v29 + 256) = 0;
          strerror_r(v10, (char *)v29, 0x100uLL);
          v30 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          std::runtime_error::runtime_error(v30, &v31);
          __cxa_throw(v30, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
      }
      *(_QWORD *)(a1 + 40) = v4 + v7;
      *(_QWORD *)(a1 + 48) = v8;
      *(_BYTE *)(a1 + 56) = 1;
    }
  }
  return a1;
}

void sub_1E05E6A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  MIL::Blob::MMapFileReader *v21;
  void *v22;
  int v23;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v23 & 1) == 0)
    {
LABEL_6:
      if (a21 < 0)
        operator delete(a16);
      MIL::Blob::MMapFileReader::~MMapFileReader(v21);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v22);
  goto LABEL_6;
}

uint64_t MIL::Blob::MakeMMapFileReader@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = MIL::Blob::MMapEncryptedFileReader::MMapEncryptedFileReader(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1E05E6BA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1E0C023A0](v1, 0x10B0C40D03D9829);
  _Unwind_Resume(a1);
}

uint64_t MIL::Blob::MMapFileReader::MMapFileReader(uint64_t a1, std::string::size_type a2)
{
  const char *v4;
  off_t st_size;
  const char *v6;
  FILE *v7;
  FILE *v8;
  int v9;
  void *v10;
  std::string *v11;
  uint64_t v12;
  std::string::size_type v13;
  std::string::size_type v14;
  std::string::size_type v15;
  std::runtime_error *v17;
  std::runtime_error *exception;
  std::runtime_error *v19;
  stat v20;
  std::string buf;
  std::string *p_buf;
  std::string v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  if (*(char *)(a2 + 23) >= 0)
    v4 = (const char *)a2;
  else
    v4 = *(const char **)a2;
  if (stat(v4, &v20))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v23);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  st_size = v20.st_size;
  if (*(char *)(a2 + 23) >= 0)
    v6 = (const char *)a2;
  else
    v6 = *(const char **)a2;
  v7 = fopen(v6, "r");
  v8 = v7;
  if (!v7)
  {
    v19 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(v19, &v23);
    __cxa_throw(v19, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v9 = fileno(v7);
  v10 = mmap(0, st_size, 1, 2, v9, 0);
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA99A508;
  buf.__r_.__value_.__l.__size_ = st_size;
  p_buf = &buf;
  v23.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&v23.__r_.__value_.__l.__size_, (uint64_t)&buf);
  v11 = p_buf;
  if (p_buf == &buf)
  {
    v12 = 4;
    v11 = &buf;
  }
  else
  {
    if (!p_buf)
      goto LABEL_14;
    v12 = 5;
  }
  (*(void (**)(void))(v11->__r_.__value_.__r.__words[0] + 8 * v12))();
LABEL_14:
  v13 = v23.__r_.__value_.__r.__words[0];
  if (v23.__r_.__value_.__r.__words[0] + 1 <= 1)
  {
    v17 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(v17, &buf);
    __cxa_throw(v17, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (st_size)
    v14 = v23.__r_.__value_.__r.__words[0];
  else
    v14 = 0;
  *(_QWORD *)(a1 + 40) = v14;
  *(_QWORD *)(a1 + 48) = st_size;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a2 + 23) >= 0)
      v15 = a2;
    else
      v15 = *(_QWORD *)a2;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v15;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v13;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
    p_buf = (std::string *)st_size;
    _os_log_impl(&dword_1E0567000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "MMapped %s to base address %lx with size %zu", (uint8_t *)&buf, 0x20u);
  }
  std::unique_ptr<void,std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)a1, (uint64_t *)&v23);
  std::unique_ptr<void,std::function<void ()(void *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v23);
  fclose(v8);
  return a1;
}

void sub_1E05E6E9C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  void *v2;
  int v3;
  uint64_t v4;

  if (*(char *)(v4 - 73) < 0)
  {
    operator delete(*(void **)(v4 - 96));
    if ((v3 & 1) == 0)
    {
LABEL_6:
      std::unique_ptr<void,std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](v1);
      _Unwind_Resume(a1);
    }
  }
  else if (!v3)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v2);
  goto LABEL_6;
}

uint64_t *std::unique_ptr<void,std::function<void ()(void *)>>::operator=[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  *a2 = 0;
  std::unique_ptr<void,std::function<void ()(void *)>>::reset[abi:ne180100](a1, v4);
  std::__function::__value_func<std::string ()(MIL::IROperation const&)>::operator=[abi:ne180100](a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

uint64_t MIL::Blob::MMapFileReader::GetLength(MIL::Blob::MMapFileReader *this)
{
  return *((_QWORD *)this + 6);
}

unint64_t MIL::Blob::MMapFileReader::ReadData(MIL::Blob::MMapFileReader *this, unint64_t a2, uint64_t a3)
{
  return MIL::Util::Span<unsigned char,18446744073709551615ul>::Slice((_QWORD *)this + 5, a2, a3);
}

unint64_t MIL::Util::Span<unsigned char,18446744073709551615ul>::Slice(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  BOOL v4;
  std::runtime_error *exception;

  if (!a3 || ((v3 = a1[1], v3 > a2) ? (v4 = a3 + a2 > v3) : (v4 = 1), v4))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_1EA992578, MEMORY[0x1E0DE42B0]);
  }
  return *a1 + a2;
}

void sub_1E05E6FFC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Blob::MMapFileReader::IsEncrypted(MIL::Blob::MMapFileReader *this)
{
  return *((unsigned __int8 *)this + 56);
}

uint64_t *std::unique_ptr<void,std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;

  std::unique_ptr<void,std::function<void ()(void *)>>::reset[abi:ne180100](a1, 0);
  v2 = (uint64_t *)a1[4];
  if (v2 == a1 + 1)
  {
    v3 = 4;
    v2 = a1 + 1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

uint64_t *std::unique_ptr<void,std::function<void ()(void *)>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v4 = v2;
    v3 = result[4];
    if (!v3)
      std::__throw_bad_function_call[abi:ne180100]();
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v4);
  }
  return result;
}

void std::__function::__func<MIL::Blob::MMapFileReader::MMapFileReader(std::string const&)::$_0,std::allocator<MIL::Blob::MMapFileReader::MMapFileReader(std::string const&)::$_0>,void ()(void *)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<MIL::Blob::MMapFileReader::MMapFileReader(std::string const&)::$_0,std::allocator<MIL::Blob::MMapFileReader::MMapFileReader(std::string const&)::$_0>,void ()(void *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1EA99A508;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MIL::Blob::MMapFileReader::MMapFileReader(std::string const&)::$_0,std::allocator<MIL::Blob::MMapFileReader::MMapFileReader(std::string const&)::$_0>,void ()(void *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1EA99A508;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<MIL::Blob::MMapFileReader::MMapFileReader(std::string const&)::$_0,std::allocator<MIL::Blob::MMapFileReader::MMapFileReader(std::string const&)::$_0>,void ()(void *)>::operator()(uint64_t a1, void **a2)
{
  return munmap(*a2, *(_QWORD *)(a1 + 8));
}

uint64_t std::__function::__func<MIL::Blob::MMapFileReader::MMapFileReader(std::string const&)::$_0,std::allocator<MIL::Blob::MMapFileReader::MMapFileReader(std::string const&)::$_0>,void ()(void *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Blob::MMapFileReader::MMapFileReader(std::string const&)::$_0,std::allocator<MIL::Blob::MMapFileReader::MMapFileReader(std::string const&)::$_0>,void ()(void *)>::target_type()
{
}

uint64_t std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

_QWORD *MIL::Blob::StorageData::StorageData(_QWORD *this)
{
  *this = off_1EA99A598;
  return this;
}

uint64_t MIL::Blob::StorageData::IsEncrypted(MIL::Blob::StorageData *this)
{
  return 0;
}

_QWORD *MIL::Blob::StorageData::Make@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v8 = (_QWORD *)operator new();
  std::__function::__value_func<void ()(void const*)>::__value_func[abi:ne180100]((uint64_t)v13, a3);
  if (a2)
    v9 = a1;
  else
    v9 = 0;
  *v8 = &off_1EA99A5E0;
  v8[1] = v9;
  v8[2] = a2;
  std::__function::__value_func<void ()(void const*)>::__value_func[abi:ne180100]((uint64_t)(v8 + 3), (uint64_t)v13);
  v10 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*v8 + 32))(v8, 0, 64);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
    goto LABEL_8;
  }
  if (v14)
  {
    v12 = 5;
LABEL_8:
    result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
  }
  *a4 = v8;
  return result;
}

void sub_1E05E7310(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;
  va_list va;

  va_start(va, a2);
  v5 = *(_QWORD **)(v2 + 48);
  if (v5 == v3)
  {
    v6 = 4;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
    v3 = *(_QWORD **)(v2 + 48);
  }
  (*(void (**)(_QWORD *))(*v3 + 8 * v6))(v3);
LABEL_6:
  MIL::Blob::StorageData::Make((uint64_t *)va);
  MEMORY[0x1E0C023A0](v2, 0x10F1C403FB7196CLL);
  _Unwind_Resume(a1);
}

void MIL::Blob::StorageReader::~StorageReader(void ***this)
{
  std::unique_ptr<MIL::Blob::StorageReader::Impl>::reset[abi:ne180100](this, 0);
}

{
  std::unique_ptr<MIL::Blob::StorageReader::Impl>::reset[abi:ne180100](this, 0);
}

std::string **MIL::Blob::StorageReader::StorageReader(std::string **a1, uint64_t a2)
{
  _QWORD *v4;
  std::string::size_type v5;
  std::string *v6;
  std::string v8;

  v4 = operator new(0x48uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1EA99A630;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v8 = *(std::string *)a2;
  v4[3] = &off_1EA99A680;
  *((_OWORD *)v4 + 2) = *(_OWORD *)&v8.__r_.__value_.__l.__data_;
  v5 = v8.__r_.__value_.__r.__words[2];
  v4[7] = 0;
  v4[8] = 0;
  v4[6] = v5;
  v6 = (std::string *)operator new();
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v8 = *(std::string *)a2;
  *v6 = v8;
  v6[1].__r_.__value_.__s.__data_[0] = 1;
  v6[1].__r_.__value_.__l.__size_ = (std::string::size_type)(v4 + 3);
  v6[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v4;
  *a1 = v6;
  return a1;
}

void sub_1E05E74D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  MEMORY[0x1E0C023A0](v9, 0x1072C40375F26C8);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *MIL::Blob::StorageReader::StorageReader(uint64_t *a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;

  v4 = operator new();
  v5 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  *(_BYTE *)v4 = 0;
  *(_BYTE *)(v4 + 24) = 0;
  *(_OWORD *)(v4 + 32) = v5;
  *a1 = v4;
  return a1;
}

{
  uint64_t v4;
  __int128 v5;

  v4 = operator new();
  v5 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  *(_BYTE *)v4 = 0;
  *(_BYTE *)(v4 + 24) = 0;
  *(_OWORD *)(v4 + 32) = v5;
  *a1 = v4;
  return a1;
}

uint64_t MIL::Blob::StorageReader::GetFilename(MIL::Blob::StorageReader *this)
{
  return MIL::Blob::StorageReader::Impl::GetFilename(*(_QWORD *)this);
}

uint64_t MIL::Blob::StorageReader::Impl::GetFilename(uint64_t this)
{
  std::runtime_error *exception;

  if (!*(_BYTE *)(this + 24))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Storage data is not backed by a file.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return this;
}

void sub_1E05E761C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Blob::StorageReader::GetDataView<signed char>(MIL::Blob::StorageReader::Impl **a1, uint64_t a2)
{
  return MIL::Blob::StorageReader::Impl::GetDataViewForByteAligned<signed char>(*a1, a2);
}

void MIL::Blob::StorageReader::GetDataView<MIL::Int4>(MIL::Blob::StorageReader::Impl **a1, uint64_t a2)
{
  MIL::Blob::StorageReader::Impl::GetDataViewForSubByteSized<MIL::Int4>(*a1, a2);
}

void MIL::Blob::StorageReader::GetDataView<MIL::UInt6>(MIL::Blob::StorageReader::Impl **a1, uint64_t a2)
{
  MIL::Blob::StorageReader::Impl::GetDataViewForSubByteSized<MIL::UInt6>(*a1, a2);
}

void MIL::Blob::StorageReader::GetDataView<MIL::UInt4>(MIL::Blob::StorageReader::Impl **a1, uint64_t a2)
{
  MIL::Blob::StorageReader::Impl::GetDataViewForSubByteSized<MIL::UInt4>(*a1, a2);
}

void MIL::Blob::StorageReader::GetDataView<MIL::UInt3>(MIL::Blob::StorageReader::Impl **a1, uint64_t a2)
{
  MIL::Blob::StorageReader::Impl::GetDataViewForSubByteSized<MIL::UInt3>(*a1, a2);
}

void MIL::Blob::StorageReader::GetDataView<MIL::UInt2>(MIL::Blob::StorageReader::Impl **a1, uint64_t a2)
{
  MIL::Blob::StorageReader::Impl::GetDataViewForSubByteSized<MIL::UInt2>(*a1, a2);
}

void MIL::Blob::StorageReader::GetDataView<MIL::UInt1>(MIL::Blob::StorageReader::Impl **a1, uint64_t a2)
{
  MIL::Blob::StorageReader::Impl::GetDataViewForSubByteSized<MIL::UInt1>(*a1, a2);
}

uint64_t MIL::Blob::StorageReader::GetDataView<unsigned char>(MIL::Blob::StorageReader::Impl **a1, uint64_t a2)
{
  return MIL::Blob::StorageReader::Impl::GetDataViewForByteAligned<unsigned char>(*a1, a2);
}

uint64_t MIL::Blob::StorageReader::GetDataView<MIL::Bf16>(MIL::Blob::StorageReader::Impl **a1, uint64_t a2)
{
  return MIL::Blob::StorageReader::Impl::GetDataViewForByteAligned<MIL::Bf16>(*a1, a2);
}

uint64_t MIL::Blob::StorageReader::GetDataView<MIL::Fp8E4M3FN>(MIL::Blob::StorageReader::Impl **a1, uint64_t a2)
{
  return MIL::Blob::StorageReader::Impl::GetDataViewForByteAligned<MIL::Fp8E4M3FN>(*a1, a2);
}

uint64_t MIL::Blob::StorageReader::GetDataView<MIL::Fp8E5M2>(MIL::Blob::StorageReader::Impl **a1, uint64_t a2)
{
  return MIL::Blob::StorageReader::Impl::GetDataViewForByteAligned<MIL::Fp8E5M2>(*a1, a2);
}

uint64_t MIL::Blob::StorageReader::GetDataView<MIL::Fp16>(MIL::Blob::StorageReader::Impl **a1, uint64_t a2)
{
  return MIL::Blob::StorageReader::Impl::GetDataViewForByteAligned<MIL::Fp16>(*a1, a2);
}

uint64_t MIL::Blob::StorageReader::GetDataView<float>(MIL::Blob::StorageReader::Impl **a1, uint64_t a2)
{
  return MIL::Blob::StorageReader::Impl::GetDataViewForByteAligned<float>(*a1, a2);
}

uint64_t MIL::Blob::StorageReader::GetDataView<short>(MIL::Blob::StorageReader::Impl **a1, uint64_t a2)
{
  return MIL::Blob::StorageReader::Impl::GetDataViewForByteAligned<short>(*a1, a2);
}

uint64_t MIL::Blob::StorageReader::GetDataView<unsigned short>(MIL::Blob::StorageReader::Impl **a1, uint64_t a2)
{
  return MIL::Blob::StorageReader::Impl::GetDataViewForByteAligned<unsigned short>(*a1, a2);
}

uint64_t MIL::Blob::StorageReader::GetDataView<int>(MIL::Blob::StorageReader::Impl **a1, uint64_t a2)
{
  return MIL::Blob::StorageReader::Impl::GetDataViewForByteAligned<int>(*a1, a2);
}

uint64_t MIL::Blob::StorageReader::GetDataView<unsigned int>(MIL::Blob::StorageReader::Impl **a1, uint64_t a2)
{
  return MIL::Blob::StorageReader::Impl::GetDataViewForByteAligned<unsigned int>(*a1, a2);
}

uint64_t MIL::Blob::StorageReader::GetRawDataView(MIL::Blob::StorageReader::Impl **this, uint64_t a2)
{
  MIL::Blob::StorageReader::Impl *v2;
  __n128 Metadata;
  _QWORD v5[8];

  v2 = *this;
  Metadata = MIL::Blob::StorageReader::Impl::GetMetadata(*this, a2, (uint64_t)v5);
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, __n128))(**((_QWORD **)v2 + 4) + 32))(*((_QWORD *)v2 + 4), v5[2], v5[1], Metadata);
}

uint64_t MIL::Blob::StorageReader::GetDataOffset(MIL::Blob::StorageReader::Impl **this, uint64_t a2)
{
  _QWORD v3[8];

  MIL::Blob::StorageReader::Impl::GetMetadata(*this, a2, (uint64_t)v3);
  return v3[2];
}

uint64_t MIL::Blob::StorageReader::GetDataSize(MIL::Blob::StorageReader::Impl **this, uint64_t a2)
{
  _QWORD v3[8];

  MIL::Blob::StorageReader::Impl::GetMetadata(*this, a2, (uint64_t)v3);
  return v3[1];
}

uint64_t MIL::Blob::StorageReader::IsEncrypted(MIL::Blob::StorageReader *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)this + 32) + 24))(*(_QWORD *)(*(_QWORD *)this + 32));
}

uint64_t MIL::Blob::StorageReader::GetDataType(MIL::Blob::StorageReader::Impl **this, uint64_t a2)
{
  _DWORD v3[16];

  MIL::Blob::StorageReader::Impl::GetMetadata(*this, a2, (uint64_t)v3);
  return v3[1];
}

void MIL::Blob::StorageReader::GetAllOffsets(MIL::Blob::StorageReader::Impl **this@<X0>, uint64_t a2@<X8>)
{
  MIL::Blob::StorageReader::Impl::GetAllOffsets(*this, a2);
}

void MIL::Blob::StorageReader::Impl::GetAllOffsets(MIL::Blob::StorageReader::Impl *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD v18[8];

  v4 = *(unsigned int *)(*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 4) + 32))(*((_QWORD *)this + 4), 0, 64);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  std::vector<unsigned long long>::reserve((void **)a2, v4);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = 64;
    do
    {
      v8 = *(unint64_t **)(a2 + 8);
      v7 = *(_QWORD *)(a2 + 16);
      if ((unint64_t)v8 >= v7)
      {
        v10 = *(unint64_t **)a2;
        v11 = ((uint64_t)v8 - *(_QWORD *)a2) >> 3;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v13 = v7 - (_QWORD)v10;
        if (v13 >> 2 > v12)
          v12 = v13 >> 2;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        if (v14)
        {
          v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(a2 + 16, v14);
          v10 = *(unint64_t **)a2;
          v8 = *(unint64_t **)(a2 + 8);
        }
        else
        {
          v15 = 0;
        }
        v16 = (unint64_t *)&v15[8 * v11];
        *v16 = v6;
        v9 = v16 + 1;
        while (v8 != v10)
        {
          v17 = *--v8;
          *--v16 = v17;
        }
        *(_QWORD *)a2 = v16;
        *(_QWORD *)(a2 + 8) = v9;
        *(_QWORD *)(a2 + 16) = &v15[8 * v14];
        if (v10)
          operator delete(v10);
      }
      else
      {
        *v8 = v6;
        v9 = v8 + 1;
      }
      *(_QWORD *)(a2 + 8) = v9;
      MIL::Blob::StorageReader::Impl::GetMetadata(this, v6, (uint64_t)v18);
      v6 = (v18[2] + v18[1] + 63) & 0xFFFFFFFFFFFFFFC0;
      ++v5;
    }
    while (v5 != (_DWORD)v4);
  }
}

void sub_1E05E78F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Blob::StorageReader::GetDataPaddingInBits(MIL::Blob::StorageReader::Impl **this, uint64_t a2)
{
  _QWORD v3[8];

  MIL::Blob::StorageReader::Impl::GetMetadata(*this, a2, (uint64_t)v3);
  return v3[3];
}

__n128 MIL::Blob::StorageReader::Impl::GetMetadata@<Q0>(MIL::Blob::StorageReader::Impl *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  std::runtime_error *exception;

  v4 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 4) + 32))(*((_QWORD *)this + 4), a2, 64);
  v5 = *(_OWORD *)(v4 + 16);
  *(_OWORD *)a3 = *(_OWORD *)v4;
  *(_OWORD *)(a3 + 16) = v5;
  result = *(__n128 *)(v4 + 32);
  v7 = *(_OWORD *)(v4 + 48);
  *(__n128 *)(a3 + 32) = result;
  *(_OWORD *)(a3 + 48) = v7;
  if (*(_DWORD *)a3 != -559038737)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid sentinel in blob_metadata.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1E05E79C8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<void ()(void const*)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t MIL::Blob::`anonymous namespace'::ValidateStorageHeader(uint64_t result)
{
  std::runtime_error *exception;

  if (*(_DWORD *)(result + 4) != 2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Storage Reader expects file format version 2.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1E05E7A94(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Blob::`anonymous namespace'::InMemoryStorageData::~InMemoryStorageData(MIL::Blob::_anonymous_namespace_::InMemoryStorageData *this)
{
  uint64_t v2;
  MIL::Blob::_anonymous_namespace_::InMemoryStorageData *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1EA99A5E0;
  v5 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 6);
  if (!v2)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  v3 = (MIL::Blob::_anonymous_namespace_::InMemoryStorageData *)*((_QWORD *)this + 6);
  if (v3 == (MIL::Blob::_anonymous_namespace_::InMemoryStorageData *)((char *)this + 24))
  {
    v4 = 4;
    v3 = (MIL::Blob::_anonymous_namespace_::InMemoryStorageData *)((char *)this + 24);
  }
  else
  {
    if (!v3)
      return;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
}

{
  JUMPOUT(0x1E0C023A0);
}

uint64_t MIL::Blob::`anonymous namespace'::InMemoryStorageData::GetLength(MIL::Blob::_anonymous_namespace_::InMemoryStorageData *this)
{
  return *((_QWORD *)this + 2);
}

unint64_t MIL::Blob::`anonymous namespace'::InMemoryStorageData::GetView(MIL::Blob::_anonymous_namespace_::InMemoryStorageData *this, unint64_t a2, uint64_t a3)
{
  return MIL::Util::Span<unsigned char const,18446744073709551615ul>::Slice((_QWORD *)this + 1, a2, a3);
}

unint64_t MIL::Util::Span<unsigned char const,18446744073709551615ul>::Slice(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  BOOL v4;
  std::runtime_error *exception;

  if (!a3 || ((v3 = a1[1], v3 > a2) ? (v4 = a3 + a2 > v3) : (v4 = 1), v4))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_1EA992578, MEMORY[0x1E0DE42B0]);
  }
  return *a1 + a2;
}

void sub_1E05E7BD8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void **std::unique_ptr<MIL::Blob::StorageReader::Impl>::reset[abi:ne180100](void ***a1, void **a2)
{
  void **result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    MIL::Blob::StorageReader::Impl::~Impl(result);
    JUMPOUT(0x1E0C023A0);
  }
  return result;
}

void MIL::Blob::StorageReader::Impl::~Impl(void **this)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)(this + 4));
  if (*((_BYTE *)this + 24))
  {
    if (*((char *)this + 23) < 0)
      operator delete(*this);
  }
}

void std::__shared_ptr_emplace<MIL::Blob::`anonymous namespace'::MMapStorageData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA99A630;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIL::Blob::`anonymous namespace'::MMapStorageData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA99A630;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E0C023A0);
}

uint64_t std::__shared_ptr_emplace<MIL::Blob::`anonymous namespace'::MMapStorageData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void MIL::Blob::`anonymous namespace'::MMapStorageData::~MMapStorageData(MIL::Blob::_anonymous_namespace_::MMapStorageData *this)
{
  *(_QWORD *)this = &off_1EA99A680;
  std::unique_ptr<MIL::Blob::MMapFileReader const>::reset[abi:ne180100]((MIL::Blob::MMapFileReader **)this + 5, 0);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  JUMPOUT(0x1E0C023A0);
}

uint64_t MIL::Blob::`anonymous namespace'::MMapStorageData::GetLength(MIL::Blob::MMapFileReader **this)
{
  return MIL::Blob::MMapFileReader::GetLength(this[5]);
}

uint64_t MIL::Blob::`anonymous namespace'::MMapStorageData::IsEncrypted(MIL::Blob::MMapFileReader **this)
{
  return MIL::Blob::MMapFileReader::IsEncrypted(this[5]);
}

unint64_t MIL::Blob::`anonymous namespace'::MMapStorageData::GetView(MIL::Blob::MMapFileReader **this, unint64_t a2, uint64_t a3)
{
  return MIL::Blob::MMapFileReader::ReadData(this[5], a2, a3);
}

void MIL::Blob::`anonymous namespace'::MMapStorageData::EnsureLoaded(MIL::Blob::_anonymous_namespace_::MMapStorageData *this)
{
  unint64_t *v1;
  unint64_t v2;
  MIL::Blob::_anonymous_namespace_::MMapStorageData **v3;
  MIL::Blob::_anonymous_namespace_::MMapStorageData *v4;
  MIL::Blob::_anonymous_namespace_::MMapStorageData ****v5;
  MIL::Blob::_anonymous_namespace_::MMapStorageData ***v6;

  v4 = this;
  v1 = (unint64_t *)((char *)this + 32);
  v3 = &v4;
  v2 = atomic_load(v1);
  if (v2 != -1)
  {
    v6 = &v3;
    v5 = &v6;
  }
}

MIL::Blob::MMapFileReader *std::__call_once_proxy[abi:ne180100]<std::tuple<MIL::Blob::`anonymous namespace'::MMapStorageData::EnsureLoaded(void)::{lambda(void)#2} &&>>(uint64_t ****a1)
{
  uint64_t v1;
  unint64_t Data;
  MIL::Blob::MMapFileReader *v3;
  MIL::Blob::MMapFileReader *result;
  MIL::Blob::MMapFileReader *v5;

  v1 = ****a1;
  MIL::Blob::MakeMMapFileReader(v1 + 8, (uint64_t *)&v5);
  Data = MIL::Blob::MMapFileReader::ReadData(v5, 0, 64);
  v3 = v5;
  v5 = 0;
  std::unique_ptr<MIL::Blob::MMapFileReader const>::reset[abi:ne180100]((MIL::Blob::MMapFileReader **)(v1 + 40), v3);
  result = v5;
  v5 = 0;
  if (result)
  {
    MIL::Blob::MMapFileReader::~MMapFileReader(result);
    return (MIL::Blob::MMapFileReader *)MEMORY[0x1E0C023A0]();
  }
  return result;
}

void sub_1E05E7E7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, MIL::Blob::MMapFileReader *a10)
{
  if (a10)
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Blob::StorageReader::Impl::GetDataViewForByteAligned<signed char>(MIL::Blob::StorageReader::Impl *a1, uint64_t a2)
{
  double v3;
  uint64_t result;
  uint64_t v5;
  _QWORD v6[8];

  v3 = MIL::Blob::StorageReader::Impl::GetAndCheckMetadata(a1, a2, 4, (uint64_t)v6);
  result = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD, double))(**((_QWORD **)a1 + 4) + 32))(*((_QWORD **)a1 + 4), v6[2], v6[1], v3);
  if (!v5)
    return 0;
  return result;
}

double MIL::Blob::StorageReader::Impl::GetAndCheckMetadata@<D0>(MIL::Blob::StorageReader::Impl *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  double result;
  std::runtime_error *exception;

  *(_QWORD *)&result = MIL::Blob::StorageReader::Impl::GetMetadata(a1, a2, a4).n128_u64[0];
  if (*(_DWORD *)(a4 + 4) != a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Metadata data type does not match requested type.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1E05E7F44(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Blob::StorageReader::Impl::GetDataViewForSubByteSized<MIL::Int4>(MIL::Blob::StorageReader::Impl *a1, uint64_t a2)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  std::runtime_error *exception;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = MIL::Blob::StorageReader::Impl::GetAndCheckMetadata(a1, a2, 8, (uint64_t)&v8);
  v4 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, double))(**((_QWORD **)a1 + 4) + 32))(*((_QWORD **)a1 + 4), v10, v9, v3);
  if (v11 >= 8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "8 or more bits of padding for sub-byte sized data is incorrect");
    goto LABEL_8;
  }
  if ((v11 & 3) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid padding for byte-aligned sub-byte-sized type");
    goto LABEL_8;
  }
  v6 = 8 * v9 - v11;
  if ((v6 & 3) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid padding for blob");
LABEL_8:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  MIL::Util::CastToBitSpan<MIL::Int4 const,unsigned char const,true>(v4, v5, v6 >> 2);
}

void sub_1E05E8034(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Blob::StorageReader::Impl::GetDataViewForSubByteSized<MIL::UInt6>(MIL::Blob::StorageReader::Impl *a1, uint64_t a2)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  std::runtime_error *exception;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = MIL::Blob::StorageReader::Impl::GetAndCheckMetadata(a1, a2, 13, (uint64_t)&v8);
  v4 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, double))(**((_QWORD **)a1 + 4) + 32))(*((_QWORD **)a1 + 4), v10, v9, v3);
  if (v11 >= 8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "8 or more bits of padding for sub-byte sized data is incorrect");
    goto LABEL_6;
  }
  v6 = 8 * v9 - v11;
  if (v6 % 6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid padding for blob");
LABEL_6:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  MIL::Util::CastToBitSpan<MIL::UInt6 const,unsigned char const,true>(v4, v5, v6 / 6);
}

void sub_1E05E8118(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Blob::StorageReader::Impl::GetDataViewForSubByteSized<MIL::UInt4>(MIL::Blob::StorageReader::Impl *a1, uint64_t a2)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  std::runtime_error *exception;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = MIL::Blob::StorageReader::Impl::GetAndCheckMetadata(a1, a2, 11, (uint64_t)&v8);
  v4 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, double))(**((_QWORD **)a1 + 4) + 32))(*((_QWORD **)a1 + 4), v10, v9, v3);
  if (v11 >= 8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "8 or more bits of padding for sub-byte sized data is incorrect");
    goto LABEL_8;
  }
  if ((v11 & 3) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid padding for byte-aligned sub-byte-sized type");
    goto LABEL_8;
  }
  v6 = 8 * v9 - v11;
  if ((v6 & 3) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid padding for blob");
LABEL_8:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  MIL::Util::CastToBitSpan<MIL::UInt4 const,unsigned char const,true>(v4, v5, v6 >> 2);
}

void sub_1E05E820C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Blob::StorageReader::Impl::GetDataViewForSubByteSized<MIL::UInt3>(MIL::Blob::StorageReader::Impl *a1, uint64_t a2)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  std::runtime_error *exception;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = MIL::Blob::StorageReader::Impl::GetAndCheckMetadata(a1, a2, 12, (uint64_t)&v8);
  v4 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, double))(**((_QWORD **)a1 + 4) + 32))(*((_QWORD **)a1 + 4), v10, v9, v3);
  if (v11 >= 8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "8 or more bits of padding for sub-byte sized data is incorrect");
    goto LABEL_6;
  }
  v6 = 8 * v9 - v11;
  if (v6 != 3 * (v6 / 3))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid padding for blob");
LABEL_6:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  MIL::Util::CastToBitSpan<MIL::UInt3 const,unsigned char const,true>(v4, v5, v6 / 3);
}

void sub_1E05E82F4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Blob::StorageReader::Impl::GetDataViewForSubByteSized<MIL::UInt2>(MIL::Blob::StorageReader::Impl *a1, uint64_t a2)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  std::runtime_error *exception;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = MIL::Blob::StorageReader::Impl::GetAndCheckMetadata(a1, a2, 10, (uint64_t)&v8);
  v4 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, double))(**((_QWORD **)a1 + 4) + 32))(*((_QWORD **)a1 + 4), v10, v9, v3);
  if (v11 >= 8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "8 or more bits of padding for sub-byte sized data is incorrect");
    goto LABEL_8;
  }
  if ((v11 & 1) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid padding for byte-aligned sub-byte-sized type");
    goto LABEL_8;
  }
  v6 = 8 * v9 - v11;
  if ((v6 & 1) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid padding for blob");
LABEL_8:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  MIL::Util::CastToBitSpan<MIL::UInt2 const,unsigned char const,true>(v4, v5, v6 >> 1);
}

void sub_1E05E83E0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Blob::StorageReader::Impl::GetDataViewForSubByteSized<MIL::UInt1>(MIL::Blob::StorageReader::Impl *a1, uint64_t a2)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  std::runtime_error *exception;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v3 = MIL::Blob::StorageReader::Impl::GetAndCheckMetadata(a1, a2, 9, (uint64_t)&v7);
  v4 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, double))(**((_QWORD **)a1 + 4) + 32))(*((_QWORD **)a1 + 4), v9, v8, v3);
  if (v10 >= 8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "8 or more bits of padding for sub-byte sized data is incorrect");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  MIL::Util::CastToBitSpan<MIL::UInt1 const,unsigned char const,true>(v4, v5, 8 * v8 - v10);
}

void sub_1E05E848C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Blob::StorageReader::Impl::GetDataViewForByteAligned<unsigned char>(MIL::Blob::StorageReader::Impl *a1, uint64_t a2)
{
  double v3;
  uint64_t result;
  uint64_t v5;
  _QWORD v6[8];

  v3 = MIL::Blob::StorageReader::Impl::GetAndCheckMetadata(a1, a2, 3, (uint64_t)v6);
  result = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD, double))(**((_QWORD **)a1 + 4) + 32))(*((_QWORD **)a1 + 4), v6[2], v6[1], v3);
  if (!v5)
    return 0;
  return result;
}

uint64_t MIL::Blob::StorageReader::Impl::GetDataViewForByteAligned<MIL::Bf16>(MIL::Blob::StorageReader::Impl *a1, uint64_t a2)
{
  double v3;
  uint64_t result;
  unint64_t v5;
  _QWORD v6[8];

  v3 = MIL::Blob::StorageReader::Impl::GetAndCheckMetadata(a1, a2, 5, (uint64_t)v6);
  result = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD, double))(**((_QWORD **)a1 + 4) + 32))(*((_QWORD **)a1 + 4), v6[2], v6[1], v3);
  if (v5 < 2)
    return 0;
  return result;
}

uint64_t MIL::Blob::StorageReader::Impl::GetDataViewForByteAligned<MIL::Fp8E4M3FN>(MIL::Blob::StorageReader::Impl *a1, uint64_t a2)
{
  double v3;
  uint64_t result;
  uint64_t v5;
  _QWORD v6[8];

  v3 = MIL::Blob::StorageReader::Impl::GetAndCheckMetadata(a1, a2, 16, (uint64_t)v6);
  result = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD, double))(**((_QWORD **)a1 + 4) + 32))(*((_QWORD **)a1 + 4), v6[2], v6[1], v3);
  if (!v5)
    return 0;
  return result;
}

uint64_t MIL::Blob::StorageReader::Impl::GetDataViewForByteAligned<MIL::Fp8E5M2>(MIL::Blob::StorageReader::Impl *a1, uint64_t a2)
{
  double v3;
  uint64_t result;
  uint64_t v5;
  _QWORD v6[8];

  v3 = MIL::Blob::StorageReader::Impl::GetAndCheckMetadata(a1, a2, 17, (uint64_t)v6);
  result = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD, double))(**((_QWORD **)a1 + 4) + 32))(*((_QWORD **)a1 + 4), v6[2], v6[1], v3);
  if (!v5)
    return 0;
  return result;
}

uint64_t MIL::Blob::StorageReader::Impl::GetDataViewForByteAligned<MIL::Fp16>(MIL::Blob::StorageReader::Impl *a1, uint64_t a2)
{
  double v3;
  uint64_t result;
  unint64_t v5;
  _QWORD v6[8];

  v3 = MIL::Blob::StorageReader::Impl::GetAndCheckMetadata(a1, a2, 1, (uint64_t)v6);
  result = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD, double))(**((_QWORD **)a1 + 4) + 32))(*((_QWORD **)a1 + 4), v6[2], v6[1], v3);
  if (v5 < 2)
    return 0;
  return result;
}

uint64_t MIL::Blob::StorageReader::Impl::GetDataViewForByteAligned<float>(MIL::Blob::StorageReader::Impl *a1, uint64_t a2)
{
  double v3;
  uint64_t result;
  unint64_t v5;
  _QWORD v6[8];

  v3 = MIL::Blob::StorageReader::Impl::GetAndCheckMetadata(a1, a2, 2, (uint64_t)v6);
  result = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD, double))(**((_QWORD **)a1 + 4) + 32))(*((_QWORD **)a1 + 4), v6[2], v6[1], v3);
  if (v5 < 4)
    return 0;
  return result;
}

uint64_t MIL::Blob::StorageReader::Impl::GetDataViewForByteAligned<short>(MIL::Blob::StorageReader::Impl *a1, uint64_t a2)
{
  double v3;
  uint64_t result;
  unint64_t v5;
  _QWORD v6[8];

  v3 = MIL::Blob::StorageReader::Impl::GetAndCheckMetadata(a1, a2, 6, (uint64_t)v6);
  result = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD, double))(**((_QWORD **)a1 + 4) + 32))(*((_QWORD **)a1 + 4), v6[2], v6[1], v3);
  if (v5 < 2)
    return 0;
  return result;
}

uint64_t MIL::Blob::StorageReader::Impl::GetDataViewForByteAligned<unsigned short>(MIL::Blob::StorageReader::Impl *a1, uint64_t a2)
{
  double v3;
  uint64_t result;
  unint64_t v5;
  _QWORD v6[8];

  v3 = MIL::Blob::StorageReader::Impl::GetAndCheckMetadata(a1, a2, 7, (uint64_t)v6);
  result = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD, double))(**((_QWORD **)a1 + 4) + 32))(*((_QWORD **)a1 + 4), v6[2], v6[1], v3);
  if (v5 < 2)
    return 0;
  return result;
}

uint64_t MIL::Blob::StorageReader::Impl::GetDataViewForByteAligned<int>(MIL::Blob::StorageReader::Impl *a1, uint64_t a2)
{
  double v3;
  uint64_t result;
  unint64_t v5;
  _QWORD v6[8];

  v3 = MIL::Blob::StorageReader::Impl::GetAndCheckMetadata(a1, a2, 14, (uint64_t)v6);
  result = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD, double))(**((_QWORD **)a1 + 4) + 32))(*((_QWORD **)a1 + 4), v6[2], v6[1], v3);
  if (v5 < 4)
    return 0;
  return result;
}

uint64_t MIL::Blob::StorageReader::Impl::GetDataViewForByteAligned<unsigned int>(MIL::Blob::StorageReader::Impl *a1, uint64_t a2)
{
  double v3;
  uint64_t result;
  unint64_t v5;
  _QWORD v6[8];

  v3 = MIL::Blob::StorageReader::Impl::GetAndCheckMetadata(a1, a2, 15, (uint64_t)v6);
  result = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD, double))(**((_QWORD **)a1 + 4) + 32))(*((_QWORD **)a1 + 4), v6[2], v6[1], v3);
  if (v5 < 4)
    return 0;
  return result;
}

void MIL::Blob::StorageWriter::~StorageWriter(MIL::Blob::FileWriter ***this)
{
  std::unique_ptr<MIL::Blob::StorageWriter::Impl>::reset[abi:ne180100](this, 0);
}

{
  std::unique_ptr<MIL::Blob::StorageWriter::Impl>::reset[abi:ne180100](this, 0);
}

std::string **MIL::Blob::StorageWriter::StorageWriter(std::string **a1, __int128 *a2, uint64_t a3)
{
  std::string *v6;

  v6 = (std::string *)operator new();
  MIL::Blob::StorageWriter::Impl::Impl(v6, a2, a3);
  *a1 = v6;
  return a1;
}

void sub_1E05E887C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1E0C023A0](v1, 0x1032C4097EB098DLL);
  _Unwind_Resume(a1);
}

unint64_t MIL::Blob::StorageWriter::WriteData<signed char>(uint64_t *a1)
{
  return MIL::Blob::StorageWriter::Impl::WriteData<signed char>(*a1);
}

unint64_t MIL::Blob::StorageWriter::Impl::WriteData<signed char>(uint64_t a1)
{
  unint64_t NextAlignedOffset;
  unint64_t v3;
  unint64_t v4;
  _DWORD *v5;
  int v6;
  std::runtime_error *exception;

  NextAlignedOffset = MIL::Blob::FileWriter::GetNextAlignedOffset(*(MIL::Blob::FileWriter **)(a1 + 24));
  if ((NextAlignedOffset & 0x3F) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: dataOffset is expected to be 64 bits aligned.");
    goto LABEL_7;
  }
  v3 = NextAlignedOffset;
  v4 = NextAlignedOffset + 64;
  if (NextAlignedOffset != MIL::Blob::FileWriter::AppendData(*(_QWORD **)(a1 + 24))
    || v4 != MIL::Blob::FileWriter::AppendData(*(_QWORD **)(a1 + 24)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: Metadata written to different offset than expected.");
LABEL_7:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v6 = *(_DWORD *)(a1 + 32);
  v5 = (_DWORD *)(a1 + 32);
  *v5 = v6 + 1;
  MIL::Blob::FileWriter::WriteData(*((_QWORD **)v5 - 1), (uint64_t)v5, 64, 0);
  return v3;
}

void sub_1E05E89E4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t MIL::Blob::StorageWriter::WriteData<unsigned char>(uint64_t *a1)
{
  return MIL::Blob::StorageWriter::Impl::WriteData<unsigned char>(*a1);
}

unint64_t MIL::Blob::StorageWriter::Impl::WriteData<unsigned char>(uint64_t a1)
{
  unint64_t NextAlignedOffset;
  unint64_t v3;
  unint64_t v4;
  _DWORD *v5;
  int v6;
  std::runtime_error *exception;

  NextAlignedOffset = MIL::Blob::FileWriter::GetNextAlignedOffset(*(MIL::Blob::FileWriter **)(a1 + 24));
  if ((NextAlignedOffset & 0x3F) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: dataOffset is expected to be 64 bits aligned.");
    goto LABEL_7;
  }
  v3 = NextAlignedOffset;
  v4 = NextAlignedOffset + 64;
  if (NextAlignedOffset != MIL::Blob::FileWriter::AppendData(*(_QWORD **)(a1 + 24))
    || v4 != MIL::Blob::FileWriter::AppendData(*(_QWORD **)(a1 + 24)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: Metadata written to different offset than expected.");
LABEL_7:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v6 = *(_DWORD *)(a1 + 32);
  v5 = (_DWORD *)(a1 + 32);
  *v5 = v6 + 1;
  MIL::Blob::FileWriter::WriteData(*((_QWORD **)v5 - 1), (uint64_t)v5, 64, 0);
  return v3;
}

void sub_1E05E8B40(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t MIL::Blob::StorageWriter::WriteData<unsigned int>(uint64_t *a1)
{
  return MIL::Blob::StorageWriter::Impl::WriteData<unsigned int>(*a1);
}

unint64_t MIL::Blob::StorageWriter::Impl::WriteData<unsigned int>(uint64_t a1)
{
  unint64_t NextAlignedOffset;
  unint64_t v3;
  unint64_t v4;
  _DWORD *v5;
  int v6;
  std::runtime_error *exception;

  NextAlignedOffset = MIL::Blob::FileWriter::GetNextAlignedOffset(*(MIL::Blob::FileWriter **)(a1 + 24));
  if ((NextAlignedOffset & 0x3F) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: dataOffset is expected to be 64 bits aligned.");
    goto LABEL_7;
  }
  v3 = NextAlignedOffset;
  v4 = NextAlignedOffset + 64;
  if (NextAlignedOffset != MIL::Blob::FileWriter::AppendData(*(_QWORD **)(a1 + 24))
    || v4 != MIL::Blob::FileWriter::AppendData(*(_QWORD **)(a1 + 24)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: Metadata written to different offset than expected.");
LABEL_7:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v6 = *(_DWORD *)(a1 + 32);
  v5 = (_DWORD *)(a1 + 32);
  *v5 = v6 + 1;
  MIL::Blob::FileWriter::WriteData(*((_QWORD **)v5 - 1), (uint64_t)v5, 64, 0);
  return v3;
}

void sub_1E05E8C9C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t MIL::Blob::StorageWriter::WriteData<MIL::Bf16>(uint64_t *a1)
{
  return MIL::Blob::StorageWriter::Impl::WriteData<MIL::Bf16>(*a1);
}

unint64_t MIL::Blob::StorageWriter::Impl::WriteData<MIL::Bf16>(uint64_t a1)
{
  unint64_t NextAlignedOffset;
  unint64_t v3;
  unint64_t v4;
  _DWORD *v5;
  int v6;
  std::runtime_error *exception;

  NextAlignedOffset = MIL::Blob::FileWriter::GetNextAlignedOffset(*(MIL::Blob::FileWriter **)(a1 + 24));
  if ((NextAlignedOffset & 0x3F) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: dataOffset is expected to be 64 bits aligned.");
    goto LABEL_7;
  }
  v3 = NextAlignedOffset;
  v4 = NextAlignedOffset + 64;
  if (NextAlignedOffset != MIL::Blob::FileWriter::AppendData(*(_QWORD **)(a1 + 24))
    || v4 != MIL::Blob::FileWriter::AppendData(*(_QWORD **)(a1 + 24)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: Metadata written to different offset than expected.");
LABEL_7:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v6 = *(_DWORD *)(a1 + 32);
  v5 = (_DWORD *)(a1 + 32);
  *v5 = v6 + 1;
  MIL::Blob::FileWriter::WriteData(*((_QWORD **)v5 - 1), (uint64_t)v5, 64, 0);
  return v3;
}

void sub_1E05E8DF8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t MIL::Blob::StorageWriter::WriteData<MIL::Fp8E4M3FN>(uint64_t *a1)
{
  return MIL::Blob::StorageWriter::Impl::WriteData<MIL::Fp8E4M3FN>(*a1);
}

unint64_t MIL::Blob::StorageWriter::Impl::WriteData<MIL::Fp8E4M3FN>(uint64_t a1)
{
  unint64_t NextAlignedOffset;
  unint64_t v3;
  unint64_t v4;
  _DWORD *v5;
  int v6;
  std::runtime_error *exception;

  NextAlignedOffset = MIL::Blob::FileWriter::GetNextAlignedOffset(*(MIL::Blob::FileWriter **)(a1 + 24));
  if ((NextAlignedOffset & 0x3F) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: dataOffset is expected to be 64 bits aligned.");
    goto LABEL_7;
  }
  v3 = NextAlignedOffset;
  v4 = NextAlignedOffset + 64;
  if (NextAlignedOffset != MIL::Blob::FileWriter::AppendData(*(_QWORD **)(a1 + 24))
    || v4 != MIL::Blob::FileWriter::AppendData(*(_QWORD **)(a1 + 24)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: Metadata written to different offset than expected.");
LABEL_7:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v6 = *(_DWORD *)(a1 + 32);
  v5 = (_DWORD *)(a1 + 32);
  *v5 = v6 + 1;
  MIL::Blob::FileWriter::WriteData(*((_QWORD **)v5 - 1), (uint64_t)v5, 64, 0);
  return v3;
}

void sub_1E05E8F54(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t MIL::Blob::StorageWriter::WriteData<MIL::Fp8E5M2>(uint64_t *a1)
{
  return MIL::Blob::StorageWriter::Impl::WriteData<MIL::Fp8E5M2>(*a1);
}

unint64_t MIL::Blob::StorageWriter::Impl::WriteData<MIL::Fp8E5M2>(uint64_t a1)
{
  unint64_t NextAlignedOffset;
  unint64_t v3;
  unint64_t v4;
  _DWORD *v5;
  int v6;
  std::runtime_error *exception;

  NextAlignedOffset = MIL::Blob::FileWriter::GetNextAlignedOffset(*(MIL::Blob::FileWriter **)(a1 + 24));
  if ((NextAlignedOffset & 0x3F) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: dataOffset is expected to be 64 bits aligned.");
    goto LABEL_7;
  }
  v3 = NextAlignedOffset;
  v4 = NextAlignedOffset + 64;
  if (NextAlignedOffset != MIL::Blob::FileWriter::AppendData(*(_QWORD **)(a1 + 24))
    || v4 != MIL::Blob::FileWriter::AppendData(*(_QWORD **)(a1 + 24)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: Metadata written to different offset than expected.");
LABEL_7:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v6 = *(_DWORD *)(a1 + 32);
  v5 = (_DWORD *)(a1 + 32);
  *v5 = v6 + 1;
  MIL::Blob::FileWriter::WriteData(*((_QWORD **)v5 - 1), (uint64_t)v5, 64, 0);
  return v3;
}

void sub_1E05E90B0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t MIL::Blob::StorageWriter::WriteData<MIL::Fp16>(uint64_t *a1)
{
  return MIL::Blob::StorageWriter::Impl::WriteData<MIL::Fp16>(*a1);
}

unint64_t MIL::Blob::StorageWriter::Impl::WriteData<MIL::Fp16>(uint64_t a1)
{
  unint64_t NextAlignedOffset;
  unint64_t v3;
  unint64_t v4;
  _DWORD *v5;
  int v6;
  std::runtime_error *exception;

  NextAlignedOffset = MIL::Blob::FileWriter::GetNextAlignedOffset(*(MIL::Blob::FileWriter **)(a1 + 24));
  if ((NextAlignedOffset & 0x3F) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: dataOffset is expected to be 64 bits aligned.");
    goto LABEL_7;
  }
  v3 = NextAlignedOffset;
  v4 = NextAlignedOffset + 64;
  if (NextAlignedOffset != MIL::Blob::FileWriter::AppendData(*(_QWORD **)(a1 + 24))
    || v4 != MIL::Blob::FileWriter::AppendData(*(_QWORD **)(a1 + 24)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: Metadata written to different offset than expected.");
LABEL_7:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v6 = *(_DWORD *)(a1 + 32);
  v5 = (_DWORD *)(a1 + 32);
  *v5 = v6 + 1;
  MIL::Blob::FileWriter::WriteData(*((_QWORD **)v5 - 1), (uint64_t)v5, 64, 0);
  return v3;
}

void sub_1E05E920C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t MIL::Blob::StorageWriter::WriteData<float>(uint64_t *a1)
{
  return MIL::Blob::StorageWriter::Impl::WriteData<float>(*a1);
}

unint64_t MIL::Blob::StorageWriter::Impl::WriteData<float>(uint64_t a1)
{
  unint64_t NextAlignedOffset;
  unint64_t v3;
  unint64_t v4;
  _DWORD *v5;
  int v6;
  std::runtime_error *exception;

  NextAlignedOffset = MIL::Blob::FileWriter::GetNextAlignedOffset(*(MIL::Blob::FileWriter **)(a1 + 24));
  if ((NextAlignedOffset & 0x3F) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: dataOffset is expected to be 64 bits aligned.");
    goto LABEL_7;
  }
  v3 = NextAlignedOffset;
  v4 = NextAlignedOffset + 64;
  if (NextAlignedOffset != MIL::Blob::FileWriter::AppendData(*(_QWORD **)(a1 + 24))
    || v4 != MIL::Blob::FileWriter::AppendData(*(_QWORD **)(a1 + 24)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: Metadata written to different offset than expected.");
LABEL_7:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v6 = *(_DWORD *)(a1 + 32);
  v5 = (_DWORD *)(a1 + 32);
  *v5 = v6 + 1;
  MIL::Blob::FileWriter::WriteData(*((_QWORD **)v5 - 1), (uint64_t)v5, 64, 0);
  return v3;
}

void sub_1E05E9368(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t MIL::Blob::StorageWriter::WriteData<short>(uint64_t *a1)
{
  return MIL::Blob::StorageWriter::Impl::WriteData<short>(*a1);
}

unint64_t MIL::Blob::StorageWriter::Impl::WriteData<short>(uint64_t a1)
{
  unint64_t NextAlignedOffset;
  unint64_t v3;
  unint64_t v4;
  _DWORD *v5;
  int v6;
  std::runtime_error *exception;

  NextAlignedOffset = MIL::Blob::FileWriter::GetNextAlignedOffset(*(MIL::Blob::FileWriter **)(a1 + 24));
  if ((NextAlignedOffset & 0x3F) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: dataOffset is expected to be 64 bits aligned.");
    goto LABEL_7;
  }
  v3 = NextAlignedOffset;
  v4 = NextAlignedOffset + 64;
  if (NextAlignedOffset != MIL::Blob::FileWriter::AppendData(*(_QWORD **)(a1 + 24))
    || v4 != MIL::Blob::FileWriter::AppendData(*(_QWORD **)(a1 + 24)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: Metadata written to different offset than expected.");
LABEL_7:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v6 = *(_DWORD *)(a1 + 32);
  v5 = (_DWORD *)(a1 + 32);
  *v5 = v6 + 1;
  MIL::Blob::FileWriter::WriteData(*((_QWORD **)v5 - 1), (uint64_t)v5, 64, 0);
  return v3;
}

void sub_1E05E94C4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t MIL::Blob::StorageWriter::WriteData<int>(uint64_t *a1)
{
  return MIL::Blob::StorageWriter::Impl::WriteData<int>(*a1);
}

unint64_t MIL::Blob::StorageWriter::Impl::WriteData<int>(uint64_t a1)
{
  unint64_t NextAlignedOffset;
  unint64_t v3;
  unint64_t v4;
  _DWORD *v5;
  int v6;
  std::runtime_error *exception;

  NextAlignedOffset = MIL::Blob::FileWriter::GetNextAlignedOffset(*(MIL::Blob::FileWriter **)(a1 + 24));
  if ((NextAlignedOffset & 0x3F) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: dataOffset is expected to be 64 bits aligned.");
    goto LABEL_7;
  }
  v3 = NextAlignedOffset;
  v4 = NextAlignedOffset + 64;
  if (NextAlignedOffset != MIL::Blob::FileWriter::AppendData(*(_QWORD **)(a1 + 24))
    || v4 != MIL::Blob::FileWriter::AppendData(*(_QWORD **)(a1 + 24)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: Metadata written to different offset than expected.");
LABEL_7:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v6 = *(_DWORD *)(a1 + 32);
  v5 = (_DWORD *)(a1 + 32);
  *v5 = v6 + 1;
  MIL::Blob::FileWriter::WriteData(*((_QWORD **)v5 - 1), (uint64_t)v5, 64, 0);
  return v3;
}

void sub_1E05E9620(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t MIL::Blob::StorageWriter::WriteData<MIL::Int4>(uint64_t *a1)
{
  return MIL::Blob::StorageWriter::Impl::WriteData<MIL::Int4>(*a1);
}

unint64_t MIL::Blob::StorageWriter::Impl::WriteData<MIL::Int4>(uint64_t a1)
{
  unint64_t NextAlignedOffset;
  unint64_t v3;
  unint64_t v4;
  _DWORD *v5;
  int v6;
  std::runtime_error *exception;

  NextAlignedOffset = MIL::Blob::FileWriter::GetNextAlignedOffset(*(MIL::Blob::FileWriter **)(a1 + 24));
  if ((NextAlignedOffset & 0x3F) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: dataOffset is expected to be 64 bits aligned.");
    goto LABEL_7;
  }
  v3 = NextAlignedOffset;
  v4 = NextAlignedOffset + 64;
  if (NextAlignedOffset != MIL::Blob::FileWriter::AppendData(*(_QWORD **)(a1 + 24))
    || v4 != MIL::Blob::FileWriter::AppendData(*(_QWORD **)(a1 + 24)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: Metadata written to different offset than expected.");
LABEL_7:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v6 = *(_DWORD *)(a1 + 32);
  v5 = (_DWORD *)(a1 + 32);
  *v5 = v6 + 1;
  MIL::Blob::FileWriter::WriteData(*((_QWORD **)v5 - 1), (uint64_t)v5, 64, 0);
  return v3;
}

void sub_1E05E9794(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t MIL::Blob::StorageWriter::WriteData<MIL::UInt6>(uint64_t *a1)
{
  return MIL::Blob::StorageWriter::Impl::WriteData<MIL::UInt6>(*a1);
}

unint64_t MIL::Blob::StorageWriter::Impl::WriteData<MIL::UInt6>(uint64_t a1)
{
  unint64_t NextAlignedOffset;
  unint64_t v3;
  unint64_t v4;
  _DWORD *v5;
  int v6;
  std::runtime_error *exception;

  NextAlignedOffset = MIL::Blob::FileWriter::GetNextAlignedOffset(*(MIL::Blob::FileWriter **)(a1 + 24));
  if ((NextAlignedOffset & 0x3F) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: dataOffset is expected to be 64 bits aligned.");
    goto LABEL_7;
  }
  v3 = NextAlignedOffset;
  v4 = NextAlignedOffset + 64;
  if (NextAlignedOffset != MIL::Blob::FileWriter::AppendData(*(_QWORD **)(a1 + 24))
    || v4 != MIL::Blob::FileWriter::AppendData(*(_QWORD **)(a1 + 24)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: Metadata written to different offset than expected.");
LABEL_7:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v6 = *(_DWORD *)(a1 + 32);
  v5 = (_DWORD *)(a1 + 32);
  *v5 = v6 + 1;
  MIL::Blob::FileWriter::WriteData(*((_QWORD **)v5 - 1), (uint64_t)v5, 64, 0);
  return v3;
}

void sub_1E05E990C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t MIL::Blob::StorageWriter::WriteData<MIL::UInt4>(uint64_t *a1)
{
  return MIL::Blob::StorageWriter::Impl::WriteData<MIL::UInt4>(*a1);
}

unint64_t MIL::Blob::StorageWriter::Impl::WriteData<MIL::UInt4>(uint64_t a1)
{
  unint64_t NextAlignedOffset;
  unint64_t v3;
  unint64_t v4;
  _DWORD *v5;
  int v6;
  std::runtime_error *exception;

  NextAlignedOffset = MIL::Blob::FileWriter::GetNextAlignedOffset(*(MIL::Blob::FileWriter **)(a1 + 24));
  if ((NextAlignedOffset & 0x3F) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: dataOffset is expected to be 64 bits aligned.");
    goto LABEL_7;
  }
  v3 = NextAlignedOffset;
  v4 = NextAlignedOffset + 64;
  if (NextAlignedOffset != MIL::Blob::FileWriter::AppendData(*(_QWORD **)(a1 + 24))
    || v4 != MIL::Blob::FileWriter::AppendData(*(_QWORD **)(a1 + 24)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: Metadata written to different offset than expected.");
LABEL_7:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v6 = *(_DWORD *)(a1 + 32);
  v5 = (_DWORD *)(a1 + 32);
  *v5 = v6 + 1;
  MIL::Blob::FileWriter::WriteData(*((_QWORD **)v5 - 1), (uint64_t)v5, 64, 0);
  return v3;
}

void sub_1E05E9A80(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t MIL::Blob::StorageWriter::WriteData<MIL::UInt3>(uint64_t *a1)
{
  return MIL::Blob::StorageWriter::Impl::WriteData<MIL::UInt3>(*a1);
}

unint64_t MIL::Blob::StorageWriter::Impl::WriteData<MIL::UInt3>(uint64_t a1)
{
  unint64_t NextAlignedOffset;
  unint64_t v3;
  unint64_t v4;
  _DWORD *v5;
  int v6;
  std::runtime_error *exception;

  NextAlignedOffset = MIL::Blob::FileWriter::GetNextAlignedOffset(*(MIL::Blob::FileWriter **)(a1 + 24));
  if ((NextAlignedOffset & 0x3F) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: dataOffset is expected to be 64 bits aligned.");
    goto LABEL_7;
  }
  v3 = NextAlignedOffset;
  v4 = NextAlignedOffset + 64;
  if (NextAlignedOffset != MIL::Blob::FileWriter::AppendData(*(_QWORD **)(a1 + 24))
    || v4 != MIL::Blob::FileWriter::AppendData(*(_QWORD **)(a1 + 24)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: Metadata written to different offset than expected.");
LABEL_7:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v6 = *(_DWORD *)(a1 + 32);
  v5 = (_DWORD *)(a1 + 32);
  *v5 = v6 + 1;
  MIL::Blob::FileWriter::WriteData(*((_QWORD **)v5 - 1), (uint64_t)v5, 64, 0);
  return v3;
}

void sub_1E05E9BF4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t MIL::Blob::StorageWriter::WriteData<MIL::UInt2>(uint64_t *a1)
{
  return MIL::Blob::StorageWriter::Impl::WriteData<MIL::UInt2>(*a1);
}

unint64_t MIL::Blob::StorageWriter::Impl::WriteData<MIL::UInt2>(uint64_t a1)
{
  unint64_t NextAlignedOffset;
  unint64_t v3;
  unint64_t v4;
  _DWORD *v5;
  int v6;
  std::runtime_error *exception;

  NextAlignedOffset = MIL::Blob::FileWriter::GetNextAlignedOffset(*(MIL::Blob::FileWriter **)(a1 + 24));
  if ((NextAlignedOffset & 0x3F) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: dataOffset is expected to be 64 bits aligned.");
    goto LABEL_7;
  }
  v3 = NextAlignedOffset;
  v4 = NextAlignedOffset + 64;
  if (NextAlignedOffset != MIL::Blob::FileWriter::AppendData(*(_QWORD **)(a1 + 24))
    || v4 != MIL::Blob::FileWriter::AppendData(*(_QWORD **)(a1 + 24)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: Metadata written to different offset than expected.");
LABEL_7:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v6 = *(_DWORD *)(a1 + 32);
  v5 = (_DWORD *)(a1 + 32);
  *v5 = v6 + 1;
  MIL::Blob::FileWriter::WriteData(*((_QWORD **)v5 - 1), (uint64_t)v5, 64, 0);
  return v3;
}

void sub_1E05E9D6C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t MIL::Blob::StorageWriter::WriteData<MIL::UInt1>(uint64_t *a1)
{
  return MIL::Blob::StorageWriter::Impl::WriteData<MIL::UInt1>(*a1);
}

unint64_t MIL::Blob::StorageWriter::Impl::WriteData<MIL::UInt1>(uint64_t a1)
{
  unint64_t NextAlignedOffset;
  unint64_t v3;
  unint64_t v4;
  _DWORD *v5;
  int v6;
  std::runtime_error *exception;

  NextAlignedOffset = MIL::Blob::FileWriter::GetNextAlignedOffset(*(MIL::Blob::FileWriter **)(a1 + 24));
  if ((NextAlignedOffset & 0x3F) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: dataOffset is expected to be 64 bits aligned.");
    goto LABEL_7;
  }
  v3 = NextAlignedOffset;
  v4 = NextAlignedOffset + 64;
  if (NextAlignedOffset != MIL::Blob::FileWriter::AppendData(*(_QWORD **)(a1 + 24))
    || v4 != MIL::Blob::FileWriter::AppendData(*(_QWORD **)(a1 + 24)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: Metadata written to different offset than expected.");
LABEL_7:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v6 = *(_DWORD *)(a1 + 32);
  v5 = (_DWORD *)(a1 + 32);
  *v5 = v6 + 1;
  MIL::Blob::FileWriter::WriteData(*((_QWORD **)v5 - 1), (uint64_t)v5, 64, 0);
  return v3;
}

void sub_1E05E9EDC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t MIL::Blob::StorageWriter::WriteData<unsigned short>(uint64_t *a1)
{
  return MIL::Blob::StorageWriter::Impl::WriteData<unsigned short>(*a1);
}

unint64_t MIL::Blob::StorageWriter::Impl::WriteData<unsigned short>(uint64_t a1)
{
  unint64_t NextAlignedOffset;
  unint64_t v3;
  unint64_t v4;
  _DWORD *v5;
  int v6;
  std::runtime_error *exception;

  NextAlignedOffset = MIL::Blob::FileWriter::GetNextAlignedOffset(*(MIL::Blob::FileWriter **)(a1 + 24));
  if ((NextAlignedOffset & 0x3F) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: dataOffset is expected to be 64 bits aligned.");
    goto LABEL_7;
  }
  v3 = NextAlignedOffset;
  v4 = NextAlignedOffset + 64;
  if (NextAlignedOffset != MIL::Blob::FileWriter::AppendData(*(_QWORD **)(a1 + 24))
    || v4 != MIL::Blob::FileWriter::AppendData(*(_QWORD **)(a1 + 24)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: Metadata written to different offset than expected.");
LABEL_7:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v6 = *(_DWORD *)(a1 + 32);
  v5 = (_DWORD *)(a1 + 32);
  *v5 = v6 + 1;
  MIL::Blob::FileWriter::WriteData(*((_QWORD **)v5 - 1), (uint64_t)v5, 64, 0);
  return v3;
}

void sub_1E05EA038(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Blob::StorageWriter::GetFilePath(MIL::Blob::StorageWriter *this@<X0>, std::string *a2@<X8>)
{
  __int128 *v2;
  __int128 v3;

  v2 = *(__int128 **)this;
  if (*(char *)(*(_QWORD *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *v2;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v2 + 2);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

MIL::Blob::FileWriter **std::unique_ptr<MIL::Blob::StorageWriter::Impl>::reset[abi:ne180100](MIL::Blob::FileWriter ***a1, MIL::Blob::FileWriter **a2)
{
  MIL::Blob::FileWriter **result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    MIL::Blob::StorageWriter::Impl::~Impl(result);
    JUMPOUT(0x1E0C023A0);
  }
  return result;
}

void MIL::Blob::StorageWriter::Impl::~Impl(MIL::Blob::FileWriter **this)
{
  std::unique_ptr<MIL::Blob::FileWriter>::reset[abi:ne180100](this + 3, 0);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

MIL::Blob::FileWriter *std::unique_ptr<MIL::Blob::FileWriter>::reset[abi:ne180100](MIL::Blob::FileWriter **a1, MIL::Blob::FileWriter *a2)
{
  MIL::Blob::FileWriter *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    MIL::Blob::FileWriter::~FileWriter(result);
    JUMPOUT(0x1E0C023A0);
  }
  return result;
}

std::string *MIL::Blob::StorageWriter::Impl::Impl(std::string *this, __int128 *a2, uint64_t a3)
{
  __int128 v6;
  MIL::Blob::FileWriter *v7;
  std::string *v8;
  unint64_t FileSize;
  std::runtime_error *exception;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v6;
  }
  v7 = (MIL::Blob::FileWriter *)operator new();
  MIL::Blob::FileWriter::FileWriter(v7, a2, a3);
  v8 = this + 1;
  this[1].__r_.__value_.__l.__size_ = 0x200000000;
  this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = 0u;
  this[3].__r_.__value_.__r.__words[2] = 0;
  if ((_DWORD)a3)
  {
    MIL::Blob::FileWriter::WriteData(v7, (uint64_t)&this[1].__r_.__value_.__l.__size_, 64, 0);
  }
  else
  {
    FileSize = MIL::Blob::FileWriter::GetFileSize(v7);
    if (FileSize)
    {
      if (FileSize < 0x40
        || (MIL::Blob::FileWriter::ReadData(v8->__r_.__value_.__l.__data_),
            HIDWORD(this[1].__r_.__value_.__r.__words[1]) != 2))
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: Incorrect file header, please use truncateFile=true");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
    }
    else
    {
      MIL::Blob::FileWriter::WriteData(v8->__r_.__value_.__l.__data_, (uint64_t)&this[1].__r_.__value_.__l.__size_, 64, 0);
    }
  }
  return this;
}

void sub_1E05EA29C(_Unwind_Exception *a1)
{
  uint64_t v1;
  MIL::Blob::FileWriter **v2;
  void *v3;

  __cxa_free_exception(v3);
  std::unique_ptr<MIL::Blob::FileWriter>::reset[abi:ne180100](v2, 0);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

void MIL::Builder::BlockBuilder::~BlockBuilder(MIL::Builder::BlockBuilder::BlockBuilderImpl **this)
{
  *this = (MIL::Builder::BlockBuilder::BlockBuilderImpl *)&off_1EA99A6D0;
  std::unique_ptr<MIL::Builder::BlockBuilder::BlockBuilderImpl>::reset[abi:ne180100](this + 1, 0);
}

{
  *this = (MIL::Builder::BlockBuilder::BlockBuilderImpl *)&off_1EA99A6D0;
  std::unique_ptr<MIL::Builder::BlockBuilder::BlockBuilderImpl>::reset[abi:ne180100](this + 1, 0);
}

{
  *this = (MIL::Builder::BlockBuilder::BlockBuilderImpl *)&off_1EA99A6D0;
  std::unique_ptr<MIL::Builder::BlockBuilder::BlockBuilderImpl>::reset[abi:ne180100](this + 1, 0);
  JUMPOUT(0x1E0C023A0);
}

_QWORD *MIL::Builder::BlockBuilder::BlockBuilder(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  v6 = a4;
  *a1 = &off_1EA99A6D0;
  std::make_unique[abi:ne180100]<MIL::Builder::BlockBuilder::BlockBuilderImpl,std::shared_ptr<MIL::MILContext> &,std::string &,MIL::IRScope const*&>(a2, a3, &v6, a1 + 1);
  return a1;
}

{
  uint64_t v6;

  v6 = a4;
  *a1 = &off_1EA99A6D0;
  std::make_unique[abi:ne180100]<MIL::Builder::BlockBuilder::BlockBuilderImpl,std::shared_ptr<MIL::MILContext> &,std::string &,MIL::IRScope const*&>(a2, a3, &v6, a1 + 1);
  return a1;
}

void std::make_unique[abi:ne180100]<MIL::Builder::BlockBuilder::BlockBuilderImpl,std::shared_ptr<MIL::MILContext> &,std::string &,MIL::IRScope const*&>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::string __p;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v8 = (_QWORD *)operator new();
  v9 = (std::__shared_weak_count *)a1[1];
  v16 = *a1;
  v17 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  MIL::Builder::BlockBuilder::BlockBuilderImpl::BlockBuilderImpl(v8, &v16, (__int128 *)&__p, *a3);
  *a4 = v8;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v12 = v17;
  if (v17)
  {
    v13 = (unint64_t *)&v17->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1E05EA508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  MEMORY[0x1E0C023A0](v16, 0x10F2C406B460F26);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::BlockBuilder::BlockBuilder(uint64_t a1, uint64_t *a2, MIL::IRObject *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;

  v7 = a1;
  v8 = a5;
  *(_QWORD *)a1 = &off_1EA99A6D0;
  std::make_unique[abi:ne180100]<MIL::Builder::BlockBuilder::BlockBuilderImpl,std::shared_ptr<MIL::MILContext> &,MIL::IRBlock &,std::string &,MIL::IRScope const*&,MIL::Builder::BlockBuilder*>(a2, a3, a4, &v8, &v7, (uint64_t **)(a1 + 8));
  return a1;
}

{
  uint64_t v7;
  uint64_t v8;

  v7 = a1;
  v8 = a5;
  *(_QWORD *)a1 = &off_1EA99A6D0;
  std::make_unique[abi:ne180100]<MIL::Builder::BlockBuilder::BlockBuilderImpl,std::shared_ptr<MIL::MILContext> &,MIL::IRBlock &,std::string &,MIL::IRScope const*&,MIL::Builder::BlockBuilder*>(a2, a3, a4, &v8, &v7, (uint64_t **)(a1 + 8));
  return a1;
}

void std::make_unique[abi:ne180100]<MIL::Builder::BlockBuilder::BlockBuilderImpl,std::shared_ptr<MIL::MILContext> &,MIL::IRBlock &,std::string &,MIL::IRScope const*&,MIL::Builder::BlockBuilder*>(uint64_t *a1@<X0>, MIL::IRObject *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t **a6@<X8>)
{
  uint64_t *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::string __p;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v12 = (uint64_t *)operator new();
  v13 = a1[1];
  v20 = *a1;
  v21 = (std::__shared_weak_count *)v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  MIL::Builder::BlockBuilder::BlockBuilderImpl::BlockBuilderImpl(v12, &v20, a2, (__int128 *)&__p, *a4, *a5);
  *a6 = v12;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v16 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_1E05EA710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  MEMORY[0x1E0C023A0](v16, 0x10F2C406B460F26);
  _Unwind_Resume(a1);
}

unsigned __int8 *MIL::Builder::BlockBuilder::GetOperation@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  return MIL::Builder::BlockBuilder::BlockBuilderImpl::GetOperation(*(_QWORD *)(a1 + 8), a2, a3);
}

unsigned __int8 *MIL::Builder::BlockBuilder::BlockBuilderImpl::GetOperation@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((_QWORD *)(a1 + 72), a2);
  if (!result)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v5 = *((_QWORD *)result + 6);
  *a3 = *((_QWORD *)result + 5);
  a3[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

unsigned __int8 *MIL::Builder::BlockBuilder::TryGetOperation@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((_QWORD *)(*(_QWORD *)(a1 + 8) + 72), a2);
  if (result)
  {
    v5 = *((_QWORD *)result + 6);
    *a3 = *((_QWORD *)result + 5);
    a3[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

unsigned __int8 *MIL::Builder::BlockBuilder::GetVariable(std::string::size_type a1, uint64_t a2)
{
  return MIL::Builder::BlockBuilder::BlockBuilderImpl::GetVariable(*(_QWORD *)(a1 + 8), a2, a1);
}

unsigned __int8 *MIL::Builder::BlockBuilder::BlockBuilderImpl::GetVariable(uint64_t a1, uint64_t a2, std::string::size_type a3)
{
  unsigned __int8 *result;
  std::runtime_error *exception;
  std::string *v5;
  __int128 v6;
  std::string v7;
  std::string v8;

  result = MIL::Builder::BlockBuilder::BlockBuilderImpl::TryGetVariable(a1, a2, a3);
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v5 = std::string::append(&v7, ".");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v8.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v8.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v8);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1E05EA914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

unsigned __int8 *MIL::Builder::BlockBuilder::TryGetVariable(std::string::size_type a1, uint64_t a2)
{
  return MIL::Builder::BlockBuilder::BlockBuilderImpl::TryGetVariable(*(_QWORD *)(a1 + 8), a2, a1);
}

unsigned __int8 *MIL::Builder::BlockBuilder::BlockBuilderImpl::TryGetVariable(uint64_t a1, uint64_t a2, std::string::size_type a3)
{
  unsigned __int8 *v6;
  char v7;
  unsigned __int8 *result;
  __int128 *v9;
  uint64_t v10;
  __int128 *v11;
  std::string __p;
  __int128 *v13;

  if ((*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), a2, 1))
  {
    goto LABEL_2;
  }
  result = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((_QWORD *)(a1 + 112), (unsigned __int8 *)a2);
  if (!result)
    return result;
  v13 = (__int128 *)a2;
  if (!*((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 112, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, &v13)+ 8))return 0;
LABEL_2:
  v13 = 0;
  v6 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>>>::__emplace_unique_key_args<std::string,std::string const&,decltype(nullptr)>(a1 + 296, (unsigned __int8 *)a2, a2);
  if (v7)
  {
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      __p = *(std::string *)a2;
    MIL::Builder::Variable::Make((uint64_t)&__p, a3, &v13);
    v9 = v13;
    v13 = 0;
    v10 = *((_QWORD *)v6 + 5);
    *((_QWORD *)v6 + 5) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      v11 = v13;
      v13 = 0;
      if (v11)
        (*(void (**)(__int128 *))(*(_QWORD *)v11 + 8))(v11);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return (unsigned __int8 *)*((_QWORD *)v6 + 5);
}

void sub_1E05EAAB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MIL::Builder::BlockBuilder::AddOperation(MIL::Builder::BlockBuilder *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v5 = (uint64_t *)*((_QWORD *)a1 + 1);
  v6 = a3[1];
  v12 = *a3;
  v13 = (std::__shared_weak_count *)v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  MIL::Builder::BlockBuilder::BlockBuilderImpl::AddOperation(v5, a2, &v12, a1, a4);
  v9 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1E05EAB5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Builder::BlockBuilder::BlockBuilderImpl::AddOperation(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X2>, MIL::Builder::BlockBuilder *a4@<X3>, uint64_t *a5@<X8>)
{
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  MIL::Builder::OperationBuilder::OperationBuilderImpl **v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;

  MIL::Builder::BlockBuilder::BlockBuilderImpl::GetOperator(a1, a2, &v35);
  v33 = v35;
  v34 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::Make(&v33, a5);
  v11 = v34;
  if (v34)
  {
    v12 = (unint64_t *)&v34->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = a5[1];
  v31 = (MIL::Builder::OperationBuilder::OperationBuilderImpl **)*a5;
  v32 = (std::__shared_weak_count *)v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = a3[1];
  v29 = *a3;
  v30 = (std::__shared_weak_count *)v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  MIL::Builder::BlockBuilder::BlockBuilderImpl::AddOperation((char **)a1, &v31, &v29, a4);
  v20 = v30;
  if (v30)
  {
    v21 = (unint64_t *)&v30->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v32;
  if (v32)
  {
    v24 = (unint64_t *)&v32->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = v36;
  if (v36)
  {
    v27 = (unint64_t *)&v36->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_1E05EAD18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v15;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v15);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void MIL::Builder::BlockBuilder::AddOperation(MIL::Builder::BlockBuilder *a1, __int128 *a2, uint64_t *a3)
{
  char **v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;

  v4 = (char **)*((_QWORD *)a1 + 1);
  v16 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v5 = a3[1];
  v14 = *a3;
  v15 = (std::__shared_weak_count *)v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  MIL::Builder::BlockBuilder::BlockBuilderImpl::AddOperation(v4, (MIL::Builder::OperationBuilder::OperationBuilderImpl ***)&v16, &v14, a1);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1E05EAE24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::BlockBuilder::BlockBuilderImpl::AddOperation(char **a1, MIL::Builder::OperationBuilder::OperationBuilderImpl ***a2, uint64_t *a3, MIL::Builder::BlockBuilder *a4)
{
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v16;
  std::__shared_weak_count *v17;

  MIL::Builder::BlockBuilder::BlockBuilderImpl::CheckAddedOperation((MIL::Builder::BlockBuilder::BlockBuilderImpl *)a1, *a2);
  if (*a3)
  {
    v8 = (std::__shared_weak_count *)a3[1];
    v16 = *a3;
    v17 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    v11 = MIL::Builder::BlockBuilder::BlockBuilderImpl::OperationIterator((uint64_t)a1, &v16);
    v12 = v17;
    if (v17)
    {
      v13 = (unint64_t *)&v17->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::insert(a1 + 6, (uint64_t)v11, (uint64_t *)a2);
  }
  else
  {
    std::vector<std::shared_ptr<MIL::IROperation>>::push_back[abi:ne180100](a1 + 6, (__int128 *)a2);
  }
  return MIL::Builder::BlockBuilder::BlockBuilderImpl::OnOperationAdded((uint64_t *)a1, (uint64_t)a2, a4);
}

void sub_1E05EAF28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::BlockBuilder::InsertOperations(uint64_t **a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return MIL::Builder::BlockBuilder::BlockBuilderImpl::InsertOperations(a1[1], a2, a3, a4, (MIL::Builder::BlockBuilder *)a1);
}

uint64_t MIL::Builder::BlockBuilder::BlockBuilderImpl::InsertOperations(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, MIL::Builder::BlockBuilder *a5)
{
  uint64_t *v5;
  uint64_t *v9;
  uint64_t result;
  uint64_t v12;
  std::logic_error *exception;

  v5 = a1 + 6;
  if (a4 > (a1[7] - a1[6]) >> 4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::out_of_range::out_of_range[abi:ne180100](exception, "Insertion position out of range");
    __cxa_throw(exception, (struct type_info *)off_1EA992588, MEMORY[0x1E0DE42E0]);
  }
  v9 = (uint64_t *)a2;
  MIL::Builder::BlockBuilder::BlockBuilderImpl::CheckInsertedOperations((unint64_t)a1, a2, a3);
  result = (uint64_t)std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::__insert_with_size[abi:ne180100]<std::shared_ptr<MIL::Builder::OperationBuilder> const*,std::shared_ptr<MIL::Builder::OperationBuilder> const*>(v5, a1[6] + 16 * a4, v9, &v9[2 * a3], (16 * a3) >> 4);
  if (a3)
  {
    v12 = 16 * a3;
    do
    {
      result = MIL::Builder::BlockBuilder::BlockBuilderImpl::OnOperationAdded(a1, (uint64_t)v9, a5);
      v9 += 2;
      v12 -= 16;
    }
    while (v12);
  }
  return result;
}

void sub_1E05EB00C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Builder::BlockBuilder::InsertOperations(uint64_t **a1, uint64_t a2, unint64_t a3, unint64_t *a4, uint64_t a5)
{
  MIL::Builder::BlockBuilder::BlockBuilderImpl::InsertOperations(a1[1], a2, a3, a4, a5, (MIL::Builder::BlockBuilder *)a1);
}

void MIL::Builder::BlockBuilder::BlockBuilderImpl::InsertOperations(uint64_t *a1, uint64_t a2, unint64_t a3, unint64_t *a4, uint64_t a5, MIL::Builder::BlockBuilder *a6)
{
  uint64_t v9;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t *v17;
  _QWORD *v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::logic_error *exception;
  struct type_info *v25;
  void (*v26)(void *);
  unint64_t v27;
  MIL::Builder::BlockBuilder *v28;

  if (a3 != a5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Operation and position spans must be of same size");
LABEL_18:
    v25 = (struct type_info *)off_1EA992598;
    v26 = (void (*)(void *))MEMORY[0x1E0DE4360];
    goto LABEL_19;
  }
  v9 = a2;
  if (a3 >= 2)
  {
    v11 = a4 + 1;
    v12 = *a4;
    v13 = a3 - 1;
    while (1)
    {
      v15 = *v11++;
      v14 = v15;
      if (v15 < v12)
        break;
      v12 = v14;
      if (!--v13)
        goto LABEL_6;
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Insertion positions are not sorted");
    goto LABEL_18;
  }
LABEL_6:
  if (a3 && a4[a3 - 1] > (a1[7] - a1[6]) >> 4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::out_of_range::out_of_range[abi:ne180100](exception, "Insertion position out of range");
    v25 = (struct type_info *)off_1EA992588;
    v26 = (void (*)(void *))MEMORY[0x1E0DE42E0];
LABEL_19:
    __cxa_throw(exception, v25, v26);
  }
  MIL::Builder::BlockBuilder::BlockBuilderImpl::CheckInsertedOperations((unint64_t)a1, a2, a3);
  std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::resize((uint64_t)(a1 + 6), a3 + ((a1[7] - a1[6]) >> 4));
  if (a3)
  {
    v27 = a3;
    v28 = a6;
    v16 = (uint64_t *)(v9 + 16 * a3);
    v17 = &a4[a3];
    v18 = (_QWORD *)a1[7];
    v19 = (__int128 *)&v18[-2 * a3];
    do
    {
      v20 = *--v17;
      v21 = a1[6] + 16 * v20;
      if (v19 != (__int128 *)v21)
      {
        v22 = (uint64_t)(v18 - 2);
        do
        {
          std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](v22, --v19);
          v18 -= 2;
          v22 -= 16;
        }
        while (v19 != (__int128 *)v21);
      }
      v16 -= 2;
      v18 -= 2;
      std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](v18, v16);
      v19 = (__int128 *)v21;
    }
    while (v17 != a4);
    v23 = 16 * v27;
    do
    {
      MIL::Builder::BlockBuilder::BlockBuilderImpl::OnOperationAdded(a1, v9, v28);
      v9 += 16;
      v23 -= 16;
    }
    while (v23);
  }
}

void sub_1E05EB204(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *MIL::Builder::BlockBuilder::AddConst(MIL::Builder::BlockBuilder *a1, __int128 *a2, uint64_t a3)
{
  __int128 v3;
  unsigned __int8 *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;
  __int128 v14;
  void *__p[2];
  uint64_t v16;

  v3 = *a2;
  v16 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v14 = *(_OWORD *)a3;
  *(_OWORD *)__p = v3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v12 = 0;
  v13 = 0;
  v4 = MIL::Builder::BlockBuilder::AddConst(a1, (uint64_t)__p, &v14, (uint64_t)&v12);
  v5 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (SHIBYTE(v16) < 0)
    operator delete(__p[0]);
  return v4;
}

void sub_1E05EB2FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

unsigned __int8 *MIL::Builder::BlockBuilder::AddConst(MIL::Builder::BlockBuilder *a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  uint64_t *v5;
  __int128 v6;
  unsigned __int8 *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v15;
  __int128 v16;

  v5 = (uint64_t *)*((_QWORD *)a1 + 1);
  v6 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v15 = *(_OWORD *)a4;
  v16 = v6;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v7 = MIL::Builder::BlockBuilder::BlockBuilderImpl::AddConst(v5, a2, &v16, &v15, a1);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v7;
}

void sub_1E05EB3E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

unsigned __int8 *MIL::Builder::BlockBuilder::BlockBuilderImpl::AddConst(uint64_t *a1, uint64_t a2, _QWORD *a3, __int128 *a4, MIL::Builder::BlockBuilder *a5)
{
  _QWORD *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  MIL::IRNamedValueType *v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  void **v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _anonymous_namespace_::IROperationImpl *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  _anonymous_namespace_::IROperationImpl *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unsigned __int8 *Variable;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  _anonymous_namespace_::IROperationImpl *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  __int128 v58;
  MIL::Builder::OperationBuilder::OperationBuilderImpl **v59;
  std::__shared_weak_count *v60;
  _anonymous_namespace_::IROperationImpl *v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  void *v65[3];
  void *__p[2];
  __int128 v67;
  int v68;
  std::string v69;
  MIL::IRNamedValueType *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD **v74;
  _QWORD *v75[2];
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  _anonymous_namespace_::IROperationImpl *v79;
  __int128 v80;
  void **v81;
  _QWORD v82[3];

  v82[2] = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(__p, "const");
  MIL::Builder::BlockBuilder::BlockBuilderImpl::GetOperator(a1, (unsigned __int8 *)__p, &v80);
  if (SBYTE7(v67) < 0)
    operator delete(__p[0]);
  MIL::UnknownLocation::Make(&v77);
  *(_QWORD *)&v78 = v77;
  if (v77)
  {
    v10 = (_QWORD *)operator new();
    v11 = v77;
    *v10 = &unk_1EA9940C8;
    v10[1] = 0;
    v10[2] = 0;
    v10[3] = v11;
  }
  else
  {
    v10 = 0;
  }
  *((_QWORD *)&v78 + 1) = v10;
  v76 = v80;
  v77 = 0;
  if (*((_QWORD *)&v80 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v75[0] = 0;
  v75[1] = 0;
  v74 = v75;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v69, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v69 = *(std::string *)a2;
  v14 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 32))(*a3);
  MIL::IRNamedValueType::Make((uint64_t *)&v69, v14, (uint64_t *)&v70);
  v82[0] = v70;
  if (v70)
  {
    v15 = (_QWORD *)operator new();
    v16 = v70;
    *v15 = &unk_1EA993900;
    v15[1] = 0;
    v15[2] = 0;
    v15[3] = v16;
  }
  else
  {
    v15 = 0;
  }
  v82[1] = v15;
  v70 = 0;
  v71 = 0;
  v72 = 0;
  v73 = 0;
  __p[0] = &v71;
  LOBYTE(__p[1]) = 0;
  v17 = operator new(0x10uLL);
  v71 = v17;
  v73 = v17 + 2;
  *v17 = v82[0];
  v17[1] = v15;
  if (v15)
  {
    v18 = v15 + 1;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v72 = v17 + 2;
  *(_OWORD *)__p = 0u;
  v67 = 0u;
  v68 = 1065353216;
  memset(v65, 0, sizeof(v65));
  MIL::IROperation::Make(&v78, &v76, &v74, (uint64_t)&v71, (uint64_t *)__p, (uint64_t)v65, &v79);
  v81 = v65;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v81);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)__p);
  __p[0] = &v71;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v82);
  v20 = (void **)v70;
  v70 = 0;
  if (v20)
  {
    MIL::IRNamedValueType::~IRNamedValueType(v20);
    MEMORY[0x1E0C023A0]();
  }
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v69.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy((uint64_t)&v74, v75[0]);
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
  if (*((_QWORD *)&v76 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v78 + 1);
  if (*((_QWORD *)&v78 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v78 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v77;
  v77 = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v29 = v79;
  v28 = v80;
  v30 = (std::__shared_weak_count *)a3[1];
  v63 = *a3;
  v64 = v30;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldxr(p_shared_owners);
    while (__stxr(v32 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, _anonymous_namespace_::IROperationImpl *, uint64_t *))(*(_QWORD *)v28 + 160))(v28, v29, &v63);
  v33 = v64;
  if (v64)
  {
    v34 = (unint64_t *)&v64->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v61 = v79;
  if (v79)
  {
    v36 = (std::__shared_weak_count *)operator new();
    v37 = v79;
    v36->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992FA8;
    v36->__shared_owners_ = 0;
    v36->__shared_weak_owners_ = 0;
    v36[1].__vftable = (std::__shared_weak_count_vtbl *)v37;
  }
  else
  {
    v36 = 0;
  }
  v62 = v36;
  v79 = 0;
  MIL::Builder::OperationBuilder::Make(&v61, (uint64_t *)__p);
  v38 = v62;
  if (v62)
  {
    v39 = (unint64_t *)&v62->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v59 = (MIL::Builder::OperationBuilder::OperationBuilderImpl **)__p[0];
  v60 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v41 = (unint64_t *)((char *)__p[1] + 8);
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  v58 = *a4;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  MIL::Builder::BlockBuilder::BlockBuilderImpl::AddOperation((char **)a1, &v59, (uint64_t *)&v58, a5);
  v43 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
  if (*((_QWORD *)&v58 + 1))
  {
    v44 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = v60;
  if (v60)
  {
    v47 = (unint64_t *)&v60->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  Variable = MIL::Builder::BlockBuilder::BlockBuilderImpl::GetVariable((uint64_t)a1, a2, (std::string::size_type)a5);
  v50 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v51 = (unint64_t *)((char *)__p[1] + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = v79;
  v79 = 0;
  if (v53)
    (*(void (**)(_anonymous_namespace_::IROperationImpl *))(*(_QWORD *)v53 + 8))(v53);
  v54 = (std::__shared_weak_count *)*((_QWORD *)&v80 + 1);
  if (*((_QWORD *)&v80 + 1))
  {
    v55 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  return Variable;
}

void sub_1E05EB98C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  uint64_t v36;
  uint64_t v38;

  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy(v36 - 184, *(_QWORD **)(v36 - 176));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v36 - 160);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v36 - 136);
  v38 = *(_QWORD *)(v36 - 144);
  *(_QWORD *)(v36 - 144) = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v36 - 112);
  _Unwind_Resume(a1);
}

char *MIL::Builder::BlockBuilder::GetOperations@<X0>(MIL::Builder::BlockBuilder *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  return std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::__init_with_size[abi:ne180100]<std::shared_ptr<MIL::Builder::OperationBuilder>*,std::shared_ptr<MIL::Builder::OperationBuilder>*>((char *)a2, *(_QWORD **)(v2 + 48), *(_QWORD **)(v2 + 56), (uint64_t)(*(_QWORD *)(v2 + 56) - *(_QWORD *)(v2 + 48)) >> 4);
}

uint64_t MIL::Builder::BlockBuilder::GetNumOperations(MIL::Builder::BlockBuilder *this)
{
  return (uint64_t)(*(_QWORD *)(*((_QWORD *)this + 1) + 56) - *(_QWORD *)(*((_QWORD *)this + 1) + 48)) >> 4;
}

uint64_t MIL::Builder::BlockBuilder::GetOperation@<X0>(MIL::Builder::BlockBuilder::BlockBuilderImpl **this@<X0>, unint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return MIL::Builder::BlockBuilder::BlockBuilderImpl::GetOperation(this[1], a2, a3);
}

uint64_t MIL::Builder::BlockBuilder::BlockBuilderImpl::GetOperation@<X0>(MIL::Builder::BlockBuilder::BlockBuilderImpl *this@<X0>, unint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  unint64_t *v7;
  unint64_t v8;

  v4 = *((_QWORD *)this + 6);
  v5 = *((_QWORD *)this + 7);
  result = (uint64_t)this + 48;
  if (a2 >= (v5 - v4) >> 4)
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  v6 = *(_OWORD *)(v4 + 16 * a2);
  *a3 = v6;
  if (*((_QWORD *)&v6 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void MIL::Builder::BlockBuilder::Make(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::string __p;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;

  v6 = (_QWORD *)operator new();
  v7 = a1[1];
  v14 = *a1;
  v15 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v16 = 0;
  *v6 = &off_1EA99A6D0;
  std::make_unique[abi:ne180100]<MIL::Builder::BlockBuilder::BlockBuilderImpl,std::shared_ptr<MIL::MILContext> &,std::string &,MIL::IRScope const*&>(&v14, (uint64_t)&__p, &v16, v6 + 1);
  *a3 = v6;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v10 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1E05EBC50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  MEMORY[0x1E0C023A0](v15, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void MIL::Builder::BlockBuilder::Make(uint64_t *a1@<X0>, MIL::IRObject *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *__p[2];
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  uint64_t v21;

  v8 = operator new();
  v9 = v8;
  v10 = a1[1];
  v18 = *a1;
  v19 = (std::__shared_weak_count *)v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *(_OWORD *)__p = *(_OWORD *)a3;
  v17 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  v20 = v8;
  v21 = 0;
  *(_QWORD *)v8 = &off_1EA99A6D0;
  std::make_unique[abi:ne180100]<MIL::Builder::BlockBuilder::BlockBuilderImpl,std::shared_ptr<MIL::MILContext> &,MIL::IRBlock &,std::string &,MIL::IRScope const*&,MIL::Builder::BlockBuilder*>(&v18, a2, (uint64_t)__p, &v21, &v20, (uint64_t **)(v8 + 8));
  *a4 = v9;
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
  v13 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1E05EBDA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  MEMORY[0x1E0C023A0](v16, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void MIL::Builder::BlockBuilder::Make(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  void *__p[2];
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  _QWORD *v22;
  uint64_t v23;

  v10 = (_QWORD *)operator new();
  v11 = v10;
  v12 = (std::__shared_weak_count *)a1[1];
  v20 = *a1;
  v21 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  *(_OWORD *)__p = *(_OWORD *)a3;
  v19 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  v22 = v10;
  v23 = a4;
  *v10 = &off_1EA99A6D0;
  std::make_unique[abi:ne180100]<MIL::Builder::BlockBuilder::BlockBuilderImpl,std::shared_ptr<MIL::MILContext> &,MIL::IRBlock &,std::string &,MIL::IRScope const*&,MIL::Builder::BlockBuilder*>(&v20, a2, __p, &v23, &v22);
  *a5 = v11;
  if (SHIBYTE(v19) < 0)
    operator delete(__p[0]);
  v15 = v21;
  if (v21)
  {
    v16 = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_1E05EBEEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  MEMORY[0x1E0C023A0](v16, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void MIL::Builder::BlockBuilder::Make(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *__p[2];
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;

  v8 = (_QWORD *)operator new();
  v9 = v8;
  v10 = a1[1];
  v18 = *a1;
  v19 = (std::__shared_weak_count *)v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *(_OWORD *)__p = *(_OWORD *)a2;
  v17 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v20 = a3;
  *v8 = &off_1EA99A6D0;
  std::make_unique[abi:ne180100]<MIL::Builder::BlockBuilder::BlockBuilderImpl,std::shared_ptr<MIL::MILContext> &,std::string &,MIL::IRScope const*&>(&v18, (uint64_t)__p, &v20, v8 + 1);
  *a4 = v9;
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
  v13 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1E05EC02C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  MEMORY[0x1E0C023A0](v15, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

unsigned __int8 *MIL::Builder::BlockBuilder::GetOperationsByInput(uint64_t a1, unsigned __int8 *a2)
{
  return MIL::Builder::BlockBuilder::BlockBuilderImpl::GetOperationsByInput(*(_QWORD *)(a1 + 8), a2);
}

unsigned __int8 *MIL::Builder::BlockBuilder::BlockBuilderImpl::GetOperationsByInput(uint64_t a1, unsigned __int8 *a2)
{
  _QWORD *v4;
  unsigned __int8 *v5;

  v4 = (_QWORD *)(a1 + 112);
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((_QWORD *)(a1 + 112), a2))return (unsigned __int8 *)(a1 + 256);
  v5 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v4, a2);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return v5 + 40;
}

uint64_t MIL::Builder::BlockBuilder::GetStateOperationsByInput@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return MIL::Builder::BlockBuilder::BlockBuilderImpl::GetStateOperationsByInput(*(MIL::Builder::BlockBuilder::BlockBuilderImpl **)(a1 + 8), a2, a3);
}

uint64_t MIL::Builder::BlockBuilder::BlockBuilderImpl::GetStateOperationsByInput@<X0>(MIL::Builder::BlockBuilder::BlockBuilderImpl *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 *v6;
  std::runtime_error *exception;
  std::string __p;
  char v10;
  _BYTE v11[40];
  _BYTE v12[47];
  __int128 *v13;

  MIL::Builder::BlockBuilder::BlockBuilderImpl::CreateStateDependencyMap(a1, (uint64_t)v12);
  if (!std::operator==[abi:ne180100]<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>>((uint64_t)v12, (_QWORD *)a1 + 48))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Program has been modified affecting the sequential ordering of state operations. Use UpdateStateDependencyMap() if the modification was intentional.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v10 = 1;
  MIL::Builder::BlockBuilder::BlockBuilderImpl::ExtractStateOpsHelper((uint64_t)a1, (unsigned __int8 *)&__p, (uint64_t)v11);
  v13 = (__int128 *)a2;
  v6 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v11, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, &v13);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::__init_with_size[abi:ne180100]<std::shared_ptr<MIL::Builder::OperationBuilder>*,std::shared_ptr<MIL::Builder::OperationBuilder>*>((char *)a3, *((_QWORD **)v6 + 5), *((_QWORD **)v6 + 6), (uint64_t)(*((_QWORD *)v6 + 6) - *((_QWORD *)v6 + 5)) >> 4);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)v11);
  if (v10 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>>::~__hash_table((uint64_t)v12);
}

void sub_1E05EC1FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>>::~__hash_table((uint64_t)&a24);
  _Unwind_Resume(a1);
}

unsigned __int8 *MIL::Builder::BlockBuilder::GetDataDependenciesForConsumerParam(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v5;

  v5 = MIL::Builder::BlockBuilder::BlockBuilderImpl::GetOrBuildDataDependencyGraph(*(MIL::Builder::BlockBuilder::BlockBuilderImpl **)(a1 + 8));
  return MIL::Builder::BlockBuilder::DataDependencyGraph::GetDataDependenciesForConsumerParam(v5, a2, a3);
}

_QWORD *MIL::Builder::BlockBuilder::GetDataDependenciesByVariableName(uint64_t a1, unsigned __int8 *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)MIL::Builder::BlockBuilder::BlockBuilderImpl::GetOrBuildDataDependencyGraph(*(MIL::Builder::BlockBuilder::BlockBuilderImpl **)(a1 + 8));
  return MIL::Builder::BlockBuilder::DataDependencyGraph::GetDataDependenciesByVariableName(v3, a2);
}

void MIL::Builder::BlockBuilder::ReplaceUsesOfInputVariable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p[2];
  uint64_t v14;

  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)__p = *(_OWORD *)a3;
  v14 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  v5 = (std::__shared_weak_count *)a4[1];
  v11 = *a4;
  v12 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  MIL::Builder::BlockBuilder::BlockBuilderImpl::ReplaceUsesOfInputVariable(v4, a2, __p, &v11);
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__p[0]);
}

void sub_1E05EC35C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void MIL::Builder::BlockBuilder::BlockBuilderImpl::ReplaceUsesOfInputVariable(_QWORD *a1, unsigned __int8 *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  unsigned __int8 *v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _BOOL4 v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  MIL::Builder::OperationBuilder **v26;
  MIL::Builder::OperationBuilder **v27;
  uint64_t BlocksRef;
  uint64_t *v29;
  uint64_t *v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37[2];
  std::string v38;
  std::string v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  _QWORD v44[2];
  _QWORD *v45;

  v8 = a1[47];
  a1[47] = 0;
  if (v8)
    std::default_delete<MIL::Builder::BlockBuilder::DataDependencyGraph>::operator()[abi:ne180100]((uint64_t)(a1 + 47), v8);
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a1 + 14, a2);
  if (v9)
  {
    std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>::unordered_set((uint64_t)v44, (uint64_t)(v9 + 40));
    v10 = v45;
    if (v45)
    {
      while (1)
      {
        v11 = *a4;
        if (!*a4)
          break;
        v12 = (std::__shared_weak_count *)v10[3];
        v42 = v10[2];
        v43 = v12;
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
          v11 = *a4;
        }
        v15 = (std::__shared_weak_count *)a4[1];
        v40 = v11;
        v41 = v15;
        if (v15)
        {
          v16 = (unint64_t *)&v15->__shared_owners_;
          do
            v17 = __ldxr(v16);
          while (__stxr(v17 + 1, v16));
        }
        v18 = MIL::Builder::BlockBuilder::BlockBuilderImpl::OperationFollowsOperation((uint64_t)a1, &v42, &v40);
        v19 = v41;
        if (v41)
        {
          v20 = (unint64_t *)&v41->__shared_owners_;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        v22 = v43;
        if (!v43)
          goto LABEL_22;
        v23 = (unint64_t *)&v43->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
          if (v18)
            break;
        }
        else
        {
LABEL_22:
          if (v18)
            break;
        }
LABEL_30:
        v10 = (_QWORD *)*v10;
        if (!v10)
          goto LABEL_31;
      }
      v25 = v10[2];
      if (*(char *)(a3 + 23) < 0)
        std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
      else
        v39 = *(std::string *)a3;
      MIL::Builder::OperationBuilder::RenameArgument(v25, (uint64_t)a2, (uint64_t)&v39);
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v39.__r_.__value_.__l.__data_);
      goto LABEL_30;
    }
LABEL_31:
    std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table((uint64_t)v44);
  }
  v26 = (MIL::Builder::OperationBuilder **)a1[6];
  v27 = (MIL::Builder::OperationBuilder **)a1[7];
LABEL_33:
  if (v26 != v27)
  {
    BlocksRef = MIL::Builder::OperationBuilder::GetBlocksRef(*v26);
    v29 = *(uint64_t **)BlocksRef;
    v30 = *(uint64_t **)(BlocksRef + 8);
    while (1)
    {
      if (v29 == v30)
      {
        v26 += 2;
        goto LABEL_33;
      }
      v32 = *v29;
      v31 = (std::__shared_weak_count *)v29[1];
      v44[0] = *v29;
      v44[1] = v31;
      if (v31)
      {
        v33 = (unint64_t *)&v31->__shared_owners_;
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
      }
      if (*(char *)(a3 + 23) < 0)
        std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
      else
        v38 = *(std::string *)a3;
      v37[0] = 0;
      v37[1] = 0;
      MIL::Builder::BlockBuilder::ReplaceUsesOfInputVariable(v32, (uint64_t)a2, (uint64_t)&v38, v37);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v38.__r_.__value_.__l.__data_);
        if (!v31)
          goto LABEL_50;
      }
      else if (!v31)
      {
        goto LABEL_50;
      }
      v35 = (unint64_t *)&v31->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
LABEL_50:
      v29 += 2;
    }
  }
}

void sub_1E05EC614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28)
{
  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void MIL::Builder::BlockBuilder::RemoveOperation(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  MIL::Builder::OperationBuilder::OperationBuilderImpl **v9;
  std::__shared_weak_count *v10;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 8);
  v9 = *(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)a2;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  MIL::Builder::BlockBuilder::BlockBuilderImpl::RemoveOperation(v2, &v9);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1E05EC70C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Builder::BlockBuilder::BlockBuilderImpl::RemoveOperation(uint64_t a1, MIL::Builder::OperationBuilder::OperationBuilderImpl ***a2)
{
  __int128 *v5;
  __int128 *v6;
  uint64_t v7;
  __int128 *v8;
  __int128 *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  MIL::Builder::OperationBuilder::OperationBuilderImpl **v16;
  std::__shared_weak_count *v17;

  if (*a2)
  {
    v5 = *(__int128 **)(a1 + 48);
    v6 = *(__int128 **)(a1 + 56);
    v7 = a1 + 48;
    v8 = v5;
    if (v5 != v6)
    {
      while (*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)v8 != *a2)
      {
        if (++v8 == v6)
        {
          v8 = v6;
          break;
        }
      }
    }
    v9 = std::remove[abi:ne180100]<std::__wrap_iter<std::shared_ptr<MIL::Builder::OperationBuilder> *>,std::shared_ptr<MIL::Builder::OperationBuilder>>(v5, v6, a2);
    std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::erase(v7, (uint64_t)v9, *(_QWORD *)(a1 + 56));
    if (v8 != v6)
    {
      v10 = (std::__shared_weak_count *)a2[1];
      v16 = *a2;
      v17 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      MIL::Builder::BlockBuilder::BlockBuilderImpl::OnOperationRemoved(a1, &v16, 0);
      v13 = v17;
      if (v17)
      {
        v14 = (unint64_t *)&v17->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
  }
}

void sub_1E05EC81C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Builder::BlockBuilder::RemoveOperations(uint64_t a1, unint64_t *a2, uint64_t a3, char a4)
{
  MIL::Builder::BlockBuilder::BlockBuilderImpl::RemoveOperations(*(_QWORD *)(a1 + 8), a2, a3, a4);
}

void MIL::Builder::BlockBuilder::BlockBuilderImpl::RemoveOperations(uint64_t a1, unint64_t *a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  uint64_t v27;
  std::logic_error *exception;
  struct type_info *v29;
  void (*v30)(void *);
  __int128 v31;

  if (!a3)
    goto LABEL_22;
  v8 = 0;
  v9 = 8 * a3;
  v10 = 1;
  v11 = a2;
  do
  {
    v12 = *v11;
    if (*v11 >= (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 4)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::out_of_range::out_of_range[abi:ne180100](exception, "Operation index out of range");
      v29 = (struct type_info *)off_1EA992588;
      v30 = (void (*)(void *))MEMORY[0x1E0DE42E0];
      goto LABEL_25;
    }
    if (!(v10 & 1 | (v12 > v8)))
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "Indices are not strictly increasing");
      v29 = (struct type_info *)off_1EA992598;
      v30 = (void (*)(void *))MEMORY[0x1E0DE4360];
LABEL_25:
      __cxa_throw(exception, v29, v30);
    }
    v10 = 0;
    ++v11;
    v8 = v12;
    v9 -= 8;
  }
  while (v9);
  v13 = 0;
  v14 = a3 - 1;
  do
  {
    if (v13 == v14)
    {
      v15 = *(_QWORD *)(a1 + 48);
      v16 = (*(_QWORD *)(a1 + 56) - v15) >> 4;
    }
    else
    {
      v16 = a2[v13 + 1];
      v15 = *(_QWORD *)(a1 + 48);
    }
    v17 = a2[v13];
    v18 = *(_OWORD *)(v15 + 16 * v17);
    v31 = v18;
    if (*((_QWORD *)&v18 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    MIL::Builder::BlockBuilder::BlockBuilderImpl::OnOperationRemoved(a1, (MIL::Builder::OperationBuilder::OperationBuilderImpl ***)&v31, a4);
    v21 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
    if (*((_QWORD *)&v31 + 1))
    {
      v22 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    if (v17 + 1 != v16)
    {
      v24 = *(_QWORD *)(a1 + 48);
      v25 = v24 + 16 * (v17 - v13);
      v26 = (__int128 *)(v24 + 16 * (v17 + 1));
      v27 = 16 * v16 - 16 * v17 - 16;
      do
      {
        std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](v25, v26++);
        v25 += 16;
        v27 -= 16;
      }
      while (v27);
    }
    ++v13;
  }
  while (v13 != a3);
LABEL_22:
  std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::resize(a1 + 48, ((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 4) - a3);
}

void sub_1E05ECA38(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *MIL::Builder::BlockBuilder::AddInput(std::string::size_type a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  void *__p[2];
  uint64_t v8;

  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v8 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v5 = MIL::Builder::BlockBuilder::BlockBuilderImpl::AddInput(v4, (uint64_t)__p, a3, a1);
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
  return v5;
}

void sub_1E05ECAC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *MIL::Builder::BlockBuilder::BlockBuilderImpl::AddInput(uint64_t a1, uint64_t a2, uint64_t a3, std::string::size_type a4)
{
  MIL::IRNamedValueType *v8;
  MIL::IRNamedValueType *v9;
  MIL::IRNamedValueType *v10;
  unint64_t v11;
  MIL::IRNamedValueType **v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  MIL::IRNamedValueType **v21;
  _QWORD *v22;
  _QWORD *v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  uint64_t v27;
  void **v28;
  uint64_t v29;
  uint64_t v30;
  std::string __p;
  MIL::IRNamedValueType *v33[3];
  uint64_t v34;
  int64x2_t v35;
  uint64_t v36;
  uint64_t v37;

  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 40) + 80))(*(_QWORD *)(a1 + 40), a2, a3, 0);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  MIL::IRNamedValueType::Make((uint64_t *)&__p, a3, (uint64_t *)v33);
  v8 = v33[0];
  v33[1] = v33[0];
  if (v33[0])
  {
    v9 = (MIL::IRNamedValueType *)operator new();
    v10 = v33[0];
    *(_QWORD *)v9 = &unk_1EA993900;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = 0;
    *((_QWORD *)v9 + 3) = v10;
  }
  else
  {
    v9 = 0;
  }
  v33[2] = v9;
  v33[0] = 0;
  v11 = *(_QWORD *)(a1 + 168);
  v12 = *(MIL::IRNamedValueType ***)(a1 + 160);
  if ((unint64_t)v12 >= v11)
  {
    v14 = *(_QWORD *)(a1 + 152);
    v15 = ((uint64_t)v12 - v14) >> 4;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v17 = v11 - v14;
    if (v17 >> 3 > v16)
      v16 = v17 >> 3;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
      v18 = 0xFFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    v37 = a1 + 168;
    v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>(a1 + 168, v18);
    v21 = (MIL::IRNamedValueType **)&v19[16 * v15];
    *v21 = v8;
    v21[1] = v9;
    v23 = *(_QWORD **)(a1 + 152);
    v22 = *(_QWORD **)(a1 + 160);
    if (v22 == v23)
    {
      v26 = vdupq_n_s64((unint64_t)v22);
      v24 = &v19[16 * v15];
    }
    else
    {
      v24 = &v19[16 * v15];
      do
      {
        v25 = *((_OWORD *)v22 - 1);
        v22 -= 2;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *v22 = 0;
        v22[1] = 0;
      }
      while (v22 != v23);
      v26 = *(int64x2_t *)(a1 + 152);
    }
    v13 = v21 + 2;
    *(_QWORD *)(a1 + 152) = v24;
    *(_QWORD *)(a1 + 160) = v21 + 2;
    v35 = v26;
    v27 = *(_QWORD *)(a1 + 168);
    *(_QWORD *)(a1 + 168) = &v19[16 * v20];
    v36 = v27;
    v34 = v26.i64[0];
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v34);
  }
  else
  {
    *v12 = v8;
    v12[1] = v9;
    v13 = v12 + 2;
  }
  *(_QWORD *)(a1 + 160) = v13;
  v28 = (void **)v33[0];
  v33[0] = 0;
  if (v28)
  {
    MIL::IRNamedValueType::~IRNamedValueType(v28);
    MEMORY[0x1E0C023A0](v29, 0x1072C40DD5FEC7CLL, v30);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return MIL::Builder::BlockBuilder::BlockBuilderImpl::GetVariable(a1, a2, a4);
}

void sub_1E05ECCDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void **a16, __int16 a17, char a18, char a19)
{
  std::unique_ptr<MIL::IRNamedValueType>::reset[abi:ne180100](&a16, 0);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void MIL::Builder::BlockBuilder::UpdateOpInput(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  void *__p[2];
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  void *v15[2];
  uint64_t v16;

  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)v15 = *(_OWORD *)a2;
  v16 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v5 = (std::__shared_weak_count *)a3[1];
  v13 = *a3;
  v14 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  *(_OWORD *)__p = *(_OWORD *)a4;
  v12 = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  MIL::Builder::BlockBuilder::BlockBuilderImpl::UpdateOpInput(v4, (__int128 *)v15, &v13, (uint64_t)__p);
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);
  v8 = v14;
  if (v14)
  {
    v9 = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
}

void sub_1E05ECDF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  MIL::Builder::BlockBuilder::UpdateOpInput((uint64_t)&a16, (uint64_t)&a18);
  _Unwind_Resume(a1);
}

_QWORD *MIL::Builder::BlockBuilder::BlockBuilderImpl::UpdateOpInput(uint64_t a1, __int128 *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  _QWORD *result;
  unsigned __int8 *v12;
  std::runtime_error *exception;
  __int128 *v14;

  if (!*a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot update input of a null OperationBuilder");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v8 = *(_QWORD *)(a1 + 376);
  *(_QWORD *)(a1 + 376) = 0;
  if (v8)
    std::default_delete<MIL::Builder::BlockBuilder::DataDependencyGraph>::operator()[abi:ne180100](a1 + 376, v8);
  v9 = a1 + 112;
  v14 = a2;
  v10 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v9, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, &v14);
  result = std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::shared_ptr<MIL::Builder::OperationBuilder> const&>((uint64_t)(v10 + 40), a3, a3);
  if ((*(char *)(a4 + 23) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a4 + 23))
      return result;
    goto LABEL_6;
  }
  if (*(_QWORD *)(a4 + 8))
  {
LABEL_6:
    v14 = (__int128 *)a4;
    v12 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v9, (unsigned __int8 *)a4, (uint64_t)&std::piecewise_construct, &v14);
    return (_QWORD *)std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__erase_unique<std::shared_ptr<MIL::Builder::OperationBuilder>>((_QWORD *)v12 + 5, a3);
  }
  return result;
}

void sub_1E05ECF20(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Builder::BlockBuilder::RemoveOpInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  void *__p[2];
  uint64_t v13;

  v3 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v13 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v4 = (std::__shared_weak_count *)a3[1];
  v10 = *a3;
  v11 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  MIL::Builder::BlockBuilder::BlockBuilderImpl::RemoveOpInput(v3, (unsigned __int8 *)__p, &v10);
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (SHIBYTE(v13) < 0)
    operator delete(__p[0]);
}

void sub_1E05ECFE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

unsigned __int8 *MIL::Builder::BlockBuilder::BlockBuilderImpl::RemoveOpInput(uint64_t a1, unsigned __int8 *a2, _QWORD *a3)
{
  uint64_t v6;
  _QWORD *v7;
  unsigned __int8 *result;
  unsigned __int8 *v9;
  std::runtime_error *exception;
  unsigned __int8 *v11;

  if (!*a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot update input of a null OperationBuilder");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v6 = *(_QWORD *)(a1 + 376);
  *(_QWORD *)(a1 + 376) = 0;
  if (v6)
    std::default_delete<MIL::Builder::BlockBuilder::DataDependencyGraph>::operator()[abi:ne180100](a1 + 376, v6);
  v7 = (_QWORD *)(a1 + 112);
  result = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v7, a2);
  if (result)
  {
    v11 = a2;
    v9 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v7, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v11);
    return (unsigned __int8 *)std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__erase_unique<std::shared_ptr<MIL::Builder::OperationBuilder>>((_QWORD *)v9 + 5, a3);
  }
  return result;
}

void sub_1E05ED0C8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Builder::BlockBuilder::UpdateOpOutput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p[2];
  uint64_t v14;

  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v14 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v5 = a4[1];
  v11 = *a4;
  v12 = (std::__shared_weak_count *)v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  MIL::Builder::BlockBuilder::BlockBuilderImpl::UpdateOpOutput(v4, (unsigned __int8 *)__p, a3, &v11);
  v8 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__p[0]);
}

void sub_1E05ED18C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::BlockBuilder::BlockBuilderImpl::UpdateOpOutput(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  std::runtime_error *exception;
  std::runtime_error *v13;
  std::string *v14;
  __int128 v15;
  std::string v16;
  std::string v17;

  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot update output of a null OperationBuilder");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v8 = a1 + 72;
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((_QWORD *)(a1 + 72), a2))
  {
    v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v14 = std::string::append(&v16, " is already defined in this block.");
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v13, &v17);
    __cxa_throw(v13, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v9 = *(_QWORD *)(a1 + 376);
  *(_QWORD *)(a1 + 376) = 0;
  if (v9)
    std::default_delete<MIL::Builder::BlockBuilder::DataDependencyGraph>::operator()[abi:ne180100](a1 + 376, v9);
  v17.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v17);
  std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]((_QWORD *)v10 + 5, a4);
  return (*(uint64_t (**)(_QWORD, unsigned __int8 *, uint64_t, _QWORD))(**(_QWORD **)(a1 + 40) + 80))(*(_QWORD *)(a1 + 40), a2, a3, 0);
}

void sub_1E05ED30C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void MIL::Builder::BlockBuilder::RenameOpOutput(uint64_t a1, uint64_t a2, std::string::size_type a3, uint64_t *a4)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v4 = *(_QWORD **)(a1 + 8);
  v5 = a4[1];
  v11 = *a4;
  v12 = (std::__shared_weak_count *)v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  MIL::Builder::BlockBuilder::BlockBuilderImpl::RenameOpOutput(v4, a2, a3, &v11);
  v8 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1E05ED3F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 *MIL::Builder::BlockBuilder::BlockBuilderImpl::RenameOpOutput(_QWORD *a1, uint64_t a2, std::string::size_type a3, uint64_t *a4)
{
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *size;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned __int8 *v29;
  uint64_t v30;
  std::runtime_error *exception;
  std::runtime_error *v33;
  std::string *v34;
  __int128 v35;
  std::runtime_error *v36;
  std::string *v37;
  __int128 v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  std::string v41;
  std::string v42;
  std::string v43;

  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot rename output of a null OperationBuilder");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v8 = a1 + 9;
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a1 + 9, (unsigned __int8 *)a2))
  {
    v33 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v34 = std::string::append(&v42, " doesn't exist in this block.");
    v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v33, &v43);
    __cxa_throw(v33, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v8, (unsigned __int8 *)a3))
  {
    v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v37 = std::string::append(&v42, " is already defined in this block.");
    v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v36, &v43);
    __cxa_throw(v36, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v9 = a1[47];
  a1[47] = 0;
  if (v9)
    std::default_delete<MIL::Builder::BlockBuilder::DataDependencyGraph>::operator()[abi:ne180100]((uint64_t)(a1 + 47), v9);
  v43.__r_.__value_.__r.__words[0] = a3;
  v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v8, (unsigned __int8 *)a3, (uint64_t)&std::piecewise_construct, (__int128 **)&v43);
  std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]((_QWORD *)v10 + 5, a4);
  v11 = a1[5];
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 24))(v11, a2, 1);
  (*(void (**)(uint64_t, std::string::size_type, uint64_t, _QWORD))(*(_QWORD *)v11 + 80))(v11, a3, v12, 0);
  v13 = a1[5];
  MIL::Builder::BlockBuilder::BlockBuilderImpl::GetValue((uint64_t)a1, (unsigned __int8 *)a2, &v43);
  (*(void (**)(uint64_t, std::string::size_type, std::string *, _QWORD))(*(_QWORD *)v13 + 88))(v13, a3, &v43, 0);
  size = (std::__shared_weak_count *)v43.__r_.__value_.__l.__size_;
  if (v43.__r_.__value_.__l.__size_)
  {
    v15 = (unint64_t *)(v43.__r_.__value_.__l.__size_ + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v41, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v41 = *(std::string *)a3;
  v39 = 0;
  v40 = 0;
  MIL::Builder::BlockBuilder::BlockBuilderImpl::ReplaceUsesOfInputVariable(a1, (unsigned __int8 *)a2, (uint64_t)&v41, &v39);
  v17 = v40;
  if (v40)
  {
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  v21 = a1[22];
  v20 = a1[23];
  if (v20 != v21)
  {
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = v21 + 24 * v23;
      v25 = *(unsigned __int8 *)(v24 + 23);
      if ((v25 & 0x80u) == 0)
        v26 = *(unsigned __int8 *)(v24 + 23);
      else
        v26 = *(_QWORD *)(v24 + 8);
      v27 = *(unsigned __int8 *)(a2 + 23);
      v28 = (char)v27;
      if ((v27 & 0x80u) != 0)
        v27 = *(_QWORD *)(a2 + 8);
      if (v26 != v27)
        goto LABEL_40;
      v29 = v28 >= 0 ? (unsigned __int8 *)a2 : *(unsigned __int8 **)a2;
      if ((v25 & 0x80) == 0)
        break;
      if (!memcmp(*(const void **)v24, v29, *(_QWORD *)(v24 + 8)))
        goto LABEL_39;
LABEL_40:
      ++v23;
      v22 += 24;
      if (v23 >= 0xAAAAAAAAAAAAAAABLL * ((v20 - v21) >> 3))
        goto LABEL_41;
    }
    if (*(_BYTE *)(v24 + 23))
    {
      v30 = v22;
      while (*(unsigned __int8 *)(v21 + v30) == *v29)
      {
        ++v29;
        ++v30;
        if (!--v25)
          goto LABEL_39;
      }
      goto LABEL_40;
    }
LABEL_39:
    std::string::operator=((std::string *)(v21 + 24 * v23), (const std::string *)a3);
    v21 = a1[22];
    v20 = a1[23];
    goto LABEL_40;
  }
LABEL_41:
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)a1[5] + 112))(a1[5], a2);
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v8, (unsigned __int8 *)a2);
}

void sub_1E05ED7F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  int v30;
  void *v31;

  if (a30 < 0)
    operator delete(__p);
  if (a24 < 0)
  {
    operator delete(a19);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v31);
  goto LABEL_8;
}

uint64_t MIL::Builder::BlockBuilder::GetType(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 40) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40), a2, 1);
}

void MIL::Builder::BlockBuilder::GetValue(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  MIL::Builder::BlockBuilder::BlockBuilderImpl::GetValue(*(_QWORD *)(a1 + 8), a2, a3);
}

void MIL::Builder::BlockBuilder::BlockBuilderImpl::GetValue(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v6;
  unsigned __int8 *v7;
  std::__shared_weak_count *v8;
  __int128 *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t Operator;
  unint64_t i;
  uint64_t OutputName;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  __int128 v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 v35;
  __int128 *v36[4];
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;

  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 40) + 56))(&v38);
  if (v38)
  {
    v6 = v39;
    *a3 = v38;
    a3[1] = v6;
    return;
  }
  v36[0] = (__int128 *)a2;
  v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 72, a2, (uint64_t)&std::piecewise_construct, v36);
  v9 = (__int128 *)*((_QWORD *)v7 + 5);
  v8 = (std::__shared_weak_count *)*((_QWORD *)v7 + 6);
  v36[3] = v9;
  v37 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  if (!v9
    || (Operator = MIL::Builder::OperationBuilder::GetOperator((MIL::Builder::OperationBuilder *)v9),
        !(*(unsigned int (**)(uint64_t))(*(_QWORD *)Operator + 104))(Operator)))
  {
LABEL_42:
    *a3 = 0;
    a3[1] = 0;
    if (!v8)
      goto LABEL_47;
    goto LABEL_43;
  }
  MIL::Builder::OperationBuilder::GetConstants((const void ****)v9);
  for (i = 0; ; ++i)
  {
    if (i >= MIL::Builder::OperationBuilder::GetNumOutputs((MIL::Builder::OperationBuilder *)v9))
    {
      *(_QWORD *)&v35 = v36;
      std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
      goto LABEL_42;
    }
    OutputName = MIL::Builder::OperationBuilder::GetOutputName((MIL::Builder::OperationBuilder::OperationBuilderImpl **)v9, i);
    v15 = a2[23];
    if ((v15 & 0x80u) == 0)
      v16 = a2[23];
    else
      v16 = *((_QWORD *)a2 + 1);
    v17 = *(unsigned __int8 *)(OutputName + 23);
    v18 = (char)v17;
    if ((v17 & 0x80u) != 0)
      v17 = *(_QWORD *)(OutputName + 8);
    if (v16 != v17)
      continue;
    v19 = v18 >= 0 ? (unsigned __int8 *)OutputName : *(unsigned __int8 **)OutputName;
    if ((v15 & 0x80) != 0)
      break;
    if (!a2[23])
      goto LABEL_28;
    v20 = a2;
    while (*v20 == *v19)
    {
      ++v20;
      ++v19;
      if (!--v15)
        goto LABEL_28;
    }
LABEL_27:
    ;
  }
  if (memcmp(*(const void **)a2, v19, *((_QWORD *)a2 + 1)))
    goto LABEL_27;
LABEL_28:
  v21 = v36[0][i];
  v35 = v21;
  if (*((_QWORD *)&v21 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  (*(void (**)(_QWORD, unsigned __int8 *, __int128 *, uint64_t))(**(_QWORD **)(a1 + 40) + 88))(*(_QWORD *)(a1 + 40), a2, &v35, 1);
  v24 = v36[0][i];
  *(_OWORD *)a3 = v24;
  if (*((_QWORD *)&v24 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v27 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
  if (*((_QWORD *)&v35 + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  *(_QWORD *)&v35 = v36;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  v8 = v37;
  if (v37)
  {
LABEL_43:
    v30 = (unint64_t *)&v8->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
LABEL_47:
  v32 = v39;
  if (v39)
  {
    v33 = (unint64_t *)&v39->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
}

void sub_1E05EDBB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  a9 = (void **)&a12;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a9);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t *MIL::Builder::BlockBuilder::CreateBlock@<X0>(_anonymous_namespace_::IRBlockImpl **__return_ptr a1@<X8>, __int128 ***this@<X0>)
{
  return (uint64_t *)MIL::Builder::BlockBuilder::BlockBuilderImpl::CreateBlock(this[1], a1);
}

uint64_t MIL::Builder::BlockBuilder::BlockBuilderImpl::CreateBlock@<X0>(__int128 **this@<X0>, _anonymous_namespace_::IRBlockImpl **a2@<X8>)
{
  __int128 *v4;
  __int128 *i;
  const void ****v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _anonymous_namespace_::IROperationImpl *v10;
  _QWORD *v11;
  _anonymous_namespace_::IROperationImpl *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  _anonymous_namespace_::IROperationImpl **v21;
  _QWORD *v22;
  _QWORD *v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  uint64_t v27;
  _anonymous_namespace_::IROperationImpl *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::runtime_error *exception;
  _anonymous_namespace_::IRBlockImpl **v39;
  __int128 v40;
  _anonymous_namespace_::IROperationImpl *v41;
  _anonymous_namespace_::IROperationImpl *v42;
  _QWORD *v43;
  const void ****v44;
  std::__shared_weak_count *v45;
  int64x2_t v46;
  _QWORD v47[2];
  uint64_t v48[5];
  std::string v49;
  _QWORD v50[3];
  _BYTE v51[40];
  std::string *v52;
  int64x2_t v53;
  uint64_t v54;
  _QWORD *v55;

  MIL::Builder::BlockBuilder::BlockBuilderImpl::CreateStateDependencyMap((MIL::Builder::BlockBuilder::BlockBuilderImpl *)this, (uint64_t)v51);
  if (!std::operator==[abi:ne180100]<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>>((uint64_t)v51, this + 48))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "State Operation dependencies are violated after program modification. Use UpdateStateDependencyMap() if the modification was intentional.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  memset(v50, 0, sizeof(v50));
  std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__init_with_size[abi:ne180100]<std::shared_ptr<MIL::IRNamedValueType>*,std::shared_ptr<MIL::IRNamedValueType>*>((char *)v50, this[19], this[20], this[20] - this[19]);
  memset(&v49, 0, sizeof(v49));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v49, this[22], this[23], 0xAAAAAAAAAAAAAAABLL * (((char *)this[23] - (char *)this[22]) >> 3));
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v48, (uint64_t)(this + 25));
  v39 = a2;
  v46 = 0uLL;
  v47[0] = 0;
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)&v46, this[7] - this[6]);
  v4 = this[6];
  for (i = this[7]; v4 != i; ++v4)
  {
    v6 = *(const void *****)v4;
    v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 1);
    v44 = *(const void *****)v4;
    v45 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    MIL::Builder::OperationBuilder::CreateOperation(v6, &v41);
    v10 = v41;
    v42 = v41;
    if (v41)
    {
      v11 = (_QWORD *)operator new();
      v12 = v41;
      *v11 = &unk_1EA992FA8;
      v11[1] = 0;
      v11[2] = 0;
      v11[3] = v12;
    }
    else
    {
      v11 = 0;
    }
    v43 = v11;
    v41 = 0;
    v13 = v46.i64[1];
    if (v46.i64[1] >= v47[0])
    {
      v15 = (v46.i64[1] - v46.i64[0]) >> 4;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 60)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v17 = v47[0] - v46.i64[0];
      if ((v47[0] - v46.i64[0]) >> 3 > v16)
        v16 = v17 >> 3;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
        v18 = 0xFFFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      v55 = v47;
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)v47, v18);
      v21 = (_anonymous_namespace_::IROperationImpl **)&v19[16 * v15];
      *v21 = v10;
      v21[1] = (_anonymous_namespace_::IROperationImpl *)v11;
      v42 = 0;
      v43 = 0;
      v22 = (_QWORD *)v46.i64[1];
      v23 = (_QWORD *)v46.i64[0];
      if (v46.i64[1] == v46.i64[0])
      {
        v26 = vdupq_n_s64(v46.u64[1]);
        v24 = &v19[16 * v15];
      }
      else
      {
        v24 = &v19[16 * v15];
        do
        {
          v25 = *((_OWORD *)v22 - 1);
          v22 -= 2;
          *((_OWORD *)v24 - 1) = v25;
          v24 -= 16;
          *v22 = 0;
          v22[1] = 0;
        }
        while (v22 != v23);
        v26 = v46;
      }
      v14 = v21 + 2;
      v46.i64[0] = (uint64_t)v24;
      v46.i64[1] = (uint64_t)(v21 + 2);
      v53 = v26;
      v27 = v47[0];
      v47[0] = &v19[16 * v20];
      v54 = v27;
      v52 = (std::string *)v26.i64[0];
      std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v52);
    }
    else
    {
      *(_QWORD *)v46.i64[1] = v10;
      *(_QWORD *)(v13 + 8) = v11;
      v14 = (_QWORD *)(v13 + 16);
    }
    v46.i64[1] = (uint64_t)v14;
    v28 = v41;
    v41 = 0;
    if (v28)
    {
      (*(void (**)(_anonymous_namespace_::IROperationImpl *))(*(_QWORD *)v28 + 8))(v28);
      v7 = v45;
    }
    if (v7)
    {
      v29 = (unint64_t *)&v7->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  v31 = this[31];
  *(_QWORD *)&v40 = this[30];
  *((_QWORD *)&v40 + 1) = v31;
  if (v31)
  {
    v32 = (unint64_t *)v31 + 1;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  MIL::IRBlock::Make(&v40, (uint64_t)v50, (uint64_t)&v49, (uint64_t)&v46, v48, v39);
  v34 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v35 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v52 = (std::string *)&v46;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v48);
  v52 = &v49;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
  v52 = (std::string *)v50;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
  return std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>>::~__hash_table((uint64_t)v51);
}

void sub_1E05EDF7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29)
{
  void *v29;
  uint64_t v30;

  __cxa_free_exception(v29);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>>::~__hash_table(v30 - 168);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::BlockBuilder::SetParent(MIL::Builder::BlockBuilder *this, const MIL::IRScope *a2)
{
  return (*(uint64_t (**)(_QWORD, const MIL::IRScope *))(**(_QWORD **)(*((_QWORD *)this + 1) + 40) + 104))(*(_QWORD *)(*((_QWORD *)this + 1) + 40), a2);
}

void MIL::Builder::BlockBuilder::TryGetConstExprValue()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "TryGetConstExprValue has been deprecated.");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_1E05EE098(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::BlockBuilder::UpdateStateDependencyMap(MIL::Builder::BlockBuilder::BlockBuilderImpl **this)
{
  return MIL::Builder::BlockBuilder::BlockBuilderImpl::UpdateStateDependencyMap(this[1]);
}

uint64_t MIL::Builder::BlockBuilder::BlockBuilderImpl::UpdateStateDependencyMap(MIL::Builder::BlockBuilder::BlockBuilderImpl *this)
{
  uint64_t v3[5];

  MIL::Builder::BlockBuilder::BlockBuilderImpl::CreateStateDependencyMap(this, (uint64_t)v3);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>>::__move_assign((uint64_t)this + 384, v3);
  return std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>>::~__hash_table((uint64_t)v3);
}

void MIL::Builder::BlockBuilder::UpdateStateDependencyMapForState(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::string __p;

  v2 = *(_QWORD *)(a1 + 8);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  MIL::Builder::BlockBuilder::BlockBuilderImpl::UpdateStateDependencyMapForState(v2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1E05EE160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Builder::BlockBuilder::BlockBuilderImpl::UpdateStateDependencyMapForState(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v7[5];
  std::string v8;
  char v9;
  _BYTE v10[24];
  uint64_t v11;
  __int128 *v12;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v8 = *(std::string *)a2;
  v9 = 1;
  MIL::Builder::BlockBuilder::BlockBuilderImpl::ExtractStateOpsHelper(a1, (unsigned __int8 *)&v8, (uint64_t)v10);
  if (v9 && SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (v11)
  {
    v12 = (__int128 *)a2;
    v4 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v10, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, &v12);
    v12 = (__int128 *)a2;
    v5 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 384, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, &v12);
    std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::__move_assign((uint64_t)(v5 + 40), v7);
    std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::~__hash_table((uint64_t)v7);
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)v10);
}

void sub_1E05EE26C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  uint64_t v21;

  std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::~__hash_table((uint64_t)&a10);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table(v21 - 72);
  _Unwind_Resume(a1);
}

void MIL::Builder::BlockBuilder::AddOutput(MIL::Builder::BlockBuilder *this, MIL::Builder::Variable::VariableImpl **a2)
{
  uint64_t v2;
  const void **Name;
  std::runtime_error *exception;

  if (!a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot set an output to nullptr.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v2 = *((_QWORD *)this + 1);
  Name = (const void **)MIL::Builder::Variable::GetName(a2);
  MIL::Builder::BlockBuilder::BlockBuilderImpl::AddOutput(v2, Name);
}

void sub_1E05EE310(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Builder::BlockBuilder::BlockBuilderImpl::AddOutput(uint64_t a1, const void **a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  std::runtime_error *exception;
  std::string v9;

  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((_QWORD *)(a1 + 72), (unsigned __int8 *)a2)&& !(*(uint64_t (**)(_QWORD, const void **, uint64_t))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), a2, 1))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" is neither a function input nor is produced by any OperationBuilder in this block.", a2, (void **)&v9.__r_.__value_.__l.__data_);
    std::runtime_error::runtime_error(exception, &v9);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v4 = (uint64_t *)(a1 + 176);
  v5 = *(_QWORD *)(a1 + 184);
  if (v5 >= *(_QWORD *)(a1 + 192))
  {
    v6 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v4, (__int128 *)a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v4, (__int128 *)a2);
    v6 = v5 + 24;
  }
  *(_QWORD *)(a1 + 184) = v6;
  v7 = *(_QWORD **)(a1 + 376);
  if (v7)
    MIL::Builder::BlockBuilder::DataDependencyGraph::AddBlockOutput(v7, (uint64_t)a2);
}

void sub_1E05EE414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void MIL::Builder::BlockBuilder::AddOutput(uint64_t a1, const void **a2)
{
  MIL::Builder::BlockBuilder::BlockBuilderImpl::AddOutput(*(_QWORD *)(a1 + 8), a2);
}

std::string *MIL::Builder::BlockBuilder::GetOutputNames@<X0>(MIL::Builder::BlockBuilder *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, *(__int128 **)(v2 + 176), *(__int128 **)(v2 + 184), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v2 + 184) - *(_QWORD *)(v2 + 176)) >> 3));
}

void MIL::Builder::BlockBuilder::GetInputNames(MIL::Builder::BlockBuilder::BlockBuilderImpl **this@<X0>, std::vector<std::string> *a2@<X8>)
{
  MIL::Builder::BlockBuilder::BlockBuilderImpl::GetInputNames(this[1], a2);
}

void MIL::Builder::BlockBuilder::BlockBuilderImpl::GetInputNames(MIL::Builder::BlockBuilder::BlockBuilderImpl *this@<X0>, std::vector<std::string> *a2@<X8>)
{
  MIL::IRNamedValueType **v4;
  MIL::IRNamedValueType **v5;
  __int128 *Name;
  std::string *end;
  uint64_t v8;

  a2->__begin_ = 0;
  a2->__end_ = 0;
  a2->__end_cap_.__value_ = 0;
  std::vector<std::string>::reserve(a2, (uint64_t)(*((_QWORD *)this + 20) - *((_QWORD *)this + 19)) >> 4);
  v5 = (MIL::IRNamedValueType **)*((_QWORD *)this + 19);
  v4 = (MIL::IRNamedValueType **)*((_QWORD *)this + 20);
  while (v5 != v4)
  {
    Name = (__int128 *)MIL::IRNamedValueType::GetName(*v5);
    end = a2->__end_;
    if (end >= a2->__end_cap_.__value_)
    {
      v8 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a2, Name);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a2, Name);
      v8 = (uint64_t)&end[1];
    }
    a2->__end_ = (std::vector<std::string>::pointer)v8;
    v5 += 2;
  }
}

void sub_1E05EE51C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void MIL::Builder::BlockBuilder::GetOutputs(MIL::Builder::BlockBuilder::BlockBuilderImpl **this@<X0>, void **a2@<X8>)
{
  MIL::Builder::BlockBuilder::BlockBuilderImpl::GetOutputs(this[1], (const MIL::Builder::BlockBuilder *)this, a2);
}

void MIL::Builder::BlockBuilder::BlockBuilderImpl::GetOutputs(MIL::Builder::BlockBuilder::BlockBuilderImpl *this@<X0>, const MIL::Builder::BlockBuilder *a2@<X1>, void **a3@<X8>)
{
  uint64_t v6;
  uint64_t i;
  unsigned __int8 *Variable;
  unsigned __int8 *v9;
  unint64_t v10;
  unsigned __int8 **v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  unsigned __int8 **v18;
  char *v19;
  char *v20;
  unsigned __int8 *v21;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<std::string const*>::reserve(a3, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 23) - *((_QWORD *)this + 22)) >> 3));
  v6 = *((_QWORD *)this + 22);
  for (i = *((_QWORD *)this + 23); v6 != i; v6 += 24)
  {
    Variable = MIL::Builder::BlockBuilder::BlockBuilderImpl::GetVariable((uint64_t)this, v6, (std::string::size_type)a2);
    v9 = Variable;
    v11 = (unsigned __int8 **)a3[1];
    v10 = (unint64_t)a3[2];
    if ((unint64_t)v11 >= v10)
    {
      v13 = ((char *)v11 - (_BYTE *)*a3) >> 3;
      if ((unint64_t)(v13 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v14 = v10 - (_QWORD)*a3;
      v15 = v14 >> 2;
      if (v14 >> 2 <= (unint64_t)(v13 + 1))
        v15 = v13 + 1;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      if (v16)
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a3 + 2), v16);
      else
        v17 = 0;
      v18 = (unsigned __int8 **)&v17[8 * v13];
      *v18 = v9;
      v12 = (char *)(v18 + 1);
      v20 = (char *)*a3;
      v19 = (char *)a3[1];
      if (v19 != *a3)
      {
        do
        {
          v21 = (unsigned __int8 *)*((_QWORD *)v19 - 1);
          v19 -= 8;
          *--v18 = v21;
        }
        while (v19 != v20);
        v19 = (char *)*a3;
      }
      *a3 = v18;
      a3[1] = v12;
      a3[2] = &v17[8 * v16];
      if (v19)
        operator delete(v19);
    }
    else
    {
      *v11 = Variable;
      v12 = (char *)(v11 + 1);
    }
    a3[1] = v12;
  }
}

void sub_1E05EE694(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Builder::BlockBuilder::GetLocation(MIL::Builder::BlockBuilder *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 240);
}

uint64_t MIL::Builder::BlockBuilder::GetLocationPtr(MIL::Builder::BlockBuilder *this)
{
  return *((_QWORD *)this + 1) + 240;
}

void MIL::Builder::BlockBuilder::SetLocation(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v2 = *(_QWORD *)(a1 + 8);
  v6 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  MIL::Builder::BlockBuilder::BlockBuilderImpl::SetLocation(v2, &v6);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1E05EE740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::BlockBuilder::BlockBuilderImpl::SetLocation(uint64_t a1, __int128 *a2)
{
  std::runtime_error *exception;

  if (!*(_QWORD *)a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot set an empty location.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](a1 + 240, a2);
}

void sub_1E05EE7A8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::BlockBuilder::GetScopePtr(MIL::Builder::BlockBuilder *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 40);
}

uint64_t MIL::Builder::BlockBuilder::GetContext@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v2 = *(uint64_t **)(this + 8);
  v4 = *v2;
  v3 = v2[1];
  *a2 = v4;
  a2[1] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return this;
}

uint64_t MIL::Builder::BlockBuilder::GetOpsetName(MIL::Builder::BlockBuilder *this)
{
  return *((_QWORD *)this + 1) + 16;
}

void MIL::Builder::BlockBuilder::SetAttribute(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v4;
  unsigned __int8 *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  void *__p[2];
  uint64_t v11;
  void **v12;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *a2;
  v11 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v9 = *(_OWORD *)a3;
  *(_OWORD *)__p = v4;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v12 = __p;
  v5 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v3 + 200, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v12);
  std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]((uint64_t)(v5 + 40), &v9);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (*((_QWORD *)&v9 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__p[0]);
}

void sub_1E05EE8B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

unsigned __int8 *MIL::Builder::BlockBuilder::TryGetAttribute@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>((_QWORD *)(*(_QWORD *)(a1 + 8) + 200), a2);
  if (result)
  {
    v5 = *((_QWORD *)result + 6);
    *a3 = *((_QWORD *)result + 5);
    a3[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

std::vector<std::string>::iterator MIL::Builder::BlockBuilder::RemoveOutput(uint64_t a1, uint64_t a2)
{
  std::vector<std::string> *v3;
  uint64_t end;
  uint64_t value;
  std::vector<std::string>::const_iterator v6;
  std::vector<std::string>::const_iterator v7;

  v3 = *(std::vector<std::string> **)(a1 + 8);
  end = (uint64_t)v3[7].__end_;
  value = (uint64_t)v3[7].__end_cap_.__value_;
  v3 = (std::vector<std::string> *)((char *)v3 + 176);
  v6.__i_ = (std::__wrap_iter<const std::string *>::iterator_type)std::remove[abi:ne180100]<std::__wrap_iter<std::string *>,std::string>(end, value, a2);
  v7.__i_ = v3->__end_;
  return std::vector<std::string>::erase(v3, v6, v7);
}

MIL::Builder::Variable::VariableImpl *MIL::Builder::BlockBuilder::RemoveOutput(MIL::Builder::BlockBuilder *this, MIL::Builder::Variable::VariableImpl **a2)
{
  MIL::Builder::Variable::VariableImpl *result;
  uint64_t v4;
  std::vector<std::string> *v5;
  uint64_t end;
  uint64_t value;
  std::vector<std::string>::const_iterator v8;
  std::vector<std::string>::const_iterator v9;

  result = MIL::Builder::Variable::TryGetName(a2);
  if (result)
  {
    v4 = (uint64_t)result;
    v5 = (std::vector<std::string> *)*((_QWORD *)this + 1);
    end = (uint64_t)v5[7].__end_;
    value = (uint64_t)v5[7].__end_cap_.__value_;
    v5 = (std::vector<std::string> *)((char *)v5 + 176);
    v8.__i_ = (std::__wrap_iter<const std::string *>::iterator_type)std::remove[abi:ne180100]<std::__wrap_iter<std::string *>,std::string>(end, value, v4);
    v9.__i_ = v5->__end_;
    return (MIL::Builder::Variable::VariableImpl *)std::vector<std::string>::erase(v5, v8, v9).__i_;
  }
  return result;
}

unsigned __int8 *MIL::Builder::BlockBuilder::ReplaceInput(std::string::size_type a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MIL::Builder::BlockBuilder::BlockBuilderImpl::ReplaceInput(*(_QWORD *)(a1 + 8), a2, a3, a4, a1);
}

unsigned __int8 *MIL::Builder::BlockBuilder::BlockBuilderImpl::ReplaceInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, std::string::size_type a5)
{
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 *Name;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned __int8 *v17;
  void **v18;
  std::string::size_type v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  const std::string::value_type *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  uint64_t v31;
  std::__shared_weak_count *v32;
  std::string v33;
  std::string v34;
  void **v35;

  MIL::Builder::BlockBuilder::BlockBuilderImpl::GetVariable(a1, a2, a5);
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 40) + 80))(*(_QWORD *)(a1 + 40), a3, a4, 1);
  v10 = *(_QWORD *)(a1 + 152);
  if (*(_QWORD *)(a1 + 160) == v10)
    goto LABEL_27;
  v11 = 0;
  while (1)
  {
    Name = (unsigned __int8 *)MIL::IRNamedValueType::GetName(*(MIL::IRNamedValueType **)(v10 + 16 * v11));
    v13 = Name[23];
    if ((v13 & 0x80u) == 0)
      v14 = Name[23];
    else
      v14 = *((_QWORD *)Name + 1);
    v15 = *(unsigned __int8 *)(a2 + 23);
    v16 = (char)v15;
    if ((v15 & 0x80u) != 0)
      v15 = *(_QWORD *)(a2 + 8);
    if (v14 != v15)
      goto LABEL_18;
    v17 = v16 >= 0 ? (unsigned __int8 *)a2 : *(unsigned __int8 **)a2;
    if ((v13 & 0x80) != 0)
      break;
    if (!Name[23])
      goto LABEL_20;
    while (*Name == *v17)
    {
      ++Name;
      ++v17;
      if (!--v13)
        goto LABEL_20;
    }
LABEL_18:
    ++v11;
    v10 = *(_QWORD *)(a1 + 152);
    if (v11 >= (*(_QWORD *)(a1 + 160) - v10) >> 4)
      goto LABEL_27;
  }
  if (memcmp(*(const void **)Name, v17, *((_QWORD *)Name + 1)))
    goto LABEL_18;
LABEL_20:
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v34 = *(std::string *)a3;
  MIL::IRNamedValueType::Make((uint64_t *)&v34, a4, (uint64_t *)&v35);
  std::shared_ptr<MIL::IRNamedValueType>::operator=[abi:ne180100]<MIL::IRNamedValueType,std::default_delete<MIL::IRNamedValueType>,void>((_QWORD *)(*(_QWORD *)(a1 + 152) + 16 * v11), (uint64_t *)&v35);
  v18 = v35;
  v35 = 0;
  if (v18)
  {
    MIL::IRNamedValueType::~IRNamedValueType(v18);
    MEMORY[0x1E0C023A0]();
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
LABEL_27:
  v19 = *(_QWORD *)(a3 + 8);
  if (*(char *)(a3 + 23) >= 0)
    v20 = *(unsigned __int8 *)(a3 + 23);
  else
    v20 = *(_QWORD *)(a3 + 8);
  v21 = *(unsigned __int8 *)(a2 + 23);
  v22 = (char)v21;
  if ((v21 & 0x80u) != 0)
    v21 = *(_QWORD *)(a2 + 8);
  if (v20 != v21)
  {
LABEL_42:
    if ((*(_BYTE *)(a3 + 23) & 0x80) == 0)
    {
      v33 = *(std::string *)a3;
      goto LABEL_47;
    }
    v26 = *(const std::string::value_type **)a3;
LABEL_46:
    std::string::__init_copy_ctor_external(&v33, v26, v19);
LABEL_47:
    v31 = 0;
    v32 = 0;
    MIL::Builder::BlockBuilder::BlockBuilderImpl::ReplaceUsesOfInputVariable((_QWORD *)a1, (unsigned __int8 *)a2, (uint64_t)&v33, &v31);
    v27 = v32;
    if (v32)
    {
      p_shared_owners = (unint64_t *)&v32->__shared_owners_;
      do
        v29 = __ldaxr(p_shared_owners);
      while (__stlxr(v29 - 1, p_shared_owners));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    return MIL::Builder::BlockBuilder::BlockBuilderImpl::GetVariable(a1, a3, a5);
  }
  if (v22 >= 0)
    v23 = (unsigned __int8 *)a2;
  else
    v23 = *(unsigned __int8 **)a2;
  if ((*(_BYTE *)(a3 + 23) & 0x80) != 0)
  {
    v26 = *(const std::string::value_type **)a3;
    if (!memcmp(*(const void **)a3, v23, *(_QWORD *)(a3 + 8)))
      return MIL::Builder::BlockBuilder::BlockBuilderImpl::GetVariable(a1, a3, a5);
    goto LABEL_46;
  }
  if (*(_BYTE *)(a3 + 23))
  {
    v24 = (unsigned __int8 *)a3;
    v25 = *(unsigned __int8 *)(a3 + 23);
    while (*v24 == *v23)
    {
      ++v24;
      ++v23;
      if (!--v25)
        return MIL::Builder::BlockBuilder::BlockBuilderImpl::GetVariable(a1, a3, a5);
    }
    goto LABEL_42;
  }
  return MIL::Builder::BlockBuilder::BlockBuilderImpl::GetVariable(a1, a3, a5);
}

void sub_1E05EEC70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  std::unique_ptr<MIL::IRNamedValueType>::reset[abi:ne180100]((void ***)(v23 - 56), 0);
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::BlockBuilder::ReplaceOutput(std::string::size_type a1, uint64_t a2, std::string *a3)
{
  return MIL::Builder::BlockBuilder::BlockBuilderImpl::ReplaceOutput(*(_QWORD **)(a1 + 8), a2, a3, 1, a1);
}

uint64_t MIL::Builder::BlockBuilder::BlockBuilderImpl::ReplaceOutput(_QWORD *a1, uint64_t a2, std::string *a3, int a4, std::string::size_type a5)
{
  _QWORD *v10;
  uint64_t result;
  unsigned __int8 *Variable;
  unsigned __int8 *v13;
  uint64_t Type;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned __int8 *v24;
  uint64_t v25;
  std::runtime_error *exception;
  std::string *v27;
  __int128 v28;
  std::runtime_error *v29;
  std::string *v30;
  __int128 v31;
  std::runtime_error *v32;
  const void **p_data;
  std::runtime_error *v34;
  const void **v35;
  int v36;
  const std::string::value_type *v37;
  std::string::size_type v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  __int128 v42;
  int v43;
  const std::string::value_type *v44;
  std::string::size_type v45;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  __int128 v49;
  int v50;
  const std::string::value_type *v51;
  std::string::size_type v52;
  std::string *v53;
  __int128 v54;
  std::string *v55;
  __int128 v56;
  std::string v57;
  std::string v58;
  std::string v59;
  std::string v60;
  std::string v61;
  std::string v62;
  std::string v63;

  v10 = a1 + 9;
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a1 + 9, (unsigned __int8 *)a2))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v27 = std::string::append(&v62, ".");
    v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v63.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v63);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  result = (uint64_t)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v10, (unsigned __int8 *)a3);
  if (!result)
  {
    v29 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v30 = std::string::append(&v62, ".");
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v63.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v29, &v63);
    __cxa_throw(v29, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (a4)
  {
    Variable = MIL::Builder::BlockBuilder::BlockBuilderImpl::GetVariable((uint64_t)a1, a2, a5);
    v13 = MIL::Builder::BlockBuilder::BlockBuilderImpl::GetVariable((uint64_t)a1, (uint64_t)a3, a5);
    Type = MIL::Builder::Variable::TryGetType((MIL::Builder::Variable::VariableImpl **)Variable);
    result = MIL::Builder::Variable::TryGetType((MIL::Builder::Variable::VariableImpl **)v13);
    if (Type != result)
    {
      v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      p_data = (const void **)&a3->__r_.__value_.__l.__data_;
      v34 = v32;
      v35 = p_data;
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" and ", p_data, (void **)&v57.__r_.__value_.__l.__data_);
      v36 = *(char *)(a2 + 23);
      if (v36 >= 0)
        v37 = (const std::string::value_type *)a2;
      else
        v37 = *(const std::string::value_type **)a2;
      if (v36 >= 0)
        v38 = *(unsigned __int8 *)(a2 + 23);
      else
        v38 = *(_QWORD *)(a2 + 8);
      v39 = std::string::append(&v57, v37, v38);
      v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      v58.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      v41 = std::string::append(&v58, " have different types, cannot replace output ");
      v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      v59.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      v43 = *(char *)(a2 + 23);
      if (v43 >= 0)
        v44 = (const std::string::value_type *)a2;
      else
        v44 = *(const std::string::value_type **)a2;
      if (v43 >= 0)
        v45 = *(unsigned __int8 *)(a2 + 23);
      else
        v45 = *(_QWORD *)(a2 + 8);
      v46 = std::string::append(&v59, v44, v45);
      v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
      v60.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v47;
      v46->__r_.__value_.__l.__size_ = 0;
      v46->__r_.__value_.__r.__words[2] = 0;
      v46->__r_.__value_.__r.__words[0] = 0;
      v48 = std::string::append(&v60, " with ");
      v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
      v61.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v49;
      v48->__r_.__value_.__l.__size_ = 0;
      v48->__r_.__value_.__r.__words[2] = 0;
      v48->__r_.__value_.__r.__words[0] = 0;
      v50 = *((char *)v35 + 23);
      if (v50 >= 0)
        v51 = (const std::string::value_type *)v35;
      else
        v51 = (const std::string::value_type *)*v35;
      if (v50 >= 0)
        v52 = *((unsigned __int8 *)v35 + 23);
      else
        v52 = (std::string::size_type)v35[1];
      v53 = std::string::append(&v61, v51, v52);
      v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
      v62.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v54;
      v53->__r_.__value_.__l.__size_ = 0;
      v53->__r_.__value_.__r.__words[2] = 0;
      v53->__r_.__value_.__r.__words[0] = 0;
      v55 = std::string::append(&v62, ".");
      v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
      v63.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v56;
      v55->__r_.__value_.__l.__size_ = 0;
      v55->__r_.__value_.__r.__words[2] = 0;
      v55->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v34, &v63);
      __cxa_throw(v34, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  v16 = a1[22];
  v15 = a1[23];
  if (v15 != v16)
  {
    v17 = 0;
    v18 = 0;
    while (1)
    {
      v19 = v16 + 24 * v18;
      v20 = *(unsigned __int8 *)(v19 + 23);
      if ((v20 & 0x80u) == 0)
        v21 = *(unsigned __int8 *)(v19 + 23);
      else
        v21 = *(_QWORD *)(v19 + 8);
      v22 = *(unsigned __int8 *)(a2 + 23);
      v23 = (char)v22;
      if ((v22 & 0x80u) != 0)
        v22 = *(_QWORD *)(a2 + 8);
      if (v21 != v22)
        goto LABEL_24;
      v24 = v23 >= 0 ? (unsigned __int8 *)a2 : *(unsigned __int8 **)a2;
      if ((v20 & 0x80) == 0)
        break;
      result = memcmp(*(const void **)v19, v24, *(_QWORD *)(v19 + 8));
      if (!(_DWORD)result)
        goto LABEL_23;
LABEL_24:
      ++v18;
      v17 += 24;
      if (v18 >= 0xAAAAAAAAAAAAAAABLL * ((v15 - v16) >> 3))
        return result;
    }
    if (*(_BYTE *)(v19 + 23))
    {
      v25 = v17;
      while (*(unsigned __int8 *)(v16 + v25) == *v24)
      {
        ++v24;
        ++v25;
        if (!--v20)
          goto LABEL_23;
      }
      goto LABEL_24;
    }
LABEL_23:
    result = (uint64_t)std::string::operator=((std::string *)(v16 + 24 * v18), a3);
    v16 = a1[22];
    v15 = a1[23];
    goto LABEL_24;
  }
  return result;
}

void sub_1E05EF0BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  void *v49;
  char v50;
  uint64_t v51;

  if (*(char *)(v51 - 105) < 0)
    operator delete(*(void **)(v51 - 128));
  if (a49 < 0)
    operator delete(__p);
  if (a42 < 0)
    operator delete(a37);
  if (a35 < 0)
    operator delete(a30);
  if (a28 < 0)
    operator delete(a23);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  if ((v50 & 1) != 0)
    __cxa_free_exception(v49);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Builder::BlockBuilder::ReplaceOutput(std::string::size_type a1, uint64_t a2, std::string *a3, int a4)
{
  return MIL::Builder::BlockBuilder::BlockBuilderImpl::ReplaceOutput(*(_QWORD **)(a1 + 8), a2, a3, a4, a1);
}

BOOL MIL::Builder::BlockBuilder::RemoveAttribute(uint64_t a1, unsigned __int8 *a2)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>((_QWORD *)(*(_QWORD *)(a1 + 8) + 200), a2) != 0;
}

uint64_t MIL::Builder::BlockBuilder::GetAttributes(MIL::Builder::BlockBuilder *this)
{
  return *((_QWORD *)this + 1) + 200;
}

void MIL::Builder::BlockBuilder::UpdateOutputNames(std::string::size_type a1, __int128 **a2)
{
  MIL::Builder::BlockBuilder::BlockBuilderImpl::UpdateOutputNames(*(uint64_t **)(a1 + 8), a2, a1);
}

void MIL::Builder::BlockBuilder::BlockBuilderImpl::UpdateOutputNames(uint64_t *a1, __int128 **a2, std::string::size_type a3)
{
  std::vector<std::string> *v6;
  __int128 *v7;
  __int128 *v8;
  unint64_t v9;
  uint64_t v10;

  v6 = (std::vector<std::string> *)(a1 + 22);
  std::vector<std::string>::__clear[abi:ne180100](a1 + 22);
  std::vector<std::string>::reserve(v6, 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  v7 = *a2;
  v8 = a2[1];
  while (v7 != v8)
  {
    MIL::Builder::BlockBuilder::BlockBuilderImpl::GetVariable((uint64_t)a1, (uint64_t)v7, a3);
    v9 = a1[23];
    if (v9 >= a1[24])
    {
      v10 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)v6, v7);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v6, v7);
      v10 = v9 + 24;
    }
    a1[23] = v10;
    v7 = (__int128 *)((char *)v7 + 24);
  }
}

void MIL::BuilderPrivate::BlockBuilderPrivate::PermuteOperations(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  MIL::Builder::BlockBuilder::BlockBuilderImpl::PermuteOperations(*(_QWORD *)(a1 + 8), a2, a3, a4);
}

void MIL::Builder::BlockBuilder::BlockBuilderImpl::PermuteOperations(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t i;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  uint64_t v25;
  unint64_t v26;

  v25 = a3;
  v26 = a4;
  if (a4)
  {
    for (i = 0; i < a4; ++i)
    {
      v7 = v25;
      v8 = *(_QWORD *)(v25 + 8 * i);
      if (v8 != i)
      {
        v9 = *(_QWORD *)(a1 + 48);
        if (i + a2 >= (*(_QWORD *)(a1 + 56) - v9) >> 4)
          std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
        v10 = *(_OWORD *)(v9 + 16 * (i + a2));
        v24 = v10;
        if (*((_QWORD *)&v10 + 1))
        {
          v11 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 1, v11));
          v8 = *(_QWORD *)(v7 + 8 * i);
        }
        v13 = i;
        while (v8 != i)
        {
          v14 = v8;
          v15 = v8 + a2;
          v16 = *(_QWORD *)(a1 + 48);
          v17 = (*(_QWORD *)(a1 + 56) - v16) >> 4;
          v18 = v13 + a2;
          if (v17 <= v15 || v17 <= v18)
            std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
          std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]((_QWORD *)(v16 + 16 * v18), (uint64_t *)(v16 + 16 * v15));
          *(_QWORD *)MIL::Util::Span<unsigned long,18446744073709551615ul>::At(&v25, v13) = v13;
          v8 = *(_QWORD *)(v25 + 8 * v14);
          v13 = v14;
        }
        v20 = *(_QWORD *)(a1 + 48);
        if (v13 >= (*(_QWORD *)(a1 + 56) - v20) >> 4)
          std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
        std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](v20 + 16 * v13, &v24);
        *(_QWORD *)MIL::Util::Span<unsigned long,18446744073709551615ul>::At(&v25, v13) = v13;
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        a4 = v26;
      }
    }
  }
}

void sub_1E05EF468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1E05EF708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

double std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;
  double result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x50uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = (std::string *)(v8 + 16);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    *((_QWORD *)v8 + 4) = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  result = 0.0;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *((_DWORD *)v8 + 18) = 1065353216;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1E05EF7B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,0>(uint64_t a1)
{
  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>>>::__emplace_unique_key_args<std::string,std::string const&,decltype(nullptr)>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>>>::__construct_node_hash<std::string const&,decltype(nullptr)>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_1E05EFB30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>>>::__construct_node_hash<std::string const&,decltype(nullptr)>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;

  v7 = a1 + 16;
  v8 = operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v8[4] = *(_QWORD *)(a3 + 16);
  }
  v8[5] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1E05EFBC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *MIL::Builder::BlockBuilder::BlockBuilderImpl::GetOperator@<X0>(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t Opset;
  unsigned __int8 *result;
  std::runtime_error *exception;
  std::string *v8;
  __int128 v9;
  std::runtime_error *v10;
  std::string *v11;
  __int128 v12;
  std::string v13;
  std::string v14;

  if (!*a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v8 = std::string::append(&v13, ".");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v14.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v14);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  Opset = MIL::MILContext::GetOpset(*a1);
  result = MIL::IROpset::TryGetOperatorSharedPtr(Opset, a2, a3);
  if (!*a3)
  {
    v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v11 = std::string::append(&v13, ".");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v14.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v10, &v14);
    __cxa_throw(v10, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1E05EFD28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  void *v22;
  int v23;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v21);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

BOOL MIL::Builder::BlockBuilder::BlockBuilderImpl::CheckAddedOperation(MIL::Builder::BlockBuilder::BlockBuilderImpl *this, MIL::Builder::OperationBuilder::OperationBuilderImpl **a2)
{
  unint64_t v4;
  _QWORD *v5;
  unsigned __int8 *OutputName;
  _BOOL8 result;
  std::runtime_error *exception;
  std::string *v9;
  __int128 v10;
  std::runtime_error *v11;
  std::string v12;
  std::string v13;

  if (MIL::Builder::OperationBuilder::GetNumOutputs((MIL::Builder::OperationBuilder *)a2))
  {
    v4 = 0;
    v5 = (_QWORD *)((char *)this + 72);
    do
    {
      OutputName = (unsigned __int8 *)MIL::Builder::OperationBuilder::GetOutputName(a2, v4);
      if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v5, OutputName))
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v9 = std::string::append(&v12, " in this block.");
        v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        v13.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v13);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      ++v4;
    }
    while (v4 < MIL::Builder::OperationBuilder::GetNumOutputs((MIL::Builder::OperationBuilder *)a2));
  }
  result = MIL::Builder::OperationBuilder::IsPartOfBlock((MIL::Builder::OperationBuilder *)a2);
  if (result)
  {
    v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v11, "Operation is already part of another BlockBuilder.");
    __cxa_throw(v11, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1E05EFF18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;

  __cxa_free_exception(v21);
  _Unwind_Resume(a1);
}

_QWORD *MIL::Builder::BlockBuilder::BlockBuilderImpl::OperationIterator(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;
  _QWORD *v4;
  std::runtime_error *exception;

  result = *(_QWORD **)(a1 + 48);
  v4 = *(_QWORD **)(a1 + 56);
  if (result != v4)
  {
    while (*result != *a2)
    {
      result += 2;
      if (result == v4)
      {
        result = v4;
        break;
      }
    }
  }
  if (result == v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Trying to find index for Operation not in this Block.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1E05F0000(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::insert(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  int64x2_t v30;
  char *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  char *v36;
  __int128 v37;
  char *v38;
  _QWORD *v39;
  char *v40;
  int64x2_t v41;
  char *v42;
  uint64_t v43;

  v4 = (uint64_t *)a2;
  v6 = a1[1];
  v8 = (uint64_t)(a1 + 2);
  v7 = a1[2];
  if (v6 >= v7)
  {
    v9 = (uint64_t *)*a1;
    v10 = ((uint64_t)(v6 - *a1) >> 4) + 1;
    if (v10 >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v11 = a2 - (_QWORD)v9;
    v12 = (a2 - (uint64_t)v9) >> 4;
    v13 = v7 - (_QWORD)v9;
    if (v13 >> 3 > v10)
      v10 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v10;
    v39 = a1 + 2;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(a1 + 2), v14);
    else
      v15 = 0;
    v19 = (uint64_t *)&v15[16 * v12];
    v36 = v15;
    *(_QWORD *)&v37 = v19;
    *((_QWORD *)&v37 + 1) = v19;
    v38 = &v15[16 * v14];
    if (v12 == v14)
    {
      if (v11 < 1)
      {
        if (v9 == v4)
          v21 = 1;
        else
          v21 = v11 >> 3;
        v43 = v8;
        v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>(v8, v21);
        v24 = v37;
        v25 = *((_QWORD *)&v37 + 1) - v37;
        if (*((_QWORD *)&v37 + 1) == (_QWORD)v37)
        {
          v30 = vdupq_n_s64(v37);
          v27 = (unint64_t)&v22[16 * (v21 >> 2)];
        }
        else
        {
          v26 = v25 >> 4;
          v27 = (unint64_t)&v22[16 * (v21 >> 2) + (v25 & 0xFFFFFFFFFFFFFFF0)];
          v28 = 16 * v26;
          v29 = &v22[16 * (v21 >> 2)];
          do
          {
            *(_OWORD *)v29 = *(_OWORD *)v24;
            v29 += 16;
            *(_QWORD *)v24 = 0;
            *(_QWORD *)(v24 + 8) = 0;
            v24 += 16;
            v28 -= 16;
          }
          while (v28);
          v30 = (int64x2_t)v37;
        }
        v31 = v38;
        v40 = v36;
        v36 = v22;
        *(_QWORD *)&v37 = &v22[16 * (v21 >> 2)];
        v41 = v30;
        *((_QWORD *)&v37 + 1) = v27;
        v38 = &v22[16 * v23];
        v42 = v31;
        std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v40);
        v19 = (uint64_t *)*((_QWORD *)&v37 + 1);
      }
      else
      {
        v20 = v12 + 2;
        if (v12 >= -1)
          v20 = v12 + 1;
        v19 -= 2 * (v20 >> 1);
        *(_QWORD *)&v37 = v19;
        *((_QWORD *)&v37 + 1) = v19;
      }
    }
    *v19 = *a3;
    v32 = a3[1];
    v19[1] = v32;
    if (v32)
    {
      v33 = (unint64_t *)(v32 + 8);
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
      v19 = (uint64_t *)*((_QWORD *)&v37 + 1);
    }
    *((_QWORD *)&v37 + 1) = v19 + 2;
    v4 = (uint64_t *)std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::__swap_out_circular_buffer(a1, &v36, v4);
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v36);
  }
  else if (a2 == v6)
  {
    v16 = *(_OWORD *)a3;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    if (*((_QWORD *)&v16 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    a1[1] = a2 + 16;
  }
  else
  {
    std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::__move_range((uint64_t)a1, a2, v6, (char *)(a2 + 16));
    if (v4 <= a3)
      a3 += 2 * (a1[1] > (unint64_t)a3);
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](v4, a3);
  }
  return v4;
}

void sub_1E05F0260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::BlockBuilder::BlockBuilderImpl::OnOperationAdded(uint64_t *a1, uint64_t a2, MIL::Builder::BlockBuilder *a3)
{
  uint64_t **i;
  unsigned __int8 *v7;
  MIL::Builder::Variable::VariableImpl ***v8;
  MIL::Builder::Variable::VariableImpl ***v9;
  unsigned __int8 *v10;
  uint64_t v11;
  MIL::Builder::Variable::VariableImpl *Name;
  uint64_t Type;
  MIL::Builder::Variable::VariableImpl ***v14;
  MIL::Builder::Variable::VariableImpl ***v15;
  uint64_t v16;
  uint64_t **j;
  __int128 *v18;
  std::string *v19;
  unsigned __int8 *v20;
  uint64_t *v21;
  uint64_t v22;
  MIL::Builder::OperationBuilder::OperationBuilderImpl **v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  MIL::Builder::Variable::VariableImpl ***v30;
  std::string::size_type size;
  uint64_t v32;
  MIL::Builder::Variable::VariableImpl *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  MIL::Builder::OperationBuilder::OperationBuilderImpl **v45;
  std::__shared_weak_count *v46;
  std::string *v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  std::string v51;
  MIL::Builder::Variable::VariableImpl ***v52;
  MIL::Builder::Variable::VariableImpl ***v53;
  uint64_t **v54;

  MIL::Builder::OperationBuilder::GetInputArguments(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)a2, (uint64_t)&v52);
  for (i = v54; i; i = (uint64_t **)*i)
  {
    if (MIL::Builder::Variable::TryGetName((MIL::Builder::Variable::VariableImpl **)i[2]))
    {
      v51.__r_.__value_.__r.__words[0] = (std::string::size_type)MIL::Builder::Variable::GetName((MIL::Builder::Variable::VariableImpl **)i[2]);
      v7 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(a1 + 14), (unsigned __int8 *)v51.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v51);
      std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::shared_ptr<MIL::Builder::OperationBuilder> const&>((uint64_t)(v7 + 40), (_QWORD *)a2, (_QWORD *)a2);
    }
  }
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)&v52);
  MIL::Builder::OperationBuilder::GetOutputs(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)a2, (void **)&v52);
  v8 = v52;
  v9 = v53;
  if (v52 != v53)
  {
    do
    {
      v51.__r_.__value_.__r.__words[0] = (std::string::size_type)MIL::Builder::Variable::GetName(*v8);
      v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(a1 + 9), (unsigned __int8 *)v51.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v51);
      std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]((_QWORD *)v10 + 5, (uint64_t *)a2);
      v11 = a1[5];
      Name = MIL::Builder::Variable::GetName(*v8);
      Type = MIL::Builder::Variable::TryGetType(*v8);
      (*(void (**)(uint64_t, MIL::Builder::Variable::VariableImpl *, uint64_t, _QWORD))(*(_QWORD *)v11 + 80))(v11, Name, Type, 0);
      ++v8;
    }
    while (v8 != v9);
    v8 = v52;
  }
  if (v8)
  {
    v53 = v8;
    operator delete(v8);
  }
  MIL::Builder::OperationBuilder::GetBlocks(*(MIL::Builder::OperationBuilder **)a2, (uint64_t)&v52);
  v14 = v52;
  v15 = v53;
  while (v14 != v15)
  {
    v16 = *((_QWORD *)(*v14)[1] + 5);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 104))(v16, *(_QWORD *)(*((_QWORD *)a3 + 1) + 40));
    v14 += 2;
  }
  v51.__r_.__value_.__r.__words[0] = (std::string::size_type)&v52;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
  MIL::Builder::OperationBuilder::UpdateOwnership(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)a2, a3, (uint64_t)&v52);
  for (j = v54; j; j = (uint64_t **)*j)
  {
    if (*((char *)j + 39) < 0)
      std::string::__init_copy_ctor_external(&v51, (const std::string::value_type *)j[2], (std::string::size_type)j[3]);
    else
      v51 = *(std::string *)(j + 2);
    MIL::Builder::Variable::UpdateOwner((MIL::Builder::Variable *)j[5], a3);
    if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a1 + 37, (unsigned __int8 *)&v51))
    {
      v18 = (__int128 *)j[5];
      j[5] = 0;
      v47 = (std::string *)v18;
      std::__hash_table<std::unique_ptr<MIL::Builder::Variable const>,std::hash<std::unique_ptr<MIL::Builder::Variable const>>,std::equal_to<std::unique_ptr<MIL::Builder::Variable const>>,std::allocator<std::unique_ptr<MIL::Builder::Variable const>>>::__emplace_unique_key_args<std::unique_ptr<MIL::Builder::Variable const>,std::unique_ptr<MIL::Builder::Variable const>>((uint64_t)(a1 + 42), &v47, (uint64_t *)&v47);
      v19 = v47;
      v47 = 0;
      if (v19)
        (*(void (**)(std::string *))(v19->__r_.__value_.__r.__words[0] + 8))(v19);
    }
    else
    {
      v47 = &v51;
      v20 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(a1 + 37), (unsigned __int8 *)&v51, (uint64_t)&std::piecewise_construct, (__int128 **)&v47);
      v21 = j[5];
      j[5] = 0;
      v22 = *((_QWORD *)v20 + 5);
      *((_QWORD *)v20 + 5) = v21;
      if (v22)
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    }
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v51.__r_.__value_.__l.__data_);
  }
  v23 = *(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)a2;
  v24 = (std::__shared_weak_count *)a1[1];
  v49 = *a1;
  v50 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(p_shared_owners);
    while (__stxr(v26 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::SetContext((uint64_t)v23, (uint64_t)&v49);
  v27 = v50;
  if (v50)
  {
    v28 = (unint64_t *)&v50->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  MIL::Builder::OperationBuilder::GetOutputs(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)a2, (void **)&v51.__r_.__value_.__l.__data_);
  size = v51.__r_.__value_.__l.__size_;
  v30 = (MIL::Builder::Variable::VariableImpl ***)v51.__r_.__value_.__r.__words[0];
  if (v51.__r_.__value_.__r.__words[0] != v51.__r_.__value_.__l.__size_)
  {
    do
    {
      MIL::Builder::Variable::TryGetValueSharedPtr(*v30, &v47);
      if (v47)
      {
        v32 = a1[5];
        v33 = MIL::Builder::Variable::GetName(*v30);
        (*(void (**)(uint64_t, MIL::Builder::Variable::VariableImpl *, std::string **, uint64_t))(*(_QWORD *)v32 + 88))(v32, v33, &v47, 1);
      }
      v34 = v48;
      if (v48)
      {
        v35 = (unint64_t *)&v48->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      ++v30;
    }
    while (v30 != (MIL::Builder::Variable::VariableImpl ***)size);
    v30 = (MIL::Builder::Variable::VariableImpl ***)v51.__r_.__value_.__r.__words[0];
  }
  if (v30)
  {
    v51.__r_.__value_.__l.__size_ = (std::string::size_type)v30;
    operator delete(v30);
  }
  v37 = (_QWORD *)a1[47];
  if (v37)
  {
    v38 = *(std::__shared_weak_count **)(a2 + 8);
    v45 = *(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)a2;
    v46 = v38;
    if (v38)
    {
      v39 = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    MIL::Builder::BlockBuilder::DataDependencyGraph::AddOperation(v37, (uint64_t)&v45);
    v41 = v46;
    if (v46)
    {
      v42 = (unint64_t *)&v46->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>>>::~__hash_table((uint64_t)&v52);
}

void sub_1E05F06AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>>>::~__hash_table((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::__move_range(uint64_t result, uint64_t a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(char **)(result + 8);
  v5 = (char *)(a2 + v4 - a4);
  v6 = v4;
  while ((unint64_t)v5 < a3)
  {
    *(_OWORD *)v6 = *(_OWORD *)v5;
    v6 += 16;
    *(_QWORD *)v5 = 0;
    *((_QWORD *)v5 + 1) = 0;
    v5 += 16;
  }
  *(_QWORD *)(result + 8) = v6;
  if (v4 != a4)
  {
    v7 = (uint64_t)(v4 - 16);
    v8 = 16 * ((v4 - a4) >> 4);
    v9 = a2 - 16;
    do
    {
      result = std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](v7, (__int128 *)(v9 + v8));
      v7 -= 16;
      v8 -= 16;
    }
    while (v8);
  }
  return result;
}

uint64_t std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::__swap_out_circular_buffer(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;
  _QWORD *v9;
  _OWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  result = a2[1];
  v5 = (_QWORD *)*a1;
  v6 = result;
  if ((_QWORD *)*a1 != a3)
  {
    v7 = a3;
    v6 = a2[1];
    do
    {
      v8 = *((_OWORD *)v7 - 1);
      v7 -= 2;
      *(_OWORD *)(v6 - 16) = v8;
      v6 -= 16;
      *v7 = 0;
      v7[1] = 0;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  v9 = (_QWORD *)a1[1];
  v10 = (_OWORD *)a2[2];
  if (v9 != a3)
  {
    do
    {
      *v10++ = *(_OWORD *)a3;
      *a3 = 0;
      a3[1] = 0;
      a3 += 2;
    }
    while (a3 != v9);
    v6 = a2[1];
  }
  a2[2] = v10;
  v11 = (_QWORD *)*a1;
  *a1 = v6;
  a2[1] = v11;
  v12 = a1[1];
  a1[1] = a2[2];
  a2[2] = v12;
  v13 = a1[2];
  a1[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

unint64_t MIL::Builder::BlockBuilder::DataDependencyGraph::AddOperation(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *Parameters;
  _QWORD *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  MIL::IRArgument **v12;
  uint64_t Name;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __n128 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  BOOL v35;
  unint64_t result;
  unint64_t i;
  uint64_t OutputName;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  MIL::Builder::OperationBuilder *v43;
  std::__shared_weak_count *v44;
  __int128 *v45;
  std::__shared_weak_count *v46;
  MIL::Builder::OperationBuilder *v47;
  std::__shared_weak_count *v48;
  MIL::Builder::OperationBuilder **v49;
  std::__shared_weak_count *v50;
  __int128 **v51;

  v47 = *(MIL::Builder::OperationBuilder **)a2;
  v49 = &v47;
  v4 = std::__hash_table<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,std::__unordered_map_hasher<MIL::Builder::OperationBuilder *,std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,std::hash<MIL::Builder::OperationBuilder *>,std::equal_to<MIL::Builder::OperationBuilder *>,true>,std::__unordered_map_equal<MIL::Builder::OperationBuilder *,std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,std::equal_to<MIL::Builder::OperationBuilder *>,std::hash<MIL::Builder::OperationBuilder *>,true>,std::allocator<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>>>::__emplace_unique_key_args<MIL::Builder::OperationBuilder *,std::piecewise_construct_t const&,std::tuple<MIL::Builder::OperationBuilder *&&>,std::tuple<>>((uint64_t)(a1 + 10), &v47, (uint64_t)&std::piecewise_construct, &v49);
  Parameters = (_QWORD *)MIL::Builder::OperationBuilder::GetParameters(*(MIL::Builder::OperationBuilder **)a2);
  v6 = (_QWORD *)*Parameters;
  v42 = Parameters + 1;
  if ((_QWORD *)*Parameters != Parameters + 1)
  {
    do
    {
      v49 = (MIL::Builder::OperationBuilder **)(v6 + 4);
      v7 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v4 + 3), (unsigned __int8 *)v6 + 32, (uint64_t)&std::piecewise_construct, (__int128 **)&v49);
      v8 = v6[7];
      if (v6[8] != v8)
      {
        v9 = 0;
        v10 = 0;
        v11 = (uint64_t)(v7 + 40);
        do
        {
          v12 = (MIL::IRArgument **)(v8 + 16 * v9);
          if ((*(unsigned int (**)(MIL::IRArgument *))(*(_QWORD *)*v12 + 16))(*v12))
          {
            Name = MIL::IRArgument::GetName(*v12);
            MIL::Builder::BlockBuilder::DataDependencyGraph::GetProducerInfo(a1, Name, &v49);
            v45 = (__int128 *)v49;
            v46 = v50;
            if (v50)
            {
              p_shared_owners = (unint64_t *)&v50->__shared_owners_;
              do
                v15 = __ldxr(p_shared_owners);
              while (__stxr(v15 + 1, p_shared_owners));
            }
            v16 = *(std::__shared_weak_count **)(a2 + 8);
            v43 = *(MIL::Builder::OperationBuilder **)a2;
            v44 = v16;
            if (v16)
            {
              v17 = (unint64_t *)&v16->__shared_owners_;
              do
                v18 = __ldxr(v17);
              while (__stxr(v18 + 1, v17));
            }
            v19.n128_f64[0] = MIL::Builder::DataDependency::MakeWithNonLexicalConsumer(&v45, &v43, (uint64_t)(v6 + 4), v10, &v47);
            v20 = v44;
            if (v44)
            {
              v21 = (unint64_t *)&v44->__shared_owners_;
              do
                v22 = __ldaxr(v21);
              while (__stlxr(v22 - 1, v21));
              if (!v22)
              {
                ((void (*)(std::__shared_weak_count *, __n128))v20->__on_zero_shared)(v20, v19);
                std::__shared_weak_count::__release_weak(v20);
              }
            }
            v23 = v46;
            if (v46)
            {
              v24 = (unint64_t *)&v46->__shared_owners_;
              do
                v25 = __ldaxr(v24);
              while (__stlxr(v25 - 1, v24));
              if (!v25)
              {
                ((void (*)(std::__shared_weak_count *, __n128))v23->__on_zero_shared)(v23, v19);
                std::__shared_weak_count::__release_weak(v23);
              }
            }
            v51 = (__int128 **)&v49;
            v26 = std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo> const&>,std::tuple<>>((uint64_t)(a1 + 5), &v49, (uint64_t)&std::piecewise_construct, &v51);
            std::__hash_table<MIL::Builder::DataDependency,std::hash<MIL::Builder::DataDependency>,std::equal_to<MIL::Builder::DataDependency>,std::allocator<MIL::Builder::DataDependency>>::__emplace_unique_key_args<MIL::Builder::DataDependency,MIL::Builder::DataDependency const&>((uint64_t)(v26 + 4), &v47, &v47);
            std::__hash_table<MIL::Builder::DataDependency,std::hash<MIL::Builder::DataDependency>,std::equal_to<MIL::Builder::DataDependency>,std::allocator<MIL::Builder::DataDependency>>::__emplace_unique_key_args<MIL::Builder::DataDependency,MIL::Builder::DataDependency const&>(v11, &v47, &v47);
            v27 = v48;
            if (v48)
            {
              v28 = (unint64_t *)&v48->__shared_owners_;
              do
                v29 = __ldaxr(v28);
              while (__stlxr(v29 - 1, v28));
              if (!v29)
              {
                ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
                std::__shared_weak_count::__release_weak(v27);
              }
            }
            v30 = v50;
            if (v50)
            {
              v31 = (unint64_t *)&v50->__shared_owners_;
              do
                v32 = __ldaxr(v31);
              while (__stlxr(v32 - 1, v31));
              if (!v32)
              {
                ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
                std::__shared_weak_count::__release_weak(v30);
              }
            }
          }
          v8 = v6[7];
          v9 = ++v10;
        }
        while (v10 < (unint64_t)((v6[8] - v8) >> 4));
      }
      v33 = (_QWORD *)v6[1];
      if (v33)
      {
        do
        {
          v34 = v33;
          v33 = (_QWORD *)*v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          v34 = (_QWORD *)v6[2];
          v35 = *v34 == (_QWORD)v6;
          v6 = v34;
        }
        while (!v35);
      }
      v6 = v34;
    }
    while (v34 != v42);
  }
  result = MIL::Builder::OperationBuilder::GetNumOutputs(*(MIL::Builder::OperationBuilder **)a2);
  if (result)
  {
    for (i = 0; i < result; ++i)
    {
      OutputName = MIL::Builder::OperationBuilder::GetOutputName(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)a2, i);
      MIL::Builder::BlockBuilder::DataDependencyGraph::GetProducerInfo(a1, OutputName, &v49);
      std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](v49 + 3, (uint64_t *)a2);
      v39 = v50;
      v49[5] = (MIL::Builder::OperationBuilder *)i;
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      result = MIL::Builder::OperationBuilder::GetNumOutputs(*(MIL::Builder::OperationBuilder **)a2);
    }
  }
  return result;
}

void sub_1E05F0C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::shared_ptr<MIL::Builder::OperationBuilder> const&>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD v28[2];
  char v29;

  v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == *a2)
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v14 = a1 + 16;
  v15 = operator new(0x20uLL);
  v28[0] = v15;
  v28[1] = a1 + 16;
  *v15 = 0;
  v15[1] = v8;
  v16 = a3[1];
  v15[2] = *a3;
  v15[3] = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v29 = 1;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    v21 = 1;
    if (v9 >= 3)
      v21 = (v9 & (v9 - 1)) != 0;
    v22 = v21 | (2 * v9);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v24);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v25)
  {
    *(_QWORD *)v28[0] = *v25;
    *v25 = v28[0];
  }
  else
  {
    *(_QWORD *)v28[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v28[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v14;
    if (*(_QWORD *)v28[0])
    {
      v26 = *(_QWORD *)(*(_QWORD *)v28[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v26 >= v9)
          v26 %= v9;
      }
      else
      {
        v26 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v28[0];
    }
  }
  v12 = (_QWORD *)v28[0];
  v28[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>>>>::reset[abi:ne180100]((uint64_t)v28, 0);
  return v12;
}

void sub_1E05F0EC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1E05F119C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x38uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1E05F1238(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1E05F14D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1E05F156C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::unique_ptr<MIL::Builder::Variable const>,std::hash<std::unique_ptr<MIL::Builder::Variable const>>,std::equal_to<std::unique_ptr<MIL::Builder::Variable const>>,std::allocator<std::unique_ptr<MIL::Builder::Variable const>>>::__emplace_unique_key_args<std::unique_ptr<MIL::Builder::Variable const>,std::unique_ptr<MIL::Builder::Variable const>>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  v14 = (_QWORD *)(a1 + 16);
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v8;
  v15 = *a3;
  *a3 = 0;
  i[2] = v15;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v21);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
    *i = *v23;
LABEL_38:
    *v23 = i;
    goto LABEL_39;
  }
  *i = *v14;
  *v14 = i;
  *(_QWORD *)(v22 + 8 * v3) = v14;
  if (*i)
  {
    v24 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9)
        v24 %= v9;
    }
    else
    {
      v24 &= v9 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1E05F17E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::unique_ptr<MIL::Builder::Variable const>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::unique_ptr<MIL::Builder::Variable const>,void *>>>::operator()[abi:ne180100](uint64_t a1, _QWORD *__p)
{
  uint64_t v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = __p[2];
    __p[2] = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void MIL::Builder::BlockBuilder::DataDependencyGraph::GetProducerInfo(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::string *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::string __p;
  std::string *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::string *v21;
  std::__shared_weak_count *v22;

  v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a1, (unsigned __int8 *)a2);
  if (!v6)
  {
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      __p = *(std::string *)a2;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v10 = (std::string *)operator new(0x48uLL);
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA99A700;
    v10[1] = __p;
    v10[2].__r_.__value_.__r.__words[0] = 0;
    v10[2].__r_.__value_.__l.__size_ = 0;
    v10[2].__r_.__value_.__r.__words[2] = 0;
    v21 = v10 + 1;
    v22 = (std::__shared_weak_count *)v10;
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      __p = *(std::string *)a2;
    v18 = v10 + 1;
    v19 = (std::__shared_weak_count *)v10;
    v21 = 0;
    v22 = 0;
    v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>>((uint64_t)a1, (unsigned __int8 *)&__p, (__int128 *)&__p);
    v11 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v14 = v22;
    if (v22)
    {
      v15 = (unint64_t *)&v22->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  v7 = *((_QWORD *)v6 + 6);
  *a3 = *((_QWORD *)v6 + 5);
  a3[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
}

void sub_1E05F19F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,std::__unordered_map_hasher<MIL::Builder::OperationBuilder *,std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,std::hash<MIL::Builder::OperationBuilder *>,std::equal_to<MIL::Builder::OperationBuilder *>,true>,std::__unordered_map_equal<MIL::Builder::OperationBuilder *,std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,std::equal_to<MIL::Builder::OperationBuilder *>,std::hash<MIL::Builder::OperationBuilder *>,true>,std::allocator<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>>>::__emplace_unique_key_args<MIL::Builder::OperationBuilder *,std::piecewise_construct_t const&,std::tuple<MIL::Builder::OperationBuilder *&&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[2];
  char v27;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == *a2)
              return v13;
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  v15 = a1 + 16;
  v16 = (char *)operator new(0x40uLL);
  v26[0] = v16;
  v26[1] = a1 + 16;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = v9;
  *((_QWORD *)v16 + 2) = **a4;
  *(_OWORD *)(v16 + 24) = 0u;
  *(_OWORD *)(v16 + 40) = 0u;
  *((_DWORD *)v16 + 14) = 1065353216;
  v27 = 1;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v15;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v24 >= v10)
          v24 %= v10;
      }
      else
      {
        v24 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  v13 = (_QWORD *)v26[0];
  v26[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return v13;
}

void sub_1E05F1CB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>>>::~__hash_table((uint64_t)v2 + 24);
    operator delete(v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1E05F2000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

double std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;
  double result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x50uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = (std::string *)(v8 + 16);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    *((_QWORD *)v8 + 4) = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  result = 0.0;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *((_DWORD *)v8 + 18) = 1065353216;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1E05F20AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MIL::Builder::DataDependency::ProducerInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA99A700;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIL::Builder::DataDependency::ProducerInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA99A700;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E0C023A0);
}

void std::__shared_ptr_emplace<MIL::Builder::DataDependency::ProducerInfo>::__on_zero_shared(uint64_t a1)
{
  char v1;

  std::allocator<MIL::Builder::DataDependency::ProducerInfo>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<MIL::Builder::DataDependency::ProducerInfo>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](a2 + 24);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>>(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_1E05F23D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x38uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1E05F2444(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo> const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD **v12;
  _QWORD *i;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      for (i = *v12; i; i = (_QWORD *)*i)
      {
        v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10)
              v14 %= v10;
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4)
            break;
        }
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  v16 = operator new(0x48uLL);
  i = v16;
  *v16 = 0;
  v16[1] = v9;
  v17 = *a4;
  v16[2] = **a4;
  v18 = v17[1];
  v16[3] = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  *((_OWORD *)v16 + 2) = 0u;
  *((_OWORD *)v16 + 3) = 0u;
  *((_DWORD *)v16 + 16) = 1065353216;
  v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v22 = *(float *)(a1 + 32);
  if (!v10 || (float)(v22 * (float)v10) < v21)
  {
    v23 = 1;
    if (v10 >= 3)
      v23 = (v10 & (v10 - 1)) != 0;
    v24 = v23 | (2 * v10);
    v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25)
      v26 = v25;
    else
      v26 = v24;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v26);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v27 = *(_QWORD *)a1;
  v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v28)
  {
    *i = *v28;
LABEL_41:
    *v28 = i;
    goto LABEL_42;
  }
  *i = *v15;
  *v15 = i;
  *(_QWORD *)(v27 + 8 * v4) = v15;
  if (*i)
  {
    v29 = *(_QWORD *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v29 >= v10)
        v29 %= v10;
    }
    else
    {
      v29 &= v10 - 1;
    }
    v28 = (_QWORD *)(*(_QWORD *)a1 + 8 * v29);
    goto LABEL_41;
  }
LABEL_42:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1E05F26F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table((uint64_t)__p + 32);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)__p + 16);
  }
  if (__p)
    operator delete(__p);
}

_QWORD *std::__hash_table<MIL::Builder::DataDependency,std::hash<MIL::Builder::DataDependency>,std::equal_to<MIL::Builder::DataDependency>,std::allocator<MIL::Builder::DataDependency>>::__emplace_unique_key_args<MIL::Builder::DataDependency,MIL::Builder::DataDependency const&>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD v29[2];
  char v30;

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::hash<MIL::Builder::DataDependency>::operator()(a1 + 24, a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = (_QWORD *)*v13;
      if (*v13)
      {
        do
        {
          v15 = v14[1];
          if (v15 == v9)
          {
            if (MIL::Builder::operator==(v14 + 2, a2))
              return v14;
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  v16 = operator new(0x20uLL);
  v29[0] = v16;
  v29[1] = a1 + 16;
  *v16 = 0;
  v16[1] = v9;
  v17 = a3[1];
  v16[2] = *a3;
  v16[3] = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v30 = 1;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v10 || (float)(v21 * (float)v10) < v20)
  {
    v22 = 1;
    if (v10 >= 3)
      v22 = (v10 & (v10 - 1)) != 0;
    v23 = v22 | (2 * v10);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v25);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v26)
  {
    *(_QWORD *)v29[0] = *v26;
    *v26 = v29[0];
  }
  else
  {
    *(_QWORD *)v29[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v29[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v29[0])
    {
      v27 = *(_QWORD *)(*(_QWORD *)v29[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v27 >= v10)
          v27 %= v10;
      }
      else
      {
        v27 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v29[0];
    }
  }
  v14 = (_QWORD *)v29[0];
  v29[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>>>>::reset[abi:ne180100]((uint64_t)v29, 0);
  return v14;
}

void sub_1E05F29D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t MIL::Builder::BlockBuilder::BlockBuilderImpl::CheckInsertedOperations(unint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  MIL::Builder::OperationBuilder::OperationBuilderImpl **v6;
  unint64_t i;
  uint64_t OutputName;
  uint64_t v9;
  MIL::Builder::OperationBuilder::OperationBuilderImpl **v10;
  uint64_t NumOutputs;
  unint64_t j;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  std::runtime_error *exception;
  std::string *v21;
  __int128 v22;
  MIL::Builder::BlockBuilder::BlockBuilderImpl *v24;
  std::string v25;
  std::string v26;

  v24 = (MIL::Builder::BlockBuilder::BlockBuilderImpl *)result;
  if (a3)
  {
    v4 = 0;
    v5 = 1;
    do
    {
      v6 = *(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)(a2 + 16 * v4);
      MIL::Builder::BlockBuilder::BlockBuilderImpl::CheckAddedOperation(v24, v6);
      result = MIL::Builder::OperationBuilder::GetNumOutputs((MIL::Builder::OperationBuilder *)v6);
      if (result)
      {
        for (i = 0; i < result; ++i)
        {
          OutputName = MIL::Builder::OperationBuilder::GetOutputName(v6, i);
          v9 = 0;
          do
          {
            v10 = *(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)(a2 + 16 * v9);
            NumOutputs = i;
            if (v9 != v4)
              NumOutputs = MIL::Builder::OperationBuilder::GetNumOutputs(*(MIL::Builder::OperationBuilder **)(a2 + 16 * v9));
            if (NumOutputs)
            {
              for (j = 0; j != NumOutputs; ++j)
              {
                v13 = MIL::Builder::OperationBuilder::GetOutputName(v10, j);
                v14 = *(unsigned __int8 *)(OutputName + 23);
                if ((v14 & 0x80u) == 0)
                  v15 = *(unsigned __int8 *)(OutputName + 23);
                else
                  v15 = *(_QWORD *)(OutputName + 8);
                v16 = *(unsigned __int8 *)(v13 + 23);
                v17 = (char)v16;
                if ((v16 & 0x80u) != 0)
                  v16 = *(_QWORD *)(v13 + 8);
                if (v15 == v16)
                {
                  if (v17 >= 0)
                    v18 = (unsigned __int8 *)v13;
                  else
                    v18 = *(unsigned __int8 **)v13;
                  if ((v14 & 0x80) != 0)
                  {
                    if (!memcmp(*(const void **)OutputName, v18, *(_QWORD *)(OutputName + 8)))
                    {
LABEL_31:
                      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::operator+<char>();
                      v21 = std::string::append(&v25, " in this block.");
                      v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
                      v26.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v22;
                      v21->__r_.__value_.__l.__size_ = 0;
                      v21->__r_.__value_.__r.__words[2] = 0;
                      v21->__r_.__value_.__r.__words[0] = 0;
                      std::runtime_error::runtime_error(exception, &v26);
                      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                    }
                  }
                  else
                  {
                    if (!*(_BYTE *)(OutputName + 23))
                      goto LABEL_31;
                    v19 = (unsigned __int8 *)OutputName;
                    while (*v19 == *v18)
                    {
                      ++v19;
                      ++v18;
                      if (!--v14)
                        goto LABEL_31;
                    }
                  }
                }
              }
            }
            ++v9;
          }
          while (v9 != v5);
          result = MIL::Builder::OperationBuilder::GetNumOutputs((MIL::Builder::OperationBuilder *)v6);
        }
      }
      ++v4;
      ++v5;
    }
    while (v4 != a3);
  }
  return result;
}

void sub_1E05F2BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  int v24;

  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
  {
    operator delete(a12);
    if ((v24 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

_QWORD *std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::__insert_with_size[abi:ne180100]<std::shared_ptr<MIL::Builder::OperationBuilder> const*,std::shared_ptr<MIL::Builder::OperationBuilder> const*>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD v33[5];

  v5 = (_QWORD *)a2;
  if (a5 < 1)
    return v5;
  v11 = a1[2];
  v9 = (uint64_t)(a1 + 2);
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 4)
  {
    v13 = *a1;
    v14 = a5 + ((uint64_t)(v12 - *a1) >> 4);
    if (v14 >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v15 = (a2 - v13) >> 4;
    v16 = v10 - v13;
    if (v16 >> 3 > v14)
      v14 = v16 >> 3;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
      v17 = 0xFFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v33[4] = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>(v9, v17);
    else
      v18 = 0;
    v26 = (uint64_t *)&v18[16 * v15];
    v33[0] = v18;
    v33[1] = v26;
    v33[3] = &v18[16 * v17];
    v27 = &v26[2 * a5];
    do
    {
      *v26 = *a3;
      v28 = a3[1];
      v26[1] = v28;
      if (v28)
      {
        v29 = (unint64_t *)(v28 + 8);
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      v26 += 2;
      a3 += 2;
    }
    while (v26 != v27);
    v33[2] = v27;
    v5 = (_QWORD *)std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::__swap_out_circular_buffer(a1, v33, v5);
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)v33);
    return v5;
  }
  v19 = (uint64_t)(v12 - a2) >> 4;
  if (v19 >= a5)
  {
    v20 = &a3[2 * a5];
LABEL_29:
    std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::__move_range((uint64_t)a1, a2, v12, (char *)(a2 + 16 * a5));
    if (v20 != a3)
    {
      v31 = v5;
      do
      {
        std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](v31, a3);
        a3 += 2;
        v31 += 2;
      }
      while (a3 != v20);
    }
    return v5;
  }
  v20 = &a3[2 * v19];
  if (v20 == a4)
  {
    v22 = *(uint64_t **)(v9 - 8);
  }
  else
  {
    v21 = &a3[2 * v19];
    v22 = *(uint64_t **)(v9 - 8);
    do
    {
      *v22 = *v21;
      v23 = v21[1];
      v22[1] = v23;
      if (v23)
      {
        v24 = (unint64_t *)(v23 + 8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v21 += 2;
      v22 += 2;
    }
    while (v21 != a4);
  }
  a1[1] = (uint64_t)v22;
  if ((uint64_t)(v12 - a2) >= 1)
    goto LABEL_29;
  return v5;
}

void sub_1E05F2E10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::resize(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = (v3 - *(_QWORD *)a1) >> 4;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *(_QWORD *)a1 + 16 * a2;
      while (v3 != v5)
        v3 = std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v3 - 16);
      *(_QWORD *)(a1 + 8) = v5;
    }
  }
  else
  {
    std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::__append((char **)a1, a2 - v4);
  }
}

void std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  int64x2_t v20;
  char *v21;
  uint64_t v22;
  int64x2_t v23;
  char *v24;
  uint64_t v25;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - *a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    v11 = v5 - *a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v25 = v4;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v10];
    v15 = &v13[16 * v12];
    v24 = v15;
    bzero(v14, 16 * a2);
    v16 = &v14[16 * a2];
    v23.i64[1] = (uint64_t)v16;
    v18 = *a1;
    v17 = a1[1];
    if (v17 == *a1)
    {
      v20 = vdupq_n_s64((unint64_t)v17);
    }
    else
    {
      do
      {
        v19 = *((_OWORD *)v17 - 1);
        v17 -= 16;
        *((_OWORD *)v14 - 1) = v19;
        v14 -= 16;
        *(_QWORD *)v17 = 0;
        *((_QWORD *)v17 + 1) = 0;
      }
      while (v17 != v18);
      v20 = *(int64x2_t *)a1;
      v16 = (char *)v23.i64[1];
      v15 = v24;
    }
    *a1 = v14;
    a1[1] = v16;
    v23 = v20;
    v21 = a1[2];
    a1[2] = v15;
    v24 = v21;
    v22 = v20.i64[0];
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v22);
  }
}

char *std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::__init_with_size[abi:ne180100]<std::shared_ptr<MIL::Builder::OperationBuilder>*,std::shared_ptr<MIL::Builder::OperationBuilder>*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1E05F3040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::BlockBuilder::BlockBuilderImpl::CreateStateDependencyMap@<X0>(MIL::Builder::BlockBuilder::BlockBuilderImpl *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *i;
  unsigned __int8 *v4;
  uint64_t v6[5];
  void *__p;
  char v8;
  char v9;
  _BYTE v10[16];
  uint64_t *v11;
  __int128 *v12;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  LOBYTE(__p) = 0;
  v9 = 0;
  MIL::Builder::BlockBuilder::BlockBuilderImpl::ExtractStateOpsHelper((uint64_t)this, (unsigned __int8 *)&__p, (uint64_t)v10);
  if (v9 && v8 < 0)
    operator delete(__p);
  for (i = v11; i; i = (uint64_t *)*i)
  {
    v12 = (__int128 *)(i + 2);
    v4 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (unsigned __int8 *)i + 16, (uint64_t)&std::piecewise_construct, &v12);
    std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::__move_assign((uint64_t)(v4 + 40), v6);
    std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::~__hash_table((uint64_t)v6);
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)v10);
}

void sub_1E05F3118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (a20)
  {
    if (a19 < 0)
      operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>>::~__hash_table(v24);
  _Unwind_Resume(a1);
}

void MIL::Builder::BlockBuilder::BlockBuilderImpl::ExtractStateOpsHelper(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  MIL::Builder::OperationBuilder **v4;
  MIL::Builder::OperationBuilder **v5;
  uint64_t Operator;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t Parameters;
  uint64_t v13;
  _QWORD **v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  std::logic_error *exception;
  std::logic_error *v24;
  void *__p[2];
  char v26;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  v4 = *(MIL::Builder::OperationBuilder ***)(a1 + 48);
  v5 = *(MIL::Builder::OperationBuilder ***)(a1 + 56);
  if (v4 != v5)
  {
    while (1)
    {
      Operator = MIL::Builder::OperationBuilder::GetOperator(*v4);
      if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)Operator + 240))(Operator))
        goto LABEL_29;
      v8 = MIL::Builder::OperationBuilder::GetOperator(*v4);
      v9 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 240))(v8);
      if (!MIL::IRMemoryEffect::TryAsStateReadEffect(v9))
      {
        v10 = MIL::Builder::OperationBuilder::GetOperator(*v4);
        v11 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 240))(v10);
        if (!MIL::IRMemoryEffect::TryAsStateWriteEffect(v11))
          goto LABEL_29;
      }
      Parameters = MIL::Builder::OperationBuilder::GetParameters(*v4);
      std::string::basic_string[abi:ne180100]<0>(__p, "input");
      v13 = std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::find<std::string>(Parameters, (const void **)__p);
      if (v26 < 0)
        operator delete(__p[0]);
      if (Parameters + 8 == v13)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "State Op missing required state input.");
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "input");
      v14 = (_QWORD **)std::map<std::string,std::unique_ptr<MIL::IRBlock>>::at(Parameters, (const void **)__p);
      v15 = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**v14 + 32))(**v14);
      if (v26 < 0)
        operator delete(__p[0]);
      if (!v15)
      {
        v24 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v24, "State input needs to have a name, cannot be a literal.");
        v24->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(v24, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
      }
      if (!a2[24])
        goto LABEL_28;
      v16 = a2[23];
      if ((v16 & 0x80u) == 0)
        v17 = a2[23];
      else
        v17 = *((_QWORD *)a2 + 1);
      v18 = *((unsigned __int8 *)v15 + 23);
      v19 = (char)v18;
      if ((v18 & 0x80u) != 0)
        v18 = v15[1];
      if (v17 != v18)
        goto LABEL_29;
      v20 = v19 >= 0 ? (unsigned __int8 *)v15 : (unsigned __int8 *)*v15;
      if ((v16 & 0x80) == 0)
        break;
      if (!memcmp(*(const void **)a2, v20, *((_QWORD *)a2 + 1)))
        goto LABEL_28;
LABEL_29:
      v4 += 2;
      if (v4 == v5)
        return;
    }
    if (a2[23])
    {
      v21 = a2;
      while (*v21 == *v20)
      {
        ++v21;
        ++v20;
        if (!--v16)
          goto LABEL_28;
      }
      goto LABEL_29;
    }
LABEL_28:
    __p[0] = v15;
    v22 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (unsigned __int8 *)v15, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
    std::vector<std::shared_ptr<MIL::IROperation>>::push_back[abi:ne180100]((char **)v22 + 5, (__int128 *)v4);
    goto LABEL_29;
  }
}

void sub_1E05F33E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table(v14);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::CreateStateDependencyMap@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unint64_t v5;
  __int128 v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t Operator;
  void *v10;
  uint64_t v11;
  unint64_t i;
  uint64_t v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _BYTE v19[16];
  _QWORD *v20;
  int v21;
  __int128 v22;
  __int128 v23;
  int v24;
  __int128 v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  v22 = 0u;
  v23 = 0u;
  v24 = 1065353216;
  v3 = *a1;
  if (a1[1] != *a1)
  {
    v5 = 0;
    do
    {
      v6 = *(_OWORD *)(v3 + 16 * v5);
      v25 = v6;
      if (*((_QWORD *)&v6 + 1))
      {
        v7 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
      std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>::unordered_set((uint64_t)v19, &v25, 1);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v25);
      Operator = MIL::Builder::OperationBuilder::GetOperator(*(MIL::Builder::OperationBuilder **)(*a1 + 16 * v5));
      v10 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)Operator + 240))(Operator);
      if (MIL::IRMemoryEffect::TryAsStateReadEffect(v10))
      {
        v11 = 16 * v5 + 16;
        for (i = v5; i + 1 < (a1[1] - *a1) >> 4; ++i)
        {
          v13 = MIL::Builder::OperationBuilder::GetOperator(*(MIL::Builder::OperationBuilder **)(*a1 + v11));
          v14 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 240))(v13);
          if (!MIL::IRMemoryEffect::TryAsStateReadEffect(v14))
          {
            v5 = i;
            break;
          }
          std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::shared_ptr<MIL::Builder::OperationBuilder> const&>((uint64_t)v19, (_QWORD *)(*a1 + v11), (_QWORD *)(*a1 + v11));
          v11 += 16;
        }
      }
      v15 = v20;
      if (v20)
      {
        do
        {
          *(_QWORD *)&v25 = v15 + 2;
          v16 = std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::Builder::OperationBuilder> const&>,std::tuple<>>(a2, v15 + 2, (uint64_t)&std::piecewise_construct, (_QWORD **)&v25);
          if (v16 + 4 != (_QWORD *)&v22)
          {
            *((_DWORD *)v16 + 16) = v24;
            std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *> *>>(v16 + 4, (_QWORD *)v23, 0);
          }
          v15 = (_QWORD *)*v15;
        }
        while (v15);
        v17 = v20;
      }
      else
      {
        v17 = 0;
      }
      v24 = v21;
      std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *> *>>(&v22, v17, 0);
      std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table((uint64_t)v19);
      ++v5;
      v3 = *a1;
    }
    while (v5 < (a1[1] - *a1) >> 4);
  }
  return std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table((uint64_t)&v22);
}

void sub_1E05F3634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table((uint64_t)va);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::~__hash_table(v7);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>::unordered_set(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 16 * a3;
    do
    {
      std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::shared_ptr<MIL::Builder::OperationBuilder> const&>(a1, a2, a2);
      a2 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  return a1;
}

void sub_1E05F36D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::Builder::OperationBuilder> const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD **v12;
  _QWORD *i;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      for (i = *v12; i; i = (_QWORD *)*i)
      {
        v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10)
              v14 %= v10;
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4)
            break;
        }
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  v16 = operator new(0x48uLL);
  i = v16;
  *v16 = 0;
  v16[1] = v9;
  v17 = *a4;
  v16[2] = **a4;
  v18 = v17[1];
  v16[3] = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  *((_OWORD *)v16 + 2) = 0u;
  *((_OWORD *)v16 + 3) = 0u;
  *((_DWORD *)v16 + 16) = 1065353216;
  v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v22 = *(float *)(a1 + 32);
  if (!v10 || (float)(v22 * (float)v10) < v21)
  {
    v23 = 1;
    if (v10 >= 3)
      v23 = (v10 & (v10 - 1)) != 0;
    v24 = v23 | (2 * v10);
    v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25)
      v26 = v25;
    else
      v26 = v24;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v26);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v27 = *(_QWORD *)a1;
  v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v28)
  {
    *i = *v28;
LABEL_41:
    *v28 = i;
    goto LABEL_42;
  }
  *i = *v15;
  *v15 = i;
  *(_QWORD *)(v27 + 8 * v4) = v15;
  if (*i)
  {
    v29 = *(_QWORD *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v29 >= v10)
        v29 %= v10;
    }
    else
    {
      v29 &= v10 - 1;
    }
    v28 = (_QWORD *)(*(_QWORD *)a1 + 8 * v29);
    goto LABEL_41;
  }
LABEL_42:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1E05F3978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *> *>>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;
  BOOL v11;

  v4 = a2;
  v6 = a1[1];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v8 = (_QWORD *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
      v9 = a2 == a3;
    else
      v9 = 1;
    if (v9)
    {
      v10 = v8;
    }
    else
    {
      do
      {
        std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](v8 + 2, v4 + 2);
        v10 = (_QWORD *)*v8;
        std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__node_insert_multi(a1, v8);
        v4 = (_QWORD *)*v4;
        if (v10)
          v11 = v4 == a3;
        else
          v11 = 1;
        v8 = v10;
      }
      while (!v11);
    }
    std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__deallocate_node((uint64_t)a1, v10);
  }
  while (v4 != a3)
  {
    std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__emplace_multi<std::shared_ptr<MIL::Builder::OperationBuilder> const&>(a1, v4 + 2);
    v4 = (_QWORD *)*v4;
  }
}

void sub_1E05F3A5C(void *a1)
{
  uint64_t v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_1E05F3A74(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__node_insert_multi(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *inserted;

  v4 = a2 + 2;
  v5 = a2[2];
  v6 = HIDWORD(v5);
  v7 = 0x9DDFEA08EB382D69 * (((8 * v5) + 8) ^ HIDWORD(v5));
  v8 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
  a2[1] = v8;
  inserted = std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__node_insert_multi_prepare((uint64_t)a1, v8, v4);
  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__node_insert_multi_perform(a1, a2, inserted);
  return a2;
}

_QWORD *std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  _BOOL8 v10;
  size_t v11;
  unint64_t v12;
  size_t v13;
  uint8x8_t v14;
  unint64_t v15;
  _QWORD *v16;
  int v17;
  _QWORD *result;
  unint64_t v19;
  unint64_t v20;
  _BOOL4 v21;
  int v22;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 2 * v6;
    v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    v11 = v10 | v9;
    v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12)
      v13 = v12;
    else
      v13 = v11;
    std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<false>(a1, v13);
    v6 = *(_QWORD *)(a1 + 8);
  }
  v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    v15 = a2;
    if (v6 <= a2)
      v15 = a2 % v6;
  }
  else
  {
    v15 = (v6 - 1) & a2;
  }
  v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
  if (!v16)
    return 0;
  v17 = 0;
  do
  {
    result = v16;
    v16 = (_QWORD *)*v16;
    if (!v16)
      break;
    v19 = v16[1];
    if (v14.u32[0] > 1uLL)
    {
      v20 = v16[1];
      if (v19 >= v6)
        v20 = v19 % v6;
    }
    else
    {
      v20 = v19 & (v6 - 1);
    }
    if (v20 != v15)
      break;
    v21 = v19 == a2 && v16[2] == *a3;
    v22 = v17 & !v21;
    v17 |= v21;
  }
  while (v22 != 1);
  return result;
}

_QWORD *std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__node_insert_multi_perform(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(_QWORD *)(*result + 8 * v4) = result + 2;
    if (!*a2)
      goto LABEL_19;
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
LABEL_18:
    *(_QWORD *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
    if (v6 != v4)
      goto LABEL_18;
  }
LABEL_19:
  ++result[3];
  return result;
}

void std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<false>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__do_rehash<false>(a1, prime);
  }
}

void std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      for (i = (_QWORD *)*v7; *v7; i = (_QWORD *)*v7)
      {
        v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2)
            v12 %= a2;
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          v7 = i;
        }
        else
        {
          v13 = i;
          if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
          {
            do
            {
              v14 = v13;
              v13 = (_QWORD *)*v13;
            }
            while (v13 && i[2] == v13[2]);
            *v7 = v13;
            *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
            v7 = i;
            v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

_QWORD *std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__emplace_multi<std::shared_ptr<MIL::Builder::OperationBuilder> const&>(_QWORD *a1, unint64_t *a2)
{
  _QWORD *inserted;
  _QWORD *v5[3];

  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__construct_node<std::shared_ptr<MIL::Builder::OperationBuilder> const&>((uint64_t)a1, a2, (uint64_t)v5);
  inserted = std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__node_insert_multi(a1, v5[0]);
  v5[0] = 0;
  std::unique_ptr<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>>>>::reset[abi:ne180100]((uint64_t)v5, 0);
  return inserted;
}

void sub_1E05F3FDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__construct_node<std::shared_ptr<MIL::Builder::OperationBuilder> const&>@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *result;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v5 = a1 + 16;
  result = operator new(0x20uLL);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v5;
  *result = 0;
  result[1] = 0;
  v7 = *a2;
  v8 = a2[1];
  result[2] = *a2;
  result[3] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v7 = result[2];
  }
  *(_BYTE *)(a3 + 16) = 1;
  v11 = HIDWORD(v7);
  v12 = 0x9DDFEA08EB382D69 * (((8 * v7) + 8) ^ HIDWORD(v7));
  result[1] = 0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69 * (v11 ^ (v12 >> 47) ^ v12)) ^ ((0x9DDFEA08EB382D69 * (v11 ^ (v12 >> 47) ^ v12)) >> 47));
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1E05F4318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

double std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;
  double result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x50uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = (std::string *)(v8 + 16);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    *((_QWORD *)v8 + 4) = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  result = 0.0;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *((_DWORD *)v8 + 18) = 1065353216;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1E05F43C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,0>(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::~__hash_table(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::clear(a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table((uint64_t)(v2 + 4));
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

BOOL std::operator==[abi:ne180100]<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>>(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;
  _BOOL8 v4;
  const void **v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned __int8 *v12;

  if (*(_QWORD *)(a1 + 24) != a2[3])
    return 0;
  v3 = (uint64_t *)(a1 + 16);
  do
  {
    v3 = (uint64_t *)*v3;
    v4 = v3 == 0;
    if (!v3)
      break;
    v5 = (const void **)(v3 + 2);
    v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)v3 + 16);
    if (!v6)
      break;
    v7 = v6;
    v8 = *((unsigned __int8 *)v3 + 39);
    if ((v8 & 0x80u) == 0)
      v9 = *((unsigned __int8 *)v3 + 39);
    else
      v9 = v3[3];
    v10 = v6[39];
    v11 = (char)v10;
    if ((v10 & 0x80u) != 0)
      v10 = *((_QWORD *)v6 + 3);
    if (v9 != v10)
      break;
    if (v11 >= 0)
      v12 = v6 + 16;
    else
      v12 = (unsigned __int8 *)*((_QWORD *)v6 + 2);
    if ((v8 & 0x80) != 0)
    {
      if (memcmp(*v5, v12, v3[3]))
        return v4;
    }
    else if (*((_BYTE *)v3 + 39))
    {
      while (*(unsigned __int8 *)v5 == *v12)
      {
        v5 = (const void **)((char *)v5 + 1);
        ++v12;
        if (!--v8)
          goto LABEL_20;
      }
      return 0;
    }
LABEL_20:
    ;
  }
  while (std::operator==[abi:ne180100]<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::pair<std::shared_ptr<MIL::Builder::OperationBuilder> const,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>((uint64_t)(v3 + 5), (_QWORD *)v7 + 5));
  return v4;
}

BOOL std::operator==[abi:ne180100]<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::pair<std::shared_ptr<MIL::Builder::OperationBuilder> const,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _BOOL8 v4;
  _QWORD *v5;

  if (*(_QWORD *)(a1 + 24) != a2[3])
    return 0;
  v3 = (_QWORD *)(a1 + 16);
  do
  {
    v3 = (_QWORD *)*v3;
    v4 = v3 == 0;
    if (!v3)
      break;
    v5 = std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::find<std::shared_ptr<MIL::Builder::OperationBuilder>>(a2, v3 + 2);
    if (!v5)
      break;
  }
  while (v3[2] == v5[2]
       && std::operator==[abi:ne180100]<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>((uint64_t)(v3 + 4), v5 + 4));
  return v4;
}

_QWORD *std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::find<std::shared_ptr<MIL::Builder::OperationBuilder>>(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v5 == v10)
      {
        if (result[2] == *a2)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

BOOL std::operator==[abi:ne180100]<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _BOOL8 v4;
  _QWORD *v5;

  if (*(_QWORD *)(a1 + 24) != a2[3])
    return 0;
  v3 = (_QWORD *)(a1 + 16);
  do
  {
    v3 = (_QWORD *)*v3;
    v4 = v3 == 0;
    if (!v3)
      break;
    v5 = std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::find<std::shared_ptr<MIL::Builder::OperationBuilder>>(a2, v3 + 2);
    if (!v5)
      break;
  }
  while (v3[2] == v5[2]);
  return v4;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1E05F4B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1E05F4BE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t MIL::Builder::BlockBuilder::BlockBuilderImpl::GetOrBuildDataDependencyGraph(MIL::Builder::BlockBuilder::BlockBuilderImpl *this)
{
  uint64_t *v1;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v1 = (uint64_t *)((char *)this + 376);
  if (!*((_QWORD *)this + 47))
  {
    v4 = operator new();
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_OWORD *)(v4 + 128) = 0u;
    *(_OWORD *)(v4 + 144) = 0u;
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
    *(_OWORD *)(v4 + 80) = 0u;
    *(_OWORD *)(v4 + 96) = 0u;
    *(_OWORD *)(v4 + 112) = 0u;
    *(_DWORD *)(v4 + 32) = 1065353216;
    *(_OWORD *)(v4 + 40) = 0u;
    *(_OWORD *)(v4 + 56) = 0u;
    *(_DWORD *)(v4 + 72) = 1065353216;
    *(_DWORD *)(v4 + 112) = 1065353216;
    *(_OWORD *)(v4 + 120) = 0u;
    *(_OWORD *)(v4 + 136) = 0u;
    *(_DWORD *)(v4 + 152) = 1065353216;
    v5 = *v1;
    *v1 = v4;
    if (v5)
      std::default_delete<MIL::Builder::BlockBuilder::DataDependencyGraph>::operator()[abi:ne180100]((uint64_t)v1, v5);
    v6 = (uint64_t *)*((_QWORD *)this + 6);
    v7 = (uint64_t *)*((_QWORD *)this + 7);
    while (v6 != v7)
    {
      v8 = (_QWORD *)*v1;
      v9 = (std::__shared_weak_count *)v6[1];
      v17 = *v6;
      v18 = v9;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      MIL::Builder::BlockBuilder::DataDependencyGraph::AddOperation(v8, (uint64_t)&v17);
      v12 = v18;
      if (v18)
      {
        v13 = (unint64_t *)&v18->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v6 += 2;
    }
    v16 = *((_QWORD *)this + 22);
    v15 = *((_QWORD *)this + 23);
    while (v16 != v15)
    {
      MIL::Builder::BlockBuilder::DataDependencyGraph::AddBlockOutput((_QWORD *)*v1, v16);
      v16 += 24;
    }
  }
  return *v1;
}

void sub_1E05F4DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 *MIL::Builder::BlockBuilder::DataDependencyGraph::GetDataDependenciesForConsumerParam(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  _QWORD *v5;
  unsigned __int8 *v6;
  uint64_t v8;

  v8 = a2;
  v5 = std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::find<std::shared_ptr<MIL::Builder::OperationBuilder>>((_QWORD *)(a1 + 80), &v8);
  if (!v5)
    return (unsigned __int8 *)(a1 + 120);
  v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v5 + 3, a3);
  if (v6)
    return v6 + 40;
  else
    return (unsigned __int8 *)(a1 + 120);
}

void MIL::Builder::BlockBuilder::DataDependencyGraph::AddBlockOutput(_QWORD *a1, uint64_t a2)
{
  unint64_t *p_shared_owners;
  unint64_t v4;
  __n128 v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t *v22;

  MIL::Builder::BlockBuilder::DataDependencyGraph::GetProducerInfo(a1, a2, &v20);
  v16 = v20;
  v17 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5.n128_f64[0] = MIL::Builder::DataDependency::MakeWithBlockOutputConsumer(&v16, &v18);
  v6 = v17;
  if (v17)
  {
    v7 = (unint64_t *)&v17->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v6->__on_zero_shared)(v6, v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v22 = &v20;
  v9 = std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo> const&>,std::tuple<>>((uint64_t)(a1 + 5), &v20, (uint64_t)&std::piecewise_construct, &v22);
  std::__hash_table<MIL::Builder::DataDependency,std::hash<MIL::Builder::DataDependency>,std::equal_to<MIL::Builder::DataDependency>,std::allocator<MIL::Builder::DataDependency>>::__emplace_unique_key_args<MIL::Builder::DataDependency,MIL::Builder::DataDependency const&>((uint64_t)(v9 + 4), &v18, &v18);
  v10 = v19;
  if (v19)
  {
    v11 = (unint64_t *)&v19->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v21;
  if (v21)
  {
    v14 = (unint64_t *)&v21->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1E05F4F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void std::default_delete<MIL::Builder::BlockBuilder::DataDependencyGraph>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table(a2 + 120);
    std::__hash_table<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,std::__unordered_map_hasher<MIL::Builder::OperationBuilder *,std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,std::hash<MIL::Builder::OperationBuilder *>,std::equal_to<MIL::Builder::OperationBuilder *>,true>,std::__unordered_map_equal<MIL::Builder::OperationBuilder *,std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,std::equal_to<MIL::Builder::OperationBuilder *>,std::hash<MIL::Builder::OperationBuilder *>,true>,std::allocator<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>>>::~__hash_table(a2 + 80);
    std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::~__hash_table(a2 + 40);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a2);
    JUMPOUT(0x1E0C023A0);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,std::__unordered_map_hasher<MIL::Builder::OperationBuilder *,std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,std::hash<MIL::Builder::OperationBuilder *>,std::equal_to<MIL::Builder::OperationBuilder *>,true>,std::__unordered_map_equal<MIL::Builder::OperationBuilder *,std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,std::equal_to<MIL::Builder::OperationBuilder *>,std::hash<MIL::Builder::OperationBuilder *>,true>,std::allocator<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,std::__unordered_map_hasher<MIL::Builder::OperationBuilder *,std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,std::hash<MIL::Builder::OperationBuilder *>,std::equal_to<MIL::Builder::OperationBuilder *>,true>,std::__unordered_map_equal<MIL::Builder::OperationBuilder *,std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,std::equal_to<MIL::Builder::OperationBuilder *>,std::hash<MIL::Builder::OperationBuilder *>,true>,std::allocator<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,std::__unordered_map_hasher<MIL::Builder::OperationBuilder *,std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,std::hash<MIL::Builder::OperationBuilder *>,std::equal_to<MIL::Builder::OperationBuilder *>,true>,std::__unordered_map_equal<MIL::Builder::OperationBuilder *,std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,std::equal_to<MIL::Builder::OperationBuilder *>,std::hash<MIL::Builder::OperationBuilder *>,true>,std::allocator<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>>>::~__hash_table((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_QWORD *MIL::Builder::BlockBuilder::DataDependencyGraph::GetDataDependenciesByVariableName(_QWORD *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;
  _QWORD *v4;

  v3 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a1, a2);
  if (!v3)
    return a1 + 15;
  v4 = std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::find<std::shared_ptr<MIL::Builder::OperationBuilder>>(a1 + 5, (_QWORD *)v3 + 5);
  if (v4)
    return v4 + 4;
  else
    return a1 + 15;
}

BOOL MIL::Builder::BlockBuilder::BlockBuilderImpl::OperationFollowsOperation(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  v5 = (std::__shared_weak_count *)a2[1];
  v22 = *a2;
  v23 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = MIL::Builder::BlockBuilder::BlockBuilderImpl::OperationIterator(a1, &v22);
  v9 = v23;
  if (v23)
  {
    v10 = (unint64_t *)&v23->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)a3[1];
  v20 = *a3;
  v21 = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = MIL::Builder::BlockBuilder::BlockBuilderImpl::OperationIterator(a1, &v20);
  v16 = v21;
  if (v21)
  {
    v17 = (unint64_t *)&v21->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return v15 < v8;
}

void sub_1E05F51A4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1E05F5190);
  }
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>::unordered_set(uint64_t a1, uint64_t a2)
{
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::shared_ptr<MIL::Builder::OperationBuilder> const&>(a1, i + 2, i + 2);
  return a1;
}

void sub_1E05F5240(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::erase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a2 != a3)
  {
    v5 = a3;
    v6 = *(_QWORD *)(a1 + 8);
    if (a3 == v6)
    {
      v8 = a2;
    }
    else
    {
      v7 = 16 * ((a3 - a2) >> 4);
      v8 = a2;
      do
      {
        std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](v8, (__int128 *)(v8 + v7));
        v8 += 16;
      }
      while (v8 + v7 != v6);
      v5 = *(_QWORD *)(a1 + 8);
    }
    while (v5 != v8)
      v5 = std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v5 - 16);
    *(_QWORD *)(a1 + 8) = v8;
  }
  return a2;
}

__int128 *std::remove[abi:ne180100]<std::__wrap_iter<std::shared_ptr<MIL::Builder::OperationBuilder> *>,std::shared_ptr<MIL::Builder::OperationBuilder>>(__int128 *a1, __int128 *a2, _QWORD *a3)
{
  __int128 *v5;
  __int128 *i;

  if (a1 == a2)
  {
LABEL_5:
    v5 = a2;
  }
  else
  {
    v5 = a1;
    while (*(_QWORD *)v5 != *a3)
    {
      if (++v5 == a2)
        goto LABEL_5;
    }
  }
  if (v5 != a2)
  {
    for (i = v5 + 1; i != a2; ++i)
    {
      if (*(_QWORD *)i != *a3)
        std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]((uint64_t)v5++, i);
    }
  }
  return v5;
}

uint64_t MIL::Builder::BlockBuilder::BlockBuilderImpl::OnOperationRemoved(uint64_t a1, MIL::Builder::OperationBuilder::OperationBuilderImpl ***a2, char a3)
{
  MIL::Builder::BlockBuilder::DataDependencyGraph *v6;
  MIL::Builder::Variable::VariableImpl ***v7;
  MIL::Builder::Variable::VariableImpl ***v8;
  unsigned __int8 *Name;
  std::vector<std::string>::const_iterator v10;
  std::vector<std::string>::const_iterator v11;
  uint64_t **v12;
  uint64_t v13;
  __int128 *v14;
  unsigned __int8 *v15;
  MIL::Builder::Variable::VariableImpl ***v17;
  MIL::Builder::Variable::VariableImpl ***v18;
  uint64_t **v19;
  __int128 *v20;

  MIL::Builder::OperationBuilder::RemoveOwningBlock(*a2);
  v6 = *(MIL::Builder::BlockBuilder::DataDependencyGraph **)(a1 + 376);
  if (v6)
    MIL::Builder::BlockBuilder::DataDependencyGraph::RemoveOperation(v6, (MIL::Builder::OperationBuilder *)*a2);
  MIL::Builder::OperationBuilder::GetOutputs(*a2, (void **)&v17);
  v7 = v17;
  v8 = v18;
  if (v17 != v18)
  {
    do
    {
      Name = (unsigned __int8 *)MIL::Builder::Variable::GetName(*v7);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>((_QWORD *)(a1 + 72), Name);
      (*(void (**)(_QWORD, unsigned __int8 *))(**(_QWORD **)(a1 + 40) + 112))(*(_QWORD *)(a1 + 40), Name);
      if ((a3 & 1) == 0)
      {
        v10.__i_ = (std::__wrap_iter<const std::string *>::iterator_type)std::remove[abi:ne180100]<std::__wrap_iter<std::string *>,std::string>(*(_QWORD *)(a1 + 176), *(_QWORD *)(a1 + 184), (uint64_t)Name);
        v11.__i_ = *(std::__wrap_iter<const std::string *>::iterator_type *)(a1 + 184);
        std::vector<std::string>::erase((std::vector<std::string> *)(a1 + 176), v10, v11);
      }
      ++v7;
    }
    while (v7 != v8);
    v7 = v17;
  }
  if (v7)
  {
    v18 = v7;
    operator delete(v7);
  }
  MIL::Builder::OperationBuilder::GetInputArguments(*a2, (uint64_t)&v17);
  v12 = v19;
  if (v19)
  {
    v13 = a1 + 112;
    do
    {
      v14 = (__int128 *)MIL::Builder::Variable::TryGetName((MIL::Builder::Variable::VariableImpl **)v12[2]);
      if (v14)
      {
        v20 = v14;
        v15 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v13, (unsigned __int8 *)v14, (uint64_t)&std::piecewise_construct, &v20);
        std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__erase_unique<std::shared_ptr<MIL::Builder::OperationBuilder>>((_QWORD *)v15 + 5, a2);
      }
      v12 = (uint64_t **)*v12;
    }
    while (v12);
  }
  return std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)&v17);
}

void sub_1E05F54D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::BlockBuilder::DataDependencyGraph::RemoveOperation(MIL::Builder::BlockBuilder::DataDependencyGraph *this, MIL::Builder::OperationBuilder *a2)
{
  MIL::Builder::OperationBuilder *v2;
  unint64_t v4;
  uint64_t OutputName;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *i;
  uint64_t *j;
  _QWORD *v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unsigned __int8 *v18;
  std::__shared_weak_count *v19;
  MIL::Builder::OperationBuilder *v20;
  unsigned __int8 **v21;

  v2 = a2;
  v20 = a2;
  if (MIL::Builder::OperationBuilder::GetNumOutputs(a2))
  {
    v4 = 0;
    do
    {
      OutputName = MIL::Builder::OperationBuilder::GetOutputName((MIL::Builder::OperationBuilder::OperationBuilderImpl **)v2, v4);
      MIL::Builder::BlockBuilder::DataDependencyGraph::GetProducerInfo(this, OutputName, &v18);
      std::shared_ptr<MIL::IRScope const>::reset[abi:ne180100]((_QWORD *)v18 + 3);
      v21 = &v18;
      if (!std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo> const&>,std::tuple<>>((uint64_t)this + 40, &v18, (uint64_t)&std::piecewise_construct, &v21)[7])
      {
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(this, v18);
        std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>>>::__erase_unique<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>((_QWORD *)this + 5, &v18);
      }
      v6 = v19;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      ++v4;
      v2 = v20;
    }
    while (v4 < MIL::Builder::OperationBuilder::GetNumOutputs(v20));
  }
  v9 = std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>>>::find<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>((_QWORD *)this + 10, &v20);
  if (!v9)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  for (i = (_QWORD *)v9[5]; i; i = (_QWORD *)*i)
  {
    for (j = (uint64_t *)i[7]; j; j = (uint64_t *)*j)
    {
      MIL::Builder::DataDependency::GetProducerInfo((_QWORD **)j + 2, &v18);
      v12 = std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>>>::find<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>((_QWORD *)this + 5, &v18);
      v13 = v12;
      if (!v12)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      std::__hash_table<MIL::Builder::DataDependency,std::hash<MIL::Builder::DataDependency>,std::equal_to<MIL::Builder::DataDependency>,std::allocator<MIL::Builder::DataDependency>>::__erase_unique<MIL::Builder::DataDependency>(v12 + 4, j + 2);
      if (!v13[7] && !*((_QWORD *)v18 + 3))
      {
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(this, v18);
        std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>>>::__erase_unique<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>((_QWORD *)this + 5, &v18);
      }
      v14 = v19;
      if (v19)
      {
        v15 = (unint64_t *)&v19->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }
  }
  return std::__hash_table<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,std::__unordered_map_hasher<MIL::Builder::OperationBuilder *,std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,std::hash<MIL::Builder::OperationBuilder *>,std::equal_to<MIL::Builder::OperationBuilder *>,true>,std::__unordered_map_equal<MIL::Builder::OperationBuilder *,std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,std::equal_to<MIL::Builder::OperationBuilder *>,std::hash<MIL::Builder::OperationBuilder *>,true>,std::allocator<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>>>::__erase_unique<MIL::Builder::OperationBuilder *>((_QWORD *)this + 10, &v20);
}

void sub_1E05F570C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>>>::__erase_unique<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>(_QWORD *a1, _QWORD *a2)
{
  uint64_t *result;

  result = std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>>>::find<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>>>::find<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>>>::erase(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  void *__p;
  uint64_t v6;

  v2 = *a2;
  std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::remove(a1, a2, (uint64_t)&__p);
  v3 = __p;
  __p = 0;
  if (v3)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,void *>>>::operator()[abi:ne180100]((uint64_t)&v6, v3);
  return v2;
}

uint64_t std::__hash_table<MIL::Builder::DataDependency,std::hash<MIL::Builder::DataDependency>,std::equal_to<MIL::Builder::DataDependency>,std::allocator<MIL::Builder::DataDependency>>::__erase_unique<MIL::Builder::DataDependency>(_QWORD *a1, _QWORD *a2)
{
  uint64_t result;
  _BYTE v4[24];

  result = (uint64_t)std::__hash_table<MIL::Builder::DataDependency,std::hash<MIL::Builder::DataDependency>,std::equal_to<MIL::Builder::DataDependency>,std::allocator<MIL::Builder::DataDependency>>::find<MIL::Builder::DataDependency>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::remove(a1, (_QWORD *)result, (uint64_t)v4);
    std::unique_ptr<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>>>>::reset[abi:ne180100]((uint64_t)v4, 0);
    return 1;
  }
  return result;
}

_QWORD *std::__hash_table<MIL::Builder::DataDependency,std::hash<MIL::Builder::DataDependency>,std::equal_to<MIL::Builder::DataDependency>,std::allocator<MIL::Builder::DataDependency>>::find<MIL::Builder::DataDependency>(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;

  v4 = std::hash<MIL::Builder::DataDependency>::operator()((uint64_t)(a1 + 3), a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(_QWORD **)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = (_QWORD *)*v10;
  if (*v10)
  {
    do
    {
      v12 = v11[1];
      if (v12 == v6)
      {
        if (MIL::Builder::operator==(v11 + 2, a2))
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v12 >= *(_QWORD *)&v5)
            v12 %= *(_QWORD *)&v5;
        }
        else
        {
          v12 &= *(_QWORD *)&v5 - 1;
        }
        if (v12 != v9)
          return 0;
      }
      v11 = (_QWORD *)*v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t std::__hash_table<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,std::__unordered_map_hasher<MIL::Builder::OperationBuilder *,std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,std::hash<MIL::Builder::OperationBuilder *>,std::equal_to<MIL::Builder::OperationBuilder *>,true>,std::__unordered_map_equal<MIL::Builder::OperationBuilder *,std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,std::equal_to<MIL::Builder::OperationBuilder *>,std::hash<MIL::Builder::OperationBuilder *>,true>,std::allocator<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>>>::__erase_unique<MIL::Builder::OperationBuilder *>(_QWORD *a1, _QWORD *a2)
{
  uint64_t result;
  _BYTE v4[24];

  result = (uint64_t)std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>>>::find<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::remove(a1, (_QWORD *)result, (uint64_t)v4);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v4, 0);
    return 1;
  }
  return result;
}

uint64_t std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__erase_unique<std::shared_ptr<MIL::Builder::OperationBuilder>>(_QWORD *a1, _QWORD *a2)
{
  uint64_t result;
  _BYTE v4[24];

  result = (uint64_t)std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>>>::find<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::remove(a1, (_QWORD *)result, (uint64_t)v4);
    std::unique_ptr<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>>>>::reset[abi:ne180100]((uint64_t)v4, 0);
    return 1;
  }
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  char *v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD v29[2];
  char v30;

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (char *)operator new(0x50uLL);
  v29[0] = v17;
  v29[1] = a1 + 16;
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = v10;
  v18 = *a4;
  v19 = **a4;
  *((_QWORD *)v17 + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)v17 + 1) = v19;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = 0;
  *(_OWORD *)(v17 + 40) = 0u;
  *(_OWORD *)(v17 + 56) = 0u;
  *((_DWORD *)v17 + 18) = 1065353216;
  v30 = 1;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v26)
  {
    *(_QWORD *)v29[0] = *v26;
    *v26 = v29[0];
  }
  else
  {
    *(_QWORD *)v29[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v29[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v29[0])
    {
      v27 = *(_QWORD *)(*(_QWORD *)v29[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v27 >= v11)
          v27 %= v11;
      }
      else
      {
        v27 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v29[0];
    }
  }
  i = (unsigned __int8 *)v29[0];
  v29[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v29, 0);
  return i;
}

void sub_1E05F5D04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>>::clear(a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(char *__s@<X1>, const void **a2@<X0>, void **a3@<X8>)
{
  size_t v6;
  size_t v7;
  uint64_t result;
  const void *v9;
  char *v10;

  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  v7 = strlen(__s);
  result = std::string::basic_string[abi:ne180100]((uint64_t)a3, v6 + v7);
  if (*((char *)a3 + 23) < 0)
    a3 = (void **)*a3;
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v9 = a2;
    else
      v9 = *a2;
    result = (uint64_t)memmove(a3, v9, v6);
  }
  v10 = (char *)a3 + v6;
  if (v7)
    result = (uint64_t)memmove(v10, __s, v7);
  v10[v7] = 0;
  return result;
}

std::vector<std::string>::iterator std::vector<std::string>::erase(std::vector<std::string> *this, std::vector<std::string>::const_iterator __first, std::vector<std::string>::const_iterator __last)
{
  std::string *v5;
  std::string *v6;
  std::vector<std::string>::pointer end;
  char v9;

  if (__first.__i_ != __last.__i_)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>((uint64_t)&v9, (__int128 *)__last.__i_, (__int128 *)this->__end_, (uint64_t)__first.__i_);
    v6 = v5;
    end = this->__end_;
    if (end != v5)
    {
      do
      {
        if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(end[-1].__r_.__value_.__l.__data_);
        --end;
      }
      while (end != v6);
    }
    this->__end_ = v6;
  }
  return (std::vector<std::string>::iterator)__first.__i_;
}

uint64_t std::remove[abi:ne180100]<std::__wrap_iter<std::string *>,std::string>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  __int128 v16;

  v5 = std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(a1, a2, (unsigned __int8 **)a3);
  if (v5 == a2)
    return a2;
  v6 = v5;
  v7 = v5 + 24;
  if (v5 + 24 != a2)
  {
    v8 = v5;
    while (1)
    {
      v9 = v6;
      v6 = v7;
      v10 = *(unsigned __int8 *)(v9 + 47);
      if ((v10 & 0x80u) == 0)
        v11 = *(unsigned __int8 *)(v9 + 47);
      else
        v11 = *(_QWORD *)(v9 + 32);
      v12 = *(unsigned __int8 *)(a3 + 23);
      v13 = (char)v12;
      if ((v12 & 0x80u) != 0)
        v12 = *(_QWORD *)(a3 + 8);
      if (v11 != v12)
        goto LABEL_20;
      if (v13 >= 0)
        v14 = (unsigned __int8 *)a3;
      else
        v14 = *(unsigned __int8 **)a3;
      if ((v10 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v6, v14, *(_QWORD *)(v9 + 32)))
          goto LABEL_20;
      }
      else if (*(_BYTE *)(v9 + 47))
      {
        v15 = 0;
        while (*(unsigned __int8 *)(v6 + v15) == v14[v15])
        {
          if (v10 == ++v15)
            goto LABEL_23;
        }
LABEL_20:
        if (*(char *)(v8 + 23) < 0)
          operator delete(*(void **)v8);
        v16 = *(_OWORD *)v6;
        *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
        *(_OWORD *)v8 = v16;
        v8 += 24;
        *(_BYTE *)(v9 + 47) = 0;
        *(_BYTE *)v6 = 0;
      }
LABEL_23:
      v7 = v6 + 24;
      if (v6 + 24 == a2)
        return v8;
    }
  }
  return v5;
}

__int128 *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v5;
  __int128 v7;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (*(char *)(a4 + 23) < 0)
        operator delete(*(void **)a4);
      v7 = *v5;
      *(_QWORD *)(a4 + 16) = *((_QWORD *)v5 + 2);
      *(_OWORD *)a4 = v7;
      a4 += 24;
      *((_BYTE *)v5 + 23) = 0;
      *(_BYTE *)v5 = 0;
      v5 = (__int128 *)((char *)v5 + 24);
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v3;
  char v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = *((_BYTE *)a3 + 23);
    if (v5 >= 0)
      v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    else
      v6 = a3[1];
    if (v5 >= 0)
      v7 = (unsigned __int8 *)a3;
    else
      v7 = *a3;
    do
    {
      v8 = *(unsigned __int8 *)(v3 + 23);
      if ((v8 & 0x80u) == 0)
        v9 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
      else
        v9 = *(unsigned __int8 **)(v3 + 8);
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v3, v7, *(_QWORD *)(v3 + 8)))
            return v3;
        }
        else
        {
          if (!*(_BYTE *)(v3 + 23))
            return v3;
          v10 = 0;
          while (*(unsigned __int8 *)(v3 + v10) == v7[v10])
          {
            if (v8 == ++v10)
              return v3;
          }
        }
      }
      v3 += 24;
    }
    while (v3 != a2);
    return a2;
  }
  return v3;
}

_QWORD *std::shared_ptr<MIL::IRNamedValueType>::operator=[abi:ne180100]<MIL::IRNamedValueType,std::default_delete<MIL::IRNamedValueType>,void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  if (*a2)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &unk_1EA993900;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  *a2 = 0;
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v5;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

uint64_t MIL::Util::Span<unsigned long,18446744073709551615ul>::At(_QWORD *a1, unint64_t a2)
{
  std::runtime_error *exception;

  if (a1[1] <= a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_1EA992578, MEMORY[0x1E0DE42B0]);
  }
  return *a1 + 8 * a2;
}

void sub_1E05F6298(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

MIL::Builder::BlockBuilder::BlockBuilderImpl *std::unique_ptr<MIL::Builder::BlockBuilder::BlockBuilderImpl>::reset[abi:ne180100](MIL::Builder::BlockBuilder::BlockBuilderImpl **a1, MIL::Builder::BlockBuilder::BlockBuilderImpl *a2)
{
  MIL::Builder::BlockBuilder::BlockBuilderImpl *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    MIL::Builder::BlockBuilder::BlockBuilderImpl::~BlockBuilderImpl(result);
    JUMPOUT(0x1E0C023A0);
  }
  return result;
}

void MIL::Builder::BlockBuilder::BlockBuilderImpl::~BlockBuilderImpl(MIL::Builder::BlockBuilder::BlockBuilderImpl *this)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;

  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>>::~__hash_table((uint64_t)this + 384);
  v2 = *((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v2)
    std::default_delete<MIL::Builder::BlockBuilder::DataDependencyGraph>::operator()[abi:ne180100]((uint64_t)this + 376, v2);
  std::__hash_table<std::unique_ptr<MIL::Builder::Variable const>,std::hash<std::unique_ptr<MIL::Builder::Variable const>>,std::equal_to<std::unique_ptr<MIL::Builder::Variable const>>,std::allocator<std::unique_ptr<MIL::Builder::Variable const>>>::~__hash_table((uint64_t)this + 336);
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>>>::~__hash_table((uint64_t)this + 296);
  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table((uint64_t)this + 256);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)this + 240);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 200);
  v4 = (void **)((char *)this + 176);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 152);
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>>>::~__hash_table((uint64_t)this + 112);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 72);
  v4 = (void **)((char *)this + 48);
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

uint64_t std::__hash_table<std::unique_ptr<MIL::Builder::Variable const>,std::hash<std::unique_ptr<MIL::Builder::Variable const>>,std::equal_to<std::unique_ptr<MIL::Builder::Variable const>>,std::allocator<std::unique_ptr<MIL::Builder::Variable const>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::unique_ptr<MIL::Builder::Variable const>,std::hash<std::unique_ptr<MIL::Builder::Variable const>>,std::equal_to<std::unique_ptr<MIL::Builder::Variable const>>,std::allocator<std::unique_ptr<MIL::Builder::Variable const>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::unique_ptr<MIL::Builder::Variable const>,std::hash<std::unique_ptr<MIL::Builder::Variable const>>,std::equal_to<std::unique_ptr<MIL::Builder::Variable const>>,std::allocator<std::unique_ptr<MIL::Builder::Variable const>>>::__deallocate_node(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = v2[2];
      v2[2] = 0;
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_QWORD *MIL::Builder::BlockBuilder::BlockBuilderImpl::BlockBuilderImpl(_QWORD *a1, _QWORD *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::string *v13;
  __int128 v14;
  std::runtime_error *exception;
  std::runtime_error *v16;
  _BYTE v17[32];
  int v18;
  _BYTE v19[32];
  int v20;

  *a1 = *a2;
  v5 = a2[1];
  a1[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *a3;
  a1[4] = *((_QWORD *)a3 + 2);
  *((_OWORD *)a1 + 1) = v8;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  memset(v19, 0, sizeof(v19));
  v20 = 1065353216;
  memset(v17, 0, sizeof(v17));
  v18 = 1065353216;
  MIL::IRMutableScope::Make(a4, (uint64_t *)v19, (uint64_t *)v17, a1 + 5);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v17);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v19);
  *((_OWORD *)a1 + 3) = 0u;
  a1[12] = 0;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_DWORD *)a1 + 26) = 1065353216;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_DWORD *)a1 + 36) = 1065353216;
  *(_OWORD *)(a1 + 19) = 0u;
  *(_OWORD *)(a1 + 25) = 0u;
  *(_OWORD *)(a1 + 21) = 0u;
  *(_OWORD *)(a1 + 23) = 0u;
  *(_OWORD *)(a1 + 27) = 0u;
  *((_DWORD *)a1 + 58) = 1065353216;
  MIL::UnknownLocation::Make(v19);
  v9 = *(_QWORD *)v19;
  a1[30] = *(_QWORD *)v19;
  if (v9)
  {
    v10 = (_QWORD *)operator new();
    v11 = *(_QWORD *)v19;
    *v10 = &unk_1EA9940C8;
    v10[1] = 0;
    v10[2] = 0;
    v10[3] = v11;
  }
  else
  {
    v10 = 0;
  }
  a1[31] = v10;
  *((_OWORD *)a1 + 16) = 0u;
  *((_OWORD *)a1 + 17) = 0u;
  *((_DWORD *)a1 + 72) = 1065353216;
  *(_OWORD *)(a1 + 37) = 0u;
  *(_OWORD *)(a1 + 39) = 0u;
  *((_DWORD *)a1 + 82) = 1065353216;
  *((_OWORD *)a1 + 21) = 0u;
  *((_OWORD *)a1 + 22) = 0u;
  *((_DWORD *)a1 + 92) = 1065353216;
  *(_OWORD *)(a1 + 47) = 0u;
  *(_OWORD *)(a1 + 49) = 0u;
  a1[51] = 0;
  *((_DWORD *)a1 + 104) = 1065353216;
  if (!*a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot initialize a BlockBuilder with an empty context.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (!(*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 16))(*a1, a1 + 2))
  {
    v16 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v13 = std::string::append((std::string *)v17, " is not registered in the context.");
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    *(_QWORD *)&v19[16] = *((_QWORD *)&v13->__r_.__value_.__l + 2);
    *(_OWORD *)v19 = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v16, (const std::string *)v19);
    __cxa_throw(v16, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return a1;
}

void sub_1E05F66AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, _Unwind_Exception *exception_object, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  void **v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  if (a27 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    if ((a10 & 1) == 0)
    {
LABEL_8:
      std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>>::~__hash_table(v27 + 384);
      v36 = *v34;
      *v34 = 0;
      if (v36)
        std::default_delete<MIL::Builder::BlockBuilder::DataDependencyGraph>::operator()[abi:ne180100]((uint64_t)v34, v36);
      std::__hash_table<std::unique_ptr<MIL::Builder::Variable const>,std::hash<std::unique_ptr<MIL::Builder::Variable const>>,std::equal_to<std::unique_ptr<MIL::Builder::Variable const>>,std::allocator<std::unique_ptr<MIL::Builder::Variable const>>>::~__hash_table(v27 + 336);
      std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>>>::~__hash_table(v33);
      std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table(v27 + 256);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v32);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v31);
      __p = (void *)(v30 + 128);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>>>::~__hash_table(v35);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v30 + 24);
      __p = (void *)v30;
      std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      v37 = *v29;
      *v29 = 0;
      if (v37)
        (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
      if (*(char *)(v27 + 39) < 0)
        operator delete(*v28);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v27);
      _Unwind_Resume(a1);
    }
  }
  else if (!(_DWORD)a10)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(a11);
  goto LABEL_8;
}

uint64_t *MIL::Builder::BlockBuilder::BlockBuilderImpl::BlockBuilderImpl(uint64_t *a1, uint64_t *a2, MIL::IRObject *this, __int128 *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  uint64_t Attributes;
  uint64_t *LocationPtr;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::string::size_type v32;
  std::runtime_error *exception;
  std::runtime_error *v35;
  std::string *v36;
  __int128 v37;
  uint64_t *v38;
  MIL::MILContextImpl *v39;
  std::__shared_weak_count *v40;
  MIL::MILContextImpl *v41;
  std::__shared_weak_count *v42;
  std::string v43;
  std::string v44;

  *a1 = *a2;
  v11 = a2[1];
  a1[1] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = *a4;
  a1[4] = *((_QWORD *)a4 + 2);
  *((_OWORD *)a1 + 1) = v14;
  *((_QWORD *)a4 + 1) = 0;
  *((_QWORD *)a4 + 2) = 0;
  *(_QWORD *)a4 = 0;
  *(_OWORD *)(a1 + 5) = 0u;
  *(_OWORD *)(a1 + 9) = 0u;
  v38 = a1 + 2;
  *(_OWORD *)(a1 + 11) = 0u;
  *(_OWORD *)(a1 + 7) = 0u;
  *((_DWORD *)a1 + 26) = 1065353216;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_DWORD *)a1 + 36) = 1065353216;
  *(_OWORD *)(a1 + 19) = 0u;
  *(_OWORD *)(a1 + 21) = 0u;
  *(_OWORD *)(a1 + 23) = 0u;
  Attributes = MIL::IRObject::GetAttributes(this);
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)(a1 + 25), Attributes);
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  a1[30] = *LocationPtr;
  v17 = LocationPtr[1];
  a1[31] = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  *((_OWORD *)a1 + 16) = 0u;
  *((_OWORD *)a1 + 17) = 0u;
  *((_DWORD *)a1 + 72) = 1065353216;
  *(_OWORD *)(a1 + 37) = 0u;
  *(_OWORD *)(a1 + 39) = 0u;
  *((_DWORD *)a1 + 82) = 1065353216;
  *((_OWORD *)a1 + 21) = 0u;
  *((_OWORD *)a1 + 22) = 0u;
  *((_DWORD *)a1 + 92) = 1065353216;
  a1[51] = 0;
  *(_OWORD *)(a1 + 47) = 0u;
  *(_OWORD *)(a1 + 49) = 0u;
  *((_DWORD *)a1 + 104) = 1065353216;
  if (!*a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot initialize a BlockBuilder with an empty context.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (!(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)*a1 + 16))(*a1, v38))
  {
    v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v36 = std::string::append(&v43, " is not registered in the context.");
    v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v35, &v44);
    __cxa_throw(v35, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if ((MIL::IRCachedScope::IsCacheEnabled((MIL::IRObject *)((char *)this + 64)) & 1) != 0)
  {
    v20 = (std::__shared_weak_count *)a2[1];
    v39 = (MIL::MILContextImpl *)*a2;
    v40 = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(p_shared_owners);
      while (__stxr(v22 + 1, p_shared_owners));
    }
    MIL::Builder::BlockBuilder::BlockBuilderImpl::BlockBuilderImplCommon(a1, &v39, this, a5, a6);
    v23 = v40;
    if (v40)
    {
      v24 = (unint64_t *)&v40->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
  }
  else
  {
    (*(void (**)(std::string *__return_ptr, MIL::IRObject *))(*(_QWORD *)this + 32))(&v44, this);
    v26 = (std::__shared_weak_count *)a2[1];
    v41 = (MIL::MILContextImpl *)*a2;
    v42 = v26;
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    MIL::Builder::BlockBuilder::BlockBuilderImpl::BlockBuilderImplCommon(a1, &v41, v44.__r_.__value_.__l.__data_, a5, a6);
    v29 = v42;
    if (v42)
    {
      v30 = (unint64_t *)&v42->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = v44.__r_.__value_.__r.__words[0];
    v44.__r_.__value_.__r.__words[0] = 0;
    if (v32)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v32 + 8))(v32);
  }
  return a1;
}

void sub_1E05F6B60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, char a12, uint64_t a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  void *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  int v33;
  uint64_t v35;
  uint64_t v36;

  if (a27 < 0)
    operator delete(__p);
  if (a21 < 0)
  {
    operator delete(a16);
    if ((v33 & 1) == 0)
    {
LABEL_8:
      std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>>::~__hash_table(v27 + 384);
      v35 = *v32;
      *v32 = 0;
      if (v35)
        std::default_delete<MIL::Builder::BlockBuilder::DataDependencyGraph>::operator()[abi:ne180100]((uint64_t)v32, v35);
      std::__hash_table<std::unique_ptr<MIL::Builder::Variable const>,std::hash<std::unique_ptr<MIL::Builder::Variable const>>,std::equal_to<std::unique_ptr<MIL::Builder::Variable const>>,std::allocator<std::unique_ptr<MIL::Builder::Variable const>>>::~__hash_table(v27 + 336);
      std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>>>::~__hash_table(v31);
      std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table(v27 + 256);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v27 + 240);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a9);
      __p = v29 + 17;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>>>::~__hash_table(v30);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a10);
      __p = v29 + 1;
      std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      v36 = *v29;
      *v29 = 0;
      if (v36)
        (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      if (*(char *)(v27 + 39) < 0)
        operator delete(*a11);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v27);
      _Unwind_Resume(a1);
    }
  }
  else if (!v33)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v28);
  goto LABEL_8;
}

uint64_t MIL::Builder::BlockBuilder::BlockBuilderImpl::BlockBuilderImplCommon(uint64_t *a1, MIL::MILContextImpl **a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  MIL::IRObject ****v15;
  MIL::IRObject **v16;
  MIL::IRObject *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  MIL::IRNamedValueType **v25;
  MIL::IRNamedValueType **v26;
  unsigned __int8 *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  __int128 *v33;
  unsigned __int8 *v34;
  _QWORD *v35;
  _QWORD *v36;
  BOOL v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t **v41;
  uint64_t v42;
  std::runtime_error *exception;
  _QWORD *v45;
  MIL::IRObject **i;
  __int128 v48[2];
  std::string v49;
  char *v50;
  std::__shared_weak_count *v51;
  uint64_t v52[5];
  uint64_t v53[2];
  uint64_t v54;
  __int128 *v55[2];

  v9 = a3 + 8;
  v10 = (*(uint64_t (**)(_QWORD *))(a3[8] + 32))(a3 + 8);
  std::unordered_map<std::string,MIL::IRValueType const*>::unordered_map((uint64_t)v53, v10);
  if (v54)
  {
    if (*(void (***)(MIL::MILContextImpl *__hidden))*a2 != &off_1EA999688)
      __cxa_bad_cast();
    if (!MIL::MILContextImpl::TypeIsRegistered(*a2, *(const MIL::IRValueType **)(v54 + 40)))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Cannot initialize a BlockBuilder using a different MILContext than the IRBlock.");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  v11 = (*(uint64_t (**)(_QWORD *))(*v9 + 64))(v9);
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v52, v11);
  MIL::IRMutableScope::Make(a4, v53, v52, v48);
  v12 = *(_QWORD *)&v48[0];
  *(_QWORD *)&v48[0] = 0;
  v13 = a1[5];
  a1[5] = v12;
  if (v13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(_QWORD *)&v48[0];
    *(_QWORD *)&v48[0] = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  v15 = (MIL::IRObject ****)(*(uint64_t (**)(_QWORD *))(*a3 + 56))(a3);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)a1 + 6, ((char *)(*v15)[1] - (char *)**v15) >> 4);
  v16 = **v15;
  v45 = a3;
  for (i = (*v15)[1]; v16 != i; v16 += 2)
  {
    v17 = *v16;
    v18 = (std::__shared_weak_count *)a1[1];
    v50 = (char *)*a1;
    v51 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(p_shared_owners);
      while (__stxr(v20 + 1, p_shared_owners));
    }
    if (*((char *)a1 + 39) < 0)
      std::string::__init_copy_ctor_external(&v49, (const std::string::value_type *)a1[2], a1[3]);
    else
      v49 = *(std::string *)(a1 + 2);
    MIL::Builder::OperationBuilder::Make(v17, (uint64_t)&v50, (uint64_t)&v49, a1[5], a5, (uint64_t *)v48);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v49.__r_.__value_.__l.__data_);
    v21 = v51;
    if (v51)
    {
      v22 = (unint64_t *)&v51->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    std::vector<std::shared_ptr<MIL::IROperation>>::push_back[abi:ne180100]((char **)a1 + 6, v48);
    v24 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)v17 + 176))(v17);
    v25 = *(MIL::IRNamedValueType ***)v24;
    v26 = *(MIL::IRNamedValueType ***)(v24 + 8);
    while (v25 != v26)
    {
      v55[0] = (__int128 *)MIL::IRNamedValueType::GetName(*v25);
      v27 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(a1 + 9), (unsigned __int8 *)v55[0], (uint64_t)&std::piecewise_construct, v55);
      std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]((_QWORD *)v27 + 5, (uint64_t *)v48);
      v25 += 2;
    }
    v28 = (_QWORD *)(*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)v17 + 160))(v17);
    v29 = v28 + 1;
    v30 = (_QWORD *)*v28;
    if ((_QWORD *)*v28 != v28 + 1)
    {
      do
      {
        v32 = (_QWORD *)v30[7];
        v31 = (_QWORD *)v30[8];
        while (v32 != v31)
        {
          v33 = (__int128 *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v32 + 32))(*v32);
          if (v33)
          {
            v55[0] = v33;
            v34 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(a1 + 14), (unsigned __int8 *)v33, (uint64_t)&std::piecewise_construct, v55);
            std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::shared_ptr<MIL::Builder::OperationBuilder> const&>((uint64_t)(v34 + 40), v48, v48);
          }
          v32 += 2;
        }
        v35 = (_QWORD *)v30[1];
        if (v35)
        {
          do
          {
            v36 = v35;
            v35 = (_QWORD *)*v35;
          }
          while (v35);
        }
        else
        {
          do
          {
            v36 = (_QWORD *)v30[2];
            v37 = *v36 == (_QWORD)v30;
            v30 = v36;
          }
          while (!v37);
        }
        v30 = v36;
      }
      while (v36 != v29);
    }
    v38 = (std::__shared_weak_count *)*((_QWORD *)&v48[0] + 1);
    if (*((_QWORD *)&v48[0] + 1))
    {
      v39 = (unint64_t *)(*((_QWORD *)&v48[0] + 1) + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
  }
  v41 = (uint64_t **)(*(uint64_t (**)(_QWORD *))(*v45 + 40))(v45);
  if (a1 + 19 != (uint64_t *)v41)
    std::vector<std::shared_ptr<MIL::IRArgument>>::__assign_with_size[abi:ne180100]<std::shared_ptr<MIL::IRArgument> const*,std::shared_ptr<MIL::IRArgument> const*>((uint64_t)(a1 + 19), *v41, v41[1], ((char *)v41[1] - (char *)*v41) >> 4);
  v42 = (*(uint64_t (**)(_QWORD *))(*v45 + 88))(v45);
  if (a1 + 22 != (uint64_t *)v42)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 22), *(std::string **)v42, *(__int128 **)(v42 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v42 + 8) - *(_QWORD *)v42) >> 3));
  MIL::Builder::BlockBuilder::BlockBuilderImpl::CreateStateDependencyMap((MIL::Builder::BlockBuilder::BlockBuilderImpl *)a1, (uint64_t)v48);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>>::__move_assign((uint64_t)(a1 + 48), (uint64_t *)v48);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>>::~__hash_table((uint64_t)v48);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v52);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v53);
}

void sub_1E05F711C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27)
{
  void *v27;
  uint64_t v28;

  __cxa_free_exception(v27);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v28 - 144);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::DataDependency::GetVariableName(MIL::Builder::DataDependency *this)
{
  return **(_QWORD **)this;
}

uint64_t **MIL::Builder::DataDependency::GetProducer@<X0>(uint64_t **this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v2 = **this;
  v4 = *(_QWORD *)(v2 + 24);
  v3 = *(_QWORD *)(v2 + 32);
  *a2 = v4;
  a2[1] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return this;
}

uint64_t MIL::Builder::DataDependency::GetProducerOutputIndex(MIL::Builder::DataDependency *this)
{
  return *(_QWORD *)(**(_QWORD **)this + 40);
}

uint64_t MIL::Builder::DataDependency::GetConsumer@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)this + 24);
  *a2 = *(_QWORD *)(*(_QWORD *)this + 16);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t MIL::Builder::DataDependency::IsLexicalConsumer(MIL::Builder::DataDependency *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)this + 32);
}

uint64_t MIL::Builder::DataDependency::GetConsumerArgumentIndex(MIL::Builder::DataDependency *this)
{
  uint64_t v1;
  std::logic_error *exception;

  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)(*(_QWORD *)this + 16) || *(_BYTE *)(v1 + 32))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Attempted to call GetConsumerArgumentIndex on a data dependency that does not have an explicit consumer.");
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  return *(unsigned int *)(v1 + 64);
}

void sub_1E05F72B0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::DataDependency::GetConsumerNestedBlockIndex(MIL::Builder::DataDependency *this)
{
  uint64_t v1;
  std::logic_error *exception;

  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)(*(_QWORD *)this + 16) || !*(_BYTE *)(v1 + 32))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Attempted to call GetConsumerNestedBlockIndex on a data dependency that does not have a lexical consumer.");
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  return *(_QWORD *)(v1 + 72);
}

void sub_1E05F7324(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::DataDependency::GetConsumerParameterName(MIL::Builder::DataDependency *this)
{
  uint64_t v1;
  std::logic_error *exception;

  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)(*(_QWORD *)this + 16) || *(_BYTE *)(v1 + 32))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Attempted to call GetConsumerParameterName on a data dependency that does not have an explicit consumer.");
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  return v1 + 40;
}

void sub_1E05F7398(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__n128 MIL::Builder::DataDependency::DataDependency(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  return result;
}

double MIL::Builder::DataDependency::MakeWithNonLexicalConsumer@<D0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  char *v13;
  double result;
  __int128 v15;
  __int128 v16;
  std::string v17;
  __int128 v18;

  v7 = a1[1];
  *(_QWORD *)&v15 = *a1;
  *((_QWORD *)&v15 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a2[1];
  *(_QWORD *)&v16 = *a2;
  *((_QWORD *)&v16 + 1) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v17 = *(std::string *)a3;
  LODWORD(v18) = a4;
  *((_QWORD *)&v18 + 1) = -1;
  v13 = (char *)operator new(0x68uLL);
  *(_OWORD *)(v13 + 24) = v15;
  *((_QWORD *)v13 + 2) = 0;
  *(_QWORD *)v13 = &unk_1EA99A750;
  *((_QWORD *)v13 + 1) = 0;
  *(_OWORD *)(v13 + 40) = v16;
  v13[56] = 0;
  *(std::string *)(v13 + 64) = v17;
  result = *(double *)&v18;
  *(_OWORD *)(v13 + 88) = v18;
  *a5 = v13 + 24;
  a5[1] = v13;
  return result;
}

void sub_1E05F74C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v9);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Builder::DataDependency::DataDependencyImpl::~DataDependencyImpl(void **this)
{
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)(this + 2));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

double MIL::Builder::DataDependency::MakeWithBlockOutputConsumer@<D0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  char *v7;
  double result;
  __int128 v9;

  v4 = *a1;
  v3 = a1[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  LODWORD(v9) = -1;
  *((_QWORD *)&v9 + 1) = -1;
  v7 = (char *)operator new(0x68uLL);
  *((_QWORD *)v7 + 3) = v4;
  *((_QWORD *)v7 + 2) = 0;
  *(_QWORD *)v7 = &unk_1EA99A750;
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 5) = 0;
  *((_QWORD *)v7 + 6) = 0;
  *((_QWORD *)v7 + 4) = v3;
  v7[56] = 0;
  *((_QWORD *)v7 + 9) = 0;
  *((_QWORD *)v7 + 10) = 0;
  *((_QWORD *)v7 + 8) = 0;
  result = *(double *)&v9;
  *(_OWORD *)(v7 + 88) = v9;
  *a2 = v7 + 24;
  a2[1] = v7;
  return result;
}

void sub_1E05F75DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  MIL::Builder::DataDependency::DataDependencyImpl::~DataDependencyImpl(&a9);
  _Unwind_Resume(a1);
}

_QWORD **MIL::Builder::DataDependency::GetProducerInfo@<X0>(_QWORD **this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = (*this)[1];
  *a2 = **this;
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

BOOL MIL::Builder::operator==(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

BOOL MIL::Builder::operator!=(_QWORD *a1, _QWORD *a2)
{
  return *a1 != *a2;
}

unint64_t std::hash<MIL::Builder::DataDependency>::operator()(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;

  v2 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v2 >> 47) ^ v2)) ^ ((0x9DDFEA08EB382D69
                                                                      * (HIDWORD(*a2) ^ (v2 >> 47) ^ v2)) >> 47));
}

void std::__shared_ptr_emplace<MIL::Builder::DataDependency::DataDependencyImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99A750;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIL::Builder::DataDependency::DataDependencyImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99A750;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E0C023A0);
}

uint64_t std::__shared_ptr_emplace<MIL::Builder::DataDependency::DataDependencyImpl>::__on_zero_shared(uint64_t a1)
{
  char v2;

  return std::allocator<MIL::Builder::DataDependency::DataDependencyImpl>::destroy[abi:ne180100]((uint64_t)&v2, a1 + 24);
}

uint64_t std::allocator<MIL::Builder::DataDependency::DataDependencyImpl>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 63) < 0)
    operator delete(*(void **)(a2 + 40));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](a2 + 16);
  return std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](a2);
}

_QWORD *MIL::Builder::FunctionBuilder::FunctionBuilder(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  *a1 = &off_1EA99A7A0;
  std::make_unique[abi:ne180100]<MIL::Builder::FunctionBuilder::FunctionBuilderImpl,std::shared_ptr<MIL::MILContext> &,std::shared_ptr<MIL::IRFunction const> &,decltype(nullptr)>(a2, a3, a1 + 1);
  return a1;
}

{
  *a1 = &off_1EA99A7A0;
  std::make_unique[abi:ne180100]<MIL::Builder::FunctionBuilder::FunctionBuilderImpl,std::shared_ptr<MIL::MILContext> &,std::shared_ptr<MIL::IRFunction const> &,decltype(nullptr)>(a2, a3, a1 + 1);
  return a1;
}

void std::make_unique[abi:ne180100]<MIL::Builder::FunctionBuilder::FunctionBuilderImpl,std::shared_ptr<MIL::MILContext> &,std::shared_ptr<MIL::IRFunction const> &,decltype(nullptr)>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  MIL::IRObject *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  v6 = operator new();
  v7 = v6;
  v8 = (std::__shared_weak_count *)a1[1];
  v22 = *a1;
  v23 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = *(std::__shared_weak_count **)(a2 + 8);
  v20 = *(MIL::IRObject **)a2;
  v21 = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  MIL::Builder::FunctionBuilder::FunctionBuilderImpl::FunctionBuilderImpl(v6, &v22, &v20, 0);
  *a3 = v7;
  v14 = v21;
  if (v21)
  {
    v15 = (unint64_t *)&v21->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v23;
  if (v23)
  {
    v18 = (unint64_t *)&v23->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_1E05F7890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  MEMORY[0x1E0C023A0](v11, 0x10F2C4041A7B0FCLL);
  _Unwind_Resume(a1);
}

_QWORD *MIL::Builder::FunctionBuilder::FunctionBuilder(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v13;
  std::__shared_weak_count *v14;

  *a1 = &off_1EA99A7A0;
  v4 = operator new();
  v5 = v4;
  v6 = (std::__shared_weak_count *)a2[1];
  v13 = *a2;
  v14 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  MIL::Builder::FunctionBuilder::FunctionBuilderImpl::FunctionBuilderImpl(v4, &v13, 0);
  a1[1] = v5;
  v9 = v14;
  if (v14)
  {
    v10 = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return a1;
}

void sub_1E05F79DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  uint64_t v10;

  if (a10)
    MIL::Builder::FunctionBuilder::FunctionBuilder(a10);
  MEMORY[0x1E0C023A0](v10, 0x10F2C4041A7B0FCLL);
  _Unwind_Resume(a1);
}

void MIL::Builder::FunctionBuilder::~FunctionBuilder(MIL::Builder::FunctionBuilder *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1EA99A7A0;
  v3 = *((_QWORD *)this + 1);
  v1 = (_QWORD *)((char *)this + 8);
  v2 = v3;
  *v1 = 0;
  if (v3)
    std::default_delete<MIL::Builder::FunctionBuilder::FunctionBuilderImpl>::operator()[abi:ne180100]((uint64_t)v1, v2);
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1EA99A7A0;
  v3 = *((_QWORD *)this + 1);
  v1 = (_QWORD *)((char *)this + 8);
  v2 = v3;
  *v1 = 0;
  if (v3)
    std::default_delete<MIL::Builder::FunctionBuilder::FunctionBuilderImpl>::operator()[abi:ne180100]((uint64_t)v1, v2);
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1EA99A7A0;
  v3 = *((_QWORD *)this + 1);
  v1 = (_QWORD *)((char *)this + 8);
  v2 = v3;
  *v1 = 0;
  if (v3)
    std::default_delete<MIL::Builder::FunctionBuilder::FunctionBuilderImpl>::operator()[abi:ne180100]((uint64_t)v1, v2);
  JUMPOUT(0x1E0C023A0);
}

unsigned __int8 *MIL::Builder::FunctionBuilder::GetBlock@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  return MIL::Builder::FunctionBuilder::FunctionBuilderImpl::GetBlock(*(_QWORD *)(a1 + 8), a2, a3);
}

unsigned __int8 *MIL::Builder::FunctionBuilder::FunctionBuilderImpl::GetBlock@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((_QWORD *)(a1 + 40), a2);
  if (!result)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v5 = *((_QWORD *)result + 6);
  *a3 = *((_QWORD *)result + 5);
  a3[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void MIL::Builder::FunctionBuilder::Make(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12[2];

  v4 = (_QWORD *)operator new();
  v5 = v4;
  v6 = *a1;
  v7 = (std::__shared_weak_count *)a1[1];
  v12[0] = v6;
  v12[1] = (uint64_t)v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  MIL::Builder::FunctionBuilder::FunctionBuilder(v4, v12);
  *a2 = v5;
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E05F7BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x1E0C023A0](v9, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void MIL::Builder::FunctionBuilder::Make(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;

  v6 = (_QWORD *)operator new();
  v7 = v6;
  v8 = a1[1];
  v22 = *a1;
  v23 = (std::__shared_weak_count *)v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = (std::__shared_weak_count *)a2[1];
  v20 = *a2;
  v21 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  *v6 = &off_1EA99A7A0;
  v24 = 0;
  std::make_unique[abi:ne180100]<MIL::Builder::FunctionBuilder::FunctionBuilderImpl,std::shared_ptr<MIL::MILContext> &,std::shared_ptr<MIL::IRFunction const> &,decltype(nullptr)>(&v22, (uint64_t)&v20, v6 + 1);
  *a3 = v7;
  v14 = v21;
  if (v21)
  {
    v15 = (unint64_t *)&v21->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v23;
  if (v23)
  {
    v18 = (unint64_t *)&v23->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_1E05F7D44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  MEMORY[0x1E0C023A0](v2, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void MIL::Builder::FunctionBuilder::CreateFunction(MIL::Builder::FunctionBuilder::FunctionBuilderImpl **this@<X0>, _anonymous_namespace_::IRFunctionImpl **a2@<X8>)
{
  MIL::Builder::FunctionBuilder::FunctionBuilderImpl::CreateFunction(this[1], a2);
}

void MIL::Builder::FunctionBuilder::FunctionBuilderImpl::CreateFunction(MIL::Builder::FunctionBuilder::FunctionBuilderImpl *this@<X0>, _anonymous_namespace_::IRFunctionImpl **a2@<X8>)
{
  const void **i;
  _anonymous_namespace_::IRBlockImpl *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::string __p;
  __int128 v13;
  _anonymous_namespace_::IRBlockImpl *v14;
  uint64_t *v15;
  _QWORD *v16[2];
  uint64_t v17[5];
  uint64_t v18[3];

  std::map<std::string,MIL::IRValueType const*>::map[abi:ne180100](v18, (const void ***)this);
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v17, (uint64_t)this + 168);
  v16[0] = 0;
  v16[1] = 0;
  v15 = (uint64_t *)v16;
  for (i = (const void **)*((_QWORD *)this + 7); i; i = (const void **)*i)
  {
    MIL::Builder::BlockBuilder::CreateBlock(&v14, (__int128 ***)i[5]);
    std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__emplace_unique_key_args<std::string,std::string const&,std::unique_ptr<MIL::IRBlock>>(&v15, i + 2, (uint64_t)(i + 2), (uint64_t *)&v14);
    v5 = v14;
    v14 = 0;
    if (v5)
      (*(void (**)(_anonymous_namespace_::IRBlockImpl *))(*(_QWORD *)v5 + 8))(v5);
  }
  v6 = *((_QWORD *)this + 20);
  *(_QWORD *)&v13 = *((_QWORD *)this + 19);
  *((_QWORD *)&v13 + 1) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  if (*((char *)this + 111) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 11), *((_QWORD *)this + 12));
  else
    __p = *(std::string *)((char *)this + 88);
  MIL::IRFunction::Make(&v13, v18, (uint64_t)&__p, &v15, v17, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::destroy((uint64_t)&v15, v16[0]);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v17);
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy((uint64_t)v18, (char *)v18[1]);
}

void sub_1E05F7EF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, _QWORD *a20,uint64_t a21,char a22)
{
  uint64_t v22;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::destroy((uint64_t)&a19, a20);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a22);
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy(v22 - 56, *(char **)(v22 - 48));
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::FunctionBuilder::AddInput(std::string::size_type a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  std::string __p;

  v5 = *(_QWORD *)(a1 + 8);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v6 = MIL::Builder::FunctionBuilder::FunctionBuilderImpl::AddInput(v5, (const void **)&__p.__r_.__value_.__l.__data_, a3, a1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v6;
}

void sub_1E05F7FF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Builder::FunctionBuilder::FunctionBuilderImpl::AddInput(uint64_t a1, const void **a2, uint64_t a3, std::string::size_type a4)
{
  void *exception;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD v13[3];
  _QWORD v14[2];
  const void **v15;

  if (a1 + 8 != std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::find<std::string>(a1, a2))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v10 = *(_QWORD *)(a1 + 160);
    v14[0] = *(_QWORD *)(a1 + 152);
    v14[1] = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    std::string::basic_string[abi:ne180100]<0>(v13, "input already defined");
    MIL::InvalidOperationError::InvalidOperationError(exception, v14, v13);
  }
  (*(void (**)(_QWORD, const void **, uint64_t, uint64_t))(**(_QWORD **)(a1 + 80) + 80))(*(_QWORD *)(a1 + 80), a2, a3, 1);
  v15 = a2;
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v15)[7] = a3;
  return MIL::Builder::FunctionBuilder::FunctionBuilderImpl::TryGetVariable(a1, (uint64_t)a2, a4);
}

void sub_1E05F811C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;
  int v17;

  if (a15 < 0)
  {
    operator delete(__p);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
    if ((v17 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else
  {
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
    if (!v17)
      goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

BOOL MIL::Builder::FunctionBuilder::RemoveInput(uint64_t a1, const void **a2)
{
  return std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__erase_unique<std::string>(*(uint64_t ***)(a1 + 8), a2) != 0;
}

uint64_t MIL::Builder::FunctionBuilder::TryGetInput(std::string::size_type a1, uint64_t a2)
{
  return MIL::Builder::FunctionBuilder::FunctionBuilderImpl::TryGetVariable(*(_QWORD *)(a1 + 8), a2, a1);
}

void MIL::Builder::FunctionBuilder::GetInputs(MIL::Builder::FunctionBuilder::FunctionBuilderImpl **this@<X0>, uint64_t a2@<X8>)
{
  MIL::Builder::FunctionBuilder::FunctionBuilderImpl::GetInputs(this[1], (const MIL::Builder::FunctionBuilder *)this, a2);
}

void MIL::Builder::FunctionBuilder::FunctionBuilderImpl::GetInputs(MIL::Builder::FunctionBuilder::FunctionBuilderImpl *this@<X0>, const MIL::Builder::FunctionBuilder *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  MIL::Builder::FunctionBuilder::FunctionBuilderImpl *v7;
  MIL::Builder::FunctionBuilder::FunctionBuilderImpl *v8;
  BOOL v9;
  uint64_t Variable;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a3, (unint64_t)(float)*((unint64_t *)this + 2));
  v6 = *(_QWORD *)this;
  if (*(MIL::Builder::FunctionBuilder::FunctionBuilderImpl **)this != (MIL::Builder::FunctionBuilder::FunctionBuilderImpl *)((char *)this + 8))
  {
    do
    {
      Variable = MIL::Builder::FunctionBuilder::FunctionBuilderImpl::TryGetVariable((uint64_t)this, v6 + 32, (std::string::size_type)a2);
      std::__hash_table<MIL::Builder::Variable const*,std::hash<MIL::Builder::Variable const*>,std::equal_to<MIL::Builder::Variable const*>,std::allocator<MIL::Builder::Variable const*>>::__emplace_unique_key_args<MIL::Builder::Variable const*,MIL::Builder::Variable const*>(a3, &Variable, &Variable);
      v7 = *(MIL::Builder::FunctionBuilder::FunctionBuilderImpl **)(v6 + 8);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(MIL::Builder::FunctionBuilder::FunctionBuilderImpl **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = *(MIL::Builder::FunctionBuilder::FunctionBuilderImpl **)(v6 + 16);
          v9 = *(_QWORD *)v8 == v6;
          v6 = (unint64_t)v8;
        }
        while (!v9);
      }
      v6 = (unint64_t)v8;
    }
    while (v8 != (MIL::Builder::FunctionBuilder::FunctionBuilderImpl *)((char *)this + 8));
  }
}

void sub_1E05F8270(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void MIL::Builder::FunctionBuilder::AddBlock(uint64_t a1@<X0>, uint64_t a2@<X1>, MIL::Builder::BlockBuilder **a3@<X8>)
{
  _QWORD *v3;
  void *__p[2];
  uint64_t v5;

  v3 = *(_QWORD **)(a1 + 8);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  MIL::Builder::FunctionBuilder::FunctionBuilderImpl::AddBlock(v3, (uint64_t)__p, a3);
  if (SHIBYTE(v5) < 0)
    operator delete(__p[0]);
}

void sub_1E05F82DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MIL::Builder::FunctionBuilder::FunctionBuilderImpl::AddBlock(_QWORD *a1@<X0>, uint64_t a2@<X1>, MIL::Builder::BlockBuilder **a3@<X8>)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  MIL::Builder::BlockBuilder *v9;
  MIL::Builder::BlockBuilder *v10;
  MIL::Builder::BlockBuilder *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  MIL::Builder::BlockBuilder *v21;
  std::__shared_weak_count *v22;
  void *__p[2];
  uint64_t v24;
  std::string v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  MIL::Builder::BlockBuilder *v28;

  v6 = (std::__shared_weak_count *)a1[4];
  v26 = a1[3];
  v27 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v25 = *(std::string *)a2;
  MIL::Builder::BlockBuilder::Make(&v26, (uint64_t)&v25, a1[10], &v28);
  v9 = v28;
  *a3 = v28;
  if (v9)
  {
    v10 = (MIL::Builder::BlockBuilder *)operator new();
    v11 = v28;
    *(_QWORD *)v10 = &unk_1EA99A7D0;
    *((_QWORD *)v10 + 1) = 0;
    *((_QWORD *)v10 + 2) = 0;
    *((_QWORD *)v10 + 3) = v11;
  }
  else
  {
    v10 = 0;
  }
  a3[1] = v10;
  v28 = 0;
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  v12 = v27;
  if (v27)
  {
    v13 = (unint64_t *)&v27->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  *(_OWORD *)__p = *(_OWORD *)a2;
  v24 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v15 = (std::__shared_weak_count *)a3[1];
  v21 = *a3;
  v22 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  MIL::Builder::FunctionBuilder::FunctionBuilderImpl::AddBlock((uint64_t)a1, (unsigned __int8 *)__p, &v21);
  v18 = v22;
  if (v22)
  {
    v19 = (unint64_t *)&v22->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (SHIBYTE(v24) < 0)
    operator delete(__p[0]);
}

void sub_1E05F84AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v23 - 56);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::FunctionBuilder::SelectedSpecialization(MIL::Builder::FunctionBuilder *this)
{
  return *((_QWORD *)this + 1) + 88;
}

std::string *MIL::Builder::FunctionBuilder::SetSpecialization(uint64_t a1, std::string *a2)
{
  return MIL::Builder::FunctionBuilder::FunctionBuilderImpl::SetSpecialization(*(_QWORD *)(a1 + 8), a2);
}

std::string *MIL::Builder::FunctionBuilder::FunctionBuilderImpl::SetSpecialization(uint64_t a1, std::string *a2)
{
  std::runtime_error *exception;
  std::string *v6;
  __int128 v7;
  std::string v8;
  std::string v9;

  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((_QWORD *)(a1 + 40), (unsigned __int8 *)a2))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v6 = std::string::append(&v8, ".");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v9.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v9);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return std::string::operator=((std::string *)(a1 + 88), a2);
}

void sub_1E05F85F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t MIL::Builder::FunctionBuilder::GetType(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 80) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 80), a2, 1);
}

uint64_t MIL::Builder::FunctionBuilder::GetLocation(MIL::Builder::FunctionBuilder *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 152);
}

uint64_t MIL::Builder::FunctionBuilder::GetLocationPtr(MIL::Builder::FunctionBuilder *this)
{
  return *((_QWORD *)this + 1) + 152;
}

void MIL::Builder::FunctionBuilder::SetLocation(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v2 = *(_QWORD *)(a1 + 8);
  v6 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  MIL::Builder::FunctionBuilder::FunctionBuilderImpl::SetLocation(v2, &v6);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1E05F86F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::FunctionBuilder::FunctionBuilderImpl::SetLocation(uint64_t a1, __int128 *a2)
{
  std::runtime_error *exception;

  if (!*(_QWORD *)a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot set location to nullptr.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](a1 + 152, a2);
}

void sub_1E05F8758(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Builder::FunctionBuilder::SetAttribute(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v4;
  unsigned __int8 *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  void *__p[2];
  uint64_t v11;
  void **v12;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *a2;
  v11 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v9 = *(_OWORD *)a3;
  *(_OWORD *)__p = v4;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v12 = __p;
  v5 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v3 + 168, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v12);
  std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]((uint64_t)(v5 + 40), &v9);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (*((_QWORD *)&v9 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__p[0]);
}

void sub_1E05F8828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

unsigned __int8 *MIL::Builder::FunctionBuilder::TryGetAttribute@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>((_QWORD *)(*(_QWORD *)(a1 + 8) + 168), a2);
  if (result)
  {
    v5 = *((_QWORD *)result + 6);
    *a3 = *((_QWORD *)result + 5);
    a3[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

uint64_t MIL::Builder::FunctionBuilder::GetContext@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v2 = *(_QWORD *)(this + 8);
  v4 = *(_QWORD *)(v2 + 24);
  v3 = *(_QWORD *)(v2 + 32);
  *a2 = v4;
  a2[1] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return this;
}

void MIL::Builder::FunctionBuilder::AddBlock(uint64_t a1, __int128 *a2, __int128 *a3)
{
  uint64_t v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;
  void *__p[2];
  uint64_t v10;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *a2;
  v10 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v8 = *a3;
  *(_OWORD *)__p = v4;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  MIL::Builder::FunctionBuilder::FunctionBuilderImpl::AddBlock(v3, (unsigned __int8 *)__p, (MIL::Builder::BlockBuilder **)&v8);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
}

void sub_1E05F8960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

unsigned __int8 *MIL::Builder::FunctionBuilder::FunctionBuilderImpl::AddBlock(uint64_t a1, unsigned __int8 *a2, MIL::Builder::BlockBuilder **a3)
{
  uint64_t OpsetName;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  __int128 v14;
  unint64_t *v15;
  unint64_t v16;
  unsigned __int8 *result;
  char v18;
  std::runtime_error *exception;
  std::runtime_error *v20;
  std::string *v21;
  __int128 v22;
  std::string v23;
  std::string v24;

  if (!*a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add nullptr BlockBuilder.");
    goto LABEL_27;
  }
  OpsetName = MIL::Builder::BlockBuilder::GetOpsetName(*a3);
  v7 = a2[23];
  if ((v7 & 0x80u) == 0)
    v8 = a2[23];
  else
    v8 = *((_QWORD *)a2 + 1);
  v9 = *(unsigned __int8 *)(OpsetName + 23);
  v10 = (char)v9;
  if ((v9 & 0x80u) != 0)
    v9 = *(_QWORD *)(OpsetName + 8);
  if (v8 != v9)
    goto LABEL_26;
  if (v10 >= 0)
    v11 = (unsigned __int8 *)OpsetName;
  else
    v11 = *(unsigned __int8 **)OpsetName;
  if ((v7 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)a2, v11, *((_QWORD *)a2 + 1)))
      goto LABEL_18;
LABEL_26:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot register a BlockBuilder with a different name than its specialization.");
    goto LABEL_27;
  }
  if (a2[23])
  {
    v12 = a2;
    while (*v12 == *v11)
    {
      ++v12;
      ++v11;
      if (!--v7)
        goto LABEL_18;
    }
    goto LABEL_26;
  }
LABEL_18:
  v13 = *(_QWORD *)(a1 + 24);
  MIL::Builder::BlockBuilder::GetContext((uint64_t)*a3, &v24);
  v14 = *(_OWORD *)&v24.__r_.__value_.__l.__data_;
  if (v24.__r_.__value_.__l.__size_)
  {
    v15 = (unint64_t *)(v24.__r_.__value_.__l.__size_ + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v14 + 1) + 16))(*((_QWORD *)&v14 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v14 + 1));
    }
  }
  if (v13 != (_QWORD)v14)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This FunctionBuilder holds a different MILContext than the one used to create this BlockBuilders.");
LABEL_27:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  MIL::Builder::BlockBuilder::SetParent(*a3, *(const MIL::IRScope **)(a1 + 80));
  result = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>>>::__emplace_unique_key_args<std::string,std::string&,std::shared_ptr<MIL::Builder::BlockBuilder>&>(a1 + 40, a2, (__int128 *)a2, (std::string::size_type *)a3);
  if (!v18)
  {
    v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v21 = std::string::append(&v23, " already has a Block in this FunctionBuilder.");
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v20, &v24);
    __cxa_throw(v20, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1E05F8B9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

BOOL MIL::Builder::FunctionBuilder::RemoveAttribute(uint64_t a1, unsigned __int8 *a2)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>((_QWORD *)(*(_QWORD *)(a1 + 8) + 168), a2) != 0;
}

uint64_t MIL::Builder::FunctionBuilder::GetAttributes(MIL::Builder::FunctionBuilder *this)
{
  return *((_QWORD *)this + 1) + 168;
}

uint64_t MIL::Builder::FunctionBuilder::GetSpecializations(MIL::Builder::FunctionBuilder *this)
{
  return *((_QWORD *)this + 1) + 40;
}

void MIL::Builder::FunctionBuilder::ClearInputs(MIL::Builder::FunctionBuilder *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy(v1, *(char **)(v1 + 8));
  *(_QWORD *)v1 = v1 + 8;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 8) = 0;
}

uint64_t *std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__emplace_unique_key_args<std::string,std::string const&,std::unique_ptr<MIL::IRBlock>>(uint64_t **a1, const void **a2, uint64_t a3, uint64_t *a4)
{
  uint64_t **v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t *v11[3];
  uint64_t v12;

  v7 = (uint64_t **)std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  v8 = *v7;
  if (!*v7)
  {
    v9 = v7;
    std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__construct_node<std::string const&,std::unique_ptr<MIL::IRBlock>>((uint64_t)a1, a3, a4, (uint64_t)v11);
    std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__insert_node_at(a1, v12, v9, v11[0]);
    v8 = v11[0];
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
  }
  return v8;
}

void std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__construct_node<std::string const&,std::unique_ptr<MIL::IRBlock>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *v9;
  uint64_t v10;

  v7 = a1 + 8;
  v8 = (char *)operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  v9 = (std::string *)(v8 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v8 + 6) = *(_QWORD *)(a2 + 16);
  }
  v10 = *a3;
  *a3 = 0;
  *((_QWORD *)v8 + 7) = v10;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1E05F8DA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::FunctionBuilder::FunctionBuilderImpl::TryGetVariable(uint64_t a1, uint64_t a2, std::string::size_type a3)
{
  uint64_t result;
  unsigned __int8 *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string __p;
  uint64_t v13;

  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 80) + 24))(*(_QWORD *)(a1 + 80), a2, 1);
  if (result)
  {
    v13 = 0;
    v7 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>>>::__emplace_unique_key_args<std::string,std::string const&,decltype(nullptr)>(a1 + 112, (unsigned __int8 *)a2, a2);
    if (v8)
    {
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        __p = *(std::string *)a2;
      MIL::Builder::Variable::Make((uint64_t)&__p, a3, &v13);
      v9 = v13;
      v13 = 0;
      v10 = *((_QWORD *)v7 + 5);
      *((_QWORD *)v7 + 5) = v9;
      if (v10)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        v11 = v13;
        v13 = 0;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    return *((_QWORD *)v7 + 5);
  }
  return result;
}

void sub_1E05F8EB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<MIL::Builder::Variable const*,std::hash<MIL::Builder::Variable const*>,std::equal_to<MIL::Builder::Variable const*>,std::allocator<MIL::Builder::Variable const*>>::__emplace_unique_key_args<MIL::Builder::Variable const*,MIL::Builder::Variable const*>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v8;
  i[2] = *a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1E05F9108(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<MIL::Builder::BlockBuilder  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E0C023A0);
}

uint64_t std::__shared_ptr_pointer<MIL::Builder::BlockBuilder  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::Builder::BlockBuilder  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>>>::__emplace_unique_key_args<std::string,std::string&,std::shared_ptr<MIL::Builder::BlockBuilder>&>(uint64_t a1, unsigned __int8 *a2, __int128 *a3, std::string::size_type *a4)
{
  unint64_t v4;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 *i;
  unint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD v27[3];

  v9 = (_QWORD *)(a1 + 24);
  v10 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v15 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      for (i = *v15; i; i = *(unsigned __int8 **)i)
      {
        v17 = *((_QWORD *)i + 1);
        if (v17 == v11)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12)
              v17 %= v12;
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>>>::__construct_node_hash<std::string&,std::shared_ptr<MIL::Builder::BlockBuilder>&>(a1, v11, a3, a4, (uint64_t)v27);
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    v20 = 1;
    if (v12 >= 3)
      v20 = (v12 & (v12 - 1)) != 0;
    v21 = v20 | (2 * v12);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v23);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v4 = v11 % v12;
      else
        v4 = v11;
    }
    else
    {
      v4 = (v12 - 1) & v11;
    }
  }
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *(_QWORD *)v27[0] = *v24;
    *v24 = v27[0];
  }
  else
  {
    *(_QWORD *)v27[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v27[0])
    {
      v25 = *(_QWORD *)(*(_QWORD *)v27[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v25 >= v12)
          v25 %= v12;
      }
      else
      {
        v25 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v27[0];
    }
  }
  i = (unsigned __int8 *)v27[0];
  v27[0] = 0;
  ++*v9;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v27, 0);
  return i;
}

void sub_1E05F940C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>>>::__construct_node_hash<std::string&,std::shared_ptr<MIL::Builder::BlockBuilder>&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, std::string::size_type *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  char *v10;
  std::string *result;

  v9 = a1 + 16;
  v10 = (char *)operator new(0x38uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = a2;
  result = std::pair<std::string const,std::shared_ptr<MIL::Blob::LegacyStorageReader>>::pair[abi:ne180100]<std::string const&,std::shared_ptr<MIL::Blob::LegacyStorageReader>&,0>((std::string *)(v10 + 16), a3, a4);
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_1E05F9490(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::FunctionBuilder::FunctionBuilderImpl::FunctionBuilderImpl(uint64_t a1, _QWORD *a2, MIL::IRObject **a3, uint64_t a4)
{
  const void ***v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  _QWORD *LocationPtr;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t Attributes;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  uint64_t v22;
  __int128 *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  unsigned __int8 *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  BOOL v40;
  std::string v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  uint64_t v46[5];
  uint64_t v47[5];
  __int128 *v48[2];

  v8 = (const void ***)(*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)*a3 + 128))(*a3);
  std::map<std::string,MIL::IRValueType const*>::map[abi:ne180100]((uint64_t *)a1, v8);
  *(_QWORD *)(a1 + 24) = *a2;
  v9 = a2[1];
  *(_QWORD *)(a1 + 32) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_QWORD *)(a1 + 80) = 0;
  v12 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)*a3 + 32))(*a3);
  if (*(char *)(v12 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 88), *(const std::string::value_type **)v12, *(_QWORD *)(v12 + 8));
  }
  else
  {
    v13 = *(_OWORD *)v12;
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(v12 + 16);
    *(_OWORD *)(a1 + 88) = v13;
  }
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 1065353216;
  LocationPtr = (_QWORD *)MIL::IRObject::GetLocationPtr(*a3);
  *(_QWORD *)(a1 + 152) = *LocationPtr;
  v15 = LocationPtr[1];
  *(_QWORD *)(a1 + 160) = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  Attributes = MIL::IRObject::GetAttributes(*a3);
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map(a1 + 168, Attributes);
  v19 = (*(uint64_t (**)(uint64_t))(*((_QWORD *)*a3 + 8) + 32))((uint64_t)*a3 + 64);
  std::unordered_map<std::string,MIL::IRValueType const*>::unordered_map((uint64_t)v47, v19);
  v20 = (*(uint64_t (**)(uint64_t))(*((_QWORD *)*a3 + 8) + 64))((uint64_t)*a3 + 64);
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v46, v20);
  MIL::IRMutableScope::Make(a4, v47, v46, v48);
  v21 = v48[0];
  v48[0] = 0;
  v22 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v21;
  if (v22)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    v23 = v48[0];
    v48[0] = 0;
    if (v23)
      (*(void (**)(__int128 *))(*(_QWORD *)v23 + 8))(v23);
  }
  v24 = (_QWORD *)(*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)*a3 + 112))(*a3);
  v26 = v24 + 1;
  v25 = (_QWORD *)*v24;
  if ((_QWORD *)*v24 != v24 + 1)
  {
    do
    {
      v27 = (std::__shared_weak_count *)a2[1];
      v43 = *a2;
      v44 = v27;
      if (v27)
      {
        p_shared_owners = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldxr(p_shared_owners);
        while (__stxr(v29 + 1, p_shared_owners));
      }
      v30 = v25[7];
      v31 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)*a3 + 32))(*a3);
      if (*(char *)(v31 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v42, *(const std::string::value_type **)v31, *(_QWORD *)(v31 + 8));
      }
      else
      {
        v32 = *(_OWORD *)v31;
        v42.__r_.__value_.__r.__words[2] = *(_QWORD *)(v31 + 16);
        *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v32;
      }
      MIL::Builder::BlockBuilder::Make(&v43, v30, (uint64_t)&v42, *(_QWORD *)(a1 + 80), &v45);
      v48[0] = (__int128 *)(v25 + 4);
      v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 40, (unsigned __int8 *)v25 + 32, (uint64_t)&std::piecewise_construct, v48);
      std::shared_ptr<MIL::Builder::BlockBuilder>::operator=[abi:ne180100]<MIL::Builder::BlockBuilder,std::default_delete<MIL::Builder::BlockBuilder>,void>((_QWORD *)v33 + 5, &v45);
      v34 = v45;
      v45 = 0;
      if (v34)
        (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
      v35 = v44;
      if (v44)
      {
        v36 = (unint64_t *)&v44->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      v38 = (_QWORD *)v25[1];
      if (v38)
      {
        do
        {
          v39 = v38;
          v38 = (_QWORD *)*v38;
        }
        while (v38);
      }
      else
      {
        do
        {
          v39 = (_QWORD *)v25[2];
          v40 = *v39 == (_QWORD)v25;
          v25 = v39;
        }
        while (!v40);
      }
      v25 = v39;
    }
    while (v39 != v26);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v46);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v47);
  return a1;
}

void sub_1E05F97F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a21);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a26);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a10);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v29 + 40);
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>>>::~__hash_table(v29);
  if (*(char *)(v26 + 111) < 0)
    operator delete(*a9);
  v31 = *(_QWORD *)(v26 + 80);
  *(_QWORD *)(v26 + 80) = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v28);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v27);
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy(v26, *(char **)(v26 + 8));
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<MIL::Builder::BlockBuilder>::operator=[abi:ne180100]<MIL::Builder::BlockBuilder,std::default_delete<MIL::Builder::BlockBuilder>,void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  if (*a2)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &unk_1EA99A7D0;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  *a2 = 0;
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v5;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1E05F9C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x38uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1E05F9CA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::default_delete<MIL::Builder::FunctionBuilder::FunctionBuilderImpl>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (a2)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a2 + 168);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](a2 + 152);
    std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>>>::~__hash_table(a2 + 112);
    if (*(char *)(a2 + 111) < 0)
      operator delete(*(void **)(a2 + 88));
    v3 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a2 + 80) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a2 + 40);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](a2 + 24);
    std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy(a2, *(char **)(a2 + 8));
    JUMPOUT(0x1E0C023A0);
  }
}

uint64_t MIL::Builder::FunctionBuilder::FunctionBuilderImpl::FunctionBuilderImpl(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD v11[2];
  int v12;
  _OWORD v13[2];
  int v14;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  *(_QWORD *)(a1 + 24) = *a2;
  v4 = a2[1];
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  memset(v13, 0, sizeof(v13));
  v14 = 1065353216;
  memset(v11, 0, sizeof(v11));
  v12 = 1065353216;
  MIL::IRMutableScope::Make(a3, (uint64_t *)v13, (uint64_t *)v11, (_QWORD *)(a1 + 80));
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v11);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v13);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 144) = 1065353216;
  MIL::UnknownLocation::Make(v13);
  v7 = *(_QWORD *)&v13[0];
  *(_QWORD *)(a1 + 152) = *(_QWORD *)&v13[0];
  if (v7)
  {
    v8 = (_QWORD *)operator new();
    v9 = *(_QWORD *)&v13[0];
    *v8 = &unk_1EA9940C8;
    v8[1] = 0;
    v8[2] = 0;
    v8[3] = v9;
  }
  else
  {
    v8 = 0;
  }
  *(_QWORD *)(a1 + 160) = v8;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 200) = 1065353216;
  return a1;
}

void sub_1E05F9E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  void **v19;
  uint64_t v21;

  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 8))(a15);
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>>>::~__hash_table((uint64_t)(v19 + 3));
  if (*(char *)(v15 + 111) < 0)
    operator delete(*v19);
  v21 = *v18;
  *v18 = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v17);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v16);
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy(v15, *(char **)(v15 + 8));
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::~OperationBuilder(void ***this)
{
  std::__shared_weak_count *v2;

  *this = (void **)&off_1EA99A830;
  std::unique_ptr<MIL::Builder::OperationBuilder::OperationBuilderImpl>::reset[abi:ne180100](this + 3, 0);
  v2 = (std::__shared_weak_count *)this[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

{
  MIL::Builder::OperationBuilder::~OperationBuilder(this);
  JUMPOUT(0x1E0C023A0);
}

_QWORD *MIL::Builder::OperationBuilder::OperationBuilder(_QWORD *a1, uint64_t *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v6;

  v6 = a4;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1EA99A830;
  std::make_unique[abi:ne180100]<MIL::Builder::OperationBuilder::OperationBuilderImpl,std::shared_ptr<MIL::IROperator const> &,std::shared_ptr<MIL::MILContext>,MIL::Builder::BlockBuilder *&>(a2, a3, &v6, a1 + 3);
  return a1;
}

void sub_1E05F9FE4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void std::make_unique[abi:ne180100]<MIL::Builder::OperationBuilder::OperationBuilderImpl,std::shared_ptr<MIL::IROperator const> &,std::shared_ptr<MIL::MILContext>,MIL::Builder::BlockBuilder *&>(uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v8 = operator new();
  v9 = v8;
  v10 = (std::__shared_weak_count *)a1[1];
  v20 = *a1;
  v21 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v19 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  MIL::Builder::OperationBuilder::OperationBuilderImpl::OperationBuilderImpl(v8, (uint64_t)&v20, (uint64_t)&v19, *a3);
  *a4 = v9;
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v21;
  if (v21)
  {
    v17 = (unint64_t *)&v21->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_1E05FA10C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  MEMORY[0x1E0C023A0](v11, 0x10F2C402763F690);
  _Unwind_Resume(a1);
}

_QWORD *MIL::Builder::OperationBuilder::OperationBuilder(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  v7 = a5;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1EA99A830;
  std::make_unique[abi:ne180100]<MIL::Builder::OperationBuilder::OperationBuilderImpl,std::shared_ptr<MIL::IROperation> &,std::shared_ptr<MIL::MILContext>,std::string,MIL::Builder::BlockBuilder *&>(a2, a3, a4, &v7, a1 + 3);
  return a1;
}

void sub_1E05FA19C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void std::make_unique[abi:ne180100]<MIL::Builder::OperationBuilder::OperationBuilderImpl,std::shared_ptr<MIL::IROperation> &,std::shared_ptr<MIL::MILContext>,std::string,MIL::Builder::BlockBuilder *&>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *__p[2];
  uint64_t v22;
  __int128 v23;
  __int128 v24;

  v10 = operator new();
  v11 = v10;
  v12 = a1[1];
  *(_QWORD *)&v24 = *a1;
  *((_QWORD *)&v24 + 1) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v23 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)__p = *(_OWORD *)a3;
  v22 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  MIL::Builder::OperationBuilder::OperationBuilderImpl::OperationBuilderImpl(v10, &v24, &v23, (uint64_t)__p, *a4);
  *a5 = v11;
  if (SHIBYTE(v22) < 0)
    operator delete(__p[0]);
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_1E05FA2F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18)
{
  uint64_t v18;

  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  MEMORY[0x1E0C023A0](v18, 0x10F2C402763F690);
  _Unwind_Resume(a1);
}

_QWORD *MIL::Builder::OperationBuilder::OperationBuilder(_QWORD *a1, __int128 *a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;

  v8 = a6;
  v9 = a5;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1EA99A830;
  std::make_unique[abi:ne180100]<MIL::Builder::OperationBuilder::OperationBuilderImpl,std::shared_ptr<MIL::IROperation>,std::shared_ptr<MIL::MILContext>,std::string,MIL::IRScope const*&,MIL::Builder::BlockBuilder *&>(a2, a3, a4, &v9, &v8, a1 + 3);
  return a1;
}

void sub_1E05FA398(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void std::make_unique[abi:ne180100]<MIL::Builder::OperationBuilder::OperationBuilderImpl,std::shared_ptr<MIL::IROperation>,std::shared_ptr<MIL::MILContext>,std::string,MIL::IRScope const*&,MIL::Builder::BlockBuilder *&>(__int128 *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *__p[2];
  uint64_t v21;
  __int128 v22;
  __int128 v23;

  v12 = operator new();
  v13 = *a1;
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  v22 = *a2;
  v23 = v13;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  *(_OWORD *)__p = *(_OWORD *)a3;
  v21 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  MIL::Builder::OperationBuilder::OperationBuilderImpl::OperationBuilderImpl(v12, (MIL::IRObject **)&v23, (uint64_t)&v22, (__int128 *)__p, *a4, *a5);
  *a6 = v12;
  if (SHIBYTE(v21) < 0)
    operator delete(__p[0]);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_1E05FA4E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18)
{
  uint64_t v18;

  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  MEMORY[0x1E0C023A0](v18, 0x10F2C402763F690);
  _Unwind_Resume(a1);
}

_QWORD *MIL::Builder::OperationBuilder::OperationBuilder(_QWORD *a1, MIL::IRObject *a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;

  v8 = a6;
  v9 = a5;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1EA99A830;
  std::make_unique[abi:ne180100]<MIL::Builder::OperationBuilder::OperationBuilderImpl,MIL::IROperation const,std::shared_ptr<MIL::MILContext>,std::string,MIL::IRScope const*&,MIL::Builder::BlockBuilder *&>(a2, a3, a4, &v9, &v8, a1 + 3);
  return a1;
}

void sub_1E05FA588(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void std::make_unique[abi:ne180100]<MIL::Builder::OperationBuilder::OperationBuilderImpl,MIL::IROperation const,std::shared_ptr<MIL::MILContext>,std::string,MIL::IRScope const*&,MIL::Builder::BlockBuilder *&>(MIL::IRObject *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *__p[2];
  uint64_t v17;
  __int128 v18;

  v12 = operator new();
  v18 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  *(_OWORD *)__p = *(_OWORD *)a3;
  v17 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  MIL::Builder::OperationBuilder::OperationBuilderImpl::OperationBuilderImpl(v12, a1, (uint64_t)&v18, (__int128 *)__p, *a4, *a5);
  *a6 = v12;
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1E05FA694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  MEMORY[0x1E0C023A0](v16, 0x10F2C402763F690);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInput(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[2];
  uint64_t v18;
  void *v19[2];
  uint64_t v20;

  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)v19 = *(_OWORD *)a2;
  v20 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)__p = *(_OWORD *)a3;
  v18 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v9 = (std::__shared_weak_count *)a4[1];
  v15 = *a4;
  v16 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(v8, v19, (uint64_t)__p, &v15);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v20) < 0)
    operator delete(v19[0]);
}

void sub_1E05FA7D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  uint64_t v18;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  MIL::Builder::OperationBuilder::AddInput((uint64_t)&a18);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v18);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  _QWORD *v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::runtime_error *exception;
  void *__p[2];
  char v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  void *v41[2];
  uint64_t v42;
  std::string v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _OWORD *v47;
  int64x2_t v48;
  uint64_t v49;
  _QWORD *v50;

  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v47 = a2;
  v7 = std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 16), (const void **)a2, (uint64_t)&std::piecewise_construct, &v47);
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v43, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v43 = *(std::string *)a3;
  MIL::IRArgument::Make((uint64_t)&v43, &v44);
  v8 = v44;
  v45 = v44;
  if (v44)
  {
    v9 = (_QWORD *)operator new();
    v10 = v44;
    *v9 = &unk_1EA9942C8;
    v9[1] = 0;
    v9[2] = 0;
    v9[3] = v10;
  }
  else
  {
    v9 = 0;
  }
  v46 = v9;
  v44 = 0;
  v11 = v7[9];
  v12 = (uint64_t *)v7[8];
  if ((unint64_t)v12 >= v11)
  {
    v14 = v7[7];
    v15 = ((uint64_t)v12 - v14) >> 4;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v17 = v11 - v14;
    if (v17 >> 3 > v16)
      v16 = v17 >> 3;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
      v18 = 0xFFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    v50 = v7 + 9;
    v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v7 + 9), v18);
    v21 = (uint64_t *)&v19[16 * v15];
    *v21 = v8;
    v21[1] = (uint64_t)v9;
    v45 = 0;
    v46 = 0;
    v23 = (_QWORD *)v7[7];
    v22 = (_QWORD *)v7[8];
    if (v22 == v23)
    {
      v26 = vdupq_n_s64((unint64_t)v22);
      v24 = &v19[16 * v15];
    }
    else
    {
      v24 = &v19[16 * v15];
      do
      {
        v25 = *((_OWORD *)v22 - 1);
        v22 -= 2;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *v22 = 0;
        v22[1] = 0;
      }
      while (v22 != v23);
      v26 = *(int64x2_t *)(v7 + 7);
    }
    v13 = v21 + 2;
    v7[7] = v24;
    v7[8] = v21 + 2;
    v48 = v26;
    v27 = v7[9];
    v7[9] = &v19[16 * v20];
    v49 = v27;
    v47 = (_OWORD *)v26.i64[0];
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v47);
  }
  else
  {
    *v12 = v8;
    v12[1] = (uint64_t)v9;
    v13 = v12 + 2;
  }
  v7[8] = v13;
  v28 = v44;
  v44 = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  v29 = *(_QWORD *)(a1 + 152);
  if (v29)
  {
    *(_OWORD *)v41 = *(_OWORD *)a3;
    v42 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
    v30 = (std::__shared_weak_count *)a4[1];
    v39 = *a4;
    v40 = v30;
    if (v30)
    {
      p_shared_owners = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(p_shared_owners);
      while (__stxr(v32 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    MIL::Builder::BlockBuilder::UpdateOpInput(v29, (uint64_t)v41, &v39, (uint64_t)__p);
    if (v38 < 0)
      operator delete(__p[0]);
    v33 = v40;
    if (v40)
    {
      v34 = (unint64_t *)&v40->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (SHIBYTE(v42) < 0)
      operator delete(v41[0]);
  }
}

void sub_1E05FAAF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,char a33)
{
  void *v33;

  __cxa_free_exception(v33);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInput(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  std::string v25;

  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 24);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v25 = *(std::string *)a2;
  v9 = (std::__shared_weak_count *)a3[1];
  v23 = *a3;
  v24 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = (std::__shared_weak_count *)a4[1];
  v21 = *a4;
  v22 = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(v8, &v25, &v23, &v21);
  v15 = v22;
  if (v22)
  {
    v16 = (unint64_t *)&v22->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v24;
  if (v24)
  {
    v19 = (unint64_t *)&v24->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  std::string v27;
  void **v28;
  char v29;
  _QWORD v30[3];

  v30[2] = *MEMORY[0x1E0C80C00];
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 24);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v27 = *(std::string *)a2;
  v10 = *a3;
  v9 = a3[1];
  v30[0] = v10;
  v30[1] = v9;
  if (v9)
  {
    v11 = (unint64_t *)(v9 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v28 = (void **)&v24;
  v29 = 0;
  v13 = (uint64_t *)operator new(0x10uLL);
  v24 = v13;
  v26 = v13 + 2;
  *v13 = v10;
  v13[1] = v9;
  if (v9)
  {
    v14 = (unint64_t *)(v9 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v25 = v13 + 2;
  v16 = (std::__shared_weak_count *)a4[1];
  v22 = *a4;
  v23 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(v8, (__int128 *)&v27, &v24, &v22);
  v19 = v23;
  if (v23)
  {
    v20 = (unint64_t *)&v23->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v28 = (void **)&v24;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v28);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v30);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
}

void sub_1E05FACC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v18);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(uint64_t a1, _OWORD *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  _QWORD *v24;
  char *v25;
  __int128 v26;
  int64x2_t v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::runtime_error *exception;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _OWORD *v38;
  int64x2_t v39;
  uint64_t v40;
  _QWORD *v41;

  if (!*a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot bind an input to a null IRValue.");
    goto LABEL_33;
  }
  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
LABEL_33:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v38 = a2;
  v5 = std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 16), (const void **)a2, (uint64_t)&std::piecewise_construct, &v38);
  v6 = a3[1];
  *(_QWORD *)&v34 = *a3;
  *((_QWORD *)&v34 + 1) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  MIL::IRArgument::Make(&v34, &v35);
  v9 = v35;
  v36 = v35;
  if (v35)
  {
    v10 = (_QWORD *)operator new();
    v11 = v35;
    *v10 = &unk_1EA9942C8;
    v10[1] = 0;
    v10[2] = 0;
    v10[3] = v11;
  }
  else
  {
    v10 = 0;
  }
  v37 = v10;
  v35 = 0;
  v12 = v5[9];
  v13 = (uint64_t *)v5[8];
  if ((unint64_t)v13 >= v12)
  {
    v15 = v5[7];
    v16 = ((uint64_t)v13 - v15) >> 4;
    v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v18 = v12 - v15;
    if (v18 >> 3 > v17)
      v17 = v18 >> 3;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0)
      v19 = 0xFFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    v41 = v5 + 9;
    v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v5 + 9), v19);
    v22 = (uint64_t *)&v20[16 * v16];
    *v22 = v9;
    v22[1] = (uint64_t)v10;
    v36 = 0;
    v37 = 0;
    v24 = (_QWORD *)v5[7];
    v23 = (_QWORD *)v5[8];
    if (v23 == v24)
    {
      v27 = vdupq_n_s64((unint64_t)v23);
      v25 = &v20[16 * v16];
    }
    else
    {
      v25 = &v20[16 * v16];
      do
      {
        v26 = *((_OWORD *)v23 - 1);
        v23 -= 2;
        *((_OWORD *)v25 - 1) = v26;
        v25 -= 16;
        *v23 = 0;
        v23[1] = 0;
      }
      while (v23 != v24);
      v27 = *(int64x2_t *)(v5 + 7);
    }
    v14 = v22 + 2;
    v5[7] = v25;
    v5[8] = v22 + 2;
    v39 = v27;
    v28 = v5[9];
    v5[9] = &v20[16 * v21];
    v40 = v28;
    v38 = (_OWORD *)v27.i64[0];
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v38);
  }
  else
  {
    *v13 = v9;
    v13[1] = (uint64_t)v10;
    v14 = v13 + 2;
    v36 = 0;
    v37 = 0;
  }
  v5[8] = v14;
  v29 = v35;
  v35 = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
  if (*((_QWORD *)&v34 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
}

void sub_1E05FAF5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  void *v12;

  __cxa_free_exception(v12);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddOutput(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[2];
  uint64_t v18;

  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (_QWORD *)(a1 + 8));
  v8 = *(uint64_t **)(a1 + 24);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v18 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = (std::__shared_weak_count *)a4[1];
  v15 = *a4;
  v16 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddOutput(v8, (uint64_t)__p, a3, &v15);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
}

void sub_1E05FB08C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddOutput(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int64x2_t *v8;
  MIL::IRNamedValueType *v9;
  MIL::IRNamedValueType *v10;
  MIL::IRNamedValueType *v11;
  unint64_t v12;
  MIL::IRNamedValueType **v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  MIL::IRNamedValueType **v21;
  _QWORD *v22;
  _QWORD *v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  uint64_t v27;
  void **v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::runtime_error *exception;
  std::runtime_error *v37;
  std::string *v38;
  __int128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  void *__p[2];
  uint64_t v43;
  std::string v44;
  MIL::IRNamedValueType *v45;
  std::string v46;
  std::string v47;
  uint64_t v48;
  uint64_t *v49;

  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an output to a null OperationBuilder.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v8 = (int64x2_t *)(a1 + 5);
  if (a1[6] != std::find_if[abi:ne180100]<std::__wrap_iter<std::shared_ptr<MIL::IRNamedValueType> *>,MIL::Builder::OperationBuilder::OperationBuilderImpl::AddOutput(std::string,MIL::IRValueType const*,std::shared_ptr<MIL::Builder::OperationBuilder>)::{lambda(std::shared_ptr<MIL::IRNamedValueType>)#1}>(a1[5], a1[6], (unsigned __int8 *)a2))
  {
    v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v38 = std::string::append(&v46, " is already bound for this Operation.");
    v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v37, &v47);
    __cxa_throw(v37, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v44 = *(std::string *)a2;
  MIL::IRNamedValueType::Make((uint64_t *)&v44, a3, (uint64_t *)&v45);
  v9 = v45;
  v46.__r_.__value_.__r.__words[0] = (std::string::size_type)v45;
  if (v45)
  {
    v10 = (MIL::IRNamedValueType *)operator new();
    v11 = v45;
    *(_QWORD *)v10 = &unk_1EA993900;
    *((_QWORD *)v10 + 1) = 0;
    *((_QWORD *)v10 + 2) = 0;
    *((_QWORD *)v10 + 3) = v11;
  }
  else
  {
    v10 = 0;
  }
  v46.__r_.__value_.__l.__size_ = (std::string::size_type)v10;
  v45 = 0;
  v12 = a1[7];
  v13 = (MIL::IRNamedValueType **)a1[6];
  if ((unint64_t)v13 >= v12)
  {
    v15 = ((uint64_t)v13 - v8->i64[0]) >> 4;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v17 = v12 - v8->i64[0];
    if (v17 >> 3 > v16)
      v16 = v17 >> 3;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
      v18 = 0xFFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    v49 = a1 + 7;
    v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(a1 + 7), v18);
    v21 = (MIL::IRNamedValueType **)&v19[16 * v15];
    *v21 = v9;
    v21[1] = v10;
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = 0uLL;
    v23 = (_QWORD *)a1[5];
    v22 = (_QWORD *)a1[6];
    if (v22 == v23)
    {
      v26 = vdupq_n_s64((unint64_t)v22);
      v24 = &v19[16 * v15];
    }
    else
    {
      v24 = &v19[16 * v15];
      do
      {
        v25 = *((_OWORD *)v22 - 1);
        v22 -= 2;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *v22 = 0;
        v22[1] = 0;
      }
      while (v22 != v23);
      v26 = *v8;
    }
    v14 = v21 + 2;
    a1[5] = (uint64_t)v24;
    a1[6] = (uint64_t)(v21 + 2);
    *(int64x2_t *)&v47.__r_.__value_.__r.__words[1] = v26;
    v27 = a1[7];
    a1[7] = (uint64_t)&v19[16 * v20];
    v48 = v27;
    v47.__r_.__value_.__r.__words[0] = v26.i64[0];
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v47);
  }
  else
  {
    *v13 = v9;
    v13[1] = v10;
    v14 = v13 + 2;
  }
  a1[6] = (uint64_t)v14;
  v28 = (void **)v45;
  v45 = 0;
  if (v28)
  {
    MIL::IRNamedValueType::~IRNamedValueType(v28);
    MEMORY[0x1E0C023A0]();
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  v29 = a1[19];
  if (v29)
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v43 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    v30 = (std::__shared_weak_count *)a4[1];
    v40 = *a4;
    v41 = v30;
    if (v30)
    {
      p_shared_owners = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(p_shared_owners);
      while (__stxr(v32 + 1, p_shared_owners));
    }
    MIL::Builder::BlockBuilder::UpdateOpOutput(v29, (uint64_t)__p, a3, &v40);
    v33 = v41;
    if (v41)
    {
      v34 = (unint64_t *)&v41->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (SHIBYTE(v43) < 0)
      operator delete(__p[0]);
  }
}

void sub_1E05FB3F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  int v37;
  void *v38;

  if (a37 < 0)
    operator delete(__p);
  if (a31 < 0)
  {
    operator delete(a26);
    if ((v37 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v37)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v38);
  goto LABEL_8;
}

void MIL::Builder::OperationBuilder::CreateOperation(const void ****this@<X0>, _anonymous_namespace_::IROperationImpl **a2@<X8>)
{
  MIL::Builder::OperationBuilder::OperationBuilderImpl::CreateOperation(this[3], a2);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::CreateOperation(const void ***this@<X0>, _anonymous_namespace_::IROperationImpl **a2@<X8>)
{
  MIL::Builder::BlockBuilder **v4;
  MIL::Builder::BlockBuilder **i;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  _QWORD *v19;
  char *v20;
  __int128 v21;
  int64x2_t v22;
  char *v23;
  uint64_t v24;
  const void **v25;
  uint64_t v26;
  _anonymous_namespace_::IROperationImpl **v27;
  uint64_t v28;
  const void **v29;
  unint64_t *v30;
  unint64_t v31;
  const void **v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _anonymous_namespace_::IROperationImpl **v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  int64x2_t v47;
  char *v48;
  uint64_t v49[5];
  _QWORD v50[3];
  uint64_t v51[3];
  int64x2_t *v52;
  int64x2_t v53;
  char *v54;
  char **v55;

  std::map<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>::map[abi:ne180100](v51, this + 2);
  memset(v50, 0, sizeof(v50));
  std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__init_with_size[abi:ne180100]<std::shared_ptr<MIL::IRNamedValueType>*,std::shared_ptr<MIL::IRNamedValueType>*>((char *)v50, this[5], this[6], ((char *)this[6] - (char *)this[5]) >> 4);
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v49, (uint64_t)(this + 8));
  v41 = a2;
  v47 = 0uLL;
  v48 = 0;
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)&v47, ((char *)this[21] - (char *)this[20]) >> 4);
  v4 = (MIL::Builder::BlockBuilder **)this[20];
  for (i = (MIL::Builder::BlockBuilder **)this[21]; v4 != i; v4 += 2)
  {
    MIL::Builder::BlockBuilder::CreateBlock(&v44, *v4);
    v6 = v44;
    v45 = v44;
    if (v44)
    {
      v7 = (_QWORD *)operator new();
      v8 = v44;
      *v7 = &unk_1EA992F48;
      v7[1] = 0;
      v7[2] = 0;
      v7[3] = v8;
    }
    else
    {
      v7 = 0;
    }
    v46 = v7;
    v44 = 0;
    v9 = v47.i64[1];
    if (v47.i64[1] >= (unint64_t)v48)
    {
      v11 = (v47.i64[1] - v47.i64[0]) >> 4;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 60)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v13 = (uint64_t)&v48[-v47.i64[0]];
      if ((uint64_t)&v48[-v47.i64[0]] >> 3 > v12)
        v12 = v13 >> 3;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
        v14 = 0xFFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      v55 = &v48;
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)&v48, v14);
      v17 = (uint64_t *)&v15[16 * v11];
      *v17 = v6;
      v17[1] = (uint64_t)v7;
      v45 = 0;
      v46 = 0;
      v18 = (_QWORD *)v47.i64[1];
      v19 = (_QWORD *)v47.i64[0];
      if (v47.i64[1] == v47.i64[0])
      {
        v22 = vdupq_n_s64(v47.u64[1]);
        v20 = &v15[16 * v11];
      }
      else
      {
        v20 = &v15[16 * v11];
        do
        {
          v21 = *((_OWORD *)v18 - 1);
          v18 -= 2;
          *((_OWORD *)v20 - 1) = v21;
          v20 -= 16;
          *v18 = 0;
          v18[1] = 0;
        }
        while (v18 != v19);
        v22 = v47;
      }
      v10 = v17 + 2;
      v47.i64[0] = (uint64_t)v20;
      v47.i64[1] = (uint64_t)(v17 + 2);
      v53 = v22;
      v23 = v48;
      v48 = &v15[16 * v16];
      v54 = v23;
      v52 = (int64x2_t *)v22.i64[0];
      std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v52);
    }
    else
    {
      *(_QWORD *)v47.i64[1] = v6;
      *(_QWORD *)(v9 + 8) = v7;
      v10 = (_QWORD *)(v9 + 16);
    }
    v47.i64[1] = (uint64_t)v10;
    v24 = v44;
    v44 = 0;
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  }
  v25 = this[23];
  if (v25)
  {
    v26 = (*((uint64_t (**)(const void **, char *))*v25 + 2))(v25, (char *)this + 200);
    v27 = v41;
    v28 = v26;
  }
  else
  {
    v28 = 0;
    v27 = v41;
  }
  v29 = this[14];
  *(_QWORD *)&v43 = this[13];
  *((_QWORD *)&v43 + 1) = v29;
  if (v29)
  {
    v30 = (unint64_t *)(v29 + 1);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = this[1];
  *(_QWORD *)&v42 = *this;
  *((_QWORD *)&v42 + 1) = v32;
  if (v32)
  {
    v33 = (unint64_t *)(v32 + 1);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  MIL::IROperation::Make(&v43, &v42, v51, (uint64_t)v50, v49, (uint64_t)&v47, v28, v27);
  v35 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (*((_QWORD *)&v42 + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
  if (*((_QWORD *)&v43 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v52 = &v47;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v49);
  v52 = (int64x2_t *)v50;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy((uint64_t)v51, (_QWORD *)v51[1]);
}

void sub_1E05FB7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void **a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,_QWORD *a29)
{
  a15 = (void **)&a17;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a15);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a20);
  a20 = (void **)&a25;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a20);
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy((uint64_t)&a28, a29);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::OperationBuilder::GetNumArguments(uint64_t a1, const void **a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::find<std::string>(v2 + 16, a2);
  if (v2 + 24 == v3)
    return 0;
  else
    return (uint64_t)(*(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56)) >> 4;
}

uint64_t MIL::Builder::OperationBuilder::GetArgumentForParameter(std::string::size_type a1, uint64_t a2, unsigned int a3)
{
  return MIL::Builder::OperationBuilder::OperationBuilderImpl::GetArgumentForParameter(*(_QWORD *)(a1 + 24), a2, a3, a1);
}

uint64_t MIL::Builder::OperationBuilder::OperationBuilderImpl::GetArgumentForParameter(uint64_t a1, uint64_t a2, unsigned int a3, std::string::size_type a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  unint64_t *v12;
  unint64_t v13;
  MIL::IRArgument *v14;
  int v15;
  std::string::size_type v16;
  uint64_t Name;
  uint64_t Variable;
  MIL::IRArgument *v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::runtime_error *exception;
  std::string *v30;
  __int128 v31;
  std::runtime_error *v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  int v37;
  const std::string::value_type *v38;
  std::string::size_type v39;
  std::string *v40;
  __int128 v41;
  std::string *v42;
  __int128 v43;
  std::string *v44;
  std::string::size_type size;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  std::string v53;
  std::string v54;
  std::string v55;
  std::string v56;
  std::string v57;
  std::string v58;
  std::string v59;
  std::string v60;

  v8 = std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::find<std::string>(a1 + 16, (const void **)a2);
  if (a1 + 24 == v8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v30 = std::string::append(&v59, ".");
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v60);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v9 = v8;
  v10 = *(_QWORD *)(v8 + 56);
  if (a3 >= (unint64_t)((*(_QWORD *)(v8 + 64) - v10) >> 4))
  {
    v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v54, a3);
    v33 = std::string::insert(&v54, 0, "Requested argument ");
    v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    v35 = std::string::append(&v55, " for parameter ");
    v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    v37 = *(char *)(a2 + 23);
    if (v37 >= 0)
      v38 = (const std::string::value_type *)a2;
    else
      v38 = *(const std::string::value_type **)a2;
    if (v37 >= 0)
      v39 = *(unsigned __int8 *)(a2 + 23);
    else
      v39 = *(_QWORD *)(a2 + 8);
    v40 = std::string::append(&v56, v38, v39);
    v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    v57.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    v42 = std::string::append(&v57, ", but only ");
    v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    v58.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v53, (uint64_t)(*(_QWORD *)(v9 + 64) - *(_QWORD *)(v9 + 56)) >> 4);
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v44 = &v53;
    else
      v44 = (std::string *)v53.__r_.__value_.__r.__words[0];
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v53.__r_.__value_.__r.__words[2]);
    else
      size = v53.__r_.__value_.__l.__size_;
    v46 = std::string::append(&v58, (const std::string::value_type *)v44, size);
    v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v47;
    v46->__r_.__value_.__l.__size_ = 0;
    v46->__r_.__value_.__r.__words[2] = 0;
    v46->__r_.__value_.__r.__words[0] = 0;
    v48 = std::string::append(&v59, " arguments are bound.");
    v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v49;
    v48->__r_.__value_.__l.__size_ = 0;
    v48->__r_.__value_.__r.__words[2] = 0;
    v48->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v32, &v60);
    __cxa_throw(v32, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v11 = *(_OWORD *)(v10 + 16 * a3);
  *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v11;
  if (*((_QWORD *)&v11 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  if (*(_QWORD *)(a1 + 152))
  {
    v50 = v11;
    v14 = (MIL::IRArgument *)v11;
    v15 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v11 + 16))(v11);
    *(_QWORD *)&v11 = v50;
    if (v15)
    {
      v16 = *(_QWORD *)(a1 + 152);
      Name = MIL::IRArgument::GetName(v14);
      Variable = (uint64_t)MIL::Builder::BlockBuilder::GetVariable(v16, Name);
LABEL_11:
      v21 = Variable;
      goto LABEL_12;
    }
  }
  v19 = (MIL::IRArgument *)v11;
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v11 + 16))(v11))
  {
    v20 = MIL::IRArgument::GetName(v19);
    Variable = MIL::Builder::OperationBuilder::OperationBuilderImpl::GetVariable(a1, v20, a4);
    goto LABEL_11;
  }
  (*(void (**)(uint64_t *__return_ptr, MIL::IRArgument *))(*(_QWORD *)v19 + 48))(&v51, v19);
  v21 = MIL::Builder::OperationBuilder::OperationBuilderImpl::GetVariable(a1, &v51, a4);
  v26 = v52;
  if (v52)
  {
    p_shared_owners = (unint64_t *)&v52->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
LABEL_12:
  v22 = (std::__shared_weak_count *)v60.__r_.__value_.__l.__size_;
  if (v60.__r_.__value_.__l.__size_)
  {
    v23 = (unint64_t *)(v60.__r_.__value_.__l.__size_ + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  return v21;
}

void sub_1E05FBC7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  void *v44;
  int v45;
  uint64_t v46;

  if (*(char *)(v46 - 57) < 0)
    operator delete(*(void **)(v46 - 80));
  if (*(char *)(v46 - 89) < 0)
    operator delete(*(void **)(v46 - 112));
  if (a18 < 0)
    operator delete(__p);
  if (*(char *)(v46 - 121) < 0)
    operator delete(*(void **)(v46 - 144));
  if (a44 < 0)
    operator delete(a39);
  if (a37 < 0)
    operator delete(a32);
  if (a30 < 0)
    operator delete(a25);
  if (a24 < 0)
  {
    operator delete(a19);
    if ((v45 & 1) == 0)
LABEL_20:
      _Unwind_Resume(a1);
  }
  else if (!v45)
  {
    goto LABEL_20;
  }
  __cxa_free_exception(v44);
  goto LABEL_20;
}

unsigned __int8 *MIL::Builder::OperationBuilder::GetParameterNames@<X0>(unsigned __int8 **this@<X0>, uint64_t a2@<X8>)
{
  return MIL::Builder::OperationBuilder::OperationBuilderImpl::GetParameterNames(this[3], a2);
}

unsigned __int8 *MIL::Builder::OperationBuilder::OperationBuilderImpl::GetParameterNames@<X0>(unsigned __int8 *this@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  BOOL v7;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  v3 = (unsigned __int8 *)*((_QWORD *)this + 2);
  v4 = this + 24;
  if (v3 != this + 24)
  {
    do
    {
      this = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a2, v3 + 32, (uint64_t)(v3 + 32));
      v5 = (unsigned __int8 *)*((_QWORD *)v3 + 1);
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = *(unsigned __int8 **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (unsigned __int8 *)*((_QWORD *)v3 + 2);
          v7 = *(_QWORD *)v6 == (_QWORD)v3;
          v3 = v6;
        }
        while (!v7);
      }
      v3 = v6;
    }
    while (v6 != v4);
  }
  return this;
}

void sub_1E05FBE74(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::Make(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v8 = (_QWORD *)operator new();
  v9 = (uint64_t)v8;
  v10 = a1[1];
  v20 = *a1;
  v21 = (std::__shared_weak_count *)v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v19 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  MIL::Builder::OperationBuilder::OperationBuilder(v8, &v20, &v19, a3);
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, v9);
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p[2];
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v4 = a1[1];
  v16 = *a1;
  v17 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v15 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)__p = *(_OWORD *)a3;
  v14 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  MIL::Builder::OperationBuilder::Make(&v16, &v15, (uint64_t)__p, 0, a4);
  if (SHIBYTE(v14) < 0)
    operator delete(__p[0]);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1E05FBFA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  int v12;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (v12)
    MEMORY[0x1E0C023A0](v11, 0xA1C4030951706);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::Make(uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *__p[2];
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  v10 = (_QWORD *)operator new();
  v11 = (uint64_t)v10;
  v12 = (std::__shared_weak_count *)a1[1];
  v24 = *a1;
  v25 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v23 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  *(_OWORD *)__p = *(_OWORD *)a3;
  v22 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  MIL::Builder::OperationBuilder::OperationBuilder(v10, &v24, (uint64_t)&v23, (uint64_t)__p, a4);
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a5, v11);
  if (SHIBYTE(v22) < 0)
    operator delete(__p[0]);
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v25;
  if (v25)
  {
    v19 = (unint64_t *)&v25->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_1E05FC130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18)
{
  uint64_t v18;
  int v19;

  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  if (v19)
    MEMORY[0x1E0C023A0](v18, 0xA1C4030951706);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::Make(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  _QWORD *v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *__p[2];
  uint64_t v21;
  __int128 v22;
  __int128 v23;

  v12 = (_QWORD *)operator new();
  v13 = *(_OWORD *)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v22 = *(_OWORD *)a2;
  v23 = v13;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)__p = *(_OWORD *)a3;
  v21 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  MIL::Builder::OperationBuilder::OperationBuilder(v12, &v23, &v22, (uint64_t)__p, a4, a5);
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a6, (uint64_t)v12);
  if (SHIBYTE(v21) < 0)
    operator delete(__p[0]);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_1E05FC2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18)
{
  uint64_t v18;
  int v19;

  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  if (v19)
    MEMORY[0x1E0C023A0](v18, 0xA1C4030951706);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::Make(MIL::IRObject *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *__p[2];
  uint64_t v17;
  __int128 v18;

  v12 = (_QWORD *)operator new();
  v18 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)__p = *(_OWORD *)a3;
  v17 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  MIL::Builder::OperationBuilder::OperationBuilder(v12, a1, &v18, (uint64_t)__p, a4, a5);
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a6, (uint64_t)v12);
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1E05FC408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  uint64_t v16;
  int v17;

  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (v17)
    MEMORY[0x1E0C023A0](v16, 0xA1C4030951706);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::Make(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v2 = a1[1];
  v13 = *a1;
  v14 = (std::__shared_weak_count *)v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v11 = 0;
  v12 = 0;
  MIL::Builder::OperationBuilder::Make(&v13, (uint64_t)&v11, 0, a2);
  v5 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v14;
  if (v14)
  {
    v9 = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1E05FC518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::Make(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  void *__p[2];
  char v16;
  __int128 v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v4 = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 216))(*a1);
  if (v4[1] != *v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "If the operation may have nested blocks, please use the other OperationBuilder Make API which takes IROperation, MILContext and OpsetName");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v5 = (std::__shared_weak_count *)a1[1];
  v18 = *a1;
  v19 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v17 = 0uLL;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  MIL::Builder::OperationBuilder::Make(&v18, &v17, (uint64_t)__p, 0, a2);
  if (v16 < 0)
    operator delete(__p[0]);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
  if (*((_QWORD *)&v17 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = v19;
  if (v19)
  {
    v12 = (unint64_t *)&v19->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1E05FC674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;

  __cxa_free_exception(v16);
  _Unwind_Resume(a1);
}

void sub_1E05FC7BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::OperationBuilder::UpdateOwnership@<X0>(MIL::Builder::OperationBuilder::OperationBuilderImpl **this@<X0>, MIL::Builder::BlockBuilder *a2@<X1>, uint64_t a3@<X8>)
{
  return MIL::Builder::OperationBuilder::OperationBuilderImpl::UpdateOwnership(this[3], a2, a3);
}

uint64_t MIL::Builder::OperationBuilder::OperationBuilderImpl::UpdateOwnership@<X0>(MIL::Builder::OperationBuilder::OperationBuilderImpl *this@<X0>, MIL::Builder::BlockBuilder *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  MIL::Builder::BlockBuilder *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  const MIL::IRScope *ScopePtr;
  unint64_t *v13;
  unint64_t v14;
  std::runtime_error *exception;

  if (*((_QWORD *)this + 19))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "OperationBuilder is already part of another BlockBuilder.");
    goto LABEL_17;
  }
  if (!a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot update OperationBuilder's ownership to a null pointer.");
LABEL_17:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v6 = *((_QWORD *)this + 20);
  v7 = *((_QWORD *)this + 21);
  while (v6 != v7)
  {
    v9 = *(MIL::Builder::BlockBuilder **)v6;
    v8 = *(std::__shared_weak_count **)(v6 + 8);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    ScopePtr = (const MIL::IRScope *)MIL::Builder::BlockBuilder::GetScopePtr(a2);
    MIL::Builder::BlockBuilder::SetParent(v9, ScopePtr);
    if (v8)
    {
      v13 = (unint64_t *)&v8->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v6 += 16;
  }
  *((_QWORD *)this + 19) = a2;
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(a3, (uint64_t *)this + 28);
}

void sub_1E05FC914(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::RemoveOwningBlock(MIL::Builder::OperationBuilder::OperationBuilderImpl **this)
{
  MIL::Builder::OperationBuilder::OperationBuilderImpl::RemoveOwningBlock(this[3]);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::RemoveOwningBlock(MIL::Builder::OperationBuilder::OperationBuilderImpl *this)
{
  uint64_t v1;
  uint64_t v2;
  MIL::Builder::BlockBuilder *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  *((_QWORD *)this + 19) = 0;
  v1 = *((_QWORD *)this + 20);
  v2 = *((_QWORD *)this + 21);
  while (v1 != v2)
  {
    v3 = *(MIL::Builder::BlockBuilder **)v1;
    v4 = *(std::__shared_weak_count **)(v1 + 8);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    MIL::Builder::BlockBuilder::SetParent(v3, 0);
    if (v4)
    {
      v7 = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v1 += 16;
  }
}

void sub_1E05FC9E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::OperationBuilder::GetNumOutputs(MIL::Builder::OperationBuilder *this)
{
  return (uint64_t)(*(_QWORD *)(*((_QWORD *)this + 3) + 48) - *(_QWORD *)(*((_QWORD *)this + 3) + 40)) >> 4;
}

uint64_t MIL::Builder::OperationBuilder::GetOutput(MIL::Builder::OperationBuilder::OperationBuilderImpl **this, unint64_t a2)
{
  return MIL::Builder::OperationBuilder::OperationBuilderImpl::GetOutput(this[3], a2, (const MIL::Builder::OperationBuilder *)this);
}

uint64_t MIL::Builder::OperationBuilder::OperationBuilderImpl::GetOutput(MIL::Builder::OperationBuilder::OperationBuilderImpl *this, unint64_t a2, const MIL::Builder::OperationBuilder *a3)
{
  uint64_t v4;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::string::size_type v10;
  uint64_t Name;
  uint64_t Variable;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::runtime_error *exception;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  std::string::size_type size;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  std::string v37;
  std::string v38;
  std::string v39;
  std::string v40;
  std::string v41;
  std::string v42;
  std::string v43;
  std::string v44;

  v4 = *((_QWORD *)this + 5);
  if (a2 >= (*((_QWORD *)this + 6) - v4) >> 4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v38, a2);
    v19 = std::string::insert(&v38, 0, "Attempting to access output ");
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    v21 = std::string::append(&v39, " for ");
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    v23 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this);
    v24 = *(char *)(v23 + 23);
    if (v24 >= 0)
      v25 = (const std::string::value_type *)v23;
    else
      v25 = *(const std::string::value_type **)v23;
    if (v24 >= 0)
      v26 = *(unsigned __int8 *)(v23 + 23);
    else
      v26 = *(_QWORD *)(v23 + 8);
    v27 = std::string::append(&v40, v25, v26);
    v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    v29 = std::string::append(&v41, " operation, but only ");
    v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v37, (uint64_t)(*((_QWORD *)this + 6) - *((_QWORD *)this + 5)) >> 4);
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v31 = &v37;
    else
      v31 = (std::string *)v37.__r_.__value_.__r.__words[0];
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    else
      size = v37.__r_.__value_.__l.__size_;
    v33 = std::string::append(&v42, (const std::string::value_type *)v31, size);
    v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    v35 = std::string::append(&v43, " outputs are defined.");
    v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v44);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v6 = *(_OWORD *)(v4 + 16 * a2);
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v6;
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *((_QWORD *)this + 19);
  Name = MIL::IRNamedValueType::GetName((MIL::IRNamedValueType *)v6);
  if (v10)
    Variable = (uint64_t)MIL::Builder::BlockBuilder::GetVariable(v10, Name);
  else
    Variable = MIL::Builder::OperationBuilder::OperationBuilderImpl::GetVariable((uint64_t)this, Name, (std::string::size_type)a3);
  v13 = Variable;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v13;
}

void sub_1E05FCC78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  void *v47;
  int v48;
  uint64_t v49;

  if (*(char *)(v49 - 57) < 0)
    operator delete(*(void **)(v49 - 80));
  if (*(char *)(v49 - 89) < 0)
    operator delete(*(void **)(v49 - 112));
  if (a14 < 0)
    operator delete(__p);
  if (a47 < 0)
    operator delete(a42);
  if (a40 < 0)
    operator delete(a35);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v48 & 1) == 0)
LABEL_20:
      _Unwind_Resume(a1);
  }
  else if (!v48)
  {
    goto LABEL_20;
  }
  __cxa_free_exception(v47);
  goto LABEL_20;
}

uint64_t MIL::Builder::OperationBuilder::GetOutputName(MIL::Builder::OperationBuilder::OperationBuilderImpl **this, unint64_t a2)
{
  return MIL::Builder::OperationBuilder::OperationBuilderImpl::GetOutputName(this[3], a2);
}

uint64_t MIL::Builder::OperationBuilder::OperationBuilderImpl::GetOutputName(MIL::Builder::OperationBuilder::OperationBuilderImpl *this, unint64_t a2)
{
  uint64_t v2;
  std::runtime_error *exception;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  std::string::size_type size;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  std::string v25;
  std::string v26;
  std::string v27;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;

  v2 = *((_QWORD *)this + 5);
  if (a2 >= (*((_QWORD *)this + 6) - v2) >> 4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v26, a2);
    v7 = std::string::insert(&v26, 0, "Attempting to access output ");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v9 = std::string::append(&v27, " for ");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this);
    v12 = *(char *)(v11 + 23);
    if (v12 >= 0)
      v13 = (const std::string::value_type *)v11;
    else
      v13 = *(const std::string::value_type **)v11;
    if (v12 >= 0)
      v14 = *(unsigned __int8 *)(v11 + 23);
    else
      v14 = *(_QWORD *)(v11 + 8);
    v15 = std::string::append(&v28, v13, v14);
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v17 = std::string::append(&v29, " operation, but only ");
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v25, (uint64_t)(*((_QWORD *)this + 6) - *((_QWORD *)this + 5)) >> 4);
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &v25;
    else
      v19 = (std::string *)v25.__r_.__value_.__r.__words[0];
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
    else
      size = v25.__r_.__value_.__l.__size_;
    v21 = std::string::append(&v30, (const std::string::value_type *)v19, size);
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    v23 = std::string::append(&v31, " outputs are defined.");
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v32);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return MIL::IRNamedValueType::GetName(*(MIL::IRNamedValueType **)(v2 + 16 * a2));
}

void sub_1E05FCF64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  void *v40;
  int v41;
  uint64_t v42;

  if (*(char *)(v42 - 41) < 0)
    operator delete(*(void **)(v42 - 64));
  if (*(char *)(v42 - 73) < 0)
    operator delete(*(void **)(v42 - 96));
  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v42 - 105) < 0)
    operator delete(*(void **)(v42 - 128));
  if (a40 < 0)
    operator delete(a35);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v41 & 1) == 0)
LABEL_20:
      _Unwind_Resume(a1);
  }
  else if (!v41)
  {
    goto LABEL_20;
  }
  __cxa_free_exception(v40);
  goto LABEL_20;
}

uint64_t MIL::Builder::OperationBuilder::GetOutputType(MIL::Builder::OperationBuilder::OperationBuilderImpl **this, unint64_t a2)
{
  return MIL::Builder::OperationBuilder::OperationBuilderImpl::GetOutputType(this[3], a2);
}

uint64_t MIL::Builder::OperationBuilder::OperationBuilderImpl::GetOutputType(MIL::Builder::OperationBuilder::OperationBuilderImpl *this, unint64_t a2)
{
  uint64_t v2;
  std::runtime_error *exception;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  std::string::size_type size;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  std::string v25;
  std::string v26;
  std::string v27;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;

  v2 = *((_QWORD *)this + 5);
  if (a2 >= (*((_QWORD *)this + 6) - v2) >> 4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v26, a2);
    v7 = std::string::insert(&v26, 0, "Attempting to access output ");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v9 = std::string::append(&v27, " for ");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this);
    v12 = *(char *)(v11 + 23);
    if (v12 >= 0)
      v13 = (const std::string::value_type *)v11;
    else
      v13 = *(const std::string::value_type **)v11;
    if (v12 >= 0)
      v14 = *(unsigned __int8 *)(v11 + 23);
    else
      v14 = *(_QWORD *)(v11 + 8);
    v15 = std::string::append(&v28, v13, v14);
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v17 = std::string::append(&v29, " operation, but only ");
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v25, (uint64_t)(*((_QWORD *)this + 6) - *((_QWORD *)this + 5)) >> 4);
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &v25;
    else
      v19 = (std::string *)v25.__r_.__value_.__r.__words[0];
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
    else
      size = v25.__r_.__value_.__l.__size_;
    v21 = std::string::append(&v30, (const std::string::value_type *)v19, size);
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    v23 = std::string::append(&v31, " outputs are defined.");
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v32);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return MIL::IRNamedValueType::GetType(*(MIL::IRNamedValueType **)(v2 + 16 * a2));
}

void sub_1E05FD240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  void *v40;
  int v41;
  uint64_t v42;

  if (*(char *)(v42 - 41) < 0)
    operator delete(*(void **)(v42 - 64));
  if (*(char *)(v42 - 73) < 0)
    operator delete(*(void **)(v42 - 96));
  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v42 - 105) < 0)
    operator delete(*(void **)(v42 - 128));
  if (a40 < 0)
    operator delete(a35);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v41 & 1) == 0)
LABEL_20:
      _Unwind_Resume(a1);
  }
  else if (!v41)
  {
    goto LABEL_20;
  }
  __cxa_free_exception(v40);
  goto LABEL_20;
}

_QWORD *MIL::Builder::OperationBuilder::GetChildOperations@<X0>(MIL::Builder::OperationBuilder *this@<X0>, uint64_t a2@<X8>)
{
  return MIL::Builder::OperationBuilder::OperationBuilderImpl::GetChildOperations(*((_QWORD **)this + 3), a2);
}

{
  return MIL::Builder::OperationBuilder::OperationBuilderImpl::GetConstChildOperations(*((_QWORD **)this + 3), a2);
}

_QWORD *MIL::Builder::OperationBuilder::OperationBuilderImpl::GetChildOperations@<X0>(_QWORD *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  MIL::IRNamedValueType **v4;
  MIL::IRNamedValueType **v5;
  uint64_t v6;
  unsigned __int8 *Name;
  _QWORD *i;
  std::runtime_error *exception;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  if (!this[19])
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Attempting to get child operations of an OperationBuilder that is not part of a block.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v3 = this;
  v4 = (MIL::IRNamedValueType **)this[5];
  v5 = (MIL::IRNamedValueType **)this[6];
  while (v4 != v5)
  {
    v6 = v3[19];
    Name = (unsigned __int8 *)MIL::IRNamedValueType::GetName(*v4);
    this = MIL::Builder::BlockBuilder::GetOperationsByInput(v6, Name);
    for (i = (_QWORD *)this[2]; i; i = (_QWORD *)*i)
      this = std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::shared_ptr<MIL::Builder::OperationBuilder> const&>(a2, i + 2, i + 2);
    v4 += 2;
  }
  return this;
}

void sub_1E05FD418(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *MIL::Builder::OperationBuilder::OperationBuilderImpl::GetConstChildOperations@<X0>(_QWORD *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  MIL::IRNamedValueType **v4;
  MIL::IRNamedValueType **v5;
  uint64_t v6;
  unsigned __int8 *Name;
  _QWORD *i;
  std::runtime_error *exception;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  if (!this[19])
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Attempting to get child operations of an OperationBuilder that is not part of a block.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v3 = this;
  v4 = (MIL::IRNamedValueType **)this[5];
  v5 = (MIL::IRNamedValueType **)this[6];
  while (v4 != v5)
  {
    v6 = v3[19];
    Name = (unsigned __int8 *)MIL::IRNamedValueType::GetName(*v4);
    this = MIL::Builder::BlockBuilder::GetOperationsByInput(v6, Name);
    for (i = (_QWORD *)this[2]; i; i = (_QWORD *)*i)
      this = std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder const>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder const>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder const>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder const>>>::__emplace_unique_impl<std::shared_ptr<MIL::Builder::OperationBuilder> const&>((_QWORD *)a2, i + 2);
    v4 += 2;
  }
  return this;
}

void sub_1E05FD510(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::OperationBuilder::GetOperator(MIL::Builder::OperationBuilder *this)
{
  return **((_QWORD **)this + 3);
}

uint64_t MIL::Builder::OperationBuilder::GetOpsetName(MIL::Builder::OperationBuilder::OperationBuilderImpl **this)
{
  return MIL::Builder::OperationBuilder::OperationBuilderImpl::GetOpsetName(this[3]);
}

uint64_t MIL::Builder::OperationBuilder::OperationBuilderImpl::GetOpsetName(MIL::Builder::OperationBuilder::OperationBuilderImpl *this)
{
  std::runtime_error *exception;

  if (*((char *)this + 143) < 0)
  {
    if (*((_QWORD *)this + 16))
      return (uint64_t)this + 120;
LABEL_5:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "this OperationBuilder does not have an opset name.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (!*((_BYTE *)this + 143))
    goto LABEL_5;
  return (uint64_t)this + 120;
}

void sub_1E05FD5B4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::OperationBuilder::TryGetOperatorSharedPtr@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v2 = *(uint64_t **)(this + 24);
  v4 = *v2;
  v3 = v2[1];
  *a2 = v4;
  a2[1] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return this;
}

void MIL::Builder::OperationBuilder::RenameArgument(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;
  void *__p[2];
  uint64_t v10;

  v4 = *(_QWORD **)(a1 + 24);
  *(_OWORD *)__p = *(_OWORD *)a3;
  v10 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(&v8, (_QWORD *)(a1 + 8));
  MIL::Builder::OperationBuilder::OperationBuilderImpl::RenameInput(v4, a2, (uint64_t)__p, &v8);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
}

void sub_1E05FD698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::RenameInput(_QWORD *a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  MIL::IRArgument **v12;
  unsigned __int8 *Name;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned __int8 *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  BOOL v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::string __p;
  __int128 v32;
  std::string v33;
  std::string v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;

  v8 = (_QWORD *)a1[2];
  v9 = a1 + 3;
  if (v8 != a1 + 3)
  {
    while (1)
    {
      v10 = v8[7];
      if (v8[8] != v10)
        break;
LABEL_34:
      v24 = (_QWORD *)v8[1];
      if (v24)
      {
        do
        {
          v25 = v24;
          v24 = (_QWORD *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v25 = (_QWORD *)v8[2];
          v26 = *v25 == (_QWORD)v8;
          v8 = v25;
        }
        while (!v26);
      }
      v8 = v25;
      if (v25 == v9)
        goto LABEL_40;
    }
    v11 = 0;
    while (1)
    {
      v12 = (MIL::IRArgument **)(v10 + 16 * v11);
      if (!(*(unsigned int (**)(MIL::IRArgument *))(*(_QWORD *)*v12 + 16))(*v12))
        goto LABEL_33;
      Name = (unsigned __int8 *)MIL::IRArgument::GetName(*v12);
      v14 = Name[23];
      if ((v14 & 0x80u) == 0)
        v15 = Name[23];
      else
        v15 = *((_QWORD *)Name + 1);
      v16 = *(unsigned __int8 *)(a2 + 23);
      v17 = (char)v16;
      if ((v16 & 0x80u) != 0)
        v16 = *(_QWORD *)(a2 + 8);
      if (v15 != v16)
        goto LABEL_33;
      v18 = v17 >= 0 ? (unsigned __int8 *)a2 : *(unsigned __int8 **)a2;
      if ((v14 & 0x80) == 0)
        break;
      if (!memcmp(*(const void **)Name, v18, *((_QWORD *)Name + 1)))
        goto LABEL_20;
LABEL_33:
      ++v11;
      v10 = v8[7];
      if (v11 >= (v8[8] - v10) >> 4)
        goto LABEL_34;
    }
    if (Name[23])
    {
      while (*Name == *v18)
      {
        ++Name;
        ++v18;
        if (!--v14)
          goto LABEL_20;
      }
      goto LABEL_33;
    }
LABEL_20:
    if (*(char *)(a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    else
      v34 = *(std::string *)a3;
    MIL::IRArgument::Make((uint64_t)&v34, &v35);
    v36 = v35;
    if (v35)
    {
      v19 = (std::__shared_weak_count *)operator new();
      v20 = v35;
      v19->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9942C8;
      v19->__shared_owners_ = 0;
      v19->__shared_weak_owners_ = 0;
      v19[1].__vftable = (std::__shared_weak_count_vtbl *)v20;
    }
    else
    {
      v19 = 0;
    }
    v37 = v19;
    v35 = 0;
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]((_QWORD *)(v8[7] + 16 * v11), &v36);
    v21 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    goto LABEL_33;
  }
LABEL_40:
  v27 = a1[19];
  if (v27)
  {
    if (*(char *)(a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    else
      v33 = *(std::string *)a3;
    v32 = *a4;
    *(_QWORD *)a4 = 0;
    *((_QWORD *)a4 + 1) = 0;
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      __p = *(std::string *)a2;
    MIL::Builder::BlockBuilder::UpdateOpInput(v27, (uint64_t)&v33, (uint64_t *)&v32, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v28 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
    if (*((_QWORD *)&v32 + 1))
    {
      v29 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
  }
}

void sub_1E05FD9BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::GetInputArguments(MIL::Builder::OperationBuilder::OperationBuilderImpl **this@<X0>, uint64_t a2@<X8>)
{
  MIL::Builder::OperationBuilder::OperationBuilderImpl::GetInputArguments(this[3], (const MIL::Builder::OperationBuilder *)this, a2);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::GetInputArguments(MIL::Builder::OperationBuilder::OperationBuilderImpl *this@<X0>, const MIL::Builder::OperationBuilder *a2@<X1>, uint64_t a3@<X8>)
{
  MIL::Builder::OperationBuilder::OperationBuilderImpl *v6;
  unint64_t v7;
  MIL::Builder::OperationBuilder::OperationBuilderImpl *v8;
  MIL::Builder::OperationBuilder::OperationBuilderImpl *v9;
  BOOL v10;
  uint64_t ArgumentForParameter;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a3, (unint64_t)(float)*((unint64_t *)this + 4));
  v6 = (MIL::Builder::OperationBuilder::OperationBuilderImpl *)*((_QWORD *)this + 2);
  if (v6 != (MIL::Builder::OperationBuilder::OperationBuilderImpl *)((char *)this + 24))
  {
    do
    {
      if (*((_QWORD *)v6 + 8) != *((_QWORD *)v6 + 7))
      {
        LODWORD(v7) = 0;
        do
        {
          ArgumentForParameter = MIL::Builder::OperationBuilder::OperationBuilderImpl::GetArgumentForParameter((uint64_t)this, (uint64_t)v6 + 32, v7, (std::string::size_type)a2);
          std::__hash_table<MIL::Builder::Variable const*,std::hash<MIL::Builder::Variable const*>,std::equal_to<MIL::Builder::Variable const*>,std::allocator<MIL::Builder::Variable const*>>::__emplace_unique_key_args<MIL::Builder::Variable const*,MIL::Builder::Variable const*>(a3, &ArgumentForParameter, &ArgumentForParameter);
          v7 = (v7 + 1);
        }
        while (v7 < (uint64_t)(*((_QWORD *)v6 + 8) - *((_QWORD *)v6 + 7)) >> 4);
      }
      v8 = (MIL::Builder::OperationBuilder::OperationBuilderImpl *)*((_QWORD *)v6 + 1);
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = *(MIL::Builder::OperationBuilder::OperationBuilderImpl **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (MIL::Builder::OperationBuilder::OperationBuilderImpl *)*((_QWORD *)v6 + 2);
          v10 = *(_QWORD *)v9 == (_QWORD)v6;
          v6 = v9;
        }
        while (!v10);
      }
      v6 = v9;
    }
    while (v9 != (MIL::Builder::OperationBuilder::OperationBuilderImpl *)((char *)this + 24));
  }
}

void sub_1E05FDB38(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::GetOutputs(MIL::Builder::OperationBuilder::OperationBuilderImpl **this@<X0>, void **a2@<X8>)
{
  MIL::Builder::OperationBuilder::OperationBuilderImpl::GetOutputs(this[3], (const MIL::Builder::OperationBuilder *)this, a2);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::GetOutputs(MIL::Builder::OperationBuilder::OperationBuilderImpl *this@<X0>, const MIL::Builder::OperationBuilder *a2@<X1>, void **a3@<X8>)
{
  unint64_t v6;
  uint64_t Output;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<std::string const*>::reserve(a3, (uint64_t)(*((_QWORD *)this + 6) - *((_QWORD *)this + 5)) >> 4);
  if (*((_QWORD *)this + 6) != *((_QWORD *)this + 5))
  {
    v6 = 0;
    do
    {
      Output = MIL::Builder::OperationBuilder::OperationBuilderImpl::GetOutput(this, v6, a2);
      v8 = Output;
      v10 = (uint64_t *)a3[1];
      v9 = (unint64_t)a3[2];
      if ((unint64_t)v10 >= v9)
      {
        v12 = ((char *)v10 - (_BYTE *)*a3) >> 3;
        if ((unint64_t)(v12 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v13 = v9 - (_QWORD)*a3;
        v14 = v13 >> 2;
        if (v13 >> 2 <= (unint64_t)(v12 + 1))
          v14 = v12 + 1;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
          v15 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a3 + 2), v15);
        else
          v16 = 0;
        v17 = (uint64_t *)&v16[8 * v12];
        *v17 = v8;
        v11 = (char *)(v17 + 1);
        v19 = (char *)*a3;
        v18 = (char *)a3[1];
        if (v18 != *a3)
        {
          do
          {
            v20 = *((_QWORD *)v18 - 1);
            v18 -= 8;
            *--v17 = v20;
          }
          while (v18 != v19);
          v18 = (char *)*a3;
        }
        *a3 = v17;
        a3[1] = v11;
        a3[2] = &v16[8 * v15];
        if (v18)
          operator delete(v18);
      }
      else
      {
        *v10 = Output;
        v11 = (char *)(v10 + 1);
      }
      a3[1] = v11;
      ++v6;
    }
    while (v6 < (uint64_t)(*((_QWORD *)this + 6) - *((_QWORD *)this + 5)) >> 4);
  }
}

void sub_1E05FDCAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *MIL::Builder::OperationBuilder::SetAttribute@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[2];
  uint64_t v18;
  void **v19;

  v6 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v18 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7 = a3[1];
  v15 = *a3;
  v16 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v19 = __p;
  v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6 + 64, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v19);
  std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]((_QWORD *)v10 + 5, &v15);
  v11 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
  return std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (_QWORD *)(a1 + 8));
}

void sub_1E05FDDC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::OperationBuilder::GetType(uint64_t a1, uint64_t a2)
{
  return MIL::Builder::OperationBuilder::OperationBuilderImpl::GetOutputType(*(_QWORD *)(a1 + 24), a2);
}

uint64_t MIL::Builder::OperationBuilder::OperationBuilderImpl::GetOutputType(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  MIL::IRNamedValueType **v5;
  uint64_t Type;
  std::string __p;
  std::string v9;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v9 = *(std::string *)a2;
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
  else
    __p = v9;
  v5 = (MIL::IRNamedValueType **)std::find_if[abi:ne180100]<std::__wrap_iter<std::shared_ptr<MIL::IRNamedValueType> const*>,MIL::Builder::OperationBuilder::OperationBuilderImpl::GetOutputType(std::string const&)::{lambda(std::shared_ptr<MIL::IRNamedValueType>)#1}>(v3, v4, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*(MIL::IRNamedValueType ***)(a1 + 48) == v5)
    Type = 0;
  else
    Type = MIL::IRNamedValueType::GetType(*v5);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  return Type;
}

void sub_1E05FDEC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL MIL::Builder::OperationBuilder::IsPartOfBlock(MIL::Builder::OperationBuilder *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 3) + 152) != 0;
}

uint64_t MIL::Builder::OperationBuilder::GetLocation(MIL::Builder::OperationBuilder *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 3) + 104);
}

uint64_t MIL::Builder::OperationBuilder::GetLocationPtr(MIL::Builder::OperationBuilder *this)
{
  return *((_QWORD *)this + 3) + 104;
}

void MIL::Builder::OperationBuilder::SetLocation(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v2 = *(_QWORD *)(a1 + 24);
  v6 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  MIL::Builder::OperationBuilder::OperationBuilderImpl::SetLocation(v2, &v6);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1E05FDF98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::OperationBuilder::OperationBuilderImpl::SetLocation(uint64_t a1, __int128 *a2)
{
  std::runtime_error *exception;

  if (!*(_QWORD *)a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot set an empty location.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](a1 + 104, a2);
}

void sub_1E05FE000(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::OperationBuilder::GetSpecificationOpsetName(MIL::Builder::OperationBuilder *this)
{
  return *((_QWORD *)this + 3) + 200;
}

std::string *MIL::Builder::OperationBuilder::SetSpecificationOpsetName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(*(_QWORD *)(a1 + 24) + 200), a2);
}

uint64_t MIL::Builder::OperationBuilder::AddBlock@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return MIL::Builder::OperationBuilder::OperationBuilderImpl::AddBlock(*(_QWORD *)(a1 + 24), a2, a3);
}

uint64_t MIL::Builder::OperationBuilder::OperationBuilderImpl::AddBlock@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  MIL::Builder::BlockBuilder *v7;
  uint64_t ScopePtr;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::runtime_error *exception;
  std::string __p;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;

  v4 = *(_QWORD *)(a1 + 184);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Need to set the context of this Operation in order to add a block to it.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v7 = *(MIL::Builder::BlockBuilder **)(a1 + 152);
  if (v7)
  {
    ScopePtr = MIL::Builder::BlockBuilder::GetScopePtr(v7);
    v4 = *(_QWORD *)(a1 + 184);
  }
  else
  {
    ScopePtr = 0;
  }
  v9 = *(std::__shared_weak_count **)(a1 + 192);
  v21 = v4;
  v22 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  MIL::Builder::BlockBuilder::Make(&v21, (uint64_t)&__p, ScopePtr, &v23);
  v12 = v23;
  *(_QWORD *)a3 = v23;
  if (v12)
  {
    v13 = (_QWORD *)operator new();
    v14 = v23;
    *v13 = &unk_1EA99A7D0;
    v13[1] = 0;
    v13[2] = 0;
    v13[3] = v14;
  }
  else
  {
    v13 = 0;
  }
  *(_QWORD *)(a3 + 8) = v13;
  v23 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v15 = v22;
  if (v22)
  {
    v16 = (unint64_t *)&v22->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return std::vector<std::shared_ptr<MIL::IROperation>>::push_back[abi:ne180100]((char **)(a1 + 160), (__int128 *)a3);
}

void sub_1E05FE1BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddBlock(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  MIL::Builder::BlockBuilder *v9;
  std::__shared_weak_count *v10;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(std::__shared_weak_count **)(a2 + 8);
  v9 = *(MIL::Builder::BlockBuilder **)a2;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddBlock(v2, &v9);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1E05FE2AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::OperationBuilder::OperationBuilderImpl::AddBlock(uint64_t a1, MIL::Builder::BlockBuilder **a2)
{
  MIL::Builder::BlockBuilder *v4;
  MIL::Builder::BlockBuilder *v5;
  const MIL::IRScope *ScopePtr;

  v4 = *(MIL::Builder::BlockBuilder **)(a1 + 152);
  if (v4)
  {
    v5 = *a2;
    ScopePtr = (const MIL::IRScope *)MIL::Builder::BlockBuilder::GetScopePtr(v4);
    MIL::Builder::BlockBuilder::SetParent(v5, ScopePtr);
  }
  return std::vector<std::shared_ptr<MIL::Validation::Constraints const>>::push_back[abi:ne180100]((char **)(a1 + 160), (uint64_t)a2);
}

char *MIL::Builder::OperationBuilder::GetBlocks@<X0>(MIL::Builder::OperationBuilder *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 3);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  return std::vector<std::shared_ptr<MIL::Builder::BlockBuilder>>::__init_with_size[abi:ne180100]<std::shared_ptr<MIL::Builder::BlockBuilder>*,std::shared_ptr<MIL::Builder::BlockBuilder>*>((char *)a2, *(_QWORD **)(v2 + 160), *(_QWORD **)(v2 + 168), (uint64_t)(*(_QWORD *)(v2 + 168) - *(_QWORD *)(v2 + 160)) >> 4);
}

void MIL::Builder::OperationBuilder::SetContext(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v2 = *(_QWORD *)(a1 + 24);
  v6 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  MIL::Builder::OperationBuilder::OperationBuilderImpl::SetContext(v2, &v6);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1E05FE39C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::OperationBuilder::OperationBuilderImpl::SetContext(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::runtime_error *exception;

  v4 = *(_QWORD *)(a1 + 184);
  v2 = a1 + 184;
  v3 = v4;
  if (v4 && v3 != *(_QWORD *)a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot change the context of an OperationBuilder that already has one.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](v2, a2);
}

void sub_1E05FE40C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::OperationBuilder::GetContext@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v2 = *(_QWORD *)(this + 24);
  v4 = *(_QWORD *)(v2 + 184);
  v3 = *(_QWORD *)(v2 + 192);
  *a2 = v4;
  a2[1] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return this;
}

void MIL::Builder::OperationBuilder::AddInput(uint64_t a1@<X0>, uint64_t a2@<X1>, MIL::Builder::Variable::VariableImpl **a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[2];
  uint64_t v18;

  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v18 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = (std::__shared_weak_count *)a4[1];
  v15 = *a4;
  v16 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(v8, (__int128 *)__p, a3, &v15);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
}

void sub_1E05FE520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(uint64_t a1, __int128 *a2, MIL::Builder::Variable::VariableImpl **a3, _QWORD *a4)
{
  MIL::Builder::Variable::VariableImpl *Name;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void **v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::runtime_error *exception;
  __int128 v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  std::string v27;
  __int128 v28;
  uint64_t v29;

  if (!a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add a null Variable as an input.");
    goto LABEL_32;
  }
  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
LABEL_32:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  Name = MIL::Builder::Variable::TryGetName(a3);
  if (Name)
  {
    v29 = *((_QWORD *)a2 + 2);
    v28 = *a2;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    if (*((char *)Name + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)Name, *((_QWORD *)Name + 1));
    }
    else
    {
      v9 = *(_OWORD *)Name;
      v27.__r_.__value_.__r.__words[2] = *((_QWORD *)Name + 2);
      *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v9;
    }
    v26 = *(_OWORD *)a4;
    *a4 = 0;
    a4[1] = 0;
    MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(a1, &v28, (uint64_t)&v27, (uint64_t *)&v26);
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
    if (*((_QWORD *)&v26 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
    if (SHIBYTE(v29) < 0)
    {
      v16 = (void **)&v28;
      goto LABEL_28;
    }
  }
  else
  {
    v24 = *a2;
    v25 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    MIL::Builder::Variable::TryGetValueSharedPtr(a3, &v22);
    v21 = *(_OWORD *)a4;
    *a4 = 0;
    a4[1] = 0;
    MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(a1, &v24, &v22, &v21);
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
    if (*((_QWORD *)&v21 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = v23;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (SHIBYTE(v25) < 0)
    {
      v16 = (void **)&v24;
LABEL_28:
      operator delete(*v16);
    }
  }
}

void sub_1E05FE768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (*(char *)(v27 - 41) < 0)
    operator delete(*(void **)(v27 - 64));
  _Unwind_Resume(exception_object);
}

void MIL::Builder::OperationBuilder::AddInputBool(uint64_t a1@<X0>, uint64_t a2@<X1>, const MIL::IRTensorValueType *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[2];
  uint64_t v18;

  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v18 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = (std::__shared_weak_count *)a4[1];
  v15 = *a4;
  v16 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<BOOL>(v8, (uint64_t)__p, a3, &v15);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
}

void sub_1E05FE8BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<BOOL>(uint64_t a1, uint64_t a2, const MIL::IRTensorValueType *a3, uint64_t *a4)
{
  void (***v5)(MIL::MILContextImpl *__hidden);
  MIL::IRTensorValueType *Scalar;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::runtime_error *exception;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count_vtbl *v24;
  std::__shared_weak_count *v25;
  void *__p[2];
  uint64_t v27;
  std::__shared_weak_count_vtbl *v28;

  v5 = *(void (****)(MIL::MILContextImpl *__hidden))(a1 + 184);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
    goto LABEL_24;
  }
  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
LABEL_24:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  Scalar = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar(v5, 2);
  MIL::IRTensorValueType::MakeBoolValue(Scalar, a3, &v28);
  v10 = v28;
  *(_OWORD *)__p = *(_OWORD *)a2;
  v27 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v24 = v10;
  if (v10)
  {
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992BC8;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
  }
  else
  {
    v11 = 0;
  }
  v25 = v11;
  v12 = (std::__shared_weak_count *)a4[1];
  v22 = *a4;
  v23 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(a1, __p, &v24, &v22);
  v15 = v23;
  if (v23)
  {
    v16 = (unint64_t *)&v23->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v25;
  if (v25)
  {
    v19 = (unint64_t *)&v25->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (SHIBYTE(v27) < 0)
    operator delete(__p[0]);
}

void sub_1E05FEAA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  __cxa_free_exception(v18);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputString(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::string v17;
  void *__p[2];
  uint64_t v19;

  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v19 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v17 = *(std::string *)a3;
  v9 = (std::__shared_weak_count *)a4[1];
  v15 = *a4;
  v16 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<std::string>(v8, (uint64_t)__p, (uint64_t)&v17, &v15);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19) < 0)
    operator delete(__p[0]);
}

void sub_1E05FEC14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a23 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v23);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<std::string>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  void (***v5)(MIL::MILContextImpl *__hidden);
  _anonymous_namespace_ *Scalar;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::runtime_error *exception;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count_vtbl *v24;
  std::__shared_weak_count *v25;
  void *__p[2];
  uint64_t v27;
  std::string v28;
  std::__shared_weak_count_vtbl *v29;

  v5 = *(void (****)(MIL::MILContextImpl *__hidden))(a1 + 184);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
    goto LABEL_29;
  }
  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
LABEL_29:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  Scalar = (_anonymous_namespace_ *)MIL::IRTensorValueType::MakeScalar(v5, 3);
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v28 = *(std::string *)a3;
  MIL::IRTensorValueType::MakeStringValue(Scalar, (const MIL::IRTensorValueType *)&v28, &v29);
  v10 = v29;
  v29 = 0;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v27 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v24 = v10;
  if (v10)
  {
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992BC8;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
  }
  else
  {
    v11 = 0;
  }
  v25 = v11;
  v12 = (std::__shared_weak_count *)a4[1];
  v22 = *a4;
  v23 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(a1, __p, &v24, &v22);
  v15 = v23;
  if (v23)
  {
    v16 = (unint64_t *)&v23->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v25;
  if (v25)
  {
    v19 = (unint64_t *)&v25->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (SHIBYTE(v27) < 0)
    operator delete(__p[0]);
}

void sub_1E05FEE5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  _Unwind_Resume(exception_object);
}

void MIL::Builder::OperationBuilder::AddInputBFloat16(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int16 a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[2];
  uint64_t v18;

  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v18 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = (std::__shared_weak_count *)a4[1];
  v15 = *a4;
  v16 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::Bf16>(v8, (uint64_t)__p, a3, &v15);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
}

void sub_1E05FEFB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::Bf16>(uint64_t a1, uint64_t a2, unsigned __int16 a3, uint64_t *a4)
{
  void (***v5)(MIL::MILContextImpl *__hidden);
  _anonymous_namespace_ *Scalar;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::runtime_error *exception;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count_vtbl *v24;
  std::__shared_weak_count *v25;
  void *__p[2];
  uint64_t v27;
  std::__shared_weak_count_vtbl *v28;

  v5 = *(void (****)(MIL::MILContextImpl *__hidden))(a1 + 184);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
    goto LABEL_24;
  }
  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
LABEL_24:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  Scalar = (_anonymous_namespace_ *)MIL::IRTensorValueType::MakeScalar(v5, 7);
  MIL::IRTensorValueType::MakeBFloat16Value(Scalar, (const MIL::IRTensorValueType *)a3, &v28);
  v10 = v28;
  *(_OWORD *)__p = *(_OWORD *)a2;
  v27 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v24 = v10;
  if (v10)
  {
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992BC8;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
  }
  else
  {
    v11 = 0;
  }
  v25 = v11;
  v12 = (std::__shared_weak_count *)a4[1];
  v22 = *a4;
  v23 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(a1, __p, &v24, &v22);
  v15 = v23;
  if (v23)
  {
    v16 = (unint64_t *)&v23->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v25;
  if (v25)
  {
    v19 = (unint64_t *)&v25->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (SHIBYTE(v27) < 0)
    operator delete(__p[0]);
}

void sub_1E05FF198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  __cxa_free_exception(v18);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputFloat16(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int16 a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[2];
  uint64_t v18;

  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v18 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = (std::__shared_weak_count *)a4[1];
  v15 = *a4;
  v16 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::Fp16>(v8, (uint64_t)__p, a3, &v15);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
}

void sub_1E05FF2D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::Fp16>(uint64_t a1, uint64_t a2, unsigned __int16 a3, uint64_t *a4)
{
  void (***v5)(MIL::MILContextImpl *__hidden);
  _anonymous_namespace_ *Scalar;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::runtime_error *exception;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count_vtbl *v24;
  std::__shared_weak_count *v25;
  void *__p[2];
  uint64_t v27;
  std::__shared_weak_count_vtbl *v28;

  v5 = *(void (****)(MIL::MILContextImpl *__hidden))(a1 + 184);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
    goto LABEL_24;
  }
  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
LABEL_24:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  Scalar = (_anonymous_namespace_ *)MIL::IRTensorValueType::MakeScalar(v5, 4);
  MIL::IRTensorValueType::MakeFloat16Value(Scalar, (const MIL::IRTensorValueType *)a3, &v28);
  v10 = v28;
  *(_OWORD *)__p = *(_OWORD *)a2;
  v27 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v24 = v10;
  if (v10)
  {
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992BC8;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
  }
  else
  {
    v11 = 0;
  }
  v25 = v11;
  v12 = (std::__shared_weak_count *)a4[1];
  v22 = *a4;
  v23 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(a1, __p, &v24, &v22);
  v15 = v23;
  if (v23)
  {
    v16 = (unint64_t *)&v23->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v25;
  if (v25)
  {
    v19 = (unint64_t *)&v25->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (SHIBYTE(v27) < 0)
    operator delete(__p[0]);
}

void sub_1E05FF4B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  __cxa_free_exception(v18);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputFloat8E5M2(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[2];
  uint64_t v18;

  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v18 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = (std::__shared_weak_count *)a4[1];
  v15 = *a4;
  v16 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::Fp8E5M2>(v8, (uint64_t)__p, a3, &v15);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
}

void sub_1E05FF5EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::Fp8E5M2>(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t *a4)
{
  void (***v5)(MIL::MILContextImpl *__hidden);
  _anonymous_namespace_ *Scalar;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::runtime_error *exception;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count_vtbl *v24;
  std::__shared_weak_count *v25;
  void *__p[2];
  uint64_t v27;
  std::__shared_weak_count_vtbl *v28;

  v5 = *(void (****)(MIL::MILContextImpl *__hidden))(a1 + 184);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
    goto LABEL_24;
  }
  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
LABEL_24:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  Scalar = (_anonymous_namespace_ *)MIL::IRTensorValueType::MakeScalar(v5, 25);
  MIL::IRTensorValueType::MakeFloat8E5M2Value(Scalar, (const MIL::IRTensorValueType *)a3, &v28);
  v10 = v28;
  *(_OWORD *)__p = *(_OWORD *)a2;
  v27 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v24 = v10;
  if (v10)
  {
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992BC8;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
  }
  else
  {
    v11 = 0;
  }
  v25 = v11;
  v12 = (std::__shared_weak_count *)a4[1];
  v22 = *a4;
  v23 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(a1, __p, &v24, &v22);
  v15 = v23;
  if (v23)
  {
    v16 = (unint64_t *)&v23->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v25;
  if (v25)
  {
    v19 = (unint64_t *)&v25->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (SHIBYTE(v27) < 0)
    operator delete(__p[0]);
}

void sub_1E05FF7D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  __cxa_free_exception(v18);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputFloat8E4M3FN(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[2];
  uint64_t v18;

  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v18 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = (std::__shared_weak_count *)a4[1];
  v15 = *a4;
  v16 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::Fp8E4M3FN>(v8, (uint64_t)__p, a3, &v15);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
}

void sub_1E05FF908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::Fp8E4M3FN>(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t *a4)
{
  void (***v5)(MIL::MILContextImpl *__hidden);
  _anonymous_namespace_ *Scalar;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::runtime_error *exception;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count_vtbl *v24;
  std::__shared_weak_count *v25;
  void *__p[2];
  uint64_t v27;
  std::__shared_weak_count_vtbl *v28;

  v5 = *(void (****)(MIL::MILContextImpl *__hidden))(a1 + 184);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
    goto LABEL_24;
  }
  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
LABEL_24:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  Scalar = (_anonymous_namespace_ *)MIL::IRTensorValueType::MakeScalar(v5, 24);
  MIL::IRTensorValueType::MakeFloat8E4M3FNValue(Scalar, (const MIL::IRTensorValueType *)a3, &v28);
  v10 = v28;
  *(_OWORD *)__p = *(_OWORD *)a2;
  v27 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v24 = v10;
  if (v10)
  {
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992BC8;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
  }
  else
  {
    v11 = 0;
  }
  v25 = v11;
  v12 = (std::__shared_weak_count *)a4[1];
  v22 = *a4;
  v23 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(a1, __p, &v24, &v22);
  v15 = v23;
  if (v23)
  {
    v16 = (unint64_t *)&v23->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v25;
  if (v25)
  {
    v19 = (unint64_t *)&v25->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (SHIBYTE(v27) < 0)
    operator delete(__p[0]);
}

void sub_1E05FFAEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  __cxa_free_exception(v18);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputFloat32(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>, float a4@<S0>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[2];
  uint64_t v18;

  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a3, (_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v18 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = (std::__shared_weak_count *)a3[1];
  v15 = *a3;
  v16 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<float>(v8, (uint64_t)__p, &v15, a4);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
}

void sub_1E05FFC2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<float>(uint64_t a1, uint64_t a2, uint64_t *a3, float a4)
{
  void (***v5)(MIL::MILContextImpl *__hidden);
  MIL::IRTensorValueType *Scalar;
  const MIL::IRTensorValueType *v10;
  std::__shared_weak_count_vtbl *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  uint64_t v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count_vtbl *v25;
  std::__shared_weak_count *v26;
  void *__p[2];
  uint64_t v28;
  std::__shared_weak_count_vtbl *v29;

  v5 = *(void (****)(MIL::MILContextImpl *__hidden))(a1 + 184);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
    goto LABEL_24;
  }
  if (!*a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
LABEL_24:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  Scalar = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar(v5, 5);
  MIL::IRTensorValueType::MakeFloat32Value(Scalar, a4, v10, &v29);
  v11 = v29;
  *(_OWORD *)__p = *(_OWORD *)a2;
  v28 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v25 = v11;
  if (v11)
  {
    v12 = (std::__shared_weak_count *)operator new();
    v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992BC8;
    v12->__shared_owners_ = 0;
    v12->__shared_weak_owners_ = 0;
    v12[1].__vftable = v11;
  }
  else
  {
    v12 = 0;
  }
  v26 = v12;
  v13 = (std::__shared_weak_count *)a3[1];
  v23 = *a3;
  v24 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(a1, __p, &v25, &v23);
  v16 = v24;
  if (v24)
  {
    v17 = (unint64_t *)&v24->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v26;
  if (v26)
  {
    v20 = (unint64_t *)&v26->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (SHIBYTE(v28) < 0)
    operator delete(__p[0]);
}

void sub_1E05FFE18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  __cxa_free_exception(v18);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputFloat64(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>, double a4@<D0>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[2];
  uint64_t v18;

  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a3, (_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v18 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = (std::__shared_weak_count *)a3[1];
  v15 = *a3;
  v16 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<double>(v8, (uint64_t)__p, &v15, a4);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
}

void sub_1E05FFF58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<double>(uint64_t a1, uint64_t a2, uint64_t *a3, double a4)
{
  void (***v5)(MIL::MILContextImpl *__hidden);
  MIL::IRTensorValueType *Scalar;
  const MIL::IRTensorValueType *v10;
  std::__shared_weak_count_vtbl *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  uint64_t v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count_vtbl *v25;
  std::__shared_weak_count *v26;
  void *__p[2];
  uint64_t v28;
  std::__shared_weak_count_vtbl *v29;

  v5 = *(void (****)(MIL::MILContextImpl *__hidden))(a1 + 184);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
    goto LABEL_24;
  }
  if (!*a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
LABEL_24:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  Scalar = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar(v5, 6);
  MIL::IRTensorValueType::MakeFloat64Value(Scalar, a4, v10, &v29);
  v11 = v29;
  *(_OWORD *)__p = *(_OWORD *)a2;
  v28 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v25 = v11;
  if (v11)
  {
    v12 = (std::__shared_weak_count *)operator new();
    v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992BC8;
    v12->__shared_owners_ = 0;
    v12->__shared_weak_owners_ = 0;
    v12[1].__vftable = v11;
  }
  else
  {
    v12 = 0;
  }
  v26 = v12;
  v13 = (std::__shared_weak_count *)a3[1];
  v23 = *a3;
  v24 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(a1, __p, &v25, &v23);
  v16 = v24;
  if (v24)
  {
    v17 = (unint64_t *)&v24->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v26;
  if (v26)
  {
    v20 = (unint64_t *)&v26->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (SHIBYTE(v28) < 0)
    operator delete(__p[0]);
}

void sub_1E0600144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  __cxa_free_exception(v18);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputInt4(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[2];
  uint64_t v18;

  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v18 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = (std::__shared_weak_count *)a4[1];
  v15 = *a4;
  v16 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::Int4>(v8, (uint64_t)__p, a3, &v15);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
}

void sub_1E060027C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::Int4>(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  void (***v5)(MIL::MILContextImpl *__hidden);
  MIL::IRTensorValueType *Scalar;
  _BYTE *v10;
  std::__shared_weak_count_vtbl *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  uint64_t v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count_vtbl *v25;
  std::__shared_weak_count *v26;
  void *v27[2];
  uint64_t v28;
  void *v29;
  void *v30;
  _BYTE *v31;
  void *__p[3];
  std::__shared_weak_count_vtbl *v33;

  v5 = *(void (****)(MIL::MILContextImpl *__hidden))(a1 + 184);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
    goto LABEL_28;
  }
  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
LABEL_28:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  Scalar = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar(v5, 13);
  v10 = operator new(1uLL);
  v29 = v10;
  *v10 = a3;
  v30 = v10 + 1;
  v31 = v10 + 1;
  MIL::PackSubByteVec((uint64_t *)&v29, __p);
  MIL::IRTensorValueType::MakeInt4Value(Scalar, (const MIL::IRTensorValueType *)*(unsigned __int8 *)__p[0], &v33);
  v11 = v33;
  v33 = 0;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
  *(_OWORD *)v27 = *(_OWORD *)a2;
  v28 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v25 = v11;
  if (v11)
  {
    v12 = (std::__shared_weak_count *)operator new();
    v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992BC8;
    v12->__shared_owners_ = 0;
    v12->__shared_weak_owners_ = 0;
    v12[1].__vftable = v11;
  }
  else
  {
    v12 = 0;
  }
  v26 = v12;
  v13 = (std::__shared_weak_count *)a4[1];
  v23 = *a4;
  v24 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(a1, v27, &v25, &v23);
  v16 = v24;
  if (v24)
  {
    v17 = (unint64_t *)&v24->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v26;
  if (v26)
  {
    v20 = (unint64_t *)&v26->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (SHIBYTE(v28) < 0)
    operator delete(v27[0]);
}

void sub_1E06004B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  void *v23;

  __cxa_free_exception(v23);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputInt8(uint64_t a1@<X0>, uint64_t a2@<X1>, const MIL::IRTensorValueType *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[2];
  uint64_t v18;

  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v18 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = (std::__shared_weak_count *)a4[1];
  v15 = *a4;
  v16 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<signed char>(v8, (uint64_t)__p, a3, &v15);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
}

void sub_1E0600628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<signed char>(uint64_t a1, uint64_t a2, const MIL::IRTensorValueType *a3, uint64_t *a4)
{
  void (***v5)(MIL::MILContextImpl *__hidden);
  MIL::IRTensorValueType *Scalar;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::runtime_error *exception;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count_vtbl *v24;
  std::__shared_weak_count *v25;
  void *__p[2];
  uint64_t v27;
  std::__shared_weak_count_vtbl *v28;

  v5 = *(void (****)(MIL::MILContextImpl *__hidden))(a1 + 184);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
    goto LABEL_24;
  }
  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
LABEL_24:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  Scalar = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar(v5, 9);
  MIL::IRTensorValueType::MakeInt8Value(Scalar, a3, &v28);
  v10 = v28;
  *(_OWORD *)__p = *(_OWORD *)a2;
  v27 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v24 = v10;
  if (v10)
  {
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992BC8;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
  }
  else
  {
    v11 = 0;
  }
  v25 = v11;
  v12 = (std::__shared_weak_count *)a4[1];
  v22 = *a4;
  v23 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(a1, __p, &v24, &v22);
  v15 = v23;
  if (v23)
  {
    v16 = (unint64_t *)&v23->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v25;
  if (v25)
  {
    v19 = (unint64_t *)&v25->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (SHIBYTE(v27) < 0)
    operator delete(__p[0]);
}

void sub_1E060080C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  __cxa_free_exception(v18);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputInt16(uint64_t a1@<X0>, uint64_t a2@<X1>, const MIL::IRTensorValueType *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[2];
  uint64_t v18;

  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v18 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = (std::__shared_weak_count *)a4[1];
  v15 = *a4;
  v16 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<short>(v8, (uint64_t)__p, a3, &v15);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
}

void sub_1E0600944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<short>(uint64_t a1, uint64_t a2, const MIL::IRTensorValueType *a3, uint64_t *a4)
{
  void (***v5)(MIL::MILContextImpl *__hidden);
  MIL::IRTensorValueType *Scalar;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::runtime_error *exception;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count_vtbl *v24;
  std::__shared_weak_count *v25;
  void *__p[2];
  uint64_t v27;
  std::__shared_weak_count_vtbl *v28;

  v5 = *(void (****)(MIL::MILContextImpl *__hidden))(a1 + 184);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
    goto LABEL_24;
  }
  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
LABEL_24:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  Scalar = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar(v5, 10);
  MIL::IRTensorValueType::MakeInt16Value(Scalar, a3, &v28);
  v10 = v28;
  *(_OWORD *)__p = *(_OWORD *)a2;
  v27 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v24 = v10;
  if (v10)
  {
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992BC8;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
  }
  else
  {
    v11 = 0;
  }
  v25 = v11;
  v12 = (std::__shared_weak_count *)a4[1];
  v22 = *a4;
  v23 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(a1, __p, &v24, &v22);
  v15 = v23;
  if (v23)
  {
    v16 = (unint64_t *)&v23->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v25;
  if (v25)
  {
    v19 = (unint64_t *)&v25->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (SHIBYTE(v27) < 0)
    operator delete(__p[0]);
}

void sub_1E0600B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  __cxa_free_exception(v18);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputInt32(uint64_t a1@<X0>, uint64_t a2@<X1>, const MIL::IRTensorValueType *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[2];
  uint64_t v18;

  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v18 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = (std::__shared_weak_count *)a4[1];
  v15 = *a4;
  v16 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<int>(v8, (uint64_t)__p, a3, &v15);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
}

void sub_1E0600C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<int>(uint64_t a1, uint64_t a2, const MIL::IRTensorValueType *a3, uint64_t *a4)
{
  void (***v5)(MIL::MILContextImpl *__hidden);
  MIL::IRTensorValueType *Scalar;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::runtime_error *exception;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count_vtbl *v24;
  std::__shared_weak_count *v25;
  void *__p[2];
  uint64_t v27;
  std::__shared_weak_count_vtbl *v28;

  v5 = *(void (****)(MIL::MILContextImpl *__hidden))(a1 + 184);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
    goto LABEL_24;
  }
  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
LABEL_24:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  Scalar = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar(v5, 11);
  MIL::IRTensorValueType::MakeInt32Value(Scalar, a3, &v28);
  v10 = v28;
  *(_OWORD *)__p = *(_OWORD *)a2;
  v27 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v24 = v10;
  if (v10)
  {
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992BC8;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
  }
  else
  {
    v11 = 0;
  }
  v25 = v11;
  v12 = (std::__shared_weak_count *)a4[1];
  v22 = *a4;
  v23 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(a1, __p, &v24, &v22);
  v15 = v23;
  if (v23)
  {
    v16 = (unint64_t *)&v23->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v25;
  if (v25)
  {
    v19 = (unint64_t *)&v25->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (SHIBYTE(v27) < 0)
    operator delete(__p[0]);
}

void sub_1E0600E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  __cxa_free_exception(v18);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputInt64(uint64_t a1@<X0>, uint64_t a2@<X1>, const MIL::IRTensorValueType *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[2];
  uint64_t v18;

  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v18 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = (std::__shared_weak_count *)a4[1];
  v15 = *a4;
  v16 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<long long>(v8, (uint64_t)__p, a3, &v15);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
}

void sub_1E0600F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<long long>(uint64_t a1, uint64_t a2, const MIL::IRTensorValueType *a3, uint64_t *a4)
{
  void (***v5)(MIL::MILContextImpl *__hidden);
  MIL::IRTensorValueType *Scalar;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::runtime_error *exception;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count_vtbl *v24;
  std::__shared_weak_count *v25;
  void *__p[2];
  uint64_t v27;
  std::__shared_weak_count_vtbl *v28;

  v5 = *(void (****)(MIL::MILContextImpl *__hidden))(a1 + 184);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
    goto LABEL_24;
  }
  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
LABEL_24:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  Scalar = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar(v5, 12);
  MIL::IRTensorValueType::MakeInt64Value(Scalar, a3, &v28);
  v10 = v28;
  *(_OWORD *)__p = *(_OWORD *)a2;
  v27 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v24 = v10;
  if (v10)
  {
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992BC8;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
  }
  else
  {
    v11 = 0;
  }
  v25 = v11;
  v12 = (std::__shared_weak_count *)a4[1];
  v22 = *a4;
  v23 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(a1, __p, &v24, &v22);
  v15 = v23;
  if (v23)
  {
    v16 = (unint64_t *)&v23->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v25;
  if (v25)
  {
    v19 = (unint64_t *)&v25->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (SHIBYTE(v27) < 0)
    operator delete(__p[0]);
}

void sub_1E0601160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  __cxa_free_exception(v18);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputUInt1(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[2];
  uint64_t v18;

  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v18 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = (std::__shared_weak_count *)a4[1];
  v15 = *a4;
  v16 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::UInt1>(v8, (uint64_t)__p, a3, &v15);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
}

void sub_1E0601298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::UInt1>(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  void (***v5)(MIL::MILContextImpl *__hidden);
  MIL::IRTensorValueType *Scalar;
  _BYTE *v10;
  std::__shared_weak_count_vtbl *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  uint64_t v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count_vtbl *v25;
  std::__shared_weak_count *v26;
  void *v27[2];
  uint64_t v28;
  void *v29;
  void *v30;
  _BYTE *v31;
  void *__p[3];
  std::__shared_weak_count_vtbl *v33;

  v5 = *(void (****)(MIL::MILContextImpl *__hidden))(a1 + 184);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
    goto LABEL_28;
  }
  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
LABEL_28:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  Scalar = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar(v5, 21);
  v10 = operator new(1uLL);
  v29 = v10;
  *v10 = a3;
  v30 = v10 + 1;
  v31 = v10 + 1;
  MIL::PackSubByteVec((uint64_t *)&v29, __p);
  MIL::IRTensorValueType::MakeUInt1Value(Scalar, (const MIL::IRTensorValueType *)*(unsigned __int8 *)__p[0], &v33);
  v11 = v33;
  v33 = 0;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
  *(_OWORD *)v27 = *(_OWORD *)a2;
  v28 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v25 = v11;
  if (v11)
  {
    v12 = (std::__shared_weak_count *)operator new();
    v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992BC8;
    v12->__shared_owners_ = 0;
    v12->__shared_weak_owners_ = 0;
    v12[1].__vftable = v11;
  }
  else
  {
    v12 = 0;
  }
  v26 = v12;
  v13 = (std::__shared_weak_count *)a4[1];
  v23 = *a4;
  v24 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(a1, v27, &v25, &v23);
  v16 = v24;
  if (v24)
  {
    v17 = (unint64_t *)&v24->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v26;
  if (v26)
  {
    v20 = (unint64_t *)&v26->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (SHIBYTE(v28) < 0)
    operator delete(v27[0]);
}

void sub_1E06014D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  void *v23;

  __cxa_free_exception(v23);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputUInt2(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[2];
  uint64_t v18;

  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v18 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = (std::__shared_weak_count *)a4[1];
  v15 = *a4;
  v16 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::UInt2>(v8, (uint64_t)__p, a3, &v15);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
}

void sub_1E0601644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::UInt2>(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  void (***v5)(MIL::MILContextImpl *__hidden);
  MIL::IRTensorValueType *Scalar;
  _BYTE *v10;
  std::__shared_weak_count_vtbl *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  uint64_t v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count_vtbl *v25;
  std::__shared_weak_count *v26;
  void *v27[2];
  uint64_t v28;
  void *v29;
  void *v30;
  _BYTE *v31;
  void *__p[3];
  std::__shared_weak_count_vtbl *v33;

  v5 = *(void (****)(MIL::MILContextImpl *__hidden))(a1 + 184);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
    goto LABEL_28;
  }
  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
LABEL_28:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  Scalar = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar(v5, 19);
  v10 = operator new(1uLL);
  v29 = v10;
  *v10 = a3;
  v30 = v10 + 1;
  v31 = v10 + 1;
  MIL::PackSubByteVec((uint64_t *)&v29, __p);
  MIL::IRTensorValueType::MakeUInt2Value(Scalar, (const MIL::IRTensorValueType *)*(unsigned __int8 *)__p[0], &v33);
  v11 = v33;
  v33 = 0;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
  *(_OWORD *)v27 = *(_OWORD *)a2;
  v28 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v25 = v11;
  if (v11)
  {
    v12 = (std::__shared_weak_count *)operator new();
    v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992BC8;
    v12->__shared_owners_ = 0;
    v12->__shared_weak_owners_ = 0;
    v12[1].__vftable = v11;
  }
  else
  {
    v12 = 0;
  }
  v26 = v12;
  v13 = (std::__shared_weak_count *)a4[1];
  v23 = *a4;
  v24 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(a1, v27, &v25, &v23);
  v16 = v24;
  if (v24)
  {
    v17 = (unint64_t *)&v24->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v26;
  if (v26)
  {
    v20 = (unint64_t *)&v26->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (SHIBYTE(v28) < 0)
    operator delete(v27[0]);
}

void sub_1E0601880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  void *v23;

  __cxa_free_exception(v23);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputUInt3(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[2];
  uint64_t v18;

  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v18 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = (std::__shared_weak_count *)a4[1];
  v15 = *a4;
  v16 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::UInt3>(v8, (uint64_t)__p, a3, &v15);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
}

void sub_1E06019F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::UInt3>(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  void (***v5)(MIL::MILContextImpl *__hidden);
  MIL::IRTensorValueType *Scalar;
  _BYTE *v10;
  std::__shared_weak_count_vtbl *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  uint64_t v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count_vtbl *v25;
  std::__shared_weak_count *v26;
  void *v27[2];
  uint64_t v28;
  void *v29;
  void *v30;
  _BYTE *v31;
  void *__p[3];
  std::__shared_weak_count_vtbl *v33;

  v5 = *(void (****)(MIL::MILContextImpl *__hidden))(a1 + 184);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
    goto LABEL_28;
  }
  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
LABEL_28:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  Scalar = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar(v5, 22);
  v10 = operator new(1uLL);
  v29 = v10;
  *v10 = a3;
  v30 = v10 + 1;
  v31 = v10 + 1;
  MIL::PackSubByteVec((unsigned __int8 **)&v29, __p);
  MIL::IRTensorValueType::MakeUInt3Value(Scalar, (const MIL::IRTensorValueType *)*(unsigned __int8 *)__p[0], &v33);
  v11 = v33;
  v33 = 0;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
  *(_OWORD *)v27 = *(_OWORD *)a2;
  v28 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v25 = v11;
  if (v11)
  {
    v12 = (std::__shared_weak_count *)operator new();
    v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992BC8;
    v12->__shared_owners_ = 0;
    v12->__shared_weak_owners_ = 0;
    v12[1].__vftable = v11;
  }
  else
  {
    v12 = 0;
  }
  v26 = v12;
  v13 = (std::__shared_weak_count *)a4[1];
  v23 = *a4;
  v24 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(a1, v27, &v25, &v23);
  v16 = v24;
  if (v24)
  {
    v17 = (unint64_t *)&v24->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v26;
  if (v26)
  {
    v20 = (unint64_t *)&v26->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (SHIBYTE(v28) < 0)
    operator delete(v27[0]);
}

void sub_1E0601C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  void *v23;

  __cxa_free_exception(v23);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputUInt4(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[2];
  uint64_t v18;

  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v18 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = (std::__shared_weak_count *)a4[1];
  v15 = *a4;
  v16 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::UInt4>(v8, (uint64_t)__p, a3, &v15);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
}

void sub_1E0601D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::UInt4>(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  void (***v5)(MIL::MILContextImpl *__hidden);
  MIL::IRTensorValueType *Scalar;
  _BYTE *v10;
  std::__shared_weak_count_vtbl *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  uint64_t v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count_vtbl *v25;
  std::__shared_weak_count *v26;
  void *v27[2];
  uint64_t v28;
  void *v29;
  void *v30;
  _BYTE *v31;
  void *__p[3];
  std::__shared_weak_count_vtbl *v33;

  v5 = *(void (****)(MIL::MILContextImpl *__hidden))(a1 + 184);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
    goto LABEL_28;
  }
  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
LABEL_28:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  Scalar = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar(v5, 20);
  v10 = operator new(1uLL);
  v29 = v10;
  *v10 = a3;
  v30 = v10 + 1;
  v31 = v10 + 1;
  MIL::PackSubByteVec((uint64_t *)&v29, __p);
  MIL::IRTensorValueType::MakeUInt4Value(Scalar, (const MIL::IRTensorValueType *)*(unsigned __int8 *)__p[0], &v33);
  v11 = v33;
  v33 = 0;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
  *(_OWORD *)v27 = *(_OWORD *)a2;
  v28 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v25 = v11;
  if (v11)
  {
    v12 = (std::__shared_weak_count *)operator new();
    v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992BC8;
    v12->__shared_owners_ = 0;
    v12->__shared_weak_owners_ = 0;
    v12[1].__vftable = v11;
  }
  else
  {
    v12 = 0;
  }
  v26 = v12;
  v13 = (std::__shared_weak_count *)a4[1];
  v23 = *a4;
  v24 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(a1, v27, &v25, &v23);
  v16 = v24;
  if (v24)
  {
    v17 = (unint64_t *)&v24->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v26;
  if (v26)
  {
    v20 = (unint64_t *)&v26->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (SHIBYTE(v28) < 0)
    operator delete(v27[0]);
}

void sub_1E0601FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  void *v23;

  __cxa_free_exception(v23);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputUInt6(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[2];
  uint64_t v18;

  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v18 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = (std::__shared_weak_count *)a4[1];
  v15 = *a4;
  v16 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::UInt6>(v8, (uint64_t)__p, a3, &v15);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
}

void sub_1E0602148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::UInt6>(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  void (***v5)(MIL::MILContextImpl *__hidden);
  MIL::IRTensorValueType *Scalar;
  _BYTE *v10;
  std::__shared_weak_count_vtbl *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  uint64_t v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count_vtbl *v25;
  std::__shared_weak_count *v26;
  void *v27[2];
  uint64_t v28;
  void *v29;
  void *v30;
  _BYTE *v31;
  void *__p[3];
  std::__shared_weak_count_vtbl *v33;

  v5 = *(void (****)(MIL::MILContextImpl *__hidden))(a1 + 184);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
    goto LABEL_28;
  }
  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
LABEL_28:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  Scalar = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar(v5, 23);
  v10 = operator new(1uLL);
  v29 = v10;
  *v10 = a3;
  v30 = v10 + 1;
  v31 = v10 + 1;
  MIL::PackSubByteVec((unsigned __int8 **)&v29, __p);
  MIL::IRTensorValueType::MakeUInt6Value(Scalar, (const MIL::IRTensorValueType *)*(unsigned __int8 *)__p[0], &v33);
  v11 = v33;
  v33 = 0;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
  *(_OWORD *)v27 = *(_OWORD *)a2;
  v28 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v25 = v11;
  if (v11)
  {
    v12 = (std::__shared_weak_count *)operator new();
    v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992BC8;
    v12->__shared_owners_ = 0;
    v12->__shared_weak_owners_ = 0;
    v12[1].__vftable = v11;
  }
  else
  {
    v12 = 0;
  }
  v26 = v12;
  v13 = (std::__shared_weak_count *)a4[1];
  v23 = *a4;
  v24 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(a1, v27, &v25, &v23);
  v16 = v24;
  if (v24)
  {
    v17 = (unint64_t *)&v24->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v26;
  if (v26)
  {
    v20 = (unint64_t *)&v26->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (SHIBYTE(v28) < 0)
    operator delete(v27[0]);
}

void sub_1E0602384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  void *v23;

  __cxa_free_exception(v23);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputUInt8(uint64_t a1@<X0>, uint64_t a2@<X1>, const MIL::IRTensorValueType *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[2];
  uint64_t v18;

  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v18 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = (std::__shared_weak_count *)a4[1];
  v15 = *a4;
  v16 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<unsigned char>(v8, (uint64_t)__p, a3, &v15);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
}

void sub_1E06024F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<unsigned char>(uint64_t a1, uint64_t a2, const MIL::IRTensorValueType *a3, uint64_t *a4)
{
  void (***v5)(MIL::MILContextImpl *__hidden);
  MIL::IRTensorValueType *Scalar;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::runtime_error *exception;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count_vtbl *v24;
  std::__shared_weak_count *v25;
  void *__p[2];
  uint64_t v27;
  std::__shared_weak_count_vtbl *v28;

  v5 = *(void (****)(MIL::MILContextImpl *__hidden))(a1 + 184);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
    goto LABEL_24;
  }
  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
LABEL_24:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  Scalar = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar(v5, 14);
  MIL::IRTensorValueType::MakeUInt8Value(Scalar, a3, &v28);
  v10 = v28;
  *(_OWORD *)__p = *(_OWORD *)a2;
  v27 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v24 = v10;
  if (v10)
  {
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992BC8;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
  }
  else
  {
    v11 = 0;
  }
  v25 = v11;
  v12 = (std::__shared_weak_count *)a4[1];
  v22 = *a4;
  v23 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(a1, __p, &v24, &v22);
  v15 = v23;
  if (v23)
  {
    v16 = (unint64_t *)&v23->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v25;
  if (v25)
  {
    v19 = (unint64_t *)&v25->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (SHIBYTE(v27) < 0)
    operator delete(__p[0]);
}

void sub_1E06026D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  __cxa_free_exception(v18);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputUInt16(uint64_t a1@<X0>, uint64_t a2@<X1>, const MIL::IRTensorValueType *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[2];
  uint64_t v18;

  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v18 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = (std::__shared_weak_count *)a4[1];
  v15 = *a4;
  v16 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<unsigned short>(v8, (uint64_t)__p, a3, &v15);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
}

void sub_1E0602810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<unsigned short>(uint64_t a1, uint64_t a2, const MIL::IRTensorValueType *a3, uint64_t *a4)
{
  void (***v5)(MIL::MILContextImpl *__hidden);
  MIL::IRTensorValueType *Scalar;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::runtime_error *exception;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count_vtbl *v24;
  std::__shared_weak_count *v25;
  void *__p[2];
  uint64_t v27;
  std::__shared_weak_count_vtbl *v28;

  v5 = *(void (****)(MIL::MILContextImpl *__hidden))(a1 + 184);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
    goto LABEL_24;
  }
  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
LABEL_24:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  Scalar = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar(v5, 15);
  MIL::IRTensorValueType::MakeUInt16Value(Scalar, a3, &v28);
  v10 = v28;
  *(_OWORD *)__p = *(_OWORD *)a2;
  v27 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v24 = v10;
  if (v10)
  {
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992BC8;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
  }
  else
  {
    v11 = 0;
  }
  v25 = v11;
  v12 = (std::__shared_weak_count *)a4[1];
  v22 = *a4;
  v23 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(a1, __p, &v24, &v22);
  v15 = v23;
  if (v23)
  {
    v16 = (unint64_t *)&v23->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v25;
  if (v25)
  {
    v19 = (unint64_t *)&v25->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (SHIBYTE(v27) < 0)
    operator delete(__p[0]);
}

void sub_1E06029F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  __cxa_free_exception(v18);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputUInt32(uint64_t a1@<X0>, uint64_t a2@<X1>, const MIL::IRTensorValueType *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[2];
  uint64_t v18;

  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v18 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = (std::__shared_weak_count *)a4[1];
  v15 = *a4;
  v16 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<unsigned int>(v8, (uint64_t)__p, a3, &v15);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
}

void sub_1E0602B2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<unsigned int>(uint64_t a1, uint64_t a2, const MIL::IRTensorValueType *a3, uint64_t *a4)
{
  void (***v5)(MIL::MILContextImpl *__hidden);
  MIL::IRTensorValueType *Scalar;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::runtime_error *exception;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count_vtbl *v24;
  std::__shared_weak_count *v25;
  void *__p[2];
  uint64_t v27;
  std::__shared_weak_count_vtbl *v28;

  v5 = *(void (****)(MIL::MILContextImpl *__hidden))(a1 + 184);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
    goto LABEL_24;
  }
  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
LABEL_24:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  Scalar = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar(v5, 16);
  MIL::IRTensorValueType::MakeUInt32Value(Scalar, a3, &v28);
  v10 = v28;
  *(_OWORD *)__p = *(_OWORD *)a2;
  v27 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v24 = v10;
  if (v10)
  {
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992BC8;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
  }
  else
  {
    v11 = 0;
  }
  v25 = v11;
  v12 = (std::__shared_weak_count *)a4[1];
  v22 = *a4;
  v23 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(a1, __p, &v24, &v22);
  v15 = v23;
  if (v23)
  {
    v16 = (unint64_t *)&v23->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v25;
  if (v25)
  {
    v19 = (unint64_t *)&v25->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (SHIBYTE(v27) < 0)
    operator delete(__p[0]);
}

void sub_1E0602D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  __cxa_free_exception(v18);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputUInt64(uint64_t a1@<X0>, uint64_t a2@<X1>, const MIL::IRTensorValueType *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[2];
  uint64_t v18;

  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v18 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = (std::__shared_weak_count *)a4[1];
  v15 = *a4;
  v16 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<unsigned long long>(v8, (uint64_t)__p, a3, &v15);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
}

void sub_1E0602E48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<unsigned long long>(uint64_t a1, uint64_t a2, const MIL::IRTensorValueType *a3, uint64_t *a4)
{
  void (***v5)(MIL::MILContextImpl *__hidden);
  MIL::IRTensorValueType *Scalar;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::runtime_error *exception;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count_vtbl *v24;
  std::__shared_weak_count *v25;
  void *__p[2];
  uint64_t v27;
  std::__shared_weak_count_vtbl *v28;

  v5 = *(void (****)(MIL::MILContextImpl *__hidden))(a1 + 184);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
    goto LABEL_24;
  }
  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
LABEL_24:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  Scalar = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar(v5, 17);
  MIL::IRTensorValueType::MakeUInt64Value(Scalar, a3, &v28);
  v10 = v28;
  *(_OWORD *)__p = *(_OWORD *)a2;
  v27 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v24 = v10;
  if (v10)
  {
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992BC8;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
  }
  else
  {
    v11 = 0;
  }
  v25 = v11;
  v12 = (std::__shared_weak_count *)a4[1];
  v22 = *a4;
  v23 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(a1, __p, &v24, &v22);
  v15 = v23;
  if (v23)
  {
    v16 = (unint64_t *)&v23->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v25;
  if (v25)
  {
    v19 = (unint64_t *)&v25->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (SHIBYTE(v27) < 0)
    operator delete(__p[0]);
}

void sub_1E060302C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  __cxa_free_exception(v18);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputBool(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[2];
  uint64_t v18;

  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v18 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = (std::__shared_weak_count *)a4[1];
  v15 = *a4;
  v16 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<BOOL>(v8, (uint64_t)__p, a3, &v15);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
}

void sub_1E0603164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<BOOL>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  void (***v4)(MIL::MILContextImpl *__hidden);
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::runtime_error *exception;
  uint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count_vtbl *v26;
  std::__shared_weak_count *v27;
  void *v28[2];
  uint64_t v29;
  void *__p;
  void *v31;
  _QWORD *v32;

  v4 = *(void (****)(MIL::MILContextImpl *__hidden))(a1 + 184);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
    goto LABEL_26;
  }
  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
LABEL_26:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v9 = *(_QWORD *)(a3 + 8);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v31 = v10 + 1;
  v32 = v10 + 1;
  v11 = MIL::IRTensorValueType::Make(v4, 2, (MIL::MILContext ***)&__p);
  if (__p)
  {
    v31 = __p;
    operator delete(__p);
  }
  MIL::IRTensorValueType::MakeBoolValue(v11, a3, &__p);
  v12 = (std::__shared_weak_count_vtbl *)__p;
  *(_OWORD *)v28 = *(_OWORD *)a2;
  v29 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v26 = v12;
  if (v12)
  {
    v13 = (std::__shared_weak_count *)operator new();
    v13->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992BC8;
    v13->__shared_owners_ = 0;
    v13->__shared_weak_owners_ = 0;
    v13[1].__vftable = v12;
  }
  else
  {
    v13 = 0;
  }
  v27 = v13;
  v14 = (std::__shared_weak_count *)a4[1];
  v24 = *a4;
  v25 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(a1, v28, &v26, &v24);
  v17 = v25;
  if (v25)
  {
    v18 = (unint64_t *)&v25->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v27;
  if (v27)
  {
    v21 = (unint64_t *)&v27->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (SHIBYTE(v29) < 0)
    operator delete(v28[0]);
}

void sub_1E0603388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20)
{
  void *v20;

  __cxa_free_exception(v20);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputString(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[2];
  uint64_t v18;

  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v18 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = (std::__shared_weak_count *)a4[1];
  v15 = *a4;
  v16 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<std::string>(v8, (uint64_t)__p, a3, &v15);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
}

void sub_1E06034D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<std::string>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  void (***v4)(MIL::MILContextImpl *__hidden);
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::runtime_error *exception;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  void *v29[2];
  uint64_t v30;
  void *__p;
  void *v32;
  _QWORD *v33;

  v4 = *(void (****)(MIL::MILContextImpl *__hidden))(a1 + 184);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
    goto LABEL_26;
  }
  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
LABEL_26:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v10 = *a3;
  v9 = a3[1];
  v11 = operator new(8uLL);
  __p = v11;
  *v11 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v10) >> 3);
  v32 = v11 + 1;
  v33 = v11 + 1;
  v12 = MIL::IRTensorValueType::Make(v4, 3, (MIL::MILContext ***)&__p);
  if (__p)
  {
    v32 = __p;
    operator delete(__p);
  }
  MIL::IRTensorValueType::MakeStringValue(v12, (uint64_t)a3, &__p);
  v13 = (std::__shared_weak_count_vtbl *)__p;
  *(_OWORD *)v29 = *(_OWORD *)a2;
  v30 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v27 = v13;
  if (v13)
  {
    v14 = (std::__shared_weak_count *)operator new();
    v14->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992BC8;
    v14->__shared_owners_ = 0;
    v14->__shared_weak_owners_ = 0;
    v14[1].__vftable = v13;
  }
  else
  {
    v14 = 0;
  }
  v28 = v14;
  v15 = (std::__shared_weak_count *)a4[1];
  v25 = *a4;
  v26 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(a1, v29, &v27, &v25);
  v18 = v26;
  if (v26)
  {
    v19 = (unint64_t *)&v26->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v28;
  if (v28)
  {
    v22 = (unint64_t *)&v28->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (SHIBYTE(v30) < 0)
    operator delete(v29[0]);
}

void sub_1E0603718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20)
{
  void *v20;

  __cxa_free_exception(v20);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputBFloat16(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[2];
  uint64_t v18;

  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v18 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = (std::__shared_weak_count *)a4[1];
  v15 = *a4;
  v16 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::Bf16>(v8, (uint64_t)__p, a3, &v15);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
}

void sub_1E0603868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::Bf16>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  void (***v4)(MIL::MILContextImpl *__hidden);
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::runtime_error *exception;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  void *v29[2];
  uint64_t v30;
  void *__p;
  void *v32;
  _QWORD *v33;

  v4 = *(void (****)(MIL::MILContextImpl *__hidden))(a1 + 184);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
    goto LABEL_26;
  }
  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
LABEL_26:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v10 = *a3;
  v9 = a3[1];
  v11 = operator new(8uLL);
  __p = v11;
  *v11 = (v9 - v10) >> 1;
  v32 = v11 + 1;
  v33 = v11 + 1;
  v12 = MIL::IRTensorValueType::Make(v4, 7, (MIL::MILContext ***)&__p);
  if (__p)
  {
    v32 = __p;
    operator delete(__p);
  }
  MIL::IRTensorValueType::MakeBFloat16Value(v12, (uint64_t)a3, &__p);
  v13 = (std::__shared_weak_count_vtbl *)__p;
  *(_OWORD *)v29 = *(_OWORD *)a2;
  v30 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v27 = v13;
  if (v13)
  {
    v14 = (std::__shared_weak_count *)operator new();
    v14->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992BC8;
    v14->__shared_owners_ = 0;
    v14->__shared_weak_owners_ = 0;
    v14[1].__vftable = v13;
  }
  else
  {
    v14 = 0;
  }
  v28 = v14;
  v15 = (std::__shared_weak_count *)a4[1];
  v25 = *a4;
  v26 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(a1, v29, &v27, &v25);
  v18 = v26;
  if (v26)
  {
    v19 = (unint64_t *)&v26->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v28;
  if (v28)
  {
    v22 = (unint64_t *)&v28->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (SHIBYTE(v30) < 0)
    operator delete(v29[0]);
}

void sub_1E0603A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20)
{
  void *v20;

  __cxa_free_exception(v20);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputFloat16(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[2];
  uint64_t v18;

  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v18 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = (std::__shared_weak_count *)a4[1];
  v15 = *a4;
  v16 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::Fp16>(v8, (uint64_t)__p, a3, &v15);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
}

void sub_1E0603BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::Fp16>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  void (***v4)(MIL::MILContextImpl *__hidden);
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::runtime_error *exception;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  void *v29[2];
  uint64_t v30;
  void *__p;
  void *v32;
  _QWORD *v33;

  v4 = *(void (****)(MIL::MILContextImpl *__hidden))(a1 + 184);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
    goto LABEL_26;
  }
  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
LABEL_26:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v10 = *a3;
  v9 = a3[1];
  v11 = operator new(8uLL);
  __p = v11;
  *v11 = (v9 - v10) >> 1;
  v32 = v11 + 1;
  v33 = v11 + 1;
  v12 = MIL::IRTensorValueType::Make(v4, 4, (MIL::MILContext ***)&__p);
  if (__p)
  {
    v32 = __p;
    operator delete(__p);
  }
  MIL::IRTensorValueType::MakeFloat16Value(v12, (uint64_t)a3, &__p);
  v13 = (std::__shared_weak_count_vtbl *)__p;
  *(_OWORD *)v29 = *(_OWORD *)a2;
  v30 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v27 = v13;
  if (v13)
  {
    v14 = (std::__shared_weak_count *)operator new();
    v14->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992BC8;
    v14->__shared_owners_ = 0;
    v14->__shared_weak_owners_ = 0;
    v14[1].__vftable = v13;
  }
  else
  {
    v14 = 0;
  }
  v28 = v14;
  v15 = (std::__shared_weak_count *)a4[1];
  v25 = *a4;
  v26 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(a1, v29, &v27, &v25);
  v18 = v26;
  if (v26)
  {
    v19 = (unint64_t *)&v26->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v28;
  if (v28)
  {
    v22 = (unint64_t *)&v28->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (SHIBYTE(v30) < 0)
    operator delete(v29[0]);
}

void sub_1E0603E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20)
{
  void *v20;

  __cxa_free_exception(v20);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputFloat8E5M2(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[2];
  uint64_t v18;

  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v18 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = (std::__shared_weak_count *)a4[1];
  v15 = *a4;
  v16 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::Fp8E5M2>(v8, (uint64_t)__p, a3, &v15);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
}

void sub_1E0603F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::Fp8E5M2>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  void (***v4)(MIL::MILContextImpl *__hidden);
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::runtime_error *exception;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  void *v29[2];
  uint64_t v30;
  void *__p;
  void *v32;
  _QWORD *v33;

  v4 = *(void (****)(MIL::MILContextImpl *__hidden))(a1 + 184);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
    goto LABEL_26;
  }
  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
LABEL_26:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v10 = *a3;
  v9 = a3[1];
  v11 = operator new(8uLL);
  __p = v11;
  *v11 = v9 - v10;
  v32 = v11 + 1;
  v33 = v11 + 1;
  v12 = MIL::IRTensorValueType::Make(v4, 25, (MIL::MILContext ***)&__p);
  if (__p)
  {
    v32 = __p;
    operator delete(__p);
  }
  MIL::IRTensorValueType::MakeFloat8E5M2Value(v12, (uint64_t)a3, &__p);
  v13 = (std::__shared_weak_count_vtbl *)__p;
  *(_OWORD *)v29 = *(_OWORD *)a2;
  v30 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v27 = v13;
  if (v13)
  {
    v14 = (std::__shared_weak_count *)operator new();
    v14->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992BC8;
    v14->__shared_owners_ = 0;
    v14->__shared_weak_owners_ = 0;
    v14[1].__vftable = v13;
  }
  else
  {
    v14 = 0;
  }
  v28 = v14;
  v15 = (std::__shared_weak_count *)a4[1];
  v25 = *a4;
  v26 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(a1, v29, &v27, &v25);
  v18 = v26;
  if (v26)
  {
    v19 = (unint64_t *)&v26->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v28;
  if (v28)
  {
    v22 = (unint64_t *)&v28->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (SHIBYTE(v30) < 0)
    operator delete(v29[0]);
}

void sub_1E06041A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20)
{
  void *v20;

  __cxa_free_exception(v20);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputFloat8E4M3FN(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[2];
  uint64_t v18;

  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v18 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = (std::__shared_weak_count *)a4[1];
  v15 = *a4;
  v16 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::Fp8E4M3FN>(v8, (uint64_t)__p, a3, &v15);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
}

void sub_1E06042F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::Fp8E4M3FN>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  void (***v4)(MIL::MILContextImpl *__hidden);
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::runtime_error *exception;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  void *v29[2];
  uint64_t v30;
  void *__p;
  void *v32;
  _QWORD *v33;

  v4 = *(void (****)(MIL::MILContextImpl *__hidden))(a1 + 184);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
    goto LABEL_26;
  }
  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
LABEL_26:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v10 = *a3;
  v9 = a3[1];
  v11 = operator new(8uLL);
  __p = v11;
  *v11 = v9 - v10;
  v32 = v11 + 1;
  v33 = v11 + 1;
  v12 = MIL::IRTensorValueType::Make(v4, 24, (MIL::MILContext ***)&__p);
  if (__p)
  {
    v32 = __p;
    operator delete(__p);
  }
  MIL::IRTensorValueType::MakeFloat8E4M3FNValue(v12, (uint64_t)a3, &__p);
  v13 = (std::__shared_weak_count_vtbl *)__p;
  *(_OWORD *)v29 = *(_OWORD *)a2;
  v30 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v27 = v13;
  if (v13)
  {
    v14 = (std::__shared_weak_count *)operator new();
    v14->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992BC8;
    v14->__shared_owners_ = 0;
    v14->__shared_weak_owners_ = 0;
    v14[1].__vftable = v13;
  }
  else
  {
    v14 = 0;
  }
  v28 = v14;
  v15 = (std::__shared_weak_count *)a4[1];
  v25 = *a4;
  v26 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(a1, v29, &v27, &v25);
  v18 = v26;
  if (v26)
  {
    v19 = (unint64_t *)&v26->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v28;
  if (v28)
  {
    v22 = (unint64_t *)&v28->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (SHIBYTE(v30) < 0)
    operator delete(v29[0]);
}

void sub_1E0604520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20)
{
  void *v20;

  __cxa_free_exception(v20);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputFloat32(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[2];
  uint64_t v18;

  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v18 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = (std::__shared_weak_count *)a4[1];
  v15 = *a4;
  v16 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<float>(v8, (uint64_t)__p, a3, &v15);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
}

void sub_1E0604670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<float>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  void (***v4)(MIL::MILContextImpl *__hidden);
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::runtime_error *exception;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  void *v29[2];
  uint64_t v30;
  void *__p;
  void *v32;
  _QWORD *v33;

  v4 = *(void (****)(MIL::MILContextImpl *__hidden))(a1 + 184);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
    goto LABEL_26;
  }
  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
LABEL_26:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v10 = *a3;
  v9 = a3[1];
  v11 = operator new(8uLL);
  __p = v11;
  *v11 = (v9 - v10) >> 2;
  v32 = v11 + 1;
  v33 = v11 + 1;
  v12 = MIL::IRTensorValueType::Make(v4, 5, (MIL::MILContext ***)&__p);
  if (__p)
  {
    v32 = __p;
    operator delete(__p);
  }
  MIL::IRTensorValueType::MakeFloat32Value(v12, (uint64_t)a3, &__p);
  v13 = (std::__shared_weak_count_vtbl *)__p;
  *(_OWORD *)v29 = *(_OWORD *)a2;
  v30 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v27 = v13;
  if (v13)
  {
    v14 = (std::__shared_weak_count *)operator new();
    v14->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992BC8;
    v14->__shared_owners_ = 0;
    v14->__shared_weak_owners_ = 0;
    v14[1].__vftable = v13;
  }
  else
  {
    v14 = 0;
  }
  v28 = v14;
  v15 = (std::__shared_weak_count *)a4[1];
  v25 = *a4;
  v26 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(a1, v29, &v27, &v25);
  v18 = v26;
  if (v26)
  {
    v19 = (unint64_t *)&v26->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v28;
  if (v28)
  {
    v22 = (unint64_t *)&v28->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (SHIBYTE(v30) < 0)
    operator delete(v29[0]);
}

void sub_1E06048A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20)
{
  void *v20;

  __cxa_free_exception(v20);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputFloat64(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[2];
  uint64_t v18;

  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v18 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = (std::__shared_weak_count *)a4[1];
  v15 = *a4;
  v16 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<double>(v8, (uint64_t)__p, a3, &v15);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
}

void sub_1E06049F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<double>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  void (***v4)(MIL::MILContextImpl *__hidden);
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::runtime_error *exception;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  void *v29[2];
  uint64_t v30;
  void *__p;
  void *v32;
  _QWORD *v33;

  v4 = *(void (****)(MIL::MILContextImpl *__hidden))(a1 + 184);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
    goto LABEL_26;
  }
  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
LABEL_26:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v10 = *a3;
  v9 = a3[1];
  v11 = operator new(8uLL);
  __p = v11;
  *v11 = (v9 - v10) >> 3;
  v32 = v11 + 1;
  v33 = v11 + 1;
  v12 = MIL::IRTensorValueType::Make(v4, 6, (MIL::MILContext ***)&__p);
  if (__p)
  {
    v32 = __p;
    operator delete(__p);
  }
  MIL::IRTensorValueType::MakeFloat64Value(v12, (uint64_t)a3, &__p);
  v13 = (std::__shared_weak_count_vtbl *)__p;
  *(_OWORD *)v29 = *(_OWORD *)a2;
  v30 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v27 = v13;
  if (v13)
  {
    v14 = (std::__shared_weak_count *)operator new();
    v14->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992BC8;
    v14->__shared_owners_ = 0;
    v14->__shared_weak_owners_ = 0;
    v14[1].__vftable = v13;
  }
  else
  {
    v14 = 0;
  }
  v28 = v14;
  v15 = (std::__shared_weak_count *)a4[1];
  v25 = *a4;
  v26 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(a1, v29, &v27, &v25);
  v18 = v26;
  if (v26)
  {
    v19 = (unint64_t *)&v26->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v28;
  if (v28)
  {
    v22 = (unint64_t *)&v28->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (SHIBYTE(v30) < 0)
    operator delete(v29[0]);
}

void sub_1E0604C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20)
{
  void *v20;

  __cxa_free_exception(v20);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputInt4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[2];
  uint64_t v18;

  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v18 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = (std::__shared_weak_count *)a4[1];
  v15 = *a4;
  v16 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::Int4>(v8, (uint64_t)__p, a3, &v15);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
}

void sub_1E0604D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::Int4>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  void (***v4)(MIL::MILContextImpl *__hidden);
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::runtime_error *exception;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  void *v29[2];
  uint64_t v30;
  std::__shared_weak_count_vtbl *v31;
  void *__p;
  void *v33;
  _QWORD *v34;

  v4 = *(void (****)(MIL::MILContextImpl *__hidden))(a1 + 184);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
    goto LABEL_28;
  }
  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
LABEL_28:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v10 = *a3;
  v9 = a3[1];
  v11 = operator new(8uLL);
  __p = v11;
  *v11 = v9 - v10;
  v33 = v11 + 1;
  v34 = v11 + 1;
  v12 = MIL::IRTensorValueType::Make(v4, 13, (MIL::MILContext ***)&__p);
  if (__p)
  {
    v33 = __p;
    operator delete(__p);
  }
  MIL::PackSubByteVec(a3, &__p);
  MIL::IRTensorValueType::MakeInt4Value(v12, (uint64_t)&__p, &v31);
  v13 = v31;
  v31 = 0;
  if (__p)
  {
    v33 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v29 = *(_OWORD *)a2;
  v30 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v27 = v13;
  if (v13)
  {
    v14 = (std::__shared_weak_count *)operator new();
    v14->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992BC8;
    v14->__shared_owners_ = 0;
    v14->__shared_weak_owners_ = 0;
    v14[1].__vftable = v13;
  }
  else
  {
    v14 = 0;
  }
  v28 = v14;
  v15 = (std::__shared_weak_count *)a4[1];
  v25 = *a4;
  v26 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(a1, v29, &v27, &v25);
  v18 = v26;
  if (v26)
  {
    v19 = (unint64_t *)&v26->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v28;
  if (v28)
  {
    v22 = (unint64_t *)&v28->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (SHIBYTE(v30) < 0)
    operator delete(v29[0]);
}

void sub_1E0604FC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  void *v22;

  __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputInt8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[2];
  uint64_t v18;

  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v18 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = (std::__shared_weak_count *)a4[1];
  v15 = *a4;
  v16 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<signed char>(v8, (uint64_t)__p, a3, &v15);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
}

void sub_1E0605120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<signed char>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  void (***v4)(MIL::MILContextImpl *__hidden);
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::runtime_error *exception;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  void *v29[2];
  uint64_t v30;
  void *__p;
  void *v32;
  _QWORD *v33;

  v4 = *(void (****)(MIL::MILContextImpl *__hidden))(a1 + 184);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
    goto LABEL_26;
  }
  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
LABEL_26:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v10 = *a3;
  v9 = a3[1];
  v11 = operator new(8uLL);
  __p = v11;
  *v11 = v9 - v10;
  v32 = v11 + 1;
  v33 = v11 + 1;
  v12 = MIL::IRTensorValueType::Make(v4, 9, (MIL::MILContext ***)&__p);
  if (__p)
  {
    v32 = __p;
    operator delete(__p);
  }
  MIL::IRTensorValueType::MakeInt8Value(v12, (uint64_t)a3, &__p);
  v13 = (std::__shared_weak_count_vtbl *)__p;
  *(_OWORD *)v29 = *(_OWORD *)a2;
  v30 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v27 = v13;
  if (v13)
  {
    v14 = (std::__shared_weak_count *)operator new();
    v14->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992BC8;
    v14->__shared_owners_ = 0;
    v14->__shared_weak_owners_ = 0;
    v14[1].__vftable = v13;
  }
  else
  {
    v14 = 0;
  }
  v28 = v14;
  v15 = (std::__shared_weak_count *)a4[1];
  v25 = *a4;
  v26 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(a1, v29, &v27, &v25);
  v18 = v26;
  if (v26)
  {
    v19 = (unint64_t *)&v26->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v28;
  if (v28)
  {
    v22 = (unint64_t *)&v28->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (SHIBYTE(v30) < 0)
    operator delete(v29[0]);
}

void sub_1E0605350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20)
{
  void *v20;

  __cxa_free_exception(v20);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputInt16(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[2];
  uint64_t v18;

  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v18 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = (std::__shared_weak_count *)a4[1];
  v15 = *a4;
  v16 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<short>(v8, (uint64_t)__p, a3, &v15);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
}

void sub_1E06054A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<short>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  void (***v4)(MIL::MILContextImpl *__hidden);
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::runtime_error *exception;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  void *v29[2];
  uint64_t v30;
  void *__p;
  void *v32;
  _QWORD *v33;

  v4 = *(void (****)(MIL::MILContextImpl *__hidden))(a1 + 184);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
    goto LABEL_26;
  }
  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
LABEL_26:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v10 = *a3;
  v9 = a3[1];
  v11 = operator new(8uLL);
  __p = v11;
  *v11 = (v9 - v10) >> 1;
  v32 = v11 + 1;
  v33 = v11 + 1;
  v12 = MIL::IRTensorValueType::Make(v4, 10, (MIL::MILContext ***)&__p);
  if (__p)
  {
    v32 = __p;
    operator delete(__p);
  }
  MIL::IRTensorValueType::MakeInt16Value(v12, (uint64_t)a3, &__p);
  v13 = (std::__shared_weak_count_vtbl *)__p;
  *(_OWORD *)v29 = *(_OWORD *)a2;
  v30 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v27 = v13;
  if (v13)
  {
    v14 = (std::__shared_weak_count *)operator new();
    v14->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992BC8;
    v14->__shared_owners_ = 0;
    v14->__shared_weak_owners_ = 0;
    v14[1].__vftable = v13;
  }
  else
  {
    v14 = 0;
  }
  v28 = v14;
  v15 = (std::__shared_weak_count *)a4[1];
  v25 = *a4;
  v26 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(a1, v29, &v27, &v25);
  v18 = v26;
  if (v26)
  {
    v19 = (unint64_t *)&v26->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v28;
  if (v28)
  {
    v22 = (unint64_t *)&v28->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (SHIBYTE(v30) < 0)
    operator delete(v29[0]);
}

void sub_1E06056D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20)
{
  void *v20;

  __cxa_free_exception(v20);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputInt32(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[2];
  uint64_t v18;

  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v18 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = (std::__shared_weak_count *)a4[1];
  v15 = *a4;
  v16 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<int>(v8, (uint64_t)__p, a3, &v15);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
}

void sub_1E0605824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<int>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  void (***v4)(MIL::MILContextImpl *__hidden);
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::runtime_error *exception;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  void *v29[2];
  uint64_t v30;
  void *__p;
  void *v32;
  _QWORD *v33;

  v4 = *(void (****)(MIL::MILContextImpl *__hidden))(a1 + 184);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
    goto LABEL_26;
  }
  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
LABEL_26:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v10 = *a3;
  v9 = a3[1];
  v11 = operator new(8uLL);
  __p = v11;
  *v11 = (v9 - v10) >> 2;
  v32 = v11 + 1;
  v33 = v11 + 1;
  v12 = MIL::IRTensorValueType::Make(v4, 11, (MIL::MILContext ***)&__p);
  if (__p)
  {
    v32 = __p;
    operator delete(__p);
  }
  MIL::IRTensorValueType::MakeInt32Value(v12, (uint64_t)a3, &__p);
  v13 = (std::__shared_weak_count_vtbl *)__p;
  *(_OWORD *)v29 = *(_OWORD *)a2;
  v30 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v27 = v13;
  if (v13)
  {
    v14 = (std::__shared_weak_count *)operator new();
    v14->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992BC8;
    v14->__shared_owners_ = 0;
    v14->__shared_weak_owners_ = 0;
    v14[1].__vftable = v13;
  }
  else
  {
    v14 = 0;
  }
  v28 = v14;
  v15 = (std::__shared_weak_count *)a4[1];
  v25 = *a4;
  v26 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(a1, v29, &v27, &v25);
  v18 = v26;
  if (v26)
  {
    v19 = (unint64_t *)&v26->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v28;
  if (v28)
  {
    v22 = (unint64_t *)&v28->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (SHIBYTE(v30) < 0)
    operator delete(v29[0]);
}

void sub_1E0605A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20)
{
  void *v20;

  __cxa_free_exception(v20);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputInt64(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[2];
  uint64_t v18;

  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v18 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = (std::__shared_weak_count *)a4[1];
  v15 = *a4;
  v16 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<long long>(v8, (uint64_t)__p, a3, &v15);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
}

void sub_1E0605BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<long long>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  void (***v4)(MIL::MILContextImpl *__hidden);
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::runtime_error *exception;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  void *v29[2];
  uint64_t v30;
  void *__p;
  void *v32;
  _QWORD *v33;

  v4 = *(void (****)(MIL::MILContextImpl *__hidden))(a1 + 184);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
    goto LABEL_26;
  }
  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
LABEL_26:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v10 = *a3;
  v9 = a3[1];
  v11 = operator new(8uLL);
  __p = v11;
  *v11 = (v9 - v10) >> 3;
  v32 = v11 + 1;
  v33 = v11 + 1;
  v12 = MIL::IRTensorValueType::Make(v4, 12, (MIL::MILContext ***)&__p);
  if (__p)
  {
    v32 = __p;
    operator delete(__p);
  }
  MIL::IRTensorValueType::MakeInt64Value(v12, (uint64_t)a3, &__p);
  v13 = (std::__shared_weak_count_vtbl *)__p;
  *(_OWORD *)v29 = *(_OWORD *)a2;
  v30 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v27 = v13;
  if (v13)
  {
    v14 = (std::__shared_weak_count *)operator new();
    v14->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992BC8;
    v14->__shared_owners_ = 0;
    v14->__shared_weak_owners_ = 0;
    v14[1].__vftable = v13;
  }
  else
  {
    v14 = 0;
  }
  v28 = v14;
  v15 = (std::__shared_weak_count *)a4[1];
  v25 = *a4;
  v26 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(a1, v29, &v27, &v25);
  v18 = v26;
  if (v26)
  {
    v19 = (unint64_t *)&v26->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v28;
  if (v28)
  {
    v22 = (unint64_t *)&v28->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (SHIBYTE(v30) < 0)
    operator delete(v29[0]);
}

void sub_1E0605DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20)
{
  void *v20;

  __cxa_free_exception(v20);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputUInt1(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[2];
  uint64_t v18;

  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v18 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = (std::__shared_weak_count *)a4[1];
  v15 = *a4;
  v16 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::UInt1>(v8, (uint64_t)__p, a3, &v15);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
}

void sub_1E0605F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::UInt1>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  void (***v4)(MIL::MILContextImpl *__hidden);
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::runtime_error *exception;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  void *v29[2];
  uint64_t v30;
  std::__shared_weak_count_vtbl *v31;
  void *__p;
  void *v33;
  _QWORD *v34;

  v4 = *(void (****)(MIL::MILContextImpl *__hidden))(a1 + 184);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
    goto LABEL_28;
  }
  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
LABEL_28:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v10 = *a3;
  v9 = a3[1];
  v11 = operator new(8uLL);
  __p = v11;
  *v11 = v9 - v10;
  v33 = v11 + 1;
  v34 = v11 + 1;
  v12 = MIL::IRTensorValueType::Make(v4, 21, (MIL::MILContext ***)&__p);
  if (__p)
  {
    v33 = __p;
    operator delete(__p);
  }
  MIL::PackSubByteVec(a3, &__p);
  MIL::IRTensorValueType::MakeUInt1Value(v12, (uint64_t)&__p, &v31);
  v13 = v31;
  v31 = 0;
  if (__p)
  {
    v33 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v29 = *(_OWORD *)a2;
  v30 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v27 = v13;
  if (v13)
  {
    v14 = (std::__shared_weak_count *)operator new();
    v14->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992BC8;
    v14->__shared_owners_ = 0;
    v14->__shared_weak_owners_ = 0;
    v14[1].__vftable = v13;
  }
  else
  {
    v14 = 0;
  }
  v28 = v14;
  v15 = (std::__shared_weak_count *)a4[1];
  v25 = *a4;
  v26 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(a1, v29, &v27, &v25);
  v18 = v26;
  if (v26)
  {
    v19 = (unint64_t *)&v26->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v28;
  if (v28)
  {
    v22 = (unint64_t *)&v28->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (SHIBYTE(v30) < 0)
    operator delete(v29[0]);
}

void sub_1E0606178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  void *v22;

  __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputUInt2(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[2];
  uint64_t v18;

  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v18 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = (std::__shared_weak_count *)a4[1];
  v15 = *a4;
  v16 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::UInt2>(v8, (uint64_t)__p, a3, &v15);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
}

void sub_1E06062D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::UInt2>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  void (***v4)(MIL::MILContextImpl *__hidden);
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::runtime_error *exception;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  void *v29[2];
  uint64_t v30;
  std::__shared_weak_count_vtbl *v31;
  void *__p;
  void *v33;
  _QWORD *v34;

  v4 = *(void (****)(MIL::MILContextImpl *__hidden))(a1 + 184);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
    goto LABEL_28;
  }
  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
LABEL_28:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v10 = *a3;
  v9 = a3[1];
  v11 = operator new(8uLL);
  __p = v11;
  *v11 = v9 - v10;
  v33 = v11 + 1;
  v34 = v11 + 1;
  v12 = MIL::IRTensorValueType::Make(v4, 19, (MIL::MILContext ***)&__p);
  if (__p)
  {
    v33 = __p;
    operator delete(__p);
  }
  MIL::PackSubByteVec(a3, &__p);
  MIL::IRTensorValueType::MakeUInt2Value(v12, (uint64_t)&__p, &v31);
  v13 = v31;
  v31 = 0;
  if (__p)
  {
    v33 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v29 = *(_OWORD *)a2;
  v30 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v27 = v13;
  if (v13)
  {
    v14 = (std::__shared_weak_count *)operator new();
    v14->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992BC8;
    v14->__shared_owners_ = 0;
    v14->__shared_weak_owners_ = 0;
    v14[1].__vftable = v13;
  }
  else
  {
    v14 = 0;
  }
  v28 = v14;
  v15 = (std::__shared_weak_count *)a4[1];
  v25 = *a4;
  v26 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(a1, v29, &v27, &v25);
  v18 = v26;
  if (v26)
  {
    v19 = (unint64_t *)&v26->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v28;
  if (v28)
  {
    v22 = (unint64_t *)&v28->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (SHIBYTE(v30) < 0)
    operator delete(v29[0]);
}

void sub_1E0606520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  void *v22;

  __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputUInt3(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[2];
  uint64_t v18;

  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v18 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = (std::__shared_weak_count *)a4[1];
  v15 = *a4;
  v16 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::UInt3>(v8, (uint64_t)__p, a3, &v15);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
}

void sub_1E060667C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::UInt3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  void (***v4)(MIL::MILContextImpl *__hidden);
  uint64_t v9;
  unsigned __int8 *v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::runtime_error *exception;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  void *v29[2];
  uint64_t v30;
  std::__shared_weak_count_vtbl *v31;
  void *__p;
  void *v33;
  _QWORD *v34;

  v4 = *(void (****)(MIL::MILContextImpl *__hidden))(a1 + 184);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
    goto LABEL_28;
  }
  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
LABEL_28:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v10 = *(unsigned __int8 **)a3;
  v9 = *(_QWORD *)(a3 + 8);
  v11 = operator new(8uLL);
  __p = v11;
  *v11 = v9 - (_QWORD)v10;
  v33 = v11 + 1;
  v34 = v11 + 1;
  v12 = MIL::IRTensorValueType::Make(v4, 22, (MIL::MILContext ***)&__p);
  if (__p)
  {
    v33 = __p;
    operator delete(__p);
  }
  MIL::PackSubByteVec((unsigned __int8 **)a3, &__p);
  MIL::IRTensorValueType::MakeUInt3Value(v12, (uint64_t)&__p, &v31);
  v13 = v31;
  v31 = 0;
  if (__p)
  {
    v33 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v29 = *(_OWORD *)a2;
  v30 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v27 = v13;
  if (v13)
  {
    v14 = (std::__shared_weak_count *)operator new();
    v14->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992BC8;
    v14->__shared_owners_ = 0;
    v14->__shared_weak_owners_ = 0;
    v14[1].__vftable = v13;
  }
  else
  {
    v14 = 0;
  }
  v28 = v14;
  v15 = (std::__shared_weak_count *)a4[1];
  v25 = *a4;
  v26 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(a1, v29, &v27, &v25);
  v18 = v26;
  if (v26)
  {
    v19 = (unint64_t *)&v26->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v28;
  if (v28)
  {
    v22 = (unint64_t *)&v28->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (SHIBYTE(v30) < 0)
    operator delete(v29[0]);
}

void sub_1E06068C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  void *v22;

  __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputUInt4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[2];
  uint64_t v18;

  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v18 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = (std::__shared_weak_count *)a4[1];
  v15 = *a4;
  v16 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::UInt4>(v8, (uint64_t)__p, a3, &v15);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
}

void sub_1E0606A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::UInt4>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  void (***v4)(MIL::MILContextImpl *__hidden);
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::runtime_error *exception;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  void *v29[2];
  uint64_t v30;
  std::__shared_weak_count_vtbl *v31;
  void *__p;
  void *v33;
  _QWORD *v34;

  v4 = *(void (****)(MIL::MILContextImpl *__hidden))(a1 + 184);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
    goto LABEL_28;
  }
  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
LABEL_28:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v10 = *a3;
  v9 = a3[1];
  v11 = operator new(8uLL);
  __p = v11;
  *v11 = v9 - v10;
  v33 = v11 + 1;
  v34 = v11 + 1;
  v12 = MIL::IRTensorValueType::Make(v4, 20, (MIL::MILContext ***)&__p);
  if (__p)
  {
    v33 = __p;
    operator delete(__p);
  }
  MIL::PackSubByteVec(a3, &__p);
  MIL::IRTensorValueType::MakeUInt4Value(v12, (uint64_t)&__p, &v31);
  v13 = v31;
  v31 = 0;
  if (__p)
  {
    v33 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v29 = *(_OWORD *)a2;
  v30 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v27 = v13;
  if (v13)
  {
    v14 = (std::__shared_weak_count *)operator new();
    v14->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992BC8;
    v14->__shared_owners_ = 0;
    v14->__shared_weak_owners_ = 0;
    v14[1].__vftable = v13;
  }
  else
  {
    v14 = 0;
  }
  v28 = v14;
  v15 = (std::__shared_weak_count *)a4[1];
  v25 = *a4;
  v26 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(a1, v29, &v27, &v25);
  v18 = v26;
  if (v26)
  {
    v19 = (unint64_t *)&v26->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v28;
  if (v28)
  {
    v22 = (unint64_t *)&v28->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (SHIBYTE(v30) < 0)
    operator delete(v29[0]);
}

void sub_1E0606C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  void *v22;

  __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputUInt6(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[2];
  uint64_t v18;

  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v18 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = (std::__shared_weak_count *)a4[1];
  v15 = *a4;
  v16 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::UInt6>(v8, (uint64_t)__p, a3, &v15);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
}

void sub_1E0606DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::UInt6>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  void (***v4)(MIL::MILContextImpl *__hidden);
  uint64_t v9;
  unsigned __int8 *v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::runtime_error *exception;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  void *v29[2];
  uint64_t v30;
  std::__shared_weak_count_vtbl *v31;
  void *__p;
  void *v33;
  _QWORD *v34;

  v4 = *(void (****)(MIL::MILContextImpl *__hidden))(a1 + 184);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
    goto LABEL_28;
  }
  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
LABEL_28:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v10 = *(unsigned __int8 **)a3;
  v9 = *(_QWORD *)(a3 + 8);
  v11 = operator new(8uLL);
  __p = v11;
  *v11 = v9 - (_QWORD)v10;
  v33 = v11 + 1;
  v34 = v11 + 1;
  v12 = MIL::IRTensorValueType::Make(v4, 23, (MIL::MILContext ***)&__p);
  if (__p)
  {
    v33 = __p;
    operator delete(__p);
  }
  MIL::PackSubByteVec((unsigned __int8 **)a3, &__p);
  MIL::IRTensorValueType::MakeUInt6Value(v12, (uint64_t)&__p, &v31);
  v13 = v31;
  v31 = 0;
  if (__p)
  {
    v33 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v29 = *(_OWORD *)a2;
  v30 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v27 = v13;
  if (v13)
  {
    v14 = (std::__shared_weak_count *)operator new();
    v14->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992BC8;
    v14->__shared_owners_ = 0;
    v14->__shared_weak_owners_ = 0;
    v14[1].__vftable = v13;
  }
  else
  {
    v14 = 0;
  }
  v28 = v14;
  v15 = (std::__shared_weak_count *)a4[1];
  v25 = *a4;
  v26 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(a1, v29, &v27, &v25);
  v18 = v26;
  if (v26)
  {
    v19 = (unint64_t *)&v26->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v28;
  if (v28)
  {
    v22 = (unint64_t *)&v28->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (SHIBYTE(v30) < 0)
    operator delete(v29[0]);
}

void sub_1E0607018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  void *v22;

  __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputUInt8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[2];
  uint64_t v18;

  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v18 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = (std::__shared_weak_count *)a4[1];
  v15 = *a4;
  v16 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<unsigned char>(v8, (uint64_t)__p, a3, &v15);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
}

void sub_1E0607174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<unsigned char>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  void (***v4)(MIL::MILContextImpl *__hidden);
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::runtime_error *exception;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  void *v29[2];
  uint64_t v30;
  void *__p;
  void *v32;
  _QWORD *v33;

  v4 = *(void (****)(MIL::MILContextImpl *__hidden))(a1 + 184);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
    goto LABEL_26;
  }
  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
LABEL_26:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v10 = *a3;
  v9 = a3[1];
  v11 = operator new(8uLL);
  __p = v11;
  *v11 = v9 - v10;
  v32 = v11 + 1;
  v33 = v11 + 1;
  v12 = MIL::IRTensorValueType::Make(v4, 14, (MIL::MILContext ***)&__p);
  if (__p)
  {
    v32 = __p;
    operator delete(__p);
  }
  MIL::IRTensorValueType::MakeUInt8Value(v12, (uint64_t)a3, &__p);
  v13 = (std::__shared_weak_count_vtbl *)__p;
  *(_OWORD *)v29 = *(_OWORD *)a2;
  v30 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v27 = v13;
  if (v13)
  {
    v14 = (std::__shared_weak_count *)operator new();
    v14->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992BC8;
    v14->__shared_owners_ = 0;
    v14->__shared_weak_owners_ = 0;
    v14[1].__vftable = v13;
  }
  else
  {
    v14 = 0;
  }
  v28 = v14;
  v15 = (std::__shared_weak_count *)a4[1];
  v25 = *a4;
  v26 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(a1, v29, &v27, &v25);
  v18 = v26;
  if (v26)
  {
    v19 = (unint64_t *)&v26->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v28;
  if (v28)
  {
    v22 = (unint64_t *)&v28->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (SHIBYTE(v30) < 0)
    operator delete(v29[0]);
}

void sub_1E06073A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20)
{
  void *v20;

  __cxa_free_exception(v20);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputUInt16(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[2];
  uint64_t v18;

  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v18 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = (std::__shared_weak_count *)a4[1];
  v15 = *a4;
  v16 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<unsigned short>(v8, (uint64_t)__p, a3, &v15);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
}

void sub_1E06074F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<unsigned short>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  void (***v4)(MIL::MILContextImpl *__hidden);
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::runtime_error *exception;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  void *v29[2];
  uint64_t v30;
  void *__p;
  void *v32;
  _QWORD *v33;

  v4 = *(void (****)(MIL::MILContextImpl *__hidden))(a1 + 184);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
    goto LABEL_26;
  }
  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
LABEL_26:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v10 = *a3;
  v9 = a3[1];
  v11 = operator new(8uLL);
  __p = v11;
  *v11 = (v9 - v10) >> 1;
  v32 = v11 + 1;
  v33 = v11 + 1;
  v12 = MIL::IRTensorValueType::Make(v4, 15, (MIL::MILContext ***)&__p);
  if (__p)
  {
    v32 = __p;
    operator delete(__p);
  }
  MIL::IRTensorValueType::MakeUInt16Value(v12, (uint64_t)a3, &__p);
  v13 = (std::__shared_weak_count_vtbl *)__p;
  *(_OWORD *)v29 = *(_OWORD *)a2;
  v30 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v27 = v13;
  if (v13)
  {
    v14 = (std::__shared_weak_count *)operator new();
    v14->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992BC8;
    v14->__shared_owners_ = 0;
    v14->__shared_weak_owners_ = 0;
    v14[1].__vftable = v13;
  }
  else
  {
    v14 = 0;
  }
  v28 = v14;
  v15 = (std::__shared_weak_count *)a4[1];
  v25 = *a4;
  v26 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(a1, v29, &v27, &v25);
  v18 = v26;
  if (v26)
  {
    v19 = (unint64_t *)&v26->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v28;
  if (v28)
  {
    v22 = (unint64_t *)&v28->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (SHIBYTE(v30) < 0)
    operator delete(v29[0]);
}

void sub_1E0607728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20)
{
  void *v20;

  __cxa_free_exception(v20);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputUInt32(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[2];
  uint64_t v18;

  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v18 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = (std::__shared_weak_count *)a4[1];
  v15 = *a4;
  v16 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<unsigned int>(v8, (uint64_t)__p, a3, &v15);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
}

void sub_1E0607878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<unsigned int>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  void (***v4)(MIL::MILContextImpl *__hidden);
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::runtime_error *exception;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  void *v29[2];
  uint64_t v30;
  void *__p;
  void *v32;
  _QWORD *v33;

  v4 = *(void (****)(MIL::MILContextImpl *__hidden))(a1 + 184);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
    goto LABEL_26;
  }
  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
LABEL_26:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v10 = *a3;
  v9 = a3[1];
  v11 = operator new(8uLL);
  __p = v11;
  *v11 = (v9 - v10) >> 2;
  v32 = v11 + 1;
  v33 = v11 + 1;
  v12 = MIL::IRTensorValueType::Make(v4, 16, (MIL::MILContext ***)&__p);
  if (__p)
  {
    v32 = __p;
    operator delete(__p);
  }
  MIL::IRTensorValueType::MakeUInt32Value(v12, (uint64_t)a3, &__p);
  v13 = (std::__shared_weak_count_vtbl *)__p;
  *(_OWORD *)v29 = *(_OWORD *)a2;
  v30 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v27 = v13;
  if (v13)
  {
    v14 = (std::__shared_weak_count *)operator new();
    v14->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992BC8;
    v14->__shared_owners_ = 0;
    v14->__shared_weak_owners_ = 0;
    v14[1].__vftable = v13;
  }
  else
  {
    v14 = 0;
  }
  v28 = v14;
  v15 = (std::__shared_weak_count *)a4[1];
  v25 = *a4;
  v26 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(a1, v29, &v27, &v25);
  v18 = v26;
  if (v26)
  {
    v19 = (unint64_t *)&v26->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v28;
  if (v28)
  {
    v22 = (unint64_t *)&v28->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (SHIBYTE(v30) < 0)
    operator delete(v29[0]);
}

void sub_1E0607AAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20)
{
  void *v20;

  __cxa_free_exception(v20);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputUInt64(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[2];
  uint64_t v18;

  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v18 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = (std::__shared_weak_count *)a4[1];
  v15 = *a4;
  v16 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<unsigned long long>(v8, (uint64_t)__p, a3, &v15);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
}

void sub_1E0607BFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<unsigned long long>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  void (***v4)(MIL::MILContextImpl *__hidden);
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::runtime_error *exception;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  void *v29[2];
  uint64_t v30;
  void *__p;
  void *v32;
  _QWORD *v33;

  v4 = *(void (****)(MIL::MILContextImpl *__hidden))(a1 + 184);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
    goto LABEL_26;
  }
  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
LABEL_26:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v10 = *a3;
  v9 = a3[1];
  v11 = operator new(8uLL);
  __p = v11;
  *v11 = (v9 - v10) >> 3;
  v32 = v11 + 1;
  v33 = v11 + 1;
  v12 = MIL::IRTensorValueType::Make(v4, 17, (MIL::MILContext ***)&__p);
  if (__p)
  {
    v32 = __p;
    operator delete(__p);
  }
  MIL::IRTensorValueType::MakeUInt64Value(v12, (uint64_t)a3, &__p);
  v13 = (std::__shared_weak_count_vtbl *)__p;
  *(_OWORD *)v29 = *(_OWORD *)a2;
  v30 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v27 = v13;
  if (v13)
  {
    v14 = (std::__shared_weak_count *)operator new();
    v14->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992BC8;
    v14->__shared_owners_ = 0;
    v14->__shared_weak_owners_ = 0;
    v14[1].__vftable = v13;
  }
  else
  {
    v14 = 0;
  }
  v28 = v14;
  v15 = (std::__shared_weak_count *)a4[1];
  v25 = *a4;
  v26 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(a1, v29, &v27, &v25);
  v18 = v26;
  if (v26)
  {
    v19 = (unint64_t *)&v26->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v28;
  if (v28)
  {
    v22 = (unint64_t *)&v28->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (SHIBYTE(v30) < 0)
    operator delete(v29[0]);
}

void sub_1E0607E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20)
{
  void *v20;

  __cxa_free_exception(v20);
  _Unwind_Resume(a1);
}

void sub_1E0608044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21)
{
  uint64_t v21;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v21);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(uint64_t a1, __int128 *a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t **v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::runtime_error *v27;
  std::runtime_error *exception;
  void *__p[2];
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  std::string v33;
  __int128 v34;
  __int128 *v35;

  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v4 = *a3;
  v5 = a3[1];
  if (*a3 != v5)
  {
    v9 = (uint64_t **)(a1 + 16);
    do
    {
      v10 = *v4;
      v11 = v4[1];
      *(_QWORD *)&v34 = *v4;
      *((_QWORD *)&v34 + 1) = v11;
      if (v11)
      {
        v12 = (unint64_t *)(v11 + 8);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
      if (!v10)
      {
        v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v27, "Cannot bind an input to a null IRArgument.");
        __cxa_throw(v27, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v35 = a2;
      v14 = std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (const void **)a2, (uint64_t)&std::piecewise_construct, &v35);
      std::vector<std::shared_ptr<MIL::IROperation>>::push_back[abi:ne180100]((char **)v14 + 7, &v34);
      if (*(_QWORD *)(a1 + 152))
      {
        v15 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v34 + 32))(v34);
        if (v15)
        {
          v16 = *(_QWORD *)(a1 + 152);
          if (*(char *)(v15 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)v15, *(_QWORD *)(v15 + 8));
          }
          else
          {
            v17 = *(_OWORD *)v15;
            v33.__r_.__value_.__r.__words[2] = *(_QWORD *)(v15 + 16);
            *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v17;
          }
          v18 = (std::__shared_weak_count *)a4[1];
          v31 = *a4;
          v32 = v18;
          if (v18)
          {
            p_shared_owners = (unint64_t *)&v18->__shared_owners_;
            do
              v20 = __ldxr(p_shared_owners);
            while (__stxr(v20 + 1, p_shared_owners));
          }
          __p[0] = 0;
          __p[1] = 0;
          v30 = 0;
          MIL::Builder::BlockBuilder::UpdateOpInput(v16, (uint64_t)&v33, &v31, (uint64_t)__p);
          if (SHIBYTE(v30) < 0)
            operator delete(__p[0]);
          v21 = v32;
          if (v32)
          {
            v22 = (unint64_t *)&v32->__shared_owners_;
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
          if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v33.__r_.__value_.__l.__data_);
        }
      }
      v24 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
      if (*((_QWORD *)&v34 + 1))
      {
        v25 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v4 += 2;
    }
    while (v4 != v5);
  }
}

void sub_1E06082C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25)
{
  void *v25;

  __cxa_free_exception(v25);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInput(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::string v17;

  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 24);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v17 = *(std::string *)a2;
  v9 = (std::__shared_weak_count *)a4[1];
  v15 = *a4;
  v16 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(v8, (__int128 *)&v17, a3, &v15);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
}

void sub_1E0608420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::OperationBuilder::RemoveInputs(uint64_t a1, const void **a2)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v3 = *(_QWORD *)(a1 + 24);
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(&v9, (_QWORD *)(a1 + 8));
  v4 = MIL::Builder::OperationBuilder::OperationBuilderImpl::RemoveInputs(v3, a2, &v9);
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_1E06084D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::OperationBuilder::OperationBuilderImpl::RemoveInputs(uint64_t a1, const void **a2, uint64_t *a3)
{
  uint64_t **v6;
  uint64_t result;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  std::string v22;
  const void **v23;

  v6 = (uint64_t **)(a1 + 16);
  result = std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__count_unique<std::string>(a1 + 16, a2);
  if (result)
  {
    if (*(_QWORD *)(a1 + 152))
    {
      v23 = a2;
      v8 = std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v23);
      v9 = (_QWORD *)v8[7];
      v10 = (_QWORD *)v8[8];
      while (v9 != v10)
      {
        v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v9 + 32))(*v9);
        if (v11)
        {
          v12 = *(_QWORD *)(a1 + 152);
          if (*(char *)(v11 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)v11, *(_QWORD *)(v11 + 8));
          }
          else
          {
            v13 = *(_OWORD *)v11;
            v22.__r_.__value_.__r.__words[2] = *(_QWORD *)(v11 + 16);
            *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v13;
          }
          v14 = a3[1];
          v20 = *a3;
          v21 = (std::__shared_weak_count *)v14;
          if (v14)
          {
            v15 = (unint64_t *)(v14 + 8);
            do
              v16 = __ldxr(v15);
            while (__stxr(v16 + 1, v15));
          }
          MIL::Builder::BlockBuilder::RemoveOpInput(v12, (uint64_t)&v22, &v20);
          v17 = v21;
          if (v21)
          {
            p_shared_owners = (unint64_t *)&v21->__shared_owners_;
            do
              v19 = __ldaxr(p_shared_owners);
            while (__stlxr(v19 - 1, p_shared_owners));
            if (!v19)
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v17);
            }
          }
          if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v22.__r_.__value_.__l.__data_);
        }
        v9 += 2;
      }
    }
    return std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__erase_unique<std::string>(v6, a2) != 0;
  }
  return result;
}

void sub_1E0608648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

unsigned __int8 *MIL::Builder::OperationBuilder::TryGetAttribute@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>((_QWORD *)(*(_QWORD *)(a1 + 24) + 64), a2);
  if (result)
  {
    v5 = *((_QWORD *)result + 6);
    *a3 = *((_QWORD *)result + 5);
    a3[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

uint64_t MIL::Builder::OperationBuilder::GetParameters(MIL::Builder::OperationBuilder *this)
{
  return *((_QWORD *)this + 3) + 16;
}

void MIL::Builder::OperationBuilder::TryGetConstant(const void ****this@<X0>, _QWORD *a2@<X8>)
{
  MIL::Builder::OperationBuilder::OperationBuilderImpl::TryGetConstant(this[3], a2);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::TryGetConstant(const void ***this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::runtime_error *exception;
  _QWORD v8[3];
  void **v9;

  if (((*((uint64_t (**)(const void **))**this + 13))(*this) & 1) != 0)
  {
    MIL::Builder::OperationBuilder::OperationBuilderImpl::GetConstants(this);
    if (v8[1] - v8[0] != 16)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "OperationBuilder has more than 1 constants, please use TryGetConstants instead.");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v4 = *(_QWORD *)(v8[0] + 8);
    *a2 = *(_QWORD *)v8[0];
    a2[1] = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    v9 = (void **)v8;
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v9);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void sub_1E0608798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::GetConstants(const void ****this)
{
  MIL::Builder::OperationBuilder::OperationBuilderImpl::GetConstants(this[3]);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::GetConstants(const void ***this)
{
  _QWORD **v2;
  char *v3;
  unint64_t v4;
  MIL::IRArgument **v5;
  const void **v6;
  uint64_t Name;
  __int128 v8;
  unint64_t *v9;
  unint64_t v10;
  const void **v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD **v27;
  BOOL v28;
  _QWORD *v29;
  uint64_t v30;
  const void **v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  _anonymous_namespace_::IROperationImpl *v41;
  std::runtime_error *exception;
  uint64_t v43[3];
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  _anonymous_namespace_::IROperationImpl *v47;
  _OWORD v48[2];
  uint64_t v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  __int128 v52;
  _QWORD **v53;
  _QWORD *v54[2];
  void **v55;

  if (((*((uint64_t (**)(const void **))**this + 13))(*this) & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This operator does not have constant function defined.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  std::map<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>::map[abi:ne180100]((uint64_t *)&v53, this + 2);
  if (this[19])
  {
    v2 = v53;
    if (v53 != v54)
    {
      while (1)
      {
        v3 = (char *)v2[7];
        if (v2[8] != (_QWORD *)v3)
          break;
LABEL_36:
        v26 = v2[1];
        if (v26)
        {
          do
          {
            v27 = (_QWORD **)v26;
            v26 = (_QWORD *)*v26;
          }
          while (v26);
        }
        else
        {
          do
          {
            v27 = (_QWORD **)v2[2];
            v28 = *v27 == v2;
            v2 = v27;
          }
          while (!v28);
        }
        v2 = v27;
        if (v27 == v54)
          goto LABEL_42;
      }
      v4 = 0;
      while (1)
      {
        v5 = (MIL::IRArgument **)&v3[16 * v4];
        if ((*(uint64_t (**)(MIL::IRArgument *))(*(_QWORD *)*v5 + 32))(*v5))
        {
          v6 = this[19];
          Name = MIL::IRArgument::GetName(*v5);
          MIL::Builder::BlockBuilder::GetValue(v48, v6, Name);
          v8 = v48[0];
          if (!*((_QWORD *)&v48[0] + 1))
            goto LABEL_11;
          v9 = (unint64_t *)(*((_QWORD *)&v48[0] + 1) + 8);
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v8 + 1) + 16))(*((_QWORD *)&v8 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v8 + 1));
            if ((_QWORD)v8)
            {
LABEL_12:
              v11 = this[19];
              v12 = MIL::IRArgument::GetName(*v5);
              MIL::Builder::BlockBuilder::GetValue(v48, v11, v12);
              v52 = v48[0];
              if (*((_QWORD *)&v48[0] + 1))
              {
                v13 = (unint64_t *)(*((_QWORD *)&v48[0] + 1) + 8);
                do
                  v14 = __ldxr(v13);
                while (__stxr(v14 + 1, v13));
              }
              MIL::IRArgument::Make(&v52, v43);
              v49 = v43[0];
              if (v43[0])
              {
                v15 = (std::__shared_weak_count *)operator new();
                v16 = v43[0];
                v15->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9942C8;
                v15->__shared_owners_ = 0;
                v15->__shared_weak_owners_ = 0;
                v15[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
              }
              else
              {
                v15 = 0;
              }
              v50 = v15;
              v43[0] = 0;
              v17 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
              if (*((_QWORD *)&v52 + 1))
              {
                v18 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
                do
                  v19 = __ldaxr(v18);
                while (__stlxr(v19 - 1, v18));
                if (!v19)
                {
                  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
                  std::__shared_weak_count::__release_weak(v17);
                }
              }
              std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](&v2[7][2 * v4], &v49);
              v20 = v50;
              if (v50)
              {
                p_shared_owners = (unint64_t *)&v50->__shared_owners_;
                do
                  v22 = __ldaxr(p_shared_owners);
                while (__stlxr(v22 - 1, p_shared_owners));
                if (!v22)
                {
                  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                  std::__shared_weak_count::__release_weak(v20);
                }
              }
              v23 = (std::__shared_weak_count *)*((_QWORD *)&v48[0] + 1);
              if (*((_QWORD *)&v48[0] + 1))
              {
                v24 = (unint64_t *)(*((_QWORD *)&v48[0] + 1) + 8);
                do
                  v25 = __ldaxr(v24);
                while (__stlxr(v25 - 1, v24));
                if (!v25)
                {
                  ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
                  std::__shared_weak_count::__release_weak(v23);
                }
              }
            }
          }
          else
          {
LABEL_11:
            if ((_QWORD)v8)
              goto LABEL_12;
          }
        }
        ++v4;
        v3 = (char *)v2[7];
        if (v4 >= ((char *)v2[8] - v3) >> 4)
          goto LABEL_36;
      }
    }
  }
LABEL_42:
  v49 = 0;
  v50 = 0;
  v51 = 0;
  std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__init_with_size[abi:ne180100]<std::shared_ptr<MIL::IRNamedValueType>*,std::shared_ptr<MIL::IRNamedValueType>*>((char *)&v49, this[5], this[6], ((char *)this[6] - (char *)this[5]) >> 4);
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v48, (uint64_t)(this + 8));
  MIL::UnknownLocation::Make(&v45);
  *(_QWORD *)&v46 = v45;
  if (v45)
  {
    v29 = (_QWORD *)operator new();
    v30 = v45;
    *v29 = &unk_1EA9940C8;
    v29[1] = 0;
    v29[2] = 0;
    v29[3] = v30;
  }
  else
  {
    v29 = 0;
  }
  *((_QWORD *)&v46 + 1) = v29;
  v31 = this[1];
  *(_QWORD *)&v44 = *this;
  *((_QWORD *)&v44 + 1) = v31;
  v45 = 0;
  if (v31)
  {
    v32 = (unint64_t *)(v31 + 1);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  memset(v43, 0, sizeof(v43));
  MIL::IROperation::Make(&v46, &v44, &v53, (uint64_t)&v49, (uint64_t *)v48, (uint64_t)v43, &v47);
  v55 = (void **)v43;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v55);
  v34 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
  if (*((_QWORD *)&v44 + 1))
  {
    v35 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
  if (*((_QWORD *)&v46 + 1))
  {
    v38 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = v45;
  v45 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  (*((void (**)(const void **, _anonymous_namespace_::IROperationImpl *))**this + 31))(*this, v47);
  v41 = v47;
  v47 = 0;
  if (v41)
    (*(void (**)(_anonymous_namespace_::IROperationImpl *))(*(_QWORD *)v41 + 8))(v41);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v48);
  *(_QWORD *)&v48[0] = &v49;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)v48);
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy((uint64_t)&v53, v54[0]);
}

void sub_1E0608C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  void *v24;

  __cxa_free_exception(v24);
  _Unwind_Resume(a1);
}

BOOL MIL::Builder::OperationBuilder::RemoveAttribute(uint64_t a1, unsigned __int8 *a2)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>((_QWORD *)(*(_QWORD *)(a1 + 24) + 64), a2) != 0;
}

uint64_t MIL::Builder::OperationBuilder::GetAttributes(MIL::Builder::OperationBuilder *this)
{
  return *((_QWORD *)this + 3) + 64;
}

uint64_t MIL::Builder::OperationBuilder::GetOwningBlock(MIL::Builder::OperationBuilder::OperationBuilderImpl **this)
{
  return MIL::Builder::OperationBuilder::OperationBuilderImpl::GetOwningBlock(this[3]);
}

uint64_t MIL::Builder::OperationBuilder::OperationBuilderImpl::GetOwningBlock(MIL::Builder::OperationBuilder::OperationBuilderImpl *this)
{
  uint64_t result;
  std::logic_error *exception;

  result = *((_QWORD *)this + 19);
  if (!result)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "This OperationBuilder does not have an owning block");
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  return result;
}

void sub_1E0608DC4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::OperationBuilder::GetBlocksRef(MIL::Builder::OperationBuilder *this)
{
  return *((_QWORD *)this + 3) + 160;
}

uint64_t MIL::Builder::OperationBuilder::GetIRArgument(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return MIL::Builder::OperationBuilder::OperationBuilderImpl::GetIRArgument(*(_QWORD *)(a1 + 24), a2, a3);
}

uint64_t MIL::Builder::OperationBuilder::OperationBuilderImpl::GetIRArgument(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::logic_error *exception;
  std::string *v11;
  __int128 v12;
  std::logic_error *v13;
  unint64_t v14;
  std::logic_error *v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  std::string::size_type size;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  __int128 v32;
  std::string v33;
  std::string v34;
  std::string v35;
  std::string v36;
  std::string v37;
  std::string v38;
  std::string v39;
  std::string v40;

  v6 = std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::find<std::string>(a1 + 16, (const void **)a2);
  if (a1 + 24 == v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v11 = std::string::append(&v39, ".");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &v40);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  v7 = v6;
  v8 = *(_QWORD *)(v6 + 56);
  if (a3 >= (*(_QWORD *)(v6 + 64) - v8) >> 4)
  {
    v13 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    v14 = a3;
    v15 = v13;
    std::to_string(&v34, v14);
    v16 = std::string::insert(&v34, 0, "Requested argument ");
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    v18 = std::string::append(&v35, " for parameter ");
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = *(char *)(a2 + 23);
    if (v20 >= 0)
      v21 = (const std::string::value_type *)a2;
    else
      v21 = *(const std::string::value_type **)a2;
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(a2 + 23);
    else
      v22 = *(_QWORD *)(a2 + 8);
    v23 = std::string::append(&v36, v21, v22);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = std::string::append(&v37, ", but only ");
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v33, (uint64_t)(*(_QWORD *)(v7 + 64) - *(_QWORD *)(v7 + 56)) >> 4);
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = &v33;
    else
      v27 = (std::string *)v33.__r_.__value_.__r.__words[0];
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
    else
      size = v33.__r_.__value_.__l.__size_;
    v29 = std::string::append(&v38, (const std::string::value_type *)v27, size);
    v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    v31 = std::string::append(&v39, " arguments are bound.");
    v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(v15, &v40);
    v15->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
    __cxa_throw(v15, (struct type_info *)off_1EA992588, MEMORY[0x1E0DE42E0]);
  }
  return v8 + 16 * a3;
}

void sub_1E0609064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  void *v47;
  char v48;
  uint64_t v49;

  if (*(char *)(v49 - 57) < 0)
    operator delete(*(void **)(v49 - 80));
  if (*(char *)(v49 - 89) < 0)
    operator delete(*(void **)(v49 - 112));
  if (a14 < 0)
    operator delete(__p);
  if (a47 < 0)
    operator delete(a42);
  if (a40 < 0)
    operator delete(a35);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  if ((v48 & 1) != 0)
    __cxa_free_exception(v47);
  _Unwind_Resume(exception_object);
}

void MIL::Builder::OperationBuilder::RenameOutput(uint64_t a1@<X0>, unint64_t a2@<X1>, std::string::size_type a3@<X2>, uint64_t *a4@<X8>)
{
  MIL::Builder::OperationBuilder::OperationBuilderImpl *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (_QWORD *)(a1 + 8));
  v8 = *(MIL::Builder::OperationBuilder::OperationBuilderImpl **)(a1 + 24);
  v9 = (std::__shared_weak_count *)a4[1];
  v15 = *a4;
  v16 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::RenameOutput(v8, a2, a3, &v15);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1E0609250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::RenameOutput(MIL::Builder::OperationBuilder::OperationBuilderImpl *this, unint64_t a2, std::string::size_type a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t OutputName;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  MIL::IRNamedValueType **v17;
  uint64_t Type;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::string __p;
  MIL::IRNamedValueType *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;

  v7 = *((_QWORD *)this + 19);
  if (v7)
  {
    OutputName = MIL::Builder::OperationBuilder::OperationBuilderImpl::GetOutputName(this, a2);
    v10 = a4[1];
    v26 = *a4;
    v27 = (std::__shared_weak_count *)v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    MIL::Builder::BlockBuilder::RenameOpOutput(v7, OutputName, a3, &v26);
    v13 = v27;
    if (v27)
    {
      p_shared_owners = (unint64_t *)&v27->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  v16 = *((_QWORD *)this + 5);
  if (a2 >= (*((_QWORD *)this + 6) - v16) >> 4)
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  v17 = (MIL::IRNamedValueType **)(v16 + 16 * a2);
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  Type = MIL::IRNamedValueType::GetType(*v17);
  MIL::IRNamedValueType::Make((uint64_t *)&__p, Type, (uint64_t *)&v25);
  std::shared_ptr<MIL::IRNamedValueType>::operator=[abi:ne180100]<MIL::IRNamedValueType,std::default_delete<MIL::IRNamedValueType>,void>(v17, (uint64_t *)&v25);
  v19 = (void **)v25;
  v25 = 0;
  if (v19)
  {
    MIL::IRNamedValueType::~IRNamedValueType(v19);
    MEMORY[0x1E0C023A0](v20, 0x1072C40DD5FEC7CLL, v21, v22, v23);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1E06093C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t MIL::BuilderPrivate::OperationBuilderPrivate::GetParameters(MIL::BuilderPrivate::OperationBuilderPrivate *this, const MIL::Builder::OperationBuilder *a2)
{
  return *((_QWORD *)this + 3) + 16;
}

uint64_t MIL::Builder::OperationBuilder::SetVisited(uint64_t this, char a2)
{
  *(_BYTE *)(*(_QWORD *)(this + 24) + 304) = a2;
  return this;
}

uint64_t MIL::Builder::OperationBuilder::IsVisited(MIL::Builder::OperationBuilder *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 3) + 304);
}

_OWORD *std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v6 = (void **)std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x50uLL);
    v12[1] = a1 + 1;
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_QWORD *)v7 + 8) = 0;
    *((_QWORD *)v7 + 9) = 0;
    *((_QWORD *)v7 + 7) = 0;
    v13 = 1;
    std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__insert_node_at(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v7;
}

uint64_t std::find_if[abi:ne180100]<std::__wrap_iter<std::shared_ptr<MIL::IRNamedValueType> *>,MIL::Builder::OperationBuilder::OperationBuilderImpl::AddOutput(std::string,MIL::IRValueType const*,std::shared_ptr<MIL::Builder::OperationBuilder>)::{lambda(std::shared_ptr<MIL::IRNamedValueType>)#1}>(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v3;
  MIL::IRNamedValueType *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t Name;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  BOOL v23;
  BOOL v24;
  unint64_t *v25;
  unint64_t v26;

  v3 = a1;
  if (a1 != a2)
  {
    while (1)
    {
      v6 = *(MIL::IRNamedValueType **)v3;
      v7 = *(std::__shared_weak_count **)(v3 + 8);
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      Name = MIL::IRNamedValueType::GetName(v6);
      v11 = a3[23];
      if ((v11 & 0x80u) == 0)
        v12 = a3[23];
      else
        v12 = *((_QWORD *)a3 + 1);
      v13 = *(unsigned __int8 *)(Name + 23);
      v14 = (char)v13;
      if ((v13 & 0x80u) != 0)
        v13 = *(_QWORD *)(Name + 8);
      if (v12 != v13)
      {
        v24 = 0;
        if (v7)
          goto LABEL_27;
        goto LABEL_31;
      }
      v15 = v14 >= 0 ? (unsigned __int8 *)Name : *(unsigned __int8 **)Name;
      if ((v11 & 0x80) != 0)
        break;
      if (a3[23])
      {
        v16 = v11 - 1;
        v17 = a3;
        do
        {
          v19 = *v17++;
          v18 = v19;
          v21 = *v15++;
          v20 = v21;
          v23 = v16-- != 0;
          v24 = v18 == v20;
        }
        while (v18 == v20 && v23);
LABEL_26:
        if (v7)
          goto LABEL_27;
        goto LABEL_31;
      }
      v24 = 1;
      if (v7)
      {
LABEL_27:
        v25 = (unint64_t *)&v7->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
LABEL_31:
      if (v24)
        return v3;
      v3 += 16;
      if (v3 == a2)
        return a2;
    }
    v24 = memcmp(*(const void **)a3, v15, *((_QWORD *)a3 + 1)) == 0;
    goto LABEL_26;
  }
  return v3;
}

void sub_1E0609640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::OperationBuilder::OperationBuilderImpl::GetVariable(uint64_t a1, uint64_t a2, std::string::size_type a3)
{
  unsigned __int8 *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string __p;
  uint64_t v12;

  v12 = 0;
  v5 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>>>::__emplace_unique_key_args<std::string,std::string const&,decltype(nullptr)>(a1 + 224, (unsigned __int8 *)a2, a2);
  if (v6)
  {
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      __p = *(std::string *)a2;
    MIL::Builder::Variable::Make((uint64_t)&__p, a3, &v12);
    v7 = v12;
    v12 = 0;
    v8 = *((_QWORD *)v5 + 5);
    *((_QWORD *)v5 + 5) = v7;
    if (v8)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      v9 = v12;
      v12 = 0;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return *((_QWORD *)v5 + 5);
}

void sub_1E0609728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Builder::OperationBuilder::OperationBuilderImpl::GetVariable(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v5;
  char v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;

  v19 = 0;
  v5 = std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::unique_ptr<MIL::Builder::Variable const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::unique_ptr<MIL::Builder::Variable const>>,std::hash<std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::shared_ptr<MIL::IRValue const>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::unique_ptr<MIL::Builder::Variable const>>,std::equal_to<std::shared_ptr<MIL::IRValue const>>,std::hash<std::shared_ptr<MIL::IRValue const>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::unique_ptr<MIL::Builder::Variable const>>>>::__emplace_unique_key_args<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>&,decltype(nullptr)>(a1 + 264, a2, a2);
  if (v6)
  {
    v7 = (std::__shared_weak_count *)a2[1];
    v17 = *a2;
    v18 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    MIL::Builder::Variable::Make(&v17, a3, &v19);
    v10 = v19;
    v19 = 0;
    v11 = v5[4];
    v5[4] = v10;
    if (v11)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      v12 = v19;
      v19 = 0;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    }
    v13 = v18;
    if (v18)
    {
      v14 = (unint64_t *)&v18->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  return v5[4];
}

void sub_1E0609838(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>>>::__emplace_unique_key_args<std::string,std::string const&,decltype(nullptr)>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>>>::__construct_node_hash<std::string const&,decltype(nullptr)>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_1E0609ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>>>::__construct_node_hash<std::string const&,decltype(nullptr)>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;

  v7 = a1 + 16;
  v8 = operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v8[4] = *(_QWORD *)(a3 + 16);
  }
  v8[5] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1E0609B54(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::unique_ptr<MIL::Builder::Variable const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::unique_ptr<MIL::Builder::Variable const>>,std::hash<std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::shared_ptr<MIL::IRValue const>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::unique_ptr<MIL::Builder::Variable const>>,std::equal_to<std::shared_ptr<MIL::IRValue const>>,std::hash<std::shared_ptr<MIL::IRValue const>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::unique_ptr<MIL::Builder::Variable const>>>>::__emplace_unique_key_args<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>&,decltype(nullptr)>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  v14 = (_QWORD *)(a1 + 16);
  v15 = operator new(0x28uLL);
  i = v15;
  *v15 = 0;
  v15[1] = v8;
  v16 = a3[1];
  v15[2] = *a3;
  v15[3] = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v15[4] = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    v21 = 1;
    if (v9 >= 3)
      v21 = (v9 & (v9 - 1)) != 0;
    v22 = v21 | (2 * v9);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v24);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v26)
  {
    *i = *v26;
LABEL_41:
    *v26 = i;
    goto LABEL_42;
  }
  *i = *v14;
  *v14 = i;
  *(_QWORD *)(v25 + 8 * v3) = v14;
  if (*i)
  {
    v27 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9)
        v27 %= v9;
    }
    else
    {
      v27 &= v9 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_41;
  }
LABEL_42:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1E0609DE8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::unique_ptr<MIL::IRTupleValueType const>>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder const>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder const>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder const>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder const>>>::__emplace_unique_impl<std::shared_ptr<MIL::Builder::OperationBuilder> const&>(_QWORD *a1, unint64_t *a2)
{
  _QWORD *inserted;
  char v4;
  _QWORD *v6[3];

  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__construct_node<std::shared_ptr<MIL::Builder::OperationBuilder> const&>((uint64_t)a1, a2, (uint64_t)v6);
  inserted = std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder const>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder const>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder const>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder const>>>::__node_insert_unique(a1, v6[0]);
  if ((v4 & 1) != 0)
    v6[0] = 0;
  std::unique_ptr<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>>>>::reset[abi:ne180100]((uint64_t)v6, 0);
  return inserted;
}

void sub_1E0609E60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder const>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder const>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder const>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder const>>>::__node_insert_unique(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;

  v2 = a2;
  v4 = a2 + 2;
  v5 = a2[2];
  v6 = HIDWORD(v5);
  v7 = 0x9DDFEA08EB382D69 * (((8 * v5) + 8) ^ HIDWORD(v5));
  v8 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
  *(v4 - 1) = v8;
  v9 = std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder const>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder const>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder const>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder const>>>::__node_insert_unique_prepare[abi:ne180100]((uint64_t)a1, v8, v4);
  if (v9)
    return v9;
  std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique_perform[abi:ne180100](a1, v2);
  return v2;
}

_QWORD *std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder const>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder const>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder const>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder const>>>::__node_insert_unique_prepare[abi:ne180100](uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *i;
  unint64_t v8;
  float v9;
  float v10;
  uint64_t v11;
  _BOOL8 v12;
  size_t v13;
  unint64_t v14;
  size_t v15;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8((int8x8_t)v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
      v5 = v3 <= a2 ? a2 % v3 : a2;
    else
      v5 = (v3 - 1) & a2;
    v6 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
    if (v6)
    {
      for (i = (_QWORD *)*v6; i; i = (_QWORD *)*i)
      {
        v8 = i[1];
        if (v8 == a2)
        {
          if (i[2] == *a3)
            return i;
        }
        else
        {
          if (v4.u32[0] > 1uLL)
          {
            if (v8 >= v3)
              v8 %= v3;
          }
          else
          {
            v8 &= v3 - 1;
          }
          if (v8 != v5)
            break;
        }
      }
    }
  }
  v9 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v10 = *(float *)(a1 + 32);
  if (!v3 || (float)(v10 * (float)v3) < v9)
  {
    v11 = 2 * v3;
    v12 = v3 < 3 || (v3 & (v3 - 1)) != 0;
    v13 = v12 | v11;
    v14 = vcvtps_u32_f32(v9 / v10);
    if (v13 <= v14)
      v15 = v14;
    else
      v15 = v13;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v15);
  }
  return 0;
}

uint64_t std::find_if[abi:ne180100]<std::__wrap_iter<std::shared_ptr<MIL::IRNamedValueType> const*>,MIL::Builder::OperationBuilder::OperationBuilderImpl::GetOutputType(std::string const&)::{lambda(std::shared_ptr<MIL::IRNamedValueType>)#1}>(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v3;
  MIL::IRNamedValueType *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t Name;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  BOOL v23;
  BOOL v24;
  unint64_t *v25;
  unint64_t v26;

  v3 = a1;
  if (a1 != a2)
  {
    while (1)
    {
      v6 = *(MIL::IRNamedValueType **)v3;
      v7 = *(std::__shared_weak_count **)(v3 + 8);
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      Name = MIL::IRNamedValueType::GetName(v6);
      v11 = a3[23];
      if ((v11 & 0x80u) == 0)
        v12 = a3[23];
      else
        v12 = *((_QWORD *)a3 + 1);
      v13 = *(unsigned __int8 *)(Name + 23);
      v14 = (char)v13;
      if ((v13 & 0x80u) != 0)
        v13 = *(_QWORD *)(Name + 8);
      if (v12 != v13)
      {
        v24 = 0;
        if (v7)
          goto LABEL_27;
        goto LABEL_31;
      }
      v15 = v14 >= 0 ? (unsigned __int8 *)Name : *(unsigned __int8 **)Name;
      if ((v11 & 0x80) != 0)
        break;
      if (a3[23])
      {
        v16 = v11 - 1;
        v17 = a3;
        do
        {
          v19 = *v17++;
          v18 = v19;
          v21 = *v15++;
          v20 = v21;
          v23 = v16-- != 0;
          v24 = v18 == v20;
        }
        while (v18 == v20 && v23);
LABEL_26:
        if (v7)
          goto LABEL_27;
        goto LABEL_31;
      }
      v24 = 1;
      if (v7)
      {
LABEL_27:
        v25 = (unint64_t *)&v7->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
LABEL_31:
      if (v24)
        return v3;
      v3 += 16;
      if (v3 == a2)
        return a2;
    }
    v24 = memcmp(*(const void **)a3, v15, *((_QWORD *)a3 + 1)) == 0;
    goto LABEL_26;
  }
  return v3;
}

void sub_1E060A168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::shared_ptr<MIL::Builder::BlockBuilder>>::__init_with_size[abi:ne180100]<std::shared_ptr<MIL::Builder::BlockBuilder>*,std::shared_ptr<MIL::Builder::BlockBuilder>*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1E060A208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__count_unique<std::string>(uint64_t a1, const void **a2)
{
  const void **v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(const void ***)(a1 + 8);
  if (v2)
  {
    v4 = a1 + 16;
    v5 = 1;
    do
    {
      if (!std::less<std::string>::operator()[abi:ne180100](v4, a2, v2 + 4))
      {
        if (!std::less<std::string>::operator()[abi:ne180100](v4, v2 + 4, a2))
          return v5;
        ++v2;
      }
      v2 = (const void **)*v2;
    }
    while (v2);
  }
  return 0;
}

uint64_t std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__erase_unique<std::string>(uint64_t **a1, const void **a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = (uint64_t *)std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  v4 = v3;
  std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__remove_node_pointer(a1, v3);
  std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>>,0>((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

void **std::unique_ptr<MIL::Builder::OperationBuilder::OperationBuilderImpl>::reset[abi:ne180100](void ***a1, void **a2)
{
  void **result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    MIL::Builder::OperationBuilder::OperationBuilderImpl::~OperationBuilderImpl(result);
    JUMPOUT(0x1E0C023A0);
  }
  return result;
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::~OperationBuilderImpl(void **this)
{
  void **v2;

  std::__hash_table<std::__hash_value_type<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::unique_ptr<MIL::IRTupleValueType const>>,std::__unordered_map_hasher<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::__hash_value_type<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::unique_ptr<MIL::IRTupleValueType const>>,std::hash<std::shared_ptr<std::vector<MIL::IRValueType const*>>>,std::equal_to<std::shared_ptr<std::vector<MIL::IRValueType const*>>>,true>,std::__unordered_map_equal<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::__hash_value_type<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::unique_ptr<MIL::IRTupleValueType const>>,std::equal_to<std::shared_ptr<std::vector<MIL::IRValueType const*>>>,std::hash<std::shared_ptr<std::vector<MIL::IRValueType const*>>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::unique_ptr<MIL::IRTupleValueType const>>>>::~__hash_table((uint64_t)(this + 33));
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>>>::~__hash_table((uint64_t)(this + 28));
  if (*((char *)this + 223) < 0)
    operator delete(this[25]);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)(this + 23));
  v2 = this + 20;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 143) < 0)
    operator delete(this[15]);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)(this + 13));
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)(this + 8));
  v2 = this + 5;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy((uint64_t)(this + 2), this[3]);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

uint64_t MIL::Builder::OperationBuilder::OperationBuilderImpl::OperationBuilderImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = a1 + 24;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 1065353216;
  MIL::UnknownLocation::Make(&v11);
  v7 = v11;
  *(_QWORD *)(a1 + 104) = v11;
  if (v7)
  {
    v8 = (_QWORD *)operator new();
    v9 = v11;
    *v8 = &unk_1EA9940C8;
    v8[1] = 0;
    v8[2] = 0;
    v8[3] = v9;
  }
  else
  {
    v8 = 0;
  }
  *(_QWORD *)(a1 + 112) = v8;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 152) = a4;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 184) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 256) = 1065353216;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_DWORD *)(a1 + 296) = 1065353216;
  *(_BYTE *)(a1 + 304) = 0;
  return a1;
}

void sub_1E060A4DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  void **v13;

  v13 = a10;
  a10 = 0;
  if (v13)
    (*((void (**)(void **))*v13 + 1))(v13);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v10 + 64);
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy(v11, *(_QWORD **)(v10 + 24));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::OperationBuilder::OperationBuilderImpl::OperationBuilderImpl(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  void *__p[2];
  uint64_t v14;
  __int128 v15;
  __int128 v16;

  v16 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v15 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  *(_OWORD *)__p = *(_OWORD *)a4;
  v14 = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  MIL::Builder::OperationBuilder::OperationBuilderImpl::OperationBuilderImpl(a1, (MIL::IRObject **)&v16, (uint64_t)&v15, (__int128 *)__p, 0, a5);
  if (SHIBYTE(v14) < 0)
    operator delete(__p[0]);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return a1;
}

void sub_1E060A620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::OperationBuilder::OperationBuilderImpl::OperationBuilderImpl(uint64_t a1, MIL::IRObject **a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6)
{
  const void ***v12;
  _QWORD **v13;
  uint64_t Attributes;
  _QWORD *LocationPtr;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;

  (*(void (**)(MIL::IRObject *))(*(_QWORD *)*a2 + 80))(*a2);
  v12 = (const void ***)(*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)*a2 + 160))(*a2);
  std::map<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>::map[abi:ne180100]((uint64_t *)(a1 + 16), v12);
  v13 = (_QWORD **)(*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)*a2 + 176))(*a2);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__init_with_size[abi:ne180100]<std::shared_ptr<MIL::IRNamedValueType>*,std::shared_ptr<MIL::IRNamedValueType>*>((char *)(a1 + 40), *v13, v13[1], ((char *)v13[1] - (char *)*v13) >> 4);
  Attributes = MIL::IRObject::GetAttributes(*a2);
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map(a1 + 64, Attributes);
  LocationPtr = (_QWORD *)MIL::IRObject::GetLocationPtr(*a2);
  *(_QWORD *)(a1 + 104) = *LocationPtr;
  v16 = LocationPtr[1];
  *(_QWORD *)(a1 + 112) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = *a4;
  *(_QWORD *)(a1 + 136) = *((_QWORD *)a4 + 2);
  *(_OWORD *)(a1 + 120) = v19;
  *((_QWORD *)a4 + 1) = 0;
  *((_QWORD *)a4 + 2) = 0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a1 + 144) = a5;
  *(_QWORD *)(a1 + 152) = a6;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 184) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 256) = 1065353216;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_DWORD *)(a1 + 296) = 1065353216;
  *(_BYTE *)(a1 + 304) = 0;
  MIL::Builder::OperationBuilder::OperationBuilderImpl::OperationBuilderImplFromIROperationCommon((MIL::Builder::OperationBuilder::OperationBuilderImpl *)a1, *a2);
  return a1;
}

void sub_1E060A7D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  void **v10;
  va_list va;

  va_start(va, a4);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::unique_ptr<MIL::IRTupleValueType const>>,std::__unordered_map_hasher<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::__hash_value_type<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::unique_ptr<MIL::IRTupleValueType const>>,std::hash<std::shared_ptr<std::vector<MIL::IRValueType const*>>>,std::equal_to<std::shared_ptr<std::vector<MIL::IRValueType const*>>>,true>,std::__unordered_map_equal<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::__hash_value_type<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::unique_ptr<MIL::IRTupleValueType const>>,std::equal_to<std::shared_ptr<std::vector<MIL::IRValueType const*>>>,std::hash<std::shared_ptr<std::vector<MIL::IRValueType const*>>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::unique_ptr<MIL::IRTupleValueType const>>>>::~__hash_table(v7);
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>>>::~__hash_table(v4 + 224);
  if (*(char *)(v4 + 223) < 0)
    operator delete(*v10);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v8);
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v4 + 143) < 0)
    operator delete(*v9);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](a4);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v6);
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy(v5, *(_QWORD **)(v4 + 24));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v4);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::OperationBuilderImplFromIROperationCommon(MIL::Builder::OperationBuilder::OperationBuilderImpl *this, const MIL::IROperation *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t i;
  MIL::IRArgument **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Name;
  uint64_t v13;
  std::string::size_type size;
  std::string::size_type v15;
  uint64_t v16;
  int v17;
  unsigned __int8 *v18;
  std::string *p_n;
  const std::string::value_type *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  char *v26;
  char *v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  const void *v32;
  std::string::size_type v33;
  std::string *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD **v37;
  int64x2_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t *v57;
  _QWORD *v58;
  _QWORD *v59;
  char *v60;
  __int128 v61;
  int64x2_t v62;
  uint64_t v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::runtime_error *exception;
  std::string __p;
  uint64_t v70;
  std::__shared_weak_count *v71;
  uint64_t v72;
  uint64_t *v73;
  _QWORD *v74;
  uint64_t *v75;
  std::__shared_weak_count *v76;
  uint64_t v77;
  std::string v78;
  std::string __n;
  uint64_t v80;
  char *v81;

  v4 = (char *)*((_QWORD *)this + 2);
  v5 = (char *)this + 24;
  if (v4 != (char *)this + 24)
  {
    do
    {
      v6 = *((_QWORD *)v4 + 7);
      if (*((_QWORD *)v4 + 8) != v6)
      {
        for (i = 0; i < (*((_QWORD *)v4 + 8) - v6) >> 4; ++i)
        {
          v8 = (MIL::IRArgument **)(v6 + 16 * i);
          v9 = (*(uint64_t (**)(MIL::IRArgument *))(*(_QWORD *)*v8 + 40))(*v8);
          if (v9)
          {
            v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
            if (v10)
            {
              v11 = v10;
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 120))(v10))
              {
                (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v11 + 128))(&__n, v11);
                Name = MIL::IRArgument::GetName(*v8);
                v13 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
                size = __n.__r_.__value_.__l.__size_;
                if ((__n.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v15 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
                else
                  v15 = __n.__r_.__value_.__l.__size_;
                v16 = *(unsigned __int8 *)(Name + 23);
                v17 = (char)v16;
                if ((v16 & 0x80u) != 0)
                  v16 = *(_QWORD *)(Name + 8);
                if (v15 != v16)
                  goto LABEL_89;
                if (v17 >= 0)
                  v18 = (unsigned __int8 *)Name;
                else
                  v18 = *(unsigned __int8 **)Name;
                if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) != 0)
                {
                  v20 = (const std::string::value_type *)__n.__r_.__value_.__r.__words[0];
                  if (memcmp(__n.__r_.__value_.__l.__data_, v18, __n.__r_.__value_.__l.__size_))
                    goto LABEL_89;
                  std::string::__init_copy_ctor_external(&v78, v20, size);
                }
                else
                {
                  if (*((_BYTE *)&__n.__r_.__value_.__s + 23))
                  {
                    p_n = &__n;
                    while (p_n->__r_.__value_.__s.__data_[0] == *v18)
                    {
                      p_n = (std::string *)((char *)p_n + 1);
                      ++v18;
                      if (!--v13)
                        goto LABEL_21;
                    }
LABEL_89:
                    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(exception, "Constexpr output name must be the same as the argument name.");
                    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                  }
LABEL_21:
                  v78 = __n;
                }
                MIL::IRArgument::Make((uint64_t)&v78, (uint64_t *)&v73);
                v75 = v73;
                if (v73)
                {
                  v21 = (std::__shared_weak_count *)operator new();
                  v22 = (uint64_t)v73;
                  v21->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9942C8;
                  v21->__shared_owners_ = 0;
                  v21->__shared_weak_owners_ = 0;
                  v21[1].__vftable = (std::__shared_weak_count_vtbl *)v22;
                }
                else
                {
                  v21 = 0;
                }
                v76 = v21;
                v73 = 0;
                if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v78.__r_.__value_.__l.__data_);
                std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]((_QWORD *)(*((_QWORD *)v4 + 7) + 16 * i), (uint64_t *)&v75);
                v23 = v76;
                if (v76)
                {
                  p_shared_owners = (unint64_t *)&v76->__shared_owners_;
                  do
                    v25 = __ldaxr(p_shared_owners);
                  while (__stlxr(v25 - 1, p_shared_owners));
                  if (!v25)
                  {
                    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
                    std::__shared_weak_count::__release_weak(v23);
                  }
                }
                if (SHIBYTE(__n.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__n.__r_.__value_.__l.__data_);
              }
            }
          }
          v6 = *((_QWORD *)v4 + 7);
        }
      }
      v26 = (char *)*((_QWORD *)v4 + 1);
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = *(char **)v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (char *)*((_QWORD *)v4 + 2);
          v28 = *(_QWORD *)v27 == (_QWORD)v4;
          v4 = v27;
        }
        while (!v28);
      }
      v4 = v27;
    }
    while (v27 != v5);
  }
  v29 = (*(uint64_t (**)(const MIL::IROperation *))(*(_QWORD *)a2 + 232))(a2);
  if (v29)
  {
    v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
    if (v31 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v32 = (const void *)v30;
    v33 = v31;
    if (v31 >= 0x17)
    {
      v35 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v31 | 7) != 0x17)
        v35 = v31 | 7;
      v36 = v35 + 1;
      v34 = (std::string *)operator new(v35 + 1);
      __n.__r_.__value_.__l.__size_ = v33;
      __n.__r_.__value_.__r.__words[2] = v36 | 0x8000000000000000;
      __n.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
    }
    else
    {
      *((_BYTE *)&__n.__r_.__value_.__s + 23) = v31;
      v34 = &__n;
      if (!v31)
      {
LABEL_52:
        v34->__r_.__value_.__s.__data_[v33] = 0;
        std::string::operator=((std::string *)((char *)this + 200), &__n);
        if (SHIBYTE(__n.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__n.__r_.__value_.__l.__data_);
        goto LABEL_54;
      }
    }
    memmove(v34, v32, v33);
    goto LABEL_52;
  }
LABEL_54:
  v37 = (_QWORD **)(*(uint64_t (**)(const MIL::IROperation *))(*(_QWORD *)a2 + 216))(a2);
  v76 = 0;
  v77 = 0;
  v75 = 0;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__init_with_size[abi:ne180100]<std::shared_ptr<MIL::IRBlock>*,std::shared_ptr<MIL::IRBlock>*>((char *)&v75, *v37, v37[1], ((char *)v37[1] - (char *)*v37) >> 4);
  v38 = (int64x2_t *)((char *)this + 160);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)this + 20, ((char *)v76 - (char *)v75) >> 4);
  v39 = v75;
  v40 = (uint64_t *)v76;
  if (v75 != (uint64_t *)v76)
  {
    do
    {
      v41 = (std::__shared_weak_count *)*((_QWORD *)this + 24);
      v70 = *((_QWORD *)this + 23);
      v71 = v41;
      if (v41)
      {
        v42 = (unint64_t *)&v41->__shared_owners_;
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
      }
      v44 = *v39;
      if (*((char *)this + 143) < 0)
        std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 15), *((_QWORD *)this + 16));
      else
        __p = *(std::string *)((_BYTE *)this + 5);
      MIL::Builder::BlockBuilder::Make(&v70, v44, (uint64_t)&__p, *((_QWORD *)this + 18), &v72);
      v45 = v72;
      v73 = (uint64_t *)v72;
      if (v72)
      {
        v46 = (_QWORD *)operator new();
        v47 = v72;
        *v46 = &unk_1EA99A7D0;
        v46[1] = 0;
        v46[2] = 0;
        v46[3] = v47;
      }
      else
      {
        v46 = 0;
      }
      v74 = v46;
      v72 = 0;
      v48 = (uint64_t *)*((_QWORD *)this + 21);
      v49 = *((_QWORD *)this + 22);
      if ((unint64_t)v48 >= v49)
      {
        v51 = ((uint64_t)v48 - v38->i64[0]) >> 4;
        v52 = v51 + 1;
        if ((unint64_t)(v51 + 1) >> 60)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v53 = v49 - v38->i64[0];
        if (v53 >> 3 > v52)
          v52 = v53 >> 3;
        if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF0)
          v54 = 0xFFFFFFFFFFFFFFFLL;
        else
          v54 = v52;
        v81 = (char *)this + 176;
        v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)this + 176, v54);
        v57 = (uint64_t *)&v55[16 * v51];
        *v57 = v45;
        v57[1] = (uint64_t)v46;
        v73 = 0;
        v74 = 0;
        v59 = (_QWORD *)*((_QWORD *)this + 20);
        v58 = (_QWORD *)*((_QWORD *)this + 21);
        if (v58 == v59)
        {
          v62 = vdupq_n_s64((unint64_t)v58);
          v60 = &v55[16 * v51];
        }
        else
        {
          v60 = &v55[16 * v51];
          do
          {
            v61 = *((_OWORD *)v58 - 1);
            v58 -= 2;
            *((_OWORD *)v60 - 1) = v61;
            v60 -= 16;
            *v58 = 0;
            v58[1] = 0;
          }
          while (v58 != v59);
          v62 = *v38;
        }
        v50 = v57 + 2;
        *((_QWORD *)this + 20) = v60;
        *((_QWORD *)this + 21) = v57 + 2;
        *(int64x2_t *)&__n.__r_.__value_.__r.__words[1] = v62;
        v63 = *((_QWORD *)this + 22);
        *((_QWORD *)this + 22) = &v55[16 * v56];
        v80 = v63;
        __n.__r_.__value_.__r.__words[0] = v62.i64[0];
        std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__n);
      }
      else
      {
        *v48 = v45;
        v48[1] = (uint64_t)v46;
        v50 = v48 + 2;
        v73 = 0;
        v74 = 0;
      }
      *((_QWORD *)this + 21) = v50;
      v64 = v72;
      v72 = 0;
      if (v64)
        (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v65 = v71;
      if (v71)
      {
        v66 = (unint64_t *)&v71->__shared_owners_;
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      v39 += 2;
    }
    while (v39 != v40);
  }
  __n.__r_.__value_.__r.__words[0] = (std::string::size_type)&v75;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__n);
}

void sub_1E060AE30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<std::shared_ptr<MIL::IRBlock>>::__init_with_size[abi:ne180100]<std::shared_ptr<MIL::IRBlock>*,std::shared_ptr<MIL::IRBlock>*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1E060AFA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::OperationBuilder::OperationBuilderImpl::OperationBuilderImpl(uint64_t a1, MIL::IRObject *a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6)
{
  const void ***v12;
  _QWORD **v13;
  uint64_t Attributes;
  _QWORD *LocationPtr;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;

  (*(void (**)(MIL::IRObject *))(*(_QWORD *)a2 + 80))(a2);
  v12 = (const void ***)(*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a2 + 160))(a2);
  std::map<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>::map[abi:ne180100]((uint64_t *)(a1 + 16), v12);
  v13 = (_QWORD **)(*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a2 + 176))(a2);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__init_with_size[abi:ne180100]<std::shared_ptr<MIL::IRNamedValueType>*,std::shared_ptr<MIL::IRNamedValueType>*>((char *)(a1 + 40), *v13, v13[1], ((char *)v13[1] - (char *)*v13) >> 4);
  Attributes = MIL::IRObject::GetAttributes(a2);
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map(a1 + 64, Attributes);
  LocationPtr = (_QWORD *)MIL::IRObject::GetLocationPtr(a2);
  *(_QWORD *)(a1 + 104) = *LocationPtr;
  v16 = LocationPtr[1];
  *(_QWORD *)(a1 + 112) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = *a4;
  *(_QWORD *)(a1 + 136) = *((_QWORD *)a4 + 2);
  *(_OWORD *)(a1 + 120) = v19;
  *((_QWORD *)a4 + 1) = 0;
  *((_QWORD *)a4 + 2) = 0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a1 + 144) = a5;
  *(_QWORD *)(a1 + 152) = a6;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 184) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 256) = 1065353216;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_DWORD *)(a1 + 296) = 1065353216;
  *(_BYTE *)(a1 + 304) = 0;
  MIL::Builder::OperationBuilder::OperationBuilderImpl::OperationBuilderImplFromIROperationCommon((MIL::Builder::OperationBuilder::OperationBuilderImpl *)a1, a2);
  return a1;
}

void sub_1E060B13C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  void **v10;
  va_list va;

  va_start(va, a4);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::unique_ptr<MIL::IRTupleValueType const>>,std::__unordered_map_hasher<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::__hash_value_type<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::unique_ptr<MIL::IRTupleValueType const>>,std::hash<std::shared_ptr<std::vector<MIL::IRValueType const*>>>,std::equal_to<std::shared_ptr<std::vector<MIL::IRValueType const*>>>,true>,std::__unordered_map_equal<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::__hash_value_type<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::unique_ptr<MIL::IRTupleValueType const>>,std::equal_to<std::shared_ptr<std::vector<MIL::IRValueType const*>>>,std::hash<std::shared_ptr<std::vector<MIL::IRValueType const*>>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::unique_ptr<MIL::IRTupleValueType const>>>>::~__hash_table(v7);
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>>>::~__hash_table(v4 + 224);
  if (*(char *)(v4 + 223) < 0)
    operator delete(*v9);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v8);
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v4 + 143) < 0)
    operator delete(*v10);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](a4);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v6);
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy(v5, *(_QWORD **)(v4 + 24));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v4);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(_QWORD *a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  v3 = (std::__shared_weak_count *)a2[1];
  *a1 = *a2;
  if (!v3)
  {
    a1[1] = 0;
LABEL_5:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v4 = std::__shared_weak_count::lock(v3);
  a1[1] = v4;
  if (!v4)
    goto LABEL_5;
  return a1;
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE4F80] + 16;
  __cxa_throw(exception, MEMORY[0x1E0DE4E28], MEMORY[0x1E0DE43F0]);
}

uint64_t *std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1EA99A888;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2)
    v5 = (_QWORD *)(a2 + 8);
  else
    v5 = 0;
  std::shared_ptr<MIL::Builder::OperationBuilder>::__enable_weak_this[abi:ne180100]<MIL::Builder::OperationBuilder,MIL::Builder::OperationBuilder,void>((uint64_t)a1, v5, a2);
  return a1;
}

void sub_1E060B2C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::shared_ptr<MIL::Builder::OperationBuilder>::__enable_weak_this[abi:ne180100]<MIL::Builder::OperationBuilder,MIL::Builder::OperationBuilder,void>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  if (a2)
  {
    v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
        p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
        do
          v9 = __ldxr(p_shared_weak_owners);
        while (__stxr(v9 + 1, p_shared_weak_owners));
        v4 = (std::__shared_weak_count *)a2[1];
      }
      *a2 = a3;
      a2[1] = v5;
      if (v4)
        std::__shared_weak_count::__release_weak(v4);
      if (v5)
      {
        v10 = (unint64_t *)&v5->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
  }
}

void std::__shared_ptr_pointer<MIL::Builder::OperationBuilder *,std::shared_ptr<MIL::Builder::OperationBuilder>::__shared_ptr_default_delete<MIL::Builder::OperationBuilder,MIL::Builder::OperationBuilder>,std::allocator<MIL::Builder::OperationBuilder>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E0C023A0);
}

uint64_t std::__shared_ptr_pointer<MIL::Builder::OperationBuilder *,std::shared_ptr<MIL::Builder::OperationBuilder>::__shared_ptr_default_delete<MIL::Builder::OperationBuilder,MIL::Builder::OperationBuilder>,std::allocator<MIL::Builder::OperationBuilder>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::Builder::OperationBuilder *,std::shared_ptr<MIL::Builder::OperationBuilder>::__shared_ptr_default_delete<MIL::Builder::OperationBuilder,MIL::Builder::OperationBuilder>,std::allocator<MIL::Builder::OperationBuilder>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *MIL::Builder::ProgramBuilder::ProgramBuilder(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v13;
  std::__shared_weak_count *v14;

  *a1 = &off_1EA99A900;
  v4 = operator new();
  v5 = v4;
  v6 = (std::__shared_weak_count *)a2[1];
  v13 = *a2;
  v14 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  MIL::Builder::ProgramBuilder::ProgramBuilderImpl::ProgramBuilderImpl(v4, &v13);
  a1[1] = v5;
  v9 = v14;
  if (v14)
  {
    v10 = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return a1;
}

void sub_1E060B4DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  uint64_t v10;

  if (a10)
    MIL::IRParameter::Make(a10);
  MEMORY[0x1E0C023A0](v10, 0x10E0C4071EA3CCFLL);
  _Unwind_Resume(a1);
}

_QWORD *MIL::Builder::ProgramBuilder::ProgramBuilder(_QWORD *a1, uint64_t *a2, MIL::IRObject *a3)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;

  *a1 = &off_1EA99A900;
  v6 = operator new();
  v7 = v6;
  v8 = (std::__shared_weak_count *)a2[1];
  v15 = *a2;
  v16 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  MIL::Builder::ProgramBuilder::ProgramBuilderImpl::ProgramBuilderImpl(v6, &v15, a3);
  a1[1] = v7;
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return a1;
}

void sub_1E060B5DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  uint64_t v10;

  if (a10)
    MIL::IRParameter::Make(a10);
  MEMORY[0x1E0C023A0](v10, 0x10E0C4071EA3CCFLL);
  _Unwind_Resume(a1);
}

void MIL::Builder::ProgramBuilder::~ProgramBuilder(MIL::Builder::ProgramBuilder *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1EA99A900;
  v3 = *((_QWORD *)this + 1);
  v1 = (_QWORD *)((char *)this + 8);
  v2 = v3;
  *v1 = 0;
  if (v3)
    std::default_delete<MIL::Builder::ProgramBuilder::ProgramBuilderImpl>::operator()[abi:ne180100]((uint64_t)v1, v2);
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1EA99A900;
  v3 = *((_QWORD *)this + 1);
  v1 = (_QWORD *)((char *)this + 8);
  v2 = v3;
  *v1 = 0;
  if (v3)
    std::default_delete<MIL::Builder::ProgramBuilder::ProgramBuilderImpl>::operator()[abi:ne180100]((uint64_t)v1, v2);
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1EA99A900;
  v3 = *((_QWORD *)this + 1);
  v1 = (_QWORD *)((char *)this + 8);
  v2 = v3;
  *v1 = 0;
  if (v3)
    std::default_delete<MIL::Builder::ProgramBuilder::ProgramBuilderImpl>::operator()[abi:ne180100]((uint64_t)v1, v2);
  JUMPOUT(0x1E0C023A0);
}

unsigned __int8 *MIL::Builder::ProgramBuilder::GetFunction@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  return MIL::Builder::ProgramBuilder::ProgramBuilderImpl::GetFunction(*(_QWORD *)(a1 + 8), a2, a3);
}

unsigned __int8 *MIL::Builder::ProgramBuilder::ProgramBuilderImpl::GetFunction@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((_QWORD *)(a1 + 16), a2);
  if (!result)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v5 = *((_QWORD *)result + 6);
  *a3 = *((_QWORD *)result + 5);
  a3[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void MIL::Builder::ProgramBuilder::Make(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12[2];

  v4 = (_QWORD *)operator new();
  v5 = v4;
  v6 = *a1;
  v7 = (std::__shared_weak_count *)a1[1];
  v12[0] = v6;
  v12[1] = (uint64_t)v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  MIL::Builder::ProgramBuilder::ProgramBuilder(v4, v12);
  *a2 = v5;
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E060B7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x1E0C023A0](v9, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void MIL::Builder::ProgramBuilder::Make(uint64_t *a1@<X0>, MIL::IRObject **a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14[2];

  v6 = (_QWORD *)operator new();
  v7 = v6;
  v8 = *a1;
  v9 = (std::__shared_weak_count *)a1[1];
  v14[0] = v8;
  v14[1] = (uint64_t)v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Builder::ProgramBuilder::ProgramBuilder(v6, v14, *a2);
  *a3 = v7;
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1E060B8E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x1E0C023A0](v9, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void MIL::Builder::ProgramBuilder::Make(uint64_t *a1@<X0>, MIL::IRObject *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14[2];

  v6 = (_QWORD *)operator new();
  v7 = v6;
  v8 = *a1;
  v9 = (std::__shared_weak_count *)a1[1];
  v14[0] = v8;
  v14[1] = (uint64_t)v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Builder::ProgramBuilder::ProgramBuilder(v6, v14, a2);
  *a3 = v7;
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1E060B9D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x1E0C023A0](v9, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

_anonymous_namespace_::IRProgramImpl *MIL::Builder::ProgramBuilder::CreateProgram@<X0>(MIL::Builder::ProgramBuilder::ProgramBuilderImpl **this@<X0>, uint64_t a2@<X8>)
{
  return MIL::Builder::ProgramBuilder::ProgramBuilderImpl::CreateProgram(this[1], a2);
}

_anonymous_namespace_::IRProgramImpl *MIL::Builder::ProgramBuilder::ProgramBuilderImpl::CreateProgram@<X0>(MIL::Builder::ProgramBuilder::ProgramBuilderImpl *this@<X0>, uint64_t a2@<X8>)
{
  const MIL::IRProgram *v3;
  BOOL IsGood;
  _anonymous_namespace_::IRProgramImpl *v5;
  __int128 v6;
  __int128 v7;
  _anonymous_namespace_::IRProgramImpl *result;
  _BYTE v9[48];
  int v10;
  _BYTE v11[8];
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  _anonymous_namespace_::IRProgramImpl *v16;

  MIL::Builder::ProgramBuilder::ProgramBuilderImpl::CreateProgramWithoutValidation(this, &v16);
  MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)v11);
  MIL::IRProgramValidator::Validate(v16, v3, (MIL::ValidationResult *)v9);
  MIL::MILResult::operator=((uint64_t)v11, (uint64_t)v9);
  v15 = v10;
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v9);
  IsGood = MIL::ValidationResult::IsGood((MIL::ValidationResult *)v11);
  v5 = v16;
  if (!IsGood)
  {
    v16 = 0;
    if (v5)
    {
      (*(void (**)(_anonymous_namespace_::IRProgramImpl *))(*(_QWORD *)v5 + 8))(v5);
      v5 = v16;
    }
  }
  v16 = 0;
  v6 = v12;
  v12 = 0uLL;
  v7 = v13;
  *(_OWORD *)(a2 + 16) = v6;
  *(_OWORD *)(a2 + 32) = v7;
  *(_QWORD *)(a2 + 48) = v14;
  v13 = 0uLL;
  v14 = 0;
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = &off_1EA99F170;
  *(_DWORD *)(a2 + 56) = v15;
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v11);
  result = v16;
  v16 = 0;
  if (result)
    return (_anonymous_namespace_::IRProgramImpl *)(*(uint64_t (**)(_anonymous_namespace_::IRProgramImpl *))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1E060BAF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v11;
  va_list va;

  va_start(va, a9);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)va);
  v11 = *(_QWORD *)(v9 - 24);
  *(_QWORD *)(v9 - 24) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::ProgramBuilder::CreateProgramWithoutValidation@<X0>(MIL::Builder::ProgramBuilder::ProgramBuilderImpl **this@<X0>, _anonymous_namespace_::IRProgramImpl **a2@<X8>)
{
  return MIL::Builder::ProgramBuilder::ProgramBuilderImpl::CreateProgramWithoutValidation(this[1], a2);
}

uint64_t MIL::Builder::ProgramBuilder::ProgramBuilderImpl::CreateProgramWithoutValidation@<X0>(MIL::Builder::ProgramBuilder::ProgramBuilderImpl *this@<X0>, _anonymous_namespace_::IRProgramImpl **a2@<X8>)
{
  unsigned __int8 *i;
  _anonymous_namespace_::IRFunctionImpl *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v19;
  __int128 v20;
  _anonymous_namespace_::IRFunctionImpl *v21;
  _OWORD v22[2];
  int v23;
  uint64_t v24[5];

  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v24, (uint64_t)this + 72);
  memset(v22, 0, sizeof(v22));
  v23 = 1065353216;
  for (i = (unsigned __int8 *)*((_QWORD *)this + 4); i; i = *(unsigned __int8 **)i)
  {
    MIL::Builder::FunctionBuilder::CreateFunction(*((MIL::Builder::FunctionBuilder::FunctionBuilderImpl ***)i + 5), &v21);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::string const&,std::unique_ptr<MIL::IRFunction>>((uint64_t)v22, i + 16, (__int128 *)i + 1, (uint64_t *)&v21);
    v5 = v21;
    v21 = 0;
    if (v5)
      (*(void (**)(_anonymous_namespace_::IRFunctionImpl *))(*(_QWORD *)v5 + 8))(v5);
  }
  v6 = *((_QWORD *)this + 1);
  *(_QWORD *)&v20 = *(_QWORD *)this;
  *((_QWORD *)&v20 + 1) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *((_QWORD *)this + 8);
  *(_QWORD *)&v19 = *((_QWORD *)this + 7);
  *((_QWORD *)&v19 + 1) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  MIL::IRProgram::Make(&v20, &v19, (uint64_t)v22, v24, a2);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v22);
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v24);
}

void sub_1E060BCD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)va2);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2 - 72);
  _Unwind_Resume(a1);
}

unsigned __int8 *MIL::Builder::ProgramBuilder::AddFunction@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  return MIL::Builder::ProgramBuilder::ProgramBuilderImpl::AddFunction(*(uint64_t **)(a1 + 8), a2, a3);
}

unsigned __int8 *MIL::Builder::ProgramBuilder::ProgramBuilderImpl::AddFunction@<X0>(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  std::string::size_type v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unsigned __int8 *result;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::runtime_error *exception;
  std::string *v20;
  __int128 v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::string v24;
  std::string v25;

  v6 = (uint64_t)(a1 + 2);
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a1 + 2, a2))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v20 = std::string::append(&v24, " is already part of this ProgramBuilder.");
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v25);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v7 = a1[1];
  v22 = *a1;
  v23 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  MIL::Builder::FunctionBuilder::Make(&v22, &v24);
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v25);
  std::shared_ptr<MIL::Builder::FunctionBuilder>::operator=[abi:ne180100]<MIL::Builder::FunctionBuilder,std::default_delete<MIL::Builder::FunctionBuilder>,void>((_QWORD *)v10 + 5, (uint64_t *)&v24);
  v11 = v24.__r_.__value_.__r.__words[0];
  v24.__r_.__value_.__r.__words[0] = 0;
  if (v11)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v11 + 8))(v11);
  v12 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  result = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v25);
  v16 = *((_QWORD *)result + 6);
  *a3 = *((_QWORD *)result + 5);
  a3[1] = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  return result;
}

void sub_1E060BED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  int v24;

  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
  {
    operator delete(a12);
    if ((v24 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

unsigned __int8 *MIL::Builder::ProgramBuilder::RemoveFunction(uint64_t a1, unsigned __int8 *a2)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>((_QWORD *)(*(_QWORD *)(a1 + 8) + 16), a2);
}

uint64_t MIL::Builder::ProgramBuilder::GetLocation(MIL::Builder::ProgramBuilder *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 56);
}

uint64_t MIL::Builder::ProgramBuilder::GetLocationPtr(MIL::Builder::ProgramBuilder *this)
{
  return *((_QWORD *)this + 1) + 56;
}

void MIL::Builder::ProgramBuilder::SetLocation(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v2 = *(_QWORD *)(a1 + 8);
  v6 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  MIL::Builder::ProgramBuilder::ProgramBuilderImpl::SetLocation(v2, &v6);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1E060BFFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::ProgramBuilder::ProgramBuilderImpl::SetLocation(uint64_t a1, __int128 *a2)
{
  std::runtime_error *exception;

  if (!*(_QWORD *)a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot set location to nullptr.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](a1 + 56, a2);
}

void sub_1E060C064(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Builder::ProgramBuilder::SetAttribute(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v4;
  unsigned __int8 *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  void *__p[2];
  uint64_t v11;
  void **v12;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *a2;
  v11 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v9 = *(_OWORD *)a3;
  *(_OWORD *)__p = v4;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v12 = __p;
  v5 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v3 + 72, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v12);
  std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]((uint64_t)(v5 + 40), &v9);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (*((_QWORD *)&v9 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__p[0]);
}

void sub_1E060C134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

unsigned __int8 *MIL::Builder::ProgramBuilder::TryGetAttribute@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>((_QWORD *)(*(_QWORD *)(a1 + 8) + 72), a2);
  if (result)
  {
    v5 = *((_QWORD *)result + 6);
    *a3 = *((_QWORD *)result + 5);
    a3[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

void MIL::Builder::ProgramBuilder::AddFunction(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v3 = *(uint64_t **)(a1 + 8);
  v7 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  MIL::Builder::ProgramBuilder::ProgramBuilderImpl::AddFunction(v3, a2, (uint64_t *)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1E060C21C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::ProgramBuilder::ProgramBuilderImpl::AddFunction(uint64_t *a1, unsigned __int8 *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unint64_t *v9;
  unint64_t v10;
  unsigned __int8 *v11;
  std::runtime_error *exception;
  std::runtime_error *v14;
  std::string *v15;
  __int128 v16;
  std::string v17;
  std::string v18;

  if (!*a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add nullptr FunctionBuilder.");
    goto LABEL_13;
  }
  v6 = (uint64_t)(a1 + 2);
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a1 + 2, a2))
  {
    v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v15 = std::string::append(&v17, " is already part of this ProgramBuilder.");
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v14, &v18);
    __cxa_throw(v14, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v7 = *a1;
  MIL::Builder::FunctionBuilder::GetContext(*a3, &v18);
  v8 = *(_OWORD *)&v18.__r_.__value_.__l.__data_;
  if (v18.__r_.__value_.__l.__size_)
  {
    v9 = (unint64_t *)(v18.__r_.__value_.__l.__size_ + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v8 + 1) + 16))(*((_QWORD *)&v8 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v8 + 1));
    }
  }
  if (v7 != (_QWORD)v8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This ProgramBuilder holds a different MILContext than the one used to create this FunctionBuilder.");
LABEL_13:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v18.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v18);
  return std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]((uint64_t)(v11 + 40), (__int128 *)a3);
}

void sub_1E060C3C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

BOOL MIL::Builder::ProgramBuilder::RemoveAttribute(uint64_t a1, unsigned __int8 *a2)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>((_QWORD *)(*(_QWORD *)(a1 + 8) + 72), a2) != 0;
}

uint64_t MIL::Builder::ProgramBuilder::GetAttributes(MIL::Builder::ProgramBuilder *this)
{
  return *((_QWORD *)this + 1) + 72;
}

uint64_t MIL::Builder::ProgramBuilder::GetFunctions(MIL::Builder::ProgramBuilder *this)
{
  return *((_QWORD *)this + 1) + 16;
}

uint64_t MIL::ValidationResult::operator=(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]((_QWORD *)(a1 + 8), (uint64_t *)(a2 + 8));
  std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  return a1;
}

uint64_t MIL::MILResult::operator=(uint64_t a1, uint64_t a2)
{
  void **v4;
  __int128 v5;

  std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](a1 + 8, (__int128 *)(a2 + 8));
  v4 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v4);
  v5 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)v4 = v5;
  *(_BYTE *)(a2 + 47) = 0;
  *(_BYTE *)(a2 + 24) = 0;
  return a1;
}

_QWORD *std::shared_ptr<MIL::Builder::FunctionBuilder>::operator=[abi:ne180100]<MIL::Builder::FunctionBuilder,std::default_delete<MIL::Builder::FunctionBuilder>,void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  if (*a2)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &unk_1EA99A930;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  *a2 = 0;
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v5;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1E060C83C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x38uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1E060C8D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<MIL::Builder::FunctionBuilder  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E0C023A0);
}

uint64_t std::__shared_ptr_pointer<MIL::Builder::FunctionBuilder  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::Builder::FunctionBuilder  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t MIL::Builder::ProgramBuilder::ProgramBuilderImpl::ProgramBuilderImpl(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;

  v3 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 1065353216;
  MIL::UnknownLocation::Make(&v10);
  v6 = v10;
  *(_QWORD *)(a1 + 56) = v10;
  if (v6)
  {
    v7 = (_QWORD *)operator new();
    v8 = v10;
    *v7 = &unk_1EA9940C8;
    v7[1] = 0;
    v7[2] = 0;
    v7[3] = v8;
  }
  else
  {
    v7 = 0;
  }
  *(_QWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 104) = 1065353216;
  return a1;
}

void sub_1E060CA38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v11);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

void std::default_delete<MIL::Builder::ProgramBuilder::ProgramBuilderImpl>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a2 + 72);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](a2 + 56);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a2 + 16);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](a2);
    JUMPOUT(0x1E0C023A0);
  }
}

uint64_t MIL::Builder::ProgramBuilder::ProgramBuilderImpl::ProgramBuilderImpl(uint64_t a1, _QWORD *a2, MIL::IRObject *this)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *LocationPtr;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t Attributes;
  uint64_t *i;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  __int128 *v34;

  *(_QWORD *)a1 = *a2;
  v5 = a2[1];
  *(_QWORD *)(a1 + 8) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 1065353216;
  LocationPtr = (_QWORD *)MIL::IRObject::GetLocationPtr(this);
  *(_QWORD *)(a1 + 56) = *LocationPtr;
  v9 = LocationPtr[1];
  *(_QWORD *)(a1 + 64) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  Attributes = MIL::IRObject::GetAttributes(this);
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map(a1 + 72, Attributes);
  for (i = *(uint64_t **)((*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)this + 72))(this) + 16);
        i;
        i = (uint64_t *)*i)
  {
    v14 = *(std::__shared_weak_count **)(a1 + 8);
    v31 = *(_QWORD *)a1;
    v32 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
    v17 = (std::__shared_weak_count *)i[6];
    v29 = i[5];
    v30 = v17;
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    MIL::Builder::FunctionBuilder::Make(&v31, &v29, &v33);
    v34 = (__int128 *)(i + 2);
    v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 16, (unsigned __int8 *)i + 16, (uint64_t)&std::piecewise_construct, &v34);
    std::shared_ptr<MIL::Builder::FunctionBuilder>::operator=[abi:ne180100]<MIL::Builder::FunctionBuilder,std::default_delete<MIL::Builder::FunctionBuilder>,void>((_QWORD *)v20 + 5, &v33);
    v21 = v33;
    v33 = 0;
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    v22 = v30;
    if (v30)
    {
      v23 = (unint64_t *)&v30->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v25 = v32;
    if (v32)
    {
      v26 = (unint64_t *)&v32->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
  }
  return a1;
}

void sub_1E060CCB0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v3);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v2 + 40);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void MIL::Builder::Variable::Make(uint64_t a1@<X0>, std::string::size_type a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  std::string __p;

  v6 = (_QWORD *)operator new();
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  MIL::Builder::Variable::Variable(v6, (uint64_t)&__p, a2);
  *a3 = v6;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

{
  _QWORD *v6;
  std::string __p;

  v6 = (_QWORD *)operator new();
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  MIL::Builder::Variable::Variable(v6, (uint64_t)&__p, a2);
  *a3 = v6;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

{
  _QWORD *v6;
  void *__p[2];
  uint64_t v8;

  v6 = (_QWORD *)operator new();
  *(_OWORD *)__p = *(_OWORD *)a1;
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  MIL::Builder::Variable::Variable(v6, (uint64_t)__p, a2);
  *a3 = v6;
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
}

void sub_1E060CDC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  MEMORY[0x1E0C023A0](v14, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void sub_1E060CE9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  MEMORY[0x1E0C023A0](v14, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void sub_1E060CF74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (a14 < 0)
    operator delete(__p);
  MEMORY[0x1E0C023A0](v14, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void MIL::Builder::Variable::Make(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14[2];

  v6 = (_QWORD *)operator new();
  v7 = v6;
  v8 = *a1;
  v9 = (std::__shared_weak_count *)a1[1];
  v14[0] = v8;
  v14[1] = (uint64_t)v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Builder::Variable::Variable(v6, v14, a2);
  *a3 = v7;
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1E060D074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x1E0C023A0](v9, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void MIL::Builder::Variable::Make(MIL::Builder::Variable *this@<X0>, const MIL::IRArgument *a2@<X1>, const MIL::Builder::OperationBuilder *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t Name;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  std::string v14;

  if ((*(unsigned int (**)(MIL::Builder::Variable *, const MIL::IRArgument *, const MIL::Builder::OperationBuilder *))(*(_QWORD *)this + 16))(this, a2, a3))
  {
    Name = MIL::IRArgument::GetName(this);
    if (*(char *)(Name + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)Name, *(_QWORD *)(Name + 8));
    }
    else
    {
      v8 = *(_OWORD *)Name;
      v14.__r_.__value_.__r.__words[2] = *(_QWORD *)(Name + 16);
      *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v8;
    }
    MIL::Builder::Variable::Make((uint64_t)&v14, (std::string::size_type)a2, a4);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr, MIL::Builder::Variable *))(*(_QWORD *)this + 48))(&v12, this);
    MIL::Builder::Variable::Make(&v12, (uint64_t)a2, a4);
    v9 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1E060D198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *MIL::Builder::Variable::Variable(_QWORD *a1, uint64_t a2, std::string::size_type a3)
{
  std::string *v6;
  std::string __p;

  *a1 = &off_1EA99A990;
  v6 = (std::string *)operator new();
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  MIL::Builder::Variable::VariableImpl::VariableImpl(v6, (__int128 *)&__p, a3);
  a1[1] = v6;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

{
  std::string *v6;
  std::string __p;

  *a1 = &off_1EA99A990;
  v6 = (std::string *)operator new();
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  MIL::Builder::Variable::VariableImpl::VariableImpl(v6, (__int128 *)&__p, a3);
  a1[1] = v6;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

{
  std::string *v6;
  std::string __p;

  *a1 = &off_1EA99A990;
  v6 = (std::string *)operator new();
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  MIL::Builder::Variable::VariableImpl::VariableImpl(v6, (__int128 *)&__p, a3);
  a1[1] = v6;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1E060D270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  MEMORY[0x1E0C023A0](v14, 0x1072C409AFF1A62);
  _Unwind_Resume(a1);
}

void sub_1E060D358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  MEMORY[0x1E0C023A0](v14, 0x1072C409AFF1A62);
  _Unwind_Resume(a1);
}

void sub_1E060D440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  MEMORY[0x1E0C023A0](v14, 0x1072C409AFF1A62);
  _Unwind_Resume(a1);
}

_QWORD *MIL::Builder::Variable::Variable(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;

  *a1 = &off_1EA99A990;
  v6 = operator new();
  v7 = v6;
  v8 = (std::__shared_weak_count *)a2[1];
  v15 = *a2;
  v16 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  MIL::Builder::Variable::VariableImpl::VariableImpl(v6, &v15, a3);
  a1[1] = v7;
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return a1;
}

void sub_1E060D548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  uint64_t v10;

  if (a10)
    MIL::Builder::FunctionBuilder::FunctionBuilder(a10);
  MEMORY[0x1E0C023A0](v10, 0x1072C409AFF1A62);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::Variable::GetValue(MIL::Builder::Variable::VariableImpl **this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::runtime_error *exception;
  std::string *v8;
  __int128 v9;
  std::string v10;
  std::string v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  MIL::Builder::Variable::VariableImpl::TryGetValue(this[1], &v12);
  v2 = v12;
  if (!v12)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    MIL::Builder::Variable::VariableImpl::GetName(this[1]);
    std::operator+<char>();
    v8 = std::string::append(&v10, " is not associated with a value.");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v11);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v3 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v2;
}

void sub_1E060D674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;
  uint64_t v23;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
    {
LABEL_8:
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v23 - 48);
      _Unwind_Resume(a1);
    }
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void MIL::Builder::Variable::VariableImpl::TryGetValue(MIL::Builder::Variable::VariableImpl *this@<X0>, _QWORD *a2@<X8>)
{
  int v2;
  MIL::Builder::Variable::VariableImpl *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    if (v2 == 1)
      v3 = this;
    else
      v3 = 0;
    v5 = *(_QWORD *)v3;
    v4 = *((_QWORD *)v3 + 1);
    *a2 = v5;
    a2[1] = v4;
    if (v4)
    {
      v6 = (unint64_t *)(v4 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    MIL::Builder::Variable::VariableImpl::GetValueFromBuilder((uint64_t)this, (unsigned __int8 *)this, a2);
  }
}

MIL::Builder::Variable::VariableImpl *MIL::Builder::Variable::VariableImpl::GetName(MIL::Builder::Variable::VariableImpl *this)
{
  MIL::Builder::Variable::VariableImpl *result;
  std::runtime_error *exception;

  result = MIL::Builder::Variable::VariableImpl::TryGetName(this);
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This variable holds an IRValue literal.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1E060D768(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::Variable::TryGetValue(MIL::Builder::Variable::VariableImpl **this)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  MIL::Builder::Variable::VariableImpl::TryGetValue(this[1], &v6);
  v1 = v6;
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void MIL::Builder::Variable::TryGetValueSharedPtr(MIL::Builder::Variable::VariableImpl **this@<X0>, _QWORD *a2@<X8>)
{
  MIL::Builder::Variable::VariableImpl::TryGetValue(this[1], a2);
}

MIL::Builder::Variable::VariableImpl *MIL::Builder::Variable::GetName(MIL::Builder::Variable::VariableImpl **this)
{
  MIL::Builder::Variable::VariableImpl *result;
  std::runtime_error *exception;

  result = MIL::Builder::Variable::VariableImpl::TryGetName(this[1]);
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Variable is not associated with a name.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1E060D840(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

MIL::Builder::Variable::VariableImpl *MIL::Builder::Variable::VariableImpl::TryGetName(MIL::Builder::Variable::VariableImpl *this)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  if (!this || *((_DWORD *)this + 6))
  {
    MIL::Builder::Variable::VariableImpl::TryGetValue(this, &v6);
    v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    v2 = v1;
    v3 = v7;
    if (!v7)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if (v2)
        return (MIL::Builder::Variable::VariableImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 136))(v2);
    }
    else
    {
LABEL_7:
      if (v1)
        return (MIL::Builder::Variable::VariableImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 136))(v2);
    }
    return 0;
  }
  return this;
}

void sub_1E060D8F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

MIL::Builder::Variable::VariableImpl *MIL::Builder::Variable::TryGetName(MIL::Builder::Variable::VariableImpl **this)
{
  return MIL::Builder::Variable::VariableImpl::TryGetName(this[1]);
}

uint64_t MIL::Builder::Variable::TryGetType(MIL::Builder::Variable::VariableImpl **this)
{
  return MIL::Builder::Variable::VariableImpl::TryGetType(this[1]);
}

uint64_t MIL::Builder::Variable::VariableImpl::TryGetType(MIL::Builder::Variable::VariableImpl *this)
{
  int v1;
  MIL::Builder::Variable::VariableImpl *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v1 = *((_DWORD *)this + 6);
  if (!v1)
    return MIL::Builder::Variable::VariableImpl::GetTypeFromBuilder((uint64_t)this, (uint64_t)this);
  if (v1 == 1)
    v2 = this;
  else
    v2 = 0;
  v3 = *(_QWORD *)v2;
  v4 = (std::__shared_weak_count *)*((_QWORD *)v2 + 1);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  if (v4)
  {
    v8 = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v7;
}

void sub_1E060D9C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::Variable::UpdateOwner(MIL::Builder::Variable *this, const MIL::Builder::BlockBuilder *a2)
{
  return MIL::Builder::Variable::VariableImpl::UpdateOwner(*((_QWORD *)this + 1), a2);
}

uint64_t MIL::Builder::Variable::VariableImpl::UpdateOwner(uint64_t this, const MIL::Builder::BlockBuilder *a2)
{
  std::runtime_error *exception;

  if (!a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot call UpdateOwner with a null pointer.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (*(_DWORD *)(this + 40) != 1)
    *(_DWORD *)(this + 40) = 1;
  *(_QWORD *)(this + 32) = a2;
  return this;
}

void sub_1E060DA44(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Builder::Variable::~Variable(MIL::Builder::Variable *this)
{
  *(_QWORD *)this = &off_1EA99A990;
  std::unique_ptr<MIL::Builder::Variable::VariableImpl>::reset[abi:ne180100]((uint64_t *)this + 1, 0);
}

{
  *(_QWORD *)this = &off_1EA99A990;
  std::unique_ptr<MIL::Builder::Variable::VariableImpl>::reset[abi:ne180100]((uint64_t *)this + 1, 0);
}

{
  *(_QWORD *)this = &off_1EA99A990;
  std::unique_ptr<MIL::Builder::Variable::VariableImpl>::reset[abi:ne180100]((uint64_t *)this + 1, 0);
  JUMPOUT(0x1E0C023A0);
}

void MIL::Builder::Variable::GetScalarValue<MIL::Int4>()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "rdar://111816272: Compile-time known scalar values is not defined for sub-byte data types.");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_1E060DB40(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Builder::Variable::GetScalarValue<MIL::UInt4>()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "rdar://111816272: Compile-time known scalar values is not defined for sub-byte data types.");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_1E060DB90(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Builder::Variable::GetScalarValue<MIL::UInt2>()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "rdar://111816272: Compile-time known scalar values is not defined for sub-byte data types.");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_1E060DBE0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Builder::Variable::GetScalarValue<MIL::UInt1>()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "rdar://111816272: Compile-time known scalar values is not defined for sub-byte data types.");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_1E060DC30(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::Variable::GetScalarValue<BOOL>(uint64_t a1)
{
  return MIL::Builder::Variable::VariableImpl::GetScalarValue<BOOL>(*(MIL::Builder::Variable::VariableImpl **)(a1 + 8));
}

uint64_t MIL::Builder::Variable::VariableImpl::GetScalarValue<BOOL>(MIL::Builder::Variable::VariableImpl *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::runtime_error *exception;
  const void *v7;
  std::__shared_weak_count *v8;

  MIL::Builder::Variable::VariableImpl::TryGetValue(a1, &v7);
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Variable does not hold an IRValue.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v1 = MIL::IRValue::GetScalar<BOOL>(v7);
  v2 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_1E060DCF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  __cxa_free_exception(v9);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::Variable::GetScalarValue<unsigned char>(uint64_t a1)
{
  return MIL::Builder::Variable::VariableImpl::GetScalarValue<unsigned char>(*(MIL::Builder::Variable::VariableImpl **)(a1 + 8));
}

uint64_t MIL::Builder::Variable::VariableImpl::GetScalarValue<unsigned char>(MIL::Builder::Variable::VariableImpl *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::runtime_error *exception;
  void *v7;
  std::__shared_weak_count *v8;

  MIL::Builder::Variable::VariableImpl::TryGetValue(a1, &v7);
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Variable does not hold an IRValue.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v1 = MIL::IRValue::GetScalar<unsigned char>(v7);
  v2 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_1E060DDC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  __cxa_free_exception(v9);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::Variable::GetScalarValue<unsigned short>(uint64_t a1)
{
  return MIL::Builder::Variable::VariableImpl::GetScalarValue<unsigned short>(*(MIL::Builder::Variable::VariableImpl **)(a1 + 8));
}

uint64_t MIL::Builder::Variable::VariableImpl::GetScalarValue<unsigned short>(MIL::Builder::Variable::VariableImpl *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::runtime_error *exception;
  void *v7;
  std::__shared_weak_count *v8;

  MIL::Builder::Variable::VariableImpl::TryGetValue(a1, &v7);
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Variable does not hold an IRValue.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v1 = MIL::IRValue::GetScalar<unsigned short>(v7);
  v2 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_1E060DE9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  __cxa_free_exception(v9);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::Variable::GetScalarValue<unsigned int>(uint64_t a1)
{
  return MIL::Builder::Variable::VariableImpl::GetScalarValue<unsigned int>(*(MIL::Builder::Variable::VariableImpl **)(a1 + 8));
}

uint64_t MIL::Builder::Variable::VariableImpl::GetScalarValue<unsigned int>(MIL::Builder::Variable::VariableImpl *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::runtime_error *exception;
  const void *v7;
  std::__shared_weak_count *v8;

  MIL::Builder::Variable::VariableImpl::TryGetValue(a1, &v7);
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Variable does not hold an IRValue.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v1 = MIL::IRValue::GetScalar<unsigned int>(v7);
  v2 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_1E060DF70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  __cxa_free_exception(v9);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::Variable::GetScalarValue<unsigned long long>(uint64_t a1)
{
  return MIL::Builder::Variable::VariableImpl::GetScalarValue<unsigned long long>(*(MIL::Builder::Variable::VariableImpl **)(a1 + 8));
}

uint64_t MIL::Builder::Variable::VariableImpl::GetScalarValue<unsigned long long>(MIL::Builder::Variable::VariableImpl *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::runtime_error *exception;
  const void *v7;
  std::__shared_weak_count *v8;

  MIL::Builder::Variable::VariableImpl::TryGetValue(a1, &v7);
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Variable does not hold an IRValue.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v1 = MIL::IRValue::GetScalar<unsigned long long>(v7);
  v2 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_1E060E044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  __cxa_free_exception(v9);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::Variable::GetScalarValue<signed char>(uint64_t a1)
{
  return MIL::Builder::Variable::VariableImpl::GetScalarValue<signed char>(*(MIL::Builder::Variable::VariableImpl **)(a1 + 8));
}

uint64_t MIL::Builder::Variable::VariableImpl::GetScalarValue<signed char>(MIL::Builder::Variable::VariableImpl *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::runtime_error *exception;
  const void *v7;
  std::__shared_weak_count *v8;

  MIL::Builder::Variable::VariableImpl::TryGetValue(a1, &v7);
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Variable does not hold an IRValue.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v1 = MIL::IRValue::GetScalar<signed char>(v7);
  v2 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_1E060E118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  __cxa_free_exception(v9);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::Variable::GetScalarValue<short>(uint64_t a1)
{
  return MIL::Builder::Variable::VariableImpl::GetScalarValue<short>(*(MIL::Builder::Variable::VariableImpl **)(a1 + 8));
}

uint64_t MIL::Builder::Variable::VariableImpl::GetScalarValue<short>(MIL::Builder::Variable::VariableImpl *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::runtime_error *exception;
  const void *v7;
  std::__shared_weak_count *v8;

  MIL::Builder::Variable::VariableImpl::TryGetValue(a1, &v7);
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Variable does not hold an IRValue.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v1 = MIL::IRValue::GetScalar<short>(v7);
  v2 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_1E060E1EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  __cxa_free_exception(v9);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::Variable::GetScalarValue<int>(uint64_t a1)
{
  return MIL::Builder::Variable::VariableImpl::GetScalarValue<int>(*(MIL::Builder::Variable::VariableImpl **)(a1 + 8));
}

uint64_t MIL::Builder::Variable::VariableImpl::GetScalarValue<int>(MIL::Builder::Variable::VariableImpl *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::runtime_error *exception;
  const void *v7;
  std::__shared_weak_count *v8;

  MIL::Builder::Variable::VariableImpl::TryGetValue(a1, &v7);
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Variable does not hold an IRValue.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v1 = MIL::IRValue::GetScalar<int>(v7);
  v2 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_1E060E2C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  __cxa_free_exception(v9);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::Variable::GetScalarValue<long long>(uint64_t a1)
{
  return MIL::Builder::Variable::VariableImpl::GetScalarValue<long long>(*(MIL::Builder::Variable::VariableImpl **)(a1 + 8));
}

uint64_t MIL::Builder::Variable::VariableImpl::GetScalarValue<long long>(MIL::Builder::Variable::VariableImpl *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::runtime_error *exception;
  const void *v7;
  std::__shared_weak_count *v8;

  MIL::Builder::Variable::VariableImpl::TryGetValue(a1, &v7);
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Variable does not hold an IRValue.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v1 = MIL::IRValue::GetScalar<long long>(v7);
  v2 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_1E060E394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  __cxa_free_exception(v9);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::Variable::GetScalarValue<MIL::Bf16>(uint64_t a1)
{
  return MIL::Builder::Variable::VariableImpl::GetScalarValue<MIL::Bf16>(*(MIL::Builder::Variable::VariableImpl **)(a1 + 8));
}

uint64_t MIL::Builder::Variable::VariableImpl::GetScalarValue<MIL::Bf16>(MIL::Builder::Variable::VariableImpl *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::runtime_error *exception;
  const void *v7;
  std::__shared_weak_count *v8;

  MIL::Builder::Variable::VariableImpl::TryGetValue(a1, &v7);
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Variable does not hold an IRValue.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v1 = MIL::IRValue::GetScalar<MIL::Bf16>(v7);
  v2 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_1E060E468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  __cxa_free_exception(v9);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::Variable::GetScalarValue<MIL::Fp8E4M3FN>(uint64_t a1)
{
  return MIL::Builder::Variable::VariableImpl::GetScalarValue<MIL::Fp8E4M3FN>(*(MIL::Builder::Variable::VariableImpl **)(a1 + 8));
}

uint64_t MIL::Builder::Variable::VariableImpl::GetScalarValue<MIL::Fp8E4M3FN>(MIL::Builder::Variable::VariableImpl *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::runtime_error *exception;
  const void *v7;
  std::__shared_weak_count *v8;

  MIL::Builder::Variable::VariableImpl::TryGetValue(a1, &v7);
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Variable does not hold an IRValue.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v1 = MIL::IRValue::GetScalar<MIL::Fp8E4M3FN>(v7);
  v2 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_1E060E53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  __cxa_free_exception(v9);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::Variable::GetScalarValue<MIL::Fp8E5M2>(uint64_t a1)
{
  return MIL::Builder::Variable::VariableImpl::GetScalarValue<MIL::Fp8E5M2>(*(MIL::Builder::Variable::VariableImpl **)(a1 + 8));
}

uint64_t MIL::Builder::Variable::VariableImpl::GetScalarValue<MIL::Fp8E5M2>(MIL::Builder::Variable::VariableImpl *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::runtime_error *exception;
  const void *v7;
  std::__shared_weak_count *v8;

  MIL::Builder::Variable::VariableImpl::TryGetValue(a1, &v7);
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Variable does not hold an IRValue.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v1 = MIL::IRValue::GetScalar<MIL::Fp8E5M2>(v7);
  v2 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_1E060E610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  __cxa_free_exception(v9);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::Variable::GetScalarValue<MIL::Fp16>(uint64_t a1)
{
  return MIL::Builder::Variable::VariableImpl::GetScalarValue<MIL::Fp16>(*(MIL::Builder::Variable::VariableImpl **)(a1 + 8));
}

uint64_t MIL::Builder::Variable::VariableImpl::GetScalarValue<MIL::Fp16>(MIL::Builder::Variable::VariableImpl *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::runtime_error *exception;
  const void *v7;
  std::__shared_weak_count *v8;

  MIL::Builder::Variable::VariableImpl::TryGetValue(a1, &v7);
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Variable does not hold an IRValue.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v1 = MIL::IRValue::GetScalar<MIL::Fp16>(v7);
  v2 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_1E060E6E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  __cxa_free_exception(v9);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

float MIL::Builder::Variable::GetScalarValue<float>(uint64_t a1)
{
  return MIL::Builder::Variable::VariableImpl::GetScalarValue<float>(*(MIL::Builder::Variable::VariableImpl **)(a1 + 8));
}

float MIL::Builder::Variable::VariableImpl::GetScalarValue<float>(MIL::Builder::Variable::VariableImpl *a1)
{
  float v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::runtime_error *exception;
  const void *v7;
  std::__shared_weak_count *v8;

  MIL::Builder::Variable::VariableImpl::TryGetValue(a1, &v7);
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Variable does not hold an IRValue.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v1 = MIL::IRValue::GetScalar<float>(v7);
  v2 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_1E060E7C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  __cxa_free_exception(v9);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double MIL::Builder::Variable::GetScalarValue<double>(uint64_t a1)
{
  return MIL::Builder::Variable::VariableImpl::GetScalarValue<double>(*(MIL::Builder::Variable::VariableImpl **)(a1 + 8));
}

double MIL::Builder::Variable::VariableImpl::GetScalarValue<double>(MIL::Builder::Variable::VariableImpl *a1)
{
  double v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::runtime_error *exception;
  const void *v7;
  std::__shared_weak_count *v8;

  MIL::Builder::Variable::VariableImpl::TryGetValue(a1, &v7);
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Variable does not hold an IRValue.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v1 = MIL::IRValue::GetScalar<double>(v7);
  v2 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_1E060E89C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  __cxa_free_exception(v9);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Builder::Variable::GetScalarValue<std::string>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  MIL::Builder::Variable::VariableImpl::GetScalarValue<std::string>(*(MIL::Builder::Variable::VariableImpl **)(a1 + 8), a2);
}

void MIL::Builder::Variable::VariableImpl::GetScalarValue<std::string>(MIL::Builder::Variable::VariableImpl *a1@<X0>, std::string *a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::runtime_error *exception;
  const void *v7;
  std::__shared_weak_count *v8;

  MIL::Builder::Variable::VariableImpl::TryGetValue(a1, &v7);
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Variable does not hold an IRValue.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  MIL::IRValue::GetScalar<std::string>(v7, a2);
  v3 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1E060E970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  __cxa_free_exception(v9);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Builder::Variable::VariableImpl::GetValueFromBuilder(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  int v3;

  v3 = *(_DWORD *)(a1 + 40);
  if (v3)
  {
    if (v3 == 1)
    {
      MIL::Builder::BlockBuilder::GetValue(*(_QWORD *)(a1 + 32), a2, a3);
    }
    else
    {
      *a3 = 0;
      a3[1] = 0;
    }
  }
  else
  {
    MIL::Builder::OperationBuilder::TryGetConstant(*(const void *****)(a1 + 32), a3);
  }
}

uint64_t MIL::Builder::Variable::VariableImpl::GetTypeFromBuilder(uint64_t a1, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(a1 + 40);
  if (v2 == 2)
    return MIL::Builder::FunctionBuilder::GetType(*(_QWORD *)(a1 + 32), a2);
  if (v2)
    return MIL::Builder::BlockBuilder::GetType(*(_QWORD *)(a1 + 32), a2);
  return MIL::Builder::OperationBuilder::GetType(*(_QWORD *)(a1 + 32), a2);
}

std::string *MIL::Builder::Variable::VariableImpl::VariableImpl(std::string *this, __int128 *a2, std::string::size_type a3)
{
  __int128 v5;
  std::runtime_error *exception;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = 0;
  this[1].__r_.__value_.__l.__size_ = a3;
  LODWORD(this[1].__r_.__value_.__r.__words[2]) = 0;
  if (!a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot create a Variable without an owning builder.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return this;
}

{
  __int128 v5;
  std::runtime_error *exception;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = 0;
  this[1].__r_.__value_.__l.__size_ = a3;
  LODWORD(this[1].__r_.__value_.__r.__words[2]) = 1;
  if (!a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot create a Variable without an owning builder.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return this;
}

{
  __int128 v5;
  std::runtime_error *exception;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = 0;
  this[1].__r_.__value_.__l.__size_ = a3;
  LODWORD(this[1].__r_.__value_.__r.__words[2]) = 2;
  if (!a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot create a Variable without an owning builder.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return this;
}

void sub_1E060EA80(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<MIL::Builder::Variable::VariableImpl>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor(result);
    JUMPOUT(0x1E0C023A0);
  }
  return result;
}

void sub_1E060EB80(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

void sub_1E060EC44(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::Variable::VariableImpl::VariableImpl(uint64_t result, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::runtime_error *exception;

  v3 = a2[1];
  *(_QWORD *)result = *a2;
  *(_QWORD *)(result + 8) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_DWORD *)(result + 24) = 1;
  *(_QWORD *)(result + 32) = a3;
  *(_DWORD *)(result + 40) = 0;
  if (!a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot create a Variable without an owning builder.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1E060ECF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor(a10);
  _Unwind_Resume(a1);
}

void MIL::Conversion::OpConversionImpl::~OpConversionImpl(MIL::Conversion::OpConversionImpl *this)
{
  std::__tree<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::__map_value_compare<std::pair<std::string,std::set<std::string>>,std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::less<std::pair<std::string,std::set<std::string>>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>>>::destroy((uint64_t)this + 32, *((_QWORD **)this + 5));
  std::__tree<std::__value_type<std::string,std::vector<std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::set<std::string>>>>>::destroy((uint64_t)this + 8, *((_QWORD **)this + 2));
}

{
  std::__tree<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::__map_value_compare<std::pair<std::string,std::set<std::string>>,std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::less<std::pair<std::string,std::set<std::string>>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>>>::destroy((uint64_t)this + 32, *((_QWORD **)this + 5));
  std::__tree<std::__value_type<std::string,std::vector<std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::set<std::string>>>>>::destroy((uint64_t)this + 8, *((_QWORD **)this + 2));
}

{
  std::__tree<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::__map_value_compare<std::pair<std::string,std::set<std::string>>,std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::less<std::pair<std::string,std::set<std::string>>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>>>::destroy((uint64_t)this + 32, *((_QWORD **)this + 5));
  std::__tree<std::__value_type<std::string,std::vector<std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::set<std::string>>>>>::destroy((uint64_t)this + 8, *((_QWORD **)this + 2));
  JUMPOUT(0x1E0C023A0);
}

_QWORD *MIL::Conversion::OpConversion::OpConversion(_QWORD *this)
{
  *this = off_1EA99A9D0;
  return this;
}

_QWORD *MIL::Conversion::OpConversion::Make@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  result[2] = 0;
  *result = &off_1EA99AA20;
  result[1] = result + 2;
  result[6] = 0;
  result[5] = 0;
  result[3] = 0;
  result[4] = result + 5;
  *a1 = result;
  return result;
}

void MIL::Conversion::OpConversionImpl::RegisterConversion(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4)
{
  uint64_t **v8;
  uint64_t *v9;
  const void ***v10;
  const void ***i;
  __int128 *v12;
  const void **v13;
  __int128 *v14;
  __int128 *v15;
  BOOL v16;
  const void **v17;
  const void ***v18;
  uint64_t *v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  std::string __p;
  uint64_t v26;
  char *v27;
  std::string *v28;
  char *v29[2];
  std::string *p_p;

  v8 = (uint64_t **)(a1 + 8);
  if (std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__count_unique<std::string>(a1 + 8, a2))
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    v9 = std::__tree<std::__value_type<std::string,std::vector<std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::set<std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
    v10 = (const void ***)v9[7];
    for (i = (const void ***)v9[8]; v10 != i; v10 += 3)
    {
      std::set<std::string>::set[abi:ne180100]((uint64_t *)&v28, v10);
      if (v29[1] == *(char **)(a3 + 16))
      {
        v12 = (__int128 *)v28;
        if (v28 == (std::string *)v29)
        {
LABEL_22:
          std::pair<std::string,std::set<std::string>>::pair[abi:ne180100]<true,0>(&__p, (__int128 *)a2, (const void ***)a3);
          p_p = &__p;
          v23 = std::__tree<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::__map_value_compare<std::pair<std::string,std::set<std::string>>,std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::less<std::pair<std::string,std::set<std::string>>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>>>::__emplace_unique_key_args<std::pair<std::string,std::set<std::string>>,std::piecewise_construct_t const&,std::tuple<std::pair<std::string,std::set<std::string>>&&>,std::tuple<>>((uint64_t **)(a1 + 32), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
          std::function<void ()(MIL::Transform::ProgramTransformer &)>::operator=(v23 + 10, a4);
          std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy((uint64_t)&v26, v27);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy((uint64_t)&v28, v29[0]);
          return;
        }
        v13 = *(const void ***)a3;
        while ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&__p, (unsigned __int8 *)v12 + 32, (unsigned __int8 *)v13 + 32) & 1) != 0)
        {
          v14 = (__int128 *)*((_QWORD *)v12 + 1);
          v15 = v12;
          if (v14)
          {
            do
            {
              v12 = v14;
              v14 = *(__int128 **)v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              v12 = (__int128 *)*((_QWORD *)v15 + 2);
              v16 = *(_QWORD *)v12 == (_QWORD)v15;
              v15 = v12;
            }
            while (!v16);
          }
          v17 = (const void **)v13[1];
          if (v17)
          {
            do
            {
              v18 = (const void ***)v17;
              v17 = (const void **)*v17;
            }
            while (v17);
          }
          else
          {
            do
            {
              v18 = (const void ***)v13[2];
              v16 = *v18 == v13;
              v13 = (const void **)v18;
            }
            while (!v16);
          }
          v13 = (const void **)v18;
          if (v12 == (__int128 *)v29)
            goto LABEL_22;
        }
      }
      std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy((uint64_t)&v28, v29[0]);
    }
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  v19 = std::__tree<std::__value_type<std::string,std::vector<std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::set<std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
  v20 = v19;
  v21 = v19[8];
  if (v21 >= v19[9])
  {
    v22 = std::vector<std::set<std::string>>::__push_back_slow_path<std::set<std::string> const&>(v19 + 7, (const void ***)a3);
  }
  else
  {
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v19[8], (const void ***)a3);
    v22 = v21 + 24;
    v20[8] = v21 + 24;
  }
  v20[8] = v22;
  std::pair<std::string,std::set<std::string>>::pair[abi:ne180100]<true,0>(&__p, (__int128 *)a2, (const void ***)a3);
  v28 = &__p;
  v24 = std::__tree<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::__map_value_compare<std::pair<std::string,std::set<std::string>>,std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::less<std::pair<std::string,std::set<std::string>>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>>>::__emplace_unique_key_args<std::pair<std::string,std::set<std::string>>,std::piecewise_construct_t const&,std::tuple<std::pair<std::string,std::set<std::string>>&&>,std::tuple<>>((uint64_t **)(a1 + 32), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v28);
  std::function<void ()(MIL::Transform::ProgramTransformer &)>::operator=(v24 + 10, a4);
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy((uint64_t)&v26, v27);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1E060F0CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, char *a17)
{
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy((uint64_t)&a16, a17);
  _Unwind_Resume(a1);
}

void MIL::Conversion::OpConversionImpl::ConvertProgram(MIL::Conversion::OpConversionImpl *a1@<X0>, const MIL::IRProgram *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  const void **v10;
  uint64_t v11;
  uint64_t v12;
  void ***v13;
  uint64_t v14;
  uint64_t i;
  std::runtime_error *exception;
  uint64_t v17[3];
  char **v18;
  char *v19[2];
  _BYTE v20[8];
  void **v21[3];
  void ***v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if ((MIL::Conversion::OpConversionImpl::CanConvertProgram(a1, a2) & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Program cannot be converted due to train opset.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  MIL::Transform::ProgramTransformer::ProgramTransformer((MIL::Transform::ProgramTransformer *)v20, a2);
  v19[0] = 0;
  v19[1] = 0;
  v18 = v19;
  v8 = (*(uint64_t (**)(const MIL::IRProgram *))(*(_QWORD *)a2 + 72))(a2) + 16;
  while (1)
  {
    v8 = *(_QWORD *)v8;
    if (!v8)
      break;
    v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 40) + 48))(*(_QWORD *)(v8 + 40));
    v10 = (const void **)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 40) + 32))(*(_QWORD *)(v8 + 40));
    MIL::Conversion::OpConversionImpl::PopulateProgramOps((uint64_t)a1, (uint64_t)a2, v10, v9, (uint64_t **)&v18);
  }
  MIL::Conversion::OpConversionImpl::GetValidConversion((uint64_t)a1, &v18, a3, v17);
  v11 = v17[0];
  v12 = v17[1];
  while (v11 != v12)
  {
    std::__function::__value_func<std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v21, v11);
    if (!v22)
      std::__throw_bad_function_call[abi:ne180100]();
    ((void (*)(void ***, _BYTE *))(*v22)[6])(v22, v20);
    v13 = v22;
    if (v22 == v21)
    {
      v13 = v21;
      v14 = 4;
    }
    else
    {
      if (!v22)
        goto LABEL_13;
      v14 = 5;
    }
    ((void (*)(void))(*v13)[v14])();
LABEL_13:
    v11 += 32;
  }
  MIL::Transform::ProgramTransformer::GetProgram((MIL::Transform::ProgramTransformer *)v20, a4);
  for (i = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a4 + 72))(*a4) + 16;
        ;
        (*(void (**)(_QWORD))(**(_QWORD **)(i + 40) + 240))(*(_QWORD *)(i + 40)))
  {
    i = *(_QWORD *)i;
    if (!i)
      break;
  }
  v21[0] = (void **)v17;
  std::vector<std::function<void ()(MIL::Transform::ProgramTransformer &)>>::__destroy_vector::operator()[abi:ne180100](v21);
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy((uint64_t)&v18, v19[0]);
  MIL::Transform::ProgramTransformer::~ProgramTransformer((MIL::Transform::ProgramTransformer *)v20);
}

void sub_1E060F310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  void *v19;

  __cxa_free_exception(v19);
  _Unwind_Resume(a1);
}

void MIL::Conversion::OpConversionImpl::ConvertProgram(MIL::Conversion::OpConversionImpl *a1@<X0>, const MIL::IRProgram *a2@<X1>, const void **a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  MIL::IROpset *Opset;
  uint64_t *i;
  size_t v11;
  std::string *v12;
  const void *v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  int v19;
  std::string v21;
  void *__p[2];
  std::string::size_type v23;
  void *v24[2];
  uint64_t *v25;
  char **v26;
  char *v27[2];

  v27[0] = 0;
  v27[1] = 0;
  v26 = v27;
  v8 = (*(uint64_t (**)(const MIL::IRProgram *))(*(_QWORD *)a2 + 40))(a2);
  Opset = (MIL::IROpset *)MIL::MILContext::GetOpset(v8);
  MIL::IROpset::GetReversedOperatorNamesMap(Opset, (uint64_t)v24);
  for (i = v25; i; i = (uint64_t *)*i)
  {
    if (*((char *)a3 + 23) >= 0)
      v11 = *((unsigned __int8 *)a3 + 23);
    else
      v11 = (size_t)a3[1];
    std::string::basic_string[abi:ne180100]((uint64_t)&v21, v11 + 2);
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &v21;
    else
      v12 = (std::string *)v21.__r_.__value_.__r.__words[0];
    if (v11)
    {
      if (*((char *)a3 + 23) >= 0)
        v13 = a3;
      else
        v13 = *a3;
      memmove(v12, v13, v11);
    }
    strcpy((char *)v12 + v11, "::");
    v14 = *((char *)i + 63);
    if (v14 >= 0)
      v15 = (const std::string::value_type *)(i + 5);
    else
      v15 = (const std::string::value_type *)i[5];
    if (v14 >= 0)
      v16 = *((unsigned __int8 *)i + 63);
    else
      v16 = i[6];
    v17 = std::string::append(&v21, v15, v16);
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v23 = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v26, (const void **)__p, (uint64_t)__p);
    if (SHIBYTE(v23) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v24);
  v19 = *((char *)a3 + 23);
  if (v19 < 0)
  {
    if (a3[1] != (const void *)5)
      goto LABEL_40;
    a3 = (const void **)*a3;
  }
  else if (v19 != 5)
  {
    goto LABEL_40;
  }
  if (*(_DWORD *)a3 == 829648745 && *((_BYTE *)a3 + 4) == 55)
  {
    std::string::basic_string[abi:ne180100]<0>(v24, "ios16::non_maximum_suppression");
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v26, (const void **)v24, (uint64_t)v24);
    if (SHIBYTE(v25) < 0)
      operator delete(v24[0]);
    std::string::basic_string[abi:ne180100]<0>(v24, "ios16::resample");
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v26, (const void **)v24, (uint64_t)v24);
    if (SHIBYTE(v25) < 0)
      operator delete(v24[0]);
    std::string::basic_string[abi:ne180100]<0>(v24, "ios16::crop_resize");
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v26, (const void **)v24, (uint64_t)v24);
    if (SHIBYTE(v25) < 0)
      operator delete(v24[0]);
  }
LABEL_40:
  MIL::Conversion::OpConversionImpl::ConvertProgram(a1, a2, (uint64_t)&v26, a4);
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy((uint64_t)&v26, v27[0]);
}

void sub_1E060F628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,char a30,char *a31)
{
  if (a27 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy((uint64_t)&a30, a31);
  _Unwind_Resume(a1);
}

void MIL::Conversion::OpConversionImpl::TryConvertProgram(MIL::Conversion::OpConversionImpl *a1@<X0>, const MIL::IRProgram *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  MIL::Conversion::OpConversionImpl::ConvertProgram(a1, a2, a3, a4);
}

void sub_1E060F6D0(void *a1)
{
  MIL::Conversion::OpConversionImpl::TryConvertProgram(a1);
}

void MIL::Conversion::OpConversionImpl::TryConvertProgram(MIL::Conversion::OpConversionImpl *a1@<X0>, const MIL::IRProgram *a2@<X1>, const void **a3@<X2>, uint64_t *a4@<X8>)
{
  MIL::Conversion::OpConversionImpl::ConvertProgram(a1, a2, a3, a4);
}

void sub_1E060F6FC(void *a1)
{
  MIL::Conversion::OpConversionImpl::TryConvertProgram(a1);
}

uint64_t MIL::Conversion::OpConversionImpl::CanConvertProgram(MIL::Conversion::OpConversionImpl *this, const MIL::IRProgram *a2)
{
  uint64_t **v2;
  uint64_t v3;
  int v4;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD ***v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v2 = *(uint64_t ***)((*(uint64_t (**)(const MIL::IRProgram *))(*(_QWORD *)a2 + 72))(a2) + 16);
  if (!v2)
    return 1;
  while (1)
  {
    v3 = (*(uint64_t (**)(uint64_t *))(*v2[5] + 32))(v2[5]);
    v4 = *(char *)(v3 + 23);
    if (v4 < 0)
    {
      if (*(_QWORD *)(v3 + 8) != 11)
        goto LABEL_11;
      v3 = *(_QWORD *)v3;
    }
    else if (v4 != 11)
    {
      goto LABEL_11;
    }
    if (*(_QWORD *)v3 == 0x72745F3631736F69 && *(_QWORD *)(v3 + 3) == 0x6E696172745F3631)
      return 0;
LABEL_11:
    v6 = (*(uint64_t (**)(uint64_t *))(*v2[5] + 32))(v2[5]);
    v7 = *(char *)(v6 + 23);
    if (v7 < 0)
    {
      if (*(_QWORD *)(v6 + 8) != 11)
        goto LABEL_20;
      v6 = *(_QWORD *)v6;
    }
    else if (v7 != 11)
    {
      goto LABEL_20;
    }
    if (*(_QWORD *)v6 == 0x72745F3731736F69 && *(_QWORD *)(v6 + 3) == 0x6E696172745F3731)
      return 0;
LABEL_20:
    v9 = (*(uint64_t (**)(uint64_t *))(*v2[5] + 48))(v2[5]);
    v10 = (_QWORD ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 56))(v9);
    v11 = **v10;
    v12 = (*v10)[1];
    while (v11 != v12)
    {
      v13 = *v11;
      if ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v11 + 232))(*v11))
      {
        v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 232))(v13);
        v15 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
        if (v16 == 11 && *v15 == 0x72745F3631736F69 && *(_QWORD *)((char *)v15 + 3) == 0x6E696172745F3631)
          return 0;
        v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 232))(v13);
        v19 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
        if (v20 == 11 && *v19 == 0x72745F3731736F69 && *(_QWORD *)((char *)v19 + 3) == 0x6E696172745F3731)
          return 0;
      }
      v11 += 2;
    }
    v2 = (uint64_t **)*v2;
    if (!v2)
      return 1;
  }
}

_QWORD *std::function<void ()(MIL::Transform::ProgramTransformer &)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<void ()(MIL::Transform::ProgramTransformer &)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

uint64_t std::pair<std::string,std::set<std::string>>::~pair(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy(a1 + 24, *(char **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::set<std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::vector<std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::set<std::string>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::set<std::string>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::set<std::string>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::vector<std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::set<std::string>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1E060FAE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::set<std::string>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::set<std::string>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::set<std::string>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::set<std::string>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::set<std::string>>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::set<std::string>>>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  std::vector<std::set<std::string>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::vector<std::set<std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char **v2;
  char **v4;
  void *v5;
  char **v6;

  v1 = *a1;
  v2 = (char **)**a1;
  if (v2)
  {
    v4 = (char **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 3;
        std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy((uint64_t)(v4 - 3), *(v4 - 2));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *std::__tree<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::__map_value_compare<std::pair<std::string,std::set<std::string>>,std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::less<std::pair<std::string,std::set<std::string>>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>>>::__emplace_unique_key_args<std::pair<std::string,std::set<std::string>>,std::piecewise_construct_t const&,std::tuple<std::pair<std::string,std::set<std::string>>&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::__map_value_compare<std::pair<std::string,std::set<std::string>>,std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::less<std::pair<std::string,std::set<std::string>>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>>>::__find_equal<std::pair<std::string,std::set<std::string>>>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::__map_value_compare<std::pair<std::string,std::set<std::string>>,std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::less<std::pair<std::string,std::set<std::string>>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::pair<std::string,std::set<std::string>>&&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

_QWORD *std::__tree<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::__map_value_compare<std::pair<std::string,std::set<std::string>>,std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::less<std::pair<std::string,std::set<std::string>>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>>>::__find_equal<std::pair<std::string,std::set<std::string>>>(uint64_t a1, _QWORD *a2, const void **a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  const void **v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = (_QWORD *)v4;
        v9 = (const void **)(v4 + 32);
        if (!std::less<std::pair<std::string,std::set<std::string>>>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32)))break;
        v4 = *v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!std::less<std::pair<std::string,std::set<std::string>>>::operator()[abi:ne180100](v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

_QWORD *std::__tree<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::__map_value_compare<std::pair<std::string,std::set<std::string>>,std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::less<std::pair<std::string,std::set<std::string>>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::pair<std::string,std::set<std::string>>&&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *result;
  __int128 *v7;
  __int128 v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v5 = a1 + 8;
  result = operator new(0x70uLL);
  v7 = *a2;
  v8 = **a2;
  result[6] = *((_QWORD *)*a2 + 2);
  *((_OWORD *)result + 2) = v8;
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = 0;
  *(_QWORD *)v7 = 0;
  result[7] = *((_QWORD *)v7 + 3);
  v9 = v7 + 2;
  v10 = *((_QWORD *)v7 + 4);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v5;
  result[8] = v10;
  v11 = (char *)(result + 8);
  v12 = *((_QWORD *)v7 + 5);
  result[9] = v12;
  if (v12)
  {
    *(_QWORD *)(v10 + 16) = v11;
    *((_QWORD *)v7 + 3) = v9;
    *v9 = 0;
    *((_QWORD *)v7 + 5) = 0;
  }
  else
  {
    result[7] = v11;
  }
  result[13] = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t std::less<std::pair<std::string,std::set<std::string>>>::operator()[abi:ne180100](uint64_t a1, const void **a2, const void **a3)
{
  int v5;
  int v6;
  size_t v7;
  const void *v8;
  size_t v9;
  const void *v10;
  size_t v11;
  int v12;
  BOOL v13;
  int v15;
  BOOL v16;
  char v17;

  v5 = *((char *)a3 + 23);
  v6 = *((char *)a2 + 23);
  if (v6 >= 0)
    v7 = *((unsigned __int8 *)a2 + 23);
  else
    v7 = (size_t)a2[1];
  if (v6 >= 0)
    v8 = a2;
  else
    v8 = *a2;
  if (v5 >= 0)
    v9 = *((unsigned __int8 *)a3 + 23);
  else
    v9 = (size_t)a3[1];
  if (v5 >= 0)
    v10 = a3;
  else
    v10 = *a3;
  if (v9 >= v7)
    v11 = v7;
  else
    v11 = v9;
  v12 = memcmp(v8, v10, v11);
  v13 = v7 < v9;
  if (v12)
    v13 = v12 < 0;
  if (v13)
    return 1;
  v15 = memcmp(v10, v8, v11);
  v16 = v9 < v7;
  if (v15)
    v16 = v15 < 0;
  if (v16)
    return 0;
  else
    return std::__lexicographical_compare[abi:ne180100]<std::__less<void,void> &,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((const void **)a2[3], a2 + 4, (const void **)a3[3], (const void ***)a3 + 4, (uint64_t)&v17);
}

uint64_t std::__lexicographical_compare[abi:ne180100]<std::__less<void,void> &,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(const void **a1, const void **a2, const void **a3, const void ***a4, uint64_t a5)
{
  const void **v7;
  const void **v10;
  const void **v11;
  BOOL v12;
  const void **v13;
  const void ***v14;

  if (a3 == (const void **)a4)
    return 0;
  v7 = a3;
  while (a1 != a2 && !std::less<std::string>::operator()[abi:ne180100](a5, a1 + 4, v7 + 4))
  {
    if (!std::less<std::string>::operator()[abi:ne180100](a5, v7 + 4, a1 + 4))
    {
      v10 = (const void **)a1[1];
      v11 = a1;
      if (v10)
      {
        do
        {
          a1 = v10;
          v10 = (const void **)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          a1 = (const void **)v11[2];
          v12 = *a1 == v11;
          v11 = a1;
        }
        while (!v12);
      }
      v13 = (const void **)v7[1];
      if (v13)
      {
        do
        {
          v14 = (const void ***)v13;
          v13 = (const void **)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (const void ***)v7[2];
          v12 = *v14 == v7;
          v7 = (const void **)v14;
        }
        while (!v12);
      }
      v7 = (const void **)v14;
      if (v14 != a4)
        continue;
    }
    return 0;
  }
  return 1;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::pair<std::string,std::set<std::string>> const,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::pair<std::string,std::set<std::string>> const,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,0>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 48);
  v3 = *(_QWORD **)(a1 + 72);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy(a1 + 24, *(char **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

std::string *std::pair<std::string,std::set<std::string>>::pair[abi:ne180100]<true,0>(std::string *this, __int128 *a2, const void ***a3)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  std::set<std::string>::set[abi:ne180100]((uint64_t *)&this[1], a3);
  return this;
}

void sub_1E06100D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__value_func<void ()(MIL::Transform::ProgramTransformer &)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1E0610258(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t std::vector<std::set<std::string>>::__push_back_slow_path<std::set<std::string> const&>(uint64_t *a1, const void ***a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  uint64_t *v14;
  uint64_t *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (uint64_t *)&v10[24 * v4];
  v16 = &v10[24 * v9];
  std::set<std::string>::set[abi:ne180100](v14, a2);
  v15 = v14 + 3;
  std::vector<std::set<std::string>>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<std::set<std::string>>::~__split_buffer(&v13);
  return v11;
}

void sub_1E0610354(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::set<std::string>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::set<std::string>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::set<std::string>>,std::reverse_iterator<std::set<std::string>*>,std::reverse_iterator<std::set<std::string>*>,std::reverse_iterator<std::set<std::string>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::set<std::string>>,std::reverse_iterator<std::set<std::string>*>,std::reverse_iterator<std::set<std::string>*>,std::reverse_iterator<std::set<std::string>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];
  char v17;
  __int128 v18;
  __int128 v19;

  v7 = a7;
  *(_QWORD *)&v19 = a6;
  *((_QWORD *)&v19 + 1) = a7;
  v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  if (a3 == a5)
  {
    v14 = a6;
  }
  else
  {
    v8 = a3;
    do
    {
      v9 = *(_QWORD *)(v8 - 24);
      v8 -= 24;
      *(_QWORD *)(v7 - 24) = v9;
      v10 = (_QWORD *)(a3 - 16);
      v11 = *(_QWORD *)(a3 - 16);
      *(_QWORD *)(v7 - 16) = v11;
      v12 = v7 - 16;
      v13 = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(v7 - 8) = v13;
      if (v13)
      {
        *(_QWORD *)(v11 + 16) = v12;
        *(_QWORD *)(a3 - 24) = v10;
        *v10 = 0;
        *(_QWORD *)(a3 - 8) = 0;
      }
      else
      {
        *(_QWORD *)(v7 - 24) = v12;
      }
      v7 = *((_QWORD *)&v19 + 1) - 24;
      *((_QWORD *)&v19 + 1) -= 24;
      a3 = v8;
    }
    while (v8 != a5);
    v14 = v19;
  }
  v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::set<std::string>>,std::reverse_iterator<std::set<std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v14;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::set<std::string>>,std::reverse_iterator<std::set<std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::set<std::string>>,std::reverse_iterator<std::set<std::string>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::set<std::string>>,std::reverse_iterator<std::set<std::string>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy(v1, *(char **)(v1 + 8));
    v1 += 24;
  }
}

void **std::__split_buffer<std::set<std::string>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::set<std::string>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::set<std::string>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy(i - 24, *(char **)(i - 16));
  }
}

uint64_t MIL::Conversion::OpConversionImpl::PopulateProgramOps(uint64_t a1, uint64_t a2, const void **a3, uint64_t a4, uint64_t **a5)
{
  uint64_t v10;
  MIL::IROpset *Opset;
  _QWORD ***v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD **v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  std::string::size_type v22;
  const void *v23;
  _BYTE *p_dst;
  size_t v25;
  std::string *v26;
  const void *v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  const std::string::value_type *v32;
  const std::string::value_type *v33;
  int v34;
  const std::string::value_type *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  size_t size;
  std::string *v43;
  std::string *v44;
  uint64_t v45;
  MIL::IROpset *v46;
  uint64_t v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  const std::string::value_type *v51;
  const std::string::value_type *v52;
  int v53;
  const std::string::value_type *v54;
  std::string::size_type v55;
  std::string *v56;
  __int128 v57;
  _QWORD *v59;
  __int128 v60;
  std::string::size_type v61;
  std::string v62;
  void *__p[2];
  std::string::size_type v64;
  std::string __dst;
  _QWORD v66[6];

  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  Opset = (MIL::IROpset *)MIL::MILContext::GetOpset(v10);
  MIL::IROpset::GetReversedOperatorNamesMap(Opset, (uint64_t)v66);
  v12 = (_QWORD ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 56))(a4);
  v14 = **v12;
  v13 = (*v12)[1];
  v59 = v13;
  while (v14 != v13)
  {
    v15 = *v14;
    v16 = (_QWORD **)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v14 + 208))(*v14);
    v17 = (_QWORD *)**v16;
    v18 = (_QWORD *)(*v16)[1];
    while (v17 != v18)
    {
      MIL::Conversion::OpConversionImpl::PopulateProgramOps(a1, a2, a3, *v17, a5);
      v17 += 2;
    }
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 232))(v15))
    {
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 232))(v15);
      v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
      v22 = v21;
      if (v21 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v23 = (const void *)v20;
      if (v21 >= 0x17)
      {
        v40 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v21 | 7) != 0x17)
          v40 = v21 | 7;
        v41 = v40 + 1;
        p_dst = operator new(v40 + 1);
        __dst.__r_.__value_.__l.__size_ = v22;
        __dst.__r_.__value_.__r.__words[2] = v41 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v21;
        p_dst = &__dst;
        if (!v21)
        {
LABEL_35:
          p_dst[v22] = 0;
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          else
            size = __dst.__r_.__value_.__l.__size_;
          std::string::basic_string[abi:ne180100]((uint64_t)&v62, size + 2);
          if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v43 = &v62;
          else
            v43 = (std::string *)v62.__r_.__value_.__r.__words[0];
          if (size)
          {
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v44 = &__dst;
            else
              v44 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            memmove(v43, v44, size);
          }
          strcpy((char *)v43 + size, "::");
          v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
          v46 = (MIL::IROpset *)MIL::MILContext::GetOpset(v45);
          MIL::IROpset::GetReversedOperatorNamesMap(v46, (uint64_t)&v60);
          v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 64))(v15);
          v48 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 16))(v47);
          v49 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(&v60, v48);
          if (!v49)
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          v52 = (const std::string::value_type *)*((_QWORD *)v49 + 5);
          v50 = v49 + 40;
          v51 = v52;
          v53 = (char)v50[23];
          if (v53 >= 0)
            v54 = (const std::string::value_type *)v50;
          else
            v54 = v51;
          if (v53 >= 0)
            v55 = v50[23];
          else
            v55 = *((_QWORD *)v50 + 1);
          v56 = std::string::append(&v62, v54, v55);
          v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
          v64 = v56->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v57;
          v56->__r_.__value_.__l.__size_ = 0;
          v56->__r_.__value_.__r.__words[2] = 0;
          v56->__r_.__value_.__r.__words[0] = 0;
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(a5, (const void **)__p, (uint64_t)__p);
          if (SHIBYTE(v64) < 0)
            operator delete(__p[0]);
          std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v60);
          if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
          {
            v39 = (void *)v62.__r_.__value_.__r.__words[0];
            goto LABEL_57;
          }
          goto LABEL_58;
        }
      }
      memmove(p_dst, v23, v22);
      goto LABEL_35;
    }
    if (*((char *)a3 + 23) >= 0)
      v25 = *((unsigned __int8 *)a3 + 23);
    else
      v25 = (size_t)a3[1];
    std::string::basic_string[abi:ne180100]((uint64_t)&__dst, v25 + 2);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = &__dst;
    else
      v26 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if (v25)
    {
      if (*((char *)a3 + 23) >= 0)
        v27 = a3;
      else
        v27 = *a3;
      memmove(v26, v27, v25);
    }
    strcpy((char *)v26 + v25, "::");
    v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 64))(v15);
    v29 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
    v30 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v66, v29);
    if (!v30)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v33 = (const std::string::value_type *)*((_QWORD *)v30 + 5);
    v31 = v30 + 40;
    v32 = v33;
    v34 = (char)v31[23];
    if (v34 >= 0)
      v35 = (const std::string::value_type *)v31;
    else
      v35 = v32;
    if (v34 >= 0)
      v36 = v31[23];
    else
      v36 = *((_QWORD *)v31 + 1);
    v37 = std::string::append(&__dst, v35, v36);
    v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v61 = v37->__r_.__value_.__r.__words[2];
    v60 = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(a5, (const void **)&v60, (uint64_t)&v60);
    if (SHIBYTE(v61) < 0)
    {
      v39 = (void *)v60;
LABEL_57:
      operator delete(v39);
    }
LABEL_58:
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    v14 += 2;
    v13 = v59;
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v66);
}

void sub_1E061096C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void MIL::Conversion::OpConversionImpl::GetValidConversion(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  std::runtime_error *exception;
  std::string v17;
  __int128 *v18;
  __int128 *v19;
  char **v20;
  char *v21[2];

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v21[0] = 0;
  v21[1] = 0;
  v20 = v21;
  v5 = a2 + 1;
  v6 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      if (!std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__count_unique<std::string>(a3, (const void **)v6 + 4))
      {
        if (!std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__count_unique<std::string>((uint64_t)&v20, (const void **)v6 + 4)|| (v18 = (__int128 *)(v6 + 4), !*((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v20, (const void **)v6 + 4, (uint64_t)&std::piecewise_construct, &v18)+ 56)))
        {
          v18 = (__int128 *)(v6 + 4);
          *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v20, (const void **)v6 + 4, (uint64_t)&std::piecewise_construct, &v18)+ 56) = 0;
          MIL::Conversion::OpConversionImpl::GetConversionOrderReverse(a1, (const void **)v6 + 4, a3, (uint64_t **)&v20, (uint64_t *)&v18);
          if (v18 == v19)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            std::runtime_error::runtime_error(exception, &v17);
            __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          std::vector<std::function<void ()(MIL::Transform::ProgramTransformer &)>>::__insert_with_size[abi:ne180100]<std::move_iterator<std::__wrap_iter<std::function<void ()(MIL::Transform::ProgramTransformer &)>*>>,std::move_iterator<std::__wrap_iter<std::function<void ()(MIL::Transform::ProgramTransformer &)>*>>>(a4, (_QWORD *)a4[1], (uint64_t)v18, (uint64_t)v19, ((char *)v19 - (char *)v18) >> 5);
          v17.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
          std::vector<std::function<void ()(MIL::Transform::ProgramTransformer &)>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
        }
      }
      v9 = (_QWORD *)v6[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v6[2];
          v11 = *v10 == (_QWORD)v6;
          v6 = v10;
        }
        while (!v11);
      }
      v6 = v10;
    }
    while (v10 != v5);
    v13 = (_QWORD *)*a4;
    v12 = (_QWORD *)a4[1];
    v14 = v12 - 4;
    if (v13 != v12 && v14 > v13)
    {
      do
      {
        std::__function::__value_func<void ()(MIL::Transform::ProgramTransformer &)>::swap[abi:ne180100](v13, v14);
        v13 += 4;
        v14 -= 4;
      }
      while (v13 < v14);
    }
  }
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy((uint64_t)&v20, v21[0]);
}

void sub_1E0610BF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char *a20)
{
  void *v20;
  int v21;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
    {
LABEL_6:
      __p = &a16;
      std::vector<std::function<void ()(MIL::Transform::ProgramTransformer &)>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy((uint64_t)&a19, a20);
      std::vector<std::function<void ()(MIL::Transform::ProgramTransformer &)>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

void MIL::Conversion::OpConversionImpl::GetConversionOrderReverse(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t *v10;
  const void ***v11;
  const void **v12;
  const void **v13;
  const void ***v14;
  BOOL v15;
  uint64_t *v16;
  const void ***v17;
  std::string __p;
  char *v19[3];
  std::string *p_p;

  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&__p)+ 56) = 0;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  v10 = std::__tree<std::__value_type<std::string,std::vector<std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::set<std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 8), a2, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
  v11 = (const void ***)v10[7];
  if (v11 == (const void ***)v10[8])
  {
LABEL_17:
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    return;
  }
  v17 = (const void ***)v10[8];
LABEL_3:
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v12 = *v11;
  if (*v11 != (const void **)(v11 + 1))
  {
    do
    {
      if (!std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__count_unique<std::string>(a3, v12 + 4))
      {
        if (!std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__count_unique<std::string>((uint64_t)a4, v12 + 4)|| (p_p = (std::string *)(v12 + 4), !*((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, v12 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p)+ 56)))
        {
          MIL::Conversion::OpConversionImpl::GetConversionOrderReverse(&__p, a1, v12 + 4, a3, a4);
          if (__p.__r_.__value_.__r.__words[0] == __p.__r_.__value_.__l.__size_)
          {
            p_p = &__p;
            std::vector<std::function<void ()(MIL::Transform::ProgramTransformer &)>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a5;
            std::vector<std::function<void ()(MIL::Transform::ProgramTransformer &)>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
            v11 += 3;
            if (v11 == v17)
              goto LABEL_17;
            goto LABEL_3;
          }
          std::vector<std::function<void ()(MIL::Transform::ProgramTransformer &)>>::__insert_with_size[abi:ne180100]<std::move_iterator<std::__wrap_iter<std::function<void ()(MIL::Transform::ProgramTransformer &)>*>>,std::move_iterator<std::__wrap_iter<std::function<void ()(MIL::Transform::ProgramTransformer &)>*>>>(a5, (_QWORD *)a5[1], (uint64_t)__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 5);
          p_p = &__p;
          std::vector<std::function<void ()(MIL::Transform::ProgramTransformer &)>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
        }
      }
      v13 = (const void **)v12[1];
      if (v13)
      {
        do
        {
          v14 = (const void ***)v13;
          v13 = (const void **)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (const void ***)v12[2];
          v15 = *v14 == v12;
          v12 = (const void **)v14;
        }
        while (!v15);
      }
      v12 = (const void **)v14;
    }
    while (v14 != v11 + 1);
  }
  std::pair<std::string,std::set<std::string>>::pair[abi:ne180100]<true,0>(&__p, (__int128 *)a2, v11);
  p_p = &__p;
  v16 = std::__tree<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::__map_value_compare<std::pair<std::string,std::set<std::string>>,std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::less<std::pair<std::string,std::set<std::string>>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>>>::__emplace_unique_key_args<std::pair<std::string,std::set<std::string>>,std::piecewise_construct_t const&,std::tuple<std::pair<std::string,std::set<std::string>>&&>,std::tuple<>>((uint64_t **)(a1 + 32), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
  std::vector<std::function<void ()(MIL::Transform::ProgramTransformer &)>>::push_back[abi:ne180100](a5, (uint64_t)(v16 + 10));
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy((uint64_t)v19, v19[1]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  p_p = (std::string *)a2;
  *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p)+ 56) = 1;
}

void sub_1E0610EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::vector<std::function<void ()(MIL::Transform::ProgramTransformer &)>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[56] = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1E0611024(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,MIL::IRValueType const*>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::function<void ()(MIL::Transform::ProgramTransformer &)>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = (uint64_t)(v7 - *a1) >> 5;
    if ((unint64_t)(v10 + 1) >> 59)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v11 = v5 - *a1;
    v12 = v11 >> 4;
    if (v11 >> 4 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v13 = 0x7FFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v19 = v4;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<void ()(MIL::Transform::ProgramTransformer &)>>>(v4, v13);
    else
      v14 = 0;
    v15 = v14;
    v16 = &v14[32 * v10];
    v18 = &v14[32 * v13];
    std::__function::__value_func<std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v16, a2);
    v17 = v16 + 32;
    std::vector<std::function<void ()(MIL::Transform::ProgramTransformer &)>>::__swap_out_circular_buffer(a1, &v15);
    v9 = a1[1];
    result = (uint64_t)std::__split_buffer<std::function<void ()(MIL::Transform::ProgramTransformer &)>>::~__split_buffer(&v15);
  }
  else
  {
    result = std::__function::__value_func<std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__value_func[abi:ne180100](*(_QWORD *)(v4 - 8), a2);
    v9 = v7 + 32;
    a1[1] = v7 + 32;
  }
  a1[1] = v9;
  return result;
}

void sub_1E0611130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::function<void ()(MIL::Transform::ProgramTransformer &)>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::reverse_iterator<std::function<void ()(MIL::Transform::ProgramTransformer &)>*>,std::reverse_iterator<std::function<void ()(MIL::Transform::ProgramTransformer &)>*>,std::reverse_iterator<std::function<void ()(MIL::Transform::ProgramTransformer &)>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<void ()(MIL::Transform::ProgramTransformer &)>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::reverse_iterator<std::function<void ()(MIL::Transform::ProgramTransformer &)>*>,std::reverse_iterator<std::function<void ()(MIL::Transform::ProgramTransformer &)>*>,std::reverse_iterator<std::function<void ()(MIL::Transform::ProgramTransformer &)>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 32;
      std::__function::__value_func<void ()(MIL::Transform::ProgramTransformer &)>::__value_func[abi:ne180100](v7 - 32, v9);
      v7 = *((_QWORD *)&v15 + 1) - 32;
      *((_QWORD *)&v15 + 1) -= 32;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::reverse_iterator<std::function<void ()(MIL::Transform::ProgramTransformer &)>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::reverse_iterator<std::function<void ()(MIL::Transform::ProgramTransformer &)>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::reverse_iterator<std::function<void ()(MIL::Transform::ProgramTransformer &)>*>>::operator()[abi:ne180100]((_QWORD *)a1);
  return a1;
}

_QWORD *std::_AllocatorDestroyRangeReverse<std::allocator<std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::reverse_iterator<std::function<void ()(MIL::Transform::ProgramTransformer &)>*>>::operator()[abi:ne180100](_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = *(_QWORD **)(result[2] + 8);
  v2 = *(_QWORD **)(result[1] + 8);
  while (v1 != v2)
  {
    result = (_QWORD *)v1[3];
    if (v1 == result)
    {
      result = v1;
      v3 = 4;
    }
    else
    {
      if (!result)
        goto LABEL_8;
      v3 = 5;
    }
    result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
LABEL_8:
    v1 += 4;
  }
  return result;
}

void **std::__split_buffer<std::function<void ()(MIL::Transform::ProgramTransformer &)>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::function<void ()(MIL::Transform::ProgramTransformer &)>>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

_QWORD *std::__split_buffer<std::function<void ()(MIL::Transform::ProgramTransformer &)>>::clear[abi:ne180100](_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = (_QWORD *)result[1];
  v1 = (_QWORD *)result[2];
  if (v1 != v2)
  {
    v3 = result;
    while (1)
    {
      result = v1 - 4;
      v3[2] = v1 - 4;
      v4 = (_QWORD *)*(v1 - 1);
      if (v4 == result)
        break;
      if (v4)
      {
        result = v4;
        v5 = 5;
LABEL_7:
        (*(void (**)(void))(*result + 8 * v5))();
        result = (_QWORD *)v3[2];
      }
      v1 = result;
      if (result == v2)
        return result;
    }
    v5 = 4;
    goto LABEL_7;
  }
  return result;
}

_QWORD *std::vector<std::function<void ()(MIL::Transform::ProgramTransformer &)>>::__insert_with_size[abi:ne180100]<std::move_iterator<std::__wrap_iter<std::function<void ()(MIL::Transform::ProgramTransformer &)>*>>,std::move_iterator<std::__wrap_iter<std::function<void ()(MIL::Transform::ProgramTransformer &)>*>>>(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  void *v26[5];

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = a1[2];
    v9 = a1 + 2;
    v10 = v11;
    v12 = *(v9 - 1);
    if (a5 <= (uint64_t)(v11 - v12) >> 5)
    {
      v19 = v12 - (_QWORD)a2;
      v20 = (uint64_t)(v12 - (_QWORD)a2) >> 5;
      if (v20 >= a5)
      {
        v21 = a3 + 32 * a5;
      }
      else
      {
        v21 = a3 + 32 * v20;
        a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::move_iterator<std::__wrap_iter<std::function<void ()(MIL::Transform::ProgramTransformer &)>*>>,std::move_iterator<std::__wrap_iter<std::function<void ()(MIL::Transform::ProgramTransformer &)>*>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>*>((uint64_t)v9, v21, a4, *(v9 - 1));
        if (v19 < 1)
          return v5;
      }
      std::vector<std::function<void ()(MIL::Transform::ProgramTransformer &)>>::__move_range((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)&v5[4 * a5]);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::move_iterator<std::__wrap_iter<std::function<void ()(MIL::Transform::ProgramTransformer &)> *>>,std::move_iterator<std::__wrap_iter<std::function<void ()(MIL::Transform::ProgramTransformer &)> *>>,std::function<void ()(MIL::Transform::ProgramTransformer &)> *>((uint64_t)v26, v7, v21, v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 + ((uint64_t)(v12 - *a1) >> 5);
      if (v14 >> 59)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v15 = ((uint64_t)a2 - v13) >> 5;
      v16 = v10 - v13;
      if (v16 >> 4 > v14)
        v14 = v16 >> 4;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0)
        v17 = 0x7FFFFFFFFFFFFFFLL;
      else
        v17 = v14;
      v26[4] = v9;
      if (v17)
        v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<void ()(MIL::Transform::ProgramTransformer &)>>>((uint64_t)v9, v17);
      else
        v18 = 0;
      v22 = &v18[32 * v15];
      v26[0] = v18;
      v26[1] = v22;
      v26[3] = &v18[32 * v17];
      v23 = 32 * a5;
      v24 = &v22[32 * a5];
      do
      {
        v22 = (char *)(std::__function::__value_func<void ()(MIL::Transform::ProgramTransformer &)>::__value_func[abi:ne180100]((uint64_t)v22, v7)+ 32);
        v7 += 32;
        v23 -= 32;
      }
      while (v23);
      v26[2] = v24;
      v5 = (_QWORD *)std::vector<std::function<void ()(MIL::Transform::ProgramTransformer &)>>::__swap_out_circular_buffer(a1, v26, (uint64_t)v5);
      std::__split_buffer<std::function<void ()(MIL::Transform::ProgramTransformer &)>>::~__split_buffer(v26);
    }
  }
  return v5;
}

void sub_1E0611544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::function<void ()(MIL::Transform::ProgramTransformer &)>>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  char v13;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v10 = a2 + v6 - a4;
    v8 = v6;
    do
    {
      v11 = std::__function::__value_func<void ()(MIL::Transform::ProgramTransformer &)>::__value_func[abi:ne180100](v8, v10);
      v10 += 32;
      v8 = v11 + 32;
    }
    while (v10 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::function<void ()(MIL::Transform::ProgramTransformer &)> *,std::function<void ()(MIL::Transform::ProgramTransformer &)> *,std::function<void ()(MIL::Transform::ProgramTransformer &)> *>((uint64_t)&v13, a2, v7, v6);
}

uint64_t std::vector<std::function<void ()(MIL::Transform::ProgramTransformer &)>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::reverse_iterator<std::function<void ()(MIL::Transform::ProgramTransformer &)>*>,std::reverse_iterator<std::function<void ()(MIL::Transform::ProgramTransformer &)>*>,std::reverse_iterator<std::function<void ()(MIL::Transform::ProgramTransformer &)>*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::move_iterator<std::__wrap_iter<std::function<void ()(MIL::Transform::ProgramTransformer &)>*>>,std::move_iterator<std::__wrap_iter<std::function<void ()(MIL::Transform::ProgramTransformer &)>*>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>*>(v7, a3, a1[1], a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::move_iterator<std::__wrap_iter<std::function<void ()(MIL::Transform::ProgramTransformer &)>*>>,std::move_iterator<std::__wrap_iter<std::function<void ()(MIL::Transform::ProgramTransformer &)>*>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__function::__value_func<void ()(MIL::Transform::ProgramTransformer &)>::__value_func[abi:ne180100](v4, v6);
      v6 += 32;
      v4 = v11 + 32;
      v11 += 32;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>*>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>*>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = **(_QWORD **)(result + 16);
  v2 = **(_QWORD **)(result + 8);
  if (v1 != v2)
  {
    while (1)
    {
      v3 = v1 - 32;
      result = *(_QWORD *)(v1 - 8);
      if (v1 - 32 == result)
        break;
      if (result)
      {
        v4 = 5;
LABEL_6:
        result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v4))();
      }
      v1 = v3;
      if (v3 == v2)
        return result;
    }
    result = v1 - 32;
    v4 = 4;
    goto LABEL_6;
  }
  return result;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::function<void ()(MIL::Transform::ProgramTransformer &)> *,std::function<void ()(MIL::Transform::ProgramTransformer &)> *,std::function<void ()(MIL::Transform::ProgramTransformer &)> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = a4;
  v7 = (_QWORD *)(a4 - 32);
  v8 = a3;
  while (v8 != a2)
  {
    v8 -= 32;
    v4 -= 32;
    v9 = v7 - 4;
    std::__function::__value_func<std::string ()(MIL::IROperation const&)>::operator=[abi:ne180100](v7, v8);
    v7 = v9;
  }
  return a3;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::move_iterator<std::__wrap_iter<std::function<void ()(MIL::Transform::ProgramTransformer &)> *>>,std::move_iterator<std::__wrap_iter<std::function<void ()(MIL::Transform::ProgramTransformer &)> *>>,std::function<void ()(MIL::Transform::ProgramTransformer &)> *>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      std::__function::__value_func<std::string ()(MIL::IROperation const&)>::operator=[abi:ne180100](a4, v5);
      v5 += 32;
      a4 += 4;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void std::vector<std::function<void ()(MIL::Transform::ProgramTransformer &)>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (!v2)
    return;
  v4 = (char *)v1[1];
  v5 = **a1;
  if (v4 == v2)
    goto LABEL_10;
  do
  {
    v6 = v4 - 32;
    v7 = (char *)*((_QWORD *)v4 - 1);
    if (v4 - 32 == v7)
    {
      v7 = v4 - 32;
      v8 = 4;
    }
    else
    {
      if (!v7)
        goto LABEL_8;
      v8 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_8:
    v4 = v6;
  }
  while (v6 != v2);
  v5 = **a1;
LABEL_10:
  v1[1] = v2;
  operator delete(v5);
}

void std::__tree<std::__value_type<std::string,std::vector<std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::set<std::string>>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::vector<std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::set<std::string>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::vector<std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::set<std::string>>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::set<std::string>>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::__map_value_compare<std::pair<std::string,std::set<std::string>>,std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::less<std::pair<std::string,std::set<std::string>>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::__map_value_compare<std::pair<std::string,std::set<std::string>>,std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::less<std::pair<std::string,std::set<std::string>>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::__map_value_compare<std::pair<std::string,std::set<std::string>>,std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::less<std::pair<std::string,std::set<std::string>>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::pair<std::string,std::set<std::string>> const,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void *OUTLINED_FUNCTION_1_0(void *a1)
{
  return __cxa_get_exception_ptr(a1);
}

void OUTLINED_FUNCTION_2_0()
{
  JUMPOUT(0x1E0C01F74);
}

void OUTLINED_FUNCTION_3_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  _QWORD *v9;

  *v9 = 0;
  std::runtime_error::~runtime_error(&a9);
}

MIL::Matching::CompiledPattern *MIL::Matching::CompiledPattern::CompiledPattern(MIL::Matching::CompiledPattern *this, const MIL::Matching::Pattern *a2, MIL::MILContext *a3, MIL::MILContext *a4)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v12;
  uint64_t (**v13)(int, int, MIL::Matching::_anonymous_namespace_ *);
  __int128 v14;
  uint64_t v15;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v13 = off_1EA99AA98;
  v14 = 0uLL;
  v15 = 0;
  v5 = MIL::MatchingPrivate::PatternPrivate::CompilePattern(a2, (const MIL::Matching::Pattern *)&v13, a3, a4);
  v6 = (char *)operator new(0x38uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1EA99AB18;
  *(_OWORD *)(v6 + 24) = v14;
  v7 = v15;
  v15 = 0;
  v14 = 0uLL;
  *((_QWORD *)v6 + 5) = v7;
  *((_QWORD *)v6 + 6) = v5;
  *(_QWORD *)&v12 = v6 + 24;
  *((_QWORD *)&v12 + 1) = v6;
  std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]((uint64_t)this, &v12);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = off_1EA99AA98;
  *(_QWORD *)&v12 = &v14;
  std::vector<std::unique_ptr<MIL::Pass>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&v13);
  return this;
}

void sub_1E0611ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::InstructionBuilderImpl::~InstructionBuilderImpl(_anonymous_namespace_::InstructionBuilderImpl *this)
{
  void **v2;

  *(_QWORD *)this = off_1EA99AA98;
  v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<MIL::Pass>>::__destroy_vector::operator()[abi:ne180100](&v2);
  UnknownLocationImpl::~UnknownLocationImpl(this);
}

{
  void **v2;

  *(_QWORD *)this = off_1EA99AA98;
  v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<MIL::Pass>>::__destroy_vector::operator()[abi:ne180100](&v2);
  UnknownLocationImpl::~UnknownLocationImpl(this);
  MEMORY[0x1E0C023A0]();
}

_QWORD *MIL::Matching::CompiledPattern::CompiledPattern(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a2[1];
  *result = *a2;
  result[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a2[1];
  *result = *a2;
  result[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

_QWORD *MIL::Matching::CompiledPattern::operator=(_QWORD *a1, uint64_t *a2)
{
  std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](a1, a2);
  return a1;
}

uint64_t MIL::MatchingPrivate::CompiledPatternPrivate::GetFirstInstruction(MIL::MatchingPrivate::CompiledPatternPrivate *this, const MIL::Matching::CompiledPattern *a2)
{
  return *(_QWORD *)(*(_QWORD *)this + 24);
}

uint64_t `anonymous namespace'::InstructionBuilderImpl::CreateOperationPredicate(_QWORD *a1, uint64_t a2, MIL::Matching::_anonymous_namespace_ *this)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  MIL::Matching::CreateOperationPredicateInstruction(this, a2, &v7);
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return v4;
}

void sub_1E0611C28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::InstructionBuilderImpl::CreatePushToken(_QWORD *a1, uint64_t *a2, MIL::Matching::_anonymous_namespace_ *this)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  MIL::Matching::CreatePushTokenInstruction(this, a2, &v7);
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return v4;
}

void sub_1E0611CAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::InstructionBuilderImpl::CreateSetEdgePredicate(_QWORD *a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<BOOL ()(MIL::Builder::DataDependency const&)>::__value_func[abi:ne180100]((uint64_t)v11, a2);
  MIL::Matching::CreateSetEdgePredicateInstruction((uint64_t)v11, a3, &v10);
  v6 = v10;
  v10 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = v12;
  if (v12 == v11)
  {
    v8 = 4;
    v7 = v11;
    goto LABEL_7;
  }
  if (v12)
  {
    v8 = 5;
LABEL_7:
    (*(void (**)(_QWORD *))(*v7 + 8 * v8))(v7);
  }
  return v5;
}

void sub_1E0611D98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_8;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_8:
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::InstructionBuilderImpl::CreateAdvanceCursorForward(_anonymous_namespace_::InstructionBuilderImpl *this, const MIL::Matching::Instruction *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  MIL::Matching::CreateAdvanceCursorForwardInstruction(a2, a2, &v6);
  v4 = v6;
  v6 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return v3;
}

void sub_1E0611E50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::InstructionBuilderImpl::CreateSplit(_QWORD *a1, const MIL::Matching::Instruction *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v7;
  uint64_t v8;

  *(_OWORD *)__p = *(_OWORD *)a2;
  v7 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  MIL::Matching::CreateSplitInstruction((void ***)__p, a2, &v8);
  v4 = v8;
  v8 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v3;
}

void sub_1E0611EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *`anonymous namespace'::InstructionBuilderImpl::SetSplitAlternative(_anonymous_namespace_::InstructionBuilderImpl *this, MIL::Matching::Instruction *a2, MIL::Matching::Instruction *a3, const MIL::Matching::Instruction *a4)
{
  return MIL::Matching::SetSplitInstructionAlternative(a2, (unint64_t)a3, a4, a4);
}

uint64_t `anonymous namespace'::InstructionBuilderImpl::CreateReturnState(_anonymous_namespace_::InstructionBuilderImpl *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  MIL::Matching::CreateReturnStateInstruction(&v5);
  v3 = v5;
  v5 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return v2;
}

void sub_1E0611F9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::InstructionBuilderImpl::CreatePrepareForParallelForward(_anonymous_namespace_::InstructionBuilderImpl *this, const MIL::Matching::Instruction *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  MIL::Matching::CreatePrepareForParallelForwardInstruction(a2, a2, &v6);
  v4 = v6;
  v6 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return v3;
}

void sub_1E061201C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::InstructionBuilderImpl::CreateParallelForward(_anonymous_namespace_::InstructionBuilderImpl *this, const MIL::Matching::Instruction *a2, const MIL::Matching::Instruction *a3, const MIL::Matching::Instruction *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  MIL::Matching::CreateParallelForwardInstruction(a2, a3, a4, &v8);
  v6 = v8;
  v8 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return v5;
}

void sub_1E06120A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::InstructionBuilderImpl::Add(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int64x2_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  int64x2_t v23;
  char *v24;
  uint64_t v26;
  int64x2_t v27;
  char *v28;
  uint64_t v29;

  v6 = a1[3];
  v4 = (uint64_t)(a1 + 3);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v10 = (int64x2_t *)(v4 - 16);
    v11 = *(_QWORD *)(v4 - 16);
    v12 = ((uint64_t)v7 - v11) >> 3;
    if ((unint64_t)(v12 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v13 = v5 - v11;
    v14 = v13 >> 2;
    if (v13 >> 2 <= (unint64_t)(v12 + 1))
      v14 = v12 + 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    v29 = v4;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v4, v15);
    else
      v16 = 0;
    v17 = &v16[8 * v12];
    v18 = &v16[8 * v15];
    v28 = v18;
    v19 = *a2;
    *a2 = 0;
    *(_QWORD *)v17 = v19;
    v9 = v17 + 8;
    v27.i64[1] = (uint64_t)(v17 + 8);
    v21 = (_QWORD *)a1[1];
    v20 = (_QWORD *)a1[2];
    if (v20 == v21)
    {
      v23 = vdupq_n_s64((unint64_t)v20);
    }
    else
    {
      do
      {
        v22 = *--v20;
        *v20 = 0;
        *((_QWORD *)v17 - 1) = v22;
        v17 -= 8;
      }
      while (v20 != v21);
      v23 = *v10;
      v9 = (_QWORD *)v27.i64[1];
      v18 = v28;
    }
    a1[1] = v17;
    a1[2] = v9;
    v27 = v23;
    v24 = (char *)a1[3];
    a1[3] = v18;
    v28 = v24;
    v26 = v23.i64[0];
    std::__split_buffer<std::unique_ptr<MIL::Pass>>::~__split_buffer((uint64_t)&v26);
  }
  else
  {
    v8 = *a2;
    *a2 = 0;
    *v7 = v8;
    v9 = v7 + 1;
  }
  a1[2] = v9;
  return *(v9 - 1);
}

uint64_t std::__function::__value_func<BOOL ()(MIL::Builder::DataDependency const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void std::__shared_ptr_emplace<MIL::Matching::CompiledPattern::CompiledPatternImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA99AB18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIL::Matching::CompiledPattern::CompiledPatternImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA99AB18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E0C023A0);
}

void std::__shared_ptr_emplace<MIL::Matching::CompiledPattern::CompiledPatternImpl>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::unique_ptr<MIL::Pass>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

_QWORD *MIL::Edge::Edge(_QWORD *this)
{
  *this = off_1EA99AB68;
  return this;
}

uint64_t MIL::Edge::Make@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)result = &off_1EA99AC58;
  *(_DWORD *)(result + 8) = a1;
  *(_DWORD *)(result + 12) = a2;
  *(_QWORD *)(result + 16) = a3;
  *(_QWORD *)(result + 24) = a4;
  *a5 = result;
  return result;
}

_QWORD *MIL::EdgeIndexes::EdgeIndexes(_QWORD *this)
{
  *this = off_1EA99ABB0;
  return this;
}

void MIL::EdgeIndexesImpl::~EdgeIndexesImpl(MIL::EdgeIndexesImpl *this)
{
  char *v2;

  *(_QWORD *)this = &off_1EA99ABE8;
  v2 = (char *)this + 8;
  std::__hash_table<std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,std::__unordered_map_hasher<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,MIL::ConstReferenceWrapperHasher<std::string>,MIL::ConstReferenceWrapperEq<std::string>,true>,std::__unordered_map_equal<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,MIL::ConstReferenceWrapperEq<std::string>,MIL::ConstReferenceWrapperHasher<std::string>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>>>::~__hash_table((uint64_t)this + 88);
  std::__hash_table<std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>>>::~__hash_table((uint64_t)this + 48);
  std::__hash_table<std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::__unordered_map_hasher<MIL::ParameterSpec,std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::hash<MIL::ParameterSpec>,std::equal_to<MIL::ParameterSpec>,true>,std::__unordered_map_equal<MIL::ParameterSpec,std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::equal_to<MIL::ParameterSpec>,std::hash<MIL::ParameterSpec>,true>,std::allocator<std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>>>::~__hash_table((uint64_t)v2);
}

{
  MIL::EdgeIndexesImpl::~EdgeIndexesImpl(this);
  JUMPOUT(0x1E0C023A0);
}

uint64_t MIL::EdgeIndexes::BuildForBlock@<X0>(MIL::EdgeIndexes *this@<X0>, const MIL::IRBlock *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  MIL::IRNamedValueType **v4;
  MIL::IRNamedValueType **v5;
  uint64_t ***v6;
  uint64_t *v7;
  unsigned int v8;
  _QWORD *v9;
  _QWORD *v10;
  MIL::IRArgument **v11;
  MIL::IRArgument **v12;
  _QWORD *v13;
  uint64_t v14;
  const void ***v15;
  int v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  _QWORD *v20;
  _QWORD *v21;
  int64x2_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  _QWORD *v31;
  _QWORD *v32;
  int64x2_t *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t *v45;
  _QWORD *v46;
  _QWORD *v47;
  char *v48;
  __int128 v49;
  int64x2_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t *v57;
  _QWORD *v58;
  _QWORD *v59;
  char *v60;
  __int128 v61;
  int64x2_t v62;
  std::__shared_weak_count *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *size;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  _QWORD *v77;
  _QWORD *v78;
  BOOL v79;
  uint64_t ***v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t v83;
  MIL::IRNamedValueType **v84;
  MIL::IRNamedValueType **v85;
  char v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  const void ***v90;
  int v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  _QWORD *v95;
  _QWORD *v96;
  int64x2_t *v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t *v101;
  _QWORD *v102;
  std::__shared_weak_count_vtbl *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  _QWORD *v106;
  _QWORD *v107;
  int64x2_t *v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  std::__shared_weak_count_vtbl **v112;
  _QWORD *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t *v120;
  _QWORD *v121;
  _QWORD *v122;
  char *v123;
  __int128 v124;
  int64x2_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  char *v130;
  uint64_t v131;
  char *v132;
  _QWORD *v133;
  _QWORD *v134;
  char *v135;
  __int128 v136;
  int64x2_t v137;
  std::__shared_weak_count *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  unint64_t *v151;
  _QWORD *v152;
  _QWORD *v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  _QWORD *v159;
  _QWORD *v160;
  std::logic_error *v161;
  std::runtime_error *exception;
  _QWORD *v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  std::logic_error *v168;
  uint64_t *v171;
  uint64_t *v172;
  uint64_t v173;
  _QWORD *v174;
  char *v175;
  unsigned int v176;
  std::string v177;
  uint64_t *Name;
  int64x2_t v179;
  std::__shared_weak_count *v180;
  _QWORD *v181;
  _QWORD *v182;
  _QWORD *v183;
  uint64_t v184;
  _QWORD v185[4];
  int v186;
  uint64_t v187[4];
  int v188;
  uint64_t v189[4];
  int v190;
  uint64_t v191[4];
  int v192;

  memset(v191, 0, sizeof(v191));
  v192 = 1065353216;
  memset(v189, 0, sizeof(v189));
  v190 = 1065353216;
  memset(v187, 0, sizeof(v187));
  v188 = 1065353216;
  memset(v185, 0, sizeof(v185));
  v186 = 1065353216;
  v3 = (*(uint64_t (**)(MIL::EdgeIndexes *, const MIL::IRBlock *))(*(_QWORD *)this + 40))(this, a2);
  v4 = *(MIL::IRNamedValueType ***)v3;
  v5 = *(MIL::IRNamedValueType ***)(v3 + 8);
  if (*(MIL::IRNamedValueType ***)v3 != v5)
  {
    do
    {
      Name = (uint64_t *)MIL::IRNamedValueType::GetName(*v4);
      v179.i32[0] = -1;
      std::__hash_table<std::__hash_value_type<std::reference_wrapper<std::string const>,int>,std::__unordered_map_hasher<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,int>,MIL::ConstReferenceWrapperHasher<std::string>,MIL::ConstReferenceWrapperEq<std::string>,true>,std::__unordered_map_equal<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,int>,MIL::ConstReferenceWrapperEq<std::string>,MIL::ConstReferenceWrapperHasher<std::string>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<std::string const>,int>>>::__emplace_unique_key_args<std::reference_wrapper<std::string const>,std::pair<std::reference_wrapper<std::string const> const,int>>((uint64_t)v185, (uint64_t *)&Name, &Name);
      v4 += 2;
    }
    while (v4 != v5);
  }
  v6 = (uint64_t ***)(*(uint64_t (**)(MIL::EdgeIndexes *))(*(_QWORD *)this + 56))(this);
  v7 = **v6;
  v171 = (*v6)[1];
  if (v7 != v171)
  {
    v8 = 0;
    v175 = (char *)this + 64;
    while (1)
    {
      v172 = v7;
      v173 = *v7;
      v9 = (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)*v7 + 160))();
      v10 = (_QWORD *)*v9;
      v176 = v8;
      v174 = v9 + 1;
      if ((_QWORD *)*v9 != v9 + 1)
        break;
LABEL_73:
      v80 = (uint64_t ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v173 + 208))(v173);
      v81 = **v80;
      v82 = (*v80)[1];
      while (v81 != v82)
      {
        v81 += 2;
      }
      v83 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v173 + 176))(v173);
      v84 = *(MIL::IRNamedValueType ***)v83;
      v85 = *(MIL::IRNamedValueType ***)(v83 + 8);
      while (v84 != v85)
      {
        Name = (uint64_t *)MIL::IRNamedValueType::GetName(*v84);
        v179.i32[0] = v8;
        std::__hash_table<std::__hash_value_type<std::reference_wrapper<std::string const>,int>,std::__unordered_map_hasher<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,int>,MIL::ConstReferenceWrapperHasher<std::string>,MIL::ConstReferenceWrapperEq<std::string>,true>,std::__unordered_map_equal<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,int>,MIL::ConstReferenceWrapperEq<std::string>,MIL::ConstReferenceWrapperHasher<std::string>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<std::string const>,int>>>::__emplace_unique_key_args<std::reference_wrapper<std::string const>,std::pair<std::reference_wrapper<std::string const> const,int>>((uint64_t)v185, (uint64_t *)&Name, &Name);
        if ((v86 & 1) == 0)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Two first appears at inserted for the same output!");
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v84 += 2;
      }
      ++v8;
      v7 = v172 + 2;
      if (v172 + 2 == v171)
        goto LABEL_81;
    }
    while (1)
    {
      v12 = (MIL::IRArgument **)v10[7];
      v11 = (MIL::IRArgument **)v10[8];
      if (v12 != v11)
        break;
LABEL_67:
      v77 = (_QWORD *)v10[1];
      if (v77)
      {
        do
        {
          v78 = v77;
          v77 = (_QWORD *)*v77;
        }
        while (v77);
      }
      else
      {
        do
        {
          v78 = (_QWORD *)v10[2];
          v79 = *v78 == (_QWORD)v10;
          v10 = v78;
        }
        while (!v79);
      }
      v10 = v78;
      if (v78 == v174)
        goto LABEL_73;
    }
    v13 = v10 + 4;
    while (1)
    {
      if (((*(uint64_t (**)(MIL::IRArgument *))(*(_QWORD *)*v12 + 24))(*v12) & 1) == 0)
      {
        v14 = MIL::IRArgument::GetName(*v12);
        Name = (uint64_t *)v14;
        v15 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<std::string const>,int>,std::__unordered_map_hasher<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,int>,MIL::ConstReferenceWrapperHasher<std::string>,MIL::ConstReferenceWrapperEq<std::string>,true>,std::__unordered_map_equal<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,int>,MIL::ConstReferenceWrapperEq<std::string>,MIL::ConstReferenceWrapperHasher<std::string>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<std::string const>,int>>>::find<std::reference_wrapper<std::string const>>(v185, (uint64_t *)&Name);
        if (v15)
        {
          v16 = *((_DWORD *)v15 + 6);
          v17 = operator new();
          *(_QWORD *)v17 = &off_1EA99AC58;
          *(_DWORD *)(v17 + 8) = v16;
          *(_DWORD *)(v17 + 12) = v8;
          *(_QWORD *)(v17 + 16) = v13;
          *(_QWORD *)(v17 + 24) = v14;
          v177.__r_.__value_.__r.__words[0] = v17;
          v18 = (std::__shared_weak_count *)operator new();
          v18->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v18->__shared_owners_;
          v18->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ACB8;
          v18->__shared_weak_owners_ = 0;
          v18[1].__vftable = (std::__shared_weak_count_vtbl *)v17;
          v177.__r_.__value_.__l.__size_ = (std::string::size_type)v18;
          v184 = v14;
          Name = &v184;
          v20 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,std::__unordered_map_hasher<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,MIL::ConstReferenceWrapperHasher<std::string>,MIL::ConstReferenceWrapperEq<std::string>,true>,std::__unordered_map_equal<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,MIL::ConstReferenceWrapperEq<std::string>,MIL::ConstReferenceWrapperHasher<std::string>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>>>::__emplace_unique_key_args<std::reference_wrapper<std::string const>,std::piecewise_construct_t const&,std::tuple<std::reference_wrapper<std::string const>&&>,std::tuple<>>((uint64_t)v187, &v184, (uint64_t)&std::piecewise_construct, &Name);
          v21 = v20;
          v22 = (int64x2_t *)(v20 + 3);
          v182 = (_QWORD *)v17;
          v183 = &v18->__vftable;
          do
            v23 = __ldxr(p_shared_owners);
          while (__stxr(v23 + 1, p_shared_owners));
          v24 = (uint64_t)(v20 + 5);
          v25 = v21[5];
          v26 = (uint64_t *)v21[4];
          if ((unint64_t)v26 >= v25)
          {
            v39 = ((uint64_t)v26 - v22->i64[0]) >> 4;
            v40 = v39 + 1;
            if ((unint64_t)(v39 + 1) >> 60)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v41 = v25 - v22->i64[0];
            if (v41 >> 3 > v40)
              v40 = v41 >> 3;
            if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0)
              v42 = 0xFFFFFFFFFFFFFFFLL;
            else
              v42 = v40;
            v181 = v21 + 5;
            v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>(v24, v42);
            v45 = (uint64_t *)&v43[16 * v39];
            *v45 = v17;
            v45[1] = (uint64_t)v18;
            v47 = (_QWORD *)v21[3];
            v46 = (_QWORD *)v21[4];
            if (v46 == v47)
            {
              v50 = vdupq_n_s64((unint64_t)v46);
              v48 = &v43[16 * v39];
              v8 = v176;
            }
            else
            {
              v48 = &v43[16 * v39];
              v8 = v176;
              do
              {
                v49 = *((_OWORD *)v46 - 1);
                v46 -= 2;
                *((_OWORD *)v48 - 1) = v49;
                v48 -= 16;
                *v46 = 0;
                v46[1] = 0;
              }
              while (v46 != v47);
              v50 = *v22;
            }
            v27 = v45 + 2;
            v21[3] = v48;
            v21[4] = v45 + 2;
            v179 = v50;
            v63 = (std::__shared_weak_count *)v21[5];
            v21[5] = &v43[16 * v44];
            v180 = v63;
            Name = (uint64_t *)v50.i64[0];
            std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Name);
          }
          else
          {
            *v26 = v17;
            v26[1] = (uint64_t)v18;
            v27 = v26 + 2;
          }
          v21[4] = v27;
          LODWORD(Name) = v8;
          v179.i64[0] = (uint64_t)(v10 + 4);
          v179.i64[1] = v17;
          v180 = v18;
          do
            v64 = __ldxr(p_shared_owners);
          while (__stxr(v64 + 1, p_shared_owners));
          std::__hash_table<std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::__unordered_map_hasher<MIL::ParameterSpec,std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::hash<MIL::ParameterSpec>,std::equal_to<MIL::ParameterSpec>,true>,std::__unordered_map_equal<MIL::ParameterSpec,std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::equal_to<MIL::ParameterSpec>,std::hash<MIL::ParameterSpec>,true>,std::allocator<std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>>>::__emplace_unique_key_args<MIL::ParameterSpec,std::pair<MIL::ParameterSpec const,std::shared_ptr<MIL::Edge const>>>((uint64_t)v191, (int *)&Name, (uint64_t)&Name);
          v65 = v180;
          if (v180)
          {
            v66 = (unint64_t *)&v180->__shared_owners_;
            do
              v67 = __ldaxr(v66);
            while (__stlxr(v67 - 1, v66));
            if (!v67)
            {
              ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
              std::__shared_weak_count::__release_weak(v65);
            }
          }
          size = (std::__shared_weak_count *)v177.__r_.__value_.__l.__size_;
          if (!v177.__r_.__value_.__l.__size_)
            goto LABEL_66;
          v69 = (unint64_t *)(v177.__r_.__value_.__l.__size_ + 8);
          do
            v70 = __ldaxr(v69);
          while (__stlxr(v70 - 1, v69));
        }
        else
        {
          if (!(*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)v175 + 24))(v175, v14, 1))
          {
            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&Name);
            v154 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&Name, (uint64_t)"Program parameter '", 19);
            v155 = *(char *)(v14 + 23);
            if (v155 >= 0)
              v156 = v14;
            else
              v156 = *(_QWORD *)v14;
            if (v155 >= 0)
              v157 = *(unsigned __int8 *)(v14 + 23);
            else
              v157 = *(_QWORD *)(v14 + 8);
            v158 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v154, v156, v157);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v158, (uint64_t)"' from operation ", 17);
            v159 = (_QWORD *)std::ostream::operator<<();
            v160 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v159, (uint64_t)" does not resolve. ", 19);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v160, (uint64_t)"Are the operations topologically sorted?", 40);
            v161 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::stringbuf::str();
            std::logic_error::logic_error(v161, &v177);
            v161->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
            __cxa_throw(v161, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
          }
          v28 = operator new();
          *(_QWORD *)v28 = &off_1EA99AC58;
          *(_DWORD *)(v28 + 8) = -1;
          *(_DWORD *)(v28 + 12) = v8;
          *(_QWORD *)(v28 + 16) = v13;
          *(_QWORD *)(v28 + 24) = v14;
          v177.__r_.__value_.__r.__words[0] = v28;
          v29 = (std::__shared_weak_count *)operator new();
          v29->__shared_owners_ = 0;
          v30 = (unint64_t *)&v29->__shared_owners_;
          v29->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ACB8;
          v29->__shared_weak_owners_ = 0;
          v29[1].__vftable = (std::__shared_weak_count_vtbl *)v28;
          v177.__r_.__value_.__l.__size_ = (std::string::size_type)v29;
          v184 = v14;
          Name = &v184;
          v31 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,std::__unordered_map_hasher<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,MIL::ConstReferenceWrapperHasher<std::string>,MIL::ConstReferenceWrapperEq<std::string>,true>,std::__unordered_map_equal<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,MIL::ConstReferenceWrapperEq<std::string>,MIL::ConstReferenceWrapperHasher<std::string>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>>>::__emplace_unique_key_args<std::reference_wrapper<std::string const>,std::piecewise_construct_t const&,std::tuple<std::reference_wrapper<std::string const>&&>,std::tuple<>>((uint64_t)v187, &v184, (uint64_t)&std::piecewise_construct, &Name);
          v32 = v31;
          v33 = (int64x2_t *)(v31 + 3);
          v182 = (_QWORD *)v28;
          v183 = &v29->__vftable;
          do
            v34 = __ldxr(v30);
          while (__stxr(v34 + 1, v30));
          v35 = (uint64_t)(v31 + 5);
          v36 = v32[5];
          v37 = (uint64_t *)v32[4];
          if ((unint64_t)v37 >= v36)
          {
            v51 = ((uint64_t)v37 - v33->i64[0]) >> 4;
            v52 = v51 + 1;
            if ((unint64_t)(v51 + 1) >> 60)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v53 = v36 - v33->i64[0];
            if (v53 >> 3 > v52)
              v52 = v53 >> 3;
            if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF0)
              v54 = 0xFFFFFFFFFFFFFFFLL;
            else
              v54 = v52;
            v181 = v32 + 5;
            v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>(v35, v54);
            v57 = (uint64_t *)&v55[16 * v51];
            *v57 = v28;
            v57[1] = (uint64_t)v29;
            v59 = (_QWORD *)v32[3];
            v58 = (_QWORD *)v32[4];
            if (v58 == v59)
            {
              v62 = vdupq_n_s64((unint64_t)v58);
              v60 = &v55[16 * v51];
              v8 = v176;
            }
            else
            {
              v60 = &v55[16 * v51];
              v8 = v176;
              do
              {
                v61 = *((_OWORD *)v58 - 1);
                v58 -= 2;
                *((_OWORD *)v60 - 1) = v61;
                v60 -= 16;
                *v58 = 0;
                v58[1] = 0;
              }
              while (v58 != v59);
              v62 = *v33;
            }
            v38 = v57 + 2;
            v32[3] = v60;
            v32[4] = v57 + 2;
            v179 = v62;
            v71 = (std::__shared_weak_count *)v32[5];
            v32[5] = &v55[16 * v56];
            v180 = v71;
            Name = (uint64_t *)v62.i64[0];
            std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Name);
          }
          else
          {
            *v37 = v28;
            v37[1] = (uint64_t)v29;
            v38 = v37 + 2;
          }
          v32[4] = v38;
          LODWORD(Name) = v8;
          v179.i64[0] = (uint64_t)(v10 + 4);
          v179.i64[1] = v28;
          v180 = v29;
          do
            v72 = __ldxr(v30);
          while (__stxr(v72 + 1, v30));
          std::__hash_table<std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::__unordered_map_hasher<MIL::ParameterSpec,std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::hash<MIL::ParameterSpec>,std::equal_to<MIL::ParameterSpec>,true>,std::__unordered_map_equal<MIL::ParameterSpec,std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::equal_to<MIL::ParameterSpec>,std::hash<MIL::ParameterSpec>,true>,std::allocator<std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>>>::__emplace_unique_key_args<MIL::ParameterSpec,std::pair<MIL::ParameterSpec const,std::shared_ptr<MIL::Edge const>>>((uint64_t)v191, (int *)&Name, (uint64_t)&Name);
          v73 = v180;
          if (v180)
          {
            v74 = (unint64_t *)&v180->__shared_owners_;
            do
              v75 = __ldaxr(v74);
            while (__stlxr(v75 - 1, v74));
            if (!v75)
            {
              ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
              std::__shared_weak_count::__release_weak(v73);
            }
          }
          size = (std::__shared_weak_count *)v177.__r_.__value_.__l.__size_;
          if (!v177.__r_.__value_.__l.__size_)
            goto LABEL_66;
          v76 = (unint64_t *)(v177.__r_.__value_.__l.__size_ + 8);
          do
            v70 = __ldaxr(v76);
          while (__stlxr(v70 - 1, v76));
        }
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
LABEL_66:
      v12 += 2;
      if (v12 == v11)
        goto LABEL_67;
    }
  }
LABEL_81:
  v87 = (uint64_t *)(*(uint64_t (**)(MIL::EdgeIndexes *))(*(_QWORD *)this + 88))(this);
  v89 = *v87;
  v88 = v87[1];
  if (*v87 != v88)
  {
    do
    {
      Name = (uint64_t *)v89;
      v90 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<std::string const>,int>,std::__unordered_map_hasher<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,int>,MIL::ConstReferenceWrapperHasher<std::string>,MIL::ConstReferenceWrapperEq<std::string>,true>,std::__unordered_map_equal<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,int>,MIL::ConstReferenceWrapperEq<std::string>,MIL::ConstReferenceWrapperHasher<std::string>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<std::string const>,int>>>::find<std::reference_wrapper<std::string const>>(v185, (uint64_t *)&Name);
      if (v90)
      {
        v91 = *((_DWORD *)v90 + 6);
        v92 = operator new();
        *(_QWORD *)v92 = &off_1EA99AC58;
        *(_DWORD *)(v92 + 8) = v91;
        *(_DWORD *)(v92 + 12) = 0x7FFFFFFF;
        *(_QWORD *)(v92 + 16) = v89;
        *(_QWORD *)(v92 + 24) = v89;
        v177.__r_.__value_.__r.__words[0] = v92;
        v93 = (std::__shared_weak_count *)operator new();
        v93->__shared_owners_ = 0;
        v94 = (unint64_t *)&v93->__shared_owners_;
        v93->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ACB8;
        v93->__shared_weak_owners_ = 0;
        v93[1].__vftable = (std::__shared_weak_count_vtbl *)v92;
        v177.__r_.__value_.__l.__size_ = (std::string::size_type)v93;
        v184 = v89;
        Name = &v184;
        v95 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,std::__unordered_map_hasher<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,MIL::ConstReferenceWrapperHasher<std::string>,MIL::ConstReferenceWrapperEq<std::string>,true>,std::__unordered_map_equal<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,MIL::ConstReferenceWrapperEq<std::string>,MIL::ConstReferenceWrapperHasher<std::string>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>>>::__emplace_unique_key_args<std::reference_wrapper<std::string const>,std::piecewise_construct_t const&,std::tuple<std::reference_wrapper<std::string const>&&>,std::tuple<>>((uint64_t)v187, &v184, (uint64_t)&std::piecewise_construct, &Name);
        v96 = v95;
        v97 = (int64x2_t *)(v95 + 3);
        v182 = (_QWORD *)v92;
        v183 = &v93->__vftable;
        do
          v98 = __ldxr(v94);
        while (__stxr(v98 + 1, v94));
        v99 = (uint64_t)(v95 + 5);
        v100 = v96[5];
        v101 = (uint64_t *)v96[4];
        if ((unint64_t)v101 >= v100)
        {
          v114 = ((uint64_t)v101 - v97->i64[0]) >> 4;
          v115 = v114 + 1;
          if ((unint64_t)(v114 + 1) >> 60)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v116 = v100 - v97->i64[0];
          if (v116 >> 3 > v115)
            v115 = v116 >> 3;
          if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFF0)
            v117 = 0xFFFFFFFFFFFFFFFLL;
          else
            v117 = v115;
          v181 = v96 + 5;
          v118 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>(v99, v117);
          v120 = (uint64_t *)&v118[16 * v114];
          *v120 = v92;
          v120[1] = (uint64_t)v93;
          v122 = (_QWORD *)v96[3];
          v121 = (_QWORD *)v96[4];
          if (v121 == v122)
          {
            v125 = vdupq_n_s64((unint64_t)v121);
            v123 = &v118[16 * v114];
          }
          else
          {
            v123 = &v118[16 * v114];
            do
            {
              v124 = *((_OWORD *)v121 - 1);
              v121 -= 2;
              *((_OWORD *)v123 - 1) = v124;
              v123 -= 16;
              *v121 = 0;
              v121[1] = 0;
            }
            while (v121 != v122);
            v125 = *v97;
          }
          v102 = v120 + 2;
          v96[3] = v123;
          v96[4] = v120 + 2;
          v179 = v125;
          v138 = (std::__shared_weak_count *)v96[5];
          v96[5] = &v118[16 * v119];
          v180 = v138;
          Name = (uint64_t *)v125.i64[0];
          std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Name);
        }
        else
        {
          *v101 = v92;
          v101[1] = (uint64_t)v93;
          v102 = v101 + 2;
        }
        v96[4] = v102;
        LODWORD(Name) = 0x7FFFFFFF;
        v179.i64[0] = v89;
        v179.i64[1] = v92;
        v180 = v93;
        do
          v139 = __ldxr(v94);
        while (__stxr(v139 + 1, v94));
        std::__hash_table<std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::__unordered_map_hasher<MIL::ParameterSpec,std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::hash<MIL::ParameterSpec>,std::equal_to<MIL::ParameterSpec>,true>,std::__unordered_map_equal<MIL::ParameterSpec,std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::equal_to<MIL::ParameterSpec>,std::hash<MIL::ParameterSpec>,true>,std::allocator<std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>>>::__emplace_unique_key_args<MIL::ParameterSpec,std::pair<MIL::ParameterSpec const,std::shared_ptr<MIL::Edge const>>>((uint64_t)v191, (int *)&Name, (uint64_t)&Name);
        v140 = v180;
        if (v180)
        {
          v141 = (unint64_t *)&v180->__shared_owners_;
          do
            v142 = __ldaxr(v141);
          while (__stlxr(v142 - 1, v141));
          if (!v142)
          {
            ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
            std::__shared_weak_count::__release_weak(v140);
          }
        }
        v143 = (std::__shared_weak_count *)v177.__r_.__value_.__l.__size_;
        if (!v177.__r_.__value_.__l.__size_)
          goto LABEL_139;
        v144 = (unint64_t *)(v177.__r_.__value_.__l.__size_ + 8);
        do
          v145 = __ldaxr(v144);
        while (__stlxr(v145 - 1, v144));
      }
      else
      {
        if (!(*(uint64_t (**)(char *, uint64_t, uint64_t))(*((_QWORD *)this + 8) + 24))((char *)this + 64, v89, 1))
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&Name);
          v163 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&Name, (uint64_t)"Program parameter '", 19);
          v164 = *(char *)(v89 + 23);
          if (v164 >= 0)
            v165 = v89;
          else
            v165 = *(_QWORD *)v89;
          if (v164 >= 0)
            v166 = *(unsigned __int8 *)(v89 + 23);
          else
            v166 = *(_QWORD *)(v89 + 8);
          v167 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, v165, v166);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v167, (uint64_t)"' from block output does not resolve.", 37);
          v168 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::stringbuf::str();
          std::logic_error::logic_error(v168, &v177);
          v168->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
          __cxa_throw(v168, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
        }
        v103 = (std::__shared_weak_count_vtbl *)operator new();
        v103->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&off_1EA99AC58;
        v103->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))0x7FFFFFFFFFFFFFFFLL;
        v103->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v89;
        v103->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v89;
        v177.__r_.__value_.__r.__words[0] = (std::string::size_type)v103;
        v104 = (std::__shared_weak_count *)operator new();
        v104->__shared_owners_ = 0;
        v105 = (unint64_t *)&v104->__shared_owners_;
        v104->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ACB8;
        v104->__shared_weak_owners_ = 0;
        v104[1].__vftable = v103;
        v177.__r_.__value_.__l.__size_ = (std::string::size_type)v104;
        v184 = v89;
        Name = &v184;
        v106 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,std::__unordered_map_hasher<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,MIL::ConstReferenceWrapperHasher<std::string>,MIL::ConstReferenceWrapperEq<std::string>,true>,std::__unordered_map_equal<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,MIL::ConstReferenceWrapperEq<std::string>,MIL::ConstReferenceWrapperHasher<std::string>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>>>::__emplace_unique_key_args<std::reference_wrapper<std::string const>,std::piecewise_construct_t const&,std::tuple<std::reference_wrapper<std::string const>&&>,std::tuple<>>((uint64_t)v187, &v184, (uint64_t)&std::piecewise_construct, &Name);
        v107 = v106;
        v108 = (int64x2_t *)(v106 + 3);
        v182 = &v103->~__shared_weak_count;
        v183 = &v104->__vftable;
        do
          v109 = __ldxr(v105);
        while (__stxr(v109 + 1, v105));
        v110 = (uint64_t)(v106 + 5);
        v111 = v107[5];
        v112 = (std::__shared_weak_count_vtbl **)v107[4];
        if ((unint64_t)v112 >= v111)
        {
          v126 = ((uint64_t)v112 - v108->i64[0]) >> 4;
          v127 = v126 + 1;
          if ((unint64_t)(v126 + 1) >> 60)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v128 = v111 - v108->i64[0];
          if (v128 >> 3 > v127)
            v127 = v128 >> 3;
          if ((unint64_t)v128 >= 0x7FFFFFFFFFFFFFF0)
            v129 = 0xFFFFFFFFFFFFFFFLL;
          else
            v129 = v127;
          v181 = v107 + 5;
          v130 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>(v110, v129);
          v132 = &v130[16 * v126];
          *(_QWORD *)v132 = v103;
          *((_QWORD *)v132 + 1) = v104;
          v134 = (_QWORD *)v107[3];
          v133 = (_QWORD *)v107[4];
          if (v133 == v134)
          {
            v137 = vdupq_n_s64((unint64_t)v133);
            v135 = &v130[16 * v126];
          }
          else
          {
            v135 = &v130[16 * v126];
            do
            {
              v136 = *((_OWORD *)v133 - 1);
              v133 -= 2;
              *((_OWORD *)v135 - 1) = v136;
              v135 -= 16;
              *v133 = 0;
              v133[1] = 0;
            }
            while (v133 != v134);
            v137 = *v108;
          }
          v113 = v132 + 16;
          v107[3] = v135;
          v107[4] = v132 + 16;
          v179 = v137;
          v146 = (std::__shared_weak_count *)v107[5];
          v107[5] = &v130[16 * v131];
          v180 = v146;
          Name = (uint64_t *)v137.i64[0];
          std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Name);
        }
        else
        {
          *v112 = v103;
          v112[1] = (std::__shared_weak_count_vtbl *)v104;
          v113 = v112 + 2;
        }
        v107[4] = v113;
        LODWORD(Name) = 0x7FFFFFFF;
        v179.i64[0] = v89;
        v179.i64[1] = (uint64_t)v103;
        v180 = v104;
        do
          v147 = __ldxr(v105);
        while (__stxr(v147 + 1, v105));
        std::__hash_table<std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::__unordered_map_hasher<MIL::ParameterSpec,std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::hash<MIL::ParameterSpec>,std::equal_to<MIL::ParameterSpec>,true>,std::__unordered_map_equal<MIL::ParameterSpec,std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::equal_to<MIL::ParameterSpec>,std::hash<MIL::ParameterSpec>,true>,std::allocator<std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>>>::__emplace_unique_key_args<MIL::ParameterSpec,std::pair<MIL::ParameterSpec const,std::shared_ptr<MIL::Edge const>>>((uint64_t)v191, (int *)&Name, (uint64_t)&Name);
        v148 = v180;
        if (v180)
        {
          v149 = (unint64_t *)&v180->__shared_owners_;
          do
            v150 = __ldaxr(v149);
          while (__stlxr(v150 - 1, v149));
          if (!v150)
          {
            ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
            std::__shared_weak_count::__release_weak(v148);
          }
        }
        v143 = (std::__shared_weak_count *)v177.__r_.__value_.__l.__size_;
        if (!v177.__r_.__value_.__l.__size_)
          goto LABEL_139;
        v151 = (unint64_t *)(v177.__r_.__value_.__l.__size_ + 8);
        do
          v145 = __ldaxr(v151);
        while (__stlxr(v145 - 1, v151));
      }
      if (!v145)
      {
        ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
        std::__shared_weak_count::__release_weak(v143);
      }
LABEL_139:
      v89 += 24;
    }
    while (v89 != v88);
  }
  v152 = (_QWORD *)operator new();
  *a3 = MIL::EdgeIndexesImpl::EdgeIndexesImpl(v152, v191, v189, v187);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v185);
  std::__hash_table<std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,std::__unordered_map_hasher<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,MIL::ConstReferenceWrapperHasher<std::string>,MIL::ConstReferenceWrapperEq<std::string>,true>,std::__unordered_map_equal<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,MIL::ConstReferenceWrapperEq<std::string>,MIL::ConstReferenceWrapperHasher<std::string>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>>>::~__hash_table((uint64_t)v187);
  std::__hash_table<std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>>>::~__hash_table((uint64_t)v189);
  return std::__hash_table<std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::__unordered_map_hasher<MIL::ParameterSpec,std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::hash<MIL::ParameterSpec>,std::equal_to<MIL::ParameterSpec>,true>,std::__unordered_map_equal<MIL::ParameterSpec,std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::equal_to<MIL::ParameterSpec>,std::hash<MIL::ParameterSpec>,true>,std::allocator<std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>>>::~__hash_table((uint64_t)v191);
}

void sub_1E06131A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,char a62)
{
  void *v62;
  int v63;
  uint64_t v64;

  if (a25 < 0)
  {
    operator delete(__p);
    if ((v63 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a26);
      std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)&a62);
      std::__hash_table<std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,std::__unordered_map_hasher<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,MIL::ConstReferenceWrapperHasher<std::string>,MIL::ConstReferenceWrapperEq<std::string>,true>,std::__unordered_map_equal<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,MIL::ConstReferenceWrapperEq<std::string>,MIL::ConstReferenceWrapperHasher<std::string>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>>>::~__hash_table(v64 - 256);
      std::__hash_table<std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>>>::~__hash_table(v64 - 208);
      std::__hash_table<std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::__unordered_map_hasher<MIL::ParameterSpec,std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::hash<MIL::ParameterSpec>,std::equal_to<MIL::ParameterSpec>,true>,std::__unordered_map_equal<MIL::ParameterSpec,std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::equal_to<MIL::ParameterSpec>,std::hash<MIL::ParameterSpec>,true>,std::allocator<std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>>>::~__hash_table(v64 - 160);
      _Unwind_Resume(a1);
    }
  }
  else if (!v63)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v62);
  goto LABEL_6;
}

uint64_t ***MIL::`anonymous namespace'::AddLexicalEdges(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  uint64_t ***result;
  uint64_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  MIL::IRArgument **v14;
  MIL::IRArgument **v15;
  __int128 *Name;
  const void ***v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t *v23;
  int64x2_t *v24;
  uint64_t *v25;
  __int128 v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  unsigned int v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t *v36;
  int64x2_t *v37;
  uint64_t *v38;
  __int128 v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  _QWORD *v52;
  _QWORD *v53;
  char *v54;
  __int128 v55;
  int64x2_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  _QWORD *v64;
  _QWORD *v65;
  char *v66;
  __int128 v67;
  int64x2_t v68;
  uint64_t v69;
  uint64_t *v70;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  _QWORD *v83;
  _QWORD *v84;
  BOOL v85;
  uint64_t *v86;
  uint64_t *i;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t *v91;
  _QWORD *v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  unsigned int v99;
  std::string __p;
  uint64_t v101;
  std::__shared_weak_count *v102;

  v99 = a4;
  result = (uint64_t ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v11 = **result;
  v89 = (*result)[1];
  if (v11 == v89)
    return result;
  v93 = a3;
  v96 = a6;
  do
  {
    v90 = *v11;
    v91 = v11;
    v12 = (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)*v11 + 160))();
    v13 = (_QWORD *)*v12;
    v92 = v12 + 1;
    if ((_QWORD *)*v12 == v12 + 1)
      goto LABEL_89;
    do
    {
      v15 = (MIL::IRArgument **)v13[7];
      v14 = (MIL::IRArgument **)v13[8];
      while (v15 != v14)
      {
        if (((*(uint64_t (**)(MIL::IRArgument *))(*(_QWORD *)*v15 + 24))(*v15) & 1) != 0)
          goto LABEL_82;
        Name = (__int128 *)MIL::IRArgument::GetName(*v15);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)Name;
        v17 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<std::string const>,int>,std::__unordered_map_hasher<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,int>,MIL::ConstReferenceWrapperHasher<std::string>,MIL::ConstReferenceWrapperEq<std::string>,true>,std::__unordered_map_equal<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,int>,MIL::ConstReferenceWrapperEq<std::string>,MIL::ConstReferenceWrapperHasher<std::string>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<std::string const>,int>>>::find<std::reference_wrapper<std::string const>>(a2, (uint64_t *)&__p);
        if (v17)
        {
          v18 = *((_DWORD *)v17 + 6);
          v19 = v99;
          v20 = operator new();
          *(_QWORD *)v20 = &off_1EA99AC58;
          *(_DWORD *)(v20 + 8) = v18;
          *(_DWORD *)(v20 + 12) = v19;
          *(_QWORD *)(v20 + 16) = 0;
          *(_QWORD *)(v20 + 24) = Name;
          *(_QWORD *)&v98 = v20;
          v21 = (_QWORD *)operator new();
          *v21 = &unk_1EA99ACB8;
          v21[1] = 0;
          v21[2] = 0;
          v21[3] = v20;
          *((_QWORD *)&v98 + 1) = v21;
          *(_QWORD *)&v97 = Name;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v97;
          v22 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,std::__unordered_map_hasher<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,MIL::ConstReferenceWrapperHasher<std::string>,MIL::ConstReferenceWrapperEq<std::string>,true>,std::__unordered_map_equal<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,MIL::ConstReferenceWrapperEq<std::string>,MIL::ConstReferenceWrapperHasher<std::string>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>>>::__emplace_unique_key_args<std::reference_wrapper<std::string const>,std::piecewise_construct_t const&,std::tuple<std::reference_wrapper<std::string const>&&>,std::tuple<>>(a5, (uint64_t *)&v97, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p);
          v24 = (int64x2_t *)(v22 + 3);
          v23 = (uint64_t *)v22[3];
          v25 = (uint64_t *)v22[4];
          if (v23 == v25)
            goto LABEL_14;
          while (!MIL::operator==(v98, *v23))
          {
            v23 += 2;
            if (v23 == v25)
            {
              v23 = v25;
              break;
            }
          }
          if (v23 == (uint64_t *)v22[4])
          {
            v23 = (uint64_t *)v22[4];
LABEL_14:
            v26 = v98;
            v97 = v98;
            v27 = *((_QWORD *)&v98 + 1);
            if (*((_QWORD *)&v98 + 1))
            {
              v28 = (unint64_t *)(*((_QWORD *)&v98 + 1) + 8);
              do
                v29 = __ldxr(v28);
              while (__stxr(v29 + 1, v28));
              v23 = (uint64_t *)v22[4];
            }
            v30 = v22[5];
            if ((unint64_t)v23 >= v30)
            {
              v45 = ((uint64_t)v23 - v24->i64[0]) >> 4;
              if ((unint64_t)(v45 + 1) >> 60)
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              v94 = v26;
              v46 = v30 - v24->i64[0];
              v47 = v46 >> 3;
              if (v46 >> 3 <= (unint64_t)(v45 + 1))
                v47 = v45 + 1;
              if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF0)
                v48 = 0xFFFFFFFFFFFFFFFLL;
              else
                v48 = v47;
              v102 = (std::__shared_weak_count *)(v22 + 5);
              v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v22 + 5), v48);
              v51 = &v49[16 * v45];
              *(_OWORD *)v51 = v94;
              v53 = (_QWORD *)v22[3];
              v52 = (_QWORD *)v22[4];
              if (v52 == v53)
              {
                v56 = vdupq_n_s64((unint64_t)v52);
                v54 = &v49[16 * v45];
              }
              else
              {
                v54 = &v49[16 * v45];
                do
                {
                  v55 = *((_OWORD *)v52 - 1);
                  v52 -= 2;
                  *((_OWORD *)v54 - 1) = v55;
                  v54 -= 16;
                  *v52 = 0;
                  v52[1] = 0;
                }
                while (v52 != v53);
                v56 = *v24;
              }
              v31 = (uint64_t *)(v51 + 16);
              v22[3] = v54;
              v22[4] = v51 + 16;
              *(int64x2_t *)&__p.__r_.__value_.__r.__words[1] = v56;
              v69 = v22[5];
              v22[5] = &v49[16 * v50];
              v101 = v69;
              __p.__r_.__value_.__r.__words[0] = v56.i64[0];
              std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
            }
            else
            {
              *v23 = v26;
              v23[1] = v27;
              v31 = v23 + 2;
            }
            v22[4] = v31;
          }
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v99;
          a6 = v96;
          v70 = std::__hash_table<std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v96, (int *)&v99, (uint64_t)&std::piecewise_construct, &__p);
          std::pair<std::string const,std::shared_ptr<MIL::Blob::LegacyStorageReader>>::pair[abi:ne180100]<std::string const&,std::shared_ptr<MIL::Blob::LegacyStorageReader>&,0>(&__p, Name, (std::string::size_type *)&v98);
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Edge const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Edge const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Edge const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Edge const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::Edge const>>>((uint64_t)(v70 + 3), (unsigned __int8 *)&__p, (__int128 *)&__p);
          v71 = v102;
          if (v102)
          {
            p_shared_owners = (unint64_t *)&v102->__shared_owners_;
            do
              v73 = __ldaxr(p_shared_owners);
            while (__stlxr(v73 - 1, p_shared_owners));
            if (!v73)
            {
              ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
              std::__shared_weak_count::__release_weak(v71);
            }
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v74 = (std::__shared_weak_count *)*((_QWORD *)&v98 + 1);
          if (*((_QWORD *)&v98 + 1))
          {
            v75 = (unint64_t *)(*((_QWORD *)&v98 + 1) + 8);
            do
              v76 = __ldaxr(v75);
            while (__stlxr(v76 - 1, v75));
LABEL_80:
            if (!v76)
            {
              ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
              std::__shared_weak_count::__release_weak(v74);
            }
            goto LABEL_82;
          }
          goto LABEL_82;
        }
        if (!(*(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v93 + 24))(v93, Name, 1))
          goto LABEL_82;
        v32 = v99;
        v33 = operator new();
        *(_QWORD *)v33 = &off_1EA99AC58;
        *(_DWORD *)(v33 + 8) = -1;
        *(_DWORD *)(v33 + 12) = v32;
        *(_QWORD *)(v33 + 16) = 0;
        *(_QWORD *)(v33 + 24) = Name;
        *(_QWORD *)&v98 = v33;
        v34 = (_QWORD *)operator new();
        *v34 = &unk_1EA99ACB8;
        v34[1] = 0;
        v34[2] = 0;
        v34[3] = v33;
        *((_QWORD *)&v98 + 1) = v34;
        *(_QWORD *)&v97 = Name;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v97;
        v35 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,std::__unordered_map_hasher<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,MIL::ConstReferenceWrapperHasher<std::string>,MIL::ConstReferenceWrapperEq<std::string>,true>,std::__unordered_map_equal<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,MIL::ConstReferenceWrapperEq<std::string>,MIL::ConstReferenceWrapperHasher<std::string>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>>>::__emplace_unique_key_args<std::reference_wrapper<std::string const>,std::piecewise_construct_t const&,std::tuple<std::reference_wrapper<std::string const>&&>,std::tuple<>>(a5, (uint64_t *)&v97, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p);
        v37 = (int64x2_t *)(v35 + 3);
        v36 = (uint64_t *)v35[3];
        v38 = (uint64_t *)v35[4];
        if (v36 == v38)
          goto LABEL_27;
        while (!MIL::operator==(v98, *v36))
        {
          v36 += 2;
          if (v36 == v38)
          {
            v36 = v38;
            break;
          }
        }
        if (v36 == (uint64_t *)v35[4])
        {
          v36 = (uint64_t *)v35[4];
LABEL_27:
          v39 = v98;
          v97 = v98;
          v40 = *((_QWORD *)&v98 + 1);
          if (*((_QWORD *)&v98 + 1))
          {
            v41 = (unint64_t *)(*((_QWORD *)&v98 + 1) + 8);
            do
              v42 = __ldxr(v41);
            while (__stxr(v42 + 1, v41));
            v36 = (uint64_t *)v35[4];
          }
          v43 = v35[5];
          if ((unint64_t)v36 >= v43)
          {
            v57 = ((uint64_t)v36 - v37->i64[0]) >> 4;
            if ((unint64_t)(v57 + 1) >> 60)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v95 = v39;
            v58 = v43 - v37->i64[0];
            v59 = v58 >> 3;
            if (v58 >> 3 <= (unint64_t)(v57 + 1))
              v59 = v57 + 1;
            if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF0)
              v60 = 0xFFFFFFFFFFFFFFFLL;
            else
              v60 = v59;
            v102 = (std::__shared_weak_count *)(v35 + 5);
            v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v35 + 5), v60);
            v63 = &v61[16 * v57];
            *(_OWORD *)v63 = v95;
            v65 = (_QWORD *)v35[3];
            v64 = (_QWORD *)v35[4];
            if (v64 == v65)
            {
              v68 = vdupq_n_s64((unint64_t)v64);
              v66 = &v61[16 * v57];
            }
            else
            {
              v66 = &v61[16 * v57];
              do
              {
                v67 = *((_OWORD *)v64 - 1);
                v64 -= 2;
                *((_OWORD *)v66 - 1) = v67;
                v66 -= 16;
                *v64 = 0;
                v64[1] = 0;
              }
              while (v64 != v65);
              v68 = *v37;
            }
            v44 = (uint64_t *)(v63 + 16);
            v35[3] = v66;
            v35[4] = v63 + 16;
            *(int64x2_t *)&__p.__r_.__value_.__r.__words[1] = v68;
            v77 = v35[5];
            v35[5] = &v61[16 * v62];
            v101 = v77;
            __p.__r_.__value_.__r.__words[0] = v68.i64[0];
            std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
          }
          else
          {
            *v36 = v39;
            v36[1] = v40;
            v44 = v36 + 2;
          }
          v35[4] = v44;
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v99;
        a6 = v96;
        v78 = std::__hash_table<std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v96, (int *)&v99, (uint64_t)&std::piecewise_construct, &__p);
        std::pair<std::string const,std::shared_ptr<MIL::Blob::LegacyStorageReader>>::pair[abi:ne180100]<std::string const&,std::shared_ptr<MIL::Blob::LegacyStorageReader>&,0>(&__p, Name, (std::string::size_type *)&v98);
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Edge const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Edge const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Edge const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Edge const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::Edge const>>>((uint64_t)(v78 + 3), (unsigned __int8 *)&__p, (__int128 *)&__p);
        v79 = v102;
        if (v102)
        {
          v80 = (unint64_t *)&v102->__shared_owners_;
          do
            v81 = __ldaxr(v80);
          while (__stlxr(v81 - 1, v80));
          if (!v81)
          {
            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
            std::__shared_weak_count::__release_weak(v79);
          }
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v74 = (std::__shared_weak_count *)*((_QWORD *)&v98 + 1);
        if (*((_QWORD *)&v98 + 1))
        {
          v82 = (unint64_t *)(*((_QWORD *)&v98 + 1) + 8);
          do
            v76 = __ldaxr(v82);
          while (__stlxr(v76 - 1, v82));
          goto LABEL_80;
        }
LABEL_82:
        v15 += 2;
      }
      v83 = (_QWORD *)v13[1];
      if (v83)
      {
        do
        {
          v84 = v83;
          v83 = (_QWORD *)*v83;
        }
        while (v83);
      }
      else
      {
        do
        {
          v84 = (_QWORD *)v13[2];
          v85 = *v84 == (_QWORD)v13;
          v13 = v84;
        }
        while (!v85);
      }
      v13 = v84;
    }
    while (v84 != v92);
LABEL_89:
    result = (uint64_t ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v90 + 208))(v90);
    v86 = **result;
    for (i = (*result)[1];
          v86 != i;
    {
      v88 = *v86;
      v86 += 2;
    }
    v11 = v91 + 2;
  }
  while (v91 + 2 != v89);
  return result;
}

void sub_1E0613A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  v23 = a22;
  if (a22)
  {
    p_shared_owners = (unint64_t *)&a22->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  _Unwind_Resume(a1);
}

BOOL MIL::operator==(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  _BOOL8 result;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned __int8 *v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  BOOL v28;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (v4 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2))
    return 0;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v5 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
    return 0;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (v6 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2))
    return 0;
  v7 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
  v9 = v7[23];
  if ((v9 & 0x80u) == 0)
    v10 = v7[23];
  else
    v10 = *((_QWORD *)v7 + 1);
  v11 = *(unsigned __int8 *)(v8 + 23);
  v12 = (char)v11;
  if ((v11 & 0x80u) != 0)
    v11 = *(_QWORD *)(v8 + 8);
  if (v10 != v11)
    return 0;
  if (v12 >= 0)
    v13 = (unsigned __int8 *)v8;
  else
    v13 = *(unsigned __int8 **)v8;
  if ((v9 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v7, v13, *((_QWORD *)v7 + 1)))
      return 0;
  }
  else if (v7[23])
  {
    while (*v7 == *v13)
    {
      ++v7;
      ++v13;
      if (!--v9)
        goto LABEL_19;
    }
    return 0;
  }
LABEL_19:
  if (((*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)a1 + 40))(a1, v13) & 1) != 0)
    return 1;
  v15 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v17 = v15[23];
  if ((v17 & 0x80u) == 0)
    v18 = v15[23];
  else
    v18 = *((_QWORD *)v15 + 1);
  v19 = *(unsigned __int8 *)(v16 + 23);
  v20 = (char)v19;
  if ((v19 & 0x80u) != 0)
    v19 = *(_QWORD *)(v16 + 8);
  if (v18 != v19)
    return 0;
  if (v20 >= 0)
    v21 = (unsigned __int8 *)v16;
  else
    v21 = *(unsigned __int8 **)v16;
  if ((v17 & 0x80) != 0)
    return memcmp(*(const void **)v15, v21, *((_QWORD *)v15 + 1)) == 0;
  if (!v15[23])
    return 1;
  v22 = v17 - 1;
  do
  {
    v24 = *v15++;
    v23 = v24;
    v26 = *v21++;
    v25 = v26;
    v28 = v22-- != 0;
    result = v23 == v25;
  }
  while (v23 == v25 && v28);
  return result;
}

BOOL MIL::operator!=(uint64_t a1, uint64_t a2)
{
  return !MIL::operator==(a1, a2);
}

const void ***MIL::EdgeIndexesImpl::ForwardEdgesForIdentifierName(uint64_t a1, uint64_t a2)
{
  const void ***v2;
  uint64_t v4;

  v4 = a2;
  v2 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<std::string const>,int>,std::__unordered_map_hasher<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,int>,MIL::ConstReferenceWrapperHasher<std::string>,MIL::ConstReferenceWrapperEq<std::string>,true>,std::__unordered_map_equal<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,int>,MIL::ConstReferenceWrapperEq<std::string>,MIL::ConstReferenceWrapperHasher<std::string>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<std::string const>,int>>>::find<std::reference_wrapper<std::string const>>((_QWORD *)(a1 + 88), &v4);
  if (v2)
    return v2 + 3;
  else
    return 0;
}

_QWORD *MIL::EdgeIndexesImpl::BackwardEdgesForParameter(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v3;
  int v5;
  uint64_t v6;

  v5 = a2;
  v6 = a3;
  v3 = std::__hash_table<std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::__unordered_map_hasher<MIL::ParameterSpec,std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::hash<MIL::ParameterSpec>,std::equal_to<MIL::ParameterSpec>,true>,std::__unordered_map_equal<MIL::ParameterSpec,std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::equal_to<MIL::ParameterSpec>,std::hash<MIL::ParameterSpec>,true>,std::allocator<std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>>>::find<MIL::ParameterSpec>((_QWORD *)(a1 + 8), &v5);
  if (!v3)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return v3 + 4;
}

uint64_t *MIL::EdgeIndexesImpl::BackwardLexicalEdgesByIdentifier(MIL::EdgeIndexesImpl *this, int a2)
{
  uint64_t *v2;
  int v4;

  v4 = a2;
  v2 = std::__hash_table<std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>>>::find<int>((_QWORD *)this + 6, &v4);
  if (v2)
    return v2 + 3;
  else
    return 0;
}

const void ***std::__hash_table<std::__hash_value_type<std::reference_wrapper<std::string const>,int>,std::__unordered_map_hasher<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,int>,MIL::ConstReferenceWrapperHasher<std::string>,MIL::ConstReferenceWrapperEq<std::string>,true>,std::__unordered_map_equal<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,int>,MIL::ConstReferenceWrapperEq<std::string>,MIL::ConstReferenceWrapperHasher<std::string>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<std::string const>,int>>>::find<std::reference_wrapper<std::string const>>(_QWORD *a1, uint64_t *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  const void ****v10;
  const void ***v11;
  uint64_t v12;
  unint64_t v13;
  char v15;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v15, *a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(const void *****)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = (unint64_t)v11[1];
      if (v6 == v13)
      {
        if (MIL::ConstReferenceWrapperEq<std::string>::operator()(v12, v11 + 2, (unsigned __int8 **)a2))
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = (const void ***)*v11;
    }
    while (v11);
  }
  return v11;
}

{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  const void ****v10;
  const void ***v11;
  uint64_t v12;
  unint64_t v13;
  char v15;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v15, *a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(const void *****)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = (unint64_t)v11[1];
      if (v13 == v6)
      {
        if (MIL::ConstReferenceWrapperEq<std::string>::operator()(v12, v11 + 2, (unsigned __int8 **)a2))
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = (const void ***)*v11;
    }
    while (v11);
  }
  return v11;
}

BOOL MIL::ConstReferenceWrapperEq<std::string>::operator()(uint64_t a1, const void ***a2, unsigned __int8 **a3)
{
  const void **v3;
  unsigned __int8 *v4;
  uint64_t v5;
  size_t v6;
  const void *v7;
  const void *v8;
  int v9;
  unsigned __int8 *v10;
  _BOOL8 result;

  v3 = *a2;
  v4 = *a3;
  v5 = *((unsigned __int8 *)*a2 + 23);
  v6 = (size_t)(*a2)[1];
  if ((v5 & 0x80u) == 0)
    v7 = (const void *)*((unsigned __int8 *)*a2 + 23);
  else
    v7 = (*a2)[1];
  v8 = (const void *)v4[23];
  v9 = (char)v8;
  if ((char)v8 < 0)
    v8 = (const void *)*((_QWORD *)v4 + 1);
  if (v7 != v8)
    return 0;
  if (v9 >= 0)
    v10 = v4;
  else
    v10 = *(unsigned __int8 **)v4;
  if ((v5 & 0x80) == 0)
  {
    result = 1;
    if (!(_DWORD)v5)
      return result;
    while (*(unsigned __int8 *)v3 == *v10)
    {
      v3 = (const void **)((char *)v3 + 1);
      ++v10;
      if (!--v5)
        return result;
    }
    return 0;
  }
  return memcmp(*v3, v10, v6) == 0;
}

uint64_t *std::__hash_table<std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[2];
  char v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (uint64_t *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = a1 + 16;
  v14 = (char *)operator new(0x40uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v7;
  *((_DWORD *)v14 + 4) = **a4;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *((_DWORD *)v14 + 14) = 1065353216;
  v25 = 1;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v13;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8)
          v22 %= v8;
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  i = (uint64_t *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v24, 0);
  return i;
}

void sub_1E06141AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v2 + 24);
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Edge const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Edge const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Edge const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Edge const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::Edge const>>>(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Edge const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Edge const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Edge const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Edge const>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<MIL::Edge const>>>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_1E0614470(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Edge const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Edge const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Edge const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Edge const>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<MIL::Edge const>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x38uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1E06144E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *MIL::EdgeIndexesImpl::EdgeIndexesImpl(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7;

  *a1 = &off_1EA99ABE8;
  v7 = (uint64_t)(a1 + 11);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table((uint64_t)(a1 + 1), a2);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table((uint64_t)(a1 + 6), a3);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(v7, a4);
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::__unordered_map_hasher<MIL::ParameterSpec,std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::hash<MIL::ParameterSpec>,std::equal_to<MIL::ParameterSpec>,true>,std::__unordered_map_equal<MIL::ParameterSpec,std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::equal_to<MIL::ParameterSpec>,std::hash<MIL::ParameterSpec>,true>,std::allocator<std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>>>::find<MIL::ParameterSpec>(_QWORD *a1, int *a2)
{
  uint64_t v4;
  unint64_t v5;
  int8x8_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  char v16;

  v4 = *a2;
  v5 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v16, *((_QWORD *)a2 + 1));
  v6 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v6)
    return 0;
  v7 = v4 ^ (2 * v5);
  v8 = (uint8x8_t)vcnt_s8(v6);
  v8.i16[0] = vaddlv_u8(v8);
  v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    v10 = v4 ^ (2 * v5);
    if (v7 >= *(_QWORD *)&v6)
      v10 = v7 % *(_QWORD *)&v6;
  }
  else
  {
    v10 = (*(_QWORD *)&v6 - 1) & v7;
  }
  v11 = *(_QWORD **)(*a1 + 8 * v10);
  if (!v11)
    return 0;
  v12 = (_QWORD *)*v11;
  if (*v11)
  {
    v13 = (uint64_t)(a1 + 4);
    do
    {
      v14 = v12[1];
      if (v7 == v14)
      {
        if ((std::equal_to<MIL::ParameterSpec>::operator()[abi:ne180100](v13, (uint64_t)(v12 + 2), (uint64_t)a2) & 1) != 0)
          return v12;
      }
      else
      {
        if (v9 > 1)
        {
          if (v14 >= *(_QWORD *)&v6)
            v14 %= *(_QWORD *)&v6;
        }
        else
        {
          v14 &= *(_QWORD *)&v6 - 1;
        }
        if (v14 != v10)
          return 0;
      }
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  return v12;
}

uint64_t std::equal_to<MIL::ParameterSpec>::operator()[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v3;
  unsigned __int8 **v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v16;
  uint64_t result;

  if (*(_DWORD *)a2 != *(_DWORD *)a3)
    return 0;
  v3 = *(unsigned __int8 **)(a2 + 8);
  v4 = *(unsigned __int8 ***)(a3 + 8);
  v5 = v3[23];
  if ((v5 & 0x80u) == 0)
    v6 = (unsigned __int8 *)v3[23];
  else
    v6 = (unsigned __int8 *)*((_QWORD *)v3 + 1);
  v7 = (unsigned __int8 *)*((unsigned __int8 *)v4 + 23);
  v8 = (char)v7;
  if ((char)v7 < 0)
    v7 = v4[1];
  if (v6 != v7)
    return 0;
  if (v8 >= 0)
    v9 = *(unsigned __int8 **)(a3 + 8);
  else
    v9 = *v4;
  if ((v5 & 0x80) != 0)
    return memcmp(*(const void **)v3, v9, *((_QWORD *)v3 + 1)) == 0;
  if (!v3[23])
    return 1;
  v10 = v5 - 1;
  do
  {
    v12 = *v3++;
    v11 = v12;
    v14 = *v9++;
    v13 = v14;
    v16 = v10-- != 0;
    result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>>>::find<int>(_QWORD *a1, int *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t *)*result)
  {
    v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

void MIL::`anonymous namespace'::EdgeImpl::~EdgeImpl(MIL::_anonymous_namespace_::EdgeImpl *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t MIL::`anonymous namespace'::EdgeImpl::ProducingOpIdx(MIL::_anonymous_namespace_::EdgeImpl *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t MIL::`anonymous namespace'::EdgeImpl::ConsumingOpIdx(MIL::_anonymous_namespace_::EdgeImpl *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t MIL::`anonymous namespace'::EdgeImpl::ParameterName(MIL::_anonymous_namespace_::EdgeImpl *this)
{
  uint64_t result;
  std::runtime_error *exception;

  result = *((_QWORD *)this + 2);
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Parameter name is nullptr");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1E061484C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL MIL::`anonymous namespace'::EdgeImpl::IsLexicalEdge(MIL::_anonymous_namespace_::EdgeImpl *this)
{
  return *((_QWORD *)this + 2) == 0;
}

uint64_t MIL::`anonymous namespace'::EdgeImpl::IdentifierName(MIL::_anonymous_namespace_::EdgeImpl *this)
{
  return *((_QWORD *)this + 3);
}

void std::__shared_ptr_pointer<MIL::Edge  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E0C023A0);
}

uint64_t std::__shared_ptr_pointer<MIL::Edge  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::Edge  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

void *std::__hash_table<std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,std::__unordered_map_hasher<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,MIL::ConstReferenceWrapperHasher<std::string>,MIL::ConstReferenceWrapperEq<std::string>,true>,std::__unordered_map_equal<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,MIL::ConstReferenceWrapperEq<std::string>,MIL::ConstReferenceWrapperHasher<std::string>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>>>::__emplace_unique_key_args<std::reference_wrapper<std::string const>,std::piecewise_construct_t const&,std::tuple<std::reference_wrapper<std::string const>&&>,std::tuple<>>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  void *i;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  _BYTE v28[8];
  uint64_t v29;
  char v30;

  v8 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v28, *a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v10)
        v4 = v8 % v10;
    }
    else
    {
      v4 = (v10 - 1) & v8;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      for (i = *v13; i; i = *(void **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if (MIL::ConstReferenceWrapperEq<std::string>::operator()(a1 + 32, (const void ***)i + 2, (unsigned __int8 **)a2))
          {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v4)
            break;
        }
      }
    }
  }
  v16 = (_QWORD *)(a1 + 16);
  i = operator new(0x30uLL);
  v29 = a1 + 16;
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v9;
  v17 = **a4;
  *((_QWORD *)i + 4) = 0;
  *((_QWORD *)i + 5) = 0;
  *((_QWORD *)i + 2) = v17;
  *((_QWORD *)i + 3) = 0;
  v30 = 1;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    v20 = 1;
    if (v10 >= 3)
      v20 = (v10 & (v10 - 1)) != 0;
    v21 = v20 | (2 * v10);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v23);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v25)
  {
    *(_QWORD *)i = *v25;
LABEL_38:
    *v25 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *v16;
  *v16 = i;
  *(_QWORD *)(v24 + 8 * v4) = v16;
  if (*(_QWORD *)i)
  {
    v26 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v26 >= v10)
        v26 %= v10;
    }
    else
    {
      v26 &= v10 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1E0614B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  void **v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = __p + 3;
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (__p)
    operator delete(__p);
}

uint64_t std::__hash_table<std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::__unordered_map_hasher<MIL::ParameterSpec,std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::hash<MIL::ParameterSpec>,std::equal_to<MIL::ParameterSpec>,true>,std::__unordered_map_equal<MIL::ParameterSpec,std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::equal_to<MIL::ParameterSpec>,std::hash<MIL::ParameterSpec>,true>,std::allocator<std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::__unordered_map_hasher<MIL::ParameterSpec,std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::hash<MIL::ParameterSpec>,std::equal_to<MIL::ParameterSpec>,true>,std::__unordered_map_equal<MIL::ParameterSpec,std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::equal_to<MIL::ParameterSpec>,std::hash<MIL::ParameterSpec>,true>,std::allocator<std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::__unordered_map_hasher<MIL::ParameterSpec,std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::hash<MIL::ParameterSpec>,std::equal_to<MIL::ParameterSpec>,true>,std::__unordered_map_equal<MIL::ParameterSpec,std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::equal_to<MIL::ParameterSpec>,std::hash<MIL::ParameterSpec>,true>,std::allocator<std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 4));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,std::__unordered_map_hasher<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,MIL::ConstReferenceWrapperHasher<std::string>,MIL::ConstReferenceWrapperEq<std::string>,true>,std::__unordered_map_equal<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,MIL::ConstReferenceWrapperEq<std::string>,MIL::ConstReferenceWrapperHasher<std::string>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,std::__unordered_map_hasher<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,MIL::ConstReferenceWrapperHasher<std::string>,MIL::ConstReferenceWrapperEq<std::string>,true>,std::__unordered_map_equal<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,MIL::ConstReferenceWrapperEq<std::string>,MIL::ConstReferenceWrapperHasher<std::string>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>>>::__deallocate_node(a1, *(char **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,std::__unordered_map_hasher<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,MIL::ConstReferenceWrapperHasher<std::string>,MIL::ConstReferenceWrapperEq<std::string>,true>,std::__unordered_map_equal<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,MIL::ConstReferenceWrapperEq<std::string>,MIL::ConstReferenceWrapperHasher<std::string>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>>>::__deallocate_node(uint64_t a1, char *a2)
{
  char *v2;
  char *v3;
  void **v4;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *(char **)v2;
      v4 = (void **)(v2 + 24);
      std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void *std::__hash_table<std::__hash_value_type<std::reference_wrapper<std::string const>,int>,std::__unordered_map_hasher<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,int>,MIL::ConstReferenceWrapperHasher<std::string>,MIL::ConstReferenceWrapperEq<std::string>,true>,std::__unordered_map_equal<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,int>,MIL::ConstReferenceWrapperEq<std::string>,MIL::ConstReferenceWrapperHasher<std::string>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<std::string const>,int>>>::__emplace_unique_key_args<std::reference_wrapper<std::string const>,std::pair<std::reference_wrapper<std::string const> const,int>>(uint64_t a1, uint64_t *a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  void **v12;
  void *i;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  char v25;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v25, *a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(void **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if (MIL::ConstReferenceWrapperEq<std::string>::operator()(a1 + 32, (const void ***)i + 2, (unsigned __int8 **)a2))
          {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v8;
  *((_OWORD *)i + 1) = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v21 + 8 * v3) = a1 + 16;
  if (*(_QWORD *)i)
  {
    v23 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9)
        v23 %= v9;
    }
    else
    {
      v23 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1E0614F58(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::__unordered_map_hasher<MIL::ParameterSpec,std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::hash<MIL::ParameterSpec>,std::equal_to<MIL::ParameterSpec>,true>,std::__unordered_map_equal<MIL::ParameterSpec,std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::equal_to<MIL::ParameterSpec>,std::hash<MIL::ParameterSpec>,true>,std::allocator<std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>>>::__emplace_unique_key_args<MIL::ParameterSpec,std::pair<MIL::ParameterSpec const,std::shared_ptr<MIL::Edge const>>>(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  __int128 v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD v27[2];
  char v28;

  v7 = *a2;
  v8 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v27, *((_QWORD *)a2 + 1));
  v9 = v7 ^ (2 * v8);
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v7 ^ (2 * v8);
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
    v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = (_QWORD *)*v13;
      if (*v13)
      {
        do
        {
          v15 = v14[1];
          if (v15 == v9)
          {
            if ((std::equal_to<MIL::ParameterSpec>::operator()[abi:ne180100](a1 + 32, (uint64_t)(v14 + 2), (uint64_t)a2) & 1) != 0)
              return v14;
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  v16 = operator new(0x30uLL);
  v27[0] = v16;
  v27[1] = a1 + 16;
  *v16 = 0;
  v16[1] = v9;
  v17 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v16 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v16 + 2) = v17;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  v28 = 1;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    v20 = 1;
    if (v10 >= 3)
      v20 = (v10 & (v10 - 1)) != 0;
    v21 = v20 | (2 * v10);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v23);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *(_QWORD *)v27[0] = *v24;
    *v24 = v27[0];
  }
  else
  {
    *(_QWORD *)v27[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v27[0])
    {
      v25 = *(_QWORD *)(*(_QWORD *)v27[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v25 >= v10)
          v25 %= v10;
      }
      else
      {
        v25 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v27[0];
    }
  }
  v14 = (_QWORD *)v27[0];
  v27[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v27, 0);
  return v14;
}

void sub_1E06152E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void MIL::Matching::Instruction::~Instruction(MIL::Matching::Instruction *this)
{
  JUMPOUT(0x1E0C023A0);
}

MIL::Matching::Machine *MIL::Matching::Machine::Machine(MIL::Matching::Machine *this, const MIL::Matching::Instruction *a2, MIL::Builder::BlockBuilder *a3, MIL::Builder::OperationBuilder *a4)
{
  MIL::Matching::Machine::MachineImpl *v8;
  const MIL::Matching::Instruction *v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;

  v8 = (MIL::Matching::Machine::MachineImpl *)operator new();
  MIL::Matching::Machine::MachineImpl::MachineImpl(v8, a3, a4);
  *(_QWORD *)this = v8;
  v17 = 0;
  v10 = *(_QWORD *)this;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = v10 + 16;
  v16 = 0;
  return this;
}

void sub_1E0615408(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::unique_ptr<MIL::Matching::Machine::MachineImpl>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Matching::CoroutineRunner<MIL::Matching::`anonymous namespace'::AdditionalContext,MIL::Matching::`anonymous namespace'::CoroutineBodyContainer,MIL::Matching::`anonymous namespace'::MatchState>::Start<MIL::Matching::`anonymous namespace'::InstructionBase const*,MIL::Matching::`anonymous namespace'::MatchState>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unsigned int DelegateChain;
  char **v7;
  uint64_t result;

  if (*(_DWORD *)(a1 + 392) != -1)
  {
  }
  result = (*(uint64_t (**)(_QWORD, char **, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, v7, a3);
  *((_DWORD *)v7 + 44) = 0;
  *((_DWORD *)v7 + 45) = DelegateChain;
  *(_OWORD *)(v7 + 23) = 0u;
  *(_OWORD *)(v7 + 25) = 0u;
  *(_QWORD *)(*(_QWORD *)(a1 + 280) + 8 * DelegateChain) = v7;
  *(_DWORD *)(a1 + 392) = DelegateChain;
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a1 + 400);
  if (*(_BYTE *)(a1 + 368))
    *(_BYTE *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  return result;
}

void *MIL::Matching::`anonymous namespace'::AsInstructionBase(void *this, const MIL::Matching::Instruction *a2)
{
  std::logic_error *exception;

  if (this)
  {
    if (!this)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "Unexpected Instruction subclass");
      __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
  }
  return this;
}

void sub_1E0615564(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Matching::Machine::~Machine(MIL::Matching::Machine *this)
{
  std::unique_ptr<MIL::Matching::Machine::MachineImpl>::reset[abi:ne180100]((_QWORD **)this, 0);
}

uint64_t MIL::Matching::Machine::Reset(MIL::Matching::Machine *this, const MIL::Matching::Instruction *a2, MIL::Builder::BlockBuilder *a3, MIL::Builder::OperationBuilder *a4)
{
  uint64_t v6;
  uint64_t v7;
  const MIL::Matching::Instruction *v8;
  uint64_t v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;

  v6 = *(_QWORD *)this;
  *(_QWORD *)v6 = a3;
  *(_QWORD *)(v6 + 8) = a4;
  MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::FreeAll((uint64_t **)(v6 + 48));
  v7 = *(_QWORD *)this;
  v9 = *(_QWORD *)this;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = v9 + 16;
  v15 = 0;
  v16 = 0;
}

void MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::FreeAll(uint64_t **a1)
{
  uint64_t v2;
  uint64_t v3;

  bzero(a1[6], (char *)a1[7] - (char *)a1[6]);
  bzero(a1[3], (char *)a1[4] - (char *)a1[3]);
  *(_BYTE *)(**a1 + 152) = 0;
  *(_DWORD *)a1[3] |= 1u;
  v2 = 8 * ((char *)a1[1] - (char *)*a1) - 1;
  v3 = **a1;
  *(_QWORD *)(v3 + 160) = v2;
  *(_QWORD *)(v3 + 168) = -1;
  a1[9] = (uint64_t *)1;
  a1[10] = (uint64_t *)v2;
}

uint64_t MIL::Matching::Machine::FindNextMatch(MIL::Matching::Machine::MachineImpl **a1, uint64_t *a2, std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep a3)
{
  MIL::Matching::Machine::MachineImpl *v4;
  _DWORD *v5;
  unint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (***v17)(_QWORD, MIL::Matching::Machine::MachineImpl *);
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  _DWORD *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  int v33;

  do
  {
    MIL::Matching::Machine::MachineImpl::MaybeCollectGarbage(*a1);
    v4 = *a1;
    v5 = (_DWORD *)*((_QWORD *)*a1 + 50);
    if (v5 == *((_DWORD **)*a1 + 51))
    {
      v6 = *((_QWORD *)v4 + 52);
      if ((unint64_t)v5 >= v6)
      {
        v8 = v6 - (_QWORD)v5;
        v9 = v8 >> 1;
        if ((unint64_t)(v8 >> 1) <= 1)
          v9 = 1;
        if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
          v10 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        if (v10 >> 62)
LABEL_48:
          std::__throw_bad_array_new_length[abi:ne180100]();
        v11 = operator new(4 * v10);
        v12 = &v11[v10];
        v13 = *((_DWORD *)v4 + 98);
        *((_QWORD *)v4 + 50) = v11;
        *v11 = v13;
        v7 = v11 + 1;
        *((_QWORD *)v4 + 51) = v11 + 1;
        *((_QWORD *)v4 + 52) = v12;
        if (v5)
          operator delete(v5);
      }
      else
      {
        *v5 = *((_DWORD *)v4 + 98);
        v7 = v5 + 1;
      }
      *((_QWORD *)v4 + 51) = v7;
    }
    v14 = *((_QWORD *)v4 + 53);
    v15 = v14;
    do
    {
      *((_QWORD *)v4 + 53) = v15 + 1;
      v16 = *(unsigned int *)(*((_QWORD *)v4 + 51) - 4);
      *((_DWORD *)v4 + 95) = v16;
      v17 = *(uint64_t (****)(_QWORD, MIL::Matching::Machine::MachineImpl *))(*((_QWORD *)v4 + 35) + 8 * v16);
      *((_QWORD *)v4 + 48) = v17;
      v18 = (**v17)(v17, v4);
      switch(v18)
      {
        case 3:
          if (*((_BYTE *)v4 + 368))
            *((_BYTE *)v4 + 368) = 0;
          {
            v21 = *((_QWORD *)v4 + 50);
            v22 = *((_QWORD *)v4 + 51) - 4;
            *((_QWORD *)v4 + 51) = v22;
            if (v21 == v22)
            {
              *((_DWORD *)v4 + 98) = -1;
              return 1;
            }
          }
          break;
        case 1:
          if (*((_BYTE *)v4 + 368))
            *((_BYTE *)v4 + 368) = 0;
          v24 = (char *)*((_QWORD *)v4 + 51);
          v23 = *((_QWORD *)v4 + 52);
          if ((unint64_t)v24 >= v23)
          {
            v26 = (char *)*((_QWORD *)v4 + 50);
            v27 = (v24 - v26) >> 2;
            v28 = v27 + 1;
            if ((unint64_t)(v27 + 1) >> 62)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v29 = v23 - (_QWORD)v26;
            if (v29 >> 1 > v28)
              v28 = v29 >> 1;
            if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL)
              v30 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v30 = v28;
            if (v30)
            {
              if (v30 >> 62)
                goto LABEL_48;
              v31 = (char *)operator new(4 * v30);
            }
            else
            {
              v31 = 0;
            }
            v32 = &v31[4 * v27];
            *(_DWORD *)v32 = *((_DWORD *)v4 + 94);
            v25 = v32 + 4;
            while (v24 != v26)
            {
              v33 = *((_DWORD *)v24 - 1);
              v24 -= 4;
              *((_DWORD *)v32 - 1) = v33;
              v32 -= 4;
            }
            *((_QWORD *)v4 + 50) = v32;
            *((_QWORD *)v4 + 51) = v25;
            *((_QWORD *)v4 + 52) = &v31[4 * v30];
            if (v26)
              operator delete(v26);
          }
          else
          {
            *(_DWORD *)v24 = *((_DWORD *)v4 + 94);
            v25 = v24 + 4;
          }
          *((_QWORD *)v4 + 51) = v25;
          break;
        case 0:
          v19 = *((_QWORD *)v4 + 50);
          v20 = *((_QWORD *)v4 + 51) - 4;
          *((_QWORD *)v4 + 51) = v20;
          if (v19 == v20)
          {
            MIL::MatchingPrivate::MatchConverter::ConvertMatch((uint64_t ***)*a1 + 54, *((_QWORD *)*a1 + 40), (_QWORD *)*a1 + 6, a2);
            return 0;
          }
          break;
      }
      v15 = *((_QWORD *)v4 + 53);
    }
    while ((unint64_t)(v15 - v14) < 0x64);
  }
  while (std::chrono::steady_clock::now().__d_.__rep_ < a3);
  return 2;
}

void MIL::Matching::Machine::MachineImpl::MaybeCollectGarbage(MIL::Matching::Machine::MachineImpl *this)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int8x8_t v12;

  v1 = (uint64_t *)((char *)this + 48);
  v2 = *((_QWORD *)this + 7) - *((_QWORD *)this + 6);
  v3 = *((_QWORD *)this + 16);
  v4 = v3 <= 0x63 && 4 * (v2 & 0x1FFFFFFFFFFFFFFFuLL) > v3;
  if (v4)
  {
    v6 = 8 * v2;
    v7 = v6 - v3;
    v8 = *((_QWORD *)this + 55);
    v4 = v7 > v8;
    v9 = v7 - v8;
    v10 = v6 >> 2;
    if (v4 && v9 >= v10)
    {
      MIL::Matching::Machine::MachineImpl::Mark(this);
      MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Sweep(v1, v12);
      *((_QWORD *)this + 55) = 8 * (*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) - *((_QWORD *)this + 16);
    }
  }
}

uint64_t MIL::Matching::CreateOperationPredicateInstruction@<X0>(MIL::Matching::_anonymous_namespace_ *this@<X1>, uint64_t a2@<X0>, _QWORD *a3@<X8>)
{
  void *v5;
  _QWORD *v6;
  uint64_t result;

  v6 = (_QWORD *)operator new();
  *v6 = &off_1EA99AE98;
  result = std::__function::__value_func<BOOL ()(MIL::Builder::OperationBuilder &)>::__value_func[abi:ne180100]((uint64_t)(v6 + 1), a2);
  v6[5] = v5;
  *a3 = v6;
  return result;
}

_QWORD *MIL::Matching::CreateAdvanceCursorForwardInstruction@<X0>(MIL::Matching *this@<X0>, const MIL::Matching::Instruction *a2@<X1>, _QWORD *a3@<X8>)
{
  void *v4;
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_1EA99AF38;
  result[1] = v4;
  *a3 = result;
  return result;
}

_QWORD *MIL::Matching::CreateSplitInstruction@<X0>(void ***a1@<X0>, const MIL::Matching::Instruction *a2@<X1>, _QWORD *a3@<X8>)
{
  void **v4;
  void **v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  void *v10;
  void *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  _QWORD *result;

  v5 = *a1;
  v4 = a1[1];
  v6 = (char *)v4 - (char *)*a1;
  if (v4 == *a1)
  {
    v7 = 0;
    v8 = 0;
  }
  else
  {
    if (v6 < 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new((char *)v4 - (char *)*a1);
    v8 = &v7[8 * (v6 >> 3)];
  }
  if (v4 == v5)
  {
    v12 = v7;
  }
  else
  {
    v9 = v7;
    do
    {
      v11 = v10;
      if (v9 >= v8)
      {
        v13 = (v9 - v7) >> 3;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        if ((v8 - v7) >> 2 > v14)
          v14 = (v8 - v7) >> 2;
        if ((unint64_t)(v8 - v7) >= 0x7FFFFFFFFFFFFFF8)
          v15 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
        {
          if (v15 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v16 = (char *)operator new(8 * v15);
        }
        else
        {
          v16 = 0;
        }
        v17 = &v16[8 * v13];
        *(_QWORD *)v17 = v11;
        v12 = v17 + 8;
        if (v9 != v7)
        {
          do
          {
            v18 = *((_QWORD *)v9 - 1);
            v9 -= 8;
            *((_QWORD *)v17 - 1) = v18;
            v17 -= 8;
          }
          while (v9 != v7);
          v9 = v7;
        }
        v7 = v17;
        v8 = &v16[8 * v15];
        if (v9)
          operator delete(v9);
      }
      else
      {
        *(_QWORD *)v9 = v10;
        v12 = v9 + 8;
      }
      ++v5;
      v9 = v12;
    }
    while (v5 != v4);
  }
  result = (_QWORD *)operator new();
  *result = &off_1EA99AFC8;
  result[1] = v7;
  result[2] = v12;
  result[3] = v8;
  *a3 = result;
  return result;
}

void sub_1E0615BCC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void *MIL::Matching::SetSplitInstructionAlternative(MIL::Matching *this, unint64_t a2, void *a3, const MIL::Matching::Instruction *a4)
{
  _QWORD *v6;
  const MIL::Matching::Instruction *v7;
  _QWORD *v8;
  void *result;
  uint64_t v10;
  std::logic_error *exception;

  if (!this
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Expected a SplitInstruction");
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  v8 = v6;
  v10 = v8[1];
  if (a2 >= (v8[2] - v10) >> 3)
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  *(_QWORD *)(v10 + 8 * a2) = result;
  return result;
}

void sub_1E0615C94(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *MIL::Matching::CreatePushTokenInstruction@<X0>(MIL::Matching::_anonymous_namespace_ *this@<X1>, uint64_t *a2@<X0>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = a2[1];
  v7 = (_QWORD *)operator new();
  v10[0] = &off_1EA99B028;
  v10[1] = v4;
  v10[2] = v5;
  v11 = v10;
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
    goto LABEL_5;
  }
  if (v11)
  {
    v9 = 5;
LABEL_5:
    result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
  }
  *a3 = v7;
  return result;
}

void sub_1E0615D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MEMORY[0x1E0C023A0](v13, 0x10E1C40E2CB26B8);
  _Unwind_Resume(a1);
}

_QWORD *MIL::Matching::CreateSetEdgePredicateInstruction@<X0>(uint64_t a1@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  const MIL::Matching::Instruction *v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *result;
  uint64_t v14;
  _BYTE v15[24];
  _BYTE *v16;
  _BYTE v17[24];
  _BYTE *v18;
  _BYTE v19[24];
  _BYTE *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v15, a1);
  v7 = (_QWORD *)operator new();
  std::__function::__value_func<BOOL ()(MIL::Builder::DataDependency const&)>::__value_func[abi:ne180100]((uint64_t)v17, (uint64_t)v15);
  v20 = 0;
  v8 = operator new(0x28uLL);
  *v8 = &off_1EA99B148;
  std::__function::__value_func<BOOL ()(MIL::Builder::DataDependency const&)>::__value_func[abi:ne180100]((uint64_t)(v8 + 1), (uint64_t)v17);
  v20 = v8;
  v9 = v20;
  if (v20 == v19)
  {
    v10 = 4;
    v9 = v19;
  }
  else
  {
    if (!v20)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  v11 = v18;
  if (v18 == v17)
  {
    v12 = 4;
    v11 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_11;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_11:
  *a3 = v7;
  result = v16;
  if (v16 == v15)
  {
    v14 = 4;
    result = v15;
  }
  else
  {
    if (!v16)
      return result;
    v14 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v14))();
}

void sub_1E0615F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  uint64_t v21;
  char *v22;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;

  v24 = a21;
  if (a21 == v22)
  {
    v25 = 4;
    v24 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_6:
  v26 = a17;
  if (a17 == &a14)
  {
    v27 = 4;
    v26 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
LABEL_11:
  MEMORY[0x1E0C023A0](v21, 0x10E1C40E2CB26B8);
  v28 = a13;
  if (a13 == &a10)
  {
    v29 = 4;
    v28 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_16;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_16:
  _Unwind_Resume(a1);
}

_QWORD *MIL::Matching::CreateReturnStateInstruction@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_1EA99B1C8;
  *a1 = result;
  return result;
}

_QWORD *MIL::Matching::CreatePrepareForParallelForwardInstruction@<X0>(MIL::Matching *this@<X0>, const MIL::Matching::Instruction *a2@<X1>, _QWORD *a3@<X8>)
{
  void *v4;
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_1EA99B258;
  result[1] = v4;
  *a3 = result;
  return result;
}

_QWORD *MIL::Matching::CreateParallelForwardInstruction@<X0>(MIL::Matching *this@<X0>, const MIL::Matching::Instruction *a2@<X1>, const MIL::Matching::Instruction *a3@<X2>, _QWORD *a4@<X8>)
{
  void *v8;
  const MIL::Matching::Instruction *v9;
  void *v10;
  const MIL::Matching::Instruction *v11;
  void *v12;
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_1EA99B2E8;
  result[1] = v8;
  result[2] = v10;
  result[3] = v12;
  *a4 = result;
  return result;
}

void MIL::Matching::Machine::MachineImpl::Mark(MIL::Matching::Machine::MachineImpl *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;

  v2 = (char *)this + 48;
  if (*((_BYTE *)this + 368))
  v3 = *((unsigned int *)this + 98);
  if ((_DWORD)v3 == -1)
  {
    v5 = 0;
  }
  else
  {
    v4 = *(_QWORD *)(*((_QWORD *)this + 35) + 8 * v3);
    do
    {
      v5 = v4;
      v4 = *(_QWORD *)(v4 + 184);
    }
    while (v4);
  }
  v6 = (_QWORD *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 29) = v6;
  v7 = *((_QWORD *)this + 30);
  if ((unint64_t)v6 >= v7)
  {
    v9 = v7 - (_QWORD)v6;
    v10 = v9 >> 2;
    if ((unint64_t)(v9 >> 2) <= 1)
      v10 = 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v12 = operator new(8 * v11);
    v13 = &v12[v11];
    *v12 = v5;
    v8 = v12 + 1;
    *((_QWORD *)this + 28) = v12;
    *((_QWORD *)this + 29) = v12 + 1;
    *((_QWORD *)this + 30) = v13;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *v6 = v5;
    v8 = v6 + 1;
  }
  *((_QWORD *)this + 29) = v8;
  v15 = (uint64_t *)*((_QWORD *)this + 28);
  v14 = (uint64_t *)*((_QWORD *)this + 29);
  while (v15 != v14)
  {
    v16 = *v15++;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v16 + 8))(v16, v2);
  }
}

void MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Sweep(uint64_t *a1, int8x8_t a2)
{
  char *v3;
  char *v4;
  _QWORD *v5;
  size_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  std::logic_error *exception;

  v5 = a1 + 6;
  v3 = (char *)a1[6];
  v4 = (char *)v5[1];
  v6 = v4 - v3;
  v7 = (v4 - v3) >> 2;
  v8 = a1[3];
  if (v7 != (a1[4] - v8) >> 2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "BUG: size of 'used' and 'allocated' bitsets don't match");
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  *(_DWORD *)v3 |= 1u;
  if (v4 != v3)
  {
    v9 = 0;
    v10 = a1[10];
    if (v7 <= 1)
      v7 = 1;
    do
    {
      v11 = *(_DWORD *)(v8 + 4 * v9);
      v12 = *(_DWORD *)&v3[4 * v9];
      *(_DWORD *)(v8 + 4 * v9) = v12 & v11;
      v13 = v11 & ~v12;
      if (v13)
      {
        v14 = 32 * v9;
        v15 = *a1;
        v16 = a1[9];
        v17 = v13;
        do
        {
          v18 = __clz(__rbit32(v17));
          v19 = v17 >> v18;
          v20 = v14 + v18;
          v21 = __clz(__rbit32(~v19));
          v14 = v20 + v21;
          v22 = (_QWORD *)(*(_QWORD *)(v15 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) + 160 * (v20 & 0x3F));
          *v22 = v20 + v21 - 1;
          v22[1] = v16;
          a1[9] = v20;
          if (v19 == -1)
            break;
          v17 = v19 >> v21;
          v16 = v20;
        }
        while (v17);
      }
      a2.i32[0] = v13;
      a2 = vcnt_s8(a2);
      a2.i16[0] = vaddlv_u8((uint8x8_t)a2);
      v10 += a2.u32[0];
      ++v9;
    }
    while (v9 != v7);
    a1[10] = v10;
  }
  bzero(v3, v6);
}

void sub_1E061634C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Matching::`anonymous namespace'::MatchState::MarkObjectsAsUsed(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t i;
  uint64_t v7;
  int v8;

  result = MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::MarkAsUsed(a2, *a1);
  v5 = a1[4];
  for (i = v5 & 0xFFFFFFFFFFFFFFLL; (v5 & 0xFFFFFFFFFFFFFFLL) != 0; i = v5 & 0xFFFFFFFFFFFFFFLL)
  {
    v7 = *(_QWORD *)(a2 + 136);
    v8 = *(_DWORD *)(v7 + 4 * (i >> 5));
    if ((v8 & (1 << v5)) != 0)
      break;
    *(_DWORD *)(v7 + 4 * (i >> 5)) = v8 | (1 << v5);
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 88) + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) + 160 * (v5 & 0x3F) + 144);
  }
  return result;
}

uint64_t MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::MarkAsUsed(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;

  v2 = a2 & 0xFFFFFFFFFFFFFFLL;
  if ((a2 & 0xFFFFFFFFFFFFFFLL) != 0)
  {
    LOBYTE(v3) = a2;
    v4 = (_QWORD *)result;
    do
    {
      result = MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::AssertChunkIsAllocated((uint64_t)v4, v2);
      v5 = v4[6];
      v6 = *(_DWORD *)(v5 + 4 * (v2 >> 5));
      if ((v6 & (1 << v3)) != 0)
        break;
      *(_DWORD *)(v5 + 4 * (v2 >> 5)) = v6 | (1 << v3);
      v3 = *(_QWORD *)(*(_QWORD *)(*v4 + ((v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) + 160 * (v3 & 0x3F) + 144);
      v2 = v3 & 0xFFFFFFFFFFFFFFLL;
    }
    while ((v3 & 0xFFFFFFFFFFFFFFLL) != 0);
  }
  return result;
}

uint64_t MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::AssertChunkIsAllocated(uint64_t result, unint64_t a2)
{
  std::logic_error *exception;

  if (((*(_DWORD *)(*(_QWORD *)(result + 24) + ((a2 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> a2) & 1) == 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "BUG: Attempted to access a free chunk as an allocated one");
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  return result;
}

void sub_1E06164F4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Matching::PersistentListArena<MIL::Matching::`anonymous namespace'::Position,6ul,6ul>::AssertChunkIsAllocated(uint64_t result, unint64_t a2)
{
  std::logic_error *exception;

  if (((*(_DWORD *)(*(_QWORD *)(result + 24) + ((a2 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> a2) & 1) == 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "BUG: Attempted to access a free chunk as an allocated one");
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  return result;
}

void sub_1E0616568(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Matching::`anonymous namespace'::Tree<MIL::Matching::`anonymous namespace'::CoroutineData<MIL::Matching::`anonymous namespace'::CoroutineBodyContainer>>::Traverse(char **a1)
{
  char *v1;
  char *v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v1 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)&v1[8 * v4] + 192);
      if (v5)
      {
        do
        {
          v6 = (unint64_t)a1[2];
          if ((unint64_t)v2 >= v6)
          {
            v7 = *a1;
            v8 = (v2 - *a1) >> 3;
            v9 = v8 + 1;
            if ((unint64_t)(v8 + 1) >> 61)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v10 = v6 - (_QWORD)v7;
            if (v10 >> 2 > v9)
              v9 = v10 >> 2;
            if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
              v11 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v11 = v9;
            if (v11)
            {
              if (v11 >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v12 = (char *)operator new(8 * v11);
            }
            else
            {
              v12 = 0;
            }
            v13 = &v12[8 * v8];
            *(_QWORD *)v13 = v5;
            v14 = v13 + 8;
            if (v2 != v7)
            {
              do
              {
                v15 = *((_QWORD *)v2 - 1);
                v2 -= 8;
                *((_QWORD *)v13 - 1) = v15;
                v13 -= 8;
              }
              while (v2 != v7);
              v2 = *a1;
            }
            *a1 = v13;
            a1[1] = v14;
            a1[2] = &v12[8 * v11];
            if (v2)
              operator delete(v2);
            v2 = v14;
          }
          else
          {
            *(_QWORD *)v2 = v5;
            v2 += 8;
          }
          a1[1] = v2;
          v5 = *(_QWORD *)(v5 + 208);
        }
        while (v5);
        v1 = *a1;
      }
      ++v4;
    }
    while (v4 < (v2 - v1) >> 3);
  }
}

MIL::Matching::Machine::MachineImpl *MIL::Matching::Machine::MachineImpl::MachineImpl(MIL::Matching::Machine::MachineImpl *this, MIL::Builder::BlockBuilder *a2, MIL::Builder::OperationBuilder *a3)
{
  std::logic_error *exception;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  *((_QWORD *)this + 2) = &off_1EA99AE08;
  *((_QWORD *)this + 5) = (char *)this + 16;
  MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::PersistentListArena((uint64_t)this + 48);
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_QWORD *)this + 25) = 0;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_OWORD *)this + 13) = xmmword_1E0B02DB0;
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Expected a zero chunk ID");
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  *((_QWORD *)this + 39) = 0;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_DWORD *)this + 76) = 0;
  *((_BYTE *)this + 320) = 0;
  *((_BYTE *)this + 368) = 0;
  *((_QWORD *)this + 47) = -1;
  *((_DWORD *)this + 98) = -1;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  MIL::MatchingPrivate::MatchConverter::MatchConverter((MIL::Matching::Machine::MachineImpl *)((char *)this + 432));
  *((_QWORD *)this + 55) = 8;
  return this;
}

void sub_1E06167A8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  void *v7;
  void *v8;
  _QWORD *v9;
  uint64_t v10;

  __cxa_free_exception(v4);
  v7 = (void *)v1[23];
  if (v7)
  {
    v1[24] = v7;
    operator delete(v7);
  }
  v8 = (void *)v1[20];
  if (v8)
  {
    v1[21] = v8;
    operator delete(v8);
  }
  MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::~PersistentListArena(v2);
  v9 = (_QWORD *)v1[5];
  if (v9 == v5)
  {
    v10 = 4;
    v9 = v5;
  }
  else
  {
    if (!v9)
      goto LABEL_10;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_10:
  _Unwind_Resume(a1);
}

_QWORD *MIL::Matching::CoroutineRunner<MIL::Matching::`anonymous namespace'::AdditionalContext,MIL::Matching::`anonymous namespace'::CoroutineBodyContainer,MIL::Matching::`anonymous namespace'::MatchState>::~CoroutineRunner(_QWORD *a1)
{
  void *v2;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD *v12;
  uint64_t v13;

  v2 = (void *)a1[50];
  if (v2)
  {
    a1[51] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[35];
  if (v3)
  {
    a1[36] = v3;
    operator delete(v3);
  }
  v4 = (_QWORD *)a1[31];
  if (v4)
  {
    v5 = (_QWORD *)a1[32];
    v6 = (void *)a1[31];
    if (v5 != v4)
    {
      do
      {
        v8 = *--v5;
        v7 = v8;
        *v5 = 0;
        if (v8)
          MEMORY[0x1E0C023A0](v7, 0x1022C40FA248018);
      }
      while (v5 != v4);
      v6 = (void *)a1[31];
    }
    a1[32] = v4;
    operator delete(v6);
  }
  v9 = (void *)a1[28];
  if (v9)
  {
    a1[29] = v9;
    operator delete(v9);
  }
  v10 = (void *)a1[23];
  if (v10)
  {
    a1[24] = v10;
    operator delete(v10);
  }
  v11 = (void *)a1[20];
  if (v11)
  {
    a1[21] = v11;
    operator delete(v11);
  }
  MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::~PersistentListArena((uint64_t)(a1 + 6));
  v12 = (_QWORD *)a1[5];
  if (v12 == a1 + 2)
  {
    v13 = 4;
    v12 = a1 + 2;
    goto LABEL_22;
  }
  if (v12)
  {
    v13 = 5;
LABEL_22:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  return a1;
}

void std::__function::__func<MIL::Matching::`anonymous namespace'::AdditionalContext::AdditionalContext(MIL::Builder::BlockBuilder *,MIL::Builder::OperationBuilder *)::{lambda(MIL::Builder::DataDependency const&)#1},std::allocator<MIL::Matching::`anonymous namespace'::AdditionalContext::AdditionalContext(MIL::Builder::BlockBuilder *,MIL::Builder::OperationBuilder *)::{lambda(MIL::Builder::DataDependency const&)#1}>,BOOL ()(MIL::Builder::DataDependency const&)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<MIL::Matching::`anonymous namespace'::AdditionalContext::AdditionalContext(MIL::Builder::BlockBuilder *,MIL::Builder::OperationBuilder *)::{lambda(MIL::Builder::DataDependency const&)#1},std::allocator<MIL::Matching::`anonymous namespace'::AdditionalContext::AdditionalContext(MIL::Builder::BlockBuilder *,MIL::Builder::OperationBuilder *)::{lambda(MIL::Builder::DataDependency const&)#1}>,BOOL ()(MIL::Builder::DataDependency const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1EA99AE08;
  return result;
}

void std::__function::__func<MIL::Matching::`anonymous namespace'::AdditionalContext::AdditionalContext(MIL::Builder::BlockBuilder *,MIL::Builder::OperationBuilder *)::{lambda(MIL::Builder::DataDependency const&)#1},std::allocator<MIL::Matching::`anonymous namespace'::AdditionalContext::AdditionalContext(MIL::Builder::BlockBuilder *,MIL::Builder::OperationBuilder *)::{lambda(MIL::Builder::DataDependency const&)#1}>,BOOL ()(MIL::Builder::DataDependency const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1EA99AE08;
}

uint64_t std::__function::__func<MIL::Matching::`anonymous namespace'::AdditionalContext::AdditionalContext(MIL::Builder::BlockBuilder *,MIL::Builder::OperationBuilder *)::{lambda(MIL::Builder::DataDependency const&)#1},std::allocator<MIL::Matching::`anonymous namespace'::AdditionalContext::AdditionalContext(MIL::Builder::BlockBuilder *,MIL::Builder::OperationBuilder *)::{lambda(MIL::Builder::DataDependency const&)#1}>,BOOL ()(MIL::Builder::DataDependency const&)>::operator()()
{
  return 1;
}

uint64_t std::__function::__func<MIL::Matching::`anonymous namespace'::AdditionalContext::AdditionalContext(MIL::Builder::BlockBuilder *,MIL::Builder::OperationBuilder *)::{lambda(MIL::Builder::DataDependency const&)#1},std::allocator<MIL::Matching::`anonymous namespace'::AdditionalContext::AdditionalContext(MIL::Builder::BlockBuilder *,MIL::Builder::OperationBuilder *)::{lambda(MIL::Builder::DataDependency const&)#1}>,BOOL ()(MIL::Builder::DataDependency const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Matching::`anonymous namespace'::AdditionalContext::AdditionalContext(MIL::Builder::BlockBuilder *,MIL::Builder::OperationBuilder *)::{lambda(MIL::Builder::DataDependency const&)#1},std::allocator<MIL::Matching::`anonymous namespace'::AdditionalContext::AdditionalContext(MIL::Builder::BlockBuilder *,MIL::Builder::OperationBuilder *)::{lambda(MIL::Builder::DataDependency const&)#1}>,BOOL ()(MIL::Builder::DataDependency const&)>::target_type()
{
}

uint64_t MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::PersistentListArena(uint64_t a1)
{
  std::logic_error *exception;

  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 72) = xmmword_1E0B02DB0;
  if (MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::AllocateChunk((uint64_t *)a1, 0))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Expected a zero chunk ID");
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  return a1;
}

void sub_1E0616A70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10)
{
  _QWORD *v10;
  void *v11;
  void *v13;
  void *v14;

  __cxa_free_exception(v11);
  v13 = (void *)v10[6];
  if (v13)
  {
    v10[7] = v13;
    operator delete(v13);
  }
  v14 = (void *)v10[3];
  if (v14)
  {
    v10[4] = v14;
    operator delete(v14);
  }
  a10 = v10;
  std::vector<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Chunk,64ul>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  _Unwind_Resume(a1);
}

unint64_t MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::AllocateChunk(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a1[9];
  if (v4 == -1)
  {
    MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::AllocateBlock((uint64_t)a1);
    v4 = a1[9];
  }
  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + ((v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) + 160 * (v4 & 0x3F);
  if (v4 == *(_QWORD *)v6)
  {
    a1[9] = *(_QWORD *)(v6 + 8);
  }
  else
  {
    a1[9] = v4 + 1;
    *(_OWORD *)(*(_QWORD *)(v5 + (((v4 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) + 160 * (((_DWORD)v4 + 1) & 0x3F)) = *(_OWORD *)v6;
  }
  *(_QWORD *)(v6 + 144) = a2;
  *(_BYTE *)(v6 + 152) = 0;
  *(_DWORD *)(a1[3] + ((v4 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << v4;
  --a1[10];
  MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::AssertChunkIsAllocated((uint64_t)a1, v4);
  return v4;
}

void MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::AllocateBlock(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  std::vector<unsigned int>::size_type v17;
  _QWORD v18[5];

  v3 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v4 = (void *)operator new();
  bzero(v4, 0x2800uLL);
  v5 = *(_QWORD **)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v5 >= v6)
  {
    v8 = ((uint64_t)v5 - *(_QWORD *)a1) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v9 = v6 - *(_QWORD *)a1;
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    v18[4] = a1 + 16;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(a1 + 16, v11);
    else
      v12 = 0;
    v13 = &v12[8 * v8];
    v18[0] = v12;
    v18[1] = v13;
    v18[3] = &v12[8 * v11];
    *(_QWORD *)v13 = v4;
    v18[2] = v13 + 8;
    std::vector<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Chunk,64ul>>>::__swap_out_circular_buffer((uint64_t *)a1, v18);
    v7 = *(_QWORD **)(a1 + 8);
    std::__split_buffer<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Chunk,64ul>>>::~__split_buffer((uint64_t)v18);
  }
  else
  {
    *v5 = v4;
    v7 = v5 + 1;
    *(_QWORD *)(a1 + 8) = v7;
  }
  *(_QWORD *)(a1 + 8) = v7;
  v14 = 8 * (v2 - v3);
  v15 = *(_QWORD *)(a1 + 72);
  v16 = (uint64_t *)*(v7 - 1);
  *v16 = v14 | 0x3F;
  v16[1] = v15;
  *(_QWORD *)(a1 + 72) = v14;
  v17 = (((unint64_t)v7 - *(_QWORD *)a1) >> 2) & 0x7FFFFFFFFFFFFFELL;
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)(a1 + 24), v17);
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)(a1 + 48), v17);
  *(_QWORD *)(a1 + 80) += 64;
}

void sub_1E0616CEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Chunk,64ul>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<unsigned int>::resize(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __sz)
{
  std::vector<unsigned int>::size_type v2;

  v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<unsigned int>::__append(this, __sz - v2);
  }
}

uint64_t std::vector<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Chunk,64ul>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Chunk,64ul>>>,std::reverse_iterator<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Chunk,64ul>>*>,std::reverse_iterator<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Chunk,64ul>>*>,std::reverse_iterator<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Chunk,64ul>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Chunk,64ul>>>,std::reverse_iterator<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Chunk,64ul>>*>,std::reverse_iterator<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Chunk,64ul>>*>,std::reverse_iterator<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Chunk,64ul>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v8 = (_QWORD *)(a7 - 8);
    v9 = (_QWORD *)(a7 - 8);
    do
    {
      v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((_QWORD *)&v16 + 1) = v8;
      v7 -= 8;
      v8 = v9;
    }
    while (a3 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Chunk,64ul>>>,std::reverse_iterator<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Chunk,64ul>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Chunk,64ul>>>,std::reverse_iterator<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Chunk,64ul>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Chunk,64ul>>>,std::reverse_iterator<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Chunk,64ul>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Chunk,64ul>>>,std::reverse_iterator<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Chunk,64ul>>*>>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t *v1;
  uint64_t *v2;

  v1 = *(uint64_t **)(*(_QWORD *)(result + 16) + 8);
  v2 = *(uint64_t **)(*(_QWORD *)(result + 8) + 8);
  while (v1 != v2)
  {
    result = *v1;
    *v1 = 0;
    if (result)
      result = MEMORY[0x1E0C023A0](result, 0x1000C40C72100A4);
    ++v1;
  }
  return result;
}

uint64_t std::__split_buffer<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Chunk,64ul>>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Chunk,64ul>>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__split_buffer<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Chunk,64ul>>>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 16);
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      *(_QWORD *)(v4 + 16) = v2 - 8;
      result = *(_QWORD *)(v2 - 8);
      *(_QWORD *)(v2 - 8) = 0;
      if (result)
        result = MEMORY[0x1E0C023A0](result, 0x1000C40C72100A4);
      v2 = *(_QWORD *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

void std::vector<unsigned int>::__append(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  std::__compressed_pair<unsigned int *> *p_end_cap;
  unsigned int *v5;
  unsigned int *value;
  unsigned int *end;
  std::vector<unsigned int>::pointer begin;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unsigned int *v16;
  unsigned int *v17;
  int v18;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v9 = (char *)end - (char *)this->__begin_;
    v10 = __n + (v9 >> 2);
    if (v10 >> 62)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 2;
    v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)p_end_cap, v13);
      begin = this->__begin_;
      end = this->__end_;
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = (unsigned int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    v17 = (unsigned int *)&v15[4 * __n];
    while (end != begin)
    {
      v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<unsigned int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
      operator delete(begin);
  }
}

void std::vector<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Chunk,64ul>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Chunk,64ul>>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    operator delete(**a1);
  }
}

uint64_t std::vector<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Chunk,64ul>>>::__base_destruct_at_end[abi:ne180100](uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v3 = result;
  v4 = *(_QWORD **)(result + 8);
  while (v4 != a2)
  {
    v5 = *--v4;
    result = v5;
    *v4 = 0;
    if (v5)
      result = MEMORY[0x1E0C023A0](result, 0x1000C40C72100A4);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

unint64_t MIL::Matching::PersistentListArena<MIL::Matching::`anonymous namespace'::Position,6ul,6ul>::AllocateChunk(std::vector<unsigned int> *a1, uint64_t a2)
{
  unint64_t begin;
  std::vector<unsigned int>::pointer end;
  std::vector<unsigned int>::pointer v6;
  void *v7;
  unsigned int *value;
  char *v9;
  unsigned int *v10;
  std::vector<unsigned int>::pointer v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unsigned int *v17;
  unsigned int *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::vector<unsigned int>::pointer v24;
  uint64_t *v25;
  std::vector<unsigned int>::size_type v26;
  std::vector<unsigned int>::pointer v27;
  uint64_t v28;

  begin = (unint64_t)a1[3].__begin_;
  if (begin == -1)
  {
    v6 = a1->__begin_;
    end = a1->__end_;
    v7 = (void *)operator new();
    bzero(v7, 0x2800uLL);
    v9 = (char *)a1->__end_;
    value = a1->__end_cap_.__value_;
    if (v9 >= (char *)value)
    {
      v11 = a1->__begin_;
      v12 = (v9 - (char *)a1->__begin_) >> 3;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v14 = (char *)value - (char *)v11;
      if (v14 >> 2 > v13)
        v13 = v14 >> 2;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (v15)
      {
        if (v15 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v16 = (char *)operator new(8 * v15);
      }
      else
      {
        v16 = 0;
      }
      v17 = (unsigned int *)&v16[8 * v12];
      v18 = (unsigned int *)&v16[8 * v15];
      *(_QWORD *)v17 = v7;
      v10 = v17 + 2;
      if (v9 == (char *)v11)
      {
        a1->__begin_ = v17;
        a1->__end_ = v10;
        a1->__end_cap_.__value_ = v18;
      }
      else
      {
        do
        {
          v19 = *((_QWORD *)v9 - 1);
          v9 -= 8;
          *(_QWORD *)v9 = 0;
          *((_QWORD *)v17 - 1) = v19;
          v17 -= 2;
        }
        while (v9 != (char *)v11);
        v9 = (char *)a1->__begin_;
        v20 = (char *)a1->__end_;
        a1->__begin_ = v17;
        a1->__end_ = v10;
        a1->__end_cap_.__value_ = v18;
        while (v20 != v9)
        {
          v22 = *((_QWORD *)v20 - 1);
          v20 -= 8;
          v21 = v22;
          *(_QWORD *)v20 = 0;
          if (v22)
            MEMORY[0x1E0C023A0](v21, 0x1000C40C72100A4);
        }
      }
      if (v9)
        operator delete(v9);
    }
    else
    {
      *(_QWORD *)v9 = v7;
      v10 = (unsigned int *)(v9 + 8);
    }
    a1->__end_ = v10;
    v23 = 8 * ((char *)end - (char *)v6);
    v24 = a1[3].__begin_;
    v25 = (uint64_t *)*((_QWORD *)v10 - 1);
    *v25 = v23 | 0x3F;
    v25[1] = (uint64_t)v24;
    a1[3].__begin_ = (std::vector<unsigned int>::pointer)v23;
    v26 = ((unint64_t)((char *)v10 - (char *)a1->__begin_) >> 2) & 0x7FFFFFFFFFFFFFELL;
    std::vector<unsigned int>::resize(a1 + 1, v26);
    std::vector<unsigned int>::resize(a1 + 2, v26);
    begin = (unint64_t)a1[3].__begin_;
    a1[3].__end_ += 16;
  }
  v27 = a1->__begin_;
  v28 = *(_QWORD *)((char *)a1->__begin_ + ((begin >> 3) & 0x1FFFFFFFFFFFFFF8)) + 160 * (begin & 0x3F);
  if (begin == *(_QWORD *)v28)
  {
    a1[3].__begin_ = *(std::vector<unsigned int>::pointer *)(v28 + 8);
  }
  else
  {
    a1[3].__begin_ = (std::vector<unsigned int>::pointer)(begin + 1);
    *(_OWORD *)(*(_QWORD *)((char *)v27 + (((begin + 1) >> 3) & 0x1FFFFFFFFFFFFFF8))
              + 160 * (((_DWORD)begin + 1) & 0x3F)) = *(_OWORD *)v28;
  }
  *(_QWORD *)(v28 + 144) = a2;
  *(_BYTE *)(v28 + 152) = 0;
  *(std::vector<unsigned int>::pointer)((char *)a1[1].__begin_ + ((begin >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << begin;
  --a1[3].__end_;
  return begin;
}

void sub_1E0617374(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1E0C023A0](v1, 0x1000C40C72100A4);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::`anonymous namespace'::Position,6ul,6ul>::Chunk,64ul>>>::~vector[abi:ne180100](_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          MEMORY[0x1E0C023A0](v5, 0x1000C40C72100A4);
      }
      while (v3 != v2);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::~PersistentListArena(uint64_t a1)
{
  void *v2;
  void *v3;
  void **v5;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  v5 = (void **)a1;
  std::vector<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Chunk,64ul>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  return a1;
}

_QWORD **std::unique_ptr<MIL::Matching::Machine::MachineImpl>::reset[abi:ne180100](_QWORD **result, _QWORD *a2)
{
  _QWORD *v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    MIL::MatchingPrivate::MatchConverter::~MatchConverter((MIL::MatchingPrivate::MatchConverter *)(v2 + 54));
    JUMPOUT(0x1E0C023A0);
  }
  return result;
}

BOOL MIL::Matching::`anonymous namespace'::CoroutineManager<MIL::Matching::`anonymous namespace'::CoroutineBodyContainer>::KillOrReturnFromDelegate(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(v3 + 8 * a2);
  v5 = *(_DWORD *)(v4 + 180);
  if (v5 == -1)
  {
    v6 = a2;
    v7 = *(_QWORD *)(v4 + 184);
    v9 = a1;
    *(_QWORD *)(v3 + 8 * v6) = v7;
  }
  else
  {
    v9 = a1;
  }
  return v5 != -1;
}

uint64_t *MIL::Matching::`anonymous namespace'::Tree<MIL::Matching::`anonymous namespace'::CoroutineData<MIL::Matching::`anonymous namespace'::CoroutineBodyContainer>>::RemoveSubtree<MIL::Matching::`anonymous namespace'::CoroutineManager<MIL::Matching::`anonymous namespace'::CoroutineBodyContainer>::CleanupCallback>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;

  v6 = a2[23];
  if (v6 && *(_QWORD **)(v6 + 192) == a2)
    *(_QWORD *)(v6 + 192) = a2[26];
  v7 = a2[25];
  if (v7)
    *(_QWORD *)(v7 + 208) = a2[26];
  v8 = a2[26];
  if (v8)
    *(_QWORD *)(v8 + 200) = v7;
  v9 = *(char **)a1;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v9 >= v10)
  {
    v12 = v10 - (_QWORD)v9;
    v13 = v12 >> 2;
    if ((unint64_t)(v12 >> 2) <= 1)
      v13 = 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v15 = operator new(8 * v14);
    v16 = &v15[v14];
    *v15 = a2;
    v11 = (char *)(v15 + 1);
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v15 + 1;
    *(_QWORD *)(a1 + 16) = v16;
    if (v9)
      operator delete(v9);
  }
  else
  {
    *(_QWORD *)v9 = a2;
    v11 = v9 + 8;
  }
  *(_QWORD *)(a1 + 8) = v11;
}

uint64_t *MIL::Matching::`anonymous namespace'::Tree<MIL::Matching::`anonymous namespace'::CoroutineData<MIL::Matching::`anonymous namespace'::CoroutineBodyContainer>>::DeallocateTraversedNodes<MIL::Matching::`anonymous namespace'::CoroutineManager<MIL::Matching::`anonymous namespace'::CoroutineBodyContainer>::CleanupCallback>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *result;
  v3 = result[1];
  while (v2 != v3)
  {
    v4 = *(_QWORD **)v2;
    v5 = *(unsigned int *)(*(_QWORD *)v2 + 180);
    if ((_DWORD)v5 != -1)
    {
      v6 = *a2;
      *(_DWORD *)(*(_QWORD *)(*a2 + 56) + 8 * v5) = *(_DWORD *)(*a2 + 80);
      *(_DWORD *)(v6 + 80) = v5;
      --*(_QWORD *)(v6 + 88);
    }
    *v4 = result[6];
    result[6] = (uint64_t)v4;
    v2 += 8;
  }
  return result;
}

uint64_t MIL::Matching::`anonymous namespace'::CoroutineManager<MIL::Matching::`anonymous namespace'::CoroutineBodyContainer>::AllocateDelegateChain(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  std::runtime_error *exception;

  v2 = *(unsigned int *)(a1 + 80);
  v4 = *(_QWORD **)(a1 + 56);
  v3 = *(_QWORD **)(a1 + 64);
  if (v2 == v3 - v4)
  {
    v5 = (v2 + 1);
    v6 = *(_QWORD *)(a1 + 72);
    if ((unint64_t)v3 >= v6)
    {
      v8 = v6 - (_QWORD)v4;
      if (v8 >> 2 <= (unint64_t)(v2 + 1))
        v9 = v2 + 1;
      else
        v9 = v8 >> 2;
      if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
        v10 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v10 = v9;
      if (v10 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = (char *)operator new(8 * v10);
      v12 = &v11[8 * v2];
      *(_QWORD *)v12 = v5;
      v7 = v12 + 8;
      if (v3 != v4)
      {
        do
        {
          v13 = *--v3;
          *((_QWORD *)v12 - 1) = v13;
          v12 -= 8;
        }
        while (v3 != v4);
        v3 = *(_QWORD **)(a1 + 56);
      }
      *(_QWORD *)(a1 + 56) = v12;
      *(_QWORD *)(a1 + 64) = v7;
      *(_QWORD *)(a1 + 72) = &v11[8 * v10];
      if (v3)
        operator delete(v3);
    }
    else
    {
      *v3 = v5;
      v7 = v3 + 1;
    }
    *(_QWORD *)(a1 + 64) = v7;
    v2 = *(unsigned int *)(a1 + 80);
  }
  if ((_DWORD)v2 == -1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Maximum number of coroutines has been reached");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)(a1 + 56) + 8 * v2);
  ++*(_QWORD *)(a1 + 88);
  return v2;
}

void sub_1E06177A4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char **MIL::Matching::`anonymous namespace'::MemoryPool<216ul,8ul,16ul>::Allocate(char **a1)
{
  char **result;
  void *v3;
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;

  result = (char **)a1[3];
  if (!result)
  {
    v3 = (void *)operator new();
    bzero(v3, 0xD80uLL);
    v5 = a1[1];
    v4 = (unint64_t)a1[2];
    if ((unint64_t)v5 >= v4)
    {
      v7 = *a1;
      v8 = (v5 - *a1) >> 3;
      v9 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v10 = v4 - (_QWORD)v7;
      if (v10 >> 2 > v9)
        v9 = v10 >> 2;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
        v11 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v11 = v9;
      if (v11)
      {
        if (v11 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v12 = (char *)operator new(8 * v11);
      }
      else
      {
        v12 = 0;
      }
      v13 = &v12[8 * v8];
      v14 = &v12[8 * v11];
      *(_QWORD *)v13 = v3;
      v6 = v13 + 8;
      if (v5 == v7)
      {
        *a1 = v13;
        a1[1] = v6;
        a1[2] = v14;
      }
      else
      {
        do
        {
          v15 = *((_QWORD *)v5 - 1);
          v5 -= 8;
          *(_QWORD *)v5 = 0;
          *((_QWORD *)v13 - 1) = v15;
          v13 -= 8;
        }
        while (v5 != v7);
        v5 = *a1;
        v16 = a1[1];
        *a1 = v13;
        a1[1] = v6;
        a1[2] = v14;
        while (v16 != v5)
        {
          v18 = *((_QWORD *)v16 - 1);
          v16 -= 8;
          v17 = v18;
          *(_QWORD *)v16 = 0;
          if (v18)
            MEMORY[0x1E0C023A0](v17, 0x1022C40FA248018);
        }
      }
      if (v5)
        operator delete(v5);
    }
    else
    {
      *(_QWORD *)v5 = v3;
      v6 = v5 + 8;
    }
    v19 = 0;
    v20 = 0;
    a1[1] = v6;
    v21 = *((_QWORD *)v6 - 1);
    v22 = a1[3];
    do
    {
      *(_QWORD *)(v21 + v19) = v22;
      v22 = (char *)(v21 + 216 * v20);
      a1[3] = (char *)(v21 + v19);
      ++v20;
      v19 += 216;
    }
    while (v19 != 3456);
    result = (char **)(v21 + 3240);
  }
  a1[3] = *result;
  return result;
}

void sub_1E061794C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1E0C023A0](v1, 0x1022C40FA248018);
  _Unwind_Resume(a1);
}

void MIL::Matching::`anonymous namespace'::OperationPredicateInstruction::~OperationPredicateInstruction(MIL::Matching::_anonymous_namespace_::OperationPredicateInstruction *this)
{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1EA99AE98;
  v2 = (char *)this + 8;
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  UnknownLocationImpl::~UnknownLocationImpl(this);
}

{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1EA99AE98;
  v2 = (char *)this + 8;
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
    {
LABEL_6:
      UnknownLocationImpl::~UnknownLocationImpl(this);
      JUMPOUT(0x1E0C023A0);
    }
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  goto LABEL_6;
}

__n128 MIL::Matching::`anonymous namespace'::InstructionImpl<MIL::Matching::`anonymous namespace'::OperationPredicateInstruction,MIL::Matching::`anonymous namespace'::OperationPredicateCoroutine>::ConstructCoroutine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  *(_QWORD *)a2 = off_1EA99AEF0;
  *(_QWORD *)(a2 + 8) = a1;
  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 48) = v4;
  *(__n128 *)(a2 + 16) = result;
  return result;
}

uint64_t std::__function::__value_func<BOOL ()(MIL::Builder::OperationBuilder &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t MIL::Matching::`anonymous namespace'::OperationPredicateCoroutine::Run(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  __int128 v12;
  std::logic_error *exception;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  if (!*(_DWORD *)(*(_QWORD *)(a2 + 384) + 176))
  {
    if (*(_DWORD *)(a1 + 24) != 2)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "OperationPredicate invoked when there is no cursor");
      __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
    }
    v4 = (__int128 *)(a1 + 16);
    v5 = *(_QWORD *)(a1 + 16);
    if (v5)
    {
      v6 = (_QWORD *)(a2 + 48);
      while (1)
      {
        MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::AssertChunkIsAllocated(a2 + 48, v5 & 0xFFFFFFFFFFFFFFLL);
        v7 = *(_QWORD *)(*v6 + ((v5 >> 3) & 0x1FFFFFFFFFFFF8));
        if (v7)
        {
          v8 = v7 + 160 * (v5 & 0x3F) + 24 * HIBYTE(v5) - 24;
          if (!*(_DWORD *)(v8 + 8) && *(_QWORD *)v8 == *(_QWORD *)(a1 + 32))
            break;
        }
        v5 = MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Pop((_QWORD *)(a2 + 48), v5);
        if (!v5)
          goto LABEL_9;
      }
    }
    else
    {
LABEL_9:
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
      if (!v9)
        std::__throw_bad_function_call[abi:ne180100]();
      if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 48))(v9, *(_QWORD *)(a1 + 32)))
      {
        v10 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)&v15 = *(_QWORD *)(a1 + 32);
        DWORD2(v15) = 0;
        *(_QWORD *)&v16 = *(_QWORD *)(a1 + 56);
        *(_QWORD *)(a1 + 16) = MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Append((uint64_t *)(a2 + 48), v10, &v15);
        v11 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
        v12 = *(_OWORD *)(a1 + 32);
        v15 = *v4;
        v16 = v12;
        v17 = *(_OWORD *)(a1 + 48);
        return 2;
      }
    }
  }
  return 3;
}

void sub_1E0617C3C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Matching::`anonymous namespace'::OperationPredicateCoroutine::MarkObjectsAsUsed(uint64_t a1, uint64_t a2)
{
}

uint64_t MIL::Matching::CoroutineMacroHelper::ReplaceCurrent<MIL::Matching::CoroutineContext<MIL::Matching::`anonymous namespace'::AdditionalContext,MIL::Matching::`anonymous namespace'::CoroutineBodyContainer,MIL::Matching::`anonymous namespace'::MatchState>,MIL::Matching::`anonymous namespace'::InstructionBase const* const&,MIL::Matching::`anonymous namespace'::MatchState>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  char **v4;
  char *v5;
  uint64_t i;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  int v18;
  uint64_t result;
  uint64_t v22;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 8 * *(unsigned int *)(a1 + 380));
  v4 = (char **)(a1 + 224);
  v5 = *(char **)(a1 + 224);
  v22 = a1 + 224;
  *(_QWORD *)(a1 + 232) = v5;
  for (i = *(_QWORD *)(v3 + 192); i; v5 = v9)
  {
    v8 = *(_QWORD *)(a1 + 240);
    if ((unint64_t)v5 >= v8)
    {
      v10 = *v4;
      v11 = (v5 - *v4) >> 3;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v13 = v8 - (_QWORD)v10;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = (char *)operator new(8 * v14);
      }
      else
      {
        v15 = 0;
      }
      v16 = &v15[8 * v11];
      *(_QWORD *)v16 = i;
      v9 = v16 + 8;
      if (v5 != v10)
      {
        do
        {
          v17 = *((_QWORD *)v5 - 1);
          v5 -= 8;
          *((_QWORD *)v16 - 1) = v17;
          v16 -= 8;
        }
        while (v5 != v10);
        v5 = *v4;
      }
      *(_QWORD *)(a1 + 224) = v16;
      *(_QWORD *)(a1 + 232) = v9;
      *(_QWORD *)(a1 + 240) = &v15[8 * v14];
      if (v5)
        operator delete(v5);
    }
    else
    {
      *(_QWORD *)v5 = i;
      v9 = v5 + 8;
    }
    *(_QWORD *)(a1 + 232) = v9;
    i = *(_QWORD *)(i + 208);
  }
  *(_QWORD *)(v3 + 192) = 0;
  v18 = *(_DWORD *)(v3 + 180);
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, v3, a3);
  *(_DWORD *)(v3 + 176) = 0;
  *(_DWORD *)(v3 + 180) = v18;
  return result;
}

unint64_t MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Pop(_QWORD *a1, unint64_t a2)
{
  char v2;
  unint64_t v3;

  v2 = a2;
  v3 = a2 & 0xFFFFFFFFFFFFFFLL;
  if (a2 >> 57)
    return a2 - 0x100000000000000;
  MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::AssertChunkIsAllocated((uint64_t)a1, a2 & 0xFFFFFFFFFFFFFFLL);
  return *(_QWORD *)(*(_QWORD *)(*a1 + ((v3 >> 3) & 0x1FFFFFFFFFFFF8)) + 160 * (v2 & 0x3F) + 144);
}

unint64_t MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Append(uint64_t *a1, unint64_t a2, __int128 *a3)
{
  unint64_t Chunk;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  __int128 v11;

  Chunk = a2 & 0xFFFFFFFFFFFFFFLL;
  MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::AssertChunkIsAllocated((uint64_t)a1, a2 & 0xFFFFFFFFFFFFFFLL);
  if (a2 >> 57 > 2
    || (v7 = *(_QWORD *)(*a1 + ((a2 >> 3) & 0x1FFFFFFFFFFFF8)),
        HIBYTE(a2) != *(unsigned __int8 *)(v7 + 160 * (a2 & 0x3F) + 152)))
  {
    Chunk = MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::AllocateChunk(a1, a2);
    v7 = *(_QWORD *)(*a1 + ((Chunk >> 3) & 0x1FFFFFFFFFFFFFF8));
  }
  v8 = v7 + 160 * (Chunk & 0x3F);
  v9 = *(unsigned __int8 *)(v8 + 152);
  *(_BYTE *)(v8 + 152) = v9 + 1;
  v10 = v8 + 24 * v9;
  v11 = *a3;
  *(_QWORD *)(v10 + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)v10 = v11;
  return Chunk & 0xFFFFFFFFFFFFFFLL | ((unint64_t)*(unsigned __int8 *)(v8 + 152) << 56);
}

void MIL::Matching::`anonymous namespace'::AdvanceCursorForwardInstruction::~AdvanceCursorForwardInstruction(MIL::Matching::_anonymous_namespace_::AdvanceCursorForwardInstruction *this)
{
  UnknownLocationImpl::~UnknownLocationImpl(this);
  JUMPOUT(0x1E0C023A0);
}

__n128 MIL::Matching::`anonymous namespace'::InstructionImpl<MIL::Matching::`anonymous namespace'::AdvanceCursorForwardInstruction,MIL::Matching::`anonymous namespace'::AdvanceCursorForwardCoroutine>::ConstructCoroutine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  *(_QWORD *)a2 = off_1EA99AF90;
  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 24) = v4;
  *(__n128 *)(a2 + 8) = result;
  *(_QWORD *)(a2 + 56) = a1;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  return result;
}

uint64_t MIL::Matching::`anonymous namespace'::AdvanceCursorForwardCoroutine::Run(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  unint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  __int128 v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _QWORD *DataDependenciesByVariableName;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  std::logic_error *exception;
  int v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v37;
  unsigned __int8 *OutputName;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD *v51;
  MIL::BuilderPrivate::OperationBuilderPrivate *v52;
  std::__shared_weak_count *v53;
  MIL::BuilderPrivate::OperationBuilderPrivate *v54;
  std::__shared_weak_count *v55;
  _OWORD v56[3];

  v4 = *(_DWORD *)(*(_QWORD *)(a2 + 384) + 176);
  if (v4 == 472)
    goto LABEL_44;
  if (v4 == 459)
    goto LABEL_66;
  if (v4)
    return 3;
  v5 = *(_DWORD *)(a1 + 16);
  if (v5 != 2)
  {
    v6 = (unint64_t *)(a1 + 8);
    if (v5 == 1)
    {
      v11 = *v6;
      if (*v6)
      {
        v12 = (_QWORD *)(a2 + 48);
        while (1)
        {
          MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::AssertChunkIsAllocated(a2 + 48, v11 & 0xFFFFFFFFFFFFFFLL);
          v13 = *(_QWORD *)(*v12 + ((v11 >> 3) & 0x1FFFFFFFFFFFF8));
          if (v13)
          {
            v14 = v13 + 160 * (v11 & 0x3F) + 24 * HIBYTE(v11) - 24;
            if (!*(_DWORD *)(v14 + 8))
            {
              if (*(_QWORD *)v14)
                break;
            }
          }
          v11 = MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Pop((_QWORD *)(a2 + 48), v11);
          if (!v11)
            goto LABEL_15;
        }
        v15 = 0;
      }
      else
      {
LABEL_15:
        v15 = 1;
      }
      *(_BYTE *)(a1 + 88) = v15;
      DataDependenciesByVariableName = MIL::Builder::BlockBuilder::GetDataDependenciesByVariableName(*(_QWORD *)a2, *(unsigned __int8 **)(a1 + 24));
      v17 = 0;
      v18 = DataDependenciesByVariableName[2];
      *(_QWORD *)(a1 + 72) = v18;
      *(_QWORD *)(a1 + 80) = 0;
      while (v18 != v17)
      {
        MIL::Builder::DataDependency::GetConsumer(v18 + 16, v56);
        v21 = 0;
        if (*(_QWORD *)&v56[0])
        {
          v22 = *(unsigned __int8 *)(a1 + 88);
          if (*(_BYTE *)(a1 + 88))
          {
            MIL::Builder::DataDependency::GetConsumer(*(_QWORD *)(a1 + 72) + 16, &v54);
            v21 = 0;
            if (v54 != *(MIL::BuilderPrivate::OperationBuilderPrivate **)(a2 + 8))
              goto LABEL_33;
          }
          v23 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
          if (!v23)
            std::__throw_bad_function_call[abi:ne180100]();
          if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 48))(v23, *(_QWORD *)(a1 + 72) + 16))
          {
            v24 = *(_QWORD *)(a1 + 40);
            MIL::Builder::DataDependency::GetConsumer(*(_QWORD *)(a1 + 72) + 16, &v52);
            v25 = v53;
            if (v53)
            {
              p_shared_owners = (unint64_t *)&v53->__shared_owners_;
              do
                v27 = __ldaxr(p_shared_owners);
              while (__stlxr(v27 - 1, p_shared_owners));
              if (!v27)
              {
                ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
                std::__shared_weak_count::__release_weak(v25);
              }
            }
          }
          else
          {
            v21 = 0;
          }
          if (v22)
          {
LABEL_33:
            v28 = v55;
            if (v55)
            {
              v29 = (unint64_t *)&v55->__shared_owners_;
              do
                v30 = __ldaxr(v29);
              while (__stlxr(v30 - 1, v29));
              if (!v30)
              {
                ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
                std::__shared_weak_count::__release_weak(v28);
              }
            }
          }
        }
        v31 = (std::__shared_weak_count *)*((_QWORD *)&v56[0] + 1);
        if (*((_QWORD *)&v56[0] + 1))
        {
          v32 = (unint64_t *)(*((_QWORD *)&v56[0] + 1) + 8);
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        if (v21)
        {
          v34 = *(_QWORD *)(a2 + 384);
          v35 = 472;
          goto LABEL_69;
        }
LABEL_44:
        v17 = *(_QWORD *)(a1 + 80);
        v18 = **(_QWORD **)(a1 + 72);
        *(_QWORD *)(a1 + 72) = v18;
      }
    }
    else
    {
      if (v5)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Unexpected cursor state");
        __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
      }
      v7 = (_QWORD *)(a1 + 40);
      {
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 8);
        v8 = 2;
        *(_DWORD *)(a1 + 16) = 2;
        *v7 = 0;
        *(_QWORD *)(a1 + 48) = 0;
        v9 = (_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        v10 = *(_OWORD *)(a1 + 24);
        v56[0] = *(_OWORD *)v6;
        v56[1] = v10;
        v56[2] = *(_OWORD *)(a1 + 40);
        return v8;
      }
    }
    return 3;
  }
  v19 = 0;
  *(_QWORD *)(a1 + 64) = 0;
LABEL_49:
  if (v19 >= MIL::Builder::OperationBuilder::GetNumOutputs(*(MIL::Builder::OperationBuilder **)(a1 + 24)))
    return 3;
  v37 = *(_QWORD *)a2;
  OutputName = (unsigned __int8 *)MIL::Builder::OperationBuilder::GetOutputName(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)(a1 + 24), *(_QWORD *)(a1 + 64));
  v39 = MIL::Builder::BlockBuilder::GetDataDependenciesByVariableName(v37, OutputName);
  v40 = 0;
  v41 = v39[2];
  *(_QWORD *)(a1 + 72) = v41;
  *(_QWORD *)(a1 + 80) = 0;
  while (1)
  {
    if (v41 == v40)
    {
      v19 = *(_QWORD *)(a1 + 64) + 1;
      *(_QWORD *)(a1 + 64) = v19;
      goto LABEL_49;
    }
    MIL::Builder::DataDependency::GetConsumer(v41 + 16, v56);
    v42 = 0;
    if (*(_QWORD *)&v56[0])
    {
      v43 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
      if (!v43)
        std::__throw_bad_function_call[abi:ne180100]();
      v42 = 0;
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v43 + 48))(v43, *(_QWORD *)(a1 + 72) + 16))
      {
        v44 = *(_QWORD *)(a1 + 40);
        MIL::Builder::DataDependency::GetConsumer(*(_QWORD *)(a1 + 72) + 16, &v54);
        v45 = v55;
        if (v55)
        {
          v46 = (unint64_t *)&v55->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
      }
    }
    v48 = (std::__shared_weak_count *)*((_QWORD *)&v56[0] + 1);
    if (*((_QWORD *)&v56[0] + 1))
    {
      v49 = (unint64_t *)(*((_QWORD *)&v56[0] + 1) + 8);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    if (v42)
      break;
LABEL_66:
    v40 = *(_QWORD *)(a1 + 80);
    v41 = **(_QWORD **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v41;
  }
  v34 = *(_QWORD *)(a2 + 384);
  v35 = 459;
LABEL_69:
  *(_DWORD *)(v34 + 176) = v35;
  v51 = (_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  return 2;
}

void sub_1E0618430(_Unwind_Exception *a1)
{
  uint64_t v2;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](&v2);
  _Unwind_Resume(a1);
}

uint64_t MIL::Matching::`anonymous namespace'::AdvanceCursorForwardCoroutine::MarkObjectsAsUsed(uint64_t a1, uint64_t a2)
{
}

uint64_t MIL::Matching::`anonymous namespace'::AdvanceCursorForwardCoroutine::CheckParallelEdges(unint64_t a1, MIL::BuilderPrivate::OperationBuilderPrivate *a2, uint64_t *a3)
{
  unint64_t v5;
  const MIL::Builder::OperationBuilder *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t **i;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  BOOL v26;
  _QWORD *Parameters;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  _QWORD *v30;
  unsigned __int8 *VariableName;
  unsigned __int8 **v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  int v36;
  unsigned __int8 *v37;
  uint64_t v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;

  if (!a1)
    return 1;
  v5 = a1;
  v42 = (uint64_t)(a3 + 17);
  while (1)
  {
    v7 = *(_QWORD *)(a3[17] + ((v5 >> 3) & 0x1FFFFFFFFFFFF8)) + 160 * (v5 & 0x3F) + 24 * HIBYTE(v5);
    v10 = *(_DWORD *)(v7 - 24);
    v9 = v7 - 24;
    v8 = v10;
    v11 = *a3;
    if (v10 == 1)
    {
      Parameters = (_QWORD *)MIL::BuilderPrivate::OperationBuilderPrivate::GetParameters(a2, v6);
      v28 = (unsigned __int8 *)(Parameters + 1);
      v29 = (unsigned __int8 *)*Parameters;
      if ((_QWORD *)*Parameters == Parameters + 1)
        return 0;
      while (1)
      {
        v30 = (_QWORD *)*((_QWORD *)MIL::Builder::BlockBuilder::GetDataDependenciesForConsumerParam(v11, (uint64_t)a2, v29 + 32)+ 2);
        if (v30)
          break;
LABEL_48:
        v39 = (unsigned __int8 *)*((_QWORD *)v29 + 1);
        if (v39)
        {
          do
          {
            v40 = v39;
            v39 = *(unsigned __int8 **)v39;
          }
          while (v39);
        }
        else
        {
          do
          {
            v40 = (unsigned __int8 *)*((_QWORD *)v29 + 2);
            v26 = *(_QWORD *)v40 == (_QWORD)v29;
            v29 = v40;
          }
          while (!v26);
        }
        v29 = v40;
        if (v40 == v28)
          return 0;
      }
      while (1)
      {
        VariableName = (unsigned __int8 *)MIL::Builder::DataDependency::GetVariableName((MIL::Builder::DataDependency *)(v30 + 2));
        v32 = *(unsigned __int8 ***)(v9 + 8);
        v33 = VariableName[23];
        if ((v33 & 0x80u) == 0)
          v34 = (unsigned __int8 *)VariableName[23];
        else
          v34 = (unsigned __int8 *)*((_QWORD *)VariableName + 1);
        v35 = (unsigned __int8 *)*((unsigned __int8 *)v32 + 23);
        v36 = (char)v35;
        if ((char)v35 < 0)
          v35 = v32[1];
        if (v34 != v35)
          goto LABEL_47;
        if (v36 >= 0)
          v37 = *(unsigned __int8 **)(v9 + 8);
        else
          v37 = *v32;
        if ((v33 & 0x80) != 0)
        {
          if (memcmp(*(const void **)VariableName, v37, *((_QWORD *)VariableName + 1)))
            goto LABEL_47;
        }
        else if (VariableName[23])
        {
          while (*VariableName == *v37)
          {
            ++VariableName;
            ++v37;
            if (!--v33)
              goto LABEL_45;
          }
          goto LABEL_47;
        }
LABEL_45:
        v38 = *(_QWORD *)(*(_QWORD *)(v9 + 16) + 24);
        if (!v38)
          std::__throw_bad_function_call[abi:ne180100]();
        if (((*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v38 + 48))(v38, v30 + 2) & 1) != 0)
          goto LABEL_55;
LABEL_47:
        v30 = (_QWORD *)*v30;
        if (!v30)
          goto LABEL_48;
      }
    }
    if (v8 == 2)
      break;
LABEL_55:
    if (!v5)
      return 1;
  }
  v12 = (_QWORD *)MIL::BuilderPrivate::OperationBuilderPrivate::GetParameters(a2, v6);
  v13 = (unsigned __int8 *)(v12 + 1);
  v14 = (unsigned __int8 *)*v12;
  if ((_QWORD *)*v12 != v12 + 1)
  {
    do
    {
      for (i = (uint64_t **)*((_QWORD *)MIL::Builder::BlockBuilder::GetDataDependenciesForConsumerParam(v11, (uint64_t)a2, v14 + 32)+ 2); i; i = (uint64_t **)*i)
      {
        MIL::Builder::DataDependency::GetProducer(i + 2, &v43);
        if (v43 == *(_QWORD *)(v9 + 8))
        {
          v19 = *(_QWORD *)(*(_QWORD *)(v9 + 16) + 24);
          if (!v19)
            std::__throw_bad_function_call[abi:ne180100]();
          v20 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v19 + 48))(v19, (uint64_t *)i + 2);
          v21 = v44;
          if (v44)
          {
            p_shared_owners = (unint64_t *)&v44->__shared_owners_;
            do
              v23 = __ldaxr(p_shared_owners);
            while (__stlxr(v23 - 1, p_shared_owners));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
          if ((v20 & 1) != 0)
            goto LABEL_55;
        }
        else
        {
          v16 = v44;
          if (v44)
          {
            v17 = (unint64_t *)&v44->__shared_owners_;
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
        }
      }
      v24 = (unsigned __int8 *)*((_QWORD *)v14 + 1);
      if (v24)
      {
        do
        {
          v25 = v24;
          v24 = *(unsigned __int8 **)v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v25 = (unsigned __int8 *)*((_QWORD *)v14 + 2);
          v26 = *(_QWORD *)v25 == (_QWORD)v14;
          v14 = v25;
        }
        while (!v26);
      }
      v14 = v25;
    }
    while (v25 != v13);
  }
  return 0;
}

uint64_t MIL::Matching::CoroutineMacroHelper::SpawnDelegate<MIL::Matching::CoroutineContext<MIL::Matching::`anonymous namespace'::AdditionalContext,MIL::Matching::`anonymous namespace'::CoroutineBodyContainer,MIL::Matching::`anonymous namespace'::MatchState>,MIL::Matching::`anonymous namespace'::InstructionBase const* const&,MIL::Matching::`anonymous namespace'::MatchState>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char **v8;
  uint64_t result;
  uint64_t v10;

  v5 = *(unsigned int *)(a1 + 380);
  v6 = *(_QWORD *)(a1 + 280);
  v7 = *(_QWORD *)(v6 + 8 * v5);
  result = (*(uint64_t (**)(_QWORD, char **, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, v8, a3);
  v8[22] = (char *)0xFFFFFFFF00000000;
  v8[23] = (char *)v7;
  v8[24] = 0;
  v8[25] = 0;
  v8[26] = 0;
  if (v7)
  {
    v10 = *(_QWORD *)(v7 + 192);
    v8[26] = (char *)v10;
    if (v10)
      *(_QWORD *)(v10 + 200) = v8;
    *(_QWORD *)(v7 + 192) = v8;
  }
  *(_QWORD *)(v6 + 8 * v5) = v8;
  return result;
}

void MIL::Matching::`anonymous namespace'::AdvanceCursorForwardCoroutine::CreateNewState(MIL::Builder::DataDependency *this@<X1>, _OWORD *a2@<X0>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD v11[2];

  v7 = a2[1];
  *(_OWORD *)a4 = *a2;
  *(_OWORD *)(a4 + 16) = v7;
  *(_OWORD *)(a4 + 32) = a2[2];
  MIL::Builder::DataDependency::GetConsumer((uint64_t)this, v11);
  v8 = (std::__shared_weak_count *)v11[1];
  *(_QWORD *)(a4 + 16) = v11[0];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_DWORD *)(a4 + 8) = 2;
  *(_QWORD *)(a4 + 24) = a3 + 16;
  *(_QWORD *)(a4 + 32) = 0;
  *(_QWORD *)(a4 + 40) = this;
}

unint64_t MIL::Matching::`anonymous namespace'::AdditionalContext::Pop(uint64_t a1, unint64_t a2)
{
  char v2;
  unint64_t v3;

  v2 = a2;
  v3 = a2 & 0xFFFFFFFFFFFFFFLL;
  if (a2 >> 57)
    return a2 - 0x100000000000000;
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + ((v3 >> 3) & 0x1FFFFFFFFFFFF8)) + 160 * (v2 & 0x3F) + 144);
}

void MIL::Matching::`anonymous namespace'::SplitInstruction::~SplitInstruction(MIL::Matching::_anonymous_namespace_::SplitInstruction *this)
{
  void *v2;

  *(_QWORD *)this = &off_1EA99AFC8;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  UnknownLocationImpl::~UnknownLocationImpl(this);
}

{
  void *v2;

  *(_QWORD *)this = &off_1EA99AFC8;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  UnknownLocationImpl::~UnknownLocationImpl(this);
  JUMPOUT(0x1E0C023A0);
}

__n128 MIL::Matching::`anonymous namespace'::InstructionImpl<MIL::Matching::`anonymous namespace'::SplitInstruction,MIL::Matching::`anonymous namespace'::SplitCoroutine>::ConstructCoroutine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  *(_QWORD *)a2 = off_1EA99AFF0;
  *(_QWORD *)(a2 + 8) = a1;
  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 48) = v4;
  *(__n128 *)(a2 + 16) = result;
  return result;
}

uint64_t MIL::Matching::`anonymous namespace'::SplitCoroutine::Run(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a2 + 384);
  v3 = *(_DWORD *)(v2 + 176);
  if (v3 == 602)
  {
    v4 = *(_QWORD *)(a1 + 64) + 1;
    *(_QWORD *)(a1 + 64) = v4;
  }
  else
  {
    if (v3)
      return 3;
    v4 = 0;
    *(_QWORD *)(a1 + 64) = 0;
  }
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (v4 < (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16) - v5) >> 3)
  {
    *(_DWORD *)(v2 + 176) = 602;
    return 2;
  }
  return 3;
}

uint64_t MIL::Matching::`anonymous namespace'::SplitCoroutine::MarkObjectsAsUsed(uint64_t a1, uint64_t a2)
{
}

_QWORD *MIL::Matching::`anonymous namespace'::ChangeStateInstruction::ChangeStateInstruction(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_1EA99B0B8;
  v5 = (_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 24);
  if (v6)
  {
    if (v6 == a2)
    {
      a1[4] = a1 + 1;
      (*(void (**)(_QWORD))(*(_QWORD *)*v5 + 24))(*v5);
      goto LABEL_7;
    }
    a1[4] = v6;
  }
  else
  {
    v5 = a1 + 4;
  }
  *v5 = 0;
LABEL_7:
  a1[5] = a3;
  return a1;
}

void std::__function::__func<MIL::Matching::CreatePushTokenInstruction(std::variant<MIL::Builder::OperationBuilder *,MIL::Matching::BeginList,MIL::Matching::EndList> const&,MIL::Matching::Instruction const*)::$_0,std::allocator<MIL::Matching::CreatePushTokenInstruction(std::variant<MIL::Builder::OperationBuilder *,MIL::Matching::BeginList,MIL::Matching::EndList> const&,MIL::Matching::Instruction const*)::$_0>,void ()(MIL::Matching::CoroutineContext<MIL::Matching::`anonymous namespace'::AdditionalContext,MIL::Matching::`anonymous namespace'::CoroutineBodyContainer,MIL::Matching::`anonymous namespace'::MatchState> &,MIL::Matching::`anonymous namespace'::MatchState&)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

__n128 std::__function::__func<MIL::Matching::CreatePushTokenInstruction(std::variant<MIL::Builder::OperationBuilder *,MIL::Matching::BeginList,MIL::Matching::EndList> const&,MIL::Matching::Instruction const*)::$_0,std::allocator<MIL::Matching::CreatePushTokenInstruction(std::variant<MIL::Builder::OperationBuilder *,MIL::Matching::BeginList,MIL::Matching::EndList> const&,MIL::Matching::Instruction const*)::$_0>,void ()(MIL::Matching::CoroutineContext<MIL::Matching::`anonymous namespace'::AdditionalContext,MIL::Matching::`anonymous namespace'::CoroutineBodyContainer,MIL::Matching::`anonymous namespace'::MatchState> &,MIL::Matching::`anonymous namespace'::MatchState&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1EA99B028;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<MIL::Matching::CreatePushTokenInstruction(std::variant<MIL::Builder::OperationBuilder *,MIL::Matching::BeginList,MIL::Matching::EndList> const&,MIL::Matching::Instruction const*)::$_0,std::allocator<MIL::Matching::CreatePushTokenInstruction(std::variant<MIL::Builder::OperationBuilder *,MIL::Matching::BeginList,MIL::Matching::EndList> const&,MIL::Matching::Instruction const*)::$_0>,void ()(MIL::Matching::CoroutineContext<MIL::Matching::`anonymous namespace'::AdditionalContext,MIL::Matching::`anonymous namespace'::CoroutineBodyContainer,MIL::Matching::`anonymous namespace'::MatchState> &,MIL::Matching::`anonymous namespace'::MatchState&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1EA99B028;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t std::__function::__func<MIL::Matching::CreatePushTokenInstruction(std::variant<MIL::Builder::OperationBuilder *,MIL::Matching::BeginList,MIL::Matching::EndList> const&,MIL::Matching::Instruction const*)::$_0,std::allocator<MIL::Matching::CreatePushTokenInstruction(std::variant<MIL::Builder::OperationBuilder *,MIL::Matching::BeginList,MIL::Matching::EndList> const&,MIL::Matching::Instruction const*)::$_0>,void ()(MIL::Matching::CoroutineContext<MIL::Matching::`anonymous namespace'::AdditionalContext,MIL::Matching::`anonymous namespace'::CoroutineBodyContainer,MIL::Matching::`anonymous namespace'::MatchState> &,MIL::Matching::`anonymous namespace'::MatchState&)>::operator()(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v4;
  unint64_t result;
  __int128 v6;
  unint64_t v7;

  v4 = *a3;
  v6 = *(_OWORD *)(a1 + 8);
  v7 = a3[5];
  result = MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Append((uint64_t *)(a2 + 48), v4, &v6);
  *a3 = result;
  return result;
}

uint64_t std::__function::__func<MIL::Matching::CreatePushTokenInstruction(std::variant<MIL::Builder::OperationBuilder *,MIL::Matching::BeginList,MIL::Matching::EndList> const&,MIL::Matching::Instruction const*)::$_0,std::allocator<MIL::Matching::CreatePushTokenInstruction(std::variant<MIL::Builder::OperationBuilder *,MIL::Matching::BeginList,MIL::Matching::EndList> const&,MIL::Matching::Instruction const*)::$_0>,void ()(MIL::Matching::CoroutineContext<MIL::Matching::`anonymous namespace'::AdditionalContext,MIL::Matching::`anonymous namespace'::CoroutineBodyContainer,MIL::Matching::`anonymous namespace'::MatchState> &,MIL::Matching::`anonymous namespace'::MatchState&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Matching::CreatePushTokenInstruction(std::variant<MIL::Builder::OperationBuilder *,MIL::Matching::BeginList,MIL::Matching::EndList> const&,MIL::Matching::Instruction const*)::$_0,std::allocator<MIL::Matching::CreatePushTokenInstruction(std::variant<MIL::Builder::OperationBuilder *,MIL::Matching::BeginList,MIL::Matching::EndList> const&,MIL::Matching::Instruction const*)::$_0>,void ()(MIL::Matching::CoroutineContext<MIL::Matching::`anonymous namespace'::AdditionalContext,MIL::Matching::`anonymous namespace'::CoroutineBodyContainer,MIL::Matching::`anonymous namespace'::MatchState> &,MIL::Matching::`anonymous namespace'::MatchState&)>::target_type()
{
}

void MIL::Matching::`anonymous namespace'::ChangeStateInstruction::~ChangeStateInstruction(MIL::Matching::_anonymous_namespace_::ChangeStateInstruction *this)
{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1EA99B0B8;
  v2 = (char *)this + 8;
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  UnknownLocationImpl::~UnknownLocationImpl(this);
}

{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1EA99B0B8;
  v2 = (char *)this + 8;
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
    {
LABEL_6:
      UnknownLocationImpl::~UnknownLocationImpl(this);
      JUMPOUT(0x1E0C023A0);
    }
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  goto LABEL_6;
}

__n128 MIL::Matching::`anonymous namespace'::InstructionImpl<MIL::Matching::`anonymous namespace'::ChangeStateInstruction,MIL::Matching::`anonymous namespace'::ChangeStateCoroutine>::ConstructCoroutine(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __n128 result;
  __int128 v4;
  __int128 v5;

  v4 = a3[1];
  result = (__n128)a3[2];
  v5 = *a3;
  *(_QWORD *)a2 = off_1EA99B110;
  *(_QWORD *)(a2 + 8) = a1;
  *(_OWORD *)(a2 + 16) = v5;
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)(a2 + 48) = result;
  return result;
}

uint64_t MIL::Matching::`anonymous namespace'::ChangeStateCoroutine::Run(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v6;
  __int128 v7;
  _OWORD v8[3];

  if (*(_DWORD *)(*(_QWORD *)(a2 + 384) + 176))
    return 3;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
  v6 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
  v7 = *(_OWORD *)(a1 + 32);
  v8[0] = *(_OWORD *)(a1 + 16);
  v8[1] = v7;
  v8[2] = *(_OWORD *)(a1 + 48);
  return 2;
}

uint64_t MIL::Matching::`anonymous namespace'::ChangeStateCoroutine::MarkObjectsAsUsed(uint64_t a1, uint64_t a2)
{
}

_QWORD *std::__function::__func<MIL::Matching::CreateSetEdgePredicateInstruction(std::function<BOOL ()(MIL::Builder::DataDependency const&)>,MIL::Matching::Instruction const*)::$_0,std::allocator<MIL::Matching::CreateSetEdgePredicateInstruction(std::function<BOOL ()(MIL::Builder::DataDependency const&)>,MIL::Matching::Instruction const*)::$_0>,void ()(MIL::Matching::CoroutineContext<MIL::Matching::`anonymous namespace'::AdditionalContext,MIL::Matching::`anonymous namespace'::CoroutineBodyContainer,MIL::Matching::`anonymous namespace'::MatchState> &,MIL::Matching::`anonymous namespace'::MatchState&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1EA99B148;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<MIL::Matching::CreateSetEdgePredicateInstruction(std::function<BOOL ()(MIL::Builder::DataDependency const&)>,MIL::Matching::Instruction const*)::$_0,std::allocator<MIL::Matching::CreateSetEdgePredicateInstruction(std::function<BOOL ()(MIL::Builder::DataDependency const&)>,MIL::Matching::Instruction const*)::$_0>,void ()(MIL::Matching::CoroutineContext<MIL::Matching::`anonymous namespace'::AdditionalContext,MIL::Matching::`anonymous namespace'::CoroutineBodyContainer,MIL::Matching::`anonymous namespace'::MatchState> &,MIL::Matching::`anonymous namespace'::MatchState&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1EA99B148;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<MIL::Matching::CreateSetEdgePredicateInstruction(std::function<BOOL ()(MIL::Builder::DataDependency const&)>,MIL::Matching::Instruction const*)::$_0,std::allocator<MIL::Matching::CreateSetEdgePredicateInstruction(std::function<BOOL ()(MIL::Builder::DataDependency const&)>,MIL::Matching::Instruction const*)::$_0>,void ()(MIL::Matching::CoroutineContext<MIL::Matching::`anonymous namespace'::AdditionalContext,MIL::Matching::`anonymous namespace'::CoroutineBodyContainer,MIL::Matching::`anonymous namespace'::MatchState> &,MIL::Matching::`anonymous namespace'::MatchState&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1EA99B148;
  std::__function::__value_func<std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1E0618E80(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<MIL::Matching::CreateSetEdgePredicateInstruction(std::function<BOOL ()(MIL::Builder::DataDependency const&)>,MIL::Matching::Instruction const*)::$_0,std::allocator<MIL::Matching::CreateSetEdgePredicateInstruction(std::function<BOOL ()(MIL::Builder::DataDependency const&)>,MIL::Matching::Instruction const*)::$_0>,void ()(MIL::Matching::CoroutineContext<MIL::Matching::`anonymous namespace'::AdditionalContext,MIL::Matching::`anonymous namespace'::CoroutineBodyContainer,MIL::Matching::`anonymous namespace'::MatchState> &,MIL::Matching::`anonymous namespace'::MatchState&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1EA99B148;
  return std::__function::__value_func<std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<MIL::Matching::CreateSetEdgePredicateInstruction(std::function<BOOL ()(MIL::Builder::DataDependency const&)>,MIL::Matching::Instruction const*)::$_0,std::allocator<MIL::Matching::CreateSetEdgePredicateInstruction(std::function<BOOL ()(MIL::Builder::DataDependency const&)>,MIL::Matching::Instruction const*)::$_0>,void ()(MIL::Matching::CoroutineContext<MIL::Matching::`anonymous namespace'::AdditionalContext,MIL::Matching::`anonymous namespace'::CoroutineBodyContainer,MIL::Matching::`anonymous namespace'::MatchState> &,MIL::Matching::`anonymous namespace'::MatchState&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<MIL::Matching::CreateSetEdgePredicateInstruction(std::function<BOOL ()(MIL::Builder::DataDependency const&)>,MIL::Matching::Instruction const*)::$_0,std::allocator<MIL::Matching::CreateSetEdgePredicateInstruction(std::function<BOOL ()(MIL::Builder::DataDependency const&)>,MIL::Matching::Instruction const*)::$_0>,void ()(MIL::Matching::CoroutineContext<MIL::Matching::`anonymous namespace'::AdditionalContext,MIL::Matching::`anonymous namespace'::CoroutineBodyContainer,MIL::Matching::`anonymous namespace'::MatchState> &,MIL::Matching::`anonymous namespace'::MatchState&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<MIL::Matching::CreateSetEdgePredicateInstruction(std::function<BOOL ()(MIL::Builder::DataDependency const&)>,MIL::Matching::Instruction const*)::$_0,std::allocator<MIL::Matching::CreateSetEdgePredicateInstruction(std::function<BOOL ()(MIL::Builder::DataDependency const&)>,MIL::Matching::Instruction const*)::$_0>,void ()(MIL::Matching::CoroutineContext<MIL::Matching::`anonymous namespace'::AdditionalContext,MIL::Matching::`anonymous namespace'::CoroutineBodyContainer,MIL::Matching::`anonymous namespace'::MatchState> &,MIL::Matching::`anonymous namespace'::MatchState&)>::operator()(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a3 + 24) = result + 8;
  return result;
}

uint64_t std::__function::__func<MIL::Matching::CreateSetEdgePredicateInstruction(std::function<BOOL ()(MIL::Builder::DataDependency const&)>,MIL::Matching::Instruction const*)::$_0,std::allocator<MIL::Matching::CreateSetEdgePredicateInstruction(std::function<BOOL ()(MIL::Builder::DataDependency const&)>,MIL::Matching::Instruction const*)::$_0>,void ()(MIL::Matching::CoroutineContext<MIL::Matching::`anonymous namespace'::AdditionalContext,MIL::Matching::`anonymous namespace'::CoroutineBodyContainer,MIL::Matching::`anonymous namespace'::MatchState> &,MIL::Matching::`anonymous namespace'::MatchState&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Matching::CreateSetEdgePredicateInstruction(std::function<BOOL ()(MIL::Builder::DataDependency const&)>,MIL::Matching::Instruction const*)::$_0,std::allocator<MIL::Matching::CreateSetEdgePredicateInstruction(std::function<BOOL ()(MIL::Builder::DataDependency const&)>,MIL::Matching::Instruction const*)::$_0>,void ()(MIL::Matching::CoroutineContext<MIL::Matching::`anonymous namespace'::AdditionalContext,MIL::Matching::`anonymous namespace'::CoroutineBodyContainer,MIL::Matching::`anonymous namespace'::MatchState> &,MIL::Matching::`anonymous namespace'::MatchState&)>::target_type()
{
}

void MIL::Matching::`anonymous namespace'::ReturnStateInstruction::~ReturnStateInstruction(MIL::Matching::_anonymous_namespace_::ReturnStateInstruction *this)
{
  UnknownLocationImpl::~UnknownLocationImpl(this);
  JUMPOUT(0x1E0C023A0);
}

__n128 MIL::Matching::`anonymous namespace'::InstructionImpl<MIL::Matching::`anonymous namespace'::ReturnStateInstruction,MIL::Matching::`anonymous namespace'::ReturnStateCoroutine>::ConstructCoroutine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  *(_QWORD *)a2 = off_1EA99B220;
  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 24) = v4;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t MIL::Matching::`anonymous namespace'::ReturnStateCoroutine::Run(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  int v4;
  __int128 v5;
  __int128 v6;

  v2 = *(_QWORD *)(a2 + 384);
  if (*(_DWORD *)(v2 + 176))
    return 3;
  v4 = *(unsigned __int8 *)(a2 + 368);
  v5 = *(_OWORD *)(a1 + 40);
  v6 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 320) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 336) = v6;
  *(_OWORD *)(a2 + 352) = v5;
  if (!v4)
    *(_BYTE *)(a2 + 368) = 1;
  result = 0;
  *(_DWORD *)(v2 + 176) = 711;
  return result;
}

uint64_t MIL::Matching::`anonymous namespace'::ReturnStateCoroutine::MarkObjectsAsUsed(uint64_t a1, uint64_t a2)
{
}

void MIL::Matching::`anonymous namespace'::PrepareForParallelForwardInstruction::~PrepareForParallelForwardInstruction(MIL::Matching::_anonymous_namespace_::PrepareForParallelForwardInstruction *this)
{
  UnknownLocationImpl::~UnknownLocationImpl(this);
  JUMPOUT(0x1E0C023A0);
}

__n128 MIL::Matching::`anonymous namespace'::InstructionImpl<MIL::Matching::`anonymous namespace'::PrepareForParallelForwardInstruction,MIL::Matching::`anonymous namespace'::PrepareForParallelForwardCoroutine>::ConstructCoroutine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  *(_QWORD *)a2 = off_1EA99B2B0;
  *(_QWORD *)(a2 + 8) = a1;
  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 48) = v4;
  *(__n128 *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  return result;
}

uint64_t MIL::Matching::`anonymous namespace'::PrepareForParallelForwardCoroutine::Run(uint64_t a1, uint64_t a2)
{
  int v4;
  unint64_t v5;
  __int128 *v6;
  const MIL::Builder::OperationBuilder *v7;
  _QWORD *v8;
  __int128 v9;
  _QWORD *Parameters;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v4 = *(_DWORD *)(*(_QWORD *)(a2 + 384) + 176);
  if (v4 == 766)
    goto LABEL_11;
  if (v4)
    return 3;
  v6 = (__int128 *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)&v20 = 0;
  DWORD2(v20) = 1;
  *(_QWORD *)&v21 = 0;
  *(_QWORD *)(a1 + 16) = MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Append((uint64_t *)(a2 + 48), v5, &v20);
  if (!*(_DWORD *)(a1 + 24))
  {
    *(_DWORD *)(a1 + 24) = 1;
    Parameters = (_QWORD *)MIL::BuilderPrivate::OperationBuilderPrivate::GetParameters(*(MIL::BuilderPrivate::OperationBuilderPrivate **)(a2 + 8), v7);
    v13 = (_QWORD *)*Parameters;
    v11 = Parameters + 1;
    v12 = v13;
    *(_QWORD *)(a1 + 64) = v13;
    *(_QWORD *)(a1 + 72) = v11;
    while (v12 != v11)
    {
      v15 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      while (1)
      {
        v16 = v12[7];
        if (v15 >= (v12[8] - v16) >> 4)
          break;
        if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v16 + 16 * v15) + 16))(*(_QWORD *)(v16 + 16 * v15)))
        {
          *(_QWORD *)(a1 + 32) = MIL::IRArgument::GetName(*(MIL::IRArgument **)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 56)
                                                                              + 16 * *(_QWORD *)(a1 + 80)));
          *(_DWORD *)(*(_QWORD *)(a2 + 384) + 176) = 766;
          return 2;
        }
LABEL_11:
        v15 = *(_QWORD *)(a1 + 80) + 1;
        *(_QWORD *)(a1 + 80) = v15;
        v12 = *(_QWORD **)(a1 + 64);
      }
      v17 = (_QWORD *)v12[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v12[2];
          v19 = *v18 == (_QWORD)v12;
          v12 = v18;
        }
        while (!v19);
      }
      *(_QWORD *)(a1 + 64) = v18;
      v11 = *(_QWORD **)(a1 + 72);
      v12 = v18;
    }
    return 3;
  }
  v8 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v9 = *(_OWORD *)(a1 + 32);
  v20 = *v6;
  v21 = v9;
  v22 = *(_OWORD *)(a1 + 48);
  return 2;
}

uint64_t MIL::Matching::`anonymous namespace'::PrepareForParallelForwardCoroutine::MarkObjectsAsUsed(uint64_t a1, uint64_t a2)
{
}

void MIL::Matching::`anonymous namespace'::ParallelForwardInstruction::~ParallelForwardInstruction(MIL::Matching::_anonymous_namespace_::ParallelForwardInstruction *this)
{
  UnknownLocationImpl::~UnknownLocationImpl(this);
  JUMPOUT(0x1E0C023A0);
}

double MIL::Matching::`anonymous namespace'::InstructionImpl<MIL::Matching::`anonymous namespace'::ParallelForwardInstruction,MIL::Matching::`anonymous namespace'::ParallelForwardCoroutine>::ConstructCoroutine(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  double result;

  v4 = a3[1];
  v3 = a3[2];
  v5 = *a3;
  *(_QWORD *)a2 = off_1EA99B340;
  *(_QWORD *)(a2 + 8) = a1;
  *(_OWORD *)(a2 + 16) = v5;
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)(a2 + 48) = v3;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  *(_BYTE *)(a2 + 160) = 0;
  result = NAN;
  *(_QWORD *)(a2 + 168) = -1;
  return result;
}

uint64_t MIL::Matching::`anonymous namespace'::ParallelForwardCoroutine::Run(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  int v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  int v23;
  _QWORD *v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int DelegateChain;
  char **v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  char **v34;
  uint64_t v35;
  std::logic_error *exception;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  v4 = *(_QWORD *)(a2 + 384);
  v5 = *(_DWORD *)(v4 + 176);
  result = 3;
  if (v5 > 845)
  {
    if (v5 != 846)
    {
      if (v5 != 852)
        return result;
      goto LABEL_32;
    }
    v20 = *(_OWORD *)(a2 + 320);
    v21 = *(_OWORD *)(a2 + 336);
    v22 = *(_OWORD *)(a2 + 352);
    v23 = *(unsigned __int8 *)(a2 + 368);
    *(_BYTE *)(a1 + 160) = v23;
    *(_OWORD *)(a1 + 128) = v21;
    *(_OWORD *)(a1 + 144) = v22;
    *(_OWORD *)(a1 + 112) = v20;
    if (v23)
    {
      *(_DWORD *)(*(_QWORD *)(a2 + 384) + 176) = 852;
      v24 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
      v25 = *(_OWORD *)(a1 + 96);
      v38 = *(_OWORD *)(a1 + 80);
      v39 = v25;
      v37 = *(_OWORD *)(a1 + 64);
      *(_QWORD *)&v37 = *(_QWORD *)(a1 + 112);
      *(_QWORD *)&v39 = v26;
      v27 = *(_QWORD *)(a1 + 144);
      if (v27)
      {
        v28 = v26;
        do
        {
        }
        while (v27);
        *(_QWORD *)&v39 = v28;
      }
      return 2;
    }
LABEL_25:
    *(_DWORD *)(*(_QWORD *)(a2 + 384) + 176) = 837;
    v32 = *(_DWORD *)(a1 + 168);
LABEL_33:
    *(_DWORD *)(a2 + 376) = v32;
    return 1;
  }
  if (!v5)
  {
    if (!*(_DWORD *)(a1 + 24))
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "ParallelForward invoked when there is no cursor");
      __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
    }
    v17 = *(_QWORD *)(a1 + 8);
    v18 = *(unsigned int *)(a2 + 380);
    if ((_DWORD)v18 == -1)
      v19 = 0;
    else
      v19 = *(_QWORD *)(*(_QWORD *)(a2 + 280) + 8 * v18);
    (*(void (**)(_QWORD, char **, uint64_t))(**(_QWORD **)(v17 + 8) + 16))(*(_QWORD *)(v17 + 8), v30, a1 + 16);
    *((_DWORD *)v30 + 44) = 0;
    *((_DWORD *)v30 + 45) = DelegateChain;
    v30[23] = (char *)v19;
    v30[24] = 0;
    v30[25] = 0;
    v30[26] = 0;
    if (v19)
    {
      v31 = *(_QWORD *)(v19 + 192);
      v30[26] = (char *)v31;
      if (v31)
        *(_QWORD *)(v31 + 200) = v30;
      *(_QWORD *)(v19 + 192) = v30;
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 280) + 8 * DelegateChain) = v30;
    *(_DWORD *)(a1 + 168) = DelegateChain;
    goto LABEL_25;
  }
  if (v5 == 837)
  {
    v7 = *(_OWORD *)(a2 + 320);
    v8 = *(_OWORD *)(a2 + 336);
    v9 = *(_OWORD *)(a2 + 352);
    v10 = *(unsigned __int8 *)(a2 + 368);
    *(_BYTE *)(a1 + 160) = v10;
    *(_OWORD *)(a1 + 128) = v8;
    *(_OWORD *)(a1 + 144) = v9;
    *(_OWORD *)(a1 + 112) = v7;
    if (v10)
    {
      v11 = *(_OWORD *)(a2 + 320);
      v12 = *(_OWORD *)(a2 + 352);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 336);
      *(_OWORD *)(a1 + 96) = v12;
      *(_OWORD *)(a1 + 64) = v11;
      v13 = *(_QWORD *)(a1 + 8);
      v14 = *(_OWORD *)(a1 + 32);
      v37 = *(_OWORD *)(a1 + 16);
      v38 = v14;
      v39 = *(_OWORD *)(a1 + 48);
      *(_QWORD *)&v37 = *(_QWORD *)(a1 + 64);
      v15 = *(unsigned int *)(a2 + 380);
      if ((_DWORD)v15 == -1)
        v16 = 0;
      else
        v16 = *(_QWORD *)(*(_QWORD *)(a2 + 280) + 8 * v15);
      (*(void (**)(_QWORD, char **, __int128 *))(**(_QWORD **)(v13 + 16) + 16))(*(_QWORD *)(v13 + 16), v34, &v37);
      *((_DWORD *)v34 + 44) = 0;
      *((_DWORD *)v34 + 45) = v33;
      v34[23] = (char *)v16;
      v34[24] = 0;
      v34[25] = 0;
      v34[26] = 0;
      if (v16)
      {
        v35 = *(_QWORD *)(v16 + 192);
        v34[26] = (char *)v35;
        if (v35)
          *(_QWORD *)(v35 + 200) = v34;
        *(_QWORD *)(v16 + 192) = v34;
      }
      *(_QWORD *)(*(_QWORD *)(a2 + 280) + 8 * v33) = v34;
      *(_DWORD *)(a1 + 172) = v33;
      v4 = *(_QWORD *)(a2 + 384);
LABEL_32:
      *(_DWORD *)(v4 + 176) = 846;
      v32 = *(_DWORD *)(a1 + 172);
      goto LABEL_33;
    }
  }
  return result;
}

void sub_1E061956C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Matching::`anonymous namespace'::ParallelForwardCoroutine::MarkObjectsAsUsed(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_BYTE *)(a1 + 160))
  return result;
}

unint64_t MIL::Matching::`anonymous namespace'::AdditionalContext::Append(uint64_t a1, unint64_t a2, __int128 *a3)
{
  std::vector<unsigned int> *v6;
  unint64_t Chunk;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  __int128 v12;

  v6 = (std::vector<unsigned int> *)(a1 + 136);
  Chunk = a2 & 0xFFFFFFFFFFFFFFLL;
  if (a2 >> 57 > 2
    || (v8 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + ((a2 >> 3) & 0x1FFFFFFFFFFFF8)),
        HIBYTE(a2) != *(unsigned __int8 *)(v8 + 160 * (a2 & 0x3F) + 152)))
  {
    v8 = *(_QWORD *)((char *)v6->__begin_ + ((Chunk >> 3) & 0x1FFFFFFFFFFFFFF8));
  }
  v9 = v8 + 160 * (Chunk & 0x3F);
  v10 = *(unsigned __int8 *)(v9 + 152);
  *(_BYTE *)(v9 + 152) = v10 + 1;
  v11 = v9 + 24 * v10;
  v12 = *a3;
  *(_QWORD *)(v11 + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)v11 = v12;
  return Chunk & 0xFFFFFFFFFFFFFFLL | ((unint64_t)*(unsigned __int8 *)(v9 + 152) << 56);
}

_QWORD *MIL::Matching::InvalidMatchAccess::InvalidMatchAccess(_QWORD *a1, uint64_t a2)
{
  char *v4;

  *a1 = &off_1EA99B378;
  v4 = (char *)operator new(0x30uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_1EA99B3B8;
  *(_OWORD *)(v4 + 24) = *(_OWORD *)a2;
  *((_QWORD *)v4 + 5) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  a1[1] = v4 + 24;
  a1[2] = v4;
  return a1;
}

void sub_1E0619714(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *MIL::Matching::InvalidMatchAccess::InvalidMatchAccess(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  v2 = *(_QWORD *)(a2 + 16);
  *result = &off_1EA99B378;
  result[1] = v3;
  result[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  v2 = *(_QWORD *)(a2 + 16);
  *result = &off_1EA99B378;
  result[1] = v3;
  result[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t MIL::Matching::InvalidMatchAccess::operator=(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]((_QWORD *)(a1 + 8), (uint64_t *)(a2 + 8));
  return a1;
}

void MIL::Matching::InvalidMatchAccess::~InvalidMatchAccess(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&off_1EA99B378;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&this[1]);
  std::exception::~exception(this);
}

{
  this->__vftable = (std::exception_vtbl *)&off_1EA99B378;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&this[1]);
  std::exception::~exception(this);
}

{
  this->__vftable = (std::exception_vtbl *)&off_1EA99B378;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&this[1]);
  std::exception::~exception(this);
  JUMPOUT(0x1E0C023A0);
}

char *MIL::Matching::InvalidMatchAccess::what(MIL::Matching::InvalidMatchAccess *this)
{
  char *result;

  result = (char *)*((_QWORD *)this + 1);
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

__n128 MIL::Matching::OutputView::OutputView(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

__n128 MIL::Matching::OutputView::operator=(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t MIL::Matching::OutputView::GetType(MIL::Matching::OutputView *this)
{
  return MIL::Builder::OperationBuilder::GetOutputType(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)this, *((_QWORD *)this + 1));
}

uint64_t MIL::Matching::OutputView::GetName(MIL::Matching::OutputView *this)
{
  return MIL::Builder::OperationBuilder::GetOutputName(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)this, *((_QWORD *)this + 1));
}

_QWORD *MIL::Matching::MatchView::MatchView(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

_QWORD *MIL::Matching::MatchView::MatchView(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

{
  *result = *a2;
  return result;
}

{
  *result = *a2;
  return result;
}

{
  *result = *a2;
  return result;
}

_QWORD *MIL::Matching::MatchView::operator=(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

{
  *result = *a2;
  return result;
}

uint64_t MIL::Matching::MatchView::GetKind(MIL::Matching::MatchView *this)
{
  int v1;
  std::logic_error *exception;

  v1 = *(_DWORD *)(*(_QWORD *)this + 8);
  if (!v1)
    return **(_QWORD **)this != 0;
  if (v1 != 1)
  {
    if (v1 == 2)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Invalid MatchView");
    }
    else
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Trying to visit a std::variant that is in an invalid state");
    }
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  return 2;
}

void sub_1E06199C4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL MIL::Matching::MatchView::IsNone(MIL::Matching::MatchView *this)
{
  return MIL::Matching::MatchView::GetKind(this) == 0;
}

uint64_t MIL::Matching::MatchView::GetOperator(MIL::MatchingPrivate::MatchItem **this)
{
  MIL::Builder::OperationBuilder *Operation;

  Operation = (MIL::Builder::OperationBuilder *)MIL::MatchingPrivate::MatchItem::GetOperation(*this);
  return MIL::Builder::OperationBuilder::GetOperator(Operation);
}

uint64_t MIL::MatchingPrivate::MatchItem::GetOperation(MIL::MatchingPrivate::MatchItem *this)
{
  uint64_t result;
  std::logic_error *exception;

  if (!this || *((_DWORD *)this + 2) || (result = *(_QWORD *)this) == 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "MatchView is not holding an Operation");
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  return result;
}

void sub_1E0619A6C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Matching::MatchView::GetOpsetName(MIL::MatchingPrivate::MatchItem **this)
{
  MIL::Builder::OperationBuilder::OperationBuilderImpl **Operation;

  Operation = (MIL::Builder::OperationBuilder::OperationBuilderImpl **)MIL::MatchingPrivate::MatchItem::GetOperation(*this);
  return MIL::Builder::OperationBuilder::GetOpsetName(Operation);
}

uint64_t MIL::Matching::MatchView::GetNumOutputs(MIL::MatchingPrivate::MatchItem **this)
{
  MIL::Builder::OperationBuilder *Operation;

  Operation = (MIL::Builder::OperationBuilder *)MIL::MatchingPrivate::MatchItem::GetOperation(*this);
  return MIL::Builder::OperationBuilder::GetNumOutputs(Operation);
}

uint64_t MIL::Matching::MatchView::GetOutput@<X0>(MIL::MatchingPrivate::MatchItem **this@<X0>, MIL::Builder::OperationBuilder **a2@<X8>)
{
  MIL::Builder::OperationBuilder *Operation;
  uint64_t result;
  _QWORD *exception;
  _QWORD v6[3];

  Operation = (MIL::Builder::OperationBuilder *)MIL::MatchingPrivate::MatchItem::GetOperation(*this);
  result = MIL::Builder::OperationBuilder::GetNumOutputs(Operation);
  if (result != 1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v6, "The operation does not have exactly one output");
    MIL::Matching::InvalidMatchAccess::InvalidMatchAccess(exception, (uint64_t)v6);
  }
  *a2 = Operation;
  a2[1] = 0;
  return result;
}

void sub_1E0619B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

unint64_t MIL::Matching::MatchView::GetOutput@<X0>(MIL::MatchingPrivate::MatchItem **this@<X0>, unint64_t a2@<X1>, MIL::Builder::OperationBuilder **a3@<X8>)
{
  MIL::Builder::OperationBuilder *Operation;
  unint64_t result;
  _QWORD *exception;
  _QWORD v8[3];

  Operation = (MIL::Builder::OperationBuilder *)MIL::MatchingPrivate::MatchItem::GetOperation(*this);
  result = MIL::Builder::OperationBuilder::GetNumOutputs(Operation);
  if (result <= a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v8, "Output index is out of range");
    MIL::Matching::InvalidMatchAccess::InvalidMatchAccess(exception, (uint64_t)v8);
  }
  *a3 = Operation;
  a3[1] = (MIL::Builder::OperationBuilder *)a2;
  return result;
}

void sub_1E0619C14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t MIL::Matching::MatchView::GetArgumentCount(MIL::MatchingPrivate::MatchItem **a1, const void **a2)
{
  uint64_t Operation;

  Operation = MIL::MatchingPrivate::MatchItem::GetOperation(*a1);
  return MIL::Builder::OperationBuilder::GetNumArguments(Operation, a2);
}

uint64_t MIL::Matching::MatchView::GetArgument@<X0>(MIL::MatchingPrivate::MatchItem **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t Operation;
  uint64_t result;
  _QWORD *v8;
  MIL::Builder::OperationBuilder *v9;
  uint64_t Operator;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *exception;
  _BYTE v23[24];
  _QWORD v24[33];

  Operation = MIL::MatchingPrivate::MatchItem::GetOperation(*a1);
  if (MIL::Builder::OperationBuilder::GetNumArguments(Operation, (const void **)a2) != 1)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"The op ", 7);
    v9 = (MIL::Builder::OperationBuilder *)MIL::MatchingPrivate::MatchItem::GetOperation(*a1);
    Operator = MIL::Builder::OperationBuilder::GetOperator(v9);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Operator + 16))(Operator);
    v12 = *(char *)(v11 + 23);
    if (v12 >= 0)
      v13 = v11;
    else
      v13 = *(_QWORD *)v11;
    if (v12 >= 0)
      v14 = *(unsigned __int8 *)(v11 + 23);
    else
      v14 = *(_QWORD *)(v11 + 8);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v13, v14);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" does not have exactly one argument bound to '", 46);
    v17 = *(char *)(a2 + 23);
    if (v17 >= 0)
      v18 = a2;
    else
      v18 = *(_QWORD *)a2;
    if (v17 >= 0)
      v19 = *(unsigned __int8 *)(a2 + 23);
    else
      v19 = *(_QWORD *)(a2 + 8);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v18, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"' parameter. It has ", 20);
    v21 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" parameter(s).", 14);
    exception = __cxa_allocate_exception(0x18uLL);
    std::stringbuf::str();
    MIL::Matching::InvalidMatchAccess::InvalidMatchAccess(exception, (uint64_t)v23);
  }
  result = MIL::Builder::OperationBuilder::GetIRArgument(Operation, a2, 0);
  *a3 = Operation;
  a3[1] = result;
  return result;
}

void sub_1E0619DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a16 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

uint64_t MIL::Matching::MatchView::GetVariadicArgument@<X0>(MIL::MatchingPrivate::MatchItem **a1@<X0>, const void **a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t Operation;
  uint64_t result;
  std::logic_error *exception;

  Operation = MIL::MatchingPrivate::MatchItem::GetOperation(*a1);
  if (MIL::Builder::OperationBuilder::GetNumArguments(Operation, a2) <= a3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::out_of_range::out_of_range[abi:ne180100](exception, "Argument index is out of range.");
    __cxa_throw(exception, (struct type_info *)off_1EA992588, MEMORY[0x1E0DE42E0]);
  }
  result = MIL::Builder::OperationBuilder::GetIRArgument(Operation, (uint64_t)a2, a3);
  *a4 = Operation;
  a4[1] = result;
  return result;
}

void sub_1E0619EB0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *MIL::Matching::MatchView::TryGetAttribute@<X0>(MIL::MatchingPrivate::MatchItem **a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t Operation;

  Operation = MIL::MatchingPrivate::MatchItem::GetOperation(*a1);
  return MIL::Builder::OperationBuilder::TryGetAttribute(Operation, a2, a3);
}

unsigned __int8 *MIL::Matching::MatchView::GetAttribute@<X0>(MIL::MatchingPrivate::MatchItem **a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t Operation;
  unsigned __int8 *result;
  _QWORD *exception;
  std::string *v8;
  std::string v9;
  std::string v10;

  Operation = MIL::MatchingPrivate::MatchItem::GetOperation(*a1);
  result = MIL::Builder::OperationBuilder::TryGetAttribute(Operation, a2, a3);
  if (!*a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::operator+<char>();
    v8 = std::string::append(&v9, "'.");
    v10 = *v8;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    MIL::Matching::InvalidMatchAccess::InvalidMatchAccess(exception, (uint64_t)&v10);
  }
  return result;
}

void sub_1E0619FB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  void *v22;
  int v23;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v21);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t MIL::Matching::MatchView::GetAttributes(MIL::MatchingPrivate::MatchItem **this)
{
  MIL::Builder::OperationBuilder *Operation;

  Operation = (MIL::Builder::OperationBuilder *)MIL::MatchingPrivate::MatchItem::GetOperation(*this);
  return MIL::Builder::OperationBuilder::GetAttributes(Operation);
}

void MIL::Matching::MatchView::SetAttribute(MIL::MatchingPrivate::MatchItem **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t Operation;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::string v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  Operation = MIL::MatchingPrivate::MatchItem::GetOperation(*a1);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v17 = *(std::string *)a2;
  v6 = a3[1];
  v15 = *a3;
  v16 = (std::__shared_weak_count *)v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  MIL::Builder::OperationBuilder::SetAttribute(Operation, (uint64_t)&v17, &v15, &v18);
  v9 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
}

void sub_1E061A150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t MIL::Matching::MatchView::GetLastEdge@<X0>(MIL::MatchingPrivate::MatchItem **this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = MIL::MatchingPrivate::MatchItem::GetOperation(*this);
  *a2 = *((_QWORD *)*this + 2);
  return result;
}

uint64_t MIL::Matching::MatchView::GetOperation(MIL::MatchingPrivate::MatchItem **this)
{
  return MIL::MatchingPrivate::MatchItem::GetOperation(*this);
}

uint64_t MIL::Matching::MatchView::GetLength(MIL::MatchingPrivate::MatchItem **this)
{
  return MIL::MatchingPrivate::MatchItem::GetListLength(*this);
}

uint64_t MIL::MatchingPrivate::MatchItem::GetListLength(MIL::MatchingPrivate::MatchItem *this)
{
  std::logic_error *exception;

  if (!this || *((_DWORD *)this + 2) != 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "MatchView is not holding a List");
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  return *(_QWORD *)this;
}

void sub_1E061A214(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t MIL::Matching::MatchView::operator[]@<X0>(MIL::MatchingPrivate::MatchItem **a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t result;
  std::logic_error *exception;

  result = MIL::MatchingPrivate::MatchItem::GetListLength(*a1);
  if (result <= a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::out_of_range::out_of_range[abi:ne180100](exception, "List index out of range");
    __cxa_throw(exception, (struct type_info *)off_1EA992588, MEMORY[0x1E0DE42E0]);
  }
  *a3 = (char *)*a1 + 32 * *((_QWORD *)*a1 + 3) + 32 * a2;
  return result;
}

void sub_1E061A2A8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Matching::MatchView::AsArray<2ul>@<X0>(MIL::MatchingPrivate::MatchItem **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = MIL::MatchingPrivate::MatchItem::CheckArrayLength(*a1, 2uLL);
  v5 = (uint64_t)*a1 + 32 * *((_QWORD *)*a1 + 3);
  *a2 = v5;
  a2[1] = v5 + 32;
  return result;
}

uint64_t MIL::MatchingPrivate::MatchItem::CheckArrayLength(MIL::MatchingPrivate::MatchItem *this, unint64_t a2)
{
  uint64_t result;
  std::logic_error *exception;
  MIL::MatchingPrivate::MatchItem *v6;
  std::logic_error *v7;
  unint64_t ListLength;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  std::string::size_type size;
  std::string *v15;
  __int128 v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  std::string v21;

  result = MIL::MatchingPrivate::MatchItem::GetListLength(this);
  if (result != a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    v6 = this;
    v7 = exception;
    ListLength = MIL::MatchingPrivate::MatchItem::GetListLength(v6);
    std::to_string(&v18, ListLength);
    v9 = std::string::insert(&v18, 0, "Length mismatch: tried to convert a list of ");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v11 = std::string::append(&v19, " elements to an array of length ");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v17, a2);
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = &v17;
    else
      v13 = (std::string *)v17.__r_.__value_.__r.__words[0];
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
    else
      size = v17.__r_.__value_.__l.__size_;
    v15 = std::string::append(&v20, (const std::string::value_type *)v13, size);
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(v7, &v21);
    v7->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(v7, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  return result;
}

void sub_1E061A434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  int v34;
  uint64_t v35;

  if (*(char *)(v35 - 41) < 0)
    operator delete(*(void **)(v35 - 64));
  if (a14 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v34 & 1) == 0)
LABEL_14:
      _Unwind_Resume(a1);
  }
  else if (!v34)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v33);
  goto LABEL_14;
}

uint64_t MIL::Matching::MatchView::AsArray<3ul>@<X0>(MIL::MatchingPrivate::MatchItem **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = MIL::MatchingPrivate::MatchItem::CheckArrayLength(*a1, 3uLL);
  v5 = (uint64_t)*a1 + 32 * *((_QWORD *)*a1 + 3);
  *a2 = v5;
  a2[1] = v5 + 32;
  a2[2] = v5 + 64;
  return result;
}

uint64_t MIL::Matching::MatchView::AsArray<4ul>@<X0>(MIL::MatchingPrivate::MatchItem **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = MIL::MatchingPrivate::MatchItem::CheckArrayLength(*a1, 4uLL);
  v5 = (uint64_t)*a1 + 32 * *((_QWORD *)*a1 + 3);
  *a2 = v5;
  a2[1] = v5 + 32;
  a2[2] = v5 + 64;
  a2[3] = v5 + 96;
  return result;
}

uint64_t MIL::Matching::MatchView::AsArray<5ul>@<X0>(MIL::MatchingPrivate::MatchItem **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = MIL::MatchingPrivate::MatchItem::CheckArrayLength(*a1, 5uLL);
  v5 = (uint64_t)*a1 + 32 * *((_QWORD *)*a1 + 3);
  *a2 = v5;
  a2[1] = v5 + 32;
  a2[2] = v5 + 64;
  a2[3] = v5 + 96;
  a2[4] = v5 + 128;
  return result;
}

uint64_t MIL::Matching::MatchView::AsArray<6ul>@<X0>(MIL::MatchingPrivate::MatchItem **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = MIL::MatchingPrivate::MatchItem::CheckArrayLength(*a1, 6uLL);
  v5 = (uint64_t)*a1 + 32 * *((_QWORD *)*a1 + 3);
  *a2 = v5;
  a2[1] = v5 + 32;
  a2[2] = v5 + 64;
  a2[3] = v5 + 96;
  a2[4] = v5 + 128;
  a2[5] = v5 + 160;
  return result;
}

uint64_t MIL::Matching::MatchView::AsArray<7ul>@<X0>(MIL::MatchingPrivate::MatchItem **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = MIL::MatchingPrivate::MatchItem::CheckArrayLength(*a1, 7uLL);
  v5 = (uint64_t)*a1 + 32 * *((_QWORD *)*a1 + 3);
  *a2 = v5;
  a2[1] = v5 + 32;
  a2[2] = v5 + 64;
  a2[3] = v5 + 96;
  a2[4] = v5 + 128;
  a2[5] = v5 + 160;
  a2[6] = v5 + 192;
  return result;
}

uint64_t MIL::Matching::MatchView::AsArray<8ul>@<X0>(MIL::MatchingPrivate::MatchItem **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = MIL::MatchingPrivate::MatchItem::CheckArrayLength(*a1, 8uLL);
  v5 = (uint64_t)*a1 + 32 * *((_QWORD *)*a1 + 3);
  *a2 = v5;
  a2[1] = v5 + 32;
  a2[2] = v5 + 64;
  a2[3] = v5 + 96;
  a2[4] = v5 + 128;
  a2[5] = v5 + 160;
  a2[6] = v5 + 192;
  a2[7] = v5 + 224;
  return result;
}

uint64_t MIL::Matching::MatchView::AsArray<9ul>@<X0>(MIL::MatchingPrivate::MatchItem **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = MIL::MatchingPrivate::MatchItem::CheckArrayLength(*a1, 9uLL);
  v5 = (uint64_t)*a1 + 32 * *((_QWORD *)*a1 + 3);
  *a2 = v5;
  a2[1] = v5 + 32;
  a2[2] = v5 + 64;
  a2[3] = v5 + 96;
  a2[4] = v5 + 128;
  a2[5] = v5 + 160;
  a2[6] = v5 + 192;
  a2[7] = v5 + 224;
  a2[8] = v5 + 256;
  return result;
}

uint64_t MIL::Matching::MatchView::AsArray<10ul>@<X0>(MIL::MatchingPrivate::MatchItem **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = MIL::MatchingPrivate::MatchItem::CheckArrayLength(*a1, 0xAuLL);
  v5 = (uint64_t)*a1 + 32 * *((_QWORD *)*a1 + 3);
  *a2 = v5;
  a2[1] = v5 + 32;
  a2[2] = v5 + 64;
  a2[3] = v5 + 96;
  a2[4] = v5 + 128;
  a2[5] = v5 + 160;
  a2[6] = v5 + 192;
  a2[7] = v5 + 224;
  a2[8] = v5 + 256;
  a2[9] = v5 + 288;
  return result;
}

uint64_t MIL::Matching::MatchView::AsArray<11ul>@<X0>(MIL::MatchingPrivate::MatchItem **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = MIL::MatchingPrivate::MatchItem::CheckArrayLength(*a1, 0xBuLL);
  v5 = (uint64_t)*a1 + 32 * *((_QWORD *)*a1 + 3);
  *a2 = v5;
  a2[1] = v5 + 32;
  a2[2] = v5 + 64;
  a2[3] = v5 + 96;
  a2[4] = v5 + 128;
  a2[5] = v5 + 160;
  a2[6] = v5 + 192;
  a2[7] = v5 + 224;
  a2[8] = v5 + 256;
  a2[9] = v5 + 288;
  a2[10] = v5 + 320;
  return result;
}

uint64_t MIL::Matching::MatchView::AsArray<12ul>@<X0>(MIL::MatchingPrivate::MatchItem **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = MIL::MatchingPrivate::MatchItem::CheckArrayLength(*a1, 0xCuLL);
  v5 = (uint64_t)*a1 + 32 * *((_QWORD *)*a1 + 3);
  *a2 = v5;
  a2[1] = v5 + 32;
  a2[2] = v5 + 64;
  a2[3] = v5 + 96;
  a2[4] = v5 + 128;
  a2[5] = v5 + 160;
  a2[6] = v5 + 192;
  a2[7] = v5 + 224;
  a2[8] = v5 + 256;
  a2[9] = v5 + 288;
  a2[10] = v5 + 320;
  a2[11] = v5 + 352;
  return result;
}

uint64_t MIL::Matching::MatchView::AsArray<13ul>@<X0>(MIL::MatchingPrivate::MatchItem **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = MIL::MatchingPrivate::MatchItem::CheckArrayLength(*a1, 0xDuLL);
  v5 = (uint64_t)*a1 + 32 * *((_QWORD *)*a1 + 3);
  *a2 = v5;
  a2[1] = v5 + 32;
  a2[2] = v5 + 64;
  a2[3] = v5 + 96;
  a2[4] = v5 + 128;
  a2[5] = v5 + 160;
  a2[6] = v5 + 192;
  a2[7] = v5 + 224;
  a2[8] = v5 + 256;
  a2[9] = v5 + 288;
  a2[10] = v5 + 320;
  a2[11] = v5 + 352;
  a2[12] = v5 + 384;
  return result;
}

uint64_t MIL::Matching::MatchView::AsArray<14ul>@<X0>(MIL::MatchingPrivate::MatchItem **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = MIL::MatchingPrivate::MatchItem::CheckArrayLength(*a1, 0xEuLL);
  v5 = (uint64_t)*a1 + 32 * *((_QWORD *)*a1 + 3);
  *a2 = v5;
  a2[1] = v5 + 32;
  a2[2] = v5 + 64;
  a2[3] = v5 + 96;
  a2[4] = v5 + 128;
  a2[5] = v5 + 160;
  a2[6] = v5 + 192;
  a2[7] = v5 + 224;
  a2[8] = v5 + 256;
  a2[9] = v5 + 288;
  a2[10] = v5 + 320;
  a2[11] = v5 + 352;
  a2[12] = v5 + 384;
  a2[13] = v5 + 416;
  return result;
}

uint64_t MIL::Matching::MatchView::AsArray<15ul>@<X0>(MIL::MatchingPrivate::MatchItem **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = MIL::MatchingPrivate::MatchItem::CheckArrayLength(*a1, 0xFuLL);
  v5 = (uint64_t)*a1 + 32 * *((_QWORD *)*a1 + 3);
  *a2 = v5;
  a2[1] = v5 + 32;
  a2[2] = v5 + 64;
  a2[3] = v5 + 96;
  a2[4] = v5 + 128;
  a2[5] = v5 + 160;
  a2[6] = v5 + 192;
  a2[7] = v5 + 224;
  a2[8] = v5 + 256;
  a2[9] = v5 + 288;
  a2[10] = v5 + 320;
  a2[11] = v5 + 352;
  a2[12] = v5 + 384;
  a2[13] = v5 + 416;
  a2[14] = v5 + 448;
  return result;
}

uint64_t MIL::Matching::MatchView::AsArray<16ul>@<X0>(MIL::MatchingPrivate::MatchItem **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = MIL::MatchingPrivate::MatchItem::CheckArrayLength(*a1, 0x10uLL);
  v5 = (uint64_t)*a1 + 32 * *((_QWORD *)*a1 + 3);
  *a2 = v5;
  a2[1] = v5 + 32;
  a2[2] = v5 + 64;
  a2[3] = v5 + 96;
  a2[4] = v5 + 128;
  a2[5] = v5 + 160;
  a2[6] = v5 + 192;
  a2[7] = v5 + 224;
  a2[8] = v5 + 256;
  a2[9] = v5 + 288;
  a2[10] = v5 + 320;
  a2[11] = v5 + 352;
  a2[12] = v5 + 384;
  a2[13] = v5 + 416;
  a2[14] = v5 + 448;
  a2[15] = v5 + 480;
  return result;
}

__n128 MIL::Matching::ArgumentView::ArgumentView(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

__n128 MIL::Matching::ArgumentView::operator=(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t MIL::Matching::ArgumentView::GetType(MIL::Matching::ArgumentView *this)
{
  uint64_t v2;
  uint64_t result;
  uint64_t OwningBlock;
  uint64_t Name;
  _QWORD *exception;
  std::string *v7;
  std::string v8;
  std::string v9;

  v2 = (*(uint64_t (**)(_QWORD))(***((_QWORD ***)this + 1) + 40))(**((_QWORD **)this + 1));
  if (v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  OwningBlock = MIL::Builder::OperationBuilder::GetOwningBlock(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)this);
  Name = MIL::IRArgument::GetName(**((MIL::IRArgument ***)this + 1));
  result = MIL::Builder::BlockBuilder::GetType(OwningBlock, Name);
  if (!result)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    MIL::IRArgument::GetName(**((MIL::IRArgument ***)this + 1));
    std::operator+<char>();
    v7 = std::string::append(&v8, "' is unknown");
    v9 = *v7;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    MIL::Matching::InvalidMatchAccess::InvalidMatchAccess(exception, (uint64_t)&v9);
  }
  return result;
}

void sub_1E061AC48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t MIL::Matching::ArgumentView::TryGetName(MIL::Matching::ArgumentView *this)
{
  return (*(uint64_t (**)(_QWORD))(***((_QWORD ***)this + 1) + 32))(**((_QWORD **)this + 1));
}

uint64_t MIL::Matching::ArgumentView::TryGetValue(MIL::Matching::ArgumentView *this)
{
  MIL::IRArgument **v2;
  uint64_t v3;
  uint64_t OwningBlock;
  unsigned __int8 *Name;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v2 = (MIL::IRArgument **)*((_QWORD *)this + 1);
  v3 = (*(uint64_t (**)(MIL::IRArgument *))(*(_QWORD *)*v2 + 40))(*v2);
  if (!v3)
  {
    OwningBlock = MIL::Builder::OperationBuilder::GetOwningBlock(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)this);
    Name = (unsigned __int8 *)MIL::IRArgument::GetName(*v2);
    MIL::Builder::BlockBuilder::GetValue(OwningBlock, Name, &v10);
    v3 = v10;
    v7 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  return v3;
}

uint64_t MIL::Matching::ArgumentView::GetValue(MIL::Matching::ArgumentView *this)
{
  uint64_t result;
  _QWORD *exception;
  _QWORD v3[3];

  result = MIL::Matching::ArgumentView::TryGetValue(this);
  if (!result)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v3, "Selected argument doesn't have a known value");
    MIL::Matching::InvalidMatchAccess::InvalidMatchAccess(exception, (uint64_t)v3);
  }
  return result;
}

void sub_1E061ADE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t MIL::Matching::ArgumentView::IsConnectedTo(MIL::Matching::ArgumentView *this, const MIL::Matching::OutputView *a2)
{
  uint64_t result;
  unsigned __int8 *v4;
  uint64_t OutputName;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  BOOL v17;

  result = (*(uint64_t (**)(_QWORD))(***((_QWORD ***)this + 1) + 32))(**((_QWORD **)this + 1));
  if (result)
  {
    v4 = (unsigned __int8 *)result;
    OutputName = MIL::Builder::OperationBuilder::GetOutputName(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)a2, *((_QWORD *)a2 + 1));
    v6 = v4[23];
    if ((v6 & 0x80u) == 0)
      v7 = v4[23];
    else
      v7 = *((_QWORD *)v4 + 1);
    v8 = *(unsigned __int8 *)(OutputName + 23);
    v9 = (char)v8;
    if ((v8 & 0x80u) != 0)
      v8 = *(_QWORD *)(OutputName + 8);
    if (v7 == v8)
    {
      if (v9 >= 0)
        v10 = (unsigned __int8 *)OutputName;
      else
        v10 = *(unsigned __int8 **)OutputName;
      if ((v6 & 0x80) != 0)
      {
        return memcmp(*(const void **)v4, v10, *((_QWORD *)v4 + 1)) == 0;
      }
      else if (v4[23])
      {
        v11 = v6 - 1;
        do
        {
          v13 = *v4++;
          v12 = v13;
          v15 = *v10++;
          v14 = v15;
          v17 = v11-- != 0;
          result = v12 == v14;
        }
        while (v12 == v14 && v17);
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t MIL::Matching::ArgumentView::IsSameVariableAs(MIL::Matching::ArgumentView *this, const MIL::Matching::ArgumentView *a2)
{
  uint64_t result;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v16;

  result = (*(uint64_t (**)(_QWORD))(***((_QWORD ***)this + 1) + 32))(**((_QWORD **)this + 1));
  if (result)
  {
    v4 = (unsigned __int8 *)result;
    result = (*(uint64_t (**)(_QWORD))(***((_QWORD ***)a2 + 1) + 32))(**((_QWORD **)a2 + 1));
    if (result)
    {
      v5 = v4[23];
      if ((v5 & 0x80u) == 0)
        v6 = v4[23];
      else
        v6 = *((_QWORD *)v4 + 1);
      v7 = *(unsigned __int8 *)(result + 23);
      v8 = (char)v7;
      if ((v7 & 0x80u) != 0)
        v7 = *(_QWORD *)(result + 8);
      if (v6 == v7)
      {
        if (v8 >= 0)
          v9 = (unsigned __int8 *)result;
        else
          v9 = *(unsigned __int8 **)result;
        if ((v5 & 0x80) != 0)
        {
          return memcmp(*(const void **)v4, v9, *((_QWORD *)v4 + 1)) == 0;
        }
        else if (v4[23])
        {
          v10 = v5 - 1;
          do
          {
            v12 = *v4++;
            v11 = v12;
            v14 = *v9++;
            v13 = v14;
            v16 = v10-- != 0;
            result = v11 == v13;
          }
          while (v11 == v13 && v16);
        }
        else
        {
          return 1;
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t MIL::Matching::ArgumentView::IsSameValueAs(MIL::Matching::ArgumentView *this, const MIL::Matching::ArgumentView *a2)
{
  uint64_t Value;
  uint64_t v4;
  uint64_t v5;

  Value = MIL::Matching::ArgumentView::TryGetValue(this);
  if (Value && (v4 = Value, (v5 = MIL::Matching::ArgumentView::TryGetValue(a2)) != 0))
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, v5);
  else
    return 0;
}

uint64_t MIL::Matching::ArgumentView::IsSameAs(MIL::Matching::ArgumentView *this, const MIL::Matching::ArgumentView *a2)
{
  if ((MIL::Matching::ArgumentView::IsSameVariableAs(this, a2) & 1) != 0)
    return 1;
  else
    return MIL::Matching::ArgumentView::IsSameValueAs(this, a2);
}

_QWORD *MIL::Matching::EdgeView::EdgeView(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

{
  *result = *a2;
  return result;
}

{
  *result = *a2;
  return result;
}

{
  *result = *a2;
  return result;
}

_QWORD *MIL::Matching::EdgeView::operator=(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

{
  *result = *a2;
  return result;
}

BOOL MIL::Matching::EdgeView::IsPresent(MIL::Matching::EdgeView *this)
{
  return *(_QWORD *)this != 0;
}

uint64_t MIL::Matching::EdgeView::GetProducerOutputIndex(MIL::Matching::EdgeView *this)
{
  MIL::Builder::DataDependency *DataDependency;

  DataDependency = (MIL::Builder::DataDependency *)MIL::Matching::EdgeView::EdgeViewImpl::GetDataDependency(this);
  return MIL::Builder::DataDependency::GetProducerOutputIndex(DataDependency);
}

uint64_t MIL::Matching::EdgeView::EdgeViewImpl::GetDataDependency(MIL::Matching::EdgeView::EdgeViewImpl *this)
{
  uint64_t result;
  std::logic_error *exception;

  result = *(_QWORD *)this;
  if (!result)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Attempted to access an absent edge");
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  return result;
}

void sub_1E061B11C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Matching::EdgeView::GetConsumerParameterName(MIL::Matching::EdgeView *this)
{
  MIL::Builder::DataDependency *DataDependency;

  DataDependency = (MIL::Builder::DataDependency *)MIL::Matching::EdgeView::EdgeViewImpl::GetDataDependency(this);
  return MIL::Builder::DataDependency::GetConsumerParameterName(DataDependency);
}

uint64_t MIL::Matching::EdgeView::GetConsumerArgumentIndex(MIL::Matching::EdgeView *this)
{
  MIL::Builder::DataDependency *DataDependency;

  DataDependency = (MIL::Builder::DataDependency *)MIL::Matching::EdgeView::EdgeViewImpl::GetDataDependency(this);
  return MIL::Builder::DataDependency::GetConsumerArgumentIndex(DataDependency);
}

MIL::Matching::Match *MIL::Matching::Match::Match(MIL::Matching::Match *this)
{
  void **v2;
  char *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  __int128 v9;

  v2 = (void **)operator new();
  *v2 = 0;
  v2[1] = 0;
  v2[2] = 0;
  *(_QWORD *)this = v2;
  v3 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<void ()(MIL::Transform::ProgramTransformer &)>>>((uint64_t)(v2 + 2), 1uLL);
  v5 = &v3[32 * v4];
  *(_QWORD *)v3 = 0;
  *((_DWORD *)v3 + 2) = 0;
  v6 = v3 + 32;
  *((_QWORD *)v3 + 2) = 0;
  *((_QWORD *)v3 + 3) = 0;
  v8 = (char *)*v2;
  v7 = (char *)v2[1];
  if (v7 != *v2)
  {
    do
    {
      v9 = *((_OWORD *)v7 - 1);
      *((_OWORD *)v3 - 2) = *((_OWORD *)v7 - 2);
      *((_OWORD *)v3 - 1) = v9;
      v3 -= 32;
      v7 -= 32;
    }
    while (v7 != v8);
    v7 = v8;
  }
  *v2 = v3;
  v2[1] = v6;
  v2[2] = v5;
  if (v7)
    operator delete(v7);
  v2[1] = v6;
  return this;
}

void sub_1E061B20C(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    std::default_delete<MIL::Matching::Match::MatchImpl>::operator()[abi:ne180100]((uint64_t)v1, v3);
  _Unwind_Resume(exception_object);
}

MIL::Matching::Match *MIL::Matching::Match::Match(MIL::Matching::Match *this, char ***a2)
{
  uint64_t v4;

  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)v4 = 0;
  *(_QWORD *)this = v4;
  if ((char **)v4 != *a2)
    std::vector<MIL::MatchingPrivate::MatchItem>::__assign_with_size[abi:ne180100]<MIL::MatchingPrivate::MatchItem*,MIL::MatchingPrivate::MatchItem*>((char *)v4, **a2, (uint64_t)(*a2)[1], ((*a2)[1] - **a2) >> 5);
  return this;
}

void sub_1E061B294(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    std::default_delete<MIL::Matching::Match::MatchImpl>::operator()[abi:ne180100]((uint64_t)v1, v3);
  _Unwind_Resume(exception_object);
}

_QWORD *MIL::Matching::Match::Match(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

char **MIL::Matching::Match::operator=(char **a1, char ***a2)
{
  char *v3;

  v3 = *a1;
  if (v3 != (char *)*a2)
    std::vector<MIL::MatchingPrivate::MatchItem>::__assign_with_size[abi:ne180100]<MIL::MatchingPrivate::MatchItem*,MIL::MatchingPrivate::MatchItem*>(v3, **a2, (uint64_t)(*a2)[1], ((*a2)[1] - **a2) >> 5);
  return a1;
}

uint64_t *MIL::Matching::Match::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
    std::default_delete<MIL::Matching::Match::MatchImpl>::operator()[abi:ne180100]((uint64_t)a1, v4);
  return a1;
}

void MIL::Matching::Match::~Match(MIL::Matching::Match *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
    std::default_delete<MIL::Matching::Match::MatchImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
}

{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
    std::default_delete<MIL::Matching::Match::MatchImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
}

uint64_t MIL::Matching::Match::GetRootView@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(*(_QWORD *)this + 8) - 32;
  return this;
}

MIL::MatchingPrivate::MatchConverter *MIL::MatchingPrivate::MatchConverter::MatchConverter(MIL::MatchingPrivate::MatchConverter *this)
{
  _OWORD *v2;

  v2 = (_OWORD *)operator new();
  *v2 = 0u;
  v2[1] = 0u;
  v2[2] = 0u;
  *(_QWORD *)this = v2;
  return this;
}

void MIL::MatchingPrivate::MatchConverter::~MatchConverter(MIL::MatchingPrivate::MatchConverter *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
    std::default_delete<MIL::MatchingPrivate::MatchConverter::MatchConverterImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
}

uint64_t *MIL::MatchingPrivate::MatchConverter::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
    std::default_delete<MIL::MatchingPrivate::MatchConverter::MatchConverterImpl>::operator()[abi:ne180100]((uint64_t)a1, v4);
  return a1;
}

void MIL::MatchingPrivate::MatchConverter::ConvertMatch(uint64_t ***a1, unint64_t a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t **v6;
  char *v7;
  char **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t i;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t *v50;
  char *v51;
  __int128 v52;
  char *v53;
  char *v54;
  uint64_t *v55;
  char *v56;
  __int128 v57;
  __int128 *v58;
  std::logic_error *exception;
  unint64_t *v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;

  v6 = *a1;
  v8 = (char **)(*a1 + 3);
  v7 = *v8;
  v6[1] = **a1;
  v6[4] = (uint64_t *)v7;
  v9 = *a4;
  std::vector<MIL::MatchingPrivate::MatchItem>::resize(*a4, 1uLL);
  if (a2)
  {
    v60 = (unint64_t *)(v6 + 5);
    do
    {
      MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::AssertChunkIsAllocated((uint64_t)a3, a2 & 0xFFFFFFFFFFFFFFLL);
      v10 = *(_QWORD *)(*a3 + ((a2 >> 3) & 0x1FFFFFFFFFFFF8)) + 160 * (a2 & 0x3F) + 24 * HIBYTE(a2);
      v11 = v10 - 24;
      v12 = *(_DWORD *)(v10 - 16);
      if (v12)
      {
        if (v12 == 1)
        {
          v20 = v6[1];
          v21 = (unint64_t)v6[4];
          v22 = (uint64_t)(v21 - (_QWORD)v6[3]) >> 5;
          if (*v6 != v20)
          {
            v22 -= *(v20 - 1);
            v6[1] = v20 - 1;
          }
          v24 = *(void **)v9;
          v23 = *(_QWORD *)(v9 + 8);
          for (i = v22; i; --i)
          {
            PushItem((__int128 *)(v21 - 32), (void **)v9);
            v21 = (unint64_t)(v6[4] - 4);
            v6[4] = (uint64_t *)v21;
          }
          v26 = (v23 - (uint64_t)v24) >> 5;
          v62 = *(_OWORD *)v11;
          v64 = *(_QWORD *)(v11 + 16);
          if (v21 >= *v60)
          {
            v40 = (uint64_t)(v21 - (_QWORD)*v8) >> 5;
            v41 = v40 + 1;
            if ((unint64_t)(v40 + 1) >> 59)
LABEL_68:
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v42 = *v60 - (_QWORD)*v8;
            if (v42 >> 4 > v41)
              v41 = v42 >> 4;
            if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFE0)
              v43 = 0x7FFFFFFFFFFFFFFLL;
            else
              v43 = v41;
            if (v43)
              v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<void ()(MIL::Transform::ProgramTransformer &)>>>((uint64_t)v60, v43);
            else
              v44 = 0;
            v53 = &v44[32 * v40];
            *(_OWORD *)v53 = v62;
            *((_QWORD *)v53 + 2) = v64;
            *((_QWORD *)v53 + 3) = v26;
            v55 = v6[3];
            v54 = (char *)v6[4];
            v56 = v53;
            if (v54 != (char *)v55)
            {
              do
              {
                v57 = *((_OWORD *)v54 - 1);
                *((_OWORD *)v56 - 2) = *((_OWORD *)v54 - 2);
                *((_OWORD *)v56 - 1) = v57;
                v56 -= 32;
                v54 -= 32;
              }
              while (v54 != (char *)v55);
              v54 = *v8;
            }
            v28 = (unint64_t)(v53 + 32);
            v6[3] = (uint64_t *)v56;
            v6[4] = (uint64_t *)(v53 + 32);
            v6[5] = (uint64_t *)&v44[32 * v43];
            if (v54)
              operator delete(v54);
          }
          else
          {
            v27 = *(_QWORD *)(v11 + 16);
            *(_OWORD *)v21 = *(_OWORD *)v11;
            *(_QWORD *)(v21 + 16) = v27;
            *(_QWORD *)(v21 + 24) = v26;
            v28 = v21 + 32;
          }
          v6[4] = (uint64_t *)v28;
          if (*(_DWORD *)(v28 - 24) != 1)
            *(_DWORD *)(v28 - 24) = 1;
          *(_QWORD *)(v28 - 32) = v22;
        }
        else
        {
          if (v12 != 2)
          {
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(exception, "Trying to visit a std::variant that is in an invalid state");
            goto LABEL_67;
          }
          v13 = ((char *)v6[4] - (char *)v6[3]) >> 5;
          v15 = v6[1];
          v14 = (unint64_t)v6[2];
          if ((unint64_t)v15 >= v14)
          {
            v29 = *v6;
            v30 = v15 - *v6;
            v31 = v30 + 1;
            if ((unint64_t)(v30 + 1) >> 61)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v32 = v14 - (_QWORD)v29;
            if (v32 >> 2 > v31)
              v31 = v32 >> 2;
            if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
              v33 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v33 = v31;
            if (v33)
            {
              v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(v6 + 2), v33);
              v29 = *v6;
              v15 = v6[1];
            }
            else
            {
              v34 = 0;
            }
            v45 = (uint64_t *)&v34[8 * v30];
            *v45 = v13;
            v46 = v45 + 1;
            while (v15 != v29)
            {
              v47 = *--v15;
              *--v45 = v47;
            }
            *v6 = v45;
            v6[1] = v46;
            v6[2] = (uint64_t *)&v34[8 * v33];
            if (v29)
              operator delete(v29);
            v6[1] = v46;
          }
          else
          {
            *v15 = v13;
            v6[1] = v15 + 1;
          }
        }
      }
      else
      {
        v61 = *(_OWORD *)v11;
        v63 = *(_QWORD *)(v11 + 16);
        v16 = v6[4];
        v17 = v6[5];
        if (v16 >= v17)
        {
          v35 = ((char *)v16 - *v8) >> 5;
          v36 = v35 + 1;
          if ((unint64_t)(v35 + 1) >> 59)
            goto LABEL_68;
          v37 = (char *)v17 - *v8;
          if (v37 >> 4 > v36)
            v36 = v37 >> 4;
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFE0)
            v38 = 0x7FFFFFFFFFFFFFFLL;
          else
            v38 = v36;
          if (v38)
            v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<void ()(MIL::Transform::ProgramTransformer &)>>>((uint64_t)v60, v38);
          else
            v39 = 0;
          v48 = &v39[32 * v35];
          *(_OWORD *)v48 = v61;
          *((_QWORD *)v48 + 2) = v63;
          *((_QWORD *)v48 + 3) = 0;
          v50 = v6[3];
          v49 = (char *)v6[4];
          v51 = v48;
          if (v49 != (char *)v50)
          {
            do
            {
              v52 = *((_OWORD *)v49 - 1);
              *((_OWORD *)v51 - 2) = *((_OWORD *)v49 - 2);
              *((_OWORD *)v51 - 1) = v52;
              v51 -= 32;
              v49 -= 32;
            }
            while (v49 != (char *)v50);
            v49 = *v8;
          }
          v19 = v48 + 32;
          v6[3] = (uint64_t *)v51;
          v6[4] = (uint64_t *)(v48 + 32);
          v6[5] = (uint64_t *)&v39[32 * v38];
          if (v49)
            operator delete(v49);
        }
        else
        {
          v18 = *(_QWORD *)(v11 + 16);
          *(_OWORD *)v16 = *(_OWORD *)v11;
          v16[2] = v18;
          v16[3] = 0;
          v19 = (char *)(v16 + 4);
        }
        v6[4] = (uint64_t *)v19;
      }
      a2 = MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Pop(a3, a2);
    }
    while (a2);
  }
  v58 = (__int128 *)v6[3];
  if ((char *)v6[4] - (char *)v58 != 32)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Malformed match token string");
LABEL_67:
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  PushItem(v58, (void **)v9);
}

void sub_1E061B8D8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<MIL::MatchingPrivate::MatchItem>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 5;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 32 * a2;
  }
  else
  {
    std::vector<MIL::MatchingPrivate::MatchItem>::__append((void **)a1, a2 - v2);
  }
}

void PushItem(__int128 *a1, void **a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v5 = (char *)*a2;
  v4 = (char *)a2[1];
  v6 = v4 - (_BYTE *)*a2;
  v7 = *((_QWORD *)a1 + 3) - (v6 >> 5);
  v24 = *a1;
  v25 = *((_QWORD *)a1 + 2);
  v8 = (uint64_t)(a2 + 2);
  v9 = (char *)a2[2];
  if (v4 >= v9)
  {
    v13 = v6 >> 5;
    v14 = (v6 >> 5) + 1;
    if (v14 >> 59)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v15 = v9 - v5;
    v16 = (v9 - v5) >> 4;
    if (v16 > v14)
      v14 = v16;
    if (v15 >= 0x7FFFFFFFFFFFFFE0)
      v17 = 0x7FFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<void ()(MIL::Transform::ProgramTransformer &)>>>(v8, v17);
    else
      v18 = 0;
    v19 = &v18[32 * v13];
    v20 = &v18[32 * v17];
    *(_OWORD *)v19 = v24;
    *((_QWORD *)v19 + 2) = v25;
    *((_QWORD *)v19 + 3) = v7;
    v12 = v19 + 32;
    v22 = (char *)*a2;
    v21 = (char *)a2[1];
    if (v21 != *a2)
    {
      do
      {
        v23 = *((_OWORD *)v21 - 1);
        *((_OWORD *)v19 - 2) = *((_OWORD *)v21 - 2);
        *((_OWORD *)v19 - 1) = v23;
        v19 -= 32;
        v21 -= 32;
      }
      while (v21 != v22);
      v21 = (char *)*a2;
    }
    *a2 = v19;
    a2[1] = v12;
    a2[2] = v20;
    if (v21)
      operator delete(v21);
  }
  else
  {
    v10 = *a1;
    v11 = *((_QWORD *)a1 + 2);
    *(_OWORD *)v4 = v10;
    *((_QWORD *)v4 + 2) = v11;
    *((_QWORD *)v4 + 3) = v7;
    v12 = v4 + 32;
  }
  a2[1] = v12;
}

uint64_t MIL::MatchingPrivate::MatchPrivate::GetOperation(MIL::MatchingPrivate::MatchItem **a1)
{
  return MIL::MatchingPrivate::MatchItem::GetOperation(*a1);
}

uint64_t MIL::MatchingPrivate::MatchPrivate::GetIRArgumentFromArgumentView@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v3 = *(uint64_t **)(this + 8);
  v5 = *v3;
  v4 = v3[1];
  *a2 = v5;
  a2[1] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return this;
}

void MIL::MatchingPrivate::MatchPrivate::GetAllMatchedOperations(uint64_t ***a1, void **a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v2 = **a1;
  v3 = (*a1)[1];
  if (v2 != v3)
  {
    v5 = (uint64_t)(a2 + 2);
    do
    {
      if (v2)
      {
        if (!*((_DWORD *)v2 + 2))
        {
          v6 = *v2;
          if (*v2)
          {
            v8 = a2[1];
            v7 = (unint64_t)a2[2];
            if ((unint64_t)v8 >= v7)
            {
              v10 = ((char *)v8 - (_BYTE *)*a2) >> 3;
              if ((unint64_t)(v10 + 1) >> 61)
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              v11 = v7 - (_QWORD)*a2;
              v12 = v11 >> 2;
              if (v11 >> 2 <= (unint64_t)(v10 + 1))
                v12 = v10 + 1;
              if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
                v13 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v13 = v12;
              if (v13)
              {
                v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v5, v13);
                v6 = *v2;
              }
              else
              {
                v14 = 0;
              }
              v15 = &v14[8 * v10];
              *(_QWORD *)v15 = v6;
              v9 = v15 + 8;
              v17 = (char *)*a2;
              v16 = (char *)a2[1];
              if (v16 != *a2)
              {
                do
                {
                  v18 = *((_QWORD *)v16 - 1);
                  v16 -= 8;
                  *((_QWORD *)v15 - 1) = v18;
                  v15 -= 8;
                }
                while (v16 != v17);
                v16 = (char *)*a2;
              }
              *a2 = v15;
              a2[1] = v9;
              a2[2] = &v14[8 * v13];
              if (v16)
                operator delete(v16);
            }
            else
            {
              *v8 = v6;
              v9 = v8 + 1;
            }
            a2[1] = v9;
          }
        }
      }
      v2 += 4;
    }
    while (v2 != v3);
  }
}

uint64_t MIL::MatchingPrivate::MatchPrivate::GetOperationAndOutputIndex(MIL::MatchingPrivate::MatchPrivate *this, const MIL::Matching::OutputView *a2)
{
  return *(_QWORD *)this;
}

void std::__shared_ptr_emplace<MIL::Matching::InvalidMatchAccess::InvalidMatchAccessImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA99B3B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIL::Matching::InvalidMatchAccess::InvalidMatchAccessImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA99B3B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E0C023A0);
}

void std::__shared_ptr_emplace<MIL::Matching::InvalidMatchAccess::InvalidMatchAccessImpl>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void std::default_delete<MIL::Matching::Match::MatchImpl>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    v2 = *(void **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)(a2 + 8) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x1E0C023A0);
  }
}

char *std::vector<MIL::MatchingPrivate::MatchItem>::__assign_with_size[abi:ne180100]<MIL::MatchingPrivate::MatchItem*,MIL::MatchingPrivate::MatchItem*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 5)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 59)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    if (v8 >> 4 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
      v11 = 0x7FFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<MIL::MatchingPrivate::MatchItem>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 5;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[32 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

char *std::vector<MIL::MatchingPrivate::MatchItem>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<void ()(MIL::Transform::ProgramTransformer &)>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void std::default_delete<MIL::MatchingPrivate::MatchConverter::MatchConverterImpl>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;

  if (a2)
  {
    v3 = *(void **)(a2 + 24);
    if (v3)
    {
      *(_QWORD *)(a2 + 32) = v3;
      operator delete(v3);
    }
    v4 = *(void **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)(a2 + 8) = v4;
      operator delete(v4);
    }
    JUMPOUT(0x1E0C023A0);
  }
}

void std::vector<MIL::MatchingPrivate::MatchItem>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 32 * a2);
      v7 += 32 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 5);
    if (v9 >> 59)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 5;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 4 > v9)
      v9 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<void ()(MIL::Transform::ProgramTransformer &)>>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[32 * v10];
    v15 = &v13[32 * v12];
    bzero(v14, 32 * a2);
    v16 = &v14[32 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_OWORD *)v17 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v17 - 2);
        *((_OWORD *)v14 - 1) = v19;
        v14 -= 32;
        v17 -= 32;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

MIL::Matching::Matcher *MIL::Matching::Matcher::Matcher(MIL::Matching::Matcher *this, MIL::Builder::BlockBuilder *a2, MIL::Builder::OperationBuilder *a3, const MIL::Matching::CompiledPattern *a4)
{
  MIL::Matching::Matcher::MatcherImpl *v8;

  v8 = (MIL::Matching::Matcher::MatcherImpl *)operator new();
  MIL::Matching::Matcher::MatcherImpl::MatcherImpl(v8, a4, a2, a3);
  *(_QWORD *)this = v8;
  return this;
}

void sub_1E061BF40(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1E0C023A0](v1, 0x1062C40F7BBE452);
  _Unwind_Resume(a1);
}

void MIL::Matching::Matcher::~Matcher(MIL::Matching::Matcher *this)
{
  _BYTE *v1;

  v1 = *(_BYTE **)this;
  *(_QWORD *)this = 0;
  if (v1)
    std::default_delete<MIL::Matching::Matcher::MatcherImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
}

uint64_t MIL::Matching::Matcher::Reset(MIL::Matching::Matcher *this, MIL::Builder::BlockBuilder *a2, MIL::Builder::OperationBuilder *a3, const MIL::Matching::CompiledPattern *a4)
{
  MIL::MatchingPrivate::CompiledPatternPrivate *v7;
  MIL::Matching::Machine *v8;
  const MIL::Matching::CompiledPattern *v9;
  const MIL::Matching::Instruction *FirstInstruction;

  std::optional<MIL::Matching::CompiledPattern>::operator=[abi:ne180100]<MIL::Matching::CompiledPattern const&,void>(*(_QWORD *)this, (uint64_t *)a4);
  v7 = *(MIL::MatchingPrivate::CompiledPatternPrivate **)this;
  v8 = (MIL::Matching::Machine *)(*(_QWORD *)this + 24);
  FirstInstruction = (const MIL::Matching::Instruction *)MIL::MatchingPrivate::CompiledPatternPrivate::GetFirstInstruction(v7, v9);
  return MIL::Matching::Machine::Reset(v8, FirstInstruction, a2, a3);
}

uint64_t std::optional<MIL::Matching::CompiledPattern>::operator=[abi:ne180100]<MIL::Matching::CompiledPattern const&,void>(uint64_t a1, uint64_t *a2)
{
  if (*(_BYTE *)(a1 + 16))
  {
    MIL::Matching::CompiledPattern::operator=((_QWORD *)a1, a2);
  }
  else
  {
    MIL::Matching::CompiledPattern::CompiledPattern((_QWORD *)a1, a2);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t MIL::Matching::Matcher::FindNextMatch(uint64_t a1, uint64_t *a2, std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep a3)
{
  int NextMatch;

  NextMatch = MIL::Matching::Machine::FindNextMatch((MIL::Matching::Machine::MachineImpl **)(*(_QWORD *)a1 + 24), a2, a3);
  if (NextMatch == 2)
    return 2;
  else
    return NextMatch == 1;
}

MIL::Matching::Matcher::MatcherImpl *MIL::Matching::Matcher::MatcherImpl::MatcherImpl(MIL::Matching::Matcher::MatcherImpl *this, const MIL::Matching::CompiledPattern *a2, MIL::Builder::BlockBuilder *a3, MIL::Builder::OperationBuilder *a4)
{
  MIL::MatchingPrivate::CompiledPatternPrivate *v7;
  const MIL::Matching::CompiledPattern *v8;
  const MIL::Matching::Instruction *FirstInstruction;

  v7 = (MIL::MatchingPrivate::CompiledPatternPrivate *)MIL::Matching::CompiledPattern::CompiledPattern(this, a2);
  *((_BYTE *)v7 + 16) = 1;
  FirstInstruction = (const MIL::Matching::Instruction *)MIL::MatchingPrivate::CompiledPatternPrivate::GetFirstInstruction(v7, v8);
  MIL::Matching::Machine::Machine((MIL::Matching::Matcher::MatcherImpl *)((char *)this + 24), FirstInstruction, a3, a4);
  return this;
}

void sub_1E061C0B4(_Unwind_Exception *exception_object)
{
  MIL::Matching::CompiledPattern *v1;

  if (*((_BYTE *)v1 + 16))
    MIL::Matching::CompiledPattern::~CompiledPattern(v1);
  _Unwind_Resume(exception_object);
}

void std::default_delete<MIL::Matching::Matcher::MatcherImpl>::operator()[abi:ne180100](uint64_t a1, _BYTE *a2)
{
  if (a2)
  {
    MIL::Matching::Machine::~Machine((MIL::Matching::Machine *)(a2 + 24));
    if (a2[16])
      MIL::Matching::CompiledPattern::~CompiledPattern((MIL::Matching::CompiledPattern *)a2);
    JUMPOUT(0x1E0C023A0);
  }
}

Pattern *MIL::Matching::Pattern::Pattern(Pattern *this, const Pattern *a2)
{
  Pattern v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a2[1];
  *this = *a2;
  this[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(*(_QWORD *)&v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

_QWORD *MIL::Matching::Pattern::Pattern(_QWORD *this, const MIL::Matching::Pattern *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *((_QWORD *)a2 + 1);
  *this = *(_QWORD *)a2;
  this[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

_QWORD *MIL::Matching::Pattern::operator=(_QWORD *a1, uint64_t *a2)
{
  std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](a1, a2);
  return a1;
}

uint64_t MIL::Matching::Pattern::DebugString(MIL::Matching::Pattern *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 24))(*(_QWORD *)this);
}

void MIL::Matching::Pattern::PatternImpl::OperationPredicate::DebugString(std::string *a1@<X8>)
{
  std::string *v3;
  std::string v4;

  std::operator+<char>();
  v3 = std::string::append(&v4, ")");
  *a1 = *v3;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
}

void sub_1E061C21C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *MIL::Matching::Op@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  char *result;

  v4 = operator new(0x38uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1EA99B6D0;
  *((_OWORD *)v4 + 2) = *(_OWORD *)a1;
  v4[6] = *(_QWORD *)(a1 + 16);
  a2[1] = v4;
  v4[3] = &off_1EA99B448;
  result = (char *)(v4 + 3);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *a2 = result;
  return result;
}

void MIL::Matching::Pattern::PatternImpl::Maybe::DebugString(MIL::Matching::Pattern::PatternImpl::Maybe *this@<X0>, std::string *a2@<X8>)
{
  std::string *v3;
  __int128 v4;
  std::string *v5;
  std::string v6;
  std::string v7;

  (*(void (**)(std::string *__return_ptr))(**((_QWORD **)this + 1) + 24))(&v6);
  v3 = std::string::insert(&v6, 0, "Maybe(");
  v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v7.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v7.__r_.__value_.__l.__data_ = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  v5 = std::string::append(&v7, ")");
  *a2 = *v5;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
}

void sub_1E061C348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *MIL::Matching::Maybe@<X0>(MIL::Matching *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = operator new(0x30uLL);
  result[1] = 0;
  result[2] = 0;
  *result = &off_1EA99B720;
  result[3] = &off_1EA99B490;
  v6 = *((_QWORD *)this + 1);
  result[4] = *(_QWORD *)this;
  result[5] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result + 3;
  a2[1] = result;
  return result;
}

void MIL::Matching::Pattern::PatternImpl::ZeroOrMore::DebugString(MIL::Matching::Pattern::PatternImpl::ZeroOrMore *this@<X0>, std::string *a2@<X8>)
{
  std::string *v3;
  __int128 v4;
  std::string *v5;
  std::string v6;
  std::string v7;

  (*(void (**)(std::string *__return_ptr))(**((_QWORD **)this + 1) + 24))(&v6);
  v3 = std::string::insert(&v6, 0, "ZeroOrMore(");
  v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v7.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v7.__r_.__value_.__l.__data_ = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  v5 = std::string::append(&v7, ")");
  *a2 = *v5;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
}

void sub_1E061C494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *MIL::Matching::ZeroOrMore@<X0>(MIL::Matching *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = operator new(0x30uLL);
  result[1] = 0;
  result[2] = 0;
  *result = &off_1EA99B770;
  result[3] = &off_1EA99B4D8;
  v6 = *((_QWORD *)this + 1);
  result[4] = *(_QWORD *)this;
  result[5] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result + 3;
  a2[1] = result;
  return result;
}

void MIL::Matching::Pattern::PatternImpl::OneOrMore::DebugString(MIL::Matching::Pattern::PatternImpl::OneOrMore *this@<X0>, std::string *a2@<X8>)
{
  std::string *v3;
  __int128 v4;
  std::string *v5;
  std::string v6;
  std::string v7;

  (*(void (**)(std::string *__return_ptr))(**((_QWORD **)this + 1) + 24))(&v6);
  v3 = std::string::insert(&v6, 0, "OneOrMore(");
  v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v7.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v7.__r_.__value_.__l.__data_ = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  v5 = std::string::append(&v7, ")");
  *a2 = *v5;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
}

void sub_1E061C5E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *MIL::Matching::OneOrMore@<X0>(MIL::Matching *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = operator new(0x30uLL);
  result[1] = 0;
  result[2] = 0;
  *result = &off_1EA99B7C0;
  result[3] = &off_1EA99B520;
  v6 = *((_QWORD *)this + 1);
  result[4] = *(_QWORD *)this;
  result[5] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result + 3;
  a2[1] = result;
  return result;
}

void MIL::Matching::Pattern::PatternImpl::Chain::DebugString(MIL::Matching::Pattern::PatternImpl::Chain *this@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  void **v6;
  std::string::size_type v7;
  std::string *v8;
  void *__p[2];
  unsigned __int8 v10;
  std::string v11;
  std::string v12;

  (*(void (**)(std::string *__return_ptr))(**((_QWORD **)this + 1) + 24))(&v11);
  v4 = std::string::append(&v11, " >> ");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 3) + 24))(__p);
  if ((v10 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v10 & 0x80u) == 0)
    v7 = v10;
  else
    v7 = (std::string::size_type)__p[1];
  v8 = std::string::append(&v12, (const std::string::value_type *)v6, v7);
  *a2 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if ((char)v10 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_1E061C764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

double MIL::Matching::operator>>@<D0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _OWORD *a3@<X8>)
{
  double result;
  double v5[3];

  std::allocate_shared[abi:ne180100]<MIL::Matching::Pattern::PatternImpl::Chain,std::allocator<MIL::Matching::Pattern::PatternImpl::Chain>,MIL::Matching::Pattern const&,MIL::Matching::Pattern const&,void>(a1, a2, v5);
  result = v5[0];
  *a3 = *(_OWORD *)v5;
  return result;
}

void MIL::Matching::Pattern::PatternImpl::Via::DebugString(std::string *a1@<X8>)
{
  std::string *v3;
  std::string v4;

  std::operator+<char>();
  v3 = std::string::append(&v4, ")");
  *a1 = *v3;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
}

void sub_1E061C860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MIL::Matching::Via(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  std::string::size_type v5;
  char v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  std::string __p;
  std::string v11;
  _QWORD v12[2];
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  v4 = operator new(0x58uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1EA99B860;
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v11 = *(std::string *)a1;
  v12[0] = __p.__r_.__value_.__l.__size_;
  v5 = __p.__r_.__value_.__r.__words[0];
  *(_QWORD *)((char *)v12 + 7) = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
  v6 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  memset(&__p, 0, sizeof(__p));
  v7 = operator new(0x20uLL);
  *v7 = off_1EA99B8B0;
  v7[1] = v5;
  v7[2] = v12[0];
  *(_QWORD *)((char *)v7 + 23) = *(_QWORD *)((char *)v12 + 7);
  *((_BYTE *)v7 + 31) = v6;
  v14 = v7;
  MIL::Matching::Pattern::PatternImpl::Via::Via((uint64_t)(v4 + 3), (__int128 *)&v11, (uint64_t)v13);
  v8 = v14;
  if (v14 == v13)
  {
    v9 = 4;
    v8 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_12;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_12:
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  *a2 = v4 + 3;
  a2[1] = v4;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1E061C9FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  std::__shared_weak_count *v27;
  void *v29;

  std::__shared_weak_count::~__shared_weak_count(v27);
  operator delete(v29);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

std::string *MIL::Matching::Pattern::PatternImpl::Parallel::DebugString@<X0>(MIL::Matching::Pattern::PatternImpl::Parallel *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void **v7;
  std::string::size_type v8;
  void *__p[2];
  unsigned __int8 v11;

  std::string::basic_string[abi:ne180100]<0>(a2, "Parallel(");
  v4 = *((_QWORD *)this + 1);
  if (*((_QWORD *)this + 2) != v4)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      if (v6)
      {
        std::string::append(a2, ", ");
        v4 = *((_QWORD *)this + 1);
      }
      (*(void (**)(void **__return_ptr))(**(_QWORD **)(v4 + v5) + 24))(__p);
      if ((v11 & 0x80u) == 0)
        v7 = __p;
      else
        v7 = (void **)__p[0];
      if ((v11 & 0x80u) == 0)
        v8 = v11;
      else
        v8 = (std::string::size_type)__p[1];
      std::string::append(a2, (const std::string::value_type *)v7, v8);
      if ((char)v11 < 0)
        operator delete(__p[0]);
      ++v6;
      v4 = *((_QWORD *)this + 1);
      v5 += 16;
    }
    while (v6 < (*((_QWORD *)this + 2) - v4) >> 4);
  }
  return std::string::append(a2, ")");
}

void sub_1E061CB74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

double MIL::Matching::Parallel@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4;
  double result;
  _QWORD v6[2];
  double v7[3];

  if (a2)
    v4 = a1;
  else
    v4 = 0;
  v6[0] = v4;
  v6[1] = a2;
  std::allocate_shared[abi:ne180100]<MIL::Matching::Pattern::PatternImpl::Parallel,std::allocator<MIL::Matching::Pattern::PatternImpl::Parallel>,MIL::Util::Span<MIL::Matching::Pattern const,18446744073709551615ul>,void>((uint64_t)v6, v7);
  result = v7[0];
  *a3 = *(_OWORD *)v7;
  return result;
}

uint64_t MIL::MatchingPrivate::PatternPrivate::CompilePattern(MIL::MatchingPrivate::PatternPrivate *this, const MIL::Matching::Pattern *a2, MIL::Matching::InstructionBuilder *a3, MIL::MILContext *a4)
{
  uint64_t v7;
  _QWORD v9[3];

  v7 = (*(uint64_t (**)(const MIL::Matching::Pattern *))(*(_QWORD *)a2 + 48))(a2);
  v9[0] = 0;
  v9[1] = a3;
  v9[2] = a2;
  return (***(uint64_t (****)(_QWORD, uint64_t, _QWORD *))this)(*(_QWORD *)this, v7, v9);
}

uint64_t MIL::Matching::Pattern::PatternImpl::OperationPredicate::Compile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  size_t v8;
  uint64_t (***v9)(_QWORD, _BYTE *, uint64_t);
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  std::runtime_error *exception;
  uint64_t v16[5];
  _BYTE v17[40];
  _BYTE v18[24];
  _BYTE *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a3 + 8);
  if (*(char *)(a1 + 31) < 0)
  {
    v7 = *(void **)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
  }
  else
  {
    v7 = (void *)(a1 + 8);
    v8 = *(unsigned __int8 *)(a1 + 31);
  }
  MIL::Matching::GetOperatorsByQualifiedName(v6, v7, v8, (uint64_t)v17);
  v9 = *(uint64_t (****)(_QWORD, _BYTE *, uint64_t))(a3 + 16);
  std::unordered_set<std::shared_ptr<MIL::IROperator const>>::unordered_set((uint64_t)v16, (uint64_t)v17);
  v19 = 0;
  v10 = operator new(0x30uLL);
  *v10 = &off_1EA99B640;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table((uint64_t)(v10 + 1), v16);
  v19 = v10;
  v11 = (**v9)(v9, v18, a2);
  v12 = v19;
  if (v19 == v18)
  {
    v13 = 4;
    v12 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_9;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_9:
  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table((uint64_t)v16);
  if (*(_DWORD *)a3)
  {
    if (*(_DWORD *)a3 == 1)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "TODO");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  else
  {
    v11 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a3 + 16) + 24))(*(_QWORD *)(a3 + 16), v11);
  }
  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table((uint64_t)v17);
  return v11;
}

void sub_1E061CDD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v15;

  __cxa_free_exception(v15);
  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void MIL::Matching::Pattern::PatternImpl::OperationPredicate::~OperationPredicate(void **this)
{
  *this = &off_1EA99B448;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = &off_1EA99B448;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1E0C023A0);
}

uint64_t MIL::Matching::Pattern::PatternImpl::Maybe::Compile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  void *__p;
  void *v13;
  _QWORD *v14;

  v5 = (***(uint64_t (****)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 8));
  v6 = *(_QWORD *)(a3 + 16);
  __p = 0;
  LODWORD(v13) = 0;
  v7 = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v6 + 8))(v6, &__p, a2);
  v8 = *(_QWORD *)(a3 + 16);
  v9 = operator new(0x10uLL);
  v13 = v9 + 2;
  v14 = v9 + 2;
  *v9 = v5;
  v9[1] = v7;
  __p = v9;
  v10 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v8 + 32))(v8, &__p);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
  return v10;
}

void sub_1E061CF7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MIL::Matching::Pattern::PatternImpl::Maybe::~Maybe(MIL::Matching::Pattern::PatternImpl::Maybe *this)
{
  *(_QWORD *)this = &off_1EA99B490;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &off_1EA99B490;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x1E0C023A0);
}

uint64_t MIL::Matching::Pattern::PatternImpl::ZeroOrMore::Compile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *__p;
  void *v14;
  _QWORD *v15;

  v5 = *(_QWORD *)(a3 + 16);
  LODWORD(v14) = 2;
  v6 = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v5 + 8))(v5, &__p, a2);
  v7 = *(_QWORD *)(a3 + 16);
  v8 = operator new(0x10uLL);
  v14 = v8 + 2;
  v15 = v8 + 2;
  *v8 = 0;
  v8[1] = v6;
  __p = v8;
  v9 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v7 + 32))(v7, &__p);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  v10 = (***(uint64_t (****)(_QWORD, uint64_t, uint64_t))(a1 + 8))(*(_QWORD *)(a1 + 8), v9, a3);
  (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(a3 + 16) + 40))(*(_QWORD *)(a3 + 16), v9, 0, v10);
  v11 = *(_QWORD *)(a3 + 16);
  __p = 0;
  LODWORD(v14) = 1;
  return (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v11 + 8))(v11, &__p, v9);
}

void sub_1E061D0F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MIL::Matching::Pattern::PatternImpl::ZeroOrMore::~ZeroOrMore(MIL::Matching::Pattern::PatternImpl::ZeroOrMore *this)
{
  *(_QWORD *)this = &off_1EA99B4D8;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &off_1EA99B4D8;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x1E0C023A0);
}

uint64_t MIL::Matching::Pattern::PatternImpl::OneOrMore::Compile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *__p;
  void *v14;
  _QWORD *v15;

  v5 = *(_QWORD *)(a3 + 16);
  LODWORD(v14) = 2;
  v6 = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v5 + 8))(v5, &__p, a2);
  v7 = *(_QWORD *)(a3 + 16);
  v8 = operator new(0x10uLL);
  v14 = v8 + 2;
  v15 = v8 + 2;
  *v8 = 0;
  v8[1] = v6;
  __p = v8;
  v9 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v7 + 32))(v7, &__p);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  v10 = (***(uint64_t (****)(_QWORD, uint64_t, uint64_t))(a1 + 8))(*(_QWORD *)(a1 + 8), v9, a3);
  (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(a3 + 16) + 40))(*(_QWORD *)(a3 + 16), v9, 0, v10);
  v11 = *(_QWORD *)(a3 + 16);
  __p = 0;
  LODWORD(v14) = 1;
  return (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v11 + 8))(v11, &__p, v10);
}

void sub_1E061D278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MIL::Matching::Pattern::PatternImpl::OneOrMore::~OneOrMore(MIL::Matching::Pattern::PatternImpl::OneOrMore *this)
{
  *(_QWORD *)this = &off_1EA99B520;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &off_1EA99B520;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x1E0C023A0);
}

uint64_t MIL::Matching::Pattern::PatternImpl::Chain::Compile(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (***v7)(_QWORD, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  int v12;

  v5 = *(_QWORD *)(a3 + 16);
  v12 = 2;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v5 + 8))(v5, &v11, a2);
  do
  {
    v6 = (***((uint64_t (****)(_QWORD, uint64_t, uint64_t))a1 + 3))(*((_QWORD *)a1 + 3), v6, a3);
    v7 = (uint64_t (***)(_QWORD, uint64_t, uint64_t))*((_QWORD *)a1 + 1);
    if (!v7)
      break;
  }
  while (a1);
  v8 = (**v7)(v7, v6, a3);
  v9 = *(_QWORD *)(a3 + 16);
  v11 = 0;
  v12 = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v9 + 8))(v9, &v11, v8);
}

void MIL::Matching::Pattern::PatternImpl::Chain::~Chain(MIL::Matching::Pattern::PatternImpl::Chain *this)
{
  char *v1;

  *(_QWORD *)this = &off_1EA99B568;
  v1 = (char *)this + 8;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &off_1EA99B568;
  v1 = (char *)this + 8;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
  JUMPOUT(0x1E0C023A0);
}

uint64_t MIL::Matching::Pattern::PatternImpl::Via::Compile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _BYTE v9[24];
  _BYTE *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a3 + 16);
  std::__function::__value_func<std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v9, a1 + 32);
  v5 = (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)v4 + 16))(v4, v9, a2);
  v6 = v10;
  if (v10 == v9)
  {
    v7 = 4;
    v6 = v9;
    goto LABEL_5;
  }
  if (v10)
  {
    v7 = 5;
LABEL_5:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return v5;
}

void sub_1E061D534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void MIL::Matching::Pattern::PatternImpl::Via::~Via(MIL::Matching::Pattern::PatternImpl::Via *this)
{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1EA99B5B0;
  v2 = (char *)this + 32;
  v3 = (char *)*((_QWORD *)this + 7);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1EA99B5B0;
  v2 = (char *)this + 32;
  v3 = (char *)*((_QWORD *)this + 7);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x1E0C023A0);
}

uint64_t MIL::Matching::Pattern::PatternImpl::Parallel::Compile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  std::logic_error *exception;
  struct type_info *v10;
  void (*v11)(void *);
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD v20[4];

  if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) <= 0x1FuLL)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "At least two branches must be specified for Parallel() pattern");
    v10 = (struct type_info *)off_1EA992598;
    v11 = (void (*)(void *))MEMORY[0x1E0DE4360];
LABEL_12:
    __cxa_throw(exception, v10, v11);
  }
  v5 = *(_QWORD *)(a3 + 16);
  v20[2] = 2;
  v6 = (*(uint64_t (**)(uint64_t, _DWORD *, uint64_t))(*(_QWORD *)v5 + 8))(v5, v20, a2);
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 16) + 48))(*(_QWORD *)(a3 + 16));
  result = (***(uint64_t (****)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 16) - 16))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 16), v7, a3);
  if (*(_DWORD *)a3)
  {
    if (*(_DWORD *)a3 == 1)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error((std::runtime_error *)exception, "TODO");
      v10 = (struct type_info *)MEMORY[0x1E0DE4E80];
      v11 = (void (*)(void *))MEMORY[0x1E0DE4338];
      goto LABEL_12;
    }
  }
  else
  {
    v12 = result;
    v13 = *(_QWORD **)(a1 + 8);
    v14 = (uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v13) >> 4;
    v15 = v14 - 2;
    if (v14 != 2)
    {
      v16 = 16 * v14 - 32;
      do
      {
        v17 = (***(uint64_t (****)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + v16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + v16), v7, a3);
        v12 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a3 + 16) + 64))(*(_QWORD *)(a3 + 16), v17, v12, v7);
        v16 -= 16;
        --v15;
      }
      while (v15);
      v13 = *(_QWORD **)(a1 + 8);
    }
    v18 = (**(uint64_t (***)(_QWORD, uint64_t, uint64_t))*v13)(*v13, v7, a3);
    v19 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a3 + 16) + 64))(*(_QWORD *)(a3 + 16), v18, v12, v6);
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a3 + 16) + 56))(*(_QWORD *)(a3 + 16), v19);
  }
  return result;
}

void sub_1E061D820(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Matching::Pattern::PatternImpl::Parallel::~Parallel(MIL::Matching::Pattern::PatternImpl::Parallel *this)
{
  void **v1;

  *(_QWORD *)this = &off_1EA99B5F8;
  v1 = (void **)((char *)this + 8);
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  *(_QWORD *)this = &off_1EA99B5F8;
  v2 = (void **)((char *)this + 8);
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x1E0C023A0](this, 0xA1C4030951706);
}

uint64_t std::unordered_set<std::shared_ptr<MIL::IROperator const>>::unordered_set(uint64_t a1, uint64_t a2)
{
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<std::shared_ptr<MIL::IROperator const>,std::hash<std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::shared_ptr<MIL::IROperator const>>,std::allocator<std::shared_ptr<MIL::IROperator const>>>::__emplace_unique_key_args<std::shared_ptr<MIL::IROperator const>,std::shared_ptr<MIL::IROperator const> const&>(a1, i + 2, i + 2);
  return a1;
}

void sub_1E061D930(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::shared_ptr<MIL::IROperator const>,std::hash<std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::shared_ptr<MIL::IROperator const>>,std::allocator<std::shared_ptr<MIL::IROperator const>>>::__emplace_unique_key_args<std::shared_ptr<MIL::IROperator const>,std::shared_ptr<MIL::IROperator const> const&>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD v28[2];
  char v29;

  v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == *a2)
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v14 = a1 + 16;
  v15 = operator new(0x20uLL);
  v28[0] = v15;
  v28[1] = a1 + 16;
  *v15 = 0;
  v15[1] = v8;
  v16 = a3[1];
  v15[2] = *a3;
  v15[3] = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v29 = 1;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    v21 = 1;
    if (v9 >= 3)
      v21 = (v9 & (v9 - 1)) != 0;
    v22 = v21 | (2 * v9);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v24);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v25)
  {
    *(_QWORD *)v28[0] = *v25;
    *v25 = v28[0];
  }
  else
  {
    *(_QWORD *)v28[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v28[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v14;
    if (*(_QWORD *)v28[0])
    {
      v26 = *(_QWORD *)(*(_QWORD *)v28[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v26 >= v9)
          v26 %= v9;
      }
      else
      {
        v26 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v28[0];
    }
  }
  v12 = (_QWORD *)v28[0];
  v28[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>>>>::reset[abi:ne180100]((uint64_t)v28, 0);
  return v12;
}

void sub_1E061DBD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<MIL::Matching::Pattern::PatternImpl::OperationPredicate::Compile(MIL::Matching::Instruction *,MIL::Matching::`anonymous namespace'::CompileContext const&)::$_0,std::allocator<MIL::Matching::Pattern::PatternImpl::OperationPredicate::Compile(MIL::Matching::Instruction *,MIL::Matching::`anonymous namespace'::CompileContext const&)::$_0>,BOOL ()(MIL::Builder::OperationBuilder &)>::~__func(_QWORD *a1)
{
  *a1 = &off_1EA99B640;
  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<MIL::Matching::Pattern::PatternImpl::OperationPredicate::Compile(MIL::Matching::Instruction *,MIL::Matching::`anonymous namespace'::CompileContext const&)::$_0,std::allocator<MIL::Matching::Pattern::PatternImpl::OperationPredicate::Compile(MIL::Matching::Instruction *,MIL::Matching::`anonymous namespace'::CompileContext const&)::$_0>,BOOL ()(MIL::Builder::OperationBuilder &)>::~__func(_QWORD *a1)
{
  *a1 = &off_1EA99B640;
  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<MIL::Matching::Pattern::PatternImpl::OperationPredicate::Compile(MIL::Matching::Instruction *,MIL::Matching::`anonymous namespace'::CompileContext const&)::$_0,std::allocator<MIL::Matching::Pattern::PatternImpl::OperationPredicate::Compile(MIL::Matching::Instruction *,MIL::Matching::`anonymous namespace'::CompileContext const&)::$_0>,BOOL ()(MIL::Builder::OperationBuilder &)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x30uLL);
  *v2 = &off_1EA99B640;
  std::unordered_set<std::shared_ptr<MIL::IROperator const>>::unordered_set((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1E061DC9C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<MIL::Matching::Pattern::PatternImpl::OperationPredicate::Compile(MIL::Matching::Instruction *,MIL::Matching::`anonymous namespace'::CompileContext const&)::$_0,std::allocator<MIL::Matching::Pattern::PatternImpl::OperationPredicate::Compile(MIL::Matching::Instruction *,MIL::Matching::`anonymous namespace'::CompileContext const&)::$_0>,BOOL ()(MIL::Builder::OperationBuilder &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1EA99B640;
  return std::unordered_set<std::shared_ptr<MIL::IROperator const>>::unordered_set((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<MIL::Matching::Pattern::PatternImpl::OperationPredicate::Compile(MIL::Matching::Instruction *,MIL::Matching::`anonymous namespace'::CompileContext const&)::$_0,std::allocator<MIL::Matching::Pattern::PatternImpl::OperationPredicate::Compile(MIL::Matching::Instruction *,MIL::Matching::`anonymous namespace'::CompileContext const&)::$_0>,BOOL ()(MIL::Builder::OperationBuilder &)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<MIL::Matching::Pattern::PatternImpl::OperationPredicate::Compile(MIL::Matching::Instruction *,MIL::Matching::`anonymous namespace'::CompileContext const&)::$_0,std::allocator<MIL::Matching::Pattern::PatternImpl::OperationPredicate::Compile(MIL::Matching::Instruction *,MIL::Matching::`anonymous namespace'::CompileContext const&)::$_0>,BOOL ()(MIL::Builder::OperationBuilder &)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL std::__function::__func<MIL::Matching::Pattern::PatternImpl::OperationPredicate::Compile(MIL::Matching::Instruction *,MIL::Matching::`anonymous namespace'::CompileContext const&)::$_0,std::allocator<MIL::Matching::Pattern::PatternImpl::OperationPredicate::Compile(MIL::Matching::Instruction *,MIL::Matching::`anonymous namespace'::CompileContext const&)::$_0>,BOOL ()(MIL::Builder::OperationBuilder &)>::operator()(uint64_t a1, MIL::Builder::OperationBuilder *this)
{
  _QWORD *v3;

  v3 = (_QWORD *)(a1 + 24);
  do
    v3 = (_QWORD *)*v3;
  while (v3 && MIL::Builder::OperationBuilder::GetOperator(this) != v3[2]);
  return v3 != 0;
}

uint64_t std::__function::__func<MIL::Matching::Pattern::PatternImpl::OperationPredicate::Compile(MIL::Matching::Instruction *,MIL::Matching::`anonymous namespace'::CompileContext const&)::$_0,std::allocator<MIL::Matching::Pattern::PatternImpl::OperationPredicate::Compile(MIL::Matching::Instruction *,MIL::Matching::`anonymous namespace'::CompileContext const&)::$_0>,BOOL ()(MIL::Builder::OperationBuilder &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Matching::Pattern::PatternImpl::OperationPredicate::Compile(MIL::Matching::Instruction *,MIL::Matching::`anonymous namespace'::CompileContext const&)::$_0,std::allocator<MIL::Matching::Pattern::PatternImpl::OperationPredicate::Compile(MIL::Matching::Instruction *,MIL::Matching::`anonymous namespace'::CompileContext const&)::$_0>,BOOL ()(MIL::Builder::OperationBuilder &)>::target_type()
{
}

void std::__shared_ptr_emplace<MIL::Matching::Pattern::PatternImpl::OperationPredicate>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA99B6D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIL::Matching::Pattern::PatternImpl::OperationPredicate>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA99B6D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E0C023A0);
}

uint64_t std::__shared_ptr_emplace<MIL::Matching::Pattern::PatternImpl::OperationPredicate>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

void std::__shared_ptr_emplace<MIL::Matching::Pattern::PatternImpl::Maybe>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA99B720;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIL::Matching::Pattern::PatternImpl::Maybe>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA99B720;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E0C023A0);
}

uint64_t std::__shared_ptr_emplace<MIL::Matching::Pattern::PatternImpl::Maybe>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

void std::__shared_ptr_emplace<MIL::Matching::Pattern::PatternImpl::ZeroOrMore>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA99B770;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIL::Matching::Pattern::PatternImpl::ZeroOrMore>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA99B770;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E0C023A0);
}

uint64_t std::__shared_ptr_emplace<MIL::Matching::Pattern::PatternImpl::ZeroOrMore>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

void std::__shared_ptr_emplace<MIL::Matching::Pattern::PatternImpl::OneOrMore>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA99B7C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIL::Matching::Pattern::PatternImpl::OneOrMore>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA99B7C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E0C023A0);
}

uint64_t std::__shared_ptr_emplace<MIL::Matching::Pattern::PatternImpl::OneOrMore>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<MIL::Matching::Pattern::PatternImpl::Chain,std::allocator<MIL::Matching::Pattern::PatternImpl::Chain>,MIL::Matching::Pattern const&,MIL::Matching::Pattern const&,void>@<X0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x40uLL);
  result[1] = 0;
  result[2] = 0;
  *result = &off_1EA99B810;
  result[3] = &off_1EA99B568;
  v7 = a1[1];
  result[4] = *a1;
  result[5] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a2[1];
  result[6] = *a2;
  result[7] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *a3 = result + 3;
  a3[1] = result;
  return result;
}

void std::__shared_ptr_emplace<MIL::Matching::Pattern::PatternImpl::Chain>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA99B810;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIL::Matching::Pattern::PatternImpl::Chain>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA99B810;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E0C023A0);
}

uint64_t std::__shared_ptr_emplace<MIL::Matching::Pattern::PatternImpl::Chain>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

void std::__shared_ptr_emplace<MIL::Matching::Pattern::PatternImpl::Via>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA99B860;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIL::Matching::Pattern::PatternImpl::Via>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA99B860;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E0C023A0);
}

uint64_t std::__shared_ptr_emplace<MIL::Matching::Pattern::PatternImpl::Via>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

uint64_t std::__function::__func<MIL::Matching::Via(std::string)::$_0,std::allocator<MIL::Matching::Via(std::string)::$_0>,BOOL ()(MIL::Builder::DataDependency const&)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA99B8B0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<MIL::Matching::Via(std::string)::$_0,std::allocator<MIL::Matching::Via(std::string)::$_0>,BOOL ()(MIL::Builder::DataDependency const&)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA99B8B0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<MIL::Matching::Via(std::string)::$_0,std::allocator<MIL::Matching::Via(std::string)::$_0>,BOOL ()(MIL::Builder::DataDependency const&)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA99B8B0;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1E061E0E8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<MIL::Matching::Via(std::string)::$_0,std::allocator<MIL::Matching::Via(std::string)::$_0>,BOOL ()(MIL::Builder::DataDependency const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA99B8B0;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<MIL::Matching::Via(std::string)::$_0,std::allocator<MIL::Matching::Via(std::string)::$_0>,BOOL ()(MIL::Builder::DataDependency const&)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<MIL::Matching::Via(std::string)::$_0,std::allocator<MIL::Matching::Via(std::string)::$_0>,BOOL ()(MIL::Builder::DataDependency const&)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

BOOL std::__function::__func<MIL::Matching::Via(std::string)::$_0,std::allocator<MIL::Matching::Via(std::string)::$_0>,BOOL ()(MIL::Builder::DataDependency const&)>::operator()(uint64_t a1, MIL::Builder::DataDependency *this)
{
  unsigned __int8 *v4;
  unsigned __int8 *ConsumerParameterName;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v16;
  _BOOL8 v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v22;
  std::__shared_weak_count *v23;

  MIL::Builder::DataDependency::GetConsumer((uint64_t)this, &v22);
  if (!v22)
    goto LABEL_20;
  ConsumerParameterName = (unsigned __int8 *)MIL::Builder::DataDependency::GetConsumerParameterName(this);
  v6 = ConsumerParameterName[23];
  if ((v6 & 0x80u) == 0)
    v7 = ConsumerParameterName[23];
  else
    v7 = *((_QWORD *)ConsumerParameterName + 1);
  v8 = *(unsigned __int8 *)(a1 + 31);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a1 + 16);
  if (v7 == v8)
  {
    if (v9 >= 0)
      v4 = (unsigned __int8 *)(a1 + 8);
    else
      v4 = *(unsigned __int8 **)(a1 + 8);
    if ((v6 & 0x80) != 0)
    {
      v17 = memcmp(*(const void **)ConsumerParameterName, v4, *((_QWORD *)ConsumerParameterName + 1)) == 0;
    }
    else if (ConsumerParameterName[23])
    {
      v10 = v6 - 1;
      do
      {
        v12 = *ConsumerParameterName++;
        v11 = v12;
        v14 = *v4++;
        v13 = v14;
        v16 = v10-- != 0;
        v17 = v11 == v13;
      }
      while (v11 == v13 && v16);
    }
    else
    {
      v17 = 1;
    }
  }
  else
  {
LABEL_20:
    v17 = 0;
  }
  v18 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *, unsigned __int8 *))v18->__on_zero_shared)(v18, v4);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return v17;
}

void sub_1E061E28C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
    MIL::Builder::FunctionBuilder::FunctionBuilder(a10);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<MIL::Matching::Via(std::string)::$_0,std::allocator<MIL::Matching::Via(std::string)::$_0>,BOOL ()(MIL::Builder::DataDependency const&)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<MIL::Matching::Via(std::string)::$_0,std::allocator<MIL::Matching::Via(std::string)::$_0>,BOOL ()(MIL::Builder::DataDependency const&)>::target_type()
{
}

uint64_t MIL::Matching::Pattern::PatternImpl::Via::Via(uint64_t a1, __int128 *a2, uint64_t a3)
{
  __int128 v5;

  *(_QWORD *)a1 = &off_1EA99B5B0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v5;
  }
  std::__function::__value_func<std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__value_func[abi:ne180100](a1 + 32, a3);
  return a1;
}

void sub_1E061E360(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 31) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::allocate_shared[abi:ne180100]<MIL::Matching::Pattern::PatternImpl::Parallel,std::allocator<MIL::Matching::Pattern::PatternImpl::Parallel>,MIL::Util::Span<MIL::Matching::Pattern const,18446744073709551615ul>,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x38uLL);
  result = std::__shared_ptr_emplace<MIL::Matching::Pattern::PatternImpl::Parallel>::__shared_ptr_emplace[abi:ne180100]<MIL::Util::Span<MIL::Matching::Pattern const,18446744073709551615ul>,std::allocator<MIL::Matching::Pattern::PatternImpl::Parallel>,0>((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_1E061E3C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<MIL::Matching::Pattern::PatternImpl::Parallel>::__shared_ptr_emplace[abi:ne180100]<MIL::Util::Span<MIL::Matching::Pattern const,18446744073709551615ul>,std::allocator<MIL::Matching::Pattern::PatternImpl::Parallel>,0>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = &off_1EA99B930;
  v3 = *(_QWORD **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = &off_1EA99B5F8;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 32) = 0;
  std::vector<MIL::Matching::Pattern>::__init_with_size[abi:ne180100]<MIL::Matching::Pattern const*,MIL::Matching::Pattern const*>((char *)(a1 + 32), v3, &v3[2 * v4], (16 * v4) >> 4);
  return a1;
}

void sub_1E061E430(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MIL::Matching::Pattern::PatternImpl::Parallel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA99B930;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIL::Matching::Pattern::PatternImpl::Parallel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA99B930;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E0C023A0);
}

uint64_t std::__shared_ptr_emplace<MIL::Matching::Pattern::PatternImpl::Parallel>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

char *std::vector<MIL::Matching::Pattern>::__init_with_size[abi:ne180100]<MIL::Matching::Pattern const*,MIL::Matching::Pattern const*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1E061E520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

unint64_t MIL::Matching::ParseQualifiedOpName@<X0>(unsigned __int8 *a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t result;
  unsigned __int8 *v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  std::logic_error *exception;
  std::string v13;
  _QWORD v14[33];
  unsigned __int8 *v15;
  unint64_t v16;

  v15 = a1;
  v16 = a2;
  result = std::string_view::rfind[abi:ne180100](&v15, "::", 0xFFFFFFFFFFFFFFFFLL);
  if (result == -1)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v14);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"'", 1);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v15, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"' is not a qualified operator name of the form 'opset_name::op_name'", 68);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::logic_error::logic_error(exception, &v13);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  v5 = v15;
  v6 = v16;
  if (v16 >= result)
    v7 = result;
  else
    v7 = v16;
  *a3 = v15;
  a3[1] = v7;
  v8 = v6 >= result + 2;
  v9 = v6 - (result + 2);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("string_view::substr");
  a3[2] = &v5[result + 2];
  a3[3] = v9;
  return result;
}

void sub_1E061E640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t std::string_view::rfind[abi:ne180100](unsigned __int8 **a1, char *__s, unint64_t a3)
{
  unsigned __int8 *v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  size_t v9;
  size_t v10;
  size_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  int v16;
  int v17;

  v5 = *a1;
  v6 = (unint64_t)a1[1];
  v7 = strlen(__s);
  if (v6 >= a3)
    v8 = a3;
  else
    v8 = v6;
  v9 = v6 - v8;
  v10 = v8 + v7;
  if (v9 <= v7)
    v11 = v6;
  else
    v11 = v10;
  v12 = &v5[v11];
  if (v7 && v11)
  {
    v13 = v5;
    v14 = &v5[v11];
    do
    {
      if (*v13 == *__s)
      {
        v15 = 1;
        while (v7 != v15)
        {
          if (&v13[v15] == v12)
            goto LABEL_20;
          v16 = v13[v15];
          v17 = __s[v15++];
          if (v16 != v17)
            goto LABEL_11;
        }
        v14 = v13;
      }
LABEL_11:
      ++v13;
    }
    while (v13 != v12);
  }
  else
  {
    v14 = &v5[v11];
  }
LABEL_20:
  if (v14 != v12 || v7 == 0)
    return v14 - v5;
  else
    return -1;
}

void MIL::Matching::GetOperatorByQualifiedName(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  size_t v6;
  const void *v7;
  void **p_dst;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  const void *v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  std::logic_error *exception;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  std::logic_error *v24;
  std::string v25;
  void **__dst;
  size_t v27;
  unint64_t v28;
  const void *v29;
  unint64_t v30;
  const void *v31;
  unint64_t v32;

  MIL::Matching::ParseQualifiedOpName(a2, a3, &v29);
  v6 = v30;
  if (v30 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_24;
  v7 = v29;
  if (v30 >= 0x17)
  {
    v9 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17)
      v9 = v30 | 7;
    v10 = v9 + 1;
    p_dst = (void **)operator new(v9 + 1);
    v27 = v6;
    v28 = v10 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v28) = v30;
  p_dst = (void **)&__dst;
  if (v30)
LABEL_8:
    memmove(p_dst, v7, v6);
  *((_BYTE *)p_dst + v6) = 0;
  v11 = (*(uint64_t (**)(uint64_t, void ***))(*(_QWORD *)a1 + 16))(a1, &__dst);
  if (SHIBYTE(v28) < 0)
    operator delete(__dst);
  if (!v11)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__dst);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__dst, (uint64_t)"No such opset '", 15);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v29, v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"'", 1);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::logic_error::logic_error(exception, &v25);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  v12 = v32;
  if (v32 > 0x7FFFFFFFFFFFFFF7)
LABEL_24:
    std::string::__throw_length_error[abi:ne180100]();
  v13 = v31;
  if (v32 >= 0x17)
  {
    v15 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v32 | 7) != 0x17)
      v15 = v32 | 7;
    v16 = v15 + 1;
    v14 = (void **)operator new(v15 + 1);
    v27 = v12;
    v28 = v16 | 0x8000000000000000;
    __dst = v14;
    goto LABEL_19;
  }
  HIBYTE(v28) = v32;
  v14 = (void **)&__dst;
  if (v32)
LABEL_19:
    memmove(v14, v13, v12);
  *((_BYTE *)v14 + v12) = 0;
  MIL::IROpset::TryGetOperatorSharedPtr(v11, (unsigned __int8 *)&__dst, a4);
  if (SHIBYTE(v28) < 0)
    operator delete(__dst);
  if (!*a4)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__dst);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__dst, (uint64_t)"No such operator '", 18);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v31, v32);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"' in opset '", 12);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v29, v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"'.", 2);
    v24 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::logic_error::logic_error(v24, &v25);
    v24->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(v24, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
}

void sub_1E061EA18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  void *v21;
  int v22;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v22 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v20);
      _Unwind_Resume(a1);
    }
  }
  else if (!v22)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v21);
  goto LABEL_6;
}

void MIL::Matching::GetOperatorsByQualifiedName(uint64_t a1@<X0>, void *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 *v6;
  __int128 *i;
  __int128 v8;
  uint64_t Opset;
  size_t v10;
  void *v11;
  void *p_dst;
  size_t v13;
  size_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  std::logic_error *exception;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string __dst;
  void *__src;
  size_t __len;
  __int128 *v26;
  __int128 *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  __src = a2;
  __len = a3;
  if (std::string_view::rfind[abi:ne180100]((unsigned __int8 **)&__src, "::", 0xFFFFFFFFFFFFFFFFLL) != -1)
  {
    MIL::Matching::GetOperatorByQualifiedName(a1, (unsigned __int8 *)__src, __len, &v26);
    std::unordered_set<std::shared_ptr<MIL::IROperator const>>::unordered_set(a4, &v26, 1);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v26);
    return;
  }
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 32) = 1065353216;
  (*(void (**)(__int128 **__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(&v26, a1);
  v6 = v26;
  for (i = v27; v6 != i; v6 = (__int128 *)((char *)v6 + 24))
  {
    if (*((char *)v6 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__dst, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
    }
    else
    {
      v8 = *v6;
      __dst.__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v8;
    }
    Opset = MIL::MILContext::GetOpset(a1);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    v10 = __len;
    if (__len >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v11 = __src;
    if (__len >= 0x17)
    {
      v13 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__len | 7) != 0x17)
        v13 = __len | 7;
      v14 = v13 + 1;
      p_dst = operator new(v13 + 1);
      __dst.__r_.__value_.__l.__size_ = v10;
      __dst.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = __len;
      p_dst = &__dst;
      if (!__len)
        goto LABEL_17;
    }
    memmove(p_dst, v11, v10);
LABEL_17:
    *((_BYTE *)p_dst + v10) = 0;
    MIL::IROpset::TryGetOperatorSharedPtr(Opset, (unsigned __int8 *)&__dst, &v21);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    if (v21)
      std::__hash_table<std::shared_ptr<MIL::IROperator const>,std::hash<std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::shared_ptr<MIL::IROperator const>>,std::allocator<std::shared_ptr<MIL::IROperator const>>>::__emplace_unique_key_args<std::shared_ptr<MIL::IROperator const>,std::shared_ptr<MIL::IROperator const> const&>(a4, &v21, &v21);
    v15 = v22;
    if (v22)
    {
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__dst);
  if (!*(_QWORD *)(a4 + 24))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v26);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"No such operator '", 18);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)__src, __len);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"' in all registered opsets.", 27);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::logic_error::logic_error(exception, &__dst);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
}

void sub_1E061EDA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;
  void *v20;
  int v21;

  if (a16 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a19);
      std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table(v19);
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

uint64_t std::unordered_set<std::shared_ptr<MIL::IROperator const>>::unordered_set(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 16 * a3;
    do
    {
      std::__hash_table<std::shared_ptr<MIL::IROperator const>,std::hash<std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::shared_ptr<MIL::IROperator const>>,std::allocator<std::shared_ptr<MIL::IROperator const>>>::__emplace_unique_key_args<std::shared_ptr<MIL::IROperator const>,std::shared_ptr<MIL::IROperator const> const&>(a1, a2, a2);
      a2 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  return a1;
}

void sub_1E061EEC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

MIL::Passes::CompressionOptions *MIL::Passes::CompressionOptions::CompressionOptions(MIL::Passes::CompressionOptions *this)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  *v2 = 4096;
  *(_QWORD *)this = v2;
  return this;
}

{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  *v2 = 4096;
  *(_QWORD *)this = v2;
  return this;
}

MIL::Passes::CompressionOptions *MIL::Passes::CompressionOptions::CompressionOptions(MIL::Passes::CompressionOptions *this, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  *v4 = a2;
  *(_QWORD *)this = v4;
  return this;
}

{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  *v4 = a2;
  *(_QWORD *)this = v4;
  return this;
}

void MIL::Passes::CompressionOptions::~CompressionOptions(MIL::Passes::CompressionOptions *this)
{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v2)
    MEMORY[0x1E0C023A0](v2, 0x1000C4000313F17);
}

{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v2)
    MEMORY[0x1E0C023A0](v2, 0x1000C4000313F17);
}

uint64_t MIL::Passes::CompressionOptions::GetMinimalNumElementsToCompress(MIL::Passes::CompressionOptions *this)
{
  return **(_QWORD **)this;
}

uint64_t *MIL::Passes::QuantizationOptions::QuantizationOptions(uint64_t *a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = operator new();
  MIL::Passes::QuantizationOptions::QuantizationOptionsImpl::QuantizationOptionsImpl(v10, a2, a3, a4, a5);
  *a1 = v10;
  return a1;
}

void sub_1E061F0EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1E0C023A0](v1, 0x10A0C403EC3ECEDLL);
  _Unwind_Resume(a1);
}

void MIL::Passes::QuantizationOptions::~QuantizationOptions(MIL::Passes::QuantizationOptions *this)
{
  std::unique_ptr<MIL::Passes::QuantizationOptions::QuantizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0);
}

{
  std::unique_ptr<MIL::Passes::QuantizationOptions::QuantizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0);
}

uint64_t MIL::Passes::QuantizationOptions::GetQuantizationMode(MIL::Passes::QuantizationOptions *this)
{
  return **(unsigned int **)this;
}

uint64_t MIL::Passes::QuantizationOptions::GetFloatType(MIL::Passes::QuantizationOptions *this)
{
  return *(unsigned int *)(*(_QWORD *)this + 4);
}

uint64_t MIL::Passes::QuantizationOptions::GetOpTypes(MIL::Passes::QuantizationOptions *this)
{
  return *(_QWORD *)this + 8;
}

uint64_t MIL::Passes::QuantizationOptions::GetMinimalNumElementsToCompress(MIL::Passes::QuantizationOptions *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 48);
}

uint64_t *MIL::Passes::SparsificationOptions::SparsificationOptions(uint64_t *a1, int a2, uint64_t a3, float a4)
{
  uint64_t v8;

  v8 = operator new();
  MIL::Passes::SparsificationOptions::SparsificationOptionsImpl::SparsificationOptionsImpl(v8, a2, a3, a4);
  *a1 = v8;
  return a1;
}

void sub_1E061F200(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1E0C023A0](v1, 0x1000C40451B5BE8);
  _Unwind_Resume(a1);
}

void MIL::Passes::SparsificationOptions::~SparsificationOptions(MIL::Passes::SparsificationOptions *this)
{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v2)
    MEMORY[0x1E0C023A0](v2, 0x1000C40451B5BE8);
}

{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v2)
    MEMORY[0x1E0C023A0](v2, 0x1000C40451B5BE8);
}

uint64_t MIL::Passes::SparsificationOptions::GetSparsificationMode(MIL::Passes::SparsificationOptions *this)
{
  return **(unsigned int **)this;
}

float MIL::Passes::SparsificationOptions::GetThresholdOrtargetPercetile(MIL::Passes::SparsificationOptions *this)
{
  return *(float *)(*(_QWORD *)this + 4);
}

uint64_t MIL::Passes::SparsificationOptions::GetMinimalNumElementsToCompress(MIL::Passes::SparsificationOptions *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 8);
}

uint64_t *MIL::Passes::PalettizationOptions::PalettizationOptions(uint64_t *a1, int a2, int a3, uint64_t a4)
{
  uint64_t v8;
  _BYTE v10[40];

  std::unordered_set<std::string>::unordered_set((uint64_t)v10, 0, 0);
  v8 = operator new();
  MIL::Passes::PalettizationOptions::PalettizationOptionsImpl::PalettizationOptionsImpl(v8, a2, a3, (uint64_t)v10, 0, 0, 1uLL, a4);
  *a1 = v8;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v10);
  return a1;
}

void sub_1E061F368(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x1E0C023A0](v2, 0x10A0C409DF1B1DFLL);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *MIL::Passes::PalettizationOptions::PalettizationOptions(uint64_t *a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  uint64_t v16;

  v16 = operator new();
  MIL::Passes::PalettizationOptions::PalettizationOptionsImpl::PalettizationOptionsImpl(v16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v16;
  return a1;
}

void sub_1E061F43C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1E0C023A0](v1, 0x10A0C409DF1B1DFLL);
  _Unwind_Resume(a1);
}

void MIL::Passes::PalettizationOptions::~PalettizationOptions(MIL::Passes::PalettizationOptions *this)
{
  std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0);
}

{
  std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0);
}

uint64_t MIL::Passes::PalettizationOptions::GetPalettizationMode(MIL::Passes::PalettizationOptions *this)
{
  return **(unsigned int **)this;
}

uint64_t MIL::Passes::PalettizationOptions::GetNBits(MIL::Passes::PalettizationOptions *this)
{
  return *(unsigned int *)(*(_QWORD *)this + 4);
}

uint64_t MIL::Passes::PalettizationOptions::GetOpTypes(MIL::Passes::PalettizationOptions *this)
{
  return *(_QWORD *)this + 8;
}

uint64_t MIL::Passes::PalettizationOptions::GetOutputChannelBlockSize(MIL::Passes::PalettizationOptions *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 48);
}

uint64_t MIL::Passes::PalettizationOptions::GetInputChannelBlockSize(MIL::Passes::PalettizationOptions *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 56);
}

uint64_t MIL::Passes::PalettizationOptions::GetVectorSize(MIL::Passes::PalettizationOptions *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 64);
}

uint64_t MIL::Passes::PalettizationOptions::GetMinimalNumElementsToCompress(MIL::Passes::PalettizationOptions *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 72);
}

uint64_t MIL::Passes::CompressWeightsFp32ToFp16(MIL::MILContext ***this, uint64_t **a2, const MIL::Passes::CompressionOptions *a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  int v9;
  _QWORD *v11;
  int v12;
  int v13;
  _QWORD *v15;
  uint64_t v16;
  std::runtime_error *exception;
  void *v19[2];
  char v20;
  void *__p[2];
  char v22;
  _QWORD v23[2];
  _QWORD v24[2];
  char v25;
  _QWORD v26[2];
  char v27;
  char v28;
  _QWORD v29[3];
  _QWORD *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = **a2;
  LOBYTE(v24[0]) = 0;
  v28 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "const");
  MIL::Matching::Op((uint64_t)__p, v23);
  v29[0] = &off_1EA99B980;
  v29[1] = v4;
  v29[2] = v24;
  v30 = v29;
  MIL::Transform::ProgramTransformer::MatchAndReplace(this, (const MIL::Matching::Pattern *)v23, (uint64_t)v29);
  v5 = v30;
  if (v30 == v29)
  {
    v6 = 4;
    v5 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  MIL::Matching::Pattern::~Pattern((MIL::Matching::Pattern *)v23);
  if (v22 < 0)
    operator delete(__p[0]);
  if (v28)
  {
    if (v25 < 0)
    {
      if (v24[1] != 5)
        goto LABEL_37;
      v7 = (_QWORD *)v24[0];
    }
    else
    {
      if (v25 != 5)
        goto LABEL_37;
      v7 = v24;
    }
    v8 = *(_DWORD *)v7;
    v9 = *((unsigned __int8 *)v7 + 4);
    if (v8 != 829648745 || v9 != 55)
      goto LABEL_37;
    if (v27 < 0)
    {
      if (v26[1] != 5)
        goto LABEL_37;
      v11 = (_QWORD *)v26[0];
    }
    else
    {
      if (v27 != 5)
        goto LABEL_37;
      v11 = v26;
    }
    v12 = *(_DWORD *)v11;
    v13 = *((unsigned __int8 *)v11 + 4);
    if (v12 != 829648745 || v13 != 56)
    {
LABEL_37:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Only ios17->ios18 upgrading is supported.");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    std::string::basic_string[abi:ne180100]<0>(v19, "ios17::constexpr_cast");
    MIL::Matching::Op((uint64_t)v19, v23);
    MIL::Conversion::MakeIos17ToIos18ConstCastTransform(v29);
    MIL::Transform::ProgramTransformer::MatchAndReplace(this, (const MIL::Matching::Pattern *)v23, (uint64_t)v29);
    v15 = v30;
    if (v30 == v29)
    {
      v16 = 4;
      v15 = v29;
    }
    else
    {
      if (!v30)
        goto LABEL_34;
      v16 = 5;
    }
    (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_34:
    MIL::Matching::Pattern::~Pattern((MIL::Matching::Pattern *)v23);
    if (v20 < 0)
      operator delete(v19[0]);
  }
  return std::__optional_destruct_base<std::pair<std::string,std::string>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v24);
}

void sub_1E061F738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,char a23)
{
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v26;
  uint64_t v27;

  v26 = *(_QWORD **)(v24 - 32);
  if (v26 == v23)
  {
    v27 = 4;
    v26 = (_QWORD *)(v24 - 56);
  }
  else
  {
    if (!v26)
      goto LABEL_6;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_6:
  MIL::Matching::Pattern::~Pattern((MIL::Matching::Pattern *)&a21);
  if (a14 < 0)
    operator delete(__p);
  std::__optional_destruct_base<std::pair<std::string,std::string>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t MIL::Passes::QuantizeWeights(MIL::MILContext ***this, MIL::Transform::ProgramTransformer *a2, const MIL::Passes::QuantizationOptions *a3)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  int v9;
  _QWORD *v11;
  int v12;
  int v13;
  _QWORD *v15;
  uint64_t v16;
  std::runtime_error *exception;
  void *v19[2];
  char v20;
  void *__p[2];
  char v22;
  _QWORD v23[2];
  _QWORD v24[2];
  char v25;
  _QWORD v26[2];
  char v27;
  char v28;
  _QWORD v29[3];
  _QWORD *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  LOBYTE(v24[0]) = 0;
  v28 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "const");
  MIL::Matching::Op((uint64_t)__p, v23);
  v29[0] = &off_1EA99BA00;
  v29[1] = a2;
  v29[2] = v24;
  v30 = v29;
  MIL::Transform::ProgramTransformer::MatchAndReplace(this, (const MIL::Matching::Pattern *)v23, (uint64_t)v29);
  v5 = v30;
  if (v30 == v29)
  {
    v6 = 4;
    v5 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  MIL::Matching::Pattern::~Pattern((MIL::Matching::Pattern *)v23);
  if (v22 < 0)
    operator delete(__p[0]);
  if (v28)
  {
    if (v25 < 0)
    {
      if (v24[1] != 5)
        goto LABEL_37;
      v7 = (_QWORD *)v24[0];
    }
    else
    {
      if (v25 != 5)
        goto LABEL_37;
      v7 = v24;
    }
    v8 = *(_DWORD *)v7;
    v9 = *((unsigned __int8 *)v7 + 4);
    if (v8 != 829648745 || v9 != 55)
      goto LABEL_37;
    if (v27 < 0)
    {
      if (v26[1] != 5)
        goto LABEL_37;
      v11 = (_QWORD *)v26[0];
    }
    else
    {
      if (v27 != 5)
        goto LABEL_37;
      v11 = v26;
    }
    v12 = *(_DWORD *)v11;
    v13 = *((unsigned __int8 *)v11 + 4);
    if (v12 != 829648745 || v13 != 56)
    {
LABEL_37:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Only ios17->ios18 upgrading is supported.");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    std::string::basic_string[abi:ne180100]<0>(v19, "ios17::constexpr_affine_dequantize");
    MIL::Matching::Op((uint64_t)v19, v23);
    MIL::Conversion::MakeIos17ToIos18ShiftScaleTransform(v29);
    MIL::Transform::ProgramTransformer::MatchAndReplace(this, (const MIL::Matching::Pattern *)v23, (uint64_t)v29);
    v15 = v30;
    if (v30 == v29)
    {
      v16 = 4;
      v15 = v29;
    }
    else
    {
      if (!v30)
        goto LABEL_34;
      v16 = 5;
    }
    (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_34:
    MIL::Matching::Pattern::~Pattern((MIL::Matching::Pattern *)v23);
    if (v20 < 0)
      operator delete(v19[0]);
  }
  return std::__optional_destruct_base<std::pair<std::string,std::string>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v24);
}

void sub_1E061FA3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,char a23)
{
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v26;
  uint64_t v27;

  v26 = *(_QWORD **)(v24 - 32);
  if (v26 == v23)
  {
    v27 = 4;
    v26 = (_QWORD *)(v24 - 56);
  }
  else
  {
    if (!v26)
      goto LABEL_6;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_6:
  MIL::Matching::Pattern::~Pattern((MIL::Matching::Pattern *)&a21);
  if (a14 < 0)
    operator delete(__p);
  std::__optional_destruct_base<std::pair<std::string,std::string>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t MIL::Passes::SparsifyWeights(MIL::MILContext ***this, MIL::Transform::ProgramTransformer *a2, const MIL::Passes::SparsificationOptions *a3)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  int v9;
  _QWORD *v11;
  int v12;
  int v13;
  _QWORD *v15;
  uint64_t v16;
  std::runtime_error *exception;
  void *v19[2];
  char v20;
  void *__p[2];
  char v22;
  _QWORD v23[2];
  _QWORD v24[2];
  char v25;
  _QWORD v26[2];
  char v27;
  char v28;
  _QWORD v29[3];
  _QWORD *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  LOBYTE(v24[0]) = 0;
  v28 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "const");
  MIL::Matching::Op((uint64_t)__p, v23);
  v29[0] = &off_1EA99BA80;
  v29[1] = a2;
  v29[2] = v24;
  v30 = v29;
  MIL::Transform::ProgramTransformer::MatchAndReplace(this, (const MIL::Matching::Pattern *)v23, (uint64_t)v29);
  v5 = v30;
  if (v30 == v29)
  {
    v6 = 4;
    v5 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  MIL::Matching::Pattern::~Pattern((MIL::Matching::Pattern *)v23);
  if (v22 < 0)
    operator delete(__p[0]);
  if (v28)
  {
    if (v25 < 0)
    {
      if (v24[1] != 5)
        goto LABEL_37;
      v7 = (_QWORD *)v24[0];
    }
    else
    {
      if (v25 != 5)
        goto LABEL_37;
      v7 = v24;
    }
    v8 = *(_DWORD *)v7;
    v9 = *((unsigned __int8 *)v7 + 4);
    if (v8 != 829648745 || v9 != 55)
      goto LABEL_37;
    if (v27 < 0)
    {
      if (v26[1] != 5)
        goto LABEL_37;
      v11 = (_QWORD *)v26[0];
    }
    else
    {
      if (v27 != 5)
        goto LABEL_37;
      v11 = v26;
    }
    v12 = *(_DWORD *)v11;
    v13 = *((unsigned __int8 *)v11 + 4);
    if (v12 != 829648745 || v13 != 56)
    {
LABEL_37:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Only ios17->ios18 upgrading is supported.");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    std::string::basic_string[abi:ne180100]<0>(v19, "ios17::constexpr_sparse_to_dense");
    MIL::Matching::Op((uint64_t)v19, v23);
    MIL::Conversion::MakeIos17ToIos18SparseToDenseTransform(v29);
    MIL::Transform::ProgramTransformer::MatchAndReplace(this, (const MIL::Matching::Pattern *)v23, (uint64_t)v29);
    v15 = v30;
    if (v30 == v29)
    {
      v16 = 4;
      v15 = v29;
    }
    else
    {
      if (!v30)
        goto LABEL_34;
      v16 = 5;
    }
    (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_34:
    MIL::Matching::Pattern::~Pattern((MIL::Matching::Pattern *)v23);
    if (v20 < 0)
      operator delete(v19[0]);
  }
  return std::__optional_destruct_base<std::pair<std::string,std::string>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v24);
}

void sub_1E061FD40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,char a23)
{
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v26;
  uint64_t v27;

  v26 = *(_QWORD **)(v24 - 32);
  if (v26 == v23)
  {
    v27 = 4;
    v26 = (_QWORD *)(v24 - 56);
  }
  else
  {
    if (!v26)
      goto LABEL_6;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_6:
  MIL::Matching::Pattern::~Pattern((MIL::Matching::Pattern *)&a21);
  if (a14 < 0)
    operator delete(__p);
  std::__optional_destruct_base<std::pair<std::string,std::string>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t MIL::Passes::PalettizeWeights(MIL::MILContext ***this, MIL::Transform::ProgramTransformer *a2, const MIL::Passes::PalettizationOptions *a3)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  int v9;
  _QWORD *v11;
  int v12;
  int v13;
  _QWORD *v15;
  uint64_t v16;
  std::runtime_error *exception;
  void *v19[2];
  char v20;
  void *__p[2];
  char v22;
  _QWORD v23[2];
  _QWORD v24[2];
  char v25;
  _QWORD v26[2];
  char v27;
  char v28;
  _QWORD v29[3];
  _QWORD *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  LOBYTE(v24[0]) = 0;
  v28 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "const");
  MIL::Matching::Op((uint64_t)__p, v23);
  v29[0] = &off_1EA99BB00;
  v29[1] = a2;
  v29[2] = v24;
  v30 = v29;
  MIL::Transform::ProgramTransformer::MatchAndReplace(this, (const MIL::Matching::Pattern *)v23, (uint64_t)v29);
  v5 = v30;
  if (v30 == v29)
  {
    v6 = 4;
    v5 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  MIL::Matching::Pattern::~Pattern((MIL::Matching::Pattern *)v23);
  if (v22 < 0)
    operator delete(__p[0]);
  if (v28)
  {
    if (v25 < 0)
    {
      if (v24[1] != 5)
        goto LABEL_37;
      v7 = (_QWORD *)v24[0];
    }
    else
    {
      if (v25 != 5)
        goto LABEL_37;
      v7 = v24;
    }
    v8 = *(_DWORD *)v7;
    v9 = *((unsigned __int8 *)v7 + 4);
    if (v8 != 829648745 || v9 != 55)
      goto LABEL_37;
    if (v27 < 0)
    {
      if (v26[1] != 5)
        goto LABEL_37;
      v11 = (_QWORD *)v26[0];
    }
    else
    {
      if (v27 != 5)
        goto LABEL_37;
      v11 = v26;
    }
    v12 = *(_DWORD *)v11;
    v13 = *((unsigned __int8 *)v11 + 4);
    if (v12 != 829648745 || v13 != 56)
    {
LABEL_37:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Only ios17->ios18 upgrading is supported.");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    std::string::basic_string[abi:ne180100]<0>(v19, "ios17::constexpr_lut_to_dense");
    MIL::Matching::Op((uint64_t)v19, v23);
    MIL::Conversion::MakeIos17ToIos18LutToDenseTransform(v29);
    MIL::Transform::ProgramTransformer::MatchAndReplace(this, (const MIL::Matching::Pattern *)v23, (uint64_t)v29);
    v15 = v30;
    if (v30 == v29)
    {
      v16 = 4;
      v15 = v29;
    }
    else
    {
      if (!v30)
        goto LABEL_34;
      v16 = 5;
    }
    (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_34:
    MIL::Matching::Pattern::~Pattern((MIL::Matching::Pattern *)v23);
    if (v20 < 0)
      operator delete(v19[0]);
  }
  return std::__optional_destruct_base<std::pair<std::string,std::string>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v24);
}

void sub_1E0620044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,char a23)
{
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v26;
  uint64_t v27;

  v26 = *(_QWORD **)(v24 - 32);
  if (v26 == v23)
  {
    v27 = 4;
    v26 = (_QWORD *)(v24 - 56);
  }
  else
  {
    if (!v26)
      goto LABEL_6;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_6:
  MIL::Matching::Pattern::~Pattern((MIL::Matching::Pattern *)&a21);
  if (a14 < 0)
    operator delete(__p);
  std::__optional_destruct_base<std::pair<std::string,std::string>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<std::pair<std::string,std::string>,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)(a1 + 24));
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t MIL::Passes::QuantizationOptions::QuantizationOptionsImpl::QuantizationOptionsImpl(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  std::logic_error *exception;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string v14;
  std::string v15;
  std::string v16;

  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  std::unordered_set<std::string>::unordered_set(a1 + 8, a4);
  *(_QWORD *)(a1 + 48) = a5;
  if ((a3 - 6) <= 0xFFFFFFFD)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    MIL::IRDataTypeToString(a3, &v14);
    v10 = std::string::insert(&v14, 0, "Invalid floatType ");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v12 = std::string::append(&v15, ", choices are float32 or float16.");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v16.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &v16);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  return a1;
}

void sub_1E062026C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;
  void *v29;
  int v30;

  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v30 & 1) == 0)
    {
LABEL_10:
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v28);
      _Unwind_Resume(a1);
    }
  }
  else if (!v30)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v29);
  goto LABEL_10;
}

uint64_t std::unordered_set<std::string>::unordered_set(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_1E062034C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<MIL::Passes::QuantizationOptions::QuantizationOptionsImpl>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v2 + 8);
    JUMPOUT(0x1E0C023A0);
  }
  return result;
}

uint64_t MIL::Passes::SparsificationOptions::SparsificationOptionsImpl::SparsificationOptionsImpl(uint64_t result, int a2, uint64_t a3, float a4)
{
  _BOOL4 v4;
  _QWORD *v5;
  std::logic_error *exception;
  _QWORD *v7;
  std::logic_error *v8;
  std::string v9;
  _QWORD v10[33];

  *(_DWORD *)result = a2;
  *(float *)(result + 4) = a4;
  *(_QWORD *)(result + 8) = a3;
  if (a2 == 1 && a4 < 0.0)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Invalid threshold, must >= 0 but get ", 37);
    v5 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)".", 1);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::logic_error::logic_error(exception, &v9);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  v4 = a4 > 1.0;
  if (a4 < 0.0)
    v4 = 1;
  if (a2 == 2 && v4)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Invalid percentile, it is required that 0 <= percentile <= 1 but get ", 69);
    v7 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)".", 1);
    v8 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::logic_error::logic_error(v8, &v9);
    v8->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(v8, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  return result;
}

void sub_1E062053C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a16 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

uint64_t std::unordered_set<std::string>::unordered_set(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 24 * a3;
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, a2, (uint64_t)a2);
      a2 += 24;
      v5 -= 24;
    }
    while (v5);
  }
  return a1;
}

void sub_1E06205F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Passes::PalettizationOptions::PalettizationOptionsImpl::PalettizationOptionsImpl(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  std::logic_error *v15;
  std::logic_error *exception;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  std::logic_error *v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string v27;
  std::string v28;
  std::string v29;

  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  std::unordered_set<std::string>::unordered_set(a1 + 8, a4);
  *(_QWORD *)(a1 + 48) = a5;
  *(_QWORD *)(a1 + 56) = a6;
  *(_QWORD *)(a1 + 64) = a7;
  *(_QWORD *)(a1 + 72) = a8;
  if (a2 == 3)
  {
    if (a3 != -1)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v27, a3);
      v18 = std::string::insert(&v27, 0, "nbits must be -1 in the UNIQUE mode, but get ");
      v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v28.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      v20 = std::string::append(&v28, ".");
      v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      v29.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      std::logic_error::logic_error(exception, &v29);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
    if (a6 | a5)
    {
      v15 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v15, "unique palettization per-channel is not allowed because nbits might not be deterministic.");
      goto LABEL_12;
    }
  }
  else if ((a3 - 1) >= 4 && a3 != 6 && a3 != 8)
  {
    v22 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v27, a3);
    v23 = std::string::insert(&v27, 0, "nbits must be one of {1, 2, 3, 4, 6, 8} in non-UNIQUE mode, but get ");
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = std::string::append(&v28, ".");
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(v22, &v29);
    v22->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(v22, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  if (a2 != 1 && a7 >= 2)
  {
    v15 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v15, "vector palettization can only be used in KMEANS mode.");
LABEL_12:
    v15->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(v15, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  return a1;
}

void sub_1E0620878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;
  void *v29;
  int v30;

  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v30 & 1) == 0)
    {
LABEL_10:
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v28);
      _Unwind_Resume(a1);
    }
  }
  else if (!v30)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v29);
  goto LABEL_10;
}

uint64_t *std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v2 + 8);
    JUMPOUT(0x1E0C023A0);
  }
  return result;
}

void std::__function::__func<MIL::Passes::CompressWeightsFp32ToFp16(MIL::Transform::ProgramTransformer &,MIL::Passes::CompressionOptions const&)::$_0,std::allocator<MIL::Passes::CompressWeightsFp32ToFp16(MIL::Transform::ProgramTransformer &,MIL::Passes::CompressionOptions const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

__n128 std::__function::__func<MIL::Passes::CompressWeightsFp32ToFp16(MIL::Transform::ProgramTransformer &,MIL::Passes::CompressionOptions const&)::$_0,std::allocator<MIL::Passes::CompressWeightsFp32ToFp16(MIL::Transform::ProgramTransformer &,MIL::Passes::CompressionOptions const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1EA99B980;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<MIL::Passes::CompressWeightsFp32ToFp16(MIL::Transform::ProgramTransformer &,MIL::Passes::CompressionOptions const&)::$_0,std::allocator<MIL::Passes::CompressWeightsFp32ToFp16(MIL::Transform::ProgramTransformer &,MIL::Passes::CompressionOptions const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1EA99B980;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<MIL::Passes::CompressWeightsFp32ToFp16(MIL::Transform::ProgramTransformer &,MIL::Passes::CompressionOptions const&)::$_0,std::allocator<MIL::Passes::CompressWeightsFp32ToFp16(MIL::Transform::ProgramTransformer &,MIL::Passes::CompressionOptions const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::operator()(uint64_t a1, MIL::Transform::MatchContext *a2, _QWORD *a3)
{
  uint64_t v5;
  MIL::IRValueType *v6;
  uint64_t v7;
  void (***MILContext)(MIL::MILContextImpl *__hidden);
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *OpsetName;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  MIL::MatchingPrivate::MatchItem *v18;
  void *v19[2];
  char v20;
  void *__p[2];
  char v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  _BYTE v25[40];
  uint64_t v26;
  std::__shared_weak_count *v27;

  MIL::Matching::MatchView::MatchView(&v18, a3);
  std::string::basic_string[abi:ne180100]<0>(__p, "val");
  MIL::Matching::MatchView::GetAttribute(&v18, (unsigned __int8 *)__p, &v26);
  if (v22 < 0)
    operator delete(__p[0]);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 32))(v26);
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5) >= *(_QWORD *)(a1 + 8)
    && (v6 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 32))(v26),
        v7 = MIL::IRValueType::AsTensorType(v6),
        (*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 88))(v7) == 5))
  {
    MILContext = (void (***)(MIL::MILContextImpl *__hidden))MIL::Transform::MatchContext::GetMILContext(a2);
    v23 = v26;
    v24 = v27;
    if (v27)
    {
      p_shared_owners = (unint64_t *)&v27->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    MIL::Passes::CompressFp32ValueToFp16(MILContext, &v23, (uint64_t)v25);
    v11 = v24;
    if (v24)
    {
      v12 = (unint64_t *)&v24->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    OpsetName = (uint64_t *)MIL::Matching::MatchView::GetOpsetName(&v18);
    std::string::basic_string[abi:ne180100]<0>(v19, "constexpr_cast");
    std::__optional_storage_base<std::pair<std::string,std::string>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::pair<std::string,std::string>,false>>(*(_QWORD *)(a1 + 16), (__int128 *)__p);
    std::__optional_destruct_base<std::pair<std::string,std::string>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
    if (v20 < 0)
      operator delete(v19[0]);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v25);
  }
  else
  {
    MIL::Transform::MatchContext::RejectMatch((uint64_t)a2);
  }
  v15 = v27;
  if (v27)
  {
    v16 = (unint64_t *)&v27->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  MIL::Matching::MatchView::~MatchView((MIL::Matching::MatchView *)&v18);
}

void sub_1E0620BB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;

  if (a15 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v27 - 88);
  v29 = *(std::__shared_weak_count **)(v27 - 40);
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  MIL::Matching::MatchView::~MatchView((MIL::Matching::MatchView *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<MIL::Passes::CompressWeightsFp32ToFp16(MIL::Transform::ProgramTransformer &,MIL::Passes::CompressionOptions const&)::$_0,std::allocator<MIL::Passes::CompressWeightsFp32ToFp16(MIL::Transform::ProgramTransformer &,MIL::Passes::CompressionOptions const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Passes::CompressWeightsFp32ToFp16(MIL::Transform::ProgramTransformer &,MIL::Passes::CompressionOptions const&)::$_0,std::allocator<MIL::Passes::CompressWeightsFp32ToFp16(MIL::Transform::ProgramTransformer &,MIL::Passes::CompressionOptions const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::target_type()
{
}

void MIL::Passes::`anonymous namespace'::AddOperationWithAttrsMap(uint64_t **this@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v10;
  BOOL v13;
  int *v14;
  int v18;
  int v19;
  size_t v21;
  std::string *v22;
  const void *v23;
  int v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  char *v29;
  MIL::Transform::NewOperationOutput *v30;
  size_t v31;
  std::string *v32;
  const void *v33;
  int v34;
  const std::string::value_type *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  char *v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  char *v43;
  void *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::string *v48;
  __int128 v49;
  void *__p[2];
  int64_t v51;
  void *v52[2];
  uint64_t v53;
  MIL::Opsets::Common::ios15 *v54;
  std::__shared_weak_count *v55;
  std::string v56;
  MIL::Opsets::Common::ios15 *v57;
  std::__shared_weak_count *v58;
  _QWORD v59[4];
  _QWORD v60[4];
  _QWORD v61[4];
  _QWORD v62[5];

  v62[4] = *MEMORY[0x1E0C80C00];
  *(_BYTE *)a5 = 0;
  *(_BYTE *)(a5 + 48) = 0;
  v10 = *((unsigned __int8 *)a2 + 23);
  if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
    if (v10 == 5)
    {
      if (*(_DWORD *)a2 != 829648745 || *((_BYTE *)a2 + 4) != 53)
      {
        if (*(_DWORD *)a2 != 829648745 || *((_BYTE *)a2 + 4) != 54)
        {
          v13 = *(_DWORD *)a2 == 829648745 && *((_BYTE *)a2 + 4) == 55;
          v14 = (int *)a2;
          if (!v13)
            goto LABEL_30;
        }
LABEL_56:
        if ((v10 & 0x80u) == 0)
          v31 = *((unsigned __int8 *)a2 + 23);
        else
          v31 = a2[1];
        v32 = &v56;
        std::string::basic_string[abi:ne180100]((uint64_t)&v56, v31 + 2);
        if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v32 = (std::string *)v56.__r_.__value_.__r.__words[0];
        if (v31)
        {
          if (*((char *)a2 + 23) >= 0)
            v33 = a2;
          else
            v33 = (const void *)*a2;
          memmove(v32, v33, v31);
        }
        strcpy((char *)v32 + v31, "::");
        v34 = *(char *)(a3 + 23);
        if (v34 >= 0)
          v35 = (const std::string::value_type *)a3;
        else
          v35 = *(const std::string::value_type **)a3;
        if (v34 >= 0)
          v36 = *(unsigned __int8 *)(a3 + 23);
        else
          v36 = *(_QWORD *)(a3 + 8);
        v37 = std::string::append(&v56, v35, v36);
        v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
        v51 = v37->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v38;
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v37->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v56.__r_.__value_.__l.__data_);
        if (v51 >= 0)
          v39 = (char *)__p;
        else
          v39 = (char *)__p[0];
        *(_OWORD *)&v56.__r_.__value_.__l.__data_ = 0uLL;
        MIL::Transform::MatchContext::AddOperation(this, v39, (uint64_t *)&v56, a4, v61);
        v30 = (MIL::Transform::NewOperationOutput *)v61;
        goto LABEL_89;
      }
LABEL_78:
      MIL::Transform::MatchContext::GetMILContextPtr(this, &v57);
      std::string::basic_string[abi:ne180100]<0>(__p, "ios16");
      MIL::Passes::RegisterOpsetIfNot(&v57, (uint64_t *)__p);
      if (SHIBYTE(v51) < 0)
        operator delete(__p[0]);
      v40 = v58;
      if (v58)
      {
        p_shared_owners = (unint64_t *)&v58->__shared_owners_;
        do
          v42 = __ldaxr(p_shared_owners);
        while (__stlxr(v42 - 1, p_shared_owners));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      std::operator+<char>();
      if (v51 >= 0)
        v43 = (char *)__p;
      else
        v43 = (char *)__p[0];
      *(_OWORD *)&v56.__r_.__value_.__l.__data_ = 0uLL;
      MIL::Transform::MatchContext::AddOperationWithSpecifiedOpsetName(this, v43, (uint64_t *)&v56, a4, v62);
      v30 = (MIL::Transform::NewOperationOutput *)v62;
      goto LABEL_89;
    }
LABEL_34:
    if ((v10 & 0x80u) == 0)
      v21 = *((unsigned __int8 *)a2 + 23);
    else
      v21 = a2[1];
    v22 = &v56;
    std::string::basic_string[abi:ne180100]((uint64_t)&v56, v21 + 2);
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v22 = (std::string *)v56.__r_.__value_.__r.__words[0];
    if (v21)
    {
      if (*((char *)a2 + 23) >= 0)
        v23 = a2;
      else
        v23 = (const void *)*a2;
      memmove(v22, v23, v21);
    }
    strcpy((char *)v22 + v21, "::");
    v24 = *(char *)(a3 + 23);
    if (v24 >= 0)
      v25 = (const std::string::value_type *)a3;
    else
      v25 = *(const std::string::value_type **)a3;
    if (v24 >= 0)
      v26 = *(unsigned __int8 *)(a3 + 23);
    else
      v26 = *(_QWORD *)(a3 + 8);
    v27 = std::string::append(&v56, v25, v26);
    v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v51 = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v56.__r_.__value_.__l.__data_);
    if (v51 >= 0)
      v29 = (char *)__p;
    else
      v29 = (char *)__p[0];
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = 0uLL;
    MIL::Transform::MatchContext::AddOperation(this, v29, (uint64_t *)&v56, a4, v59);
    v30 = (MIL::Transform::NewOperationOutput *)v59;
LABEL_89:
    MIL::Transform::NewOperationOutput::~NewOperationOutput(v30);
    if ((SHIBYTE(v51) & 0x80000000) == 0)
      return;
    v44 = __p[0];
    goto LABEL_91;
  }
  if (a2[1] != 5)
    goto LABEL_34;
  v14 = (int *)*a2;
  if (*(_DWORD *)*a2 == 829648745 && *(_BYTE *)(*a2 + 4) == 53)
    goto LABEL_78;
  if (*v14 == 829648745 && *((_BYTE *)v14 + 4) == 54)
    goto LABEL_56;
  if (*v14 == 829648745 && *((_BYTE *)v14 + 4) == 55)
    goto LABEL_56;
LABEL_30:
  v18 = *v14;
  v19 = *((unsigned __int8 *)v14 + 4);
  if (v18 != 829648745 || v19 != 56)
    goto LABEL_34;
  MIL::Transform::MatchContext::GetMILContextPtr(this, &v54);
  std::string::basic_string[abi:ne180100]<0>(__p, "ios17");
  MIL::Passes::RegisterOpsetIfNot(&v54, (uint64_t *)__p);
  if (SHIBYTE(v51) < 0)
    operator delete(__p[0]);
  v45 = v55;
  if (v55)
  {
    v46 = (unint64_t *)&v55->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  std::operator+<char>();
  if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v48 = &v56;
  else
    v48 = (std::string *)v56.__r_.__value_.__r.__words[0];
  __p[0] = 0;
  __p[1] = 0;
  MIL::Transform::MatchContext::AddOperationWithSpecifiedOpsetName(this, (char *)v48, (uint64_t *)__p, a4, v60);
  MIL::Transform::NewOperationOutput::~NewOperationOutput((MIL::Transform::NewOperationOutput *)v60);
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(__p, "ios17", "ios18");
  if (*(_BYTE *)(a5 + 48))
  {
    std::pair<std::string,std::string>::operator=[abi:ne180100](a5, (__int128 *)__p);
    if (SHIBYTE(v53) < 0)
      operator delete(v52[0]);
  }
  else
  {
    *(_OWORD *)a5 = *(_OWORD *)__p;
    *(_QWORD *)(a5 + 16) = v51;
    __p[0] = 0;
    __p[1] = 0;
    v49 = *(_OWORD *)v52;
    v51 = 0;
    v52[0] = 0;
    *(_OWORD *)(a5 + 24) = v49;
    *(_QWORD *)(a5 + 40) = v53;
    v52[1] = 0;
    v53 = 0;
    *(_BYTE *)(a5 + 48) = 1;
  }
  if (SHIBYTE(v51) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
  {
    v44 = (void *)v56.__r_.__value_.__r.__words[0];
LABEL_91:
    operator delete(v44);
  }
}

void sub_1E0621214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  uint64_t v27;

  if (a26 < 0)
    operator delete(__p);
  std::__optional_destruct_base<std::pair<std::string,std::string>,false>::~__optional_destruct_base[abi:ne180100](v27);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1E06212F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string,std::string>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 v6;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v5);
  v6 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)v5 = v6;
  *((_BYTE *)a2 + 47) = 0;
  *((_BYTE *)a2 + 24) = 0;
  return a1;
}

__n128 std::__optional_storage_base<std::pair<std::string,std::string>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::pair<std::string,std::string>,false>>(uint64_t a1, __int128 *a2)
{
  __n128 result;
  __int128 v3;

  if (*(unsigned __int8 *)(a1 + 48) == *((unsigned __int8 *)a2 + 48))
  {
    if (*(_BYTE *)(a1 + 48))
      std::pair<std::string,std::string>::operator=[abi:ne180100](a1, a2);
  }
  else if (*(_BYTE *)(a1 + 48))
  {
    std::__optional_destruct_base<std::pair<std::string,std::string>,false>::reset[abi:ne180100](a1);
  }
  else
  {
    v3 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v3;
    *(__int128 *)((char *)a2 + 8) = 0uLL;
    *(_QWORD *)a2 = 0;
    result = *(__n128 *)((char *)a2 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    *(__n128 *)(a1 + 24) = result;
    a2[2] = 0uLL;
    *((_QWORD *)a2 + 3) = 0;
    *(_BYTE *)(a1 + 48) = 1;
  }
  return result;
}

void std::__optional_destruct_base<std::pair<std::string,std::string>,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)(a1 + 24));
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(_BYTE *)(a1 + 48) = 0;
  }
}

void std::__function::__func<MIL::Passes::QuantizeWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::QuantizationOptions const&)::$_0,std::allocator<MIL::Passes::QuantizeWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::QuantizationOptions const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

__n128 std::__function::__func<MIL::Passes::QuantizeWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::QuantizationOptions const&)::$_0,std::allocator<MIL::Passes::QuantizeWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::QuantizationOptions const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1EA99BA00;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<MIL::Passes::QuantizeWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::QuantizationOptions const&)::$_0,std::allocator<MIL::Passes::QuantizeWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::QuantizationOptions const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1EA99BA00;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<MIL::Passes::QuantizeWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::QuantizationOptions const&)::$_0,std::allocator<MIL::Passes::QuantizeWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::QuantizationOptions const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::operator()(uint64_t a1, MIL::Transform::MatchContext *a2, _QWORD *a3)
{
  uint64_t v5;
  MIL::IRValueType *v6;
  uint64_t v7;
  MIL::IRValueType *v8;
  MIL::IRTensorValueType *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  MIL::Builder::OperationBuilder::OperationBuilderImpl **Operation;
  uint64_t v14;
  char v15;
  char v16;
  void (***MILContext)(MIL::MILContextImpl *__hidden);
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t *OpsetName;
  std::runtime_error *exception;
  MIL::MatchingPrivate::MatchItem *v41;
  void *v42[2];
  char v43;
  void *__p[2];
  char v45;
  _BYTE v46[40];
  uint64_t v47;
  uint64_t v48;
  void *v49;
  std::__shared_weak_count *v50;

  MIL::Matching::MatchView::MatchView(&v41, a3);
  std::string::basic_string[abi:ne180100]<0>(__p, "val");
  MIL::Matching::MatchView::GetAttribute(&v41, (unsigned __int8 *)__p, &v49);
  if (v45 < 0)
    operator delete(__p[0]);
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v49 + 32))(v49);
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5) < *(_QWORD *)(**(_QWORD **)(a1 + 8) + 48))
    goto LABEL_6;
  v6 = (MIL::IRValueType *)(*(uint64_t (**)(void *))(*(_QWORD *)v49 + 32))(v49);
  v7 = MIL::IRValueType::AsTensorType(v6);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 88))(v7) != *(_DWORD *)(**(_QWORD **)(a1 + 8) + 4))
    goto LABEL_6;
  v8 = (MIL::IRValueType *)(*(uint64_t (**)(void *))(*(_QWORD *)v49 + 32))(v49);
  v9 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v8);
  if (MIL::IRTensorValueType::IsScalar(v9))
    goto LABEL_6;
  Operation = (MIL::Builder::OperationBuilder::OperationBuilderImpl **)MIL::Matching::MatchView::GetOperation(&v41);
  v47 = 0;
  v48 = 0;
  v14 = **(_QWORD **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "output");
  v16 = v15;
  if (v45 < 0)
  {
    operator delete(__p[0]);
    if ((v16 & 1) != 0)
      goto LABEL_15;
LABEL_6:
    MIL::Transform::MatchContext::RejectMatch((uint64_t)a2);
    goto LABEL_7;
  }
  if ((v15 & 1) == 0)
    goto LABEL_6;
LABEL_15:
  MILContext = (void (***)(MIL::MILContextImpl *__hidden))MIL::Transform::MatchContext::GetMILContext(a2);
  v18 = v49;
  v19 = v50;
  if (v50)
  {
    p_shared_owners = (unint64_t *)&v50->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  v22 = v48;
  switch(***(_DWORD ***)(a1 + 8))
  {
    case 1:
      __p[0] = v18;
      __p[1] = v19;
      if (v19)
      {
        v23 = (unint64_t *)&v19->__shared_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      MIL::Passes::QuantizeValueAsymmetricInt8(MILContext, (uint64_t *)__p, v22 | 0x100000000, (uint64_t)v46);
      v25 = (std::__shared_weak_count *)__p[1];
      if (!__p[1])
        goto LABEL_50;
      v26 = (unint64_t *)((char *)__p[1] + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      break;
    case 2:
      __p[0] = v18;
      __p[1] = v19;
      if (v19)
      {
        v34 = (unint64_t *)&v19->__shared_owners_;
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      MIL::Passes::QuantizeValueAsymmetricUInt8(MILContext, (uint64_t *)__p, v22 | 0x100000000, (uint64_t)v46);
      v25 = (std::__shared_weak_count *)__p[1];
      if (!__p[1])
        goto LABEL_50;
      v36 = (unint64_t *)((char *)__p[1] + 8);
      do
        v27 = __ldaxr(v36);
      while (__stlxr(v27 - 1, v36));
      break;
    case 3:
      __p[0] = v18;
      __p[1] = v19;
      if (v19)
      {
        v28 = (unint64_t *)&v19->__shared_owners_;
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      MIL::Passes::QuantizeValueSymmetricInt8(MILContext, (uint64_t *)__p, v22 | 0x100000000, (uint64_t)v46);
      v25 = (std::__shared_weak_count *)__p[1];
      if (!__p[1])
        goto LABEL_50;
      v30 = (unint64_t *)((char *)__p[1] + 8);
      do
        v27 = __ldaxr(v30);
      while (__stlxr(v27 - 1, v30));
      break;
    case 4:
      __p[0] = v18;
      __p[1] = v19;
      if (v19)
      {
        v31 = (unint64_t *)&v19->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
      }
      MIL::Passes::QuantizeValueNoZeroPointUInt8(MILContext, (uint64_t *)__p, v22 | 0x100000000, (uint64_t)v46);
      v25 = (std::__shared_weak_count *)__p[1];
      if (!__p[1])
        goto LABEL_50;
      v33 = (unint64_t *)((char *)__p[1] + 8);
      do
        v27 = __ldaxr(v33);
      while (__stlxr(v27 - 1, v33));
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unsupported quantization mode.");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
LABEL_50:
  if (v19)
  {
    v37 = (unint64_t *)&v19->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  OpsetName = (uint64_t *)MIL::Matching::MatchView::GetOpsetName(&v41);
  std::string::basic_string[abi:ne180100]<0>(v42, "constexpr_affine_dequantize");
  std::__optional_storage_base<std::pair<std::string,std::string>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::pair<std::string,std::string>,false>>(*(_QWORD *)(a1 + 16), (__int128 *)__p);
  std::__optional_destruct_base<std::pair<std::string,std::string>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
  if (v43 < 0)
    operator delete(v42[0]);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v46);
LABEL_7:
  v10 = v50;
  if (v50)
  {
    v11 = (unint64_t *)&v50->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  MIL::Matching::MatchView::~MatchView((MIL::Matching::MatchView *)&v41);
}

void sub_1E06218B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;

  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v31 = *(std::__shared_weak_count **)(v27 - 40);
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  MIL::Matching::MatchView::~MatchView((MIL::Matching::MatchView *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<MIL::Passes::QuantizeWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::QuantizationOptions const&)::$_0,std::allocator<MIL::Passes::QuantizeWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::QuantizationOptions const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Passes::QuantizeWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::QuantizationOptions const&)::$_0,std::allocator<MIL::Passes::QuantizeWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::QuantizationOptions const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::target_type()
{
}

uint64_t MIL::Passes::`anonymous namespace'::InferIOChannels(MIL::Builder::OperationBuilder::OperationBuilderImpl **this, _QWORD *a2, int **a3, _QWORD *a4, _QWORD *a5)
{
  int *v10;
  int *v11;
  int v13;
  int v14;
  MIL::IRValueType *OutputType;
  MIL::IRTensorValueType *v17;
  uint64_t v18;
  int v19;
  int v20;
  int *v21;
  int v22;
  int v23;
  BOOL v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  MIL::Builder::OperationBuilder *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  uint64_t Operator;
  uint64_t v33;
  std::string::size_type v34;
  __int128 v35;
  int v36;
  int *v37;
  int v38;
  int v39;
  _BOOL4 v41;
  int v42;
  int v43;
  std::string *v44;
  std::string::size_type size;
  std::string::size_type v46;
  uint64_t v47;
  uint64_t Output;
  uint64_t ArgumentForParameter;
  int v51;
  int *v52;
  _BOOL4 v53;
  int v54;
  int v55;
  std::string *v57;
  int data;
  int v59;
  uint64_t v61;
  uint64_t v62;
  MIL::Builder::Variable::VariableImpl **v63;
  const void *Value;
  int v65;
  int v66;
  uint64_t *v67;
  uint64_t *v68;
  unsigned int v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  int v75;
  unint64_t *v76;
  unint64_t v77;
  std::runtime_error *exception;
  MIL::IRValueType *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v85;
  int v86;
  int v87;
  _QWORD *v88;
  _QWORD *v89;
  void *__p[2];
  char v91;
  std::string v92;
  MIL::Builder::OperationBuilder *v93;
  std::__shared_weak_count *v94;
  _BYTE v95[16];
  _QWORD *v96;

  if (*((char *)a3 + 23) < 0)
  {
    v11 = a3[1];
    if (v11 == (int *)5 && **a3 == 1970302569 && *((_BYTE *)*a3 + 4) == 116)
      goto LABEL_17;
    if (v11 != (int *)6)
      goto LABEL_143;
    v10 = *a3;
    goto LABEL_12;
  }
  if (*((_BYTE *)a3 + 23) != 5)
  {
    v10 = (int *)a3;
    if (*((_BYTE *)a3 + 23) != 6)
      goto LABEL_143;
LABEL_12:
    v13 = *v10;
    v14 = *((unsigned __int16 *)v10 + 2);
    if (v13 != 1886680431 || v14 != 29813)
      goto LABEL_143;
    goto LABEL_17;
  }
  if (*(_DWORD *)a3 != 1970302569 || *((_BYTE *)a3 + 4) != 116)
  {
LABEL_143:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Only input or output mode is supported.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
LABEL_17:
  OutputType = (MIL::IRValueType *)MIL::Builder::OperationBuilder::GetOutputType(this, 0);
  v17 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(OutputType);
  v18 = MIL::IRTensorValueType::Rank(v17);
  v19 = v18;
  v20 = *((char *)a3 + 23);
  if (v20 < 0)
  {
    if (a3[1] != (int *)5)
      goto LABEL_29;
    v21 = *a3;
  }
  else
  {
    v21 = (int *)a3;
    if (v20 != 5)
      goto LABEL_29;
  }
  v22 = *v21;
  v23 = *((unsigned __int8 *)v21 + 4);
  v24 = v22 == 1970302569 && v23 == 116;
  if (v24 && v18 == 1)
    return 0;
LABEL_29:
  v88 = a5;
  v89 = a4;
  MIL::Builder::OperationBuilder::GetChildOperations((MIL::Builder::OperationBuilder *)this, (uint64_t)v95);
  v26 = v96;
  if (v96)
  {
    v87 = v19;
    v85 = v19 - 1;
    v86 = v19 - 2;
    v27 = -1;
    while (1)
    {
      v28 = (MIL::Builder::OperationBuilder *)v26[2];
      v29 = (std::__shared_weak_count *)v26[3];
      v93 = v28;
      v94 = v29;
      if (v29)
      {
        p_shared_owners = (unint64_t *)&v29->__shared_owners_;
        do
          v31 = __ldxr(p_shared_owners);
        while (__stxr(v31 + 1, p_shared_owners));
      }
      Operator = MIL::Builder::OperationBuilder::GetOperator(v28);
      v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Operator + 16))(Operator);
      if (std::string::find((const std::string *)v33, 46, 0) == -1)
      {
        if (*(char *)(v33 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v92, *(const std::string::value_type **)v33, *(_QWORD *)(v33 + 8));
        }
        else
        {
          v35 = *(_OWORD *)v33;
          v92.__r_.__value_.__r.__words[2] = *(_QWORD *)(v33 + 16);
          *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v35;
        }
      }
      else
      {
        v34 = std::string::find((const std::string *)v33, 46, 0);
        std::string::basic_string(&v92, (const std::string *)v33, v34 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)__p);
      }
      if (a2[3]
        && !std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)&v92))
      {
        v53 = 1;
        goto LABEL_128;
      }
      v36 = *((char *)a3 + 23);
      if (v36 < 0)
      {
        if (a3[1] != (int *)6)
        {
LABEL_52:
          v41 = 0;
          goto LABEL_53;
        }
        v37 = *a3;
      }
      else
      {
        v37 = (int *)a3;
        if (v36 != 6)
          goto LABEL_52;
      }
      v38 = *v37;
      v39 = *((unsigned __int16 *)v37 + 2);
      v41 = v38 == 1886680431 && v39 == 29813;
LABEL_53:
      v42 = !v41;
      if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
      {
        size = v92.__r_.__value_.__l.__size_;
        if (v92.__r_.__value_.__l.__size_ != 14)
          goto LABEL_84;
        v44 = (std::string *)v92.__r_.__value_.__r.__words[0];
      }
      else
      {
        v43 = HIBYTE(v92.__r_.__value_.__r.__words[2]);
        if (HIBYTE(v92.__r_.__value_.__r.__words[2]) != 14)
          goto LABEL_81;
        v44 = &v92;
      }
      v46 = v44->__r_.__value_.__r.__words[0];
      v47 = *(std::string::size_type *)((char *)v44->__r_.__value_.__r.__words + 6);
      if (v46 == 0x6172745F766E6F63 && v47 == 0x65736F70736E6172)
      {
        Output = MIL::Builder::OperationBuilder::GetOutput(this, 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "weight");
        ArgumentForParameter = MIL::Builder::OperationBuilder::GetArgumentForParameter((std::string::size_type)v28, (uint64_t)__p, 0);
        if (v91 < 0)
          operator delete(__p[0]);
        if (Output == ArgumentForParameter)
        {
          v51 = *((char *)a3 + 23);
          if (v51 < 0)
          {
            if (a3[1] == (int *)6)
            {
              v52 = *a3;
LABEL_72:
              v54 = *v52;
              v55 = *((unsigned __int16 *)v52 + 2);
              v42 = v54 == 1886680431 && v55 == 29813;
              goto LABEL_79;
            }
          }
          else
          {
            v52 = (int *)a3;
            if (v51 == 6)
              goto LABEL_72;
          }
          v42 = 0;
        }
      }
LABEL_79:
      if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        v43 = HIBYTE(v92.__r_.__value_.__r.__words[2]);
LABEL_81:
        if (v43 != 6)
          goto LABEL_126;
        v57 = &v92;
        goto LABEL_86;
      }
      size = v92.__r_.__value_.__l.__size_;
LABEL_84:
      if (size != 6)
        goto LABEL_126;
      v57 = (std::string *)v92.__r_.__value_.__r.__words[0];
LABEL_86:
      data = (int)v57->__r_.__value_.__l.__data_;
      v59 = WORD2(v57->__r_.__value_.__r.__words[0]);
      if (data != 1836343661 || v59 != 27765)
        goto LABEL_126;
      v61 = MIL::Builder::OperationBuilder::GetOutput(this, 0);
      std::string::basic_string[abi:ne180100]<0>(__p, "y");
      v62 = MIL::Builder::OperationBuilder::GetArgumentForParameter((std::string::size_type)v28, (uint64_t)__p, 0);
      if (v91 < 0)
        operator delete(__p[0]);
      if (v61 != v62)
        goto LABEL_126;
      std::string::basic_string[abi:ne180100]<0>(__p, "transpose_y");
      v63 = (MIL::Builder::Variable::VariableImpl **)MIL::Builder::OperationBuilder::GetArgumentForParameter((std::string::size_type)v28, (uint64_t)__p, 0);
      Value = (const void *)MIL::Builder::Variable::TryGetValue(v63);
      v65 = MIL::IRValue::GetScalar<BOOL>(Value);
      if (v91 < 0)
        operator delete(__p[0]);
      v66 = *((unsigned __int8 *)a3 + 23);
      if (v65)
      {
        if ((v66 & 0x80) != 0)
        {
          v42 = v85;
          if (a3[1] != (int *)6)
            goto LABEL_126;
          v67 = (uint64_t *)*a3;
LABEL_105:
          v69 = 1869968496;
          v70 = bswap32(*(_DWORD *)v67);
          if (v70 == 1869968496 && (v70 = bswap32(*((unsigned __int16 *)v67 + 2)) >> 16, v69 = 30068, v70 == 30068))
          {
            v71 = 0;
          }
          else if (v70 < v69)
          {
            v71 = -1;
          }
          else
          {
            v71 = 1;
          }
          if (v71)
            v75 = -1;
          else
            v75 = -2;
          goto LABEL_125;
        }
        v67 = (uint64_t *)a3;
        v42 = v85;
        if (v66 == 6)
          goto LABEL_105;
      }
      else
      {
        if ((v66 & 0x80) != 0)
        {
          v42 = v86;
          if (a3[1] != (int *)6)
            goto LABEL_126;
          v68 = (uint64_t *)*a3;
LABEL_110:
          v72 = 1869968496;
          v73 = bswap32(*(_DWORD *)v68);
          if (v73 == 1869968496 && (v73 = bswap32(*((unsigned __int16 *)v68 + 2)) >> 16, v72 = 30068, v73 == 30068))
          {
            v74 = 0;
          }
          else if (v73 < v72)
          {
            v74 = -1;
          }
          else
          {
            v74 = 1;
          }
          if (v74)
            v75 = -2;
          else
            v75 = -1;
LABEL_125:
          v42 = v75 + v87;
          goto LABEL_126;
        }
        v68 = (uint64_t *)a3;
        v42 = v86;
        if (v66 == 6)
          goto LABEL_110;
      }
LABEL_126:
      v53 = v27 >= 0 && v27 != v42;
      if (v27 < 0 || v27 == v42)
        v27 = v42;
LABEL_128:
      if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v92.__r_.__value_.__l.__data_);
        if (!v29)
          goto LABEL_136;
      }
      else if (!v29)
      {
        goto LABEL_136;
      }
      v76 = (unint64_t *)&v29->__shared_owners_;
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
LABEL_136:
      if (v53)
      {
        v25 = 0;
        goto LABEL_147;
      }
      v26 = (_QWORD *)*v26;
      if (!v26)
        goto LABEL_145;
    }
  }
  v27 = -1;
LABEL_145:
  *v89 = v27;
  v80 = (MIL::IRValueType *)MIL::Builder::OperationBuilder::GetOutputType(this, 0);
  v81 = MIL::IRValueType::AsTensorType(v80);
  v82 = *(_QWORD *)(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v81 + 96))(v81) + 8 * *v89);
  v83 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 16))(v82);
  *v88 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v83 + 48))(v83);
  v25 = 1;
LABEL_147:
  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table((uint64_t)v95);
  return v25;
}

void sub_1E0622148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,char a28)
{
  if (a25 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void std::__function::__func<MIL::Passes::SparsifyWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::SparsificationOptions const&)::$_0,std::allocator<MIL::Passes::SparsifyWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::SparsificationOptions const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

__n128 std::__function::__func<MIL::Passes::SparsifyWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::SparsificationOptions const&)::$_0,std::allocator<MIL::Passes::SparsifyWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::SparsificationOptions const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1EA99BA80;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<MIL::Passes::SparsifyWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::SparsificationOptions const&)::$_0,std::allocator<MIL::Passes::SparsifyWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::SparsificationOptions const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1EA99BA80;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<MIL::Passes::SparsifyWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::SparsificationOptions const&)::$_0,std::allocator<MIL::Passes::SparsifyWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::SparsificationOptions const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::operator()(uint64_t a1, MIL::Transform::MatchContext *a2, _QWORD *a3)
{
  uint64_t v5;
  MIL::IRValueType *v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  int v10;
  void (***v11)(MIL::MILContextImpl *__hidden);
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void (***MILContext)(MIL::MILContextImpl *__hidden);
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  uint64_t *OpsetName;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::logic_error *exception;
  MIL::MatchingPrivate::MatchItem *v26;
  void *v27[2];
  char v28;
  void *__p[2];
  char v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  _OWORD v33[2];
  int v34;
  uint64_t v35;
  std::__shared_weak_count *v36;

  MIL::Matching::MatchView::MatchView(&v26, a3);
  std::string::basic_string[abi:ne180100]<0>(__p, "val");
  MIL::Matching::MatchView::GetAttribute(&v26, (unsigned __int8 *)__p, &v35);
  if (v30 < 0)
    operator delete(__p[0]);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 32))(v35);
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5) < *(_QWORD *)(**(_QWORD **)(a1 + 8) + 8)
    || ((v6 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 32))(v35),
         v7 = MIL::IRValueType::AsTensorType(v6),
         v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 88))(v7),
         v8 <= 0xE)
      ? (v9 = ((1 << v8) & 0x4230) == 0)
      : (v9 = 1),
        v9))
  {
    MIL::Transform::MatchContext::RejectMatch((uint64_t)a2);
    goto LABEL_29;
  }
  memset(v33, 0, sizeof(v33));
  v34 = 1065353216;
  v10 = ***(_DWORD ***)(a1 + 8);
  if (v10 == 1)
  {
    MILContext = (void (***)(MIL::MILContextImpl *__hidden))MIL::Transform::MatchContext::GetMILContext(a2);
    v31 = v35;
    v32 = v36;
    if (v36)
    {
      p_shared_owners = (unint64_t *)&v36->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
    MIL::Passes::SparsifyWithThreshold(MILContext, &v31, (uint64_t)__p, *(float *)(**(_QWORD **)(a1 + 8) + 4));
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__move_assign((uint64_t)v33, (uint64_t *)__p);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)__p);
    v14 = v32;
    if (!v32)
      goto LABEL_25;
    v20 = (unint64_t *)&v32->__shared_owners_;
    do
      v16 = __ldaxr(v20);
    while (__stlxr(v16 - 1, v20));
  }
  else
  {
    if (v10 != 2)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "invalid sparsification mode.");
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
    v11 = (void (***)(MIL::MILContextImpl *__hidden))MIL::Transform::MatchContext::GetMILContext(a2);
    v31 = v35;
    v32 = v36;
    if (v36)
    {
      v12 = (unint64_t *)&v36->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    MIL::Passes::SparsifyWithPercentile(v11, &v31, (uint64_t)__p, *(float *)(**(_QWORD **)(a1 + 8) + 4));
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__move_assign((uint64_t)v33, (uint64_t *)__p);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)__p);
    v14 = v32;
    if (!v32)
      goto LABEL_25;
    v15 = (unint64_t *)&v32->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
  }
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_25:
  OpsetName = (uint64_t *)MIL::Matching::MatchView::GetOpsetName(&v26);
  std::string::basic_string[abi:ne180100]<0>(v27, "constexpr_sparse_to_dense");
  std::__optional_storage_base<std::pair<std::string,std::string>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::pair<std::string,std::string>,false>>(*(_QWORD *)(a1 + 16), (__int128 *)__p);
  std::__optional_destruct_base<std::pair<std::string,std::string>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
  if (v28 < 0)
    operator delete(v27[0]);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v33);
LABEL_29:
  v22 = v36;
  if (v36)
  {
    v23 = (unint64_t *)&v36->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  MIL::Matching::MatchView::~MatchView((MIL::Matching::MatchView *)&v26);
}

void sub_1E0622530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v28;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v28 - 96);
  v30 = *(std::__shared_weak_count **)(v28 - 40);
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  MIL::Matching::MatchView::~MatchView((MIL::Matching::MatchView *)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<MIL::Passes::SparsifyWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::SparsificationOptions const&)::$_0,std::allocator<MIL::Passes::SparsifyWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::SparsificationOptions const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Passes::SparsifyWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::SparsificationOptions const&)::$_0,std::allocator<MIL::Passes::SparsifyWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::SparsificationOptions const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::target_type()
{
}

void std::__function::__func<MIL::Passes::PalettizeWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::PalettizationOptions const&)::$_0,std::allocator<MIL::Passes::PalettizeWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::PalettizationOptions const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

__n128 std::__function::__func<MIL::Passes::PalettizeWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::PalettizationOptions const&)::$_0,std::allocator<MIL::Passes::PalettizeWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::PalettizationOptions const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1EA99BB00;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<MIL::Passes::PalettizeWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::PalettizationOptions const&)::$_0,std::allocator<MIL::Passes::PalettizeWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::PalettizationOptions const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1EA99BB00;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<MIL::Passes::PalettizeWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::PalettizationOptions const&)::$_0,std::allocator<MIL::Passes::PalettizeWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::PalettizationOptions const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::operator()(uint64_t a1, MIL::Transform::MatchContext *a2, _QWORD *a3)
{
  uint64_t v5;
  MIL::IRValueType *v6;
  uint64_t v7;
  unsigned int v8;
  int **v10;
  int *v11;
  MIL::Builder::OperationBuilder::OperationBuilderImpl **Operation;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  char v17;
  char v18;
  int **v19;
  int *v20;
  unint64_t v21;
  std::__shared_weak_count_vtbl *v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *p_shared_weak_owners;
  unint64_t v25;
  int v26;
  void (***v27)(MIL::MILContextImpl *__hidden);
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  std::__shared_weak_count *v41;
  unint64_t v42;
  unint64_t v43;
  void (***v44)(MIL::MILContextImpl *__hidden);
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  void (***MILContext)(MIL::MILContextImpl *__hidden);
  unint64_t *p_shared_owners;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t *OpsetName;
  int v55;
  void (***v56)(MIL::MILContextImpl *__hidden);
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  void (***v62)(MIL::MILContextImpl *__hidden);
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  uint64_t *i;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  void ***v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  std::logic_error *v82;
  std::logic_error *exception;
  MIL::MatchingPrivate::MatchItem *v84;
  void *__p[2];
  __int128 v86;
  int v87;
  MIL::Opsets::Common::ios15 *v88;
  std::__shared_weak_count *v89;
  _QWORD *v90;
  _QWORD *v91;
  unint64_t v92;
  void *v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  std::__shared_weak_count_vtbl *v96;
  char v97;
  void *v98;
  std::__shared_weak_count *v99;
  _QWORD *v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  std::__shared_weak_count_vtbl *v104;
  void *v105;
  std::__shared_weak_count *v106;
  void *v107[2];
  char v108;
  __int128 v109;
  __int128 v110;
  int v111;
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
  MIL::Matching::MatchView::MatchView(&v84, a3);
  std::string::basic_string[abi:ne180100]<0>(__p, "val");
  MIL::Matching::MatchView::GetAttribute(&v84, (unsigned __int8 *)__p, &v105);
  if (SBYTE7(v86) < 0)
    operator delete(__p[0]);
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v105 + 32))(v105);
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5) < *(_QWORD *)(**(_QWORD **)(a1 + 8) + 72))
    goto LABEL_23;
  v6 = (MIL::IRValueType *)(*(uint64_t (**)(void *))(*(_QWORD *)v105 + 32))(v105);
  v7 = MIL::IRValueType::AsTensorType(v6);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 88))(v7);
  if (v8 > 0xE || ((1 << v8) & 0x4230) == 0)
    goto LABEL_23;
  v10 = *(int ***)(a1 + 8);
  v11 = *v10;
  if (!*((_QWORD *)*v10 + 6) && !*((_QWORD *)v11 + 7) && v11[1] != 3 && *((_QWORD *)v11 + 8) < 2uLL)
  {
    v109 = 0u;
    v110 = 0u;
    v111 = 1065353216;
    v26 = **v10;
    if (v26 == 3)
    {
      LODWORD(v107[0]) = -1;
      MILContext = (void (***)(MIL::MILContextImpl *__hidden))MIL::Transform::MatchContext::GetMILContext(a2);
      v98 = v105;
      v99 = v106;
      if (v106)
      {
        p_shared_owners = (unint64_t *)&v106->__shared_owners_;
        do
          v50 = __ldxr(p_shared_owners);
        while (__stxr(v50 + 1, p_shared_owners));
      }
      MIL::Passes::PalettizeUnique(MILContext, (uint64_t *)&v98, (int *)v107, (uint64_t)__p);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__move_assign((uint64_t)&v109, (uint64_t *)__p);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)__p);
      v51 = v99;
      if (v99)
      {
        v52 = (unint64_t *)&v99->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      if (LODWORD(v107[0]) == -1)
      {
        MIL::Transform::MatchContext::RejectMatch((uint64_t)a2);
LABEL_136:
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&v109);
        goto LABEL_125;
      }
    }
    else
    {
      if (v26 == 2)
      {
        v44 = (void (***)(MIL::MILContextImpl *__hidden))MIL::Transform::MatchContext::GetMILContext(a2);
        v98 = v105;
        v99 = v106;
        if (v106)
        {
          v45 = (unint64_t *)&v106->__shared_owners_;
          do
            v46 = __ldxr(v45);
          while (__stxr(v46 + 1, v45));
        }
        MIL::Passes::PalettizeUniform(v44, (uint64_t *)&v98, *(_DWORD *)(**(_QWORD **)(a1 + 8) + 4), (uint64_t)__p);
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__move_assign((uint64_t)&v109, (uint64_t *)__p);
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)__p);
        v30 = v99;
        if (!v99)
          goto LABEL_75;
        v47 = (unint64_t *)&v99->__shared_owners_;
        do
          v32 = __ldaxr(v47);
        while (__stlxr(v32 - 1, v47));
      }
      else
      {
        if (v26 != 1)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "invalid palettization mode.");
          exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
          __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
        }
        v27 = (void (***)(MIL::MILContextImpl *__hidden))MIL::Transform::MatchContext::GetMILContext(a2);
        v98 = v105;
        v99 = v106;
        if (v106)
        {
          v28 = (unint64_t *)&v106->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        MIL::Passes::PalettizeKmeans(v27, (uint64_t *)&v98, *(_DWORD *)(**(_QWORD **)(a1 + 8) + 4), (uint64_t)__p);
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__move_assign((uint64_t)&v109, (uint64_t *)__p);
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)__p);
        v30 = v99;
        if (!v99)
          goto LABEL_75;
        v31 = (unint64_t *)&v99->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
      }
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
LABEL_75:
    OpsetName = (uint64_t *)MIL::Matching::MatchView::GetOpsetName(&v84);
    std::string::basic_string[abi:ne180100]<0>(v107, "constexpr_lut_to_dense");
    std::__optional_storage_base<std::pair<std::string,std::string>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::pair<std::string,std::string>,false>>(*(_QWORD *)(a1 + 16), (__int128 *)__p);
    std::__optional_destruct_base<std::pair<std::string,std::string>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
    if (v108 < 0)
      operator delete(v107[0]);
    goto LABEL_136;
  }
  Operation = (MIL::Builder::OperationBuilder::OperationBuilderImpl **)MIL::Matching::MatchView::GetOperation(&v84);
  v103 = 0;
  v104 = 0;
  v13 = **(_QWORD **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "output");
  v15 = v14;
  if (SBYTE7(v86) < 0)
  {
    operator delete(__p[0]);
    if ((v15 & 1) == 0)
      goto LABEL_23;
  }
  else if ((v14 & 1) == 0)
  {
    goto LABEL_23;
  }
  v101 = 0;
  v102 = 0;
  v16 = **(_QWORD **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "input");
  v18 = v17;
  if ((SBYTE7(v86) & 0x80000000) == 0)
  {
    if ((v17 & 1) != 0)
      goto LABEL_16;
LABEL_23:
    MIL::Transform::MatchContext::RejectMatch((uint64_t)a2);
    goto LABEL_125;
  }
  operator delete(__p[0]);
  if ((v18 & 1) == 0)
    goto LABEL_23;
LABEL_16:
  v98 = 0;
  v99 = 0;
  v100 = 0;
  v19 = *(int ***)(a1 + 8);
  v20 = *v19;
  v21 = *((_QWORD *)*v19 + 6);
  if (v21)
  {
    if (v103 % v21)
    {
LABEL_27:
      MIL::Transform::MatchContext::RejectMatch((uint64_t)a2);
      goto LABEL_123;
    }
    v22 = v104;
    v23 = (std::__shared_weak_count *)operator new(0x10uLL);
    p_shared_weak_owners = (std::__shared_weak_count *)&v23->__shared_weak_owners_;
    v23->__vftable = v22;
    v23->__shared_owners_ = v21;
    v99 = (std::__shared_weak_count *)&v23->__shared_weak_owners_;
    v100 = &v23->__shared_weak_owners_;
    v98 = v23;
    v20 = *v19;
  }
  else
  {
    v23 = 0;
    p_shared_weak_owners = 0;
  }
  v25 = *((_QWORD *)v20 + 7);
  if (v25)
  {
    if (v101 % v25)
      goto LABEL_27;
    v33 = (char *)p_shared_weak_owners - (char *)v23;
    v34 = ((char *)p_shared_weak_owners - (char *)v23) >> 4;
    v35 = v34 + 1;
    if ((unint64_t)(v34 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v36 = v102;
    if (v33 >> 3 > v35)
      v35 = v33 >> 3;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
      v37 = 0xFFFFFFFFFFFFFFFLL;
    else
      v37 = v35;
    if (v37)
    {
      v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)&v100, v37);
      v23 = (std::__shared_weak_count *)v98;
      p_shared_weak_owners = v99;
    }
    else
    {
      v38 = 0;
    }
    v39 = &v38[16 * v34];
    v40 = &v38[16 * v37];
    *(_QWORD *)v39 = v36;
    *((_QWORD *)v39 + 1) = v25;
    v41 = (std::__shared_weak_count *)(v39 + 16);
    if (p_shared_weak_owners != v23)
    {
      do
      {
        *((_OWORD *)v39 - 1) = *(_OWORD *)&p_shared_weak_owners[-1].__shared_owners_;
        v39 -= 16;
        p_shared_weak_owners = (std::__shared_weak_count *)((char *)p_shared_weak_owners - 16);
      }
      while (p_shared_weak_owners != v23);
      v23 = (std::__shared_weak_count *)v98;
    }
    v98 = v39;
    v99 = v41;
    v100 = v40;
    if (v23)
      operator delete(v23);
    v99 = v41;
    v19 = *(int ***)(a1 + 8);
    v20 = *v19;
  }
  v95 = *((_QWORD *)v20 + 8);
  LOBYTE(v96) = 0;
  v97 = 0;
  v42 = *((_QWORD *)*v19 + 8);
  if (v42 >= 2)
  {
    v43 = *((_QWORD *)*v19 + 6);
    if (v43 && v43 % v42 || v103 % v42)
      goto LABEL_27;
    v96 = v104;
    v97 = 1;
  }
  *(_OWORD *)__p = 0u;
  v86 = 0u;
  v87 = 1065353216;
  v55 = **v19;
  if (v55 == 2)
  {
    v62 = (void (***)(MIL::MILContextImpl *__hidden))MIL::Transform::MatchContext::GetMILContext(a2);
    v93 = v105;
    v94 = v106;
    if (v106)
    {
      v63 = (unint64_t *)&v106->__shared_owners_;
      do
        v64 = __ldxr(v63);
      while (__stxr(v64 + 1, v63));
    }
    MIL::Passes::PalettizePerBlockUniform(v62, (uint64_t *)&v93, *(_DWORD *)(**(_QWORD **)(a1 + 8) + 4), (uint64_t **)&v98, (uint64_t)&v109);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__move_assign((uint64_t)__p, (uint64_t *)&v109);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&v109);
    v59 = v94;
    if (v94)
    {
      v65 = (unint64_t *)&v94->__shared_owners_;
      do
        v61 = __ldaxr(v65);
      while (__stlxr(v61 - 1, v65));
LABEL_93:
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
  }
  else
  {
    if (v55 != 1)
    {
      v82 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v82, "invalid palettization mode.");
      v82->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(v82, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
    v56 = (void (***)(MIL::MILContextImpl *__hidden))MIL::Transform::MatchContext::GetMILContext(a2);
    v93 = v105;
    v94 = v106;
    if (v106)
    {
      v57 = (unint64_t *)&v106->__shared_owners_;
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
    }
    MIL::Passes::PalettizePerBlockKmeans(v56, (uint64_t *)&v93, *(_DWORD *)(**(_QWORD **)(a1 + 8) + 4), &v95, (uint64_t **)&v98, (uint64_t)&v109);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__move_assign((uint64_t)__p, (uint64_t *)&v109);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&v109);
    v59 = v94;
    if (v94)
    {
      v60 = (unint64_t *)&v94->__shared_owners_;
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      goto LABEL_93;
    }
  }
  v90 = 0;
  v91 = 0;
  v92 = 0;
  std::vector<std::pair<char const*,MIL::Transform::ArgumentDescription>>::reserve((uint64_t *)&v90, *((unint64_t *)&v86 + 1));
  for (i = (uint64_t *)v86; i; i = (uint64_t *)*i)
  {
    v67 = i + 2;
    if (*((char *)i + 39) < 0)
      v67 = (_QWORD *)*v67;
    v107[0] = v67;
    std::pair<char const*,MIL::Transform::ArgumentDescription>::pair[abi:ne180100]<char const*,std::shared_ptr<MIL::IRValue const> const&,0>(&v109, v107, i + 5);
    v68 = v91;
    if ((unint64_t)v91 >= v92)
    {
      v69 = std::vector<std::pair<char const*,MIL::Transform::ArgumentDescription>>::__push_back_slow_path<std::pair<char const*,MIL::Transform::ArgumentDescription>>((uint64_t *)&v90, &v109);
    }
    else
    {
      *v91 = v109;
      MIL::Transform::ArgumentDescription::ArgumentDescription(v68 + 1, (char *)&v109 + 8);
      v69 = (uint64_t)(v68 + 5);
    }
    v91 = (_QWORD *)v69;
    MIL::Transform::ArgumentDescription::~ArgumentDescription((MIL::Transform::ArgumentDescription *)((char *)&v109 + 8));
  }
  v70 = MIL::Matching::MatchView::GetOpsetName(&v84);
  v71 = *(char *)(v70 + 23);
  if (v71 < 0)
  {
    if (*(_QWORD *)(v70 + 8) != 5)
    {
LABEL_111:
      MIL::Transform::MatchContext::GetMILContextPtr((_QWORD **)a2, &v88);
      std::string::basic_string[abi:ne180100]<0>(&v109, "ios18");
      MIL::Passes::RegisterOpsetIfNot(&v88, (uint64_t *)&v109);
      if (SBYTE7(v110) < 0)
        operator delete((void *)v109);
      v73 = v89;
      if (v89)
      {
        v74 = (unint64_t *)&v89->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      if (v91 == v90)
        v76 = 0;
      else
        v76 = (uint64_t)v90;
      v109 = 0u;
      v110 = 0u;
      v111 = 1065353216;
      MIL::Transform::MatchContext::AddOperationWithSpecifiedOpsetName((uint64_t **)a2, "ios18::constexpr_lut_to_dense", v76, 0xCCCCCCCCCCCCCCCDLL * (v91 - v90), (uint64_t)&v109, v107);
      goto LABEL_122;
    }
    v70 = *(_QWORD *)v70;
  }
  else if (v71 != 5)
  {
    goto LABEL_111;
  }
  if (*(_DWORD *)v70 != 829648745 || *(_BYTE *)(v70 + 4) != 56)
    goto LABEL_111;
  if (v91 == v90)
    v81 = 0;
  else
    v81 = (uint64_t)v90;
  v109 = 0u;
  v110 = 0u;
  v111 = 1065353216;
  MIL::Transform::MatchContext::AddOperation((uint64_t **)a2, "ios18::constexpr_lut_to_dense", v81, 0xCCCCCCCCCCCCCCCDLL * (v91 - v90), (uint64_t)&v109, v107);
LABEL_122:
  MIL::Transform::NewOperationOutput::~NewOperationOutput((MIL::Transform::NewOperationOutput *)v107);
  v77 = (void ***)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&v109);
  *(_QWORD *)&v109 = &v90;
  std::vector<std::pair<char const*,MIL::Transform::ArgumentDescription> const,std::allocator<std::pair<char const*,MIL::Transform::ArgumentDescription> const>>::__destroy_vector::operator()[abi:ne180100](v77);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)__p);
LABEL_123:
  if (v98)
  {
    v99 = (std::__shared_weak_count *)v98;
    operator delete(v98);
  }
LABEL_125:
  v78 = v106;
  if (v106)
  {
    v79 = (unint64_t *)&v106->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  MIL::Matching::MatchView::~MatchView((MIL::Matching::MatchView *)&v84);
}

void sub_1E06230FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  uint64_t v32;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v32 - 112);
  v34 = *(std::__shared_weak_count **)(v32 - 152);
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  MIL::Matching::MatchView::~MatchView((MIL::Matching::MatchView *)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<MIL::Passes::PalettizeWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::PalettizationOptions const&)::$_0,std::allocator<MIL::Passes::PalettizeWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::PalettizationOptions const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Passes::PalettizeWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::PalettizationOptions const&)::$_0,std::allocator<MIL::Passes::PalettizeWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::PalettizationOptions const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::target_type()
{
}

uint64_t std::vector<std::pair<char const*,MIL::Transform::ArgumentDescription>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x666666666666667)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char const*,MIL::Transform::ArgumentDescription> const>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 40 * v6;
    std::vector<std::pair<char const*,MIL::Transform::ArgumentDescription>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::pair<char const*,MIL::Transform::ArgumentDescription> const,std::allocator<std::pair<char const*,MIL::Transform::ArgumentDescription> const> &>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1E06234C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<char const*,MIL::Transform::ArgumentDescription> const,std::allocator<std::pair<char const*,MIL::Transform::ArgumentDescription> const> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<char const*,MIL::Transform::ArgumentDescription>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<char const*,MIL::Transform::ArgumentDescription>>,std::reverse_iterator<std::pair<char const*,MIL::Transform::ArgumentDescription>*>,std::reverse_iterator<std::pair<char const*,MIL::Transform::ArgumentDescription>*>,std::reverse_iterator<std::pair<char const*,MIL::Transform::ArgumentDescription>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<char const*,MIL::Transform::ArgumentDescription>>,std::reverse_iterator<std::pair<char const*,MIL::Transform::ArgumentDescription>*>,std::reverse_iterator<std::pair<char const*,MIL::Transform::ArgumentDescription>*>,std::reverse_iterator<std::pair<char const*,MIL::Transform::ArgumentDescription>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t i;
  uint64_t v12;
  MIL::Transform::ArgumentDescription *v13;

  for (i = 48; ; i -= 40)
  {
    v12 = a3 + i;
    if (a3 + i - 48 == a5)
      break;
    *(_QWORD *)(a7 + i - 88) = *(_QWORD *)(v12 - 88);
    v13 = (MIL::Transform::ArgumentDescription *)(a7 + i - 80);
    MIL::Transform::ArgumentDescription::ArgumentDescription(v13, (const MIL::Transform::ArgumentDescription *)(v12 - 80));
  }
  return a6;
}

uint64_t std::vector<std::pair<char const*,MIL::Transform::ArgumentDescription>>::__push_back_slow_path<std::pair<char const*,MIL::Transform::ArgumentDescription>>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x333333333333333)
    v9 = 0x666666666666666;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char const*,MIL::Transform::ArgumentDescription> const>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[40 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[40 * v9];
  *(_QWORD *)v11 = *a2;
  MIL::Transform::ArgumentDescription::ArgumentDescription(v11 + 8, a2 + 1);
  v15 += 40;
  std::vector<std::pair<char const*,MIL::Transform::ArgumentDescription>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::pair<char const*,MIL::Transform::ArgumentDescription> const,std::allocator<std::pair<char const*,MIL::Transform::ArgumentDescription> const> &>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1E06236DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<char const*,MIL::Transform::ArgumentDescription> const,std::allocator<std::pair<char const*,MIL::Transform::ArgumentDescription> const> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<char const*,MIL::Transform::ArgumentDescription>::pair[abi:ne180100]<char const*,std::shared_ptr<MIL::IRValue const> const&,0>(_QWORD *a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;

  *a1 = *a2;
  v4 = a1 + 1;
  v5 = (std::__shared_weak_count *)a3[1];
  v12 = *a3;
  v13 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  MIL::Transform::ArgumentDescription::ArgumentDescription(v4, &v12);
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return a1;
}

void sub_1E0623780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Passes::RegisterOpsetIfNot(MIL::Opsets::Common::ios15 **a1, uint64_t *a2)
{
  uint64_t result;
  MIL::MILContext *v5;
  int v6;
  std::runtime_error *exception;

  result = (*(uint64_t (**)(MIL::Opsets::Common::ios15 *))(*(_QWORD *)*a1 + 16))(*a1);
  if (!result)
  {
    v6 = *((char *)a2 + 23);
    if (v6 < 0)
    {
      if (a2[1] != 5)
        goto LABEL_28;
      a2 = (uint64_t *)*a2;
    }
    else if (v6 != 5)
    {
      goto LABEL_28;
    }
    if (*(_DWORD *)a2 == 829648745 && *((_BYTE *)a2 + 4) == 53)
    {
      return MIL::Opsets::Common::ios15::Registerios15Opsets(*a1, v5);
    }
    else if (*(_DWORD *)a2 == 829648745 && *((_BYTE *)a2 + 4) == 54)
    {
      return MIL::Opsets::Common::ios16::Registerios16Opsets(*a1, v5);
    }
    else if (*(_DWORD *)a2 == 829648745 && *((_BYTE *)a2 + 4) == 55)
    {
      return MIL::Opsets::Common::ios17::Registerios17Opsets(*a1, v5);
    }
    else
    {
      if (*(_DWORD *)a2 != 829648745 || *((_BYTE *)a2 + 4) != 56)
      {
LABEL_28:
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Unsupported opset name");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      return MIL::Opsets::Common::ios18::Registerios18Opsets(*a1, v5);
    }
  }
  return result;
}

void sub_1E06238C4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Passes::CompressFp32ValueToFp16(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _anonymous_namespace_ *Scalar;
  uint64_t i;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  void *__p[2];
  char v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  _QWORD v28[9];
  std::__shared_weak_count *v29;
  _QWORD v30[3];
  __int128 v31;
  _QWORD v32[6];

  v32[5] = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  v28[8] = *a2;
  v29 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v26 = v5;
    v27 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    v26 = v5;
    v27 = 0;
  }
  MIL::ValueInferenceUtils::GetCastedTensor<MIL::Fp16>(&v26, v28);
  v10 = v27;
  if (v27)
  {
    v11 = (unint64_t *)&v27->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  MIL::ValueInference::Tensor<MIL::Fp16>::ToIRTensorValue((uint64_t)v28, a1, &v25);
  Scalar = (_anonymous_namespace_ *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  std::string::basic_string[abi:ne180100]<0>(__p, "fp32");
  MIL::IRTensorValueType::MakeStringValue(Scalar, (const MIL::IRTensorValueType *)__p, &v24);
  if (v23 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(v30, "source_val");
  v31 = v25;
  v25 = 0uLL;
  std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>::pair[abi:ne180100]<char const(&)[13],std::unique_ptr<MIL::IRTensorValue const>,0>(v32, "output_dtype", &v24);
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map(a3, (unsigned __int8 *)v30, 2);
  for (i = 0; i != -10; i -= 5)
  {
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v32[i + 3]);
    if (SHIBYTE(v32[i + 2]) < 0)
      operator delete((void *)v32[i]);
  }
  v15 = v24;
  v24 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
  if (*((_QWORD *)&v25 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(v28);
  v19 = v29;
  if (v29)
  {
    v20 = (unint64_t *)&v29->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_1E0623B04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  uint64_t i;

  for (i = 40; i != -40; i -= 40)
    std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>::~pair(v29 + i);
  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 8))(a15);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&a21);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void MIL::Passes::QuantizeValueAsymmetricUInt8(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *ProgramFirstSet;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _DWORD *v30;
  _DWORD *v31;
  _DWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  int v35;
  MIL::IRTensorValueType *Scalar;
  uint64_t i;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  void *v55;
  void *v56;
  uint64_t v57;
  _QWORD v58[8];
  _QWORD v59[8];
  void *v60;
  void *v61;
  _DWORD *v62;
  void *v63;
  void *v64;
  _DWORD *v65;
  void *v66;
  void *v67;
  _DWORD *v68;
  _QWORD v69[8];
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 __p;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  void *v82[3];
  uint64_t v83;
  std::__shared_weak_count *v84;
  _QWORD v85[8];
  uint64_t v86;
  std::__shared_weak_count *v87;
  void *__src;
  __int128 v89;
  _BYTE v90[24];
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94[3];
  __int128 v95;
  _QWORD v96[5];
  _QWORD v97[3];
  _QWORD *v98;
  _QWORD v99[3];
  _QWORD *v100;
  _QWORD v101[3];
  _QWORD *v102;
  _QWORD v103[3];
  _QWORD *v104;
  _QWORD v105[3];
  _QWORD *v106;
  _QWORD v107[3];
  _QWORD *v108;
  uint64_t v109;

  v109 = *MEMORY[0x1E0C80C00];
  v7 = *a2;
  v8 = (std::__shared_weak_count *)a2[1];
  v86 = *a2;
  v87 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v83 = v7;
    v84 = v8;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v83 = v7;
    v84 = 0;
  }
  v12 = v84;
  if (v84)
  {
    v13 = (unint64_t *)&v84->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  ProgramFirstSet = (_QWORD *)MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v85);
  v107[0] = &unk_1EA99BD50;
  v107[1] = MIL::MathOps::MinimumOp<float>;
  v108 = v107;
  MIL::ValueInference::Tensor<float>::Reduce(v85, (unint64_t **)v82, 1, (uint64_t)v107, (uint64_t)&v76);
  v16 = v108;
  if (v108 == v107)
  {
    v17 = 4;
    v16 = v107;
  }
  else
  {
    if (!v108)
      goto LABEL_18;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_18:
  v105[0] = &unk_1EA99BD50;
  v105[1] = MIL::MathOps::MaximumOp<float>;
  v106 = v105;
  MIL::ValueInference::Tensor<float>::Reduce(v85, (unint64_t **)v82, 1, (uint64_t)v105, (uint64_t)&v70);
  v18 = v106;
  if (v106 == v105)
  {
    v19 = 4;
    v18 = v105;
  }
  else
  {
    if (!v106)
      goto LABEL_23;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_23:
  v103[0] = &unk_1EA99BE00;
  v103[1] = MIL::MathOps::NegateOp<float>;
  v104 = v103;
  MIL::ValueInference::Tensor<float>::ForEach((uint64_t)&v76, (uint64_t)v103, (uint64_t)&v66);
  v101[0] = &unk_1EA99BE00;
  v101[1] = MIL::MathOps::ReluOp<float>;
  v102 = v101;
  MIL::ValueInference::Tensor<float>::ForEach((uint64_t)&v66, (uint64_t)v101, (uint64_t)v69);
  v99[0] = &unk_1EA99BE00;
  v99[1] = MIL::MathOps::NegateOp<float>;
  v100 = v99;
  MIL::ValueInference::Tensor<float>::ForEach((uint64_t)v69, (uint64_t)v99, (uint64_t)&__src);
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  __p = v89;
  v78 = *(_QWORD *)v90;
  *(_QWORD *)v90 = 0;
  v89 = 0uLL;
  if ((_QWORD)v79)
  {
    *((_QWORD *)&v79 + 1) = v79;
    operator delete((void *)v79);
  }
  v79 = *(_OWORD *)&v90[8];
  v20 = v91;
  *(_QWORD *)&v90[16] = 0;
  v91 = 0;
  *(_QWORD *)&v90[8] = 0;
  v80 = v20;
  v81 = v92;
  MIL::ValueInference::Tensor<float>::~Tensor(&__src);
  v21 = v100;
  if (v100 == v99)
  {
    v22 = 4;
    v21 = v99;
  }
  else
  {
    if (!v100)
      goto LABEL_32;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_32:
  MIL::ValueInference::Tensor<float>::~Tensor(v69);
  v23 = v102;
  if (v102 == v101)
  {
    v24 = 4;
    v23 = v101;
  }
  else
  {
    if (!v102)
      goto LABEL_37;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_37:
  MIL::ValueInference::Tensor<float>::~Tensor(&v66);
  v25 = v104;
  if (v104 == v103)
  {
    v26 = 4;
    v25 = v103;
  }
  else
  {
    if (!v104)
      goto LABEL_42;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_42:
  v97[0] = &unk_1EA99BE00;
  v97[1] = MIL::MathOps::ReluOp<float>;
  v98 = v97;
  MIL::ValueInference::Tensor<float>::ForEach((uint64_t)&v70, (uint64_t)v97, (uint64_t)&__src);
  if ((_QWORD)v71)
  {
    *((_QWORD *)&v71 + 1) = v71;
    operator delete((void *)v71);
  }
  v71 = v89;
  v72 = *(_QWORD *)v90;
  *(_QWORD *)v90 = 0;
  v89 = 0uLL;
  if ((_QWORD)v73)
  {
    *((_QWORD *)&v73 + 1) = v73;
    operator delete((void *)v73);
  }
  v73 = *(_OWORD *)&v90[8];
  v27 = v91;
  *(_QWORD *)&v90[16] = 0;
  v91 = 0;
  *(_QWORD *)&v90[8] = 0;
  v74 = v27;
  v75 = v92;
  MIL::ValueInference::Tensor<float>::~Tensor(&__src);
  v28 = v98;
  if (v98 == v97)
  {
    v29 = 4;
    v28 = v97;
  }
  else
  {
    if (!v98)
      goto LABEL_51;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_51:
  v89 = 0uLL;
  __src = 0;
  v30 = operator new(4uLL);
  v66 = v30;
  *v30 = 1132396544;
  v67 = v30 + 1;
  v68 = v30 + 1;
  MIL::ValueInference::Tensor<float>::Tensor(v69, &__src, &v66);
  if (v66)
  {
    v67 = v66;
    operator delete(v66);
  }
  if (__src)
  {
    *(_QWORD *)&v89 = __src;
    operator delete(__src);
  }
  v89 = 0uLL;
  __src = 0;
  v31 = operator new(4uLL);
  v63 = v31;
  *v31 = 0;
  v64 = v31 + 1;
  v65 = v31 + 1;
  MIL::ValueInference::Tensor<float>::Tensor(&v66, &__src, &v63);
  if (v63)
  {
    v64 = v63;
    operator delete(v63);
  }
  if (__src)
  {
    *(_QWORD *)&v89 = __src;
    operator delete(__src);
  }
  v89 = 0uLL;
  __src = 0;
  v32 = operator new(4uLL);
  v60 = v32;
  *v32 = 1132396544;
  v61 = v32 + 1;
  v62 = v32 + 1;
  MIL::ValueInference::Tensor<float>::Tensor(&v63, &__src, &v60);
  if (v60)
  {
    v61 = v60;
    operator delete(v60);
  }
  if (__src)
  {
    *(_QWORD *)&v89 = __src;
    operator delete(__src);
  }
  v55 = 0;
  v56 = 0;
  v57 = 0;
  if ((a3 & 0xFF00000000) != 0)
  {
    v33 = (_QWORD *)MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v85);
    if ((int)a3 < 0)
      a3 = (int)(((v33[1] - *v33) >> 3) + a3);
    else
      a3 = a3;
    __src = *(void **)(*(_QWORD *)MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v85) + 8 * a3);
    std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)&v55, (char *)&__src, (uint64_t)&v89, 1uLL);
  }
  else
  {
    a3 = 0;
  }
  v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v86 + 32))(v86);
  v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 88))(v34);
  Scalar = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRTensorValueType::MakeInt32Value(Scalar, (const MIL::IRTensorValueType *)a3, &v51);
  std::string::basic_string[abi:ne180100]<0>(&__src, "quantized_data");
  *(_OWORD *)v90 = v52;
  v52 = 0uLL;
  std::string::basic_string[abi:ne180100]<0>(&v90[16], "zero_point");
  v93 = v53;
  v53 = 0uLL;
  std::string::basic_string[abi:ne180100]<0>(v94, "scale");
  v95 = v54;
  v54 = 0uLL;
  std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>::pair[abi:ne180100]<char const(&)[5],std::unique_ptr<MIL::IRTensorValue const>,0>(v96, "axis", &v51);
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map(a4, (unsigned __int8 *)&__src, 4);
  for (i = 0; i != -20; i -= 5)
  {
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v96[i + 3]);
    if (SHIBYTE(v96[i + 2]) < 0)
      operator delete((void *)v96[i]);
  }
  v38 = v51;
  v51 = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  v39 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
  if (*((_QWORD *)&v52 + 1))
  {
    v40 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
  if (*((_QWORD *)&v53 + 1))
  {
    v43 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
  if (*((_QWORD *)&v54 + 1))
  {
    v46 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v55)
  {
    v56 = v55;
    operator delete(v55);
  }
  MIL::ValueInference::Tensor<float>::~Tensor(v58);
  MIL::ValueInference::Tensor<float>::~Tensor(v59);
  MIL::ValueInference::Tensor<float>::~Tensor(&v60);
  MIL::ValueInference::Tensor<float>::~Tensor(&v63);
  MIL::ValueInference::Tensor<float>::~Tensor(&v66);
  MIL::ValueInference::Tensor<float>::~Tensor(v69);
  MIL::ValueInference::Tensor<float>::~Tensor(&v70);
  MIL::ValueInference::Tensor<float>::~Tensor(&v76);
  if (v82[0])
  {
    v82[1] = v82[0];
    operator delete(v82[0]);
  }
  MIL::ValueInference::Tensor<float>::~Tensor(v85);
  v48 = v87;
  if (v87)
  {
    v49 = (unint64_t *)&v87->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
}

void sub_1E062442C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a69;
  void *v70;

  if (__p)
    operator delete(__p);
  MIL::ValueInference::Tensor<float>::~Tensor(&a21);
  MIL::ValueInference::Tensor<float>::~Tensor(&a29);
  MIL::ValueInference::Tensor<float>::~Tensor(&a37);
  MIL::ValueInference::Tensor<float>::~Tensor(&a45);
  MIL::ValueInference::Tensor<float>::~Tensor(&a53);
  MIL::ValueInference::Tensor<float>::~Tensor(&a61);
  MIL::ValueInference::Tensor<float>::~Tensor(&a69);
  MIL::ValueInference::Tensor<float>::~Tensor(&STACK[0x220]);
  v70 = (void *)STACK[0x260];
  if (STACK[0x260])
  {
    STACK[0x268] = (unint64_t)v70;
    operator delete(v70);
  }
  MIL::ValueInference::Tensor<float>::~Tensor(&STACK[0x288]);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2C8]);
  _Unwind_Resume(a1);
}

void MIL::Passes::`anonymous namespace'::CreateFloatTensor(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  double v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;

  v4 = MIL::ValueInference::Tensor<float>::Tensor((uint64_t)a2);
  v5 = (*(uint64_t (**)(_QWORD, double))(*(_QWORD *)*a1 + 32))(*a1, v4);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 88))(v5) == 5)
  {
    v6 = (std::__shared_weak_count *)a1[1];
    v26 = *a1;
    v27 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    MIL::ValueInference::Tensor<float>::FromIRTensorValue(&v26, (uint64_t)&v28);
    v9 = (void *)a2[1];
    if (v9)
    {
      a2[2] = v9;
      operator delete(v9);
      a2[1] = 0;
      a2[2] = 0;
      a2[3] = 0;
    }
    v10 = (void *)a2[4];
    *(_OWORD *)(a2 + 1) = v29;
    a2[3] = v30;
    v30 = 0;
    v29 = 0uLL;
    if (v10)
    {
      a2[5] = v10;
      operator delete(v10);
      a2[4] = 0;
      a2[5] = 0;
      a2[6] = 0;
    }
    *((_OWORD *)a2 + 2) = v31;
    v11 = v32;
    v12 = v33;
    v32 = 0;
    v31 = 0uLL;
    a2[6] = v11;
    a2[7] = v12;
    MIL::ValueInference::Tensor<float>::~Tensor(&v28);
    v13 = v27;
    if (v27)
    {
      v14 = (unint64_t *)&v27->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
LABEL_23:
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  else
  {
    v16 = (std::__shared_weak_count *)a1[1];
    v24 = *a1;
    v25 = v16;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    MIL::ValueInferenceUtils::GetCastedTensor<float>(&v24, &v28);
    v19 = (void *)a2[1];
    if (v19)
    {
      a2[2] = v19;
      operator delete(v19);
      a2[1] = 0;
      a2[2] = 0;
      a2[3] = 0;
    }
    v20 = (void *)a2[4];
    *(_OWORD *)(a2 + 1) = v29;
    a2[3] = v30;
    v30 = 0;
    v29 = 0uLL;
    if (v20)
    {
      a2[5] = v20;
      operator delete(v20);
      a2[4] = 0;
      a2[5] = 0;
      a2[6] = 0;
    }
    *((_OWORD *)a2 + 2) = v31;
    v21 = v32;
    v22 = v33;
    v32 = 0;
    v31 = 0uLL;
    a2[6] = v21;
    a2[7] = v22;
    MIL::ValueInference::Tensor<float>::~Tensor(&v28);
    v13 = v25;
    if (v25)
    {
      v23 = (unint64_t *)&v25->__shared_owners_;
      do
        v15 = __ldaxr(v23);
      while (__stlxr(v15 - 1, v23));
      goto LABEL_23;
    }
  }
}

void sub_1E0624944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MIL::ValueInference::Tensor<float>::~Tensor(v9);
  _Unwind_Resume(a1);
}

void MIL::Passes::`anonymous namespace'::DeduceAxesToReduce(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  if ((a2 & 0xFF00000000) != 0)
  {
    if ((int)a2 < 0)
      v5 = (int)a2 + (int)a1;
    else
      v5 = a2;
    std::vector<unsigned long long>::reserve((void **)a3, a1 - 1);
    if (a1)
    {
      v6 = 0;
      do
      {
        if (v6 != v5)
        {
          v8 = *(_QWORD **)(a3 + 8);
          v7 = *(_QWORD *)(a3 + 16);
          if ((unint64_t)v8 >= v7)
          {
            v10 = *(_QWORD **)a3;
            v11 = ((uint64_t)v8 - *(_QWORD *)a3) >> 3;
            v12 = v11 + 1;
            if ((unint64_t)(v11 + 1) >> 61)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v13 = v7 - (_QWORD)v10;
            if (v13 >> 2 > v12)
              v12 = v13 >> 2;
            if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
              v14 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v14 = v12;
            if (v14)
            {
              v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(a3 + 16, v14);
              v10 = *(_QWORD **)a3;
              v8 = *(_QWORD **)(a3 + 8);
            }
            else
            {
              v15 = 0;
            }
            v16 = &v15[8 * v11];
            *(_QWORD *)v16 = v6;
            v9 = v16 + 8;
            while (v8 != v10)
            {
              v17 = *--v8;
              *((_QWORD *)v16 - 1) = v17;
              v16 -= 8;
            }
            *(_QWORD *)a3 = v16;
            *(_QWORD *)(a3 + 8) = v9;
            *(_QWORD *)(a3 + 16) = &v15[8 * v14];
            if (v10)
              operator delete(v10);
          }
          else
          {
            *v8 = v6;
            v9 = v8 + 1;
          }
          *(_QWORD *)(a3 + 8) = v9;
        }
        ++v6;
      }
      while (v6 != a1);
    }
  }
  else
  {
    std::vector<unsigned long long>::reserve((void **)a3, a1);
    if (a1)
    {
      v18 = 0;
      v19 = (_QWORD *)(a3 + 16);
      v20 = *(_QWORD **)(a3 + 8);
      do
      {
        if ((unint64_t)v20 >= *v19)
        {
          v22 = *(_QWORD **)a3;
          v23 = ((uint64_t)v20 - *(_QWORD *)a3) >> 3;
          v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 61)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v25 = *v19 - (_QWORD)v22;
          if (v25 >> 2 > v24)
            v24 = v25 >> 2;
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
            v26 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v26 = v24;
          if (v26)
          {
            v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(a3 + 16, v26);
            v22 = *(_QWORD **)a3;
            v20 = *(_QWORD **)(a3 + 8);
          }
          else
          {
            v27 = 0;
          }
          v28 = &v27[8 * v23];
          *(_QWORD *)v28 = v18;
          v21 = v28 + 8;
          while (v20 != v22)
          {
            v29 = *--v20;
            *((_QWORD *)v28 - 1) = v29;
            v28 -= 8;
          }
          *(_QWORD *)a3 = v28;
          *(_QWORD *)(a3 + 8) = v21;
          *(_QWORD *)(a3 + 16) = &v27[8 * v26];
          if (v22)
            operator delete(v22);
        }
        else
        {
          *v20 = v18;
          v21 = v20 + 1;
        }
        *(_QWORD *)(a3 + 8) = v21;
        ++v18;
        v20 = v21;
      }
      while (v18 != a1);
    }
  }
}

void sub_1E0624B8C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float MIL::MathOps::MinimumOp<float>(float result, float a2)
{
  if (a2 < result)
    return a2;
  return result;
}

float MIL::MathOps::MaximumOp<float>(float result, float a2)
{
  if (result < a2)
    return a2;
  return result;
}

float MIL::MathOps::NegateOp<float>(float a1)
{
  return -a1;
}

float MIL::MathOps::ReluOp<float>(float a1)
{
  return fmaxf(a1, 0.0);
}

_QWORD *MIL::Passes::`anonymous namespace'::CalculateScaleTensor@<X0>(MIL::ParserContext *this@<X1>, _QWORD *a2@<X0>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t ProgramFirstSet;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *result;
  uint64_t v13;
  void *__p;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  _QWORD v20[8];
  _QWORD v21[3];
  _QWORD *v22;
  _QWORD v23[3];
  _QWORD *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v23[0] = &unk_1EA99BD50;
  v23[1] = MIL::MathOps::SubOp<float>;
  v24 = v23;
  ProgramFirstSet = MIL::ParserContext::GetProgramFirstSet(this);
  v17 = 0;
  v18 = 0;
  v19 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v17, *(const void **)ProgramFirstSet, *(_QWORD *)(ProgramFirstSet + 8), (uint64_t)(*(_QWORD *)(ProgramFirstSet + 8) - *(_QWORD *)ProgramFirstSet) >> 3);
  MIL::ValueInference::BinaryOp<float,float>(this, a2, (uint64_t)v23, &v17, (uint64_t)v20);
  v21[0] = &unk_1EA99BD50;
  v21[1] = MIL::MathOps::RealDivOp<float>;
  v22 = v21;
  v9 = MIL::ParserContext::GetProgramFirstSet(this);
  __p = 0;
  v15 = 0;
  v16 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)v9, *(_QWORD *)(v9 + 8), (uint64_t)(*(_QWORD *)(v9 + 8) - *(_QWORD *)v9) >> 3);
  MIL::ValueInference::BinaryOp<float,float>(v20, a3, (uint64_t)v21, &__p, a4);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  v10 = v22;
  if (v22 == v21)
  {
    v11 = 4;
    v10 = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_8;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_8:
  MIL::ValueInference::Tensor<float>::~Tensor(v20);
  if (v17)
  {
    v18 = v17;
    operator delete(v17);
  }
  result = v24;
  if (v24 == v23)
  {
    v13 = 4;
    result = v23;
  }
  else
  {
    if (!v24)
      return result;
    v13 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v13))();
}

void sub_1E0624D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char *a27)
{
  uint64_t v27;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;

  if (__p)
    operator delete(__p);
  v29 = a27;
  if (a27 == &a24)
  {
    v30 = 4;
    v29 = &a24;
  }
  else
  {
    if (!a27)
      goto LABEL_8;
    v30 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v29 + 8 * v30))();
LABEL_8:
  MIL::ValueInference::Tensor<float>::~Tensor(&a16);
  if (a13)
    operator delete(a13);
  v31 = *(_QWORD **)(v27 - 64);
  if (v31 == (_QWORD *)(v27 - 88))
  {
    v32 = 4;
    v31 = (_QWORD *)(v27 - 88);
  }
  else
  {
    if (!v31)
      goto LABEL_15;
    v32 = 5;
  }
  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_15:
  _Unwind_Resume(a1);
}

_QWORD *MIL::Passes::`anonymous namespace'::CalculateZeroPointTensor@<X0>(MIL::ParserContext *a1@<X0>, MIL::ParserContext *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t ProgramFirstSet;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  void *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  void *__p;
  void *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  _QWORD v43[8];
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[8];
  _QWORD v51[3];
  _QWORD *v52;
  _QWORD v53[3];
  _QWORD *v54;
  _QWORD v55[3];
  _QWORD *v56;
  _QWORD v57[3];
  _QWORD *v58;
  _QWORD v59[3];
  _QWORD *v60;
  _QWORD v61[3];
  _QWORD *v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v61[0] = &unk_1EA99BE00;
  v61[1] = MIL::MathOps::NegateOp<float>;
  v62 = v61;
  MIL::ValueInference::Tensor<float>::ForEach((uint64_t)a1, (uint64_t)v61, (uint64_t)&v44);
  v59[0] = &unk_1EA99BD50;
  v59[1] = MIL::MathOps::SubOp<float>;
  v60 = v59;
  ProgramFirstSet = MIL::ParserContext::GetProgramFirstSet(a2);
  v40 = 0;
  v41 = 0;
  v42 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v40, *(const void **)ProgramFirstSet, *(_QWORD *)(ProgramFirstSet + 8), (uint64_t)(*(_QWORD *)(ProgramFirstSet + 8) - *(_QWORD *)ProgramFirstSet) >> 3);
  MIL::ValueInference::BinaryOp<float,float>(a2, a1, (uint64_t)v59, &v40, (uint64_t)v43);
  v57[0] = &unk_1EA99BD50;
  v57[1] = MIL::MathOps::RealDivOp<float>;
  v58 = v57;
  v11 = MIL::ParserContext::GetProgramFirstSet(a1);
  __p = 0;
  v38 = 0;
  v39 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)v11, *(_QWORD *)(v11 + 8), (uint64_t)(*(_QWORD *)(v11 + 8) - *(_QWORD *)v11) >> 3);
  MIL::ValueInference::BinaryOp<float,float>(&v44, v43, (uint64_t)v57, &__p, (uint64_t)v50);
  if (__p)
  {
    v38 = __p;
    operator delete(__p);
  }
  v12 = v58;
  if (v58 == v57)
  {
    v13 = 4;
    v12 = v57;
  }
  else
  {
    if (!v58)
      goto LABEL_8;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_8:
  MIL::ValueInference::Tensor<float>::~Tensor(v43);
  if (v40)
  {
    v41 = v40;
    operator delete(v40);
  }
  v14 = v60;
  if (v60 == v59)
  {
    v15 = 4;
    v14 = v59;
  }
  else
  {
    if (!v60)
      goto LABEL_15;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_15:
  MIL::ValueInference::Tensor<float>::~Tensor(&v44);
  v16 = v62;
  if (v62 == v61)
  {
    v17 = 4;
    v16 = v61;
  }
  else
  {
    if (!v62)
      goto LABEL_20;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_20:
  v55[0] = &unk_1EA99BD50;
  v55[1] = MIL::MathOps::MulOp<float>;
  v56 = v55;
  v18 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v50);
  v34 = 0;
  v35 = 0;
  v36 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v34, *(const void **)v18, *(_QWORD *)(v18 + 8), (uint64_t)(*(_QWORD *)(v18 + 8) - *(_QWORD *)v18) >> 3);
  MIL::ValueInference::BinaryOp<float,float>(v50, a3, (uint64_t)v55, &v34, (uint64_t)&v44);
  v53[0] = &unk_1EA99BE00;
  v53[1] = MIL::MathOps::RoundOp<float>;
  v54 = v53;
  MIL::ValueInference::Tensor<float>::ForEach((uint64_t)&v44, (uint64_t)v53, (uint64_t)a5);
  v19 = v54;
  if (v54 == v53)
  {
    v20 = 4;
    v19 = v53;
  }
  else
  {
    if (!v54)
      goto LABEL_25;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_25:
  MIL::ValueInference::Tensor<float>::~Tensor(&v44);
  if (v34)
  {
    v35 = v34;
    operator delete(v34);
  }
  v21 = v56;
  if (v56 == v55)
  {
    v22 = 4;
    v21 = v55;
  }
  else
  {
    if (!v56)
      goto LABEL_32;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_32:
  v51[0] = &unk_1EA99BD50;
  v51[1] = MIL::MathOps::AddOp<float>;
  v52 = v51;
  v23 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)a5);
  v31 = 0;
  v32 = 0;
  v33 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v31, *(const void **)v23, *(_QWORD *)(v23 + 8), (uint64_t)(*(_QWORD *)(v23 + 8) - *(_QWORD *)v23) >> 3);
  MIL::ValueInference::BinaryOp<float,float>(a5, a4, (uint64_t)v51, &v31, (uint64_t)&v44);
  v24 = (void *)a5[1];
  if (v24)
  {
    a5[2] = v24;
    operator delete(v24);
    a5[1] = 0;
    a5[2] = 0;
    a5[3] = 0;
  }
  v25 = (void *)a5[4];
  *(_OWORD *)(a5 + 1) = v45;
  a5[3] = v46;
  v46 = 0;
  v45 = 0uLL;
  if (v25)
  {
    a5[5] = v25;
    operator delete(v25);
    a5[4] = 0;
    a5[5] = 0;
    a5[6] = 0;
  }
  *((_OWORD *)a5 + 2) = v47;
  v26 = v48;
  v27 = v49;
  v48 = 0;
  v47 = 0uLL;
  a5[6] = v26;
  a5[7] = v27;
  MIL::ValueInference::Tensor<float>::~Tensor(&v44);
  if (v31)
  {
    v32 = v31;
    operator delete(v31);
  }
  v28 = v52;
  if (v52 == v51)
  {
    v29 = 4;
    v28 = v51;
    goto LABEL_42;
  }
  if (v52)
  {
    v29 = 5;
LABEL_42:
    (*(void (**)(void))(*v28 + 8 * v29))();
  }
  return MIL::ValueInference::Tensor<float>::~Tensor(v50);
}

void sub_1E062525C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,char *a49)
{
  _QWORD *v49;
  char *v51;
  uint64_t v52;

  if (__p)
    operator delete(__p);
  v51 = a49;
  if (a49 == &a46)
  {
    v52 = 4;
    v51 = &a46;
  }
  else
  {
    if (!a49)
      goto LABEL_8;
    v52 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v51 + 8 * v52))();
LABEL_8:
  MIL::ValueInference::Tensor<float>::~Tensor(v49);
  MIL::ValueInference::Tensor<float>::~Tensor(&a38);
  _Unwind_Resume(a1);
}

_QWORD *MIL::Passes::`anonymous namespace'::CalculateQuantizedDataTensor@<X0>(MIL::ParserContext *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X4>, _QWORD *a6@<X8>)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t ProgramFirstSet;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void **v23;
  void *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  void *__p;
  void *v45;
  uint64_t v46;
  void *v47;
  void *v48;
  uint64_t v49;
  _QWORD v50[8];
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[8];
  _QWORD v58[3];
  _QWORD *v59;
  _QWORD v60[3];
  _QWORD *v61;
  _QWORD v62[3];
  _QWORD *v63;
  _QWORD v64[3];
  _QWORD *v65;
  _QWORD v66[3];
  _QWORD *v67;
  _QWORD v68[3];
  _QWORD *v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v68[0] = &off_1EA99BBE0;
  v69 = v68;
  MIL::ValueInference::Tensor<float>::ForEach(a2, (uint64_t)v68, (uint64_t)v57);
  v11 = v69;
  if (v69 == v68)
  {
    v12 = 4;
    v11 = v68;
  }
  else
  {
    if (!v69)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_6:
  v66[0] = &unk_1EA99BD50;
  v66[1] = MIL::MathOps::RealDivOp<float>;
  v67 = v66;
  ProgramFirstSet = MIL::ParserContext::GetProgramFirstSet(a1);
  v47 = 0;
  v48 = 0;
  v49 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v47, *(const void **)ProgramFirstSet, *(_QWORD *)(ProgramFirstSet + 8), (uint64_t)(*(_QWORD *)(ProgramFirstSet + 8) - *(_QWORD *)ProgramFirstSet) >> 3);
  MIL::ValueInference::BinaryOp<float,float>(a1, v57, (uint64_t)v66, &v47, (uint64_t)v50);
  v64[0] = &unk_1EA99BE00;
  v64[1] = MIL::MathOps::RoundOp<float>;
  v65 = v64;
  MIL::ValueInference::Tensor<float>::ForEach((uint64_t)v50, (uint64_t)v64, (uint64_t)&v51);
  v62[0] = &unk_1EA99BD50;
  v62[1] = MIL::MathOps::AddOp<float>;
  v63 = v62;
  v14 = MIL::ParserContext::GetProgramFirstSet(a1);
  __p = 0;
  v45 = 0;
  v46 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)v14, *(_QWORD *)(v14 + 8), (uint64_t)(*(_QWORD *)(v14 + 8) - *(_QWORD *)v14) >> 3);
  MIL::ValueInference::BinaryOp<float,float>(&v51, a3, (uint64_t)v62, &__p, (uint64_t)a6);
  if (__p)
  {
    v45 = __p;
    operator delete(__p);
  }
  v15 = v63;
  if (v63 == v62)
  {
    v16 = 4;
    v15 = v62;
  }
  else
  {
    if (!v63)
      goto LABEL_13;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_13:
  MIL::ValueInference::Tensor<float>::~Tensor(&v51);
  v17 = v65;
  if (v65 == v64)
  {
    v18 = 4;
    v17 = v64;
  }
  else
  {
    if (!v65)
      goto LABEL_18;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_18:
  MIL::ValueInference::Tensor<float>::~Tensor(v50);
  if (v47)
  {
    v48 = v47;
    operator delete(v47);
  }
  v19 = v67;
  if (v67 == v66)
  {
    v20 = 4;
    v19 = v66;
  }
  else
  {
    if (!v67)
      goto LABEL_25;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_25:
  v60[0] = &unk_1EA99BD50;
  v60[1] = MIL::MathOps::MaximumOp<float>;
  v61 = v60;
  v21 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)a6);
  v41 = 0;
  v42 = 0;
  v43 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v41, *(const void **)v21, *(_QWORD *)(v21 + 8), (uint64_t)(*(_QWORD *)(v21 + 8) - *(_QWORD *)v21) >> 3);
  MIL::ValueInference::BinaryOp<float,float>(a6, a4, (uint64_t)v60, &v41, (uint64_t)&v51);
  v23 = (void **)(a6 + 1);
  v22 = (void *)a6[1];
  if (v22)
  {
    a6[2] = v22;
    operator delete(v22);
    *v23 = 0;
    a6[2] = 0;
    a6[3] = 0;
  }
  v25 = a6 + 4;
  v24 = (void *)a6[4];
  *(_OWORD *)(a6 + 1) = v52;
  a6[3] = v53;
  v53 = 0;
  v52 = 0uLL;
  if (v24)
  {
    a6[5] = v24;
    operator delete(v24);
    *v25 = 0;
    a6[5] = 0;
    a6[6] = 0;
  }
  *((_OWORD *)a6 + 2) = v54;
  v26 = v55;
  v27 = v56;
  v55 = 0;
  v54 = 0uLL;
  a6[6] = v26;
  a6[7] = v27;
  MIL::ValueInference::Tensor<float>::~Tensor(&v51);
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }
  v28 = v61;
  if (v61 == v60)
  {
    v29 = 4;
    v28 = v60;
  }
  else
  {
    if (!v61)
      goto LABEL_36;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_36:
  v58[0] = &unk_1EA99BD50;
  v58[1] = MIL::MathOps::MinimumOp<float>;
  v59 = v58;
  v30 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)a6);
  v38 = 0;
  v39 = 0;
  v40 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v38, *(const void **)v30, *(_QWORD *)(v30 + 8), (uint64_t)(*(_QWORD *)(v30 + 8) - *(_QWORD *)v30) >> 3);
  MIL::ValueInference::BinaryOp<float,float>(a6, a5, (uint64_t)v58, &v38, (uint64_t)&v51);
  v31 = *v23;
  if (*v23)
  {
    a6[2] = v31;
    operator delete(v31);
    *v23 = 0;
    a6[2] = 0;
    a6[3] = 0;
  }
  *(_OWORD *)(a6 + 1) = v52;
  a6[3] = v53;
  v53 = 0;
  v52 = 0uLL;
  v32 = (void *)a6[4];
  if (v32)
  {
    a6[5] = v32;
    operator delete(v32);
    *v25 = 0;
    a6[5] = 0;
    a6[6] = 0;
  }
  *((_OWORD *)a6 + 2) = v54;
  v33 = v55;
  v34 = v56;
  v55 = 0;
  v54 = 0uLL;
  a6[6] = v33;
  a6[7] = v34;
  MIL::ValueInference::Tensor<float>::~Tensor(&v51);
  if (v38)
  {
    v39 = v38;
    operator delete(v38);
  }
  v35 = v59;
  if (v59 == v58)
  {
    v36 = 4;
    v35 = v58;
    goto LABEL_46;
  }
  if (v59)
  {
    v36 = 5;
LABEL_46:
    (*(void (**)(void))(*v35 + 8 * v36))();
  }
  return MIL::ValueInference::Tensor<float>::~Tensor(v57);
}

void sub_1E06258CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,char *a49)
{
  _QWORD *v49;
  char *v51;
  uint64_t v52;

  if (__p)
    operator delete(__p);
  v51 = a49;
  if (a49 == &a46)
  {
    v52 = 4;
    v51 = &a46;
  }
  else
  {
    if (!a49)
      goto LABEL_8;
    v52 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v51 + 8 * v52))();
LABEL_8:
  MIL::ValueInference::Tensor<float>::~Tensor(v49);
  MIL::ValueInference::Tensor<float>::~Tensor(&a38);
  _Unwind_Resume(a1);
}

_QWORD *MIL::Passes::`anonymous namespace'::ConvertScaleValue@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, int a4@<W3>, _OWORD *a5@<X8>)
{
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v12;
  _QWORD v13[8];
  _QWORD v14[8];

  MIL::ValueInference::Tensor<float>::Reshape(a2, a3, (uint64_t)v14);
  MIL::ValueInference::Tensor<float>::ToIRTensorValue((uint64_t)v14, a1, a5);
  if (a4 == 4)
  {
    MIL::ValueInference::Tensor<float>::Cast<MIL::Fp16>(v14, (uint64_t)v13);
    MIL::ValueInference::Tensor<MIL::Fp16>::ToIRTensorValue((uint64_t)v13, a1, &v12);
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]((uint64_t)a5, &v12);
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
    if (*((_QWORD *)&v12 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(v13);
  }
  return MIL::ValueInference::Tensor<float>::~Tensor(v14);
}

void sub_1E0625B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor((uint64_t *)va);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v3);
  MIL::ValueInference::Tensor<float>::~Tensor((uint64_t *)va1);
  _Unwind_Resume(a1);
}

_QWORD *MIL::Passes::`anonymous namespace'::ConvertZeroPointValue@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  const void *DataView;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v24;
  void *__p;
  void *v26;
  uint64_t v27;
  _QWORD v28[8];
  void *v29;
  void *v30;
  uint64_t v31;
  _QWORD v32[8];

  MIL::ValueInference::Tensor<float>::Reshape(a2, a3, (uint64_t)v32);
  v29 = 0;
  v30 = 0;
  v31 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v29, (const void *)*a3, a3[1], (a3[1] - *a3) >> 3);
  if (a4 == 14)
  {
    MIL::ValueInference::Tensor<float>::Cast<unsigned char>(v32, (uint64_t)v28);
    v9 = MIL::IRTensorValueType::Make(a1, 14, (MIL::MILContext ***)&v29);
    DataView = (const void *)MIL::ValueInference::Tensor<unsigned char>::GetDataView((uint64_t)v28);
    v11 = MIL::ValueInference::Tensor<unsigned char>::GetDataView((uint64_t)v28);
    __p = 0;
    v26 = 0;
    v27 = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&__p, DataView, v11 + v12, v11 + v12 - (_QWORD)DataView);
    MIL::IRTensorValueType::MakeUInt8Value(v9, (uint64_t)&__p, &v24);
    v13 = v24;
    *a5 = v24;
    if (v13)
    {
      v14 = (_QWORD *)operator new();
      v15 = v24;
      *v14 = &unk_1EA992A68;
      v14[1] = 0;
      v14[2] = 0;
      v14[3] = v15;
    }
    else
    {
      v14 = 0;
    }
    a5[1] = v14;
    if (__p)
    {
      v26 = __p;
      operator delete(__p);
    }
    MIL::ValueInference::Tensor<unsigned char>::~Tensor(v28);
  }
  else
  {
    MIL::ValueInference::Tensor<float>::Cast<signed char>(v32, (uint64_t)v28);
    v16 = MIL::IRTensorValueType::Make(a1, 9, (MIL::MILContext ***)&v29);
    v17 = (const void *)MIL::ValueInference::Tensor<unsigned char>::GetDataView((uint64_t)v28);
    v18 = MIL::ValueInference::Tensor<unsigned char>::GetDataView((uint64_t)v28);
    __p = 0;
    v26 = 0;
    v27 = 0;
    std::vector<signed char>::__init_with_size[abi:ne180100]<signed char const*,signed char const*>(&__p, v17, v18 + v19, v18 + v19 - (_QWORD)v17);
    MIL::IRTensorValueType::MakeInt8Value(v16, (uint64_t)&__p, &v24);
    v20 = v24;
    *a5 = v24;
    if (v20)
    {
      v21 = (_QWORD *)operator new();
      v22 = v24;
      *v21 = &unk_1EA992A68;
      v21[1] = 0;
      v21[2] = 0;
      v21[3] = v22;
    }
    else
    {
      v21 = 0;
    }
    a5[1] = v21;
    if (__p)
    {
      v26 = __p;
      operator delete(__p);
    }
    MIL::ValueInference::Tensor<signed char>::~Tensor(v28);
  }
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
  return MIL::ValueInference::Tensor<float>::~Tensor(v32);
}

void sub_1E0625D8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  uint64_t v23;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (__p)
    operator delete(__p);
  MIL::ValueInference::Tensor<signed char>::~Tensor(&a14);
  if (a22)
  {
    a23 = (uint64_t)a22;
    operator delete(a22);
  }
  MIL::ValueInference::Tensor<float>::~Tensor((_QWORD *)(v23 - 96));
  _Unwind_Resume(a1);
}

void MIL::Passes::`anonymous namespace'::ConvertQuantizedDataValue(MIL::ParserContext *this@<X1>, void (***a2)(MIL::MILContextImpl *__hidden this)@<X0>, int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t ProgramFirstSet;
  uint64_t v9;
  const void *DataView;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  void *__p;
  void *v25;
  uint64_t v26;
  _QWORD v27[8];
  MIL::MILContext **v28;
  MIL::MILContext **v29;
  uint64_t v30;

  ProgramFirstSet = MIL::ParserContext::GetProgramFirstSet(this);
  v29 = 0;
  v30 = 0;
  v28 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v28, *(const void **)ProgramFirstSet, *(_QWORD *)(ProgramFirstSet + 8), (uint64_t)(*(_QWORD *)(ProgramFirstSet + 8) - *(_QWORD *)ProgramFirstSet) >> 3);
  if (a3 == 14)
  {
    MIL::ValueInference::Tensor<float>::Cast<unsigned char>(this, (uint64_t)v27);
    v9 = MIL::IRTensorValueType::Make(a2, 14, &v28);
    DataView = (const void *)MIL::ValueInference::Tensor<unsigned char>::GetDataView((uint64_t)v27);
    v11 = MIL::ValueInference::Tensor<unsigned char>::GetDataView((uint64_t)v27);
    __p = 0;
    v25 = 0;
    v26 = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&__p, DataView, v11 + v12, v11 + v12 - (_QWORD)DataView);
    MIL::IRTensorValueType::MakeUInt8Value(v9, (uint64_t)&__p, &v23);
    v13 = v23;
    *a4 = v23;
    if (v13)
    {
      v14 = (_QWORD *)operator new();
      v15 = v23;
      *v14 = &unk_1EA992A68;
      v14[1] = 0;
      v14[2] = 0;
      v14[3] = v15;
    }
    else
    {
      v14 = 0;
    }
    a4[1] = v14;
    if (__p)
    {
      v25 = __p;
      operator delete(__p);
    }
    MIL::ValueInference::Tensor<unsigned char>::~Tensor(v27);
  }
  else
  {
    MIL::ValueInference::Tensor<float>::Cast<signed char>(this, (uint64_t)v27);
    v16 = MIL::IRTensorValueType::Make(a2, 9, &v28);
    v17 = (const void *)MIL::ValueInference::Tensor<unsigned char>::GetDataView((uint64_t)v27);
    v18 = MIL::ValueInference::Tensor<unsigned char>::GetDataView((uint64_t)v27);
    __p = 0;
    v25 = 0;
    v26 = 0;
    std::vector<signed char>::__init_with_size[abi:ne180100]<signed char const*,signed char const*>(&__p, v17, v18 + v19, v18 + v19 - (_QWORD)v17);
    MIL::IRTensorValueType::MakeInt8Value(v16, (uint64_t)&__p, &v23);
    v20 = v23;
    *a4 = v23;
    if (v20)
    {
      v21 = (_QWORD *)operator new();
      v22 = v23;
      *v21 = &unk_1EA992A68;
      v21[1] = 0;
      v21[2] = 0;
      v21[3] = v22;
    }
    else
    {
      v21 = 0;
    }
    a4[1] = v21;
    if (__p)
    {
      v25 = __p;
      operator delete(__p);
    }
    MIL::ValueInference::Tensor<signed char>::~Tensor(v27);
  }
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
}

void sub_1E0626054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  void *v16;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (__p)
    operator delete(__p);
  MIL::ValueInference::Tensor<signed char>::~Tensor(&a14);
  v16 = *(void **)(v14 - 56);
  if (v16)
  {
    *(_QWORD *)(v14 - 48) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(a1);
}

void MIL::Passes::QuantizeValueAsymmetricInt8(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *ProgramFirstSet;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _DWORD *v30;
  _DWORD *v31;
  _DWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  int v35;
  MIL::IRTensorValueType *Scalar;
  uint64_t i;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  void *v55;
  void *v56;
  uint64_t v57;
  _QWORD v58[8];
  _QWORD v59[8];
  void *v60;
  void *v61;
  _DWORD *v62;
  void *v63;
  void *v64;
  _DWORD *v65;
  void *v66;
  void *v67;
  _DWORD *v68;
  _QWORD v69[8];
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 __p;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  void *v82[3];
  uint64_t v83;
  std::__shared_weak_count *v84;
  _QWORD v85[8];
  uint64_t v86;
  std::__shared_weak_count *v87;
  void *__src;
  __int128 v89;
  _BYTE v90[24];
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94[3];
  __int128 v95;
  _QWORD v96[5];
  _QWORD v97[3];
  _QWORD *v98;
  _QWORD v99[3];
  _QWORD *v100;
  _QWORD v101[3];
  _QWORD *v102;
  _QWORD v103[3];
  _QWORD *v104;
  _QWORD v105[3];
  _QWORD *v106;
  _QWORD v107[3];
  _QWORD *v108;
  uint64_t v109;

  v109 = *MEMORY[0x1E0C80C00];
  v7 = *a2;
  v8 = (std::__shared_weak_count *)a2[1];
  v86 = *a2;
  v87 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v83 = v7;
    v84 = v8;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v83 = v7;
    v84 = 0;
  }
  v12 = v84;
  if (v84)
  {
    v13 = (unint64_t *)&v84->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  ProgramFirstSet = (_QWORD *)MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v85);
  v107[0] = &unk_1EA99BD50;
  v107[1] = MIL::MathOps::MinimumOp<float>;
  v108 = v107;
  MIL::ValueInference::Tensor<float>::Reduce(v85, (unint64_t **)v82, 1, (uint64_t)v107, (uint64_t)&v76);
  v16 = v108;
  if (v108 == v107)
  {
    v17 = 4;
    v16 = v107;
  }
  else
  {
    if (!v108)
      goto LABEL_18;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_18:
  v105[0] = &unk_1EA99BD50;
  v105[1] = MIL::MathOps::MaximumOp<float>;
  v106 = v105;
  MIL::ValueInference::Tensor<float>::Reduce(v85, (unint64_t **)v82, 1, (uint64_t)v105, (uint64_t)&v70);
  v18 = v106;
  if (v106 == v105)
  {
    v19 = 4;
    v18 = v105;
  }
  else
  {
    if (!v106)
      goto LABEL_23;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_23:
  v103[0] = &unk_1EA99BE00;
  v103[1] = MIL::MathOps::NegateOp<float>;
  v104 = v103;
  MIL::ValueInference::Tensor<float>::ForEach((uint64_t)&v76, (uint64_t)v103, (uint64_t)&v66);
  v101[0] = &unk_1EA99BE00;
  v101[1] = MIL::MathOps::ReluOp<float>;
  v102 = v101;
  MIL::ValueInference::Tensor<float>::ForEach((uint64_t)&v66, (uint64_t)v101, (uint64_t)v69);
  v99[0] = &unk_1EA99BE00;
  v99[1] = MIL::MathOps::NegateOp<float>;
  v100 = v99;
  MIL::ValueInference::Tensor<float>::ForEach((uint64_t)v69, (uint64_t)v99, (uint64_t)&__src);
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  __p = v89;
  v78 = *(_QWORD *)v90;
  *(_QWORD *)v90 = 0;
  v89 = 0uLL;
  if ((_QWORD)v79)
  {
    *((_QWORD *)&v79 + 1) = v79;
    operator delete((void *)v79);
  }
  v79 = *(_OWORD *)&v90[8];
  v20 = v91;
  *(_QWORD *)&v90[16] = 0;
  v91 = 0;
  *(_QWORD *)&v90[8] = 0;
  v80 = v20;
  v81 = v92;
  MIL::ValueInference::Tensor<float>::~Tensor(&__src);
  v21 = v100;
  if (v100 == v99)
  {
    v22 = 4;
    v21 = v99;
  }
  else
  {
    if (!v100)
      goto LABEL_32;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_32:
  MIL::ValueInference::Tensor<float>::~Tensor(v69);
  v23 = v102;
  if (v102 == v101)
  {
    v24 = 4;
    v23 = v101;
  }
  else
  {
    if (!v102)
      goto LABEL_37;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_37:
  MIL::ValueInference::Tensor<float>::~Tensor(&v66);
  v25 = v104;
  if (v104 == v103)
  {
    v26 = 4;
    v25 = v103;
  }
  else
  {
    if (!v104)
      goto LABEL_42;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_42:
  v97[0] = &unk_1EA99BE00;
  v97[1] = MIL::MathOps::ReluOp<float>;
  v98 = v97;
  MIL::ValueInference::Tensor<float>::ForEach((uint64_t)&v70, (uint64_t)v97, (uint64_t)&__src);
  if ((_QWORD)v71)
  {
    *((_QWORD *)&v71 + 1) = v71;
    operator delete((void *)v71);
  }
  v71 = v89;
  v72 = *(_QWORD *)v90;
  *(_QWORD *)v90 = 0;
  v89 = 0uLL;
  if ((_QWORD)v73)
  {
    *((_QWORD *)&v73 + 1) = v73;
    operator delete((void *)v73);
  }
  v73 = *(_OWORD *)&v90[8];
  v27 = v91;
  *(_QWORD *)&v90[16] = 0;
  v91 = 0;
  *(_QWORD *)&v90[8] = 0;
  v74 = v27;
  v75 = v92;
  MIL::ValueInference::Tensor<float>::~Tensor(&__src);
  v28 = v98;
  if (v98 == v97)
  {
    v29 = 4;
    v28 = v97;
  }
  else
  {
    if (!v98)
      goto LABEL_51;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_51:
  v89 = 0uLL;
  __src = 0;
  v30 = operator new(4uLL);
  v66 = v30;
  *v30 = 1132396544;
  v67 = v30 + 1;
  v68 = v30 + 1;
  MIL::ValueInference::Tensor<float>::Tensor(v69, &__src, &v66);
  if (v66)
  {
    v67 = v66;
    operator delete(v66);
  }
  if (__src)
  {
    *(_QWORD *)&v89 = __src;
    operator delete(__src);
  }
  v89 = 0uLL;
  __src = 0;
  v31 = operator new(4uLL);
  v63 = v31;
  *v31 = -1023410176;
  v64 = v31 + 1;
  v65 = v31 + 1;
  MIL::ValueInference::Tensor<float>::Tensor(&v66, &__src, &v63);
  if (v63)
  {
    v64 = v63;
    operator delete(v63);
  }
  if (__src)
  {
    *(_QWORD *)&v89 = __src;
    operator delete(__src);
  }
  v89 = 0uLL;
  __src = 0;
  v32 = operator new(4uLL);
  v60 = v32;
  *v32 = 1123942400;
  v61 = v32 + 1;
  v62 = v32 + 1;
  MIL::ValueInference::Tensor<float>::Tensor(&v63, &__src, &v60);
  if (v60)
  {
    v61 = v60;
    operator delete(v60);
  }
  if (__src)
  {
    *(_QWORD *)&v89 = __src;
    operator delete(__src);
  }
  v55 = 0;
  v56 = 0;
  v57 = 0;
  if ((a3 & 0xFF00000000) != 0)
  {
    v33 = (_QWORD *)MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v85);
    if ((int)a3 < 0)
      a3 = (int)(((v33[1] - *v33) >> 3) + a3);
    else
      a3 = a3;
    __src = *(void **)(*(_QWORD *)MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v85) + 8 * a3);
    std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)&v55, (char *)&__src, (uint64_t)&v89, 1uLL);
  }
  else
  {
    a3 = 0;
  }
  v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v86 + 32))(v86);
  v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 88))(v34);
  Scalar = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRTensorValueType::MakeInt32Value(Scalar, (const MIL::IRTensorValueType *)a3, &v51);
  std::string::basic_string[abi:ne180100]<0>(&__src, "quantized_data");
  *(_OWORD *)v90 = v52;
  v52 = 0uLL;
  std::string::basic_string[abi:ne180100]<0>(&v90[16], "zero_point");
  v93 = v53;
  v53 = 0uLL;
  std::string::basic_string[abi:ne180100]<0>(v94, "scale");
  v95 = v54;
  v54 = 0uLL;
  std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>::pair[abi:ne180100]<char const(&)[5],std::unique_ptr<MIL::IRTensorValue const>,0>(v96, "axis", &v51);
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map(a4, (unsigned __int8 *)&__src, 4);
  for (i = 0; i != -20; i -= 5)
  {
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v96[i + 3]);
    if (SHIBYTE(v96[i + 2]) < 0)
      operator delete((void *)v96[i]);
  }
  v38 = v51;
  v51 = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  v39 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
  if (*((_QWORD *)&v52 + 1))
  {
    v40 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
  if (*((_QWORD *)&v53 + 1))
  {
    v43 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
  if (*((_QWORD *)&v54 + 1))
  {
    v46 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v55)
  {
    v56 = v55;
    operator delete(v55);
  }
  MIL::ValueInference::Tensor<float>::~Tensor(v58);
  MIL::ValueInference::Tensor<float>::~Tensor(v59);
  MIL::ValueInference::Tensor<float>::~Tensor(&v60);
  MIL::ValueInference::Tensor<float>::~Tensor(&v63);
  MIL::ValueInference::Tensor<float>::~Tensor(&v66);
  MIL::ValueInference::Tensor<float>::~Tensor(v69);
  MIL::ValueInference::Tensor<float>::~Tensor(&v70);
  MIL::ValueInference::Tensor<float>::~Tensor(&v76);
  if (v82[0])
  {
    v82[1] = v82[0];
    operator delete(v82[0]);
  }
  MIL::ValueInference::Tensor<float>::~Tensor(v85);
  v48 = v87;
  if (v87)
  {
    v49 = (unint64_t *)&v87->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
}

void sub_1E0626998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a69;
  void *v70;

  if (__p)
    operator delete(__p);
  MIL::ValueInference::Tensor<float>::~Tensor(&a21);
  MIL::ValueInference::Tensor<float>::~Tensor(&a29);
  MIL::ValueInference::Tensor<float>::~Tensor(&a37);
  MIL::ValueInference::Tensor<float>::~Tensor(&a45);
  MIL::ValueInference::Tensor<float>::~Tensor(&a53);
  MIL::ValueInference::Tensor<float>::~Tensor(&a61);
  MIL::ValueInference::Tensor<float>::~Tensor(&a69);
  MIL::ValueInference::Tensor<float>::~Tensor(&STACK[0x220]);
  v70 = (void *)STACK[0x260];
  if (STACK[0x260])
  {
    STACK[0x268] = (unint64_t)v70;
    operator delete(v70);
  }
  MIL::ValueInference::Tensor<float>::~Tensor(&STACK[0x288]);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2C8]);
  _Unwind_Resume(a1);
}

void MIL::Passes::QuantizeValueNoZeroPointUInt8(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *ProgramFirstSet;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  int v31;
  MIL::IRTensorValueType *Scalar;
  uint64_t i;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  void *v51;
  void *v52;
  uint64_t v53;
  _QWORD v54[8];
  __n128 v55;
  uint64_t v56;
  _QWORD v57[8];
  void *v58;
  void *v59;
  _DWORD *v60;
  void *v61;
  void *v62;
  _DWORD *v63;
  void *v64;
  void *v65;
  _DWORD *v66;
  _QWORD v67[4];
  __n128 v68;
  uint64_t v69;
  _QWORD v70[3];
  uint64_t v71;
  __int128 __p;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  void *v77[3];
  uint64_t v78;
  std::__shared_weak_count *v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  void *__src;
  __int128 v89;
  _BYTE v90[24];
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94[3];
  __int128 v95;
  _QWORD v96[5];
  _QWORD v97[3];
  _QWORD *v98;
  _QWORD v99[3];
  _QWORD *v100;
  _QWORD v101[3];
  _QWORD *v102;
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  v7 = *a2;
  v8 = (std::__shared_weak_count *)a2[1];
  v86 = *a2;
  v87 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v78 = v7;
    v79 = v8;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v78 = v7;
    v79 = 0;
  }
  v12 = v79;
  if (v79)
  {
    v13 = (unint64_t *)&v79->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  ProgramFirstSet = (_QWORD *)MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v80);
  v101[0] = &unk_1EA99BD50;
  v101[1] = MIL::MathOps::MaximumOp<float>;
  v102 = v101;
  MIL::ValueInference::Tensor<float>::Reduce(&v80, (unint64_t **)v77, 1, (uint64_t)v101, (uint64_t)&v71);
  v16 = v102;
  if (v102 == v101)
  {
    v17 = 4;
    v16 = v101;
  }
  else
  {
    if (!v102)
      goto LABEL_18;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_18:
  v99[0] = &unk_1EA99BE00;
  v99[1] = MIL::MathOps::ReluOp<float>;
  v100 = v99;
  MIL::ValueInference::Tensor<float>::ForEach((uint64_t)&v71, (uint64_t)v99, (uint64_t)&__src);
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  __p = v89;
  v73 = *(_QWORD *)v90;
  *(_QWORD *)v90 = 0;
  v89 = 0uLL;
  if ((_QWORD)v74)
  {
    *((_QWORD *)&v74 + 1) = v74;
    operator delete((void *)v74);
  }
  v74 = *(_OWORD *)&v90[8];
  v18 = v91;
  *(_QWORD *)&v90[16] = 0;
  v91 = 0;
  *(_QWORD *)&v90[8] = 0;
  v75 = v18;
  v76 = v92;
  MIL::ValueInference::Tensor<float>::~Tensor(&__src);
  v19 = v100;
  if (v100 == v99)
  {
    v20 = 4;
    v19 = v99;
  }
  else
  {
    if (!v100)
      goto LABEL_27;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_27:
  v21 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v71);
  v68 = 0uLL;
  v69 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v68, *(const void **)v21, *(_QWORD *)(v21 + 8), (uint64_t)(*(_QWORD *)(v21 + 8) - *(_QWORD *)v21) >> 3);
  MIL::ValueInference::Tensor<float>::Zeros(&v68, (uint64_t)v70);
  if (v68.n128_u64[0])
  {
    v68.n128_u64[1] = v68.n128_u64[0];
    operator delete((void *)v68.n128_u64[0]);
  }
  v89 = 0uLL;
  __src = 0;
  v22 = operator new(4uLL);
  v64 = v22;
  *v22 = 1132396544;
  v65 = v22 + 1;
  v66 = v22 + 1;
  MIL::ValueInference::Tensor<float>::Tensor(v67, &__src, &v64);
  if (v64)
  {
    v65 = v64;
    operator delete(v64);
  }
  if (__src)
  {
    *(_QWORD *)&v89 = __src;
    operator delete(__src);
  }
  v89 = 0uLL;
  __src = 0;
  v23 = operator new(4uLL);
  v61 = v23;
  *v23 = 0;
  v62 = v23 + 1;
  v63 = v23 + 1;
  MIL::ValueInference::Tensor<float>::Tensor(&v64, &__src, &v61);
  if (v61)
  {
    v62 = v61;
    operator delete(v61);
  }
  if (__src)
  {
    *(_QWORD *)&v89 = __src;
    operator delete(__src);
  }
  v89 = 0uLL;
  __src = 0;
  v24 = operator new(4uLL);
  v58 = v24;
  *v24 = 1132396544;
  v59 = v24 + 1;
  v60 = v24 + 1;
  MIL::ValueInference::Tensor<float>::Tensor(&v61, &__src, &v58);
  if (v58)
  {
    v59 = v58;
    operator delete(v58);
  }
  if (__src)
  {
    *(_QWORD *)&v89 = __src;
    operator delete(__src);
  }
  v25 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v58);
  v55 = 0uLL;
  v56 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v55, *(const void **)v25, *(_QWORD *)(v25 + 8), (uint64_t)(*(_QWORD *)(v25 + 8) - *(_QWORD *)v25) >> 3);
  MIL::ValueInference::Tensor<float>::Zeros(&v55, (uint64_t)v57);
  if (v55.n128_u64[0])
  {
    v55.n128_u64[1] = v55.n128_u64[0];
    operator delete((void *)v55.n128_u64[0]);
  }
  v97[0] = &unk_1EA99BE00;
  v97[1] = MIL::MathOps::ReluOp<float>;
  v98 = v97;
  MIL::ValueInference::Tensor<float>::ForEach((uint64_t)&v80, (uint64_t)v97, (uint64_t)&__src);
  if ((_QWORD)v81)
  {
    *((_QWORD *)&v81 + 1) = v81;
    operator delete((void *)v81);
  }
  v81 = v89;
  v82 = *(_QWORD *)v90;
  *(_QWORD *)v90 = 0;
  v89 = 0uLL;
  if ((_QWORD)v83)
  {
    *((_QWORD *)&v83 + 1) = v83;
    operator delete((void *)v83);
  }
  v83 = *(_OWORD *)&v90[8];
  v26 = v91;
  *(_QWORD *)&v90[16] = 0;
  v91 = 0;
  *(_QWORD *)&v90[8] = 0;
  v84 = v26;
  v85 = v92;
  MIL::ValueInference::Tensor<float>::~Tensor(&__src);
  v27 = v98;
  if (v98 == v97)
  {
    v28 = 4;
    v27 = v97;
    goto LABEL_51;
  }
  if (v98)
  {
    v28 = 5;
LABEL_51:
    (*(void (**)(void))(*v27 + 8 * v28))();
  }
  v51 = 0;
  v52 = 0;
  v53 = 0;
  if ((a3 & 0xFF00000000) != 0)
  {
    v29 = (_QWORD *)MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v80);
    if ((int)a3 < 0)
      a3 = (int)(((v29[1] - *v29) >> 3) + a3);
    else
      a3 = a3;
    __src = *(void **)(*(_QWORD *)MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v80) + 8 * a3);
    std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)&v51, (char *)&__src, (uint64_t)&v89, 1uLL);
  }
  else
  {
    a3 = 0;
  }
  v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v86 + 32))(v86);
  v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 88))(v30);
  Scalar = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRTensorValueType::MakeInt32Value(Scalar, (const MIL::IRTensorValueType *)a3, &v47);
  std::string::basic_string[abi:ne180100]<0>(&__src, "quantized_data");
  *(_OWORD *)v90 = v48;
  v48 = 0uLL;
  std::string::basic_string[abi:ne180100]<0>(&v90[16], "zero_point");
  v93 = v49;
  v49 = 0uLL;
  std::string::basic_string[abi:ne180100]<0>(v94, "scale");
  v95 = v50;
  v50 = 0uLL;
  std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>::pair[abi:ne180100]<char const(&)[5],std::unique_ptr<MIL::IRTensorValue const>,0>(v96, "axis", &v47);
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map(a4, (unsigned __int8 *)&__src, 4);
  for (i = 0; i != -20; i -= 5)
  {
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v96[i + 3]);
    if (SHIBYTE(v96[i + 2]) < 0)
      operator delete((void *)v96[i]);
  }
  v34 = v47;
  v47 = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  v35 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
  if (*((_QWORD *)&v48 + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
  if (*((_QWORD *)&v49 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
  if (*((_QWORD *)&v50 + 1))
  {
    v42 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v51)
  {
    v52 = v51;
    operator delete(v51);
  }
  MIL::ValueInference::Tensor<float>::~Tensor(v54);
  MIL::ValueInference::Tensor<float>::~Tensor(v57);
  MIL::ValueInference::Tensor<float>::~Tensor(&v58);
  MIL::ValueInference::Tensor<float>::~Tensor(&v61);
  MIL::ValueInference::Tensor<float>::~Tensor(&v64);
  MIL::ValueInference::Tensor<float>::~Tensor(v67);
  MIL::ValueInference::Tensor<float>::~Tensor(v70);
  MIL::ValueInference::Tensor<float>::~Tensor(&v71);
  if (v77[0])
  {
    v77[1] = v77[0];
    operator delete(v77[0]);
  }
  MIL::ValueInference::Tensor<float>::~Tensor(&v80);
  v44 = v87;
  if (v87)
  {
    v45 = (unint64_t *)&v87->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
}

void sub_1E0627474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  void *v65;

  if (__p)
    operator delete(__p);
  MIL::ValueInference::Tensor<float>::~Tensor(&a21);
  MIL::ValueInference::Tensor<float>::~Tensor(&a32);
  MIL::ValueInference::Tensor<float>::~Tensor(&a40);
  MIL::ValueInference::Tensor<float>::~Tensor(&a48);
  MIL::ValueInference::Tensor<float>::~Tensor(&a56);
  MIL::ValueInference::Tensor<float>::~Tensor(&a64);
  MIL::ValueInference::Tensor<float>::~Tensor(&STACK[0x210]);
  MIL::ValueInference::Tensor<float>::~Tensor(&STACK[0x250]);
  v65 = (void *)STACK[0x290];
  if (STACK[0x290])
  {
    STACK[0x298] = (unint64_t)v65;
    operator delete(v65);
  }
  MIL::ValueInference::Tensor<float>::~Tensor(&STACK[0x2B8]);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2F8]);
  _Unwind_Resume(a1);
}

void MIL::Passes::QuantizeValueSymmetricInt8(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *ProgramFirstSet;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  _DWORD *v43;
  _DWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  int v48;
  MIL::IRTensorValueType *Scalar;
  uint64_t i;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  void *v68;
  void *v69;
  uint64_t v70;
  _QWORD v71[8];
  __n128 v72;
  uint64_t v73;
  _QWORD v74[8];
  void *v75;
  void *v76;
  _DWORD *v77;
  void *v78;
  void *v79;
  _DWORD *v80;
  void *v81;
  void *v82;
  _DWORD *v83;
  _QWORD v84[8];
  void *v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD v94[8];
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 __p;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  void *v107[3];
  uint64_t v108;
  std::__shared_weak_count *v109;
  _QWORD v110[8];
  uint64_t v111;
  std::__shared_weak_count *v112;
  void *__src;
  __int128 v114;
  _BYTE v115[24];
  uint64_t v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119[3];
  __int128 v120;
  _QWORD v121[5];
  _QWORD v122[3];
  _QWORD *v123;
  _QWORD v124[3];
  _QWORD *v125;
  _QWORD v126[3];
  _QWORD *v127;
  _QWORD v128[3];
  _QWORD *v129;
  _QWORD v130[3];
  _QWORD *v131;
  _QWORD v132[3];
  _QWORD *v133;
  _QWORD v134[3];
  _QWORD *v135;
  _QWORD v136[3];
  _QWORD *v137;
  _QWORD v138[3];
  _QWORD *v139;
  _QWORD v140[3];
  _QWORD *v141;
  uint64_t v142;

  v142 = *MEMORY[0x1E0C80C00];
  v7 = *a2;
  v8 = (std::__shared_weak_count *)a2[1];
  v111 = *a2;
  v112 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v108 = v7;
    v109 = v8;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v108 = v7;
    v109 = 0;
  }
  v12 = v109;
  if (v109)
  {
    v13 = (unint64_t *)&v109->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  ProgramFirstSet = (_QWORD *)MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v110);
  v140[0] = &unk_1EA99BD50;
  v140[1] = MIL::MathOps::MinimumOp<float>;
  v141 = v140;
  MIL::ValueInference::Tensor<float>::Reduce(v110, (unint64_t **)v107, 1, (uint64_t)v140, (uint64_t)&v101);
  v16 = v141;
  if (v141 == v140)
  {
    v17 = 4;
    v16 = v140;
  }
  else
  {
    if (!v141)
      goto LABEL_18;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_18:
  v138[0] = &unk_1EA99BD50;
  v138[1] = MIL::MathOps::MaximumOp<float>;
  v139 = v138;
  MIL::ValueInference::Tensor<float>::Reduce(v110, (unint64_t **)v107, 1, (uint64_t)v138, (uint64_t)&v95);
  v18 = v139;
  if (v139 == v138)
  {
    v19 = 4;
    v18 = v138;
  }
  else
  {
    if (!v139)
      goto LABEL_23;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_23:
  v136[0] = &unk_1EA99BE00;
  v136[1] = MIL::MathOps::NegateOp<float>;
  v137 = v136;
  MIL::ValueInference::Tensor<float>::ForEach((uint64_t)&v101, (uint64_t)v136, (uint64_t)&v88);
  v134[0] = &unk_1EA99BE00;
  v134[1] = MIL::MathOps::ReluOp<float>;
  v135 = v134;
  MIL::ValueInference::Tensor<float>::ForEach((uint64_t)&v88, (uint64_t)v134, (uint64_t)v94);
  v132[0] = &unk_1EA99BE00;
  v132[1] = MIL::MathOps::NegateOp<float>;
  v133 = v132;
  MIL::ValueInference::Tensor<float>::ForEach((uint64_t)v94, (uint64_t)v132, (uint64_t)&__src);
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  __p = v114;
  v103 = *(_QWORD *)v115;
  *(_QWORD *)v115 = 0;
  v114 = 0uLL;
  if ((_QWORD)v104)
  {
    *((_QWORD *)&v104 + 1) = v104;
    operator delete((void *)v104);
  }
  v104 = *(_OWORD *)&v115[8];
  v20 = v116;
  *(_QWORD *)&v115[16] = 0;
  v116 = 0;
  *(_QWORD *)&v115[8] = 0;
  v105 = v20;
  v106 = v117;
  MIL::ValueInference::Tensor<float>::~Tensor(&__src);
  v21 = v133;
  if (v133 == v132)
  {
    v22 = 4;
    v21 = v132;
  }
  else
  {
    if (!v133)
      goto LABEL_32;
    v22 = 5;
  }
  (*(void (**)(_QWORD *))(*v21 + 8 * v22))(v21);
LABEL_32:
  MIL::ValueInference::Tensor<float>::~Tensor(v94);
  v23 = v135;
  if (v135 == v134)
  {
    v24 = 4;
    v23 = v134;
  }
  else
  {
    if (!v135)
      goto LABEL_37;
    v24 = 5;
  }
  (*(void (**)(_QWORD *))(*v23 + 8 * v24))(v23);
LABEL_37:
  MIL::ValueInference::Tensor<float>::~Tensor(&v88);
  v25 = v137;
  if (v137 == v136)
  {
    v26 = 4;
    v25 = v136;
  }
  else
  {
    if (!v137)
      goto LABEL_42;
    v26 = 5;
  }
  (*(void (**)(_QWORD *))(*v25 + 8 * v26))(v25);
LABEL_42:
  v130[0] = &unk_1EA99BE00;
  v130[1] = MIL::MathOps::ReluOp<float>;
  v131 = v130;
  MIL::ValueInference::Tensor<float>::ForEach((uint64_t)&v95, (uint64_t)v130, (uint64_t)&__src);
  if ((_QWORD)v96)
  {
    *((_QWORD *)&v96 + 1) = v96;
    operator delete((void *)v96);
  }
  v96 = v114;
  v97 = *(_QWORD *)v115;
  *(_QWORD *)v115 = 0;
  v114 = 0uLL;
  if ((_QWORD)v98)
  {
    *((_QWORD *)&v98 + 1) = v98;
    operator delete((void *)v98);
  }
  v98 = *(_OWORD *)&v115[8];
  v27 = v116;
  *(_QWORD *)&v115[16] = 0;
  v116 = 0;
  *(_QWORD *)&v115[8] = 0;
  v99 = v27;
  v100 = v117;
  MIL::ValueInference::Tensor<float>::~Tensor(&__src);
  v28 = v131;
  if (v131 == v130)
  {
    v29 = 4;
    v28 = v130;
  }
  else
  {
    if (!v131)
      goto LABEL_51;
    v29 = 5;
  }
  (*(void (**)(_QWORD *))(*v28 + 8 * v29))(v28);
LABEL_51:
  v128[0] = &unk_1EA99BE00;
  v128[1] = MIL::MathOps::AbsOp<float>;
  v129 = v128;
  MIL::ValueInference::Tensor<float>::ForEach((uint64_t)&v101, (uint64_t)v128, (uint64_t)v94);
  v30 = v129;
  if (v129 == v128)
  {
    v31 = 4;
    v30 = v128;
  }
  else
  {
    if (!v129)
      goto LABEL_56;
    v31 = 5;
  }
  (*(void (**)(_QWORD *))(*v30 + 8 * v31))(v30);
LABEL_56:
  v126[0] = &unk_1EA99BE00;
  v126[1] = MIL::MathOps::AbsOp<float>;
  v127 = v126;
  MIL::ValueInference::Tensor<float>::ForEach((uint64_t)&v95, (uint64_t)v126, (uint64_t)&v88);
  v32 = v127;
  if (v127 == v126)
  {
    v33 = 4;
    v32 = v126;
  }
  else
  {
    if (!v127)
      goto LABEL_61;
    v33 = 5;
  }
  (*(void (**)(_QWORD *))(*v32 + 8 * v33))(v32);
LABEL_61:
  v124[0] = &unk_1EA99BD50;
  v124[1] = MIL::MathOps::MaximumOp<float>;
  v125 = v124;
  v34 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v94);
  v85 = 0;
  v86 = 0;
  v87 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v85, *(const void **)v34, *(_QWORD *)(v34 + 8), (uint64_t)(*(_QWORD *)(v34 + 8) - *(_QWORD *)v34) >> 3);
  MIL::ValueInference::BinaryOp<float,float>(v94, &v88, (uint64_t)v124, &v85, (uint64_t)&__src);
  if ((_QWORD)v89)
  {
    *((_QWORD *)&v89 + 1) = v89;
    operator delete((void *)v89);
  }
  v89 = v114;
  v90 = *(_QWORD *)v115;
  *(_QWORD *)v115 = 0;
  v114 = 0uLL;
  if ((_QWORD)v91)
  {
    *((_QWORD *)&v91 + 1) = v91;
    operator delete((void *)v91);
  }
  v91 = *(_OWORD *)&v115[8];
  v35 = v116;
  *(_QWORD *)&v115[16] = 0;
  v116 = 0;
  *(_QWORD *)&v115[8] = 0;
  v92 = v35;
  v93 = v117;
  MIL::ValueInference::Tensor<float>::~Tensor(&__src);
  if (v85)
  {
    v86 = v85;
    operator delete(v85);
  }
  v36 = v125;
  if (v125 == v124)
  {
    v37 = 4;
    v36 = v124;
  }
  else
  {
    if (!v125)
      goto LABEL_72;
    v37 = 5;
  }
  (*(void (**)(_QWORD *))(*v36 + 8 * v37))(v36);
LABEL_72:
  v122[0] = &unk_1EA99BE00;
  v122[1] = MIL::MathOps::NegateOp<float>;
  v123 = v122;
  MIL::ValueInference::Tensor<float>::ForEach((uint64_t)&v88, (uint64_t)v122, (uint64_t)&__src);
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  __p = v114;
  v103 = *(_QWORD *)v115;
  *(_QWORD *)v115 = 0;
  v114 = 0uLL;
  if ((_QWORD)v104)
  {
    *((_QWORD *)&v104 + 1) = v104;
    operator delete((void *)v104);
  }
  v104 = *(_OWORD *)&v115[8];
  v38 = v116;
  *(_QWORD *)&v115[16] = 0;
  v116 = 0;
  *(_QWORD *)&v115[8] = 0;
  v105 = v38;
  v106 = v117;
  MIL::ValueInference::Tensor<float>::~Tensor(&__src);
  v39 = v123;
  if (v123 == v122)
  {
    v40 = 4;
    v39 = v122;
  }
  else
  {
    if (!v123)
      goto LABEL_81;
    v40 = 5;
  }
  (*(void (**)(_QWORD *))(*v39 + 8 * v40))(v39);
LABEL_81:
  if ((_QWORD)v96)
  {
    *((_QWORD *)&v96 + 1) = v96;
    operator delete((void *)v96);
  }
  v96 = v89;
  v97 = v90;
  v90 = 0;
  v89 = 0uLL;
  if ((_QWORD)v98)
  {
    *((_QWORD *)&v98 + 1) = v98;
    operator delete((void *)v98);
  }
  v98 = v91;
  v41 = v92;
  v92 = 0;
  v91 = 0uLL;
  v99 = v41;
  v100 = v93;
  v114 = 0uLL;
  __src = 0;
  v42 = operator new(4uLL);
  v81 = v42;
  *v42 = 1132331008;
  v82 = v42 + 1;
  v83 = v42 + 1;
  MIL::ValueInference::Tensor<float>::Tensor(v84, &__src, &v81);
  if (v81)
  {
    v82 = v81;
    operator delete(v81);
  }
  if (__src)
  {
    *(_QWORD *)&v114 = __src;
    operator delete(__src);
  }
  v114 = 0uLL;
  __src = 0;
  v43 = operator new(4uLL);
  v78 = v43;
  *v43 = -1023541248;
  v79 = v43 + 1;
  v80 = v43 + 1;
  MIL::ValueInference::Tensor<float>::Tensor(&v81, &__src, &v78);
  if (v78)
  {
    v79 = v78;
    operator delete(v78);
  }
  if (__src)
  {
    *(_QWORD *)&v114 = __src;
    operator delete(__src);
  }
  v114 = 0uLL;
  __src = 0;
  v44 = operator new(4uLL);
  v75 = v44;
  *v44 = 1123942400;
  v76 = v44 + 1;
  v77 = v44 + 1;
  MIL::ValueInference::Tensor<float>::Tensor(&v78, &__src, &v75);
  if (v75)
  {
    v76 = v75;
    operator delete(v75);
  }
  if (__src)
  {
    *(_QWORD *)&v114 = __src;
    operator delete(__src);
  }
  v45 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v75);
  v72 = 0uLL;
  v73 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v72, *(const void **)v45, *(_QWORD *)(v45 + 8), (uint64_t)(*(_QWORD *)(v45 + 8) - *(_QWORD *)v45) >> 3);
  MIL::ValueInference::Tensor<float>::Zeros(&v72, (uint64_t)v74);
  if (v72.n128_u64[0])
  {
    v72.n128_u64[1] = v72.n128_u64[0];
    operator delete((void *)v72.n128_u64[0]);
  }
  v68 = 0;
  v69 = 0;
  v70 = 0;
  if ((a3 & 0xFF00000000) != 0)
  {
    v46 = (_QWORD *)MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v110);
    if ((int)a3 < 0)
      a3 = (int)(((v46[1] - *v46) >> 3) + a3);
    else
      a3 = a3;
    __src = *(void **)(*(_QWORD *)MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v110) + 8 * a3);
    std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)&v68, (char *)&__src, (uint64_t)&v114, 1uLL);
  }
  else
  {
    a3 = 0;
  }
  v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v111 + 32))(v111);
  v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 88))(v47);
  Scalar = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRTensorValueType::MakeInt32Value(Scalar, (const MIL::IRTensorValueType *)a3, &v64);
  std::string::basic_string[abi:ne180100]<0>(&__src, "quantized_data");
  *(_OWORD *)v115 = v65;
  v65 = 0uLL;
  std::string::basic_string[abi:ne180100]<0>(&v115[16], "zero_point");
  v118 = v66;
  v66 = 0uLL;
  std::string::basic_string[abi:ne180100]<0>(v119, "scale");
  v120 = v67;
  v67 = 0uLL;
  std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>::pair[abi:ne180100]<char const(&)[5],std::unique_ptr<MIL::IRTensorValue const>,0>(v121, "axis", &v64);
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map(a4, (unsigned __int8 *)&__src, 4);
  for (i = 0; i != -20; i -= 5)
  {
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v121[i + 3]);
    if (SHIBYTE(v121[i + 2]) < 0)
      operator delete((void *)v121[i]);
  }
  v51 = v64;
  v64 = 0;
  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
  if (*((_QWORD *)&v65 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
  if (*((_QWORD *)&v66 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
  if (*((_QWORD *)&v67 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  if (v68)
  {
    v69 = v68;
    operator delete(v68);
  }
  MIL::ValueInference::Tensor<float>::~Tensor(v71);
  MIL::ValueInference::Tensor<float>::~Tensor(v74);
  MIL::ValueInference::Tensor<float>::~Tensor(&v75);
  MIL::ValueInference::Tensor<float>::~Tensor(&v78);
  MIL::ValueInference::Tensor<float>::~Tensor(&v81);
  MIL::ValueInference::Tensor<float>::~Tensor(v84);
  MIL::ValueInference::Tensor<float>::~Tensor(&v88);
  MIL::ValueInference::Tensor<float>::~Tensor(v94);
  MIL::ValueInference::Tensor<float>::~Tensor(&v95);
  MIL::ValueInference::Tensor<float>::~Tensor(&v101);
  if (v107[0])
  {
    v107[1] = v107[0];
    operator delete(v107[0]);
  }
  MIL::ValueInference::Tensor<float>::~Tensor(v110);
  v61 = v112;
  if (v112)
  {
    v62 = (unint64_t *)&v112->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
}

void sub_1E06282C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  void *v65;

  if (__p)
    operator delete(__p);
  MIL::ValueInference::Tensor<float>::~Tensor(&a21);
  MIL::ValueInference::Tensor<float>::~Tensor(&a32);
  MIL::ValueInference::Tensor<float>::~Tensor(&a40);
  MIL::ValueInference::Tensor<float>::~Tensor(&a48);
  MIL::ValueInference::Tensor<float>::~Tensor(&a56);
  MIL::ValueInference::Tensor<float>::~Tensor(&a64);
  MIL::ValueInference::Tensor<float>::~Tensor(&STACK[0x210]);
  MIL::ValueInference::Tensor<float>::~Tensor(&STACK[0x250]);
  MIL::ValueInference::Tensor<float>::~Tensor(&STACK[0x290]);
  MIL::ValueInference::Tensor<float>::~Tensor(&STACK[0x2D0]);
  v65 = (void *)STACK[0x310];
  if (STACK[0x310])
  {
    STACK[0x318] = (unint64_t)v65;
    operator delete(v65);
  }
  MIL::ValueInference::Tensor<float>::~Tensor(&STACK[0x338]);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x378]);
  _Unwind_Resume(a1);
}

float MIL::MathOps::AbsOp<float>(float a1)
{
  return fabsf(a1);
}

void MIL::Passes::SparsifyWithThreshold(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>, float a4@<S0>)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  const void *DataView;
  uint64_t v34;
  uint64_t v35;
  uint64_t **ProgramFirstSet;
  uint64_t i;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD v51[8];
  uint64_t v52;
  std::__shared_weak_count *v53;
  _QWORD v54[8];
  uint64_t v55;
  std::__shared_weak_count *v56;
  float v57;
  __int128 v58;
  __int128 v59;
  void *v60;
  void *v61;
  uint64_t v62;
  _QWORD v63[8];
  __int128 v64;
  void *__p;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD v70[3];
  _QWORD *v71;
  void **v72[3];
  __int128 v73;
  uint64_t v74[3];
  __int128 v75;
  _QWORD v76[3];
  __int128 v77;
  _QWORD v78[3];
  _QWORD *v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v57 = a4;
  v5 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  v55 = *a2;
  v56 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v52 = v5;
    v53 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    v52 = v5;
    v53 = 0;
  }
  v10 = v53;
  if (v53)
  {
    v11 = (unint64_t *)&v53->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v70[0] = &off_1EA99BEA0;
  v70[1] = &v57;
  v71 = v70;
  MIL::ValueInference::Tensor<float>::ForEach((uint64_t)v54, (uint64_t)v70, (uint64_t)v51);
  v13 = v71;
  if (v71 == v70)
  {
    v14 = 4;
    v13 = v70;
  }
  else
  {
    if (!v71)
      goto LABEL_18;
    v14 = 5;
  }
  (*(void (**)(_QWORD *))(*v13 + 8 * v14))(v13);
LABEL_18:
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 32))(v55);
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 88))(v15);
  MIL::ValueInference::Tensor<float>::NonZero((uint64_t)v51, &v68);
  __p = 0;
  v66 = 0;
  v67 = 0;
  std::vector<float>::reserve(&__p, 0xAAAAAAAAAAAAAAABLL * ((v69 - v68) >> 3));
  v17 = v68;
  if (v69 != v68)
  {
    v18 = 0;
    do
    {
      v19 = (_DWORD *)MIL::ValueInference::Tensor<float>::operator[]((uint64_t)v51, (uint64_t *)(v17 + 24 * v18));
      v20 = v19;
      v21 = v66;
      if (v66 >= v67)
      {
        v23 = (char *)__p;
        v24 = (v66 - (_BYTE *)__p) >> 2;
        v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 62)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v26 = v67 - (_BYTE *)__p;
        if ((v67 - (_BYTE *)__p) >> 1 > v25)
          v25 = v26 >> 1;
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
          v27 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v27 = v25;
        if (v27)
        {
          v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v67, v27);
          v23 = (char *)__p;
          v21 = v66;
        }
        else
        {
          v28 = 0;
        }
        v29 = &v28[4 * v24];
        *(_DWORD *)v29 = *v20;
        v22 = v29 + 4;
        while (v21 != v23)
        {
          v30 = *((_DWORD *)v21 - 1);
          v21 -= 4;
          *((_DWORD *)v29 - 1) = v30;
          v29 -= 4;
        }
        __p = v29;
        v66 = v22;
        v67 = &v28[4 * v27];
        if (v23)
          operator delete(v23);
      }
      else
      {
        *(_DWORD *)v66 = *v19;
        v22 = v21 + 4;
      }
      v66 = v22;
      ++v18;
      v17 = v68;
    }
    while (v18 < 0xAAAAAAAAAAAAAAABLL * ((v69 - v68) >> 3));
  }
  v78[0] = &off_1EA99BCD0;
  v79 = v78;
  MIL::ValueInference::Tensor<float>::ForEach((uint64_t)v51, (uint64_t)v78, (uint64_t)v72);
  MIL::ValueInference::Tensor<float>::Cast<unsigned char>(v72, (uint64_t)v63);
  MIL::ValueInference::Tensor<float>::~Tensor(v72);
  v31 = v79;
  if (v79 == v78)
  {
    v32 = 4;
    v31 = v78;
    goto LABEL_41;
  }
  if (v79)
  {
    v32 = 5;
LABEL_41:
    (*(void (**)(_QWORD *))(*v31 + 8 * v32))(v31);
  }
  DataView = (const void *)MIL::ValueInference::Tensor<unsigned char>::GetDataView((uint64_t)v63);
  v34 = MIL::ValueInference::Tensor<unsigned char>::GetDataView((uint64_t)v63);
  v60 = 0;
  v61 = 0;
  v62 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&v60, DataView, v34 + v35, v34 + v35 - (_QWORD)DataView);
  ProgramFirstSet = (uint64_t **)MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v51);
  std::string::basic_string[abi:ne180100]<0>(v72, "nonzero_data");
  v73 = v64;
  v64 = 0uLL;
  std::string::basic_string[abi:ne180100]<0>(v74, "mask");
  v75 = v59;
  v59 = 0uLL;
  std::string::basic_string[abi:ne180100]<0>(v76, "shape");
  v77 = v58;
  v58 = 0uLL;
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map(a3, (unsigned __int8 *)v72, 3);
  for (i = 0; i != -15; i -= 5)
  {
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v78[i - 2]);
    if (SHIBYTE(v76[i + 2]) < 0)
      operator delete((void *)v76[i]);
  }
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
  if (*((_QWORD *)&v58 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
  if (*((_QWORD *)&v59 + 1))
  {
    v42 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v60)
  {
    v61 = v60;
    operator delete(v60);
  }
  MIL::ValueInference::Tensor<unsigned char>::~Tensor(v63);
  v44 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
  if (*((_QWORD *)&v64 + 1))
  {
    v45 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (__p)
  {
    v66 = (char *)__p;
    operator delete(__p);
  }
  v72[0] = (void **)&v68;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](v72);
  MIL::ValueInference::Tensor<float>::~Tensor(v51);
  MIL::ValueInference::Tensor<float>::~Tensor(v54);
  v47 = v56;
  if (v56)
  {
    v48 = (unint64_t *)&v56->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
}

void sub_1E0628C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  uint64_t v58;
  uint64_t v59;
  uint64_t i;

  for (i = 80; i != -40; i -= 40)
    std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>::~pair(v58 + i);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  if (__p)
  {
    a37 = (uint64_t)__p;
    operator delete(__p);
  }
  MIL::ValueInference::Tensor<unsigned char>::~Tensor(&a39);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a47);
  if (a49)
  {
    a50 = (uint64_t)a49;
    operator delete(a49);
  }
  *(_QWORD *)(v59 - 256) = &a52;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v59 - 256));
  MIL::ValueInference::Tensor<float>::~Tensor(&a10);
  MIL::ValueInference::Tensor<float>::~Tensor(&a20);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void MIL::Passes::SparsifyWithPercentile(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>, float a4@<S0>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  const void *DataView;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  float *v27;
  float v28;
  unint64_t v29;
  float *v30;
  float v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39[2];
  uint64_t v40[2];
  void *__p;
  float *v42;
  uint64_t v43;
  _QWORD v44[8];
  uint64_t v45;
  std::__shared_weak_count *v46;
  _QWORD v47[9];
  std::__shared_weak_count *v48;
  _QWORD v49[3];
  _QWORD *v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v8 = *a2;
  v9 = (std::__shared_weak_count *)a2[1];
  v47[8] = *a2;
  v48 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v45 = v8;
    v46 = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  else
  {
    v45 = v8;
    v46 = 0;
  }
  v13 = v46;
  if (v46)
  {
    v14 = (unint64_t *)&v46->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v49[0] = &unk_1EA99BE00;
  v49[1] = MIL::MathOps::AbsOp<float>;
  v50 = v49;
  MIL::ValueInference::Tensor<float>::ForEach((uint64_t)v47, (uint64_t)v49, (uint64_t)v44);
  v16 = v50;
  if (v50 == v49)
  {
    v17 = 4;
    v16 = v49;
  }
  else
  {
    if (!v50)
      goto LABEL_18;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_18:
  DataView = (const void *)MIL::ValueInference::Tensor<float>::GetDataView((uint64_t)v44);
  v19 = MIL::ValueInference::Tensor<float>::GetDataView((uint64_t)v44);
  __p = 0;
  v42 = 0;
  v43 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>(&__p, DataView, v19 + 4 * v20, (v19 + 4 * v20 - (uint64_t)DataView) >> 2);
  if (a4 == 0.0)
  {
    v21 = *a2;
    v22 = (std::__shared_weak_count *)a2[1];
    v40[0] = v21;
    v40[1] = (uint64_t)v22;
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    MIL::Passes::SparsifyWithThreshold(a1, v40, a3, 0.0);
    if (v22)
    {
      v25 = (unint64_t *)&v22->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      goto LABEL_34;
    }
  }
  else
  {
    v27 = (float *)__p;
    v28 = (float)((float)(unint64_t)(((char *)v42 - (_BYTE *)__p) >> 2) * a4) + -1.0;
    v29 = vcvtps_s32_f32(v28);
    v30 = (float *)((char *)__p + 4 * v29);
    if (v30 != v42)
    {
      std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::less<float> &,std::__wrap_iter<float *>>((float *)__p, v30, v42, v28);
      v27 = (float *)__p;
    }
    v31 = v27[v29];
    v32 = *a2;
    v22 = (std::__shared_weak_count *)a2[1];
    v39[0] = v32;
    v39[1] = (uint64_t)v22;
    if (v22)
    {
      v33 = (unint64_t *)&v22->__shared_owners_;
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    MIL::Passes::SparsifyWithThreshold(a1, v39, a3, v31);
    if (v22)
    {
      v35 = (unint64_t *)&v22->__shared_owners_;
      do
        v26 = __ldaxr(v35);
      while (__stlxr(v26 - 1, v35));
LABEL_34:
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
  }
  if (__p)
  {
    v42 = (float *)__p;
    operator delete(__p);
  }
  MIL::ValueInference::Tensor<float>::~Tensor(v44);
  MIL::ValueInference::Tensor<float>::~Tensor(v47);
  v36 = v48;
  if (v48)
  {
    v37 = (unint64_t *)&v48->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
}

void sub_1E0629050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;

  if (__p)
    operator delete(__p);
  MIL::ValueInference::Tensor<float>::~Tensor(&a17);
  MIL::ValueInference::Tensor<float>::~Tensor(&a27);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v27 - 128);
  _Unwind_Resume(a1);
}

void MIL::Passes::PalettizeKmeans(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t **ProgramFirstSet;
  uint64_t v16;
  int v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *__p[3];
  void *v22[3];
  uint64_t v23;
  char v24;
  char v25;
  void *v26[3];
  uint64_t v27[3];
  uint64_t v28;
  std::__shared_weak_count *v29;
  _QWORD v30[8];
  uint64_t v31;
  std::__shared_weak_count *v32;

  v7 = *a2;
  v8 = (std::__shared_weak_count *)a2[1];
  v31 = *a2;
  v32 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v28 = v7;
    v29 = v8;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v28 = v7;
    v29 = 0;
  }
  v12 = v29;
  if (v29)
  {
    v13 = (unint64_t *)&v29->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v23 = 1;
  v24 = 0;
  v25 = 0;
  ProgramFirstSet = (uint64_t **)MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v30);
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31);
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 88))(v16);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v22[0])
  {
    v22[1] = v22[0];
    operator delete(v22[0]);
  }
  if (v26[0])
  {
    v26[1] = v26[0];
    operator delete(v26[0]);
  }
  v22[0] = &v23;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)v22);
  v23 = (uint64_t)v27;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  MIL::ValueInference::Tensor<float>::~Tensor(v30);
  v18 = v32;
  if (v32)
  {
    v19 = (unint64_t *)&v32->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_1E06292D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  if (__p)
    operator delete(__p);
  a16 = &a22;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  MIL::ValueInference::Tensor<float>::~Tensor((_QWORD *)(v25 - 128));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v25 - 64);
  _Unwind_Resume(a1);
}

void MIL::Passes::`anonymous namespace'::TransformDataToPoints(MIL::ParserContext *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  _QWORD *ProgramFirstSet;
  unint64_t i;
  _QWORD *v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  uint64_t v23;
  unint64_t NumElements;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  const void *DataView;
  uint64_t v29;
  uint64_t v30;
  void *__p;
  void *v32;
  uint64_t v33;
  _QWORD v34[8];
  void *v35[3];
  void *v36[3];
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  unint64_t *v41;
  unint64_t *v42;
  _QWORD v43[2];

  v5 = *(_QWORD *)a2;
  if (*(_BYTE *)(a2 + 16))
    v6 = *(_QWORD *)(a2 + 8);
  else
    v6 = 0;
  v41 = 0;
  v42 = 0;
  v43[0] = 0;
  ProgramFirstSet = (_QWORD *)MIL::ParserContext::GetProgramFirstSet(a1);
  std::vector<MIL::Passes::BlockInfo>::reserve((void **)&v41, (uint64_t)(ProgramFirstSet[1] - *ProgramFirstSet) >> 3);
  for (i = 0; ; ++i)
  {
    v9 = (_QWORD *)MIL::ParserContext::GetProgramFirstSet(a1);
    if (i >= (uint64_t)(v9[1] - *v9) >> 3)
      break;
    v10 = v42;
    if (i == v6)
    {
      if ((unint64_t)v42 < v43[0])
      {
        *v42 = v6;
        v10[1] = v5;
LABEL_11:
        v11 = v10 + 2;
        goto LABEL_38;
      }
      v12 = v41;
      v13 = ((char *)v42 - (char *)v41) >> 4;
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 60)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v15 = v43[0] - (_QWORD)v41;
      if ((uint64_t)(v43[0] - (_QWORD)v41) >> 3 > v14)
        v14 = v15 >> 3;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
        v16 = 0xFFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
      {
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)v43, v16);
        v12 = v41;
        v10 = v42;
      }
      else
      {
        v17 = 0;
      }
      v21 = (unint64_t *)&v17[16 * v13];
      *v21 = v6;
      v21[1] = v5;
      v22 = v21;
      if (v10 != v12)
      {
        do
        {
          *((_OWORD *)v22 - 1) = *((_OWORD *)v10 - 1);
          v22 -= 2;
          v10 -= 2;
        }
        while (v10 != v12);
LABEL_35:
        v12 = v41;
      }
    }
    else
    {
      if ((unint64_t)v42 < v43[0])
      {
        *v42 = i;
        v10[1] = 1;
        goto LABEL_11;
      }
      v12 = v41;
      v18 = ((char *)v42 - (char *)v41) >> 4;
      v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 60)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v20 = v43[0] - (_QWORD)v41;
      if ((uint64_t)(v43[0] - (_QWORD)v41) >> 3 > v19)
        v19 = v20 >> 3;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
        v16 = 0xFFFFFFFFFFFFFFFLL;
      else
        v16 = v19;
      if (v16)
      {
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)v43, v16);
        v12 = v41;
        v10 = v42;
      }
      else
      {
        v17 = 0;
      }
      v21 = (unint64_t *)&v17[16 * v18];
      *v21 = i;
      v21[1] = 1;
      v22 = v21;
      if (v10 != v12)
      {
        do
        {
          *((_OWORD *)v22 - 1) = *((_OWORD *)v10 - 1);
          v22 -= 2;
          v10 -= 2;
        }
        while (v10 != v12);
        goto LABEL_35;
      }
    }
    v11 = v21 + 2;
    v41 = v22;
    v42 = v21 + 2;
    v43[0] = &v17[16 * v16];
    if (v12)
      operator delete(v12);
LABEL_38:
    v42 = v11;
  }
  v23 = MIL::ParserContext::GetProgramFirstSet(a1);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  NumElements = MIL::ValueInference::Tensor<float>::GetNumElements((uint64_t)a1);
  v25 = NumElements / v5;
  std::vector<std::vector<float>>::reserve(a3, NumElements / v5);
  if (v5 <= NumElements)
  {
    v26 = 0;
    if (v25 <= 1)
      v27 = 1;
    else
      v27 = v25;
    do
    {
      MIL::ValueInference::Tensor<float>::SubTensor(a1, (uint64_t **)v35, v34);
      DataView = (const void *)MIL::ValueInference::Tensor<float>::GetDataView((uint64_t)v34);
      v29 = MIL::ValueInference::Tensor<float>::GetDataView((uint64_t)v34);
      __p = 0;
      v32 = 0;
      v33 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>(&__p, DataView, v29 + 4 * v30, (v29 + 4 * v30 - (uint64_t)DataView) >> 2);
      std::vector<std::vector<float>>::push_back[abi:ne180100](a3, (uint64_t)&__p);
      if (__p)
      {
        v32 = __p;
        operator delete(__p);
      }
      MIL::ValueInference::Tensor<float>::~Tensor(v34);
      if (v35[0])
      {
        v35[1] = v35[0];
        operator delete(v35[0]);
      }
      ++v26;
    }
    while (v27 != v26);
  }
  if (v39)
  {
    v40 = v39;
    operator delete(v39);
  }
  if (v37)
  {
    v38 = v37;
    operator delete(v37);
  }
  if (v36[0])
  {
    v36[1] = v36[0];
    operator delete(v36[0]);
  }
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }
}

void sub_1E0629690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,char a24)
{
  uint64_t v24;
  void *v26;

  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  v26 = *(void **)(v24 - 112);
  if (v26)
  {
    *(_QWORD *)(v24 - 104) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(a1);
}

void MIL::Passes::`anonymous namespace'::PalettizeToDataKmeans(uint64_t *a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  char *v9;
  uint64_t v10;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v11;
  uint64_t i;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  float **v21;
  float *v22;
  uint64_t v23;
  unint64_t v24;
  float *v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  int v31;
  uint64_t v32;
  const void **v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t ClosestClusterId;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float *v61;
  float *v62;
  uint64_t v63;
  float v64;
  float v65;
  uint64_t v66;
  float *v67;
  uint64_t v68;
  float *v69;
  uint64_t v70;
  unint64_t v71;
  float v72;
  float *v73;
  float v74;
  float v75;
  float v76;
  BOOL v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char v83;
  std::runtime_error *exception;
  uint64_t v86;
  void *v87;
  void *v88;
  uint64_t v89;
  __int128 v90;
  unint64_t v91;
  void *v92;
  char *v93;
  int v94[4];
  unint64_t v95;
  void *p_p;
  _BYTE *v97;
  void *v98;
  float *v99;
  uint64_t v100;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> __p;
  char v102[9];

  std::vector<float>::vector(&__p, (uint64_t)(*(_QWORD *)(*a1 + 8) - *(_QWORD *)*a1) >> 2);
  std::vector<std::vector<float>>::vector(v94, a2, (uint64_t)&__p);
  if (*(_QWORD *)__p.__x_)
  {
    *(_QWORD *)&__p.__x_[2] = *(_QWORD *)__p.__x_;
    operator delete(*(void **)__p.__x_);
  }
  std::vector<unsigned char>::vector(&v92, 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
  v5 = *a1;
  v6 = a1[1];
  v7 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a1) >> 3);
  if (v7 >= a2)
  {
    v91 = 0;
    v90 = 0uLL;
    v11 = 42;
    __p.__x_[0] = 42;
    for (i = 1; i != 624; ++i)
    {
      v11 = i + 1812433253 * (v11 ^ (v11 >> 30));
      __p.__x_[i] = v11;
    }
    __p.__i_ = 0;
    std::__sample[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::vector<float> const*>,std::__wrap_iter<std::vector<float> const*>,std::back_insert_iterator<std::vector<std::vector<float>>>,long,std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>(v5, v6, (uint64_t *)&v90, 1, (uint64_t)&__p);
    v13 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
    LODWORD(p_p) = 2139095039;
    std::vector<float>::vector(&v98, v13, &p_p);
    if (a2 != 1)
    {
      v14 = 0;
      do
      {
        v15 = *a1;
        v16 = a1[1];
        v17 = (float *)v98;
        v18 = v16 - *a1;
        if (v16 != *a1)
        {
          v19 = 0;
          v20 = v18 / 24;
          v21 = (float **)(*((_QWORD *)&v90 + 1) - 24);
          if (v20 <= 1)
            v20 = 1;
          do
          {
            v22 = *(float **)(v15 + 24 * v19);
            v23 = *(_QWORD *)(v15 + 24 * v19 + 8) - (_QWORD)v22;
            if (v23)
            {
              v24 = v23 >> 2;
              v25 = *v21;
              if (v24 <= 1)
                v24 = 1;
              v26 = 0.0;
              do
              {
                v27 = *v22++;
                v28 = v27;
                v29 = *v25++;
                v26 = v26 + (float)((float)(v28 - v29) * (float)(v28 - v29));
                --v24;
              }
              while (v24);
            }
            else
            {
              v26 = 0.0;
            }
            v30 = sqrtf(v26);
            if (v30 >= v17[v19])
              v30 = v17[v19];
            v17[v19++] = v30;
          }
          while (v19 != v20);
        }
        std::discrete_distribution<int>::param_type::param_type[abi:ne180100]<std::__wrap_iter<float *>>((uint64_t)&p_p, v17, v99);
        v31 = std::discrete_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((int)&p_p, &__p, (double **)&p_p);
        v32 = *a1;
        v33 = (const void **)(*a1 + 24 * v31);
        v34 = (_QWORD *)*((_QWORD *)&v90 + 1);
        if (*((_QWORD *)&v90 + 1) >= v91)
        {
          v36 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>((uint64_t *)&v90, (uint64_t)v33);
        }
        else
        {
          **((_QWORD **)&v90 + 1) = 0;
          v34[1] = 0;
          v34[2] = 0;
          v35 = *(_QWORD *)(v32 + 24 * v31 + 8);
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v34, *v33, v35, (v35 - (uint64_t)*v33) >> 2);
          v36 = (uint64_t)(v34 + 3);
        }
        *((_QWORD *)&v90 + 1) = v36;
        if (p_p)
        {
          v97 = p_p;
          operator delete(p_p);
        }
        ++v14;
      }
      while (v14 != a2 - 1);
    }
    if (v98)
    {
      v99 = (float *)v98;
      operator delete(v98);
    }
    v37 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v90 + 1) - v90) >> 3));
    if (*((_QWORD *)&v90 + 1) == (_QWORD)v90)
      v38 = 0;
    else
      v38 = v37;
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *,false>((uint64_t *)v90, *((std::vector<unsigned int> **)&v90 + 1), (uint64_t)&v98, v38, 1);
    v39 = 0;
    while (1)
    {
      v86 = v39;
      std::vector<std::vector<std::vector<float>>>::vector(&__p, a2);
      v40 = *a1;
      if (a1[1] != *a1)
      {
        v41 = 0;
        v42 = 0;
        do
        {
          v98 = 0;
          v99 = 0;
          v100 = 0;
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v98, *(const void **)(v40 + v41), *(_QWORD *)(v40 + v41 + 8), (uint64_t)(*(_QWORD *)(v40 + v41 + 8) - *(_QWORD *)(v40 + v41)) >> 2);
          if (v98)
          {
            v99 = (float *)v98;
            operator delete(v98);
          }
          v45 = *a1 + v41;
          v44 = (uint64_t *)(*(_QWORD *)__p.__x_ + 24 * ClosestClusterId);
          v46 = v44 + 1;
          v47 = v44[1];
          if (v47 >= v44[2])
          {
            v48 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(v44, v45);
          }
          else
          {
            std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)v44, v45);
            v48 = v47 + 24;
          }
          *v46 = v48;
          ++v42;
          v40 = *a1;
          v41 += 24;
        }
        while (v42 < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
      }
      if (!a2)
        break;
      v49 = 0;
      v50 = 0;
      do
      {
        while (1)
        {
          v51 = (_QWORD *)(*(_QWORD *)__p.__x_ + 24 * v49);
          v52 = v51 + 1;
          if (*v51 != v51[1])
            break;
          ++v49;
          v50 = 1;
          if (v49 == a2)
            goto LABEL_80;
        }
        std::vector<float>::vector(&p_p, (uint64_t)(*(_QWORD *)(*v51 + 8) - *(_QWORD *)*v51) >> 2);
        v53 = *v51;
        v54 = (char *)p_p;
        v55 = (uint64_t)v97;
        v56 = (v97 - (_BYTE *)p_p) >> 2;
        v57 = (*v52 - *v51) / 24;
        if (*v52 != *v51)
        {
          v58 = 0;
          if (v56 <= 1)
            v59 = 1;
          else
            v59 = (v97 - (_BYTE *)p_p) >> 2;
          if (v57 <= 1)
            v60 = 1;
          else
            v60 = (*v52 - *v51) / 24;
          do
          {
            v61 = *(float **)(v53 + 24 * v58);
            if (v56 != (uint64_t)(*(_QWORD *)(v53 + 24 * v58 + 8) - (_QWORD)v61) >> 2)
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Sanity check failed: points have different lengths.");
              __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            v62 = (float *)v54;
            v63 = v59;
            if ((char *)v55 != v54)
            {
              do
              {
                v64 = *v61++;
                *v62 = v64 + *v62;
                ++v62;
                --v63;
              }
              while (v63);
            }
            ++v58;
          }
          while (v58 != v60);
        }
        if ((char *)v55 != v54)
        {
          v65 = (float)v57;
          if (v56 <= 1)
            v66 = 1;
          else
            v66 = v56;
          v67 = (float *)v54;
          do
          {
            *v67 = *v67 / v65;
            ++v67;
            --v66;
          }
          while (v66);
        }
        v68 = v90 + 24 * v49;
        v69 = *(float **)v68;
        v70 = *(_QWORD *)(v68 + 8) - *(_QWORD *)v68;
        if (v70)
        {
          v71 = v70 >> 2;
          if (v71 <= 1)
            v71 = 1;
          v72 = 0.0;
          v73 = (float *)v54;
          do
          {
            v74 = *v69++;
            v75 = v74;
            v76 = *v73++;
            v72 = v72 + (float)((float)(v75 - v76) * (float)(v75 - v76));
            --v71;
          }
          while (v71);
        }
        else
        {
          v72 = 0.0;
        }
        v77 = sqrtf(v72) > 0.01;
        if ((void **)v68 != &p_p)
          std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)v68, v54, v55, v56);
        if (p_p)
        {
          v97 = p_p;
          operator delete(p_p);
        }
        v50 |= v77;
        ++v49;
      }
      while (v49 != a2);
      if ((v50 & 1) == 0)
        break;
LABEL_80:
      v78 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v90 + 1) - v90) >> 3));
      if (*((_QWORD *)&v90 + 1) == (_QWORD)v90)
        v79 = 0;
      else
        v79 = v78;
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *,false>((uint64_t *)v90, *((std::vector<unsigned int> **)&v90 + 1), (uint64_t)v102, v79, 1);
      p_p = &__p;
      std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
      v39 = v86 + 1;
      if (v86 == 99)
        goto LABEL_86;
    }
    p_p = &__p;
    std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
LABEL_86:
    std::vector<std::vector<float>>::__vdeallocate((uint64_t *)v94);
    *(_OWORD *)v94 = v90;
    v95 = v91;
    v91 = 0;
    v90 = 0uLL;
    *(_QWORD *)__p.__x_ = &v90;
    std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    v80 = *a1;
    if (a1[1] != *a1)
    {
      v81 = 0;
      v82 = 0;
      do
      {
        v87 = 0;
        v88 = 0;
        v89 = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v87, *(const void **)(v80 + v81), *(_QWORD *)(v80 + v81 + 8), (uint64_t)(*(_QWORD *)(v80 + v81 + 8) - *(_QWORD *)(v80 + v81)) >> 2);
        *((_BYTE *)v92 + v82) = v83;
        if (v87)
        {
          v88 = v87;
          operator delete(v87);
        }
        ++v82;
        v80 = *a1;
        v81 += 24;
      }
      while (v82 < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
    }
  }
  else
  {
    memset(&__p, 0, 24);
    std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::vector<float> const*>,std::__wrap_iter<std::vector<float> const*>>(&__p, v5, v6, v7);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> *,std::vector<float> *,std::vector<float> *>((int)&p_p, *(uint64_t *)__p.__x_, *(uint64_t *)&__p.__x_[2], *(char **)v94);
    v8 = v92;
    v9 = v93;
    if (v92 != v93)
    {
      v10 = 0;
      do
      {
        v8[v10] = v10;
        ++v10;
      }
      while (&v8[v10] != v9);
    }
    v98 = &__p;
    std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v98);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(a3, *(uint64_t *)v94, *(uint64_t *)&v94[2], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v94[2] - *(_QWORD *)v94) >> 3));
  a3[3] = 0;
  a3[4] = 0;
  a3[5] = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a3 + 3, v92, (uint64_t)v93, v93 - (_BYTE *)v92);
  if (v92)
  {
    v93 = (char *)v92;
    operator delete(v92);
  }
  *(_QWORD *)__p.__x_ = v94;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1E0629E58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,char *a30,uint64_t a31)
{
  a30 = &a15;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  a30 = &a21;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  _Unwind_Resume(a1);
}

void MIL::Passes::`anonymous namespace'::UnpackIndicesToBinary(unsigned __int8 **a1@<X0>, int a2@<W1>, unint64_t *a3@<X8>)
{
  unint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _BYTE *v10;
  char v11;
  unint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  char *v19;
  char *v20;
  _BYTE *v21;
  _BYTE *v22;
  char v23;
  unsigned __int8 *v24;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v5 = a2;
  std::vector<unsigned char>::reserve(a3, (a1[1] - *a1) * a2);
  v6 = *a1;
  v24 = a1[1];
  if (*a1 != v24)
  {
    if (v5 <= 1)
      v7 = 1;
    else
      v7 = v5;
    do
    {
      if (a2)
      {
        v8 = 0;
        v9 = *v6;
        v10 = (_BYTE *)a3[1];
        do
        {
          v11 = v9 & 1;
          v12 = a3[2];
          if ((unint64_t)v10 >= v12)
          {
            v14 = *a3;
            v15 = &v10[-*a3];
            v16 = (unint64_t)(v15 + 1);
            if ((uint64_t)(v15 + 1) < 0)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v17 = v12 - v14;
            if (2 * v17 > v16)
              v16 = 2 * v17;
            if (v17 >= 0x3FFFFFFFFFFFFFFFLL)
              v18 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v18 = v16;
            if (v18)
              v19 = (char *)operator new(v18);
            else
              v19 = 0;
            v20 = &v15[(_QWORD)v19];
            v21 = &v15[(_QWORD)v19];
            *v21 = v11;
            v13 = v21 + 1;
            if (v10 != (_BYTE *)v14)
            {
              v22 = &v10[~v14];
              do
              {
                v23 = *--v10;
                (v22--)[(_QWORD)v19] = v23;
              }
              while (v10 != (_BYTE *)v14);
              v10 = (_BYTE *)*a3;
              v20 = v19;
            }
            *a3 = (unint64_t)v20;
            a3[1] = (unint64_t)v13;
            a3[2] = (unint64_t)&v19[v18];
            if (v10)
              operator delete(v10);
          }
          else
          {
            *v10 = v11;
            v13 = v10 + 1;
          }
          a3[1] = (unint64_t)v13;
          v9 >>= 1;
          ++v8;
          v10 = v13;
        }
        while (v8 != v7);
      }
      ++v6;
    }
    while (v6 != v24);
  }
}

void sub_1E062A120(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *MIL::Passes::`anonymous namespace'::TransformPointsToData@<X0>(char *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *(_QWORD *)result;
  if (*((_QWORD *)result + 1) != *(_QWORD *)result)
  {
    v4 = result;
    v5 = 0;
    v6 = 0;
    do
    {
      result = std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>((uint64_t)a2, a2[1], *(char **)(v3 + v5), *(char **)(v3 + v5 + 8), (uint64_t)(*(_QWORD *)(v3 + v5 + 8) - *(_QWORD *)(v3 + v5)) >> 2);
      ++v6;
      v3 = *(_QWORD *)v4;
      v5 += 24;
    }
    while (v6 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v4 + 1) - *(_QWORD *)v4) >> 3));
  }
  return result;
}

void sub_1E062A1D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Passes::`anonymous namespace'::PackPalettizedAttributes(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, float **a3@<X2>, uint64_t **a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t i;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _QWORD v24[3];
  __int128 v25;
  _QWORD v26[3];
  __int128 v27;
  _QWORD v28[3];
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(v24, "indices");
  v25 = v23;
  v23 = 0uLL;
  std::string::basic_string[abi:ne180100]<0>(v26, "lut");
  v27 = v22;
  v22 = 0uLL;
  std::string::basic_string[abi:ne180100]<0>(v28, "shape");
  v29 = v21;
  v21 = 0uLL;
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map(a6, (unsigned __int8 *)v24, 3);
  for (i = 0; i != -15; i -= 5)
  {
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v29 + i * 8);
    if (SHIBYTE(v28[i + 2]) < 0)
      operator delete((void *)v28[i]);
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
  if (*((_QWORD *)&v21 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_1E062A3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t i;

  for (i = 80; i != -40; i -= 40)
    std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>::~pair(v13 + i);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void MIL::Passes::`anonymous namespace'::PalettizationData::~PalettizationData(MIL::Passes::_anonymous_namespace_::PalettizationData *this)
{
  void *v2;
  void **v3;

  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  v3 = (void **)this;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void MIL::Passes::PalettizeUniform(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  const void *DataView;
  uint64_t v16;
  uint64_t v17;
  uint64_t **ProgramFirstSet;
  uint64_t v19;
  int v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *__p[3];
  void *v25[3];
  void *v26[3];
  void *v27[3];
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  _QWORD v33[8];
  uint64_t v34;
  std::__shared_weak_count *v35;

  v7 = *a2;
  v8 = (std::__shared_weak_count *)a2[1];
  v34 = *a2;
  v35 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v31 = v7;
    v32 = v8;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v31 = v7;
    v32 = 0;
  }
  v12 = v32;
  if (v32)
  {
    v13 = (unint64_t *)&v32->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  DataView = (const void *)MIL::ValueInference::Tensor<float>::GetDataView((uint64_t)v33);
  v16 = MIL::ValueInference::Tensor<float>::GetDataView((uint64_t)v33);
  v28 = 0;
  v29 = 0;
  v30 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>(&v28, DataView, v16 + 4 * v17, (v16 + 4 * v17 - (uint64_t)DataView) >> 2);
  ProgramFirstSet = (uint64_t **)MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v33);
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 32))(v34);
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 88))(v19);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v25[0])
  {
    v25[1] = v25[0];
    operator delete(v25[0]);
  }
  if (v27[0])
  {
    v27[1] = v27[0];
    operator delete(v27[0]);
  }
  v25[0] = v26;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)v25);
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  MIL::ValueInference::Tensor<float>::~Tensor(v33);
  v21 = v35;
  if (v35)
  {
    v22 = (unint64_t *)&v35->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_1E062A694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  if (__p)
    operator delete(__p);
  if (a22)
  {
    a23 = (uint64_t)a22;
    operator delete(a22);
  }
  MIL::ValueInference::Tensor<float>::~Tensor((_QWORD *)(v25 - 128));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v25 - 64);
  _Unwind_Resume(a1);
}

void MIL::Passes::`anonymous namespace'::PalettizeToDataUniform(float **a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  float *v6;
  float *v7;
  uint64_t v8;
  float v9;
  float *v11;
  float v12;
  uint64_t v13;
  float *v14;
  float *v15;
  float v16;
  float v17;
  float v18;
  float *v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float *v24;
  unint64_t v25;
  char *v26;
  char v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  size_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char v38;
  unint64_t v39;
  float *v40;
  _QWORD *v41;
  void *__p;
  void *v43;
  float *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  char *v49;
  char *v50;
  void *v51[3];

  std::vector<unsigned char>::vector(v51, a1[1] - *a1);
  v6 = *a1;
  v7 = a1[1];
  v8 = (uint64_t)(*a1 + 1);
  v9 = **a1;
  if (*a1 == v7 || v8 == (_QWORD)v7)
  {
    v11 = *a1;
  }
  else
  {
    v12 = **a1;
    v13 = (uint64_t)(*a1 + 1);
    v14 = *a1;
    v15 = (float *)v13;
    do
    {
      v16 = *v15++;
      v17 = v16;
      if (v16 < v12)
      {
        v12 = v17;
        v14 = (float *)v13;
      }
      v13 = (uint64_t)v15;
    }
    while (v15 != v7);
    v18 = *v14;
    v11 = *a1;
    v19 = *a1 + 1;
    do
    {
      v20 = *v19++;
      v21 = v20;
      if (v9 < v20)
      {
        v9 = v21;
        v11 = (float *)v8;
      }
      v8 = (uint64_t)v19;
    }
    while (v19 != v7);
    v9 = v18;
  }
  v41 = a3;
  v22 = *v11;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  std::vector<unsigned char>::reserve((unint64_t *)&v48, v7 - v6);
  v23 = (float)(v22 - v9) / (float)(a2 - 1);
  v24 = *a1;
  if (a1[1] != *a1)
  {
    v25 = 0;
    v26 = v49;
    do
    {
      v27 = llroundf((float)(v24[v25] - v9) / v23);
      if (v26 >= v50)
      {
        v29 = (unint64_t)v48;
        v30 = v26 - (_BYTE *)v48;
        v31 = v26 - (_BYTE *)v48 + 1;
        if (v31 < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v32 = v50 - (_BYTE *)v48;
        if (2 * (v50 - (_BYTE *)v48) > (unint64_t)v31)
          v31 = 2 * v32;
        if (v32 >= 0x3FFFFFFFFFFFFFFFLL)
          v33 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v33 = v31;
        if (v33)
          v34 = (char *)operator new(v33);
        else
          v34 = 0;
        v35 = &v34[v30];
        v36 = &v34[v30];
        *v36 = v27;
        v28 = v36 + 1;
        if (v26 != (char *)v29)
        {
          v37 = &v26[~v29];
          do
          {
            v38 = *--v26;
            (v37--)[(_QWORD)v34] = v38;
          }
          while (v26 != (char *)v29);
          v26 = (char *)v48;
          v35 = v34;
        }
        v48 = v35;
        v49 = v28;
        v50 = &v34[v33];
        if (v26)
          operator delete(v26);
      }
      else
      {
        *v26 = v27;
        v28 = v26 + 1;
      }
      v49 = v28;
      ++v25;
      v24 = *a1;
      v26 = v28;
    }
    while (v25 < a1[1] - *a1);
  }
  v45 = 0;
  v46 = 0;
  v47 = 0;
  std::vector<std::vector<float>>::reserve(&v45, a2);
  if (a2)
  {
    v39 = 0;
    do
    {
      v40 = (float *)operator new(4uLL);
      __p = v40;
      *v40 = v9 + (float)((float)v39 * v23);
      v43 = v40 + 1;
      v44 = v40 + 1;
      std::vector<std::vector<float>>::push_back[abi:ne180100](&v45, (uint64_t)&__p);
      if (__p)
      {
        v43 = __p;
        operator delete(__p);
      }
      ++v39;
    }
    while (a2 != v39);
  }
  *v41 = 0;
  v41[1] = 0;
  v41[2] = 0;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v41, v45, v46, 0xAAAAAAAAAAAAAAABLL * ((v46 - v45) >> 3));
  v41[3] = 0;
  v41[4] = 0;
  v41[5] = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v41 + 3, v48, (uint64_t)v49, v49 - (_BYTE *)v48);
  __p = &v45;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v48)
  {
    v49 = (char *)v48;
    operator delete(v48);
  }
  if (v51[0])
  {
    v51[1] = v51[0];
    operator delete(v51[0]);
  }
}

void sub_1E062A9F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  a11 = &a14;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a20)
  {
    a21 = (uint64_t)a20;
    operator delete(a20);
  }
  _Unwind_Resume(a1);
}

void MIL::Passes::PalettizeUnique(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  float *DataView;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t i;
  size_t v23;
  char *j;
  uint64_t v25;
  uint64_t v26;
  float *v27;
  float *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  size_t v35;
  char *v36;
  char *v37;
  char *v38;
  char v39;
  uint64_t **ProgramFirstSet;
  uint64_t v41;
  int v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  void (***v46)(MIL::MILContextImpl *__hidden);
  int *v47;
  void *__p[3];
  void *v49;
  char *v50;
  char *v51;
  _OWORD v52[2];
  int v53;
  void *v54[3];
  _QWORD *v55;
  _QWORD *v56;
  unint64_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  _QWORD v60[8];
  uint64_t v61;
  std::__shared_weak_count *v62;

  v7 = *a2;
  v8 = (std::__shared_weak_count *)a2[1];
  v61 = *a2;
  v62 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v58 = v7;
    v59 = v8;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v58 = v7;
    v59 = 0;
  }
  v12 = v59;
  if (v59)
  {
    v13 = (unint64_t *)&v59->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  DataView = (float *)MIL::ValueInference::Tensor<float>::GetDataView((uint64_t)v60);
  v16 = MIL::ValueInference::Tensor<float>::GetDataView((uint64_t)v60);
  std::set<float>::set[abi:ne180100]<float const*>((uint64_t)&v55, DataView, (float *)(v16 + 4 * v17));
  v18 = operator new(0x14uLL);
  v19 = 0;
  v18[4] = 8;
  *(_OWORD *)v18 = xmmword_1E0B045EC;
  while (1)
  {
    v20 = v18[v19];
    if (v57 <= 1 << v20)
      break;
    if (++v19 == 5)
    {
      operator delete(v18);
      *a3 = -1;
LABEL_41:
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
      *(_DWORD *)(a4 + 32) = 1065353216;
      goto LABEL_48;
    }
  }
  operator delete(v18);
  *a3 = v20;
  if (v20 == -1)
    goto LABEL_41;
  std::vector<float>::vector(v54, 1 << v20);
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__tree_const_iterator<float,std::__tree_node<float,void *> *,long>,std::__tree_const_iterator<float,std::__tree_node<float,void *> *,long>,std::__wrap_iter<float *>,0>(v55, &v56, (_DWORD *)v54[0]);
  memset(v52, 0, sizeof(v52));
  v53 = 1065353216;
  if (v57)
  {
    v21 = 0;
    for (i = 0; i < v57; ++i)
    {
      v49 = (char *)v54[0] + v21;
      *((_BYTE *)std::__hash_table<std::__hash_value_type<float,unsigned char>,std::__unordered_map_hasher<float,std::__hash_value_type<float,unsigned char>,std::hash<float>,std::equal_to<float>,true>,std::__unordered_map_equal<float,std::__hash_value_type<float,unsigned char>,std::equal_to<float>,std::hash<float>,true>,std::allocator<std::__hash_value_type<float,unsigned char>>>::__emplace_unique_key_args<float,std::piecewise_construct_t const&,std::tuple<float const&>,std::tuple<>>((uint64_t)v52, (float *)((char *)v54[0] + v21), (uint64_t)&std::piecewise_construct, (float **)&v49)+ 20) = i;
      v21 += 4;
    }
  }
  v49 = 0;
  v50 = 0;
  v51 = 0;
  MIL::ValueInference::Tensor<float>::GetDataView((uint64_t)v60);
  std::vector<unsigned char>::reserve((unint64_t *)&v49, v23);
  v46 = a1;
  v47 = a3;
  for (j = (char *)MIL::ValueInference::Tensor<float>::GetDataView((uint64_t)v60); ; j += 4)
  {
    v25 = MIL::ValueInference::Tensor<float>::GetDataView((uint64_t)v60);
    if (j == (char *)(v25 + 4 * v26))
      break;
    __p[0] = j;
    v27 = std::__hash_table<std::__hash_value_type<float,unsigned char>,std::__unordered_map_hasher<float,std::__hash_value_type<float,unsigned char>,std::hash<float>,std::equal_to<float>,true>,std::__unordered_map_equal<float,std::__hash_value_type<float,unsigned char>,std::equal_to<float>,std::hash<float>,true>,std::allocator<std::__hash_value_type<float,unsigned char>>>::__emplace_unique_key_args<float,std::piecewise_construct_t const&,std::tuple<float const&>,std::tuple<>>((uint64_t)v52, (float *)j, (uint64_t)&std::piecewise_construct, (float **)__p);
    v28 = v27;
    v29 = v50;
    if (v50 >= v51)
    {
      v31 = (unint64_t)v49;
      v32 = v50 - (_BYTE *)v49;
      v33 = v50 - (_BYTE *)v49 + 1;
      if (v33 < 0)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v34 = v51 - (_BYTE *)v49;
      if (2 * (v51 - (_BYTE *)v49) > (unint64_t)v33)
        v33 = 2 * v34;
      if (v34 >= 0x3FFFFFFFFFFFFFFFLL)
        v35 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v35 = v33;
      if (v35)
        v36 = (char *)operator new(v35);
      else
        v36 = 0;
      v37 = &v36[v32];
      v36[v32] = *((_BYTE *)v28 + 20);
      v30 = (uint64_t)&v36[v32 + 1];
      if (v29 != (char *)v31)
      {
        v38 = &v29[~v31];
        do
        {
          v39 = *--v29;
          (v38--)[(_QWORD)v36] = v39;
        }
        while (v29 != (char *)v31);
        v29 = (char *)v49;
        v37 = v36;
      }
      v49 = v37;
      v50 = &v36[v32 + 1];
      v51 = &v36[v35];
      if (v29)
        operator delete(v29);
    }
    else
    {
      *v50 = *((_BYTE *)v27 + 20);
      v30 = (uint64_t)(v29 + 1);
    }
    v50 = (char *)v30;
  }
  ProgramFirstSet = (uint64_t **)MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v60);
  v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 32))(v61);
  v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 88))(v41);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v49)
  {
    v50 = (char *)v49;
    operator delete(v49);
  }
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v52);
  if (v54[0])
  {
    v54[1] = v54[0];
    operator delete(v54[0]);
  }
LABEL_48:
  std::__tree<float>::destroy((uint64_t)&v55, v56);
  MIL::ValueInference::Tensor<float>::~Tensor(v60);
  v43 = v62;
  if (v62)
  {
    v44 = (unint64_t *)&v62->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
}

void sub_1E062AE74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,char a26,_QWORD *a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;

  if (__p)
    operator delete(__p);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)&a17);
  if (a23)
  {
    a24 = (uint64_t)a23;
    operator delete(a23);
  }
  std::__tree<float>::destroy((uint64_t)&a26, a27);
  MIL::ValueInference::Tensor<float>::~Tensor(&a31);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v31 - 112);
  _Unwind_Resume(a1);
}

void std::vector<unsigned char>::reserve(unint64_t *a1, size_t __sz)
{
  unint64_t v2;
  char *v5;
  _BYTE *v6;
  char *v7;
  _BYTE *v8;
  char *v9;
  char v10;

  v2 = *a1;
  if (a1[2] - *a1 < __sz)
  {
    if ((__sz & 0x8000000000000000) != 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v5 = (char *)a1[1];
    v6 = operator new(__sz);
    v7 = &v5[(_QWORD)v6 - v2];
    v8 = v7;
    if (v5 != (char *)v2)
    {
      v9 = &v5[~v2];
      do
      {
        v10 = *--v5;
        (v9--)[(_QWORD)v6] = v10;
      }
      while (v5 != (char *)v2);
      v8 = v6;
    }
    *a1 = (unint64_t)v8;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v6[__sz];
    if (v2)
      operator delete((void *)v2);
  }
}

void MIL::Passes::PalettizePerBlockKmeans(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t *a4@<X3>, uint64_t **a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  unint64_t v21;
  _QWORD *ProgramFirstSet;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::runtime_error *exception;
  void *__p[3];
  void **v38[3];
  void *v39;
  _BYTE *v40;
  uint64_t v41[3];
  _QWORD v42[8];
  void *v43[3];
  void *v44[3];
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52[3];
  uint64_t v53;
  std::__shared_weak_count *v54;
  _QWORD v55[8];
  uint64_t v56;
  std::__shared_weak_count *v57;

  if ((unint64_t)((char *)a5[1] - (char *)*a5) >= 0x21)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Per-block palettization only allows on at most 2 channels.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v11 = *a2;
  v12 = (std::__shared_weak_count *)a2[1];
  v56 = *a2;
  v57 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    v53 = v11;
    v54 = v12;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  else
  {
    v53 = v11;
    v54 = 0;
  }
  v16 = v54;
  if (v54)
  {
    v17 = (unint64_t *)&v54->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = *a5;
  v20 = a5[1];
  v21 = 1;
  while (v19 != v20)
  {
    ProgramFirstSet = (_QWORD *)MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v55);
    v23 = *v19;
    v24 = v19[1];
    v19 += 2;
    v21 *= *(_QWORD *)(*ProgramFirstSet + 8 * v23) / v24;
  }
  memset(v52, 0, sizeof(v52));
  std::vector<std::vector<float>>::reserve(v52, v21);
  v49 = 0;
  v50 = 0;
  v51 = 0;
  std::vector<std::vector<unsigned char>>::reserve(&v49, v21);
  v25 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v55);
  if (v21)
  {
    v26 = 0;
    v27 = 1 << a3;
    do
    {
      MIL::ValueInference::Tensor<float>::SubTensor(v55, (uint64_t **)v43, v42);
      std::vector<std::vector<float>>::push_back[abi:ne180100](v52, (uint64_t)__p);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      v28 = v50;
      if ((unint64_t)v50 >= v51)
      {
        v29 = std::vector<std::vector<unsigned char>>::__push_back_slow_path<std::vector<unsigned char> const&>(&v49, (uint64_t)&v39);
      }
      else
      {
        *v50 = 0;
        v28[1] = 0;
        v28[2] = 0;
        std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v28, v39, (uint64_t)v40, v40 - (_BYTE *)v39);
        v29 = (uint64_t)(v28 + 3);
      }
      v50 = (_QWORD *)v29;
      if (v39)
      {
        v40 = v39;
        operator delete(v39);
      }
      __p[0] = v38;
      std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      v38[0] = (void **)v41;
      std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](v38);
      MIL::ValueInference::Tensor<float>::~Tensor(v42);
      if (v43[0])
      {
        v43[1] = v43[0];
        operator delete(v43[0]);
      }
      ++v26;
    }
    while (v21 != v26);
  }
  v30 = (_QWORD *)MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v55);
  v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 32))(v56);
  v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 88))(v31);
  if (v47)
  {
    v48 = v47;
    operator delete(v47);
  }
  if (v45)
  {
    v46 = v45;
    operator delete(v45);
  }
  if (v44[0])
  {
    v44[1] = v44[0];
    operator delete(v44[0]);
  }
  v44[0] = &v49;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)v44);
  v44[0] = v52;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)v44);
  MIL::ValueInference::Tensor<float>::~Tensor(v55);
  v33 = v57;
  if (v57)
  {
    v34 = (unint64_t *)&v57->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
}

void sub_1E062B344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,uint64_t a33)
{
  void *v33;

  __cxa_free_exception(v33);
  _Unwind_Resume(a1);
}

void sub_1E062B438()
{
  JUMPOUT(0x1E062B420);
}

uint64_t std::vector<std::vector<float>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 24 * v6;
    std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1E062B4DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<unsigned char>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 24 * v6;
    std::vector<std::vector<unsigned char>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1E062B58C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *MIL::Passes::`anonymous namespace'::BlockwiseIndexConverter::BlockwiseIndexConverter(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v6 = *a3;
  v7 = a3[1];
  if (*a3 != v7)
  {
    v8 = *a1;
    do
    {
      v10 = *v6;
      v9 = v6[1];
      v6 += 2;
      *(_QWORD *)(v8 + 8 * v10) = v9;
    }
    while (v6 != v7);
  }
  v11 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3;
  v29 = 1;
  std::vector<unsigned long long>::vector(a1 + 3, v11, &v29);
  v12 = *a3;
  v13 = a3[1];
  if (*a3 != v13)
  {
    v14 = *(_QWORD **)a2;
    v15 = a1[3];
    do
    {
      v16 = *v12;
      v17 = v12[1];
      v12 += 2;
      *(_QWORD *)(v15 + 8 * v16) = v14[v16] / v17;
    }
    while (v12 != v13);
  }
  v18 = std::vector<unsigned long long>::vector(a1 + 6, (a1[4] - a1[3]) >> 3);
  v19 = a1[3];
  v20 = a1[4] - v19;
  if (v20)
  {
    v21 = v20 >> 3;
    if ((unint64_t)(v20 >> 3) <= 1)
      v22 = 1;
    else
      v22 = v20 >> 3;
    v23 = 8 * v21 - 8;
    v24 = (uint64_t *)(v19 + v23);
    v25 = (uint64_t *)(*v18 + v23);
    v26 = 1;
    do
    {
      *v25-- = v26;
      v27 = *v24--;
      v26 *= v27;
      --v22;
    }
    while (v22);
  }
  return a1;
}

void sub_1E062B6BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Passes::`anonymous namespace'::BlockwiseIndexConverter::GetBlockIndices(MIL::Passes::_anonymous_namespace_::BlockwiseIndexConverter *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  unint64_t *v26;
  unint64_t *v27;

  std::vector<unsigned long long>::vector(&v26, (uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 3);
  v6 = (unint64_t *)*((_QWORD *)this + 6);
  v7 = *((_QWORD *)this + 7) - (_QWORD)v6;
  if (v7)
  {
    v8 = v7 >> 3;
    v9 = v26;
    if (v8 <= 1)
      v8 = 1;
    do
    {
      *v9++ = a2 / *v6;
      v10 = *v6++;
      a2 %= v10;
      --v8;
    }
    while (v8);
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  std::vector<std::pair<unsigned long long,unsigned long long>>::reserve((void **)a3, v27 - v26);
  v11 = v27;
  if (v27 != v26)
  {
    v12 = 0;
    v13 = (_QWORD *)(a3 + 16);
    v14 = *(uint64_t **)(a3 + 8);
    v11 = v26;
    do
    {
      v15 = *(_QWORD *)(*(_QWORD *)this + 8 * v12);
      v16 = v15 * v11[v12];
      v17 = v15 + v16;
      if ((unint64_t)v14 >= *v13)
      {
        v18 = *(uint64_t **)a3;
        v19 = ((uint64_t)v14 - *(_QWORD *)a3) >> 4;
        v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 60)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v21 = *v13 - (_QWORD)v18;
        if (v21 >> 3 > v20)
          v20 = v21 >> 3;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
          v22 = 0xFFFFFFFFFFFFFFFLL;
        else
          v22 = v20;
        if (v22)
        {
          v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>(a3 + 16, v22);
          v18 = *(uint64_t **)a3;
          v14 = *(uint64_t **)(a3 + 8);
        }
        else
        {
          v23 = 0;
        }
        v24 = &v23[16 * v19];
        *(_QWORD *)v24 = v16;
        *((_QWORD *)v24 + 1) = v17;
        v25 = v24;
        if (v14 != v18)
        {
          do
          {
            *((_OWORD *)v25 - 1) = *((_OWORD *)v14 - 1);
            v25 -= 16;
            v14 -= 2;
          }
          while (v14 != v18);
          v18 = *(uint64_t **)a3;
        }
        v14 = (uint64_t *)(v24 + 16);
        *(_QWORD *)a3 = v25;
        *(_QWORD *)(a3 + 8) = v24 + 16;
        *(_QWORD *)(a3 + 16) = &v23[16 * v22];
        if (v18)
          operator delete(v18);
      }
      else
      {
        *v14 = v16;
        v14[1] = v17;
        v14 += 2;
      }
      *(_QWORD *)(a3 + 8) = v14;
      ++v12;
      v11 = v26;
    }
    while (v12 < v27 - v26);
  }
  if (v11)
  {
    v27 = v11;
    operator delete(v11);
  }
}

void sub_1E062B8BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  v13 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v13;
    operator delete(v13);
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::vector<float>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1E062BA18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void MIL::Passes::`anonymous namespace'::PackPerBlockPalettizedInputs(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X5>, int a7@<W6>, uint64_t a8@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  char *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  size_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char v38;
  __int128 v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  size_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  char *v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  size_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  size_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  char *v72;
  char *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  size_t v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  char v83;
  uint64_t ProgramFirstSet;
  uint64_t v85;
  size_t v86;
  uint64_t DataView;
  uint64_t v88;
  unsigned __int8 *v89;
  unsigned __int8 *v90;
  char *v91;
  char *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  size_t v97;
  char *v98;
  char *v99;
  char *v100;
  char *v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  size_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned __int8 *v108;
  unsigned __int8 *v109;
  char *v110;
  char *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  size_t v116;
  char *v117;
  char *v118;
  char *v119;
  char *v120;
  char v121;
  uint64_t v122;
  unint64_t v123;
  char *v124;
  _QWORD *v125;
  char *v126;
  _QWORD *v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  char *v132;
  int64_t *v133;
  int64_t v134;
  uint64_t v135;
  _QWORD *v136;
  unint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  char *v144;
  char *v145;
  char *v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  void *v153;
  void *size;
  uint64_t i;
  MIL::IRTensorValueType *Scalar;
  unsigned __int8 *v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::runtime_error *exception;
  _QWORD *v166;
  std::string *v167;
  std::string::size_type v168;
  _QWORD *v169;
  std::logic_error *v170;
  std::runtime_error *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v180;
  uint64_t v181;
  unint64_t v183;
  uint64_t v185;
  std::string v186;
  unsigned __int128 v187;
  void *v188;
  char *v189;
  char *v190;
  uint64_t v191;
  _QWORD *v192;
  unint64_t v193;
  void *v194;
  _QWORD *v195;
  unint64_t v196;
  __int128 v197;
  void *__p;
  void *v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  unint64_t v203;
  void *v204[3];
  _BYTE v205[24];
  uint64_t v206;
  uint64_t v207;
  _QWORD v208[28];

  v208[25] = *MEMORY[0x1E0C80C00];
  v10 = *a2;
  v9 = a2[1];
  v11 = 0xAAAAAAAAAAAAAAABLL * ((v9 - *a2) >> 3);
  if (v11 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Sanity check failed, indicesData.size() != lutData.size()");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v201 = 0;
  v202 = 0;
  v203 = 0;
  v183 = v11;
  std::vector<MIL::ValueInference::Tensor<unsigned char>>::reserve(&v201, v11);
  v180 = v9;
  v181 = v10;
  if (v9 != v10)
  {
    v15 = 0;
    if (v183 <= 1)
      v16 = 1;
    else
      v16 = v183;
    do
    {
      __p = 0;
      v199 = 0;
      v200 = 0;
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 3);
      if (*((_BYTE *)a4 + 16))
        *((_QWORD *)__p + a4[1]) /= (unint64_t)*a4;
      MIL::ValueInference::Tensor<unsigned char>::Tensor(v204, &__p, *a2 + v15);
      v17 = v202;
      if ((unint64_t)v202 >= v203)
      {
        v18 = std::vector<MIL::ValueInference::Tensor<unsigned char>>::__push_back_slow_path<MIL::ValueInference::Tensor<unsigned char>>(&v201, (uint64_t)v204);
      }
      else
      {
        v202[3] = 0;
        v17[4] = 0;
        v17[1] = 0;
        v17[2] = 0;
        *v17 = &off_1EA99BC70;
        *(_OWORD *)(v17 + 1) = *(_OWORD *)&v204[1];
        v17[3] = *(_QWORD *)v205;
        v204[1] = 0;
        v204[2] = 0;
        *(_QWORD *)v205 = 0;
        v17[5] = 0;
        v17[6] = 0;
        *((_OWORD *)v17 + 2) = *(_OWORD *)&v205[8];
        v17[6] = v206;
        *(_OWORD *)&v205[8] = 0uLL;
        v206 = 0;
        v17[7] = v207;
        v18 = (uint64_t)(v17 + 8);
      }
      v202 = (_QWORD *)v18;
      MIL::ValueInference::Tensor<unsigned char>::~Tensor(v204);
      if (__p)
      {
        v199 = __p;
        operator delete(__p);
      }
      v15 += 24;
      --v16;
    }
    while (v16);
  }
  memset(v204, 0, sizeof(v204));
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(v204, *(const void **)(a5 + 24), *(_QWORD *)(a5 + 32), (uint64_t)(*(_QWORD *)(a5 + 32) - *(_QWORD *)(a5 + 24)) >> 3);
  MIL::ValueInference::Tensor<unsigned char>::BlockwiseMerge(&v201, (uint64_t)v204, (uint64_t)&__p);
  if (v204[0])
  {
    v204[1] = v204[0];
    operator delete(v204[0]);
  }
  v19 = ((uint64_t)(*(_QWORD *)(*a3 + 8) - *(_QWORD *)*a3) >> 2) / (unint64_t)*a4;
  v197 = 0uLL;
  if (v19 <= 15)
  {
    v177 = v19;
    switch(v19)
    {
      case 2:
        ProgramFirstSet = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&__p);
        memset(v204, 0, sizeof(v204));
        std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(v204, *(const void **)ProgramFirstSet, *(_QWORD *)(ProgramFirstSet + 8), (uint64_t)(*(_QWORD *)(ProgramFirstSet + 8) - *(_QWORD *)ProgramFirstSet) >> 3);
        v85 = MIL::IRTensorValueType::Make(a1, 21, (MIL::MILContext ***)v204);
        v188 = 0;
        v189 = 0;
        v190 = 0;
        MIL::ValueInference::Tensor<unsigned char>::GetDataView((uint64_t)&__p);
        std::vector<unsigned char>::reserve((unint64_t *)&v188, v86);
        v175 = v85;
        DataView = MIL::ValueInference::Tensor<unsigned char>::GetDataView((uint64_t)&__p);
        if (v88)
        {
          v89 = (unsigned __int8 *)DataView;
          v90 = (unsigned __int8 *)(DataView + v88);
          do
          {
            MIL::UInt1::UInt1((MIL::UInt1 *)&v194, *v89);
            v91 = v189;
            if (v189 >= v190)
            {
              v93 = (unint64_t)v188;
              v94 = v189 - (_BYTE *)v188;
              v95 = v189 - (_BYTE *)v188 + 1;
              if (v95 < 0)
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              v96 = v190 - (_BYTE *)v188;
              if (2 * (v190 - (_BYTE *)v188) > (unint64_t)v95)
                v95 = 2 * v96;
              if (v96 >= 0x3FFFFFFFFFFFFFFFLL)
                v97 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v97 = v95;
              if (v97)
                v98 = (char *)operator new(v97);
              else
                v98 = 0;
              v99 = &v98[v94];
              v100 = &v98[v94];
              *v100 = (char)v194;
              v92 = v100 + 1;
              if (v91 != (char *)v93)
              {
                v101 = &v91[~v93];
                do
                {
                  v102 = *--v91;
                  (v101--)[(_QWORD)v98] = v102;
                }
                while (v91 != (char *)v93);
                v91 = (char *)v188;
                v99 = v98;
              }
              v188 = v99;
              v189 = v92;
              v190 = &v98[v97];
              if (v91)
                operator delete(v91);
            }
            else
            {
              *v189 = (char)v194;
              v92 = v91 + 1;
            }
            v189 = v92;
            ++v89;
          }
          while (v89 != v90);
        }
        MIL::PackSubByteVec((uint64_t *)&v188, &v194);
        MIL::IRTensorValueType::MakeUInt1Value(v175, (uint64_t)&v194, &v191);
        std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>(&v197, &v191);
        goto LABEL_138;
      case 4:
        v46 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&__p);
        memset(v204, 0, sizeof(v204));
        std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(v204, *(const void **)v46, *(_QWORD *)(v46 + 8), (uint64_t)(*(_QWORD *)(v46 + 8) - *(_QWORD *)v46) >> 3);
        v47 = MIL::IRTensorValueType::Make(a1, 19, (MIL::MILContext ***)v204);
        v188 = 0;
        v189 = 0;
        v190 = 0;
        MIL::ValueInference::Tensor<unsigned char>::GetDataView((uint64_t)&__p);
        std::vector<unsigned char>::reserve((unint64_t *)&v188, v48);
        v173 = v47;
        v49 = MIL::ValueInference::Tensor<unsigned char>::GetDataView((uint64_t)&__p);
        if (v50)
        {
          v51 = (unsigned __int8 *)v49;
          v52 = (unsigned __int8 *)(v49 + v50);
          do
          {
            MIL::UInt2::UInt2((MIL::UInt2 *)&v194, *v51);
            v53 = v189;
            if (v189 >= v190)
            {
              v55 = (unint64_t)v188;
              v56 = v189 - (_BYTE *)v188;
              v57 = v189 - (_BYTE *)v188 + 1;
              if (v57 < 0)
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              v58 = v190 - (_BYTE *)v188;
              if (2 * (v190 - (_BYTE *)v188) > (unint64_t)v57)
                v57 = 2 * v58;
              if (v58 >= 0x3FFFFFFFFFFFFFFFLL)
                v59 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v59 = v57;
              if (v59)
                v60 = (char *)operator new(v59);
              else
                v60 = 0;
              v61 = &v60[v56];
              v62 = &v60[v56];
              *v62 = (char)v194;
              v54 = v62 + 1;
              if (v53 != (char *)v55)
              {
                v63 = &v53[~v55];
                do
                {
                  v64 = *--v53;
                  (v63--)[(_QWORD)v60] = v64;
                }
                while (v53 != (char *)v55);
                v53 = (char *)v188;
                v61 = v60;
              }
              v188 = v61;
              v189 = v54;
              v190 = &v60[v59];
              if (v53)
                operator delete(v53);
            }
            else
            {
              *v189 = (char)v194;
              v54 = v53 + 1;
            }
            v189 = v54;
            ++v51;
          }
          while (v51 != v52);
        }
        MIL::PackSubByteVec((uint64_t *)&v188, &v194);
        MIL::IRTensorValueType::MakeUInt2Value(v173, (uint64_t)&v194, &v191);
        std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>(&v197, &v191);
        goto LABEL_138;
      case 8:
        v20 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&__p);
        memset(v204, 0, sizeof(v204));
        std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(v204, *(const void **)v20, *(_QWORD *)(v20 + 8), (uint64_t)(*(_QWORD *)(v20 + 8) - *(_QWORD *)v20) >> 3);
        v21 = MIL::IRTensorValueType::Make(a1, 22, (MIL::MILContext ***)v204);
        v188 = 0;
        v189 = 0;
        v190 = 0;
        MIL::ValueInference::Tensor<unsigned char>::GetDataView((uint64_t)&__p);
        std::vector<unsigned char>::reserve((unint64_t *)&v188, v22);
        v172 = v21;
        v23 = MIL::ValueInference::Tensor<unsigned char>::GetDataView((uint64_t)&__p);
        if (v24)
        {
          v25 = (unsigned __int8 *)v23;
          v26 = (unsigned __int8 *)(v23 + v24);
          do
          {
            MIL::UInt3::UInt3((MIL::UInt3 *)&v194, *v25);
            v27 = v189;
            if (v189 >= v190)
            {
              v29 = (unint64_t)v188;
              v30 = v189 - (_BYTE *)v188;
              v31 = v189 - (_BYTE *)v188 + 1;
              if (v31 < 0)
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              v32 = v190 - (_BYTE *)v188;
              if (2 * (v190 - (_BYTE *)v188) > (unint64_t)v31)
                v31 = 2 * v32;
              if (v32 >= 0x3FFFFFFFFFFFFFFFLL)
                v33 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v33 = v31;
              if (v33)
                v34 = (char *)operator new(v33);
              else
                v34 = 0;
              v35 = &v34[v30];
              v36 = &v34[v30];
              *v36 = (char)v194;
              v28 = v36 + 1;
              if (v27 != (char *)v29)
              {
                v37 = &v27[~v29];
                do
                {
                  v38 = *--v27;
                  (v37--)[(_QWORD)v34] = v38;
                }
                while (v27 != (char *)v29);
                v27 = (char *)v188;
                v35 = v34;
              }
              v188 = v35;
              v189 = v28;
              v190 = &v34[v33];
              if (v27)
                operator delete(v27);
            }
            else
            {
              *v189 = (char)v194;
              v28 = v27 + 1;
            }
            v189 = v28;
            ++v25;
          }
          while (v25 != v26);
        }
        MIL::PackSubByteVec((unsigned __int8 **)&v188, &v194);
        MIL::IRTensorValueType::MakeUInt3Value(v172, (uint64_t)&v194, &v191);
        std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>(&v197, &v191);
LABEL_138:
        v122 = v191;
        v191 = 0;
        v19 = v177;
        if (v122)
          (*(void (**)(uint64_t))(*(_QWORD *)v122 + 8))(v122);
        if (v194)
        {
          v195 = v194;
          operator delete(v194);
        }
        if (v188)
        {
          v189 = (char *)v188;
          operator delete(v188);
        }
        if (v204[0])
        {
          v204[1] = v204[0];
          operator delete(v204[0]);
        }
        goto LABEL_146;
    }
LABEL_243:
    v171 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v171, "Unsupported numPalettes");
    __cxa_throw(v171, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v19 == 16)
  {
    v103 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&__p);
    memset(v204, 0, sizeof(v204));
    std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(v204, *(const void **)v103, *(_QWORD *)(v103 + 8), (uint64_t)(*(_QWORD *)(v103 + 8) - *(_QWORD *)v103) >> 3);
    v104 = MIL::IRTensorValueType::Make(a1, 20, (MIL::MILContext ***)v204);
    v188 = 0;
    v189 = 0;
    v190 = 0;
    MIL::ValueInference::Tensor<unsigned char>::GetDataView((uint64_t)&__p);
    std::vector<unsigned char>::reserve((unint64_t *)&v188, v105);
    v176 = v104;
    v177 = 16;
    v106 = MIL::ValueInference::Tensor<unsigned char>::GetDataView((uint64_t)&__p);
    if (v107)
    {
      v108 = (unsigned __int8 *)v106;
      v109 = (unsigned __int8 *)(v106 + v107);
      do
      {
        MIL::UInt4::UInt4((MIL::UInt4 *)&v194, *v108);
        v110 = v189;
        if (v189 >= v190)
        {
          v112 = (unint64_t)v188;
          v113 = v189 - (_BYTE *)v188;
          v114 = v189 - (_BYTE *)v188 + 1;
          if (v114 < 0)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v115 = v190 - (_BYTE *)v188;
          if (2 * (v190 - (_BYTE *)v188) > (unint64_t)v114)
            v114 = 2 * v115;
          if (v115 >= 0x3FFFFFFFFFFFFFFFLL)
            v116 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v116 = v114;
          if (v116)
            v117 = (char *)operator new(v116);
          else
            v117 = 0;
          v118 = &v117[v113];
          v119 = &v117[v113];
          *v119 = (char)v194;
          v111 = v119 + 1;
          if (v110 != (char *)v112)
          {
            v120 = &v110[~v112];
            do
            {
              v121 = *--v110;
              (v120--)[(_QWORD)v117] = v121;
            }
            while (v110 != (char *)v112);
            v110 = (char *)v188;
            v118 = v117;
          }
          v188 = v118;
          v189 = v111;
          v190 = &v117[v116];
          if (v110)
            operator delete(v110);
        }
        else
        {
          *v189 = (char)v194;
          v111 = v110 + 1;
        }
        v189 = v111;
        ++v108;
      }
      while (v108 != v109);
    }
    MIL::PackSubByteVec((uint64_t *)&v188, &v194);
    MIL::IRTensorValueType::MakeUInt4Value(v176, (uint64_t)&v194, &v191);
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>(&v197, &v191);
    goto LABEL_138;
  }
  if (v19 == 64)
  {
    v65 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&__p);
    memset(v204, 0, sizeof(v204));
    std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(v204, *(const void **)v65, *(_QWORD *)(v65 + 8), (uint64_t)(*(_QWORD *)(v65 + 8) - *(_QWORD *)v65) >> 3);
    v66 = MIL::IRTensorValueType::Make(a1, 23, (MIL::MILContext ***)v204);
    v188 = 0;
    v189 = 0;
    v190 = 0;
    MIL::ValueInference::Tensor<unsigned char>::GetDataView((uint64_t)&__p);
    std::vector<unsigned char>::reserve((unint64_t *)&v188, v67);
    v174 = v66;
    v177 = 64;
    v68 = MIL::ValueInference::Tensor<unsigned char>::GetDataView((uint64_t)&__p);
    if (v69)
    {
      v70 = (unsigned __int8 *)v68;
      v71 = (unsigned __int8 *)(v68 + v69);
      do
      {
        MIL::UInt6::UInt6((MIL::UInt6 *)&v194, *v70);
        v72 = v189;
        if (v189 >= v190)
        {
          v74 = (unint64_t)v188;
          v75 = v189 - (_BYTE *)v188;
          v76 = v189 - (_BYTE *)v188 + 1;
          if (v76 < 0)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v77 = v190 - (_BYTE *)v188;
          if (2 * (v190 - (_BYTE *)v188) > (unint64_t)v76)
            v76 = 2 * v77;
          if (v77 >= 0x3FFFFFFFFFFFFFFFLL)
            v78 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v78 = v76;
          if (v78)
            v79 = (char *)operator new(v78);
          else
            v79 = 0;
          v80 = &v79[v75];
          v81 = &v79[v75];
          *v81 = (char)v194;
          v73 = v81 + 1;
          if (v72 != (char *)v74)
          {
            v82 = &v72[~v74];
            do
            {
              v83 = *--v72;
              (v82--)[(_QWORD)v79] = v83;
            }
            while (v72 != (char *)v74);
            v72 = (char *)v188;
            v80 = v79;
          }
          v188 = v80;
          v189 = v73;
          v190 = &v79[v78];
          if (v72)
            operator delete(v72);
        }
        else
        {
          *v189 = (char)v194;
          v73 = v72 + 1;
        }
        v189 = v73;
        ++v70;
      }
      while (v70 != v71);
    }
    MIL::PackSubByteVec((unsigned __int8 **)&v188, &v194);
    MIL::IRTensorValueType::MakeUInt6Value(v174, (uint64_t)&v194, &v191);
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>(&v197, &v191);
    goto LABEL_138;
  }
  if (v19 != 256)
    goto LABEL_243;
  MIL::ValueInference::Tensor<unsigned char>::ToIRTensorValue((uint64_t)&__p, a1, v204);
  v39 = *(_OWORD *)v204;
  v204[0] = 0;
  v204[1] = 0;
  v40 = (std::__shared_weak_count *)*((_QWORD *)&v197 + 1);
  v197 = v39;
  if (v40)
  {
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldaxr(p_shared_owners);
    while (__stlxr(v42 - 1, p_shared_owners));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = (std::__shared_weak_count *)v204[1];
  if (v204[1])
  {
    v44 = (unint64_t *)((char *)v204[1] + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
LABEL_146:
  v123 = (uint64_t)(a6[1] - *a6) >> 3;
  v204[0] = (void *)1;
  std::vector<unsigned long long>::vector(&v194, v123, v204);
  v125 = v195;
  v124 = (char *)v196;
  if ((unint64_t)v195 >= v196)
  {
    v127 = v194;
    v128 = ((char *)v195 - (_BYTE *)v194) >> 3;
    v129 = v128 + 1;
    if ((unint64_t)(v128 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v130 = v196 - (_QWORD)v194;
    if ((uint64_t)(v196 - (_QWORD)v194) >> 2 > v129)
      v129 = v130 >> 2;
    if ((unint64_t)v130 >= 0x7FFFFFFFFFFFFFF8)
      v131 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v131 = v129;
    if (v131)
    {
      v132 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v196, v131);
      v127 = v194;
      v125 = v195;
    }
    else
    {
      v132 = 0;
    }
    v133 = (int64_t *)&v132[8 * v128];
    v124 = &v132[8 * v131];
    *v133 = v19;
    v126 = (char *)(v133 + 1);
    while (v125 != v127)
    {
      v134 = *--v125;
      *--v133 = v134;
    }
    v194 = v133;
    v195 = v126;
    v196 = (unint64_t)v124;
    if (v127)
    {
      operator delete(v127);
      v124 = (char *)v196;
    }
  }
  else
  {
    *v195 = v19;
    v126 = (char *)(v125 + 1);
  }
  v195 = v126;
  v135 = *a4;
  if (v126 >= v124)
  {
    v139 = (char *)v194;
    v140 = (v126 - (_BYTE *)v194) >> 3;
    v141 = v140 + 1;
    if ((unint64_t)(v140 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v142 = v124 - (_BYTE *)v194;
    if (v142 >> 2 > v141)
      v141 = v142 >> 2;
    if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFF8)
      v143 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v143 = v141;
    if (v143)
    {
      v144 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v196, v143);
      v139 = (char *)v194;
      v126 = (char *)v195;
    }
    else
    {
      v144 = 0;
    }
    v145 = &v144[8 * v140];
    v146 = &v144[8 * v143];
    *(_QWORD *)v145 = v135;
    v136 = v145 + 8;
    if (v126 == v139)
    {
      v138 = v181;
    }
    else
    {
      v138 = v181;
      do
      {
        v147 = *((_QWORD *)v126 - 1);
        v126 -= 8;
        *((_QWORD *)v145 - 1) = v147;
        v145 -= 8;
      }
      while (v126 != v139);
    }
    v194 = v145;
    v195 = v136;
    v196 = (unint64_t)v146;
    if (v139)
      operator delete(v139);
    v137 = v183;
  }
  else
  {
    *(_QWORD *)v126 = v135;
    v136 = v126 + 8;
    v137 = v183;
    v138 = v181;
  }
  v195 = v136;
  v191 = 0;
  v192 = 0;
  v193 = 0;
  std::vector<MIL::ValueInference::Tensor<unsigned char>>::reserve(&v201, v137);
  if (v180 != v138)
  {
    v148 = v137;
    v149 = 0;
    if (v148 <= 1)
      v150 = 1;
    else
      v150 = v148;
    do
    {
      v188 = 0;
      v189 = 0;
      v190 = 0;
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v188, v194, (uint64_t)v195, ((char *)v195 - (_BYTE *)v194) >> 3);
      MIL::ValueInference::Tensor<float>::Tensor(v204, &v188, *a3 + v149);
      v151 = v192;
      if ((unint64_t)v192 >= v193)
      {
        v152 = std::vector<MIL::ValueInference::Tensor<float>>::__push_back_slow_path<MIL::ValueInference::Tensor<float>>(&v191, (uint64_t)v204);
      }
      else
      {
        v192[3] = 0;
        v151[4] = 0;
        v151[1] = 0;
        v151[2] = 0;
        *v151 = &off_1EA99BBB0;
        *(_OWORD *)(v151 + 1) = *(_OWORD *)&v204[1];
        v151[3] = *(_QWORD *)v205;
        v204[1] = 0;
        v204[2] = 0;
        *(_QWORD *)v205 = 0;
        v151[5] = 0;
        v151[6] = 0;
        *((_OWORD *)v151 + 2) = *(_OWORD *)&v205[8];
        v151[6] = v206;
        *(_OWORD *)&v205[8] = 0uLL;
        v206 = 0;
        v151[7] = v207;
        v152 = (uint64_t)(v151 + 8);
      }
      v192 = (_QWORD *)v152;
      MIL::ValueInference::Tensor<float>::~Tensor(v204);
      if (v188)
      {
        v189 = (char *)v188;
        operator delete(v188);
      }
      v149 += 24;
      --v150;
    }
    while (v150);
  }
  memset(v204, 0, sizeof(v204));
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(v204, *(const void **)(a5 + 24), *(_QWORD *)(a5 + 32), (uint64_t)(*(_QWORD *)(a5 + 32) - *(_QWORD *)(a5 + 24)) >> 3);
  MIL::ValueInference::Tensor<float>::BlockwiseMerge(&v191, (uint64_t)v204, (uint64_t)&v188);
  if (v204[0])
  {
    v204[1] = v204[0];
    operator delete(v204[0]);
  }
  v187 = 0uLL;
  if (a7 > 8)
  {
    if (a7 == 9)
    {
      MIL::ValueInference::Tensor<float>::Cast<signed char>(&v188, (uint64_t)v204);
      MIL::ValueInference::Tensor<signed char>::ToIRTensorValue((uint64_t)v204, a1, &v186);
      size = (void *)v186.__r_.__value_.__l.__size_;
      v153 = (void *)v186.__r_.__value_.__r.__words[0];
      *(_OWORD *)&v186.__r_.__value_.__l.__data_ = 0uLL;
      v187 = __PAIR128__((unint64_t)size, (unint64_t)v153);
      MIL::ValueInference::Tensor<signed char>::~Tensor(v204);
      goto LABEL_202;
    }
    if (a7 == 14)
    {
      MIL::ValueInference::Tensor<float>::Cast<unsigned char>(&v188, (uint64_t)v204);
      MIL::ValueInference::Tensor<unsigned char>::ToIRTensorValue((uint64_t)v204, a1, &v186);
      size = (void *)v186.__r_.__value_.__l.__size_;
      v153 = (void *)v186.__r_.__value_.__r.__words[0];
      *(_OWORD *)&v186.__r_.__value_.__l.__data_ = 0uLL;
      v187 = __PAIR128__((unint64_t)size, (unint64_t)v153);
      MIL::ValueInference::Tensor<unsigned char>::~Tensor(v204);
      goto LABEL_202;
    }
LABEL_234:
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v204);
    v166 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v204, (uint64_t)"Unsupported Datatype ", 21);
    MIL::IRDataTypeToString(a7, &v186);
    if ((v186.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v167 = &v186;
    else
      v167 = (std::string *)v186.__r_.__value_.__r.__words[0];
    if ((v186.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v168 = HIBYTE(v186.__r_.__value_.__r.__words[2]);
    else
      v168 = v186.__r_.__value_.__l.__size_;
    v169 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v166, (uint64_t)v167, v168);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v169, (uint64_t)".", 1);
    if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v186.__r_.__value_.__l.__data_);
    v170 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::logic_error::logic_error(v170, &v186);
    v170->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(v170, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  if (a7 == 4)
  {
    MIL::ValueInference::Tensor<float>::Cast<MIL::Fp16>(&v188, (uint64_t)v204);
    MIL::ValueInference::Tensor<MIL::Fp16>::ToIRTensorValue((uint64_t)v204, a1, &v186);
    size = (void *)v186.__r_.__value_.__l.__size_;
    v153 = (void *)v186.__r_.__value_.__r.__words[0];
    *(_OWORD *)&v186.__r_.__value_.__l.__data_ = 0uLL;
    v187 = __PAIR128__((unint64_t)size, (unint64_t)v153);
    MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(v204);
    goto LABEL_202;
  }
  if (a7 != 5)
    goto LABEL_234;
  MIL::ValueInference::Tensor<float>::ToIRTensorValue((uint64_t)&v188, a1, v204);
  v153 = v204[0];
  size = v204[1];
  v187 = *(_OWORD *)v204;
LABEL_202:
  std::string::basic_string[abi:ne180100]<0>(v204, "indices");
  *(_OWORD *)v205 = v197;
  v197 = 0uLL;
  std::string::basic_string[abi:ne180100]<0>(&v205[16], "lut");
  v208[0] = v153;
  v208[1] = size;
  v187 = 0uLL;
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map(a8, (unsigned __int8 *)v204, 2);
  for (i = 0; i != -10; i -= 5)
  {
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v208[i]);
    if (*((char *)&v207 + i * 8 + 7) < 0)
      operator delete(*(void **)&v205[i * 8 + 16]);
  }
  if (*((_BYTE *)a4 + 16))
  {
    Scalar = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar(a1, 11);
    if (!*((_BYTE *)a4 + 16))
      std::__throw_bad_optional_access[abi:ne180100]();
    MIL::IRTensorValueType::MakeInt32Value(Scalar, (const MIL::IRTensorValueType *)*((unsigned int *)a4 + 2), &v185);
    std::string::basic_string[abi:ne180100]<0>(v204, "vector_axis");
    v186.__r_.__value_.__r.__words[0] = (std::string::size_type)v204;
    v157 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a8, (unsigned __int8 *)v204, (uint64_t)&std::piecewise_construct, (__int128 **)&v186);
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>((_QWORD *)v157 + 5, &v185);
    if (SHIBYTE(v204[2]) < 0)
      operator delete(v204[0]);
    v158 = v185;
    v185 = 0;
    if (v158)
      (*(void (**)(uint64_t))(*(_QWORD *)v158 + 8))(v158);
  }
  v159 = (std::__shared_weak_count *)*((_QWORD *)&v187 + 1);
  if (*((_QWORD *)&v187 + 1))
  {
    v160 = (unint64_t *)(*((_QWORD *)&v187 + 1) + 8);
    do
      v161 = __ldaxr(v160);
    while (__stlxr(v161 - 1, v160));
    if (!v161)
    {
      ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
      std::__shared_weak_count::__release_weak(v159);
    }
  }
  MIL::ValueInference::Tensor<float>::~Tensor(&v188);
  v204[0] = &v191;
  std::vector<MIL::ValueInference::Tensor<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v204);
  if (v194)
  {
    v195 = v194;
    operator delete(v194);
  }
  v162 = (std::__shared_weak_count *)*((_QWORD *)&v197 + 1);
  if (*((_QWORD *)&v197 + 1))
  {
    v163 = (unint64_t *)(*((_QWORD *)&v197 + 1) + 8);
    do
      v164 = __ldaxr(v163);
    while (__stlxr(v164 - 1, v163));
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
    }
  }
  MIL::ValueInference::Tensor<unsigned char>::~Tensor(&__p);
  v204[0] = &v201;
  std::vector<MIL::ValueInference::Tensor<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v204);
}

void sub_1E062CB74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  void *v61;
  int v62;

  if (a25 < 0)
  {
    operator delete(__p);
    if ((v62 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a56);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
      MIL::ValueInference::Tensor<float>::~Tensor(&a28);
      a56 = &a36;
      std::vector<MIL::ValueInference::Tensor<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a56);
      if (a39)
      {
        a40 = (uint64_t)a39;
        operator delete(a39);
      }
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a42);
      MIL::ValueInference::Tensor<unsigned char>::~Tensor(&a44);
      a56 = (uint64_t *)&a52;
      std::vector<MIL::ValueInference::Tensor<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a56);
      _Unwind_Resume(a1);
    }
  }
  else if (!v62)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v61);
  goto LABEL_6;
}

void MIL::Passes::`anonymous namespace'::BlockwiseIndexConverter::~BlockwiseIndexConverter(MIL::Passes::_anonymous_namespace_::BlockwiseIndexConverter *this)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 4) = v3;
    operator delete(v3);
  }
  v4 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v4;
    operator delete(v4);
  }
}

void MIL::Passes::PalettizePerBlockUniform(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t **a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v6;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  unint64_t v20;
  _QWORD *ProgramFirstSet;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  const void *DataView;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  int v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::runtime_error *exception;
  void *__p[3];
  void *v40[3];
  void *v41;
  _BYTE *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  void *v49[3];
  void *v50[3];
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  uint64_t v58[3];
  uint64_t v59;
  std::__shared_weak_count *v60;
  _QWORD v61[8];
  uint64_t v62;
  std::__shared_weak_count *v63;

  v6 = (char *)a4[1] - (char *)*a4;
  if (!v6 || v6 >= 0x21)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Per-block palettization only allows on 1 or 2 channels.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v10 = *a2;
  v11 = (std::__shared_weak_count *)a2[1];
  v62 = *a2;
  v63 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    v59 = v10;
    v60 = v11;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  else
  {
    v59 = v10;
    v60 = 0;
  }
  v15 = v60;
  if (v60)
  {
    v16 = (unint64_t *)&v60->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = *a4;
  v19 = a4[1];
  v20 = 1;
  while (v18 != v19)
  {
    ProgramFirstSet = (_QWORD *)MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v61);
    v22 = *v18;
    v23 = v18[1];
    v18 += 2;
    v20 *= *(_QWORD *)(*ProgramFirstSet + 8 * v22) / v23;
  }
  memset(v58, 0, sizeof(v58));
  std::vector<std::vector<float>>::reserve(v58, v20);
  v55 = 0;
  v56 = 0;
  v57 = 0;
  std::vector<std::vector<unsigned char>>::reserve(&v55, v20);
  v24 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v61);
  if (v20)
  {
    v25 = 0;
    v26 = 1 << a3;
    do
    {
      MIL::ValueInference::Tensor<float>::SubTensor(v61, (uint64_t **)v49, &v46);
      DataView = (const void *)MIL::ValueInference::Tensor<float>::GetDataView((uint64_t)&v46);
      v28 = MIL::ValueInference::Tensor<float>::GetDataView((uint64_t)&v46);
      v43 = 0;
      v44 = 0;
      v45 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>(&v43, DataView, v28 + 4 * v29, (v28 + 4 * v29 - (uint64_t)DataView) >> 2);
      std::vector<std::vector<float>>::push_back[abi:ne180100](v58, (uint64_t)__p);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      v30 = v56;
      if ((unint64_t)v56 >= v57)
      {
        v31 = std::vector<std::vector<unsigned char>>::__push_back_slow_path<std::vector<unsigned char> const&>(&v55, (uint64_t)&v41);
      }
      else
      {
        *v56 = 0;
        v30[1] = 0;
        v30[2] = 0;
        std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v30, v41, (uint64_t)v42, v42 - (_BYTE *)v41);
        v31 = (uint64_t)(v30 + 3);
      }
      v56 = (_QWORD *)v31;
      if (v41)
      {
        v42 = v41;
        operator delete(v41);
      }
      __p[0] = v40;
      std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      if (v43)
      {
        v44 = v43;
        operator delete(v43);
      }
      MIL::ValueInference::Tensor<float>::~Tensor(&v46);
      if (v49[0])
      {
        v49[1] = v49[0];
        operator delete(v49[0]);
      }
      ++v25;
    }
    while (v20 != v25);
  }
  v46 = 1;
  v47 = 0;
  v48 = 0;
  v32 = (_QWORD *)MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v61);
  v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v62 + 32))(v62);
  v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 88))(v33);
  if (v53)
  {
    v54 = v53;
    operator delete(v53);
  }
  if (v51)
  {
    v52 = v51;
    operator delete(v51);
  }
  if (v50[0])
  {
    v50[1] = v50[0];
    operator delete(v50[0]);
  }
  v50[0] = &v55;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)v50);
  v50[0] = v58;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)v50);
  MIL::ValueInference::Tensor<float>::~Tensor(v61);
  v35 = v63;
  if (v63)
  {
    v36 = (unint64_t *)&v63->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_1E062D2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  void *v32;

  __cxa_free_exception(v32);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>::pair[abi:ne180100]<char const(&)[13],std::unique_ptr<MIL::IRTensorValue const>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRValue const>::shared_ptr[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>(v5 + 3, a3);
  return a1;
}

void sub_1E062D3F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1EA99BB80;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(_QWORD *a1)
{
  MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(a1);
  JUMPOUT(0x1E0C023A0);
}

__n128 std::vector<float>::__move_assign(uint64_t a1, __n128 *a2)
{
  void *v4;
  __n128 result;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  result = *a2;
  *(__n128 *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

_QWORD *MIL::ValueInference::Tensor<float>::~Tensor(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1EA99BBB0;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void MIL::ValueInference::Tensor<float>::~Tensor(_QWORD *a1)
{
  MIL::ValueInference::Tensor<float>::~Tensor(a1);
  JUMPOUT(0x1E0C023A0);
}

float MIL::MathOps::SubOp<float>(float a1, float a2)
{
  return a1 - a2;
}

float MIL::MathOps::RealDivOp<float>(float a1, float a2)
{
  return a1 / a2;
}

float MIL::MathOps::MulOp<float>(float a1, float a2)
{
  return a1 * a2;
}

float MIL::MathOps::RoundOp<float>(float a1)
{
  return roundf(a1);
}

float MIL::MathOps::AddOp<float>(float a1, float a2)
{
  return a1 + a2;
}

void std::__function::__func<MIL::Passes::`anonymous namespace'::CalculateQuantizedDataTensor(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&)::$_0,std::allocator<MIL::Passes::`anonymous namespace'::CalculateQuantizedDataTensor(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&)::$_0>,float ()(float)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<MIL::Passes::`anonymous namespace'::CalculateQuantizedDataTensor(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&)::$_0,std::allocator<MIL::Passes::`anonymous namespace'::CalculateQuantizedDataTensor(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&)::$_0>,float ()(float)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1EA99BBE0;
  return result;
}

void std::__function::__func<MIL::Passes::`anonymous namespace'::CalculateQuantizedDataTensor(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&)::$_0,std::allocator<MIL::Passes::`anonymous namespace'::CalculateQuantizedDataTensor(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&)::$_0>,float ()(float)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1EA99BBE0;
}

float std::__function::__func<MIL::Passes::`anonymous namespace'::CalculateQuantizedDataTensor(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&)::$_0,std::allocator<MIL::Passes::`anonymous namespace'::CalculateQuantizedDataTensor(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&)::$_0>,float ()(float)>::operator()(uint64_t a1, float *a2)
{
  float result;

  result = *a2;
  if (*a2 == 0.0)
    return 3.4028e38;
  return result;
}

uint64_t std::__function::__func<MIL::Passes::`anonymous namespace'::CalculateQuantizedDataTensor(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&)::$_0,std::allocator<MIL::Passes::`anonymous namespace'::CalculateQuantizedDataTensor(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&)::$_0>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Passes::`anonymous namespace'::CalculateQuantizedDataTensor(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&)::$_0,std::allocator<MIL::Passes::`anonymous namespace'::CalculateQuantizedDataTensor(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&)::$_0>,float ()(float)>::target_type()
{
}

_QWORD *MIL::ValueInference::Tensor<unsigned char>::~Tensor(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1EA99BC70;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void MIL::ValueInference::Tensor<unsigned char>::~Tensor(_QWORD *a1)
{
  MIL::ValueInference::Tensor<unsigned char>::~Tensor(a1);
  JUMPOUT(0x1E0C023A0);
}

_QWORD *MIL::ValueInference::Tensor<signed char>::~Tensor(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1EA99BCA0;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void MIL::ValueInference::Tensor<signed char>::~Tensor(_QWORD *a1)
{
  MIL::ValueInference::Tensor<signed char>::~Tensor(a1);
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>::pair[abi:ne180100]<char const(&)[5],std::unique_ptr<MIL::IRTensorValue const>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRValue const>::shared_ptr[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>(v5 + 3, a3);
  return a1;
}

void sub_1E062D734(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::vector<float>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 2)
  {
    if (a2 >> 62)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = &v6[4 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void MIL::Passes::`anonymous namespace'::MakeFlattenTensorValue(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, float **a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  float *v8;
  float *v9;
  MIL::MILContext **v10;
  uint64_t v11;
  float *v12;
  uint64_t v13;
  unint64_t v14;
  std::string::size_type v15;
  float *v16;
  float *v17;
  size_t v18;
  std::string::size_type v19;
  MIL::Fp16 *v20;
  float *v21;
  float *v22;
  __int16 v23;
  MIL::Fp16 *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  __int16 v32;
  std::string::size_type v33;
  float *v34;
  float *v35;
  size_t v36;
  std::string::size_type v37;
  _QWORD *v38;
  std::string::size_type v39;
  _QWORD *v40;
  std::string *v41;
  std::string::size_type size;
  _QWORD *v43;
  std::logic_error *exception;
  std::string v45;
  void *__p;
  char *v47;
  char *v48;
  MIL::MILContext **v49;
  MIL::MILContext **v50;
  MIL::MILContext **v51;
  uint64_t v52;
  uint64_t v53;

  v52 = 0;
  v53 = 0;
  v9 = *a2;
  v8 = a2[1];
  v10 = (MIL::MILContext **)operator new(8uLL);
  v49 = v10;
  *v10 = (MIL::MILContext *)(v8 - v9);
  v50 = v10 + 1;
  v51 = v10 + 1;
  v11 = MIL::IRTensorValueType::Make(a1, a3, &v49);
  if (a3 <= 8)
  {
    if (a3 == 4)
    {
      __p = 0;
      v47 = 0;
      v48 = 0;
      std::vector<MIL::Fp16>::reserve(&__p, a2[1] - *a2);
      v21 = *a2;
      v22 = a2[1];
      if (*a2 != v22)
      {
        do
        {
          v20 = (MIL::Fp16 *)MIL::Fp16::FromFloat(v20, *v21);
          v23 = (__int16)v20;
          v24 = (MIL::Fp16 *)v47;
          if (v47 >= v48)
          {
            v20 = (MIL::Fp16 *)__p;
            v26 = v47 - (_BYTE *)__p;
            if (v47 - (_BYTE *)__p <= -3)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v27 = v26 >> 1;
            if (v48 - (_BYTE *)__p <= (unint64_t)((v26 >> 1) + 1))
              v28 = v27 + 1;
            else
              v28 = v48 - (_BYTE *)__p;
            if ((unint64_t)(v48 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
              v29 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v29 = v28;
            if (v29)
            {
              v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>((uint64_t)&v48, v29);
              v20 = (MIL::Fp16 *)__p;
              v24 = (MIL::Fp16 *)v47;
            }
            else
            {
              v30 = 0;
            }
            v31 = &v30[2 * v27];
            *(_WORD *)v31 = v23;
            v25 = v31 + 2;
            while (v24 != v20)
            {
              v32 = *((_WORD *)v24 - 1);
              v24 = (MIL::Fp16 *)((char *)v24 - 2);
              *((_WORD *)v31 - 1) = v32;
              v31 -= 2;
            }
            __p = v31;
            v47 = v25;
            v48 = &v30[2 * v29];
            if (v20)
              operator delete(v20);
          }
          else
          {
            *(_WORD *)v47 = (_WORD)v20;
            v25 = (char *)v24 + 2;
          }
          v47 = v25;
          ++v21;
        }
        while (v21 != v22);
      }
      MIL::IRTensorValueType::MakeFloat16Value(v11, (uint64_t)&__p, &v45);
      v33 = v45.__r_.__value_.__r.__words[0];
      *a4 = v45.__r_.__value_.__r.__words[0];
      if (v33)
        goto LABEL_32;
      goto LABEL_33;
    }
    if (a3 == 5)
    {
      v12 = *a2;
      v13 = (uint64_t)a2[1];
      v14 = (v13 - (uint64_t)*a2) >> 2;
      v47 = 0;
      v48 = 0;
      __p = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(&__p, v12, v13, v14);
      MIL::IRTensorValueType::MakeFloat32Value(v11, (uint64_t)&__p, &v45);
      v15 = v45.__r_.__value_.__r.__words[0];
      *a4 = v45.__r_.__value_.__r.__words[0];
      if (v15)
        goto LABEL_32;
      goto LABEL_33;
    }
LABEL_40:
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
    v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unsupported Datatype ", 21);
    MIL::IRDataTypeToString(a3, &v45);
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v41 = &v45;
    else
      v41 = (std::string *)v45.__r_.__value_.__r.__words[0];
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v45.__r_.__value_.__r.__words[2]);
    else
      size = v45.__r_.__value_.__l.__size_;
    v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)v41, size);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)".", 1);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::logic_error::logic_error(exception, &v45);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  if (a3 != 9)
  {
    if (a3 == 14)
    {
      v16 = *a2;
      v17 = a2[1];
      v18 = v17 - *a2;
      v47 = 0;
      v48 = 0;
      __p = 0;
      std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((char *)&__p, v16, v17, v18);
      MIL::IRTensorValueType::MakeUInt8Value(v11, (uint64_t)&__p, &v45);
      v19 = v45.__r_.__value_.__r.__words[0];
      *a4 = v45.__r_.__value_.__r.__words[0];
      if (v19)
        goto LABEL_32;
      goto LABEL_33;
    }
    goto LABEL_40;
  }
  v34 = *a2;
  v35 = a2[1];
  v36 = v35 - *a2;
  v47 = 0;
  v48 = 0;
  __p = 0;
  std::vector<signed char>::__init_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((char *)&__p, v34, v35, v36);
  MIL::IRTensorValueType::MakeInt8Value(v11, (uint64_t)&__p, &v45);
  v37 = v45.__r_.__value_.__r.__words[0];
  *a4 = v45.__r_.__value_.__r.__words[0];
  if (v37)
  {
LABEL_32:
    v38 = (_QWORD *)operator new();
    v39 = v45.__r_.__value_.__r.__words[0];
    *v38 = &unk_1EA992A68;
    v38[1] = 0;
    v38[2] = 0;
    v38[3] = v39;
    goto LABEL_34;
  }
LABEL_33:
  v38 = 0;
LABEL_34:
  a4[1] = v38;
  if (__p)
  {
    v47 = (char *)__p;
    operator delete(__p);
  }
  if (v49)
  {
    v50 = v49;
    operator delete(v49);
  }
}

void sub_1E062DBC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17)
{
  void *v17;
  int v18;
  uint64_t v19;
  void *v21;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a16);
      v21 = *(void **)(v19 - 120);
      if (v21)
      {
        *(_QWORD *)(v19 - 112) = v21;
        operator delete(v21);
      }
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v19 - 96);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

void MIL::Passes::`anonymous namespace'::PackBitsToTensorValue(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  void (***v3)(MIL::MILContextImpl *__hidden);
  uint64_t v5;
  unint64_t v6;
  char *v8;
  unint64_t i;
  int v10;
  uint64_t v11;
  uint64_t j;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char v23;
  _BYTE *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v31;
  void *__p;
  void *v33;
  _QWORD *v34;
  void *v35;
  void *v36;
  char *v37;

  v3 = a1;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v5 = *a2;
  v6 = a2[1] - *a2;
  if (v6)
  {
    v8 = 0;
    for (i = 0; i < v6; i += 8)
    {
      v10 = 0;
      v11 = v5 + i;
      for (j = 7; j != -1; --j)
      {
        v10 *= 2;
        if (i + j < v6)
          v10 += *(unsigned __int8 *)(v11 + j);
      }
      if (v8 >= v37)
      {
        v13 = (unint64_t)v35;
        v14 = v8 - (_BYTE *)v35;
        v15 = v8 - (_BYTE *)v35 + 1;
        if (v15 < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v16 = v37 - (_BYTE *)v35;
        if (2 * (v37 - (_BYTE *)v35) > (unint64_t)v15)
          v15 = 2 * v16;
        if (v16 >= 0x3FFFFFFFFFFFFFFFLL)
          v17 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
          v18 = (char *)operator new(v17);
        else
          v18 = 0;
        v19 = &v18[v14];
        v20 = &v18[v14];
        *v20 = v10;
        v21 = v20 + 1;
        if (v8 != (char *)v13)
        {
          v22 = &v8[~v13];
          do
          {
            v23 = *--v8;
            (v22--)[(_QWORD)v18] = v23;
          }
          while (v8 != (char *)v13);
          v8 = (char *)v35;
          v19 = v18;
        }
        v35 = v19;
        v37 = &v18[v17];
        if (v8)
          operator delete(v8);
        v8 = v21;
      }
      else
      {
        *v8++ = v10;
      }
      v36 = v8;
      v5 = *a2;
      v6 = a2[1] - *a2;
    }
    v24 = v35;
    v3 = a1;
  }
  else
  {
    v24 = 0;
    v8 = 0;
  }
  v25 = operator new(8uLL);
  __p = v25;
  *v25 = v8 - v24;
  v33 = v25 + 1;
  v34 = v25 + 1;
  v26 = MIL::IRTensorValueType::Make(v3, 14, (MIL::MILContext ***)&__p);
  MIL::IRTensorValueType::MakeUInt8Value(v26, (uint64_t)&v35, &v31);
  v27 = v31;
  *a3 = v31;
  if (v27)
  {
    v28 = (_QWORD *)operator new();
    v29 = v31;
    *v28 = &unk_1EA992A68;
    v28[1] = 0;
    v28[2] = 0;
    v28[3] = v29;
  }
  else
  {
    v28 = 0;
  }
  a3[1] = v28;
  if (__p)
  {
    v33 = __p;
    operator delete(__p);
  }
  if (v35)
  {
    v36 = v35;
    operator delete(v35);
  }
}

void sub_1E062DEDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

void MIL::Passes::`anonymous namespace'::ConstructShapeTensorValue(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  void *__p;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  _QWORD *v22;

  v7 = *a2;
  v6 = a2[1];
  v8 = operator new(8uLL);
  v20 = v8;
  *v8 = v6 - v7;
  v21 = v8 + 1;
  v22 = v8 + 1;
  v9 = MIL::IRTensorValueType::Make(a1, 16, (MIL::MILContext ***)&v20);
  v10 = *a2;
  v11 = a2[1];
  v12 = v11 - *a2;
  v18 = 0;
  v19 = 0;
  __p = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>((char *)&__p, v10, v11, v12);
  MIL::IRTensorValueType::MakeUInt32Value(v9, (uint64_t)&__p, &v16);
  v13 = v16;
  *a3 = v16;
  if (v13)
  {
    v14 = (_QWORD *)operator new();
    v15 = v16;
    *v14 = &unk_1EA992A68;
    v14[1] = 0;
    v14[2] = 0;
    v14[3] = v15;
  }
  else
  {
    v14 = 0;
  }
  a3[1] = v14;
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
}

void sub_1E062E040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

void std::vector<MIL::Fp16>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int16 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 1)
  {
    if ((a2 & 0x8000000000000000) != 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFELL];
    v9 = &v6[2 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_WORD *)v11 - 1);
        v11 -= 2;
        *((_WORD *)v12 - 1) = v13;
        v12 -= 2;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

_QWORD *std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1E062E184(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<signed char>::__init_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(char *result, float *a2, float *a3, size_t __sz)
{
  char *v6;
  _BYTE *v7;
  float v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    v7 = (_BYTE *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = (int)v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1E062E1F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(char *result, float *a2, float *a3, size_t __sz)
{
  char *v6;
  _BYTE *v7;
  float v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    v7 = (_BYTE *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = (int)v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1E062E26C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<MIL::Passes::`anonymous namespace'::ProcessSparsifiedTensor(MIL::MILContext &,MIL::ValueInference::Tensor<float> const&,MIL::IRDataType)::$_0,std::allocator<MIL::Passes::`anonymous namespace'::ProcessSparsifiedTensor(MIL::MILContext &,MIL::ValueInference::Tensor<float> const&,MIL::IRDataType)::$_0>,float ()(float)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<MIL::Passes::`anonymous namespace'::ProcessSparsifiedTensor(MIL::MILContext &,MIL::ValueInference::Tensor<float> const&,MIL::IRDataType)::$_0,std::allocator<MIL::Passes::`anonymous namespace'::ProcessSparsifiedTensor(MIL::MILContext &,MIL::ValueInference::Tensor<float> const&,MIL::IRDataType)::$_0>,float ()(float)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1EA99BCD0;
  return result;
}

void std::__function::__func<MIL::Passes::`anonymous namespace'::ProcessSparsifiedTensor(MIL::MILContext &,MIL::ValueInference::Tensor<float> const&,MIL::IRDataType)::$_0,std::allocator<MIL::Passes::`anonymous namespace'::ProcessSparsifiedTensor(MIL::MILContext &,MIL::ValueInference::Tensor<float> const&,MIL::IRDataType)::$_0>,float ()(float)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1EA99BCD0;
}

float std::__function::__func<MIL::Passes::`anonymous namespace'::ProcessSparsifiedTensor(MIL::MILContext &,MIL::ValueInference::Tensor<float> const&,MIL::IRDataType)::$_0,std::allocator<MIL::Passes::`anonymous namespace'::ProcessSparsifiedTensor(MIL::MILContext &,MIL::ValueInference::Tensor<float> const&,MIL::IRDataType)::$_0>,float ()(float)>::operator()(uint64_t a1, float *a2)
{
  float result;

  result = 0.0;
  if (*a2 != 0.0)
    return 1.0;
  return result;
}

uint64_t std::__function::__func<MIL::Passes::`anonymous namespace'::ProcessSparsifiedTensor(MIL::MILContext &,MIL::ValueInference::Tensor<float> const&,MIL::IRDataType)::$_0,std::allocator<MIL::Passes::`anonymous namespace'::ProcessSparsifiedTensor(MIL::MILContext &,MIL::ValueInference::Tensor<float> const&,MIL::IRDataType)::$_0>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Passes::`anonymous namespace'::ProcessSparsifiedTensor(MIL::MILContext &,MIL::ValueInference::Tensor<float> const&,MIL::IRDataType)::$_0,std::allocator<MIL::Passes::`anonymous namespace'::ProcessSparsifiedTensor(MIL::MILContext &,MIL::ValueInference::Tensor<float> const&,MIL::IRDataType)::$_0>,float ()(float)>::target_type()
{
}

char *std::vector<unsigned int>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  char *v6;
  _DWORD *v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = (_DWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1E062E390(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<unsigned long long>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::vector<unsigned long long>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void std::vector<MIL::Passes::BlockInfo>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    v9 = &v6[16 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void std::__throw_bad_optional_access[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE5048] + 16;
  __cxa_throw(exception, MEMORY[0x1E0DE4E90], MEMORY[0x1E0DE4380]);
}

unint64_t MIL::Passes::`anonymous namespace'::FindClosestClusterId(float **a1, float ***a2)
{
  float **v4;
  float **v5;
  float *v6;
  float v7;
  float v8;
  uint64_t v9;
  unint64_t v10;
  float *v11;
  float v12;
  float v13;
  float v14;
  float *v15;
  float v16;
  uint64_t v17;
  unint64_t v18;
  float *v19;
  float v20;
  float v21;
  float v22;
  uint64_t v23;

  v4 = std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::vector<float> const*>,std::__wrap_iter<std::vector<float> const*>,std::vector<float>,std::__identity,std::__less<void,void>>(*a2, a2[1], a1);
  v5 = *a2;
  if (a2[1] == v4)
    return 0xAAAAAAAAAAAAAAABLL * (v4 - v5) - 1;
  if (v5 == v4)
    return 0;
  v6 = *v4;
  v7 = 0.0;
  v8 = 0.0;
  v9 = (char *)v4[1] - (char *)*v4;
  if (v9)
  {
    v10 = v9 >> 2;
    v11 = *a1;
    if (v10 <= 1)
      v10 = 1;
    do
    {
      v12 = *v6++;
      v13 = v12;
      v14 = *v11++;
      v8 = v8 + (float)((float)(v13 - v14) * (float)(v13 - v14));
      --v10;
    }
    while (v10);
  }
  v15 = *(v4 - 3);
  v16 = sqrtf(v8);
  v17 = (char *)*(v4 - 2) - (char *)v15;
  if (v17)
  {
    v18 = v17 >> 2;
    v19 = *a1;
    if (v18 <= 1)
      v18 = 1;
    v7 = 0.0;
    do
    {
      v20 = *v15++;
      v21 = v20;
      v22 = *v19++;
      v7 = v7 + (float)((float)(v21 - v22) * (float)(v21 - v22));
      --v18;
    }
    while (v18);
  }
  if (v16 >= sqrtf(v7))
    v23 = (char *)(v4 - 3) - (char *)v5;
  else
    v23 = (char *)v4 - (char *)v5;
  return 0xAAAAAAAAAAAAAAABLL * (v23 >> 3);
}

_QWORD *std::vector<std::vector<float>>::vector(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = 3 * a2;
    v8 = &v6[3 * a2];
    v9 = 8 * v7;
    do
    {
      *v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v6, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_1E062E6C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::vector<float> const*>,std::__wrap_iter<std::vector<float> const*>>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float> const*,std::vector<float> const*,std::vector<float>*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1E062E74C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float> const*,std::vector<float> const*,std::vector<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1E062E808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  if (v1 != v2)
  {
    v3 = **(_QWORD **)(a1 + 16);
    do
    {
      v5 = *(void **)(v3 - 24);
      v3 -= 24;
      v4 = v5;
      if (v5)
      {
        *(_QWORD *)(v1 - 16) = v4;
        operator delete(v4);
      }
      v1 = v3;
    }
    while (v3 != v2);
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> *,std::vector<float> *,std::vector<float> *>(int a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v5;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if ((char *)v5 != a4)
        std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(a4, *(char **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 2);
      v5 += 24;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

char *std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<float>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

uint64_t *std::__sample[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::vector<float> const*>,std::__wrap_iter<std::vector<float> const*>,std::back_insert_iterator<std::vector<std::vector<float>>>,long,std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v12[2];

  v6 = (a2 - a1) / 24;
  if (v6 >= a4)
    v7 = a4;
  else
    v7 = (a2 - a1) / 24;
  if (v7)
  {
    v9 = a1;
    v10 = (uint64_t *)(v6 - 1);
    do
    {
      v12[0] = 0;
      v12[1] = v10;
      if (std::uniform_int_distribution<long>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)v12, a5, v12) < v7)
      {
        v12[0] = a3;
        std::back_insert_iterator<std::vector<std::vector<float>>>::operator=[abi:ne180100](v12, v9);
        --v7;
      }
      v9 += 24;
      v10 = (uint64_t *)((char *)v10 - 1);
    }
    while (v7);
  }
  return a3;
}

uint64_t **std::back_insert_iterator<std::vector<std::vector<float>>>::operator=[abi:ne180100](uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v3 = *a1;
  v5 = (*a1)[1];
  v4 = (*a1)[2];
  v6 = *a1;
  if (v5 >= v4)
  {
    v7 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(v6, a2);
  }
  else
  {
    std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)v6, a2);
    v7 = v5 + 24;
  }
  v3[1] = v7;
  return a1;
}

uint64_t std::uniform_int_distribution<long>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE v10[64];

  result = a3[1];
  v4 = result - *a3;
  if (result != *a3)
  {
    v5 = v4 + 1;
    if (v4 == -1)
    {
      std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__independent_bits_engine((uint64_t)v10, a2, 0x40uLL);
      return std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval((uint64_t)v10);
    }
    else
    {
      v7 = __clz(v5);
      v8 = 63;
      if (((v5 << v7) & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v8 = 64;
      std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__independent_bits_engine((uint64_t)v10, a2, v8 - v7);
      do
        v9 = std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval((uint64_t)v10);
      while (v9 >= v5);
      return *a3 + v9;
    }
  }
  return result;
}

uint64_t std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__independent_bits_engine(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  if ((a3 & 0x1F) != 0)
    v3 = (a3 >> 5) + 1;
  else
    v3 = a3 >> 5;
  v4 = a3 / v3;
  *(_QWORD *)(result + 16) = a3 / v3;
  *(_QWORD *)(result + 24) = v3;
  v5 = (-1 << (a3 / v3)) & 0x100000000;
  if (a3 / v3 >= 0x40)
    v5 = 0;
  *(_QWORD *)(result + 40) = v5;
  if ((v5 ^ 0x100000000) > v5 / v3)
  {
    ++v3;
    v4 = a3 / v3;
    *(_QWORD *)(result + 16) = a3 / v3;
    *(_QWORD *)(result + 24) = v3;
    if (a3 / v3 > 0x3F)
    {
      v6 = 0;
      *(_QWORD *)(result + 32) = v3 + v4 * v3 - a3;
      *(_QWORD *)(result + 40) = 0;
      goto LABEL_13;
    }
    *(_QWORD *)(result + 40) = (-1 << v4) & 0x100000000;
  }
  *(_QWORD *)(result + 32) = v3 + a3 / v3 * v3 - a3;
  if (v4 > 0x3E)
    v6 = 0;
  else
    v6 = 0x80000000uLL >> v4 << (v4 + 1);
LABEL_13:
  *(_QWORD *)(result + 48) = v6;
  v7 = 0xFFFFFFFF >> -(char)v4;
  if (!v4)
    v7 = 0;
  if (v4 >= 0x1F)
    v8 = -1;
  else
    v8 = 0xFFFFFFFF >> ~(_BYTE)v4;
  *(_DWORD *)(result + 56) = v7;
  *(_DWORD *)(result + 60) = v8;
  return result;
}

uint64_t std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v8;
  unint64_t v9;
  uint64_t v10;

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = 0;
    v3 = 0;
    do
    {
      do
        v4 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(*(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> **)a1);
      while (*(_QWORD *)(a1 + 40) <= (unint64_t)v4);
      v5 = *(_QWORD *)(a1 + 16);
      if (v5 >= 0x40)
        v6 = 0;
      else
        v6 = v2 << v5;
      v2 = v6 + (*(_DWORD *)(a1 + 56) & v4);
      ++v3;
      v7 = *(_QWORD *)(a1 + 32);
    }
    while (v3 < v7);
  }
  else
  {
    v2 = 0;
    v7 = 0;
  }
  for (; v7 < *(_QWORD *)(a1 + 24); ++v7)
  {
    do
      v8 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(*(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> **)a1);
    while (*(_QWORD *)(a1 + 48) <= (unint64_t)v8);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9 >= 0x3F)
      v10 = 0;
    else
      v10 = v2 << (v9 + 1);
    v2 = v10 + (*(_DWORD *)(a1 + 60) & v8);
  }
  return v2;
}

std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this)
{
  size_t i;
  size_t v2;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3;

  i = this->__i_;
  v2 = (i + 1) % 0x270;
  v3 = this->__x_[(i + 397) % 0x270] ^ ((this->__x_[v2] & 0x7FFFFFFE | this->__x_[i] & 0x80000000) >> 1) ^ ((int)(this->__x_[v2] << 31) >> 31) & 0x9908B0DF;
  this->__x_[i] = v3;
  this->__i_ = v2;
  LODWORD(i) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return ((_DWORD)i << 15) & 0xEFC60000 ^ i ^ ((((_DWORD)i << 15) & 0xEFC60000 ^ i) >> 18);
}

_QWORD *std::vector<float>::vector(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_DWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1E062EE44(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::discrete_distribution<int>::param_type::param_type[abi:ne180100]<std::__wrap_iter<float *>>(uint64_t a1, float *a2, float *a3)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>((char *)a1, a2, a3, a3 - a2);
  std::discrete_distribution<int>::param_type::__init((double **)a1);
  return a1;
}

void sub_1E062EE9C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::discrete_distribution<int>::param_type::__init(double **a1)
{
  double *v1;
  double *v2;
  uint64_t v4;
  double v5;
  double *v6;
  double v7;
  double *v8;
  uint64_t v9;
  double *v10;
  double *v11;
  double v12;
  double *v13;
  double v14;
  double *v15;
  double *v16;
  __int128 v17;

  v1 = *a1;
  v2 = a1[1];
  if (*a1 != v2)
  {
    if ((unint64_t)((char *)v2 - (char *)v1) < 9)
    {
      a1[1] = v1;
      std::vector<double>::shrink_to_fit((uint64_t)a1);
    }
    else
    {
      v4 = v2 - v1;
      v5 = 0.0;
      v6 = *a1;
      do
      {
        v7 = *v6++;
        v5 = v5 + v7;
      }
      while (v6 != v2);
      while (v1 < v2)
      {
        *v1 = *v1 / v5;
        ++v1;
      }
      std::vector<double>::vector(&v16, v4 - 1);
      v8 = *a1;
      v9 = (uint64_t)(a1[1] - 1);
      v10 = v16;
      if (*a1 != (double *)v9)
      {
        v11 = v8 + 1;
        v12 = *v8;
        *v16 = *v8;
        if (v8 + 1 != (double *)v9)
        {
          v13 = v10 + 1;
          do
          {
            v14 = *v11++;
            v12 = v12 + v14;
            *v13++ = v12;
          }
          while (v11 != (double *)v9);
        }
      }
      *a1 = v10;
      v15 = a1[2];
      *(_OWORD *)(a1 + 1) = v17;
      v16 = v8;
      *((_QWORD *)&v17 + 1) = v15;
      if (v8)
      {
        *(_QWORD *)&v17 = v8;
        operator delete(v8);
      }
    }
  }
}

char *std::vector<double>::__init_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(char *result, float *a2, float *a3, unint64_t a4)
{
  char *v6;
  double *v7;
  float v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    v7 = (double *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1E062F008(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<double>::shrink_to_fit(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _BYTE *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = a1 + 16;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(char **)a1;
  v5 = *(_BYTE **)(a1 + 8);
  v6 = (v5 - v4) >> 3;
  if (v6 < (v3 - (uint64_t)v4) >> 3)
  {
    if (v5 == v4)
    {
      v11 = 0;
      v9 = 8 * v6;
    }
    else
    {
      v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v2, v6);
      v4 = *(char **)a1;
      v8 = *(char **)(a1 + 8);
      v9 = (uint64_t)&v7[8 * v6];
      v11 = &v7[8 * v10];
      if (v8 != *(char **)a1)
      {
        v12 = v9;
        do
        {
          v13 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *(_QWORD *)(v12 - 8) = v13;
          v12 -= 8;
        }
        while (v8 != v4);
        goto LABEL_9;
      }
    }
    v12 = v9;
LABEL_9:
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v11;
    if (v4)
      operator delete(v4);
  }
}

_QWORD *std::vector<double>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1E062F130(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t std::discrete_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>(int a1, std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this, double **a3)
{
  double *v5;
  double *v6;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v7;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v8;
  unint64_t v9;
  unint64_t v10;
  double *v11;
  double *v12;
  double v13;

  v5 = *a3;
  v6 = a3[1];
  v7 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(this);
  v8 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(this);
  if (v6 != v5)
  {
    v9 = v6 - v5;
    do
    {
      v10 = v9 >> 1;
      v11 = &v5[v9 >> 1];
      v13 = *v11;
      v12 = v11 + 1;
      v9 += ~(v9 >> 1);
      if (((double)v7 + (double)v8 * 4294967300.0) * 5.42101086e-20 + 0.0 < v13)
        v9 = v10;
      else
        v5 = v12;
    }
    while (v9);
    v6 = v5;
  }
  return (unint64_t)((char *)v6 - (char *)*a3) >> 3;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *,false>(uint64_t *a1, std::vector<unsigned int> *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  char v20;
  BOOL v21;
  uint64_t v22;
  float *v23;
  uint64_t v24;
  float v25;
  float v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::vector<unsigned int>::pointer begin;
  float *v32;
  float v33;
  unsigned int *v35;
  unsigned int *v36;

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *>(std::vector<unsigned int> *__c, std::vector<unsigned int> *a2)
{
  std::vector<unsigned int> *v4;
  std::vector<unsigned int> *v5;
  __n128 *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  float *v10;
  float *begin;
  float *v12;
  float v13;
  unsigned int *v15;
  std::vector<unsigned int> *v16;
  __n128 *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  float *v21;
  float v22;
  float v23;
  BOOL v24;
  unsigned int *v25;

  if (__c != a2)
  {
    v4 = __c + 1;
    if (&__c[1] != a2)
    {
      v5 = __c;
      do
      {
        v6 = (__n128 *)v5;
        v5 = v4;
        v7 = v6->n128_u64[0];
        v8 = v6->n128_u64[1];
        if (v6->n128_u64[0] != v8)
        {
          v9 = 0;
          v10 = (float *)v6[2].n128_u64[0];
          begin = (float *)v5->__begin_;
          while (1)
          {
            v12 = &begin[v9];
            if (&begin[v9] == v10)
              break;
            v13 = *(float *)(v7 + v9 * 4);
            if (*v12 < v13)
              break;
            ++v9;
            if (v13 < *v12 || v9 * 4 + v7 == v8)
              goto LABEL_32;
          }
          v15 = (unsigned int *)v6[2].n128_u64[1];
          v5->__begin_ = 0;
          v5->__end_ = 0;
          v5->__end_cap_.__value_ = 0;
          std::vector<float>::__move_assign((uint64_t)v5, v6);
          v16 = __c;
          if (v6 != (__n128 *)__c)
          {
            v17 = v6;
            while (1)
            {
              v19 = v17[-2].n128_u64[1];
              v18 = v17[-1].n128_u64[0];
              v17 = (__n128 *)((char *)v17 - 24);
              if (v19 == v18)
                break;
              v20 = v19 + 4;
              v21 = begin;
              while (v21 != v10)
              {
                v22 = *v21;
                v23 = *(float *)(v20 - 4);
                if (*v21 < v23)
                  break;
                ++v21;
                v24 = v23 < v22 || v20 == v18;
                v20 += 4;
                if (v24)
                  goto LABEL_28;
              }
              std::vector<float>::__move_assign((uint64_t)v6, v17);
              v6 = v17;
              if (v17 == (__n128 *)__c)
              {
                v16 = __c;
                goto LABEL_29;
              }
            }
LABEL_28:
            v16 = (std::vector<unsigned int> *)v6;
          }
LABEL_29:
          v25 = v16->__begin_;
          if (v16->__begin_)
          {
            v16->__end_ = v25;
            operator delete(v25);
          }
          v16->__begin_ = (std::vector<unsigned int>::pointer)begin;
          v16->__end_ = (std::vector<unsigned int>::pointer)v10;
          v16->__end_cap_.__value_ = v15;
        }
LABEL_32:
        v4 = v5 + 1;
      }
      while (&v5[1] != a2);
    }
  }
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *>(std::vector<unsigned int> *__c, std::vector<unsigned int> *a2)
{
  std::vector<unsigned int> *v3;
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  float *v8;
  float *begin;
  float *v10;
  float v11;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  float *v18;
  float v19;
  float v20;
  BOOL v21;
  void *v22;

  if (__c != a2)
  {
    v3 = __c;
LABEL_3:
    while (&v3[1] != a2)
    {
      v4 = (__n128 *)v3++;
      v5 = v4->n128_u64[0];
      v6 = v4->n128_u64[1];
      if (v4->n128_u64[0] != v6)
      {
        v7 = 0;
        v8 = (float *)v4[2].n128_u64[0];
        begin = (float *)v3->__begin_;
        while (1)
        {
          v10 = &begin[v7];
          if (&begin[v7] == v8)
            break;
          v11 = *(float *)(v5 + v7 * 4);
          if (*v10 < v11)
            break;
          ++v7;
          if (v11 < *v10 || v7 * 4 + v5 == v6)
            goto LABEL_3;
        }
        v13 = v4[2].n128_u64[1];
        v3->__begin_ = 0;
        v3->__end_ = 0;
        v3->__end_cap_.__value_ = 0;
        v14 = (uint64_t)v3;
        while (1)
        {
          std::vector<float>::__move_assign(v14, v4);
          v16 = v4[-2].n128_u64[1];
          v15 = v4[-1].n128_u64[0];
          if (v16 == v15)
            break;
          v14 = (uint64_t)v4;
          v4 = (__n128 *)((char *)v4 - 24);
          v17 = v16 + 4;
          v18 = begin;
          while (v18 != v8)
          {
            v19 = *v18;
            v20 = *(float *)(v17 - 4);
            if (*v18 < v20)
              break;
            ++v18;
            v21 = v20 < v19 || v17 == v15;
            v17 += 4;
            if (v21)
            {
              v4 = (__n128 *)v14;
              goto LABEL_25;
            }
          }
        }
LABEL_25:
        v22 = (void *)v4->n128_u64[0];
        if (v4->n128_u64[0])
        {
          v4->n128_u64[1] = (unint64_t)v22;
          operator delete(v22);
        }
        v4->n128_u64[0] = (unint64_t)begin;
        v4->n128_u64[1] = (unint64_t)v8;
        v4[1].n128_u64[0] = v13;
      }
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  float v9;
  uint64_t v11;
  uint64_t v12;
  float *v13;
  float v14;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  float v20;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float *v29;
  float v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float *v39;
  float v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v3 = *a1;
  v4 = a1[1];
  v5 = *a2;
  v6 = a2[1];
  if (*a1 != v4)
  {
    v7 = 0;
    while (1)
    {
      v8 = (float *)(v5 + v7);
      if (v5 + v7 == v6)
        break;
      v9 = *(float *)(v3 + v7);
      if (*v8 < v9)
        break;
      v7 += 4;
      if (v9 < *v8 || v7 + v3 == v4)
        goto LABEL_10;
    }
    if (v5 != v6)
    {
      v17 = 0;
      v18 = *a3;
      while (1)
      {
        v19 = (float *)(v18 + v17);
        if (v18 + v17 == a3[1])
          break;
        v20 = *(float *)(v5 + v17);
        if (*v19 < v20)
          break;
        v17 += 4;
        if (v20 < *v19 || v17 + v5 == v6)
          goto LABEL_29;
      }
      *a1 = v18;
      *a3 = v3;
      v42 = a1[1];
      a1[1] = a3[1];
      a3[1] = v42;
      v23 = a1 + 2;
      v34 = a3 + 2;
      result = 1;
      goto LABEL_53;
    }
LABEL_29:
    *a1 = v5;
    *a2 = v3;
    v22 = a1[1];
    a1[1] = a2[1];
    a2[1] = v22;
    v23 = a2 + 2;
    v24 = a1[2];
    a1[2] = a2[2];
    a2[2] = v24;
    v25 = *a2;
    v26 = a2[1];
    if (*a2 != v26)
    {
      v27 = 0;
      v28 = *a3;
      while (1)
      {
        v29 = (float *)(v28 + v27);
        if (v28 + v27 == a3[1])
          break;
        v30 = *(float *)(v25 + v27);
        if (*v29 < v30)
          break;
        v27 += 4;
        if (v30 < *v29 || v27 + v25 == v26)
          return 1;
      }
      *a2 = v28;
      *a3 = v25;
      v43 = a2[1];
      a2[1] = a3[1];
      a3[1] = v43;
      v34 = a3 + 2;
      goto LABEL_52;
    }
    return 1;
  }
LABEL_10:
  if (v5 == v6)
    return 0;
  v11 = 0;
  v12 = *a3;
  while (1)
  {
    v13 = (float *)(v12 + v11);
    if (v12 + v11 == a3[1])
      break;
    v14 = *(float *)(v5 + v11);
    if (*v13 < v14)
      break;
    v11 += 4;
    if (v14 < *v13 || v11 + v5 == v6)
      return 0;
  }
  *a2 = v12;
  *a3 = v5;
  v32 = a2[1];
  a2[1] = a3[1];
  a3[1] = v32;
  v34 = a2 + 2;
  v33 = a2[2];
  a2[2] = a3[2];
  a3[2] = v33;
  v35 = *a1;
  v36 = a1[1];
  if (*a1 == v36)
    return 1;
  v37 = 0;
  v38 = *a2;
  while (1)
  {
    v39 = (float *)(v38 + v37);
    if (v38 + v37 == a2[1])
      break;
    v40 = *(float *)(v35 + v37);
    if (*v39 < v40)
      break;
    v37 += 4;
    if (v40 < *v39 || v37 + v35 == v36)
      return 1;
  }
  *a1 = v38;
  *a2 = v35;
  v44 = a1[1];
  a1[1] = a2[1];
  a2[1] = v44;
  v23 = a1 + 2;
LABEL_52:
  result = 2;
LABEL_53:
  v45 = *v23;
  *v23 = *v34;
  *v34 = v45;
  return result;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<float> *,std::__less<void,void> &>(uint64_t a1, unint64_t a2)
{
  float *v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  float v8;
  float v9;
  BOOL v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  float v17;
  float v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float *v23;
  float v24;
  float v25;
  BOOL v26;
  uint64_t *v27;
  uint64_t v28;
  float *v29;
  float v30;
  float v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float *v39;
  float v40;
  uint64_t v42;
  float *v43;
  float v44;
  uint64_t v46;
  void **v47;
  void *v48;
  __int128 v50;

  v2 = *(float **)a1;
  v3 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  v5 = *(_QWORD *)(a2 - 24);
  v4 = *(_QWORD *)(a2 - 16);
  if (v5 == v4)
  {
LABEL_10:
    v11 = (uint64_t *)(a1 + 24);
    if (a1 + 24 < a2)
    {
      v12 = (_QWORD *)a1;
      while (1)
      {
        v14 = v12[3];
        v13 = v12[4];
        v12 = v11;
        if (v14 != v13)
          break;
LABEL_21:
        v11 += 3;
        if ((unint64_t)(v12 + 3) >= a2)
          goto LABEL_34;
      }
      v15 = v14 + 4;
      v16 = v2;
      while (v16 != (float *)v3)
      {
        v17 = *v16;
        v18 = *(float *)(v15 - 4);
        if (*v16 < v18)
          break;
        ++v16;
        v19 = v18 < v17 || v15 == v13;
        v15 += 4;
        if (v19)
          goto LABEL_21;
      }
    }
  }
  else
  {
    v6 = v5 + 4;
    v7 = v2;
    while (v7 != (float *)v3)
    {
      v8 = *v7;
      v9 = *(float *)(v6 - 4);
      if (*v7 < v9)
        break;
      ++v7;
      v10 = v9 < v8 || v6 == v4;
      v6 += 4;
      if (v10)
        goto LABEL_10;
    }
    v11 = (uint64_t *)a1;
    do
    {
LABEL_24:
      v21 = v11[3];
      v20 = v11[4];
      v11 += 3;
    }
    while (v21 == v20);
    v22 = v21 + 4;
    v23 = v2;
    while (v23 != (float *)v3)
    {
      v24 = *v23;
      v25 = *(float *)(v22 - 4);
      if (*v23 < v25)
        break;
      ++v23;
      v26 = v25 < v24 || v22 == v20;
      v22 += 4;
      if (v26)
        goto LABEL_24;
    }
  }
LABEL_34:
  if ((unint64_t)v11 < a2)
    v27 = (uint64_t *)(a2 - 24);
  else
    v27 = (uint64_t *)a2;
  if ((unint64_t)v11 < a2 && v5 != v4)
  {
    v27 = (uint64_t *)(a2 - 24);
    do
    {
      v28 = v5 + 4;
      v29 = v2;
      while (v29 != (float *)v3)
      {
        v30 = *v29;
        v31 = *(float *)(v28 - 4);
        if (*v29 < v31)
          break;
        ++v29;
        v32 = v31 < v30 || v28 == v4;
        v28 += 4;
        if (v32)
          goto LABEL_50;
      }
      v5 = *(v27 - 3);
      v4 = *(v27 - 2);
      v27 -= 3;
    }
    while (v5 != v4);
  }
LABEL_50:
  if (v11 < v27)
  {
    v33 = *v11;
    v34 = *v27;
    do
    {
      *v11 = v34;
      *v27 = v33;
      v35 = v11[1];
      v11[1] = v27[1];
      v27[1] = v35;
      v36 = v11[2];
      v11[2] = v27[2];
      v27[2] = v36;
      do
      {
LABEL_53:
        v33 = v11[3];
        v37 = v11[4];
        v11 += 3;
      }
      while (v33 == v37);
      v38 = 0;
      while (1)
      {
        v39 = &v2[v38];
        if (&v2[v38] == (float *)v3)
          break;
        v40 = *(float *)(v33 + v38 * 4);
        if (*v39 < v40)
          break;
        ++v38;
        if (v40 < *v39 || v38 * 4 + v33 == v37)
          goto LABEL_53;
      }
      while (1)
      {
        v34 = *(v27 - 3);
        v46 = *(v27 - 2);
        v27 -= 3;
        if (v34 == v46)
          break;
        v42 = 0;
        while (1)
        {
          v43 = &v2[v42];
          if (&v2[v42] == (float *)v3)
            break;
          v44 = *(float *)(v34 + v42 * 4);
          if (*v43 < v44)
            break;
          ++v42;
          if (v44 < *v43 || v42 * 4 + v34 == v46)
            goto LABEL_73;
        }
      }
LABEL_73:
      ;
    }
    while (v11 < v27);
  }
  v47 = (void **)(v11 - 3);
  v50 = v3;
  if (v11 - 3 != (uint64_t *)a1)
  {
    std::vector<float>::__move_assign(a1, (__n128 *)(v11 - 3));
    v3 = v50;
  }
  v48 = *v47;
  if (*v47)
  {
    *(v11 - 2) = (uint64_t)v48;
    operator delete(v48);
    v3 = v50;
  }
  *(v11 - 3) = (uint64_t)v2;
  *((_OWORD *)v11 - 1) = v3;
  return v11;
}

float **std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<float> *,std::__less<void,void> &>(uint64_t a1, float **a2)
{
  float **v2;
  float *v3;
  __int128 v4;
  float *v5;
  unint64_t v6;
  uint64_t v7;
  float **v8;
  float *v9;
  float *v10;
  float v11;
  float v12;
  float **v14;
  float *v15;
  float *v16;
  float *v17;
  float v18;
  float v19;
  float **v21;
  float *v22;
  float *v23;
  float v24;
  float v25;
  float **v27;
  float *v28;
  float **v29;
  float *v30;
  float *v31;
  float *v32;
  float **v33;
  float *v34;
  float *v35;
  float v36;
  float v37;
  float **v39;
  uint64_t v40;
  float *v41;
  float *v42;
  float v43;
  void **v45;
  float *v46;
  __int128 v48;

  v2 = a2;
  v3 = *(float **)a1;
  v4 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  v48 = v4;
  v5 = (float *)v4;
  v6 = a1 + 24;
  if (v3 == (float *)v4)
    goto LABEL_24;
  v7 = a1;
LABEL_3:
  v8 = (float **)v6;
  v9 = *(float **)(v7 + 24);
  v10 = v3 + 1;
  do
  {
    if (v9 == *(float **)(v7 + 32) || (v11 = *v9, v12 = *(v10 - 1), *v9 < v12))
    {
      v6 += 24;
      v7 = (uint64_t)v8;
      goto LABEL_3;
    }
    ++v9;
  }
  while (v12 >= v11 && v10++ != v5);
  if (v7 == a1)
  {
LABEL_24:
    if (v6 >= (unint64_t)a2)
    {
      v8 = (float **)v6;
    }
    else
    {
      while (1)
      {
        v21 = v2 - 3;
        if (v3 != v5)
          break;
LABEL_34:
        v2 -= 3;
        if (v6 >= (unint64_t)v21)
          goto LABEL_35;
      }
      v22 = *v21;
      v23 = v3 + 1;
      while (v22 != *(v2 - 2))
      {
        v24 = *v22;
        v25 = *(v23 - 1);
        if (*v22 < v25)
          break;
        ++v22;
        if (v25 < v24 || v23++ == v5)
          goto LABEL_34;
      }
LABEL_35:
      v8 = (float **)v6;
      v2 = v21;
    }
  }
  else
  {
    do
    {
LABEL_14:
      v14 = v2;
      v2 -= 3;
    }
    while (v3 == v5);
    v15 = *(v14 - 2);
    v16 = *v2;
    v17 = v3 + 1;
    while (v16 != v15)
    {
      v18 = *v16;
      v19 = *(v17 - 1);
      if (*v16 < v19)
        break;
      ++v16;
      if (v19 < v18 || v17++ == v5)
        goto LABEL_14;
    }
  }
  v27 = v8;
  if (v8 < v2)
  {
    v28 = *v2;
    v27 = v8;
    v29 = v2;
    do
    {
      v30 = *v27;
      *v27 = v28;
      *v29 = v30;
      v31 = v27[1];
      v27[1] = v29[1];
      v29[1] = v31;
      v32 = v27[2];
      v27[2] = v29[2];
      v29[2] = v32;
      v33 = v27 + 3;
      if (v3 != v5)
      {
        while (1)
        {
          v34 = v27[3];
          v35 = v3 + 1;
          while (v34 != v27[4])
          {
            v36 = *v34;
            v37 = *(v35 - 1);
            if (*v34 < v37)
              break;
            ++v34;
            if (v37 < v36 || v35++ == v5)
              goto LABEL_50;
          }
          v27 = v33;
          v33 += 3;
        }
      }
LABEL_50:
      v27 = v33;
      do
      {
LABEL_51:
        v39 = v29;
        v29 -= 3;
      }
      while (v3 == v5);
      v40 = 0;
      v41 = *(v39 - 2);
      v28 = *v29;
      while (1)
      {
        v42 = &v28[v40];
        if (&v28[v40] == v41)
          break;
        v43 = v3[v40];
        if (*v42 < v43)
          break;
        ++v40;
        if (v43 < *v42 || &v3[v40] == v5)
          goto LABEL_51;
      }
    }
    while (v27 < v29);
  }
  v45 = (void **)(v27 - 3);
  if (v27 - 3 != (float **)a1)
    std::vector<float>::__move_assign(a1, (__n128 *)(v27 - 3));
  v46 = (float *)*v45;
  if (*v45)
  {
    *(v27 - 2) = v46;
    operator delete(v46);
  }
  *(v27 - 3) = v3;
  *((_OWORD *)v27 - 1) = v48;
  return v27 - 3;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  float v11;
  __n128 *v13;
  __n128 *v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  float *v19;
  float *v20;
  float *v21;
  float v22;
  unint64_t v24;
  __n128 *v25;
  __n128 *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  float *v30;
  float v31;
  float v32;
  BOOL v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;

  v4 = 0xAAAAAAAAAAAAAAABLL * (a2 - a1);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = *a1;
      v7 = a1[1];
      if (*a1 != v7)
      {
        v8 = 0;
        v9 = *(a2 - 3);
        do
        {
          v10 = (float *)(v9 + v8);
          if (v9 + v8 == *(a2 - 2) || (v11 = *(float *)(v6 + v8), *v10 < v11))
          {
            *a1 = v9;
            *(a2 - 3) = v6;
            v35 = a1[1];
            a1[1] = *(a2 - 2);
            *(a2 - 2) = v35;
            v36 = a1[2];
            a1[2] = *(a2 - 1);
            *(a2 - 1) = v36;
            return 1;
          }
          v8 += 4;
        }
        while (v11 >= *v10 && v8 + v6 != v7);
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *>(a1, a1 + 3, a2 - 3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *>(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *>(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return 1;
    default:
      v13 = (__n128 *)(a1 + 6);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *>(a1, a1 + 3, a1 + 6);
      v14 = (__n128 *)(a1 + 9);
      if (a1 + 9 == a2)
        return 1;
      v15 = 0;
      break;
  }
  while (1)
  {
    v16 = v13->n128_u64[0];
    v17 = v13->n128_u64[1];
    if (v13->n128_u64[0] != v17)
    {
      v18 = 0;
      v20 = (float *)v14->n128_u64[0];
      v19 = (float *)v14->n128_u64[1];
      while (1)
      {
        v21 = &v20[v18];
        if (&v20[v18] == v19)
          break;
        v22 = *(float *)(v16 + v18 * 4);
        if (*v21 < v22)
          break;
        ++v18;
        if (v22 < *v21 || v18 * 4 + v16 == v17)
          goto LABEL_42;
      }
      v24 = v14[1].n128_u64[0];
      v14->n128_u64[0] = 0;
      v14->n128_u64[1] = 0;
      v14[1].n128_u64[0] = 0;
      std::vector<float>::__move_assign((uint64_t)v14, v13);
      v25 = (__n128 *)a1;
      if (v13 != (__n128 *)a1)
      {
        v26 = v13;
        while (1)
        {
          v28 = v26[-2].n128_u64[1];
          v27 = v26[-1].n128_u64[0];
          v26 = (__n128 *)((char *)v26 - 24);
          if (v28 == v27)
            break;
          v29 = v28 + 4;
          v30 = v20;
          while (v30 != v19)
          {
            v31 = *v30;
            v32 = *(float *)(v29 - 4);
            if (*v30 < v32)
              break;
            ++v30;
            v33 = v32 < v31 || v29 == v27;
            v29 += 4;
            if (v33)
              goto LABEL_38;
          }
          std::vector<float>::__move_assign((uint64_t)v13, v26);
          v13 = v26;
          if (v26 == (__n128 *)a1)
          {
            v25 = (__n128 *)a1;
            goto LABEL_39;
          }
        }
LABEL_38:
        v25 = v13;
      }
LABEL_39:
      v34 = (void *)v25->n128_u64[0];
      if (v25->n128_u64[0])
      {
        v25->n128_u64[1] = (unint64_t)v34;
        operator delete(v34);
      }
      v25->n128_u64[0] = (unint64_t)v20;
      v25->n128_u64[1] = (unint64_t)v19;
      v25[1].n128_u64[0] = v24;
      if (++v15 == 8)
        return &v14[1].n128_i8[8] == (__int8 *)a2;
    }
LABEL_42:
    v13 = v14;
    v14 = (__n128 *)((char *)v14 + 24);
    if (v14 == (__n128 *)a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float *v13;
  float v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float *v22;
  float v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float *v31;
  float v32;
  uint64_t v34;
  uint64_t v35;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *>(a1, a2, a3);
  v9 = *a3;
  v10 = a3[1];
  if (*a3 != v10)
  {
    v11 = 0;
    v12 = *a4;
    while (1)
    {
      v13 = (float *)(v12 + v11);
      if (v12 + v11 == a4[1])
        break;
      v14 = *(float *)(v9 + v11);
      if (*v13 < v14)
        break;
      v11 += 4;
      if (v14 < *v13 || v11 + v9 == v10)
        return result;
    }
    *a3 = v12;
    *a4 = v9;
    v16 = a3[1];
    a3[1] = a4[1];
    a4[1] = v16;
    v17 = a3[2];
    a3[2] = a4[2];
    a4[2] = v17;
    v18 = *a2;
    v19 = a2[1];
    if (*a2 != v19)
    {
      v20 = 0;
      v21 = *a3;
      while (1)
      {
        v22 = (float *)(v21 + v20);
        if (v21 + v20 == a3[1])
          break;
        v23 = *(float *)(v18 + v20);
        if (*v22 < v23)
          break;
        v20 += 4;
        if (v23 < *v22 || v20 + v18 == v19)
          return result;
      }
      *a2 = v21;
      *a3 = v18;
      v25 = a2[1];
      a2[1] = a3[1];
      a3[1] = v25;
      v26 = a2[2];
      a2[2] = a3[2];
      a3[2] = v26;
      v27 = *a1;
      v28 = a1[1];
      if (*a1 != v28)
      {
        v29 = 0;
        v30 = *a2;
        while (1)
        {
          v31 = (float *)(v30 + v29);
          if (v30 + v29 == a2[1])
            break;
          v32 = *(float *)(v27 + v29);
          if (*v31 < v32)
            break;
          v29 += 4;
          if (v32 < *v31 || v29 + v27 == v28)
            return result;
        }
        *a1 = v30;
        *a2 = v27;
        v34 = a1[1];
        a1[1] = a2[1];
        a2[1] = v34;
        v35 = a1[2];
        a1[2] = a2[2];
        a2[2] = v35;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  float v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float *v24;
  float v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float *v33;
  float v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float *v42;
  float v43;
  uint64_t v45;
  uint64_t v46;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *>(a1, a2, a3, a4);
  v11 = *a4;
  v12 = a4[1];
  if (*a4 != v12)
  {
    v13 = 0;
    v14 = *a5;
    while (1)
    {
      v15 = (float *)(v14 + v13);
      if (v14 + v13 == a5[1])
        break;
      v16 = *(float *)(v11 + v13);
      if (*v15 < v16)
        break;
      v13 += 4;
      if (v16 < *v15 || v13 + v11 == v12)
        return result;
    }
    *a4 = v14;
    *a5 = v11;
    v18 = a4[1];
    a4[1] = a5[1];
    a5[1] = v18;
    v19 = a4[2];
    a4[2] = a5[2];
    a5[2] = v19;
    v20 = *a3;
    v21 = a3[1];
    if (*a3 != v21)
    {
      v22 = 0;
      v23 = *a4;
      while (1)
      {
        v24 = (float *)(v23 + v22);
        if (v23 + v22 == a4[1])
          break;
        v25 = *(float *)(v20 + v22);
        if (*v24 < v25)
          break;
        v22 += 4;
        if (v25 < *v24 || v22 + v20 == v21)
          return result;
      }
      *a3 = v23;
      *a4 = v20;
      v27 = a3[1];
      a3[1] = a4[1];
      a4[1] = v27;
      v28 = a3[2];
      a3[2] = a4[2];
      a4[2] = v28;
      v29 = *a2;
      v30 = a2[1];
      if (*a2 != v30)
      {
        v31 = 0;
        v32 = *a3;
        while (1)
        {
          v33 = (float *)(v32 + v31);
          if (v32 + v31 == a3[1])
            break;
          v34 = *(float *)(v29 + v31);
          if (*v33 < v34)
            break;
          v31 += 4;
          if (v34 < *v33 || v31 + v29 == v30)
            return result;
        }
        *a2 = v32;
        *a3 = v29;
        v36 = a2[1];
        a2[1] = a3[1];
        a3[1] = v36;
        v37 = a2[2];
        a2[2] = a3[2];
        a3[2] = v37;
        v38 = *a1;
        v39 = a1[1];
        if (*a1 != v39)
        {
          v40 = 0;
          v41 = *a2;
          while (1)
          {
            v42 = (float *)(v41 + v40);
            if (v41 + v40 == a2[1])
              break;
            v43 = *(float *)(v38 + v40);
            if (*v42 < v43)
              break;
            v40 += 4;
            if (v43 < *v42 || v40 + v38 == v39)
              return result;
          }
          *a1 = v41;
          *a2 = v38;
          v45 = a1[1];
          a1[1] = a2[1];
          a2[1] = v45;
          v46 = a1[2];
          a1[2] = a2[2];
          a2[2] = v46;
        }
      }
    }
  }
  return result;
}

unsigned int **std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *,std::vector<float> *>(std::vector<unsigned int> *a1, std::vector<unsigned int> *a2, unsigned int **a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::vector<unsigned int> *v12;
  uint64_t v13;
  unsigned int **v14;
  std::vector<unsigned int>::pointer begin;
  unsigned int *end;
  uint64_t v17;
  unsigned int *v18;
  float *v19;
  float v20;
  unsigned int *v22;
  unsigned int *v23;
  unint64_t v24;

  if (a1 != a2)
  {
    v6 = (uint64_t)a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 25)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if ((unsigned int **)v6 != a3)
    {
      v14 = (unsigned int **)v6;
      do
      {
        begin = a1->__begin_;
        end = a1->__end_;
        if (a1->__begin_ != end)
        {
          v17 = 0;
          v18 = *v14;
          while (1)
          {
            v19 = (float *)&v18[v17];
            if (&v18[v17] == v14[1])
              break;
            v20 = *(float *)&begin[v17];
            if (*v19 < v20)
              break;
            ++v17;
            if (v20 < *v19 || &begin[v17] == end)
              goto LABEL_18;
          }
          *v14 = begin;
          a1->__begin_ = v18;
          v22 = v14[1];
          v14[1] = a1->__end_;
          a1->__end_ = v22;
          v23 = v14[2];
          v14[2] = a1->__end_cap_.__value_;
          a1->__end_cap_.__value_ = v23;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *>((uint64_t)a1, a4, v9, a1);
        }
LABEL_18:
        v14 += 3;
      }
      while (v14 != a3);
      v13 = (uint64_t)a3;
    }
    if (v8 >= 25)
    {
      v24 = v8 / 0x18uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::vector<float> *>(a1, v6, a4, v24);
        v6 -= 24;
      }
      while (v24-- > 2);
    }
    return (unsigned int **)v13;
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *>(uint64_t a1, int a2, uint64_t a3, std::vector<unsigned int> *this)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v8;
  __n128 *v9;
  unint64_t v10;
  unint64_t v11;
  float *v12;
  unint64_t v13;
  float v14;
  float v15;
  BOOL v16;
  std::vector<unsigned int>::pointer begin;
  unsigned int *end;
  float *v19;
  unsigned int *v20;
  float v21;
  float v22;
  unsigned int *value;
  __n128 *v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  float *v30;
  unint64_t v31;
  float v32;
  float v33;
  BOOL v34;
  float *v35;
  unsigned int *v36;
  float v37;
  float v38;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v6 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)this - a1) >> 3)))
    {
      v8 = (0x5555555555555556 * (((uint64_t)this - a1) >> 3)) | 1;
      v9 = (__n128 *)(a1 + 24 * v8);
      if (0x5555555555555556 * (((uint64_t)this - a1) >> 3) + 2 < a3)
      {
        v11 = v9[1].n128_u64[1];
        v10 = v9[2].n128_u64[0];
        if (v11 != v10)
        {
          v12 = (float *)v9->n128_u64[0];
          v13 = v11 + 4;
          while (v12 != *(float **)(a1 + 24 * v8 + 8))
          {
            v14 = *v12;
            v15 = *(float *)(v13 - 4);
            if (*v12 < v15)
              break;
            ++v12;
            v16 = v15 < v14 || v13 == v10;
            v13 += 4;
            if (v16)
              goto LABEL_15;
          }
          v9 = (__n128 *)((char *)v9 + 24);
          v8 = 0x5555555555555556 * (((uint64_t)this - a1) >> 3) + 2;
        }
      }
LABEL_15:
      begin = this->__begin_;
      end = this->__end_;
      if (this->__begin_ == end)
      {
LABEL_24:
        value = this->__end_cap_.__value_;
        this->__begin_ = 0;
        this->__end_ = 0;
        this->__end_cap_.__value_ = 0;
        std::vector<float>::__move_assign((uint64_t)this, v9);
        if (v6 >= v8)
        {
          while (1)
          {
            v27 = 2 * v8;
            v8 = (2 * v8) | 1;
            v25 = (__n128 *)(a1 + 24 * v8);
            if (v27 + 2 < a3)
            {
              v29 = v25[1].n128_u64[1];
              v28 = v25[2].n128_u64[0];
              if (v29 != v28)
              {
                v30 = (float *)v25->n128_u64[0];
                v31 = v29 + 4;
                while (v30 != *(float **)(a1 + 24 * v8 + 8))
                {
                  v32 = *v30;
                  v33 = *(float *)(v31 - 4);
                  if (*v30 < v33)
                    break;
                  ++v30;
                  v34 = v33 < v32 || v31 == v28;
                  v31 += 4;
                  if (v34)
                    goto LABEL_42;
                }
                v25 = (__n128 *)((char *)v25 + 24);
                v8 = v27 + 2;
              }
            }
LABEL_42:
            if (begin != end)
              break;
LABEL_51:
            std::vector<float>::__move_assign((uint64_t)v9, v25);
            v9 = v25;
            if (v6 < v8)
              goto LABEL_26;
          }
          v35 = (float *)v25->n128_u64[0];
          v36 = begin + 1;
          while (v35 != (float *)v25->n128_u64[1])
          {
            v37 = *v35;
            v38 = *((float *)v36 - 1);
            if (*v35 < v38)
              break;
            ++v35;
            if (v38 < v37 || v36++ == end)
              goto LABEL_51;
          }
        }
        v25 = v9;
LABEL_26:
        v26 = (void *)v25->n128_u64[0];
        if (v25->n128_u64[0])
        {
          v25->n128_u64[1] = (unint64_t)v26;
          operator delete(v26);
        }
        v25->n128_u64[0] = (unint64_t)begin;
        v25->n128_u64[1] = (unint64_t)end;
        v25[1].n128_u64[0] = (unint64_t)value;
      }
      else
      {
        v19 = (float *)v9->n128_u64[0];
        v20 = begin + 1;
        while (v19 != (float *)v9->n128_u64[1])
        {
          v21 = *v19;
          v22 = *((float *)v20 - 1);
          if (*v19 < v22)
            break;
          ++v19;
          if (v22 < v21 || v20++ == end)
            goto LABEL_24;
        }
      }
    }
  }
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::vector<float> *>(std::vector<unsigned int> *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::vector<unsigned int>::pointer begin;
  std::vector<unsigned int>::pointer end;
  unsigned int *value;
  std::vector<unsigned int> *v10;
  std::vector<unsigned int> *v11;
  void **v12;
  uint64_t v13;
  void *v14;
  std::vector<unsigned int>::pointer v15;

  if (a4 >= 2)
  {
    begin = a1->__begin_;
    end = a1->__end_;
    value = a1->__end_cap_.__value_;
    a1->__end_ = 0;
    a1->__end_cap_.__value_ = 0;
    a1->__begin_ = 0;
    v10 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *>(a1, a3, a4);
    v11 = v10;
    v12 = (void **)(a2 - 24);
    if (v10 == (std::vector<unsigned int> *)(a2 - 24))
    {
      v15 = v10->__begin_;
      if (v11->__begin_)
      {
        v11->__end_ = v15;
        operator delete(v15);
        v11->__begin_ = 0;
        v11->__end_ = 0;
        v11->__end_cap_.__value_ = 0;
      }
      v11->__begin_ = begin;
      v11->__end_ = end;
      v11->__end_cap_.__value_ = value;
    }
    else
    {
      std::vector<float>::__move_assign((uint64_t)v10, (__n128 *)(a2 - 24));
      v13 = (uint64_t)&v11[1];
      v14 = *v12;
      if (*v12)
      {
        *(_QWORD *)(a2 - 16) = v14;
        operator delete(v14);
        *v12 = 0;
        *(_QWORD *)(a2 - 16) = 0;
        *(_QWORD *)(a2 - 8) = 0;
      }
      *(_QWORD *)(a2 - 24) = begin;
      *(_QWORD *)(a2 - 16) = end;
      *(_QWORD *)(a2 - 8) = value;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *>((uint64_t)a1, v13, a3, 0xAAAAAAAAAAAAAAABLL * ((v13 - (uint64_t)a1) >> 3));
    }
  }
}

void sub_1E0630AB8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

std::vector<unsigned int> *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *>(std::vector<unsigned int> *this, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::vector<unsigned int> *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::vector<unsigned int>::pointer end;
  std::vector<unsigned int>::pointer begin;
  unsigned int *v14;
  std::vector<unsigned int>::pointer v15;
  std::vector<unsigned int>::pointer v16;
  float v17;
  float v18;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v8 = this;
    v9 = v5 + 1;
    this += v5 + 1;
    v10 = 2 * v5;
    v5 = (2 * v5) | 1;
    v11 = v10 + 2;
    if (v11 < a3)
    {
      begin = this[1].__begin_;
      end = this[1].__end_;
      if (begin != end)
      {
        v14 = v8[v9].__end_;
        v15 = this->__begin_;
        v16 = begin + 1;
        while (v15 != v14)
        {
          v17 = *(float *)v15;
          v18 = *((float *)v16 - 1);
          if (*(float *)v15 < v18)
            break;
          ++v15;
          if (v18 < v17 || v16++ == end)
            goto LABEL_16;
        }
        ++this;
        v5 = v11;
      }
    }
LABEL_16:
    std::vector<float>::__move_assign((uint64_t)v8, (__n128 *)this);
  }
  while (v5 <= v7);
  return this;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  _QWORD *v6;
  float *v7;
  float *v8;
  uint64_t v9;
  unint64_t v10;
  float **v11;
  float *v12;
  float *v13;
  float v14;
  float *v16;
  uint64_t v17;
  unint64_t v18;
  float *v19;
  float *v20;
  float v21;
  float v22;
  float *v24;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v7 = *(float **)(a2 - 24);
    v8 = *(float **)(a2 - 16);
    v6 = (_QWORD *)(a2 - 24);
    if (v7 != v8)
    {
      v9 = 0;
      v10 = v4 >> 1;
      v11 = (float **)(a1 + 24 * (v4 >> 1));
      v12 = *v11;
      while (1)
      {
        v13 = &v12[v9];
        if (&v12[v9] == v11[1])
          break;
        v14 = v7[v9];
        if (*v13 < v14)
          break;
        ++v9;
        if (v14 < *v13 || &v7[v9] == v8)
          return;
      }
      v16 = *(float **)(a2 - 8);
      *v6 = 0;
      *(_QWORD *)(a2 - 16) = 0;
      *(_QWORD *)(a2 - 8) = 0;
      std::vector<float>::__move_assign((uint64_t)v6, (__n128 *)(a1 + 24 * (v4 >> 1)));
      if (v4 >= 2)
      {
        do
        {
          v17 = (uint64_t)v11;
          v18 = v10 - 1;
          v10 = (v10 - 1) >> 1;
          v11 = (float **)(a1 + 24 * v10);
          v19 = *v11;
          v20 = v7 + 1;
          while (v19 != v11[1])
          {
            v21 = *v19;
            v22 = *(v20 - 1);
            if (*v19 < v22)
              break;
            ++v19;
            if (v22 < v21 || v20++ == v8)
            {
              v11 = (float **)v17;
              goto LABEL_23;
            }
          }
          std::vector<float>::__move_assign(v17, (__n128 *)(a1 + 24 * v10));
        }
        while (v18 > 1);
      }
LABEL_23:
      v24 = *v11;
      if (*v11)
      {
        v11[1] = v24;
        operator delete(v24);
      }
      *v11 = v7;
      v11[1] = v8;
      v11[2] = v16;
    }
  }
}

_QWORD *std::vector<std::vector<std::vector<float>>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1E0630D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1E0630E3C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v15 += 24;
  std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1E0630F44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<float>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<std::vector<float>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::vector<float>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::vector<float>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

void std::vector<std::vector<float>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::vector<unsigned long long>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

float **std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::vector<float> const*>,std::__wrap_iter<std::vector<float> const*>,std::vector<float>,std::__identity,std::__less<void,void>>(float **result, float **a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  float **v6;
  float *v7;
  uint64_t v8;
  float v9;
  float v10;
  BOOL v11;

  if (a2 != result)
  {
    v3 = 0xAAAAAAAAAAAAAAABLL * (a2 - result);
    v4 = a3[1];
    do
    {
      v5 = v3 >> 1;
      if (*a3 != v4)
      {
        v6 = &result[3 * v5];
        v7 = *v6;
        v8 = *a3 + 4;
        while (v7 != v6[1])
        {
          v9 = *v7;
          v10 = *(float *)(v8 - 4);
          if (*v7 < v10)
            break;
          ++v7;
          v11 = v10 < v9 || v8 == v4;
          v8 += 4;
          if (v11)
            goto LABEL_14;
        }
        result = v6 + 3;
        v5 = v3 + ~v5;
      }
LABEL_14:
      v3 = v5;
    }
    while (v5);
  }
  return result;
}

_QWORD *std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1E0631288(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1E0631308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1E06313C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1E0631434(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  int v27;
  char *v28;
  uint64_t v29;
  char *v30;
  int v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 2)
  {
    v13 = *(void **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 2);
    if (v14 >> 62)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v15 = (__dst - (uint64_t)v13) >> 2;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 1 > v14)
      v14 = v16 >> 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
      v17 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v37 = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v9, v17);
    else
      v18 = 0;
    v28 = &v18[4 * v15];
    __p = v18;
    v34 = v28;
    v36 = &v18[4 * v17];
    v29 = 4 * a5;
    v30 = &v28[4 * a5];
    do
    {
      v31 = *(_DWORD *)v7;
      v7 += 4;
      *(_DWORD *)v28 = v31;
      v28 += 4;
      v29 -= 4;
    }
    while (v29);
    v35 = v30;
    v5 = std::vector<float>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 2;
  if (v20 >= a5)
  {
    v21 = &__src[4 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[4 * a5];
    v25 = &v23[-4 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_DWORD *)v25;
        v25 += 4;
        *(_DWORD *)v26 = v27;
        v26 += 4;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-4 * ((v23 - v24) >> 2)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[4 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[4 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_1E0631624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  int v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v7 - 1) = v9;
      v7 -= 4;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

_QWORD *std::vector<unsigned long long>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long long>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1E0631784(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<unsigned long long,unsigned long long>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    v9 = &v6[16 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t std::vector<MIL::ValueInference::Tensor<unsigned char>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 6)
  {
    if (a2 >> 58)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::ValueInference::Tensor<unsigned char>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + (v6 << 6);
    std::vector<MIL::ValueInference::Tensor<unsigned char>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<MIL::ValueInference::Tensor<unsigned char>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1E06318BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<MIL::ValueInference::Tensor<unsigned char>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<MIL::ValueInference::Tensor<unsigned char>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<MIL::ValueInference::Tensor<unsigned char>>,std::reverse_iterator<MIL::ValueInference::Tensor<unsigned char>*>,std::reverse_iterator<MIL::ValueInference::Tensor<unsigned char>*>,std::reverse_iterator<MIL::ValueInference::Tensor<unsigned char>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::ValueInference::Tensor<unsigned char>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(a2 << 6);
}

__n128 std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<MIL::ValueInference::Tensor<unsigned char>>,std::reverse_iterator<MIL::ValueInference::Tensor<unsigned char>*>,std::reverse_iterator<MIL::ValueInference::Tensor<unsigned char>*>,std::reverse_iterator<MIL::ValueInference::Tensor<unsigned char>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 result;
  uint64_t v11;

  if (a3 != a5)
  {
    v7 = 0;
    do
    {
      v8 = a7 + v7;
      v9 = a3 + v7;
      *(_QWORD *)(v8 - 64) = &off_1EA99BC70;
      *(_QWORD *)(v8 - 56) = 0;
      *(_QWORD *)(v8 - 48) = 0;
      *(_QWORD *)(v8 - 40) = 0;
      *(_OWORD *)(v8 - 56) = *(_OWORD *)(a3 + v7 - 56);
      *(_QWORD *)(v8 - 40) = *(_QWORD *)(a3 + v7 - 40);
      *(_QWORD *)(v9 - 56) = 0;
      *(_QWORD *)(v9 - 48) = 0;
      *(_QWORD *)(v9 - 40) = 0;
      *(_QWORD *)(v8 - 32) = 0;
      *(_QWORD *)(v8 - 24) = 0;
      *(_QWORD *)(v8 - 16) = 0;
      result = *(__n128 *)(a3 + v7 - 32);
      *(__n128 *)(v8 - 32) = result;
      v11 = *(_QWORD *)(a3 + v7 - 8);
      *(_QWORD *)(v8 - 16) = *(_QWORD *)(a3 + v7 - 16);
      *(_QWORD *)(v9 - 32) = 0;
      *(_QWORD *)(v9 - 24) = 0;
      *(_QWORD *)(v9 - 16) = 0;
      *(_QWORD *)(v8 - 8) = v11;
      v7 -= 64;
    }
    while (a3 + v7 != a5);
  }
  return result;
}

uint64_t std::__split_buffer<MIL::ValueInference::Tensor<unsigned char>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 64);
    *(_QWORD *)(a1 + 16) = i - 64;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::vector<MIL::ValueInference::Tensor<unsigned char>>::__push_back_slow_path<MIL::ValueInference::Tensor<unsigned char>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[5];

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 6;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 58)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 5 > v5)
    v5 = v8 >> 5;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0)
    v9 = 0x3FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v15[4] = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::ValueInference::Tensor<unsigned char>>>(v7, v9);
  v11 = &v10[64 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[64 * v12];
  *((_QWORD *)v11 + 2) = 0;
  *((_QWORD *)v11 + 3) = 0;
  *(_QWORD *)v11 = &off_1EA99BC70;
  *((_QWORD *)v11 + 1) = 0;
  *(_OWORD *)(v11 + 8) = *(_OWORD *)(a2 + 8);
  *((_QWORD *)v11 + 3) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *((_QWORD *)v11 + 5) = 0;
  *((_QWORD *)v11 + 6) = 0;
  *((_QWORD *)v11 + 4) = 0;
  *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v11 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *((_QWORD *)v11 + 7) = *(_QWORD *)(a2 + 56);
  v15[2] = v11 + 64;
  std::vector<MIL::ValueInference::Tensor<unsigned char>>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<MIL::ValueInference::Tensor<unsigned char>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1E0631B4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<MIL::ValueInference::Tensor<unsigned char>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<MIL::ValueInference::Tensor<float>>::__push_back_slow_path<MIL::ValueInference::Tensor<float>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[5];

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 6;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 58)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 5 > v5)
    v5 = v8 >> 5;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0)
    v9 = 0x3FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v15[4] = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::ValueInference::Tensor<unsigned char>>>(v7, v9);
  v11 = &v10[64 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[64 * v12];
  *((_QWORD *)v11 + 2) = 0;
  *((_QWORD *)v11 + 3) = 0;
  *(_QWORD *)v11 = &off_1EA99BBB0;
  *((_QWORD *)v11 + 1) = 0;
  *(_OWORD *)(v11 + 8) = *(_OWORD *)(a2 + 8);
  *((_QWORD *)v11 + 3) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *((_QWORD *)v11 + 5) = 0;
  *((_QWORD *)v11 + 6) = 0;
  *((_QWORD *)v11 + 4) = 0;
  *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v11 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *((_QWORD *)v11 + 7) = *(_QWORD *)(a2 + 56);
  v15[2] = v11 + 64;
  std::vector<MIL::ValueInference::Tensor<float>>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<MIL::ValueInference::Tensor<unsigned char>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1E0631C64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<MIL::ValueInference::Tensor<unsigned char>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<MIL::ValueInference::Tensor<float>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<MIL::ValueInference::Tensor<float>>,std::reverse_iterator<MIL::ValueInference::Tensor<float>*>,std::reverse_iterator<MIL::ValueInference::Tensor<float>*>,std::reverse_iterator<MIL::ValueInference::Tensor<float>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

__n128 std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<MIL::ValueInference::Tensor<float>>,std::reverse_iterator<MIL::ValueInference::Tensor<float>*>,std::reverse_iterator<MIL::ValueInference::Tensor<float>*>,std::reverse_iterator<MIL::ValueInference::Tensor<float>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 result;
  uint64_t v11;

  if (a3 != a5)
  {
    v7 = 0;
    do
    {
      v8 = a7 + v7;
      v9 = a3 + v7;
      *(_QWORD *)(v8 - 64) = &off_1EA99BBB0;
      *(_QWORD *)(v8 - 56) = 0;
      *(_QWORD *)(v8 - 48) = 0;
      *(_QWORD *)(v8 - 40) = 0;
      *(_OWORD *)(v8 - 56) = *(_OWORD *)(a3 + v7 - 56);
      *(_QWORD *)(v8 - 40) = *(_QWORD *)(a3 + v7 - 40);
      *(_QWORD *)(v9 - 56) = 0;
      *(_QWORD *)(v9 - 48) = 0;
      *(_QWORD *)(v9 - 40) = 0;
      *(_QWORD *)(v8 - 32) = 0;
      *(_QWORD *)(v8 - 24) = 0;
      *(_QWORD *)(v8 - 16) = 0;
      result = *(__n128 *)(a3 + v7 - 32);
      *(__n128 *)(v8 - 32) = result;
      v11 = *(_QWORD *)(a3 + v7 - 8);
      *(_QWORD *)(v8 - 16) = *(_QWORD *)(a3 + v7 - 16);
      *(_QWORD *)(v9 - 32) = 0;
      *(_QWORD *)(v9 - 24) = 0;
      *(_QWORD *)(v9 - 16) = 0;
      *(_QWORD *)(v8 - 8) = v11;
      v7 -= 64;
    }
    while (a3 + v7 != a5);
  }
  return result;
}

void std::vector<MIL::ValueInference::Tensor<float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 64;
      v7 = v4 - 64;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 64;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__function::__func<float (*)(float,float),std::allocator<float (*)(float,float)>,float ()(float,float)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<float (*)(float,float),std::allocator<float (*)(float,float)>,float ()(float,float)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1EA99BD50;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<float (*)(float,float),std::allocator<float (*)(float,float)>,float ()(float,float)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1EA99BD50;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<float (*)(float,float),std::allocator<float (*)(float,float)>,float ()(float,float)>::operator()(uint64_t a1, float *a2, float *a3)
{
  return (*(uint64_t (**)(float, float))(a1 + 8))(*a2, *a3);
}

uint64_t std::__function::__func<float (*)(float,float),std::allocator<float (*)(float,float)>,float ()(float,float)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<float (*)(float,float),std::allocator<float (*)(float,float)>,float ()(float,float)>::target_type()
{
}

_QWORD *std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1E0631F1C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<float (*)(float),std::allocator<float (*)(float)>,float ()(float)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<float (*)(float),std::allocator<float (*)(float)>,float ()(float)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1EA99BE00;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<float (*)(float),std::allocator<float (*)(float)>,float ()(float)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1EA99BE00;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<float (*)(float),std::allocator<float (*)(float)>,float ()(float)>::operator()(uint64_t a1, float *a2)
{
  return (*(uint64_t (**)(float))(a1 + 8))(*a2);
}

uint64_t std::__function::__func<float (*)(float),std::allocator<float (*)(float)>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<float (*)(float),std::allocator<float (*)(float)>,float ()(float)>::target_type()
{
}

_QWORD *std::vector<float>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_1E0632054(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<unsigned long long>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

void std::__function::__func<MIL::Passes::SparsifyWithThreshold(MIL::MILContext &,std::shared_ptr<MIL::IRValue const>,float)::$_0,std::allocator<MIL::Passes::SparsifyWithThreshold(MIL::MILContext &,std::shared_ptr<MIL::IRValue const>,float)::$_0>,float ()(float)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<MIL::Passes::SparsifyWithThreshold(MIL::MILContext &,std::shared_ptr<MIL::IRValue const>,float)::$_0,std::allocator<MIL::Passes::SparsifyWithThreshold(MIL::MILContext &,std::shared_ptr<MIL::IRValue const>,float)::$_0>,float ()(float)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1EA99BEA0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MIL::Passes::SparsifyWithThreshold(MIL::MILContext &,std::shared_ptr<MIL::IRValue const>,float)::$_0,std::allocator<MIL::Passes::SparsifyWithThreshold(MIL::MILContext &,std::shared_ptr<MIL::IRValue const>,float)::$_0>,float ()(float)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1EA99BEA0;
  a2[1] = v2;
  return result;
}

float std::__function::__func<MIL::Passes::SparsifyWithThreshold(MIL::MILContext &,std::shared_ptr<MIL::IRValue const>,float)::$_0,std::allocator<MIL::Passes::SparsifyWithThreshold(MIL::MILContext &,std::shared_ptr<MIL::IRValue const>,float)::$_0>,float ()(float)>::operator()(uint64_t a1, float *a2)
{
  float result;

  result = *a2;
  if (fabsf(*a2) <= **(float **)(a1 + 8))
    return 0.0;
  return result;
}

uint64_t std::__function::__func<MIL::Passes::SparsifyWithThreshold(MIL::MILContext &,std::shared_ptr<MIL::IRValue const>,float)::$_0,std::allocator<MIL::Passes::SparsifyWithThreshold(MIL::MILContext &,std::shared_ptr<MIL::IRValue const>,float)::$_0>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Passes::SparsifyWithThreshold(MIL::MILContext &,std::shared_ptr<MIL::IRValue const>,float)::$_0,std::allocator<MIL::Passes::SparsifyWithThreshold(MIL::MILContext &,std::shared_ptr<MIL::IRValue const>,float)::$_0>,float ()(float)>::target_type()
{
}

float std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::less<float> &,std::__wrap_iter<float *>>(float *a1, float *a2, float *a3, float result)
{
  float *v4;
  unint64_t v7;
  float *v8;
  float *v9;
  int v10;
  float *v11;
  float *v12;
  float *v13;
  float v14;
  float v15;
  float *v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float *v21;
  float v22;
  float *v23;
  float v24;
  float v25;
  float v26;
  float *v27;
  float v28;
  float v29;
  float v30;

  if (a3 != a2)
  {
    v4 = a3;
    do
    {
      v7 = v4 - a1;
      if (v7 < 2)
        break;
      if (v7 == 3)
      {
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<float> &,std::__wrap_iter<float *>>(a1, a1 + 1, v4 - 1);
        return result;
      }
      if (v7 == 2)
      {
        result = *(v4 - 1);
        v30 = *a1;
        if (result < *a1)
        {
          *a1 = result;
          *(v4 - 1) = v30;
        }
        return result;
      }
      if ((char *)v4 - (char *)a1 <= 31)
        return std::__selection_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::less<float> &,std::__wrap_iter<float *>>(a1, v4, result);
      v8 = &a1[v7 >> 1];
      v9 = v4 - 1;
      v10 = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<float> &,std::__wrap_iter<float *>>(a1, v8, v4 - 1);
      result = *a1;
      if (*a1 >= *v8)
      {
        v11 = v4 - 1;
        while (--v11 != a1)
        {
          if (*v11 < *v8)
          {
            *a1 = *v11;
            *v11 = result;
            ++v10;
            goto LABEL_13;
          }
        }
        v21 = a1 + 1;
        if (result >= *v9)
        {
          while (v21 != v9)
          {
            v22 = *v21;
            if (result < *v21)
            {
              *v21++ = *v9;
              *v9 = v22;
              goto LABEL_45;
            }
            ++v21;
          }
          return result;
        }
LABEL_45:
        if (v21 == v9)
          return result;
        while (1)
        {
          v25 = *a1;
          do
          {
            v26 = *v21++;
            result = v26;
          }
          while (v25 >= v26);
          v27 = v21 - 1;
          do
          {
            v28 = *--v9;
            v29 = v28;
          }
          while (v25 < v28);
          if (v27 >= v9)
            break;
          *v27 = v29;
          *v9 = result;
        }
        a1 = v21 - 1;
        if (v27 > a2)
          return result;
      }
      else
      {
        v11 = v4 - 1;
LABEL_13:
        v12 = a1 + 1;
        if (a1 + 1 >= v11)
        {
          v16 = a1 + 1;
        }
        else
        {
          v13 = a1 + 1;
          while (1)
          {
            v14 = *v8;
            do
            {
              v15 = *v13++;
              result = v15;
            }
            while (v15 < v14);
            v16 = v13 - 1;
            do
            {
              v17 = *--v11;
              v18 = v17;
            }
            while (v17 >= v14);
            if (v16 >= v11)
              break;
            *v16 = v18;
            *v11 = result;
            ++v10;
            if (v16 == v8)
              v8 = v11;
          }
        }
        if (v16 != v8)
        {
          result = *v8;
          v19 = *v16;
          if (*v8 < *v16)
          {
            *v16 = result;
            *v8 = v19;
            ++v10;
          }
        }
        if (v16 == a2)
          return result;
        if (!v10)
        {
          if (v16 <= a2)
          {
            v23 = v16 + 1;
            while (v23 != v4)
            {
              v24 = *(v23 - 1);
              result = *v23++;
              if (result < v24)
                goto LABEL_29;
            }
          }
          else
          {
            while (v12 != v16)
            {
              v20 = *(v12 - 1);
              result = *v12++;
              if (result < v20)
                goto LABEL_29;
            }
          }
          return result;
        }
LABEL_29:
        if (v16 <= a2)
          a1 = v16 + 1;
        else
          v4 = v16;
      }
    }
    while (v4 != a2);
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<float> &,std::__wrap_iter<float *>>(float *a1, float *a2, float *a3)
{
  float v3;
  float v4;
  float v5;
  float v6;

  v3 = *a2;
  v4 = *a1;
  v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 >= v4)
      return 1;
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    v6 = *a1;
    if (*a2 >= *a1)
      return 1;
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

float std::__selection_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::less<float> &,std::__wrap_iter<float *>>(float *a1, float *a2, float result)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float v7;
  float v8;

  while (a1 != a2 - 1)
  {
    v3 = a1++;
    if (v3 != a2 && a1 != a2)
    {
      result = *v3;
      v4 = a1;
      v5 = v3;
      v6 = a1;
      do
      {
        v7 = *v6++;
        v8 = v7;
        if (v7 < result)
        {
          result = v8;
          v5 = v4;
        }
        v4 = v6;
      }
      while (v6 != a2);
      if (v5 != v3)
      {
        result = *v3;
        *v3 = *v5;
        *v5 = result;
      }
    }
  }
  return result;
}

uint64_t std::set<float>::set[abi:ne180100]<float const*>(uint64_t a1, float *a2, float *a3)
{
  float *v4;
  float *v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (float *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tree<float>::__emplace_hint_unique_key_args<float,float const&>((uint64_t **)a1, v4, v6, v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_1E0632634(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<float>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<float>::__emplace_hint_unique_key_args<float,float const&>(uint64_t **a1, float *a2, float *a3, _DWORD *a4)
{
  float *v6;
  uint64_t *v7;
  uint64_t **v8;
  float v10;
  float *v11;

  v6 = std::__tree<float>::__find_equal<float>(a1, a2, &v11, &v10, a3);
  v7 = *(uint64_t **)v6;
  if (!*(_QWORD *)v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v7 + 7) = *a4;
    std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

float *std::__tree<float>::__find_equal<float>(_QWORD *a1, float *a2, float **a3, float *a4, float *a5)
{
  float *v5;
  float v6;
  float v7;
  uint64_t *v8;
  uint64_t *v9;
  float *v10;
  uint64_t v11;
  float *v12;
  float *v13;
  BOOL v14;
  float v15;
  float *v16;
  float *v17;
  float v18;
  float *v19;
  float *v20;
  float v21;

  v5 = (float *)(a1 + 1);
  if (a1 + 1 == (_QWORD *)a2 || (v6 = *a5, v7 = a2[7], *a5 < v7))
  {
    v8 = *(uint64_t **)a2;
    if ((float *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 2;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = *(uint64_t **)a2;
      do
      {
        v10 = (float *)v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (float *)*((_QWORD *)v13 + 2);
        v14 = *(_QWORD *)v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (v10[7] < *a5)
      goto LABEL_17;
    v16 = *(float **)v5;
    if (*(_QWORD *)v5)
    {
      do
      {
        while (1)
        {
          v17 = v16;
          v18 = v16[7];
          if (v15 >= v18)
            break;
          v16 = *(float **)v16;
          v5 = v17;
          if (!*(_QWORD *)v17)
            goto LABEL_43;
        }
        if (v18 >= v15)
          break;
        v5 = v16 + 2;
        v16 = (float *)*((_QWORD *)v16 + 1);
      }
      while (v16);
      goto LABEL_43;
    }
LABEL_42:
    v17 = (float *)(a1 + 1);
LABEL_43:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *(_QWORD *)a4 = a2;
    return a4;
  }
  v11 = *((_QWORD *)a2 + 1);
  if (v11)
  {
    v12 = (float *)*((_QWORD *)a2 + 1);
    do
    {
      a4 = v12;
      v12 = *(float **)v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (float *)*((_QWORD *)v19 + 2);
      v14 = *(_QWORD *)a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[7])
  {
    v20 = *(float **)v5;
    if (*(_QWORD *)v5)
    {
      do
      {
        while (1)
        {
          v17 = v20;
          v21 = v20[7];
          if (v6 >= v21)
            break;
          v20 = *(float **)v20;
          v5 = v17;
          if (!*(_QWORD *)v17)
            goto LABEL_43;
        }
        if (v21 >= v6)
          break;
        v5 = v20 + 2;
        v20 = (float *)*((_QWORD *)v20 + 1);
      }
      while (v20);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 2;
  }
  return a4;
}

void std::__tree<float>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<float>::destroy(a1, *a2);
    std::__tree<float>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

_QWORD *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__tree_const_iterator<float,std::__tree_node<float,void *> *,long>,std::__tree_const_iterator<float,std::__tree_node<float,void *> *,long>,std::__wrap_iter<float *>,0>(_QWORD *a1, _QWORD *a2, _DWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;

  if (a1 == a2)
    return a1;
  do
  {
    *a3 = *((_DWORD *)a1 + 7);
    v3 = (_QWORD *)a1[1];
    if (v3)
    {
      do
      {
        v4 = v3;
        v3 = (_QWORD *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        v4 = (_QWORD *)a1[2];
        v5 = *v4 == (_QWORD)a1;
        a1 = v4;
      }
      while (!v5);
    }
    ++a3;
    a1 = v4;
  }
  while (v4 != a2);
  return a2;
}

float *std::__hash_table<std::__hash_value_type<float,unsigned char>,std::__unordered_map_hasher<float,std::__hash_value_type<float,unsigned char>,std::hash<float>,std::equal_to<float>,true>,std::__unordered_map_equal<float,std::__hash_value_type<float,unsigned char>,std::equal_to<float>,std::hash<float>,true>,std::allocator<std::__hash_value_type<float,unsigned char>>>::__emplace_unique_key_args<float,std::piecewise_construct_t const&,std::tuple<float const&>,std::tuple<>>(uint64_t a1, float *a2, uint64_t a3, float **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  float *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  float **v20;
  unint64_t v21;

  if (*a2 == 0.0)
    v7 = 0;
  else
    v7 = *(unsigned int *)a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = v7;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = v7 & (v8 + 0xFFFFFFFF);
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (float *)*v10;
      if (*v10)
      {
        do
        {
          v12 = *((_QWORD *)v11 + 1);
          if (v12 == v7)
          {
            if (v11[4] == *a2)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = *(float **)v11;
        }
        while (v11);
      }
    }
  }
  v11 = (float *)operator new(0x18uLL);
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = v7;
  v11[4] = **a4;
  *((_BYTE *)v11 + 20) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(float ***)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *(_QWORD *)v11 = *v20;
LABEL_41:
    *v20 = v11;
    goto LABEL_42;
  }
  *(_QWORD *)v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v11)
  {
    v21 = *(_QWORD *)(*(_QWORD *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (float **)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_41;
  }
LABEL_42:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1E0632B2C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<unsigned char>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned char>>,std::reverse_iterator<std::vector<unsigned char>*>,std::reverse_iterator<std::vector<unsigned char>*>,std::reverse_iterator<std::vector<unsigned char>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned char>>,std::reverse_iterator<std::vector<unsigned char>*>,std::reverse_iterator<std::vector<unsigned char>*>,std::reverse_iterator<std::vector<unsigned char>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned char>>,std::reverse_iterator<std::vector<unsigned char>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned char>>,std::reverse_iterator<std::vector<unsigned char>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::vector<std::vector<unsigned char>>::__push_back_slow_path<std::vector<unsigned char> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  v15 += 24;
  std::vector<std::vector<unsigned char>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1E0632D84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void MIL::Passes::AddOperationIdAttributes(MIL::Passes *this, MIL::Transform::ProgramTransformer *a2)
{
  uint64_t *v2;
  std::string *v3;
  __int128 *v4;
  __int128 v5;
  unint64_t v6;
  uint64_t v7;
  std::string *v8;
  std::string *v9;
  MIL::Builder::BlockBuilder *v10;
  uint64_t *v11;
  std::string *i;
  __int128 *v13;
  __int128 v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  std::string *v18;
  void (***v19)(MIL::MILContextImpl *__hidden);
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  MIL::MILContext *v32;
  std::__shared_weak_count *v33;
  void ***v34;
  std::__shared_weak_count *v35;
  std::string *v36;
  std::string *v37;
  unint64_t v38;
  MIL::Builder::FunctionBuilder *v39;
  std::__shared_weak_count *v40;
  std::string *v41;
  std::string *v42;
  unint64_t v43;
  MIL::Builder::ProgramBuilder *v44;
  std::__shared_weak_count *v45;

  MIL::Transform::ProgramTransformer::GetProgramBuilder((uint64_t)this, &v44);
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v2 = *(uint64_t **)(MIL::Builder::ProgramBuilder::GetFunctions(v44) + 16);
  if (v2)
  {
    v3 = v42;
    do
    {
      v4 = (__int128 *)(v2 + 2);
      if ((unint64_t)v3 >= v43)
      {
        v3 = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string const&>((uint64_t *)&v41, v4);
      }
      else
      {
        if (*((char *)v2 + 39) < 0)
        {
          std::string::__init_copy_ctor_external(v3, (const std::string::value_type *)v2[2], v2[3]);
        }
        else
        {
          v5 = *v4;
          v3->__r_.__value_.__r.__words[2] = v2[4];
          *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v5;
        }
        ++v3;
      }
      v42 = v3;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v3 = v42;
  }
  v6 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v3 - (char *)v41) >> 3));
  if (v3 == v41)
    v7 = 0;
  else
    v7 = v6;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>((uint64_t)v41, (const void **)&v3->__r_.__value_.__l.__data_, (uint64_t)&v39, v7, 1);
  v8 = v41;
  v9 = v42;
  if (v41 != v42)
  {
    v10 = 0;
    do
    {
      MIL::Builder::ProgramBuilder::GetFunction((uint64_t)v44, (unsigned __int8 *)v8, &v39);
      v36 = 0;
      v37 = 0;
      v38 = 0;
      v11 = *(uint64_t **)(MIL::Builder::FunctionBuilder::GetSpecializations(v39) + 16);
      for (i = v37; v11; v11 = (uint64_t *)*v11)
      {
        v13 = (__int128 *)(v11 + 2);
        if ((unint64_t)i >= v38)
        {
          i = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string const&>((uint64_t *)&v36, v13);
        }
        else
        {
          if (*((char *)v11 + 39) < 0)
          {
            std::string::__init_copy_ctor_external(i, (const std::string::value_type *)v11[2], v11[3]);
          }
          else
          {
            v14 = *v13;
            i->__r_.__value_.__r.__words[2] = v11[4];
            *(_OWORD *)&i->__r_.__value_.__l.__data_ = v14;
          }
          ++i;
        }
        v37 = i;
      }
      v15 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)i - (char *)v36) >> 3));
      if (i == v36)
        v16 = 0;
      else
        v16 = v15;
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>((uint64_t)v36, (const void **)&i->__r_.__value_.__l.__data_, (uint64_t)&v32, v16, 1);
      v17 = (unsigned __int8 *)v36;
      v18 = v37;
      while (v17 != (unsigned __int8 *)v18)
      {
        MIL::Builder::FunctionBuilder::GetContext((uint64_t)v39, &v34);
        v19 = (void (***)(MIL::MILContextImpl *__hidden))v34;
        MIL::Builder::FunctionBuilder::GetBlock((uint64_t)v39, v17, &v32);
        v20 = v33;
        if (v33)
        {
          p_shared_owners = (unint64_t *)&v33->__shared_owners_;
          do
            v22 = __ldaxr(p_shared_owners);
          while (__stlxr(v22 - 1, p_shared_owners));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        v23 = v35;
        if (v35)
        {
          v24 = (unint64_t *)&v35->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v17 += 24;
      }
      v34 = (void ***)&v36;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
      v26 = v40;
      if (v40)
      {
        v27 = (unint64_t *)&v40->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      ++v8;
    }
    while (v8 != v9);
  }
  v36 = (std::string *)&v41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
  v29 = v45;
  if (v45)
  {
    v30 = (unint64_t *)&v45->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_1E06330BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void **v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  uint64_t v14;
  uint64_t v15;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  va_copy((va_list)v6, va1);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

MIL::Builder::BlockBuilder *`anonymous namespace'::AddAttributesToBlockOperations(void (***this)(MIL::MILContextImpl *__hidden this), MIL::MILContext *a2, MIL::Builder::BlockBuilder *a3)
{
  MIL::IRTensorValueType *Scalar;
  uint64_t v7;
  uint64_t i;
  std::__shared_weak_count *v9;
  MIL::Builder::OperationBuilder::OperationBuilderImpl **v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  std::string::size_type v14;
  std::__shared_weak_count *v15;
  void **v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::string::size_type v22;
  unint64_t v23;
  void **v24;
  void **v25;
  MIL::MILContext *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v36;
  uint64_t OutputName;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  std::logic_error *exception;
  std::string v43;
  void **v44;
  std::__shared_weak_count *v45;
  std::string::size_type v46;
  std::__shared_weak_count *v47;
  void *v48[2];
  char v49;
  MIL::Builder::OperationBuilder::OperationBuilderImpl **v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  uint64_t v53;

  Scalar = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar(this, 17);
  MIL::Builder::BlockBuilder::GetOperations(a2, (uint64_t)&v52);
  v7 = v52;
  for (i = v53; v7 != i; v7 += 16)
  {
    v10 = *(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)v7;
    v9 = *(std::__shared_weak_count **)(v7 + 8);
    v50 = *(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)v7;
    v51 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(v48, "milId");
    MIL::IRTensorValueType::MakeUInt64Value(Scalar, a3, &v43);
    v46 = v43.__r_.__value_.__r.__words[0];
    if (v43.__r_.__value_.__r.__words[0])
    {
      v13 = (std::__shared_weak_count *)operator new();
      v14 = v43.__r_.__value_.__r.__words[0];
      v13->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992A68;
      v13->__shared_owners_ = 0;
      v13->__shared_weak_owners_ = 0;
      v13[1].__vftable = (std::__shared_weak_count_vtbl *)v14;
    }
    else
    {
      v13 = 0;
    }
    v47 = v13;
    v43.__r_.__value_.__r.__words[0] = 0;
    MIL::Builder::OperationBuilder::SetAttribute((uint64_t)v10, (uint64_t)v48, (uint64_t *)&v46, &v44);
    v16 = v44;
    v15 = v45;
    if (v45)
    {
      v17 = (unint64_t *)&v45->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v19 = v47;
    if (v47)
    {
      v20 = (unint64_t *)&v47->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = v43.__r_.__value_.__r.__words[0];
    v43.__r_.__value_.__r.__words[0] = 0;
    if (v22)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v22 + 8))(v22);
    if (v49 < 0)
      operator delete(v48[0]);
    if (!v16)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v44);
      v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"Could not add attribute for op producing: ", 42);
      OutputName = MIL::Builder::OperationBuilder::GetOutputName(v50, 0);
      v38 = *(char *)(OutputName + 23);
      if (v38 >= 0)
        v39 = OutputName;
      else
        v39 = *(_QWORD *)OutputName;
      if (v38 >= 0)
        v40 = *(unsigned __int8 *)(OutputName + 23);
      else
        v40 = *(_QWORD *)(OutputName + 8);
      v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, v39, v40);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)".", 1);
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::logic_error::logic_error(exception, &v43);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
    MIL::Builder::OperationBuilder::GetBlocks((MIL::Builder::OperationBuilder *)v50, (uint64_t)&v44);
    a3 = (MIL::Builder::BlockBuilder *)((char *)a3 + 1);
    v24 = v44;
    v25 = (void **)&v45->__vftable;
    while (v24 != v25)
    {
      v26 = (MIL::MILContext *)*v24;
      v27 = (std::__shared_weak_count *)v24[1];
      v43.__r_.__value_.__r.__words[0] = (std::string::size_type)*v24;
      v43.__r_.__value_.__l.__size_ = (std::string::size_type)v27;
      if (v27)
      {
        v28 = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      if (v27)
      {
        v30 = (unint64_t *)&v27->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v24 += 2;
    }
    v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&v44;
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
    v32 = v51;
    if (v51)
    {
      v33 = (unint64_t *)&v51->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
  }
  v44 = (void **)&v52;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v44);
  return a3;
}

void sub_1E06334A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;
  int v17;
  uint64_t v18;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a16);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v18 - 128);
      __p = (void *)(v18 - 112);
      std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<std::string const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::__split_buffer<std::string>::pointer end;
  __int128 v12;
  uint64_t v13;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_1E063368C(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void MIL::Passes::TypeInferenceResult::~TypeInferenceResult(void **this)
{
  MIL::MILResult::~MILResult(this);
  JUMPOUT(0x1E0C023A0);
}

MIL::MILResult *MIL::Passes::TypeInferenceResult::TypeInferenceResult(MIL::Passes::TypeInferenceResult *this)
{
  MIL::MILResult *result;

  result = MIL::MILResult::MILResult(this);
  *(_QWORD *)result = &off_1EA99BF20;
  *((_DWORD *)result + 12) = 2;
  return result;
}

{
  MIL::MILResult *result;

  result = MIL::MILResult::MILResult(this);
  *(_QWORD *)result = &off_1EA99BF20;
  *((_DWORD *)result + 12) = 2;
  return result;
}

uint64_t MIL::Passes::TypeInferenceResult::TypeInferenceResult(uint64_t a1, __int128 *a2, int a3, uint64_t a4)
{
  __n128 v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *__p[2];
  uint64_t v12;
  __int128 v13;

  v13 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  *(_OWORD *)__p = *(_OWORD *)a4;
  v12 = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  v6 = MIL::MILResult::MILResult(a1, (uint64_t)&v13, (__n128 *)__p);
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v7->__on_zero_shared)(v7, v6);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_QWORD *)a1 = &off_1EA99BF20;
  *(_DWORD *)(a1 + 48) = a3;
  return a1;
}

void sub_1E06337D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t MIL::Passes::TypeInferenceResult::GetReason(MIL::Passes::TypeInferenceResult *this)
{
  return *((unsigned int *)this + 12);
}

BOOL MIL::Passes::TypeInferenceResult::IsGood(MIL::Passes::TypeInferenceResult *this)
{
  return *((_DWORD *)this + 12) == 2;
}

void MIL::Passes::PropagateValueTypes(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  MIL::Passes::PropagateValueTypes(a1, a2, a3, 0, a4);
}

void MIL::Passes::PropagateValueTypes(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  _QWORD *v10;
  MIL::Builder::FunctionBuilder *v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *LocationPtr;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v32;
  void *__p;
  char v34;
  __int128 v35;
  _OWORD v36[2];
  int v37;
  void *v38;
  char v39;
  uint64_t v40;
  MIL::Builder::FunctionBuilder *v41;
  __int128 *v42;

  v41 = 0;
  if (*(_DWORD *)(a5 + 48) == 2)
  {
    MIL::MILResult::~MILResult((void **)a5);
    v10 = (_QWORD *)(a3 + 16);
    v11 = v41;
    v12 = v10;
    while (1)
    {
      v12 = (_QWORD *)*v12;
      if (!v12)
        break;
      if (!MIL::Builder::FunctionBuilder::TryGetInput((std::string::size_type)v11, (uint64_t)(v12 + 2)))
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v36);
        v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"No input named ", 15);
        v14 = *((char *)v12 + 39);
        if (v14 >= 0)
          v15 = (uint64_t)(v12 + 2);
        else
          v15 = v12[2];
        if (v14 >= 0)
          v16 = *((unsigned __int8 *)v12 + 39);
        else
          v16 = v12[3];
        v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
        v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" in function ", 13);
        v19 = *(char *)(a2 + 23);
        if (v19 >= 0)
          v20 = a2;
        else
          v20 = *(_QWORD *)a2;
        if (v19 >= 0)
          v21 = *(unsigned __int8 *)(a2 + 23);
        else
          v21 = *(_QWORD *)(a2 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
        LocationPtr = (_QWORD *)MIL::Builder::FunctionBuilder::GetLocationPtr(v11);
        v23 = LocationPtr[1];
        *(_QWORD *)&v35 = *LocationPtr;
        *((_QWORD *)&v35 + 1) = v23;
        if (v23)
        {
          v24 = (unint64_t *)(v23 + 8);
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        std::stringbuf::str();
        MIL::Passes::TypeInferenceResult::TypeInferenceResult(a5, &v35, 3, (uint64_t)&__p);
        if (v34 < 0)
          operator delete(__p);
        v26 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
        {
          v27 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        *(_QWORD *)&v36[0] = *MEMORY[0x1E0DE4F60];
        *(_QWORD *)((char *)v36 + *(_QWORD *)(*(_QWORD *)&v36[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
        *((_QWORD *)&v36[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
        if (v39 < 0)
          operator delete(v38);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1E0C022F8](&v40);
        return;
      }
    }
    memset(v36, 0, sizeof(v36));
    v37 = 1065353216;
    v29 = (uint64_t *)*v10;
    if (*v10)
    {
      do
      {
        MIL::IRTypedArgument::Make((MIL::IRTypedArgument *)v29[5], &v32);
        v42 = (__int128 *)(v29 + 2);
        v30 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v36, (unsigned __int8 *)v29 + 16, (uint64_t)&std::piecewise_construct, &v42);
        std::shared_ptr<MIL::IRTypedArgument>::operator=[abi:ne180100]<MIL::IRTypedArgument,std::default_delete<MIL::IRTypedArgument>,void>((_QWORD *)v30 + 5, &v32);
        v31 = v32;
        v32 = 0;
        if (v31)
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
        v29 = (uint64_t *)*v29;
      }
      while (v29);
      v11 = v41;
    }
    if (*(_DWORD *)(a5 + 48) == 2)
    {
      MIL::MILResult::~MILResult((void **)a5);
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v36);
  }
}

void sub_1E0633AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::ostringstream::~ostringstream((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::GetFuncBuilder(uint64_t a1@<X0>, uint64_t a2@<X1>, MIL::Builder::FunctionBuilder **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t Functions;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *LocationPtr;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  void *__p[2];
  char v39;
  __int128 v40;
  void *v41[2];
  char v42;
  __int128 v43;
  void *v44;
  char v45;
  __int128 v46;
  MIL::Builder::FunctionBuilder *v47;
  uint64_t v48;
  void *v49;
  char v50;
  uint64_t v51;
  _BYTE v52[40];
  MIL::Builder::ProgramBuilder *v53;
  std::__shared_weak_count *v54;

  MIL::Transform::ProgramTransformer::GetProgramBuilder(a1, &v53);
  Functions = MIL::Builder::ProgramBuilder::GetFunctions(v53);
  v8 = (_QWORD *)std::unordered_map<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>::unordered_map((uint64_t)v52, Functions);
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v8, (unsigned __int8 *)a2))
  {
    MIL::Builder::ProgramBuilder::GetFunction((uint64_t)v53, (unsigned __int8 *)a2, &v47);
    v9 = (std::__shared_weak_count *)v48;
    *a3 = v47;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (*(_QWORD *)(MIL::Builder::FunctionBuilder::GetSpecializations(*a3) + 24) == 1)
    {
      LocationPtr = (_QWORD *)MIL::Builder::ProgramBuilder::GetLocationPtr(v53);
      v13 = LocationPtr[1];
      *(_QWORD *)&v40 = *LocationPtr;
      *((_QWORD *)&v40 + 1) = v13;
      if (v13)
      {
        v14 = (unint64_t *)(v13 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Success");
      MIL::Passes::TypeInferenceResult::TypeInferenceResult(a4, &v40, 2, (uint64_t)__p);
      if (v39 < 0)
        operator delete(__p[0]);
      v16 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
      if (*((_QWORD *)&v40 + 1))
      {
        v17 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        goto LABEL_44;
      }
    }
    else
    {
      v30 = (_QWORD *)MIL::Builder::FunctionBuilder::GetLocationPtr(*a3);
      v31 = v30[1];
      *(_QWORD *)&v43 = *v30;
      *((_QWORD *)&v43 + 1) = v31;
      if (v31)
      {
        v32 = (unint64_t *)(v31 + 8);
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
      }
      std::string::basic_string[abi:ne180100]<0>(v41, "Only support exactly 1 IRFunction specialization");
      MIL::Passes::TypeInferenceResult::TypeInferenceResult(a4, &v43, 4, (uint64_t)v41);
      if (v42 < 0)
        operator delete(v41[0]);
      v16 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
      if (*((_QWORD *)&v43 + 1))
      {
        v34 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
        do
          v18 = __ldaxr(v34);
        while (__stlxr(v18 - 1, v34));
LABEL_44:
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
    }
  }
  else
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v47);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"No function named ", 18);
    v20 = *(char *)(a2 + 23);
    if (v20 >= 0)
      v21 = a2;
    else
      v21 = *(_QWORD *)a2;
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(a2 + 23);
    else
      v22 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v21, v22);
    v23 = (_QWORD *)MIL::Builder::ProgramBuilder::GetLocationPtr(v53);
    v24 = v23[1];
    *(_QWORD *)&v46 = *v23;
    *((_QWORD *)&v46 + 1) = v24;
    if (v24)
    {
      v25 = (unint64_t *)(v24 + 8);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    std::stringbuf::str();
    MIL::Passes::TypeInferenceResult::TypeInferenceResult(a4, &v46, 3, (uint64_t)&v44);
    if (v45 < 0)
      operator delete(v44);
    v27 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
    if (*((_QWORD *)&v46 + 1))
    {
      v28 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v47 = (MIL::Builder::FunctionBuilder *)*MEMORY[0x1E0DE4F60];
    *(MIL::Builder::FunctionBuilder **)((char *)&v47 + *((_QWORD *)v47 - 3)) = *(MIL::Builder::FunctionBuilder **)(MEMORY[0x1E0DE4F60] + 24);
    v48 = MEMORY[0x1E0DE4FB8] + 16;
    if (v50 < 0)
      operator delete(v49);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1E0C022F8](&v51);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v52);
  v35 = v54;
  if (v54)
  {
    v36 = (unint64_t *)&v54->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_1E0633E80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,char a34)
{
  uint64_t v34;

  if (a23 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v34 - 88);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v34 - 48);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<MIL::IRTypedArgument>::operator=[abi:ne180100]<MIL::IRTypedArgument,std::default_delete<MIL::IRTypedArgument>,void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  if (*a2)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &unk_1EA994910;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  *a2 = 0;
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v5;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void `anonymous namespace'::InferValueTypesFromFunction(MIL::Builder::FunctionBuilder *this@<X1>, uint64_t a2@<X0>, _QWORD *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  unsigned __int8 *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  MIL::Builder::BlockBuilder *v14;
  std::__shared_weak_count *v15;

  v10 = (unsigned __int8 *)MIL::Builder::FunctionBuilder::SelectedSpecialization(this);
  MIL::Builder::FunctionBuilder::GetBlock((uint64_t)this, v10, &v14);
  v11 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1E0634090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::ModifyFunctionWithTypes(MIL::Builder::FunctionBuilder *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t **i;
  MIL::Builder::Variable::VariableImpl *Name;
  __int128 v12;
  unsigned __int8 *v13;
  uint64_t ValueType;
  _QWORD *LocationPtr;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  void *__p[2];
  char v23;
  __int128 v24;
  std::string v25;
  std::string v26;
  MIL::Builder::BlockBuilder *v27;
  std::__shared_weak_count *v28;
  uint64_t **v29;

  v6 = (unsigned __int8 *)MIL::Builder::FunctionBuilder::SelectedSpecialization(a1);
  MIL::Builder::FunctionBuilder::GetBlock((uint64_t)a1, v6, &v27);
  v7 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (*(_DWORD *)(a3 + 48) == 2)
  {
    MIL::MILResult::~MILResult((void **)a3);
    MIL::Builder::FunctionBuilder::GetInputs((MIL::Builder::FunctionBuilder::FunctionBuilderImpl **)a1, (uint64_t)&v27);
    for (i = v29; i; i = (uint64_t **)*i)
    {
      Name = MIL::Builder::Variable::GetName((MIL::Builder::Variable::VariableImpl **)i[2]);
      if (*((char *)Name + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)Name, *((_QWORD *)Name + 1));
      }
      else
      {
        v12 = *(_OWORD *)Name;
        v26.__r_.__value_.__r.__words[2] = *((_QWORD *)Name + 2);
        *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v12;
      }
      if (std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)&v26))
      {
        MIL::Builder::FunctionBuilder::RemoveInput((uint64_t)a1, (const void **)&v26.__r_.__value_.__l.__data_);
        if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v25, v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
        else
          v25 = v26;
        v13 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)&v26);
        if (!v13)
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        ValueType = MIL::IRTypedArgument::GetValueType(*((MIL::IRTypedArgument::IRTypedArgumentImpl ***)v13 + 5));
        MIL::Builder::FunctionBuilder::AddInput((std::string::size_type)a1, (uint64_t)&v25, ValueType);
        if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v25.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
    }
    std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)&v27);
    LocationPtr = (_QWORD *)MIL::Builder::FunctionBuilder::GetLocationPtr(a1);
    v16 = LocationPtr[1];
    *(_QWORD *)&v24 = *LocationPtr;
    *((_QWORD *)&v24 + 1) = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Success");
    MIL::Passes::TypeInferenceResult::TypeInferenceResult(a3, &v24, 2, (uint64_t)__p);
    if (v23 < 0)
      operator delete(__p[0]);
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
    if (*((_QWORD *)&v24 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
}

void sub_1E06342CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void MIL::Passes::PropagateInputTensorShapes(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  MIL::Passes::PropagateInputTensorShapes(a1, a2, a3, 0, a4);
}

void MIL::Passes::PropagateInputTensorShapes(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t *v10;
  MIL::Builder::Variable::VariableImpl **Input;
  MIL *v12;
  const MIL::IRValueType *v13;
  MIL::IRValueType *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  MIL::IRTypedArgument *v18;
  unsigned __int8 *v19;
  __int128 *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  const MIL::IRValueType *v24;
  MIL::IRStateValueType *v25;
  uint64_t WrappedType;
  MIL::IRStateValueType *v27;
  MIL::IRValueType *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  MIL::Builder::FunctionBuilder *v32;
  void (***v33)(MIL::MILContextImpl *__hidden);
  MIL::MILContext *v34;
  const MIL::IRValueType *v35;
  MIL::IRTypedArgument *v36;
  unsigned __int8 *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  unint64_t *v42;
  const MIL::IRValueType *v43;
  MIL::IRTypedArgument *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unsigned __int8 *v48;
  uint64_t v49;
  MIL::IRStateValueType *v50;
  void *v51;
  MIL::IRStateValueType *v52;
  MIL::IRValueType *v53;
  void *v54;
  MIL::IRStateValueType *v55;
  MIL::IRValueType *v56;
  MIL::MILContext *TensorBufferArgumentHelper;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  const MIL::IRValueType *v61;
  MIL::IRTypedArgument *v62;
  unsigned __int8 *v63;
  std::string::size_type v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  MIL::IRMemoryLayoutValueType *v68;
  MIL::IRPixelBufferValueType *v69;
  unsigned int PixelFormatType;
  uint64_t BytesPerRow;
  uint64_t Attributes;
  uint64_t v73;
  MIL::IRTypedArgument *v74;
  unsigned __int8 *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  MIL::IRTypedArgument *v80;
  unsigned __int8 *v81;
  __int128 *v82;
  unint64_t *v83;
  MIL::Builder::FunctionBuilder *v84;
  _QWORD *v85;
  MIL::Builder::Variable::VariableImpl **v86;
  MIL::Builder::Variable::VariableImpl *Name;
  __int128 v88;
  MIL::IRTypedArgument *Type;
  unsigned __int8 *v90;
  void (***v91)(MIL::MILContextImpl *__hidden);
  _QWORD *v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  _QWORD *v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t *v116;
  _QWORD *v117;
  std::string *v118;
  std::string::size_type size;
  _QWORD *LocationPtr;
  uint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  _QWORD *v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  _QWORD *v132;
  uint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t *v136;
  _QWORD *v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t *v145;
  void *v146;
  char v147;
  __int128 v148;
  __int128 __p;
  _QWORD *v150;
  void *v151;
  char v152;
  __int128 v153;
  std::string v154;
  void *v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  void *v160;
  char v161;
  __int128 v162;
  void *v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  void (***v168)(MIL::MILContextImpl *__hidden);
  std::__shared_weak_count *v169;
  uint64_t v170;
  void *v171;
  char v172;
  __int128 v173;
  void *v174;
  char v175;
  __int128 v176;
  MIL::IRStateValueType *v177;
  uint64_t v178;
  void *v179;
  char v180;
  _BYTE v181[152];
  _QWORD v182[4];
  int v183;
  MIL::Builder::FunctionBuilder::FunctionBuilderImpl **v184;
  __int128 *v185[3];

  v184 = 0;
  if (*(_DWORD *)(a5 + 48) != 2)
    return;
  MIL::MILResult::~MILResult((void **)a5);
  memset(v182, 0, sizeof(v182));
  v183 = 1065353216;
  v10 = *(uint64_t **)(a3 + 16);
  if (!v10)
  {
LABEL_73:
    v84 = (MIL::Builder::FunctionBuilder *)v184;
    MIL::Builder::FunctionBuilder::GetInputs(v184, (uint64_t)&__p);
    v85 = v150;
    if (!v150)
    {
LABEL_84:
      std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)&__p);
      if (*(_DWORD *)(a5 + 48) == 2)
      {
        MIL::MILResult::~MILResult((void **)a5);
      }
      goto LABEL_126;
    }
    while (1)
    {
      v86 = (MIL::Builder::Variable::VariableImpl **)v85[2];
      Name = MIL::Builder::Variable::GetName(v86);
      if (*((char *)Name + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v154, *(const std::string::value_type **)Name, *((_QWORD *)Name + 1));
      }
      else
      {
        v88 = *(_OWORD *)Name;
        v154.__r_.__value_.__r.__words[2] = *((_QWORD *)Name + 2);
        *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v88;
      }
      if (!std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v182, (unsigned __int8 *)&v154))
      {
        Type = (MIL::IRTypedArgument *)MIL::Builder::Variable::TryGetType(v86);
        if (!Type)
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v177);
          v117 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v177, (uint64_t)"PropagateInputTensorShapes cannot detect the type of ", 53);
          if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v118 = &v154;
          else
            v118 = (std::string *)v154.__r_.__value_.__r.__words[0];
          if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v154.__r_.__value_.__r.__words[2]);
          else
            size = v154.__r_.__value_.__l.__size_;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v117, (uint64_t)v118, size);
          LocationPtr = (_QWORD *)MIL::Builder::FunctionBuilder::GetLocationPtr(v84);
          v121 = LocationPtr[1];
          *(_QWORD *)&v148 = *LocationPtr;
          *((_QWORD *)&v148 + 1) = v121;
          if (v121)
          {
            v122 = (unint64_t *)(v121 + 8);
            do
              v123 = __ldxr(v122);
            while (__stxr(v123 + 1, v122));
          }
          std::stringbuf::str();
          MIL::Passes::TypeInferenceResult::TypeInferenceResult(a5, &v148, 3, (uint64_t)&v146);
          if (v147 < 0)
            operator delete(v146);
          v124 = (std::__shared_weak_count *)*((_QWORD *)&v148 + 1);
          if (*((_QWORD *)&v148 + 1))
          {
            v125 = (unint64_t *)(*((_QWORD *)&v148 + 1) + 8);
            do
              v126 = __ldaxr(v125);
            while (__stlxr(v126 - 1, v125));
            if (!v126)
            {
              ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
              std::__shared_weak_count::__release_weak(v124);
            }
          }
          v177 = (MIL::IRStateValueType *)*MEMORY[0x1E0DE4F60];
          *(MIL::IRStateValueType **)((char *)&v177 + *((_QWORD *)v177 - 3)) = *(MIL::IRStateValueType **)(MEMORY[0x1E0DE4F60] + 24);
          v178 = MEMORY[0x1E0DE4FB8] + 16;
          if (v180 < 0)
            operator delete(v179);
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x1E0C022F8](v181);
          if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v154.__r_.__value_.__l.__data_);
          std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)&__p);
          goto LABEL_126;
        }
        MIL::IRTypedArgument::Make(Type, &v168);
        v177 = (MIL::IRStateValueType *)&v154;
        v90 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v182, (unsigned __int8 *)&v154, (uint64_t)&std::piecewise_construct, (__int128 **)&v177);
        std::shared_ptr<MIL::IRTypedArgument>::operator=[abi:ne180100]<MIL::IRTypedArgument,std::default_delete<MIL::IRTypedArgument>,void>((_QWORD *)v90 + 5, (uint64_t *)&v168);
        v91 = v168;
        v168 = 0;
        if (v91)
          (*v91)[1]((MIL::MILContextImpl *)v91);
      }
      if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v154.__r_.__value_.__l.__data_);
      v85 = (_QWORD *)*v85;
      if (!v85)
        goto LABEL_84;
    }
  }
  while (1)
  {
    Input = (MIL::Builder::Variable::VariableImpl **)MIL::Builder::FunctionBuilder::TryGetInput((std::string::size_type)v184, (uint64_t)(v10 + 2));
    if (!Input)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v177);
      v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v177, (uint64_t)"No input named ", 15);
      v93 = *((char *)v10 + 39);
      if (v93 >= 0)
        v94 = (uint64_t)(v10 + 2);
      else
        v94 = v10[2];
      if (v93 >= 0)
        v95 = *((unsigned __int8 *)v10 + 39);
      else
        v95 = v10[3];
      v96 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, v94, v95);
      v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)" in function ", 13);
      v98 = *(char *)(a2 + 23);
      if (v98 >= 0)
        v99 = a2;
      else
        v99 = *(_QWORD *)a2;
      if (v98 >= 0)
        v100 = *(unsigned __int8 *)(a2 + 23);
      else
        v100 = *(_QWORD *)(a2 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, v99, v100);
      v101 = (_QWORD *)MIL::Builder::FunctionBuilder::GetLocationPtr((MIL::Builder::FunctionBuilder *)v184);
      v102 = v101[1];
      *(_QWORD *)&v176 = *v101;
      *((_QWORD *)&v176 + 1) = v102;
      if (v102)
      {
        v103 = (unint64_t *)(v102 + 8);
        do
          v104 = __ldxr(v103);
        while (__stxr(v104 + 1, v103));
      }
      std::stringbuf::str();
      MIL::Passes::TypeInferenceResult::TypeInferenceResult(a5, &v176, 3, (uint64_t)&v174);
      if (v175 < 0)
        operator delete(v174);
      v105 = (std::__shared_weak_count *)*((_QWORD *)&v176 + 1);
      if (!*((_QWORD *)&v176 + 1))
        goto LABEL_123;
      v106 = (unint64_t *)(*((_QWORD *)&v176 + 1) + 8);
      do
        v107 = __ldaxr(v106);
      while (__stlxr(v107 - 1, v106));
      goto LABEL_121;
    }
    v12 = (MIL *)MIL::Builder::Variable::TryGetType(Input);
    v14 = v12;
    if (!v12)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v177);
      v108 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v177, (uint64_t)"PropagateInputTensorShapes cannot detect the type of ", 53);
      v109 = *((char *)v10 + 39);
      if (v109 >= 0)
        v110 = (uint64_t)(v10 + 2);
      else
        v110 = v10[2];
      if (v109 >= 0)
        v111 = *((unsigned __int8 *)v10 + 39);
      else
        v111 = v10[3];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, v110, v111);
      v112 = (_QWORD *)MIL::Builder::FunctionBuilder::GetLocationPtr((MIL::Builder::FunctionBuilder *)v184);
      v113 = v112[1];
      *(_QWORD *)&v173 = *v112;
      *((_QWORD *)&v173 + 1) = v113;
      if (v113)
      {
        v114 = (unint64_t *)(v113 + 8);
        do
          v115 = __ldxr(v114);
        while (__stxr(v115 + 1, v114));
      }
      std::stringbuf::str();
      MIL::Passes::TypeInferenceResult::TypeInferenceResult(a5, &v173, 3, (uint64_t)&v171);
      if (v172 < 0)
        operator delete(v171);
      v105 = (std::__shared_weak_count *)*((_QWORD *)&v173 + 1);
      if (!*((_QWORD *)&v173 + 1))
        goto LABEL_123;
      v116 = (unint64_t *)(*((_QWORD *)&v173 + 1) + 8);
      do
        v107 = __ldaxr(v116);
      while (__stlxr(v107 - 1, v116));
LABEL_121:
      if (!v107)
      {
        ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
        std::__shared_weak_count::__release_weak(v105);
      }
      goto LABEL_123;
    }
    if (MIL::IsTensor(v12, v13))
    {
      v15 = MIL::IRValueType::AsTensorType(v14);
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 88))(v15);
      __p = 0uLL;
      v150 = 0;
      std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, (const void *)v10[5], v10[6], (v10[6] - v10[5]) >> 3);
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 80))(v15);
      std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)&v177, v17);
      MIL::Builder::FunctionBuilder::GetContext((uint64_t)v184, &v154);
      v18 = (MIL::IRTypedArgument *)MIL::IRTensorValueType::MakeWithShape((void (***)(MIL::MILContextImpl *__hidden))v154.__r_.__value_.__l.__data_, v16, (uint64_t)&__p, (uint64_t *)&v177);
      MIL::IRTypedArgument::Make(v18, v185);
      v168 = (void (***)(MIL::MILContextImpl *__hidden))(v10 + 2);
      v19 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v182, (unsigned __int8 *)v10 + 16, (uint64_t)&std::piecewise_construct, (__int128 **)&v168);
      std::shared_ptr<MIL::IRTypedArgument>::operator=[abi:ne180100]<MIL::IRTypedArgument,std::default_delete<MIL::IRTypedArgument>,void>((_QWORD *)v19 + 5, (uint64_t *)v185);
      v20 = v185[0];
      v185[0] = 0;
      if (v20)
        (*(void (**)(__int128 *))(*(_QWORD *)v20 + 8))(v20);
      v21 = (std::__shared_weak_count *)v154.__r_.__value_.__l.__size_;
      if (v154.__r_.__value_.__l.__size_)
      {
        v22 = (unint64_t *)(v154.__r_.__value_.__l.__size_ + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
LABEL_24:
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      goto LABEL_26;
    }
    if (!MIL::IRValueType::TryCastAsStateType(v14))
      break;
    v25 = (MIL::IRStateValueType *)MIL::IRValueType::AsStateType(v14);
    WrappedType = MIL::IRStateValueType::GetWrappedType(v25);
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)WrappedType + 24))(WrappedType))
    {
      v27 = (MIL::IRStateValueType *)MIL::IRValueType::AsStateType(v14);
      v28 = (MIL::IRValueType *)MIL::IRStateValueType::GetWrappedType(v27);
      v29 = MIL::IRValueType::AsTensorType(v28);
      v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 88))(v29);
      __p = 0uLL;
      v150 = 0;
      std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, (const void *)v10[5], v10[6], (v10[6] - v10[5]) >> 3);
      v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 80))(v29);
      std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)&v177, v31);
      v32 = (MIL::Builder::FunctionBuilder *)v184;
      MIL::Builder::FunctionBuilder::GetContext((uint64_t)v184, &v154);
      v33 = (void (***)(MIL::MILContextImpl *__hidden))v154.__r_.__value_.__r.__words[0];
      MIL::Builder::FunctionBuilder::GetContext((uint64_t)v32, &v168);
      v34 = (MIL::MILContext *)MIL::IRTensorValueType::MakeWithShape(v168, v30, (uint64_t)&__p, (uint64_t *)&v177);
      v36 = (MIL::IRTypedArgument *)MIL::IRStateValueType::Make(v33, v34, v35);
      MIL::IRTypedArgument::Make(v36, &v170);
      v185[0] = (__int128 *)(v10 + 2);
      v37 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v182, (unsigned __int8 *)v10 + 16, (uint64_t)&std::piecewise_construct, v185);
      std::shared_ptr<MIL::IRTypedArgument>::operator=[abi:ne180100]<MIL::IRTypedArgument,std::default_delete<MIL::IRTypedArgument>,void>((_QWORD *)v37 + 5, &v170);
      v38 = v170;
      v170 = 0;
      if (v38)
        (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
      v39 = v169;
      if (v169)
      {
        p_shared_owners = (unint64_t *)&v169->__shared_owners_;
        do
          v41 = __ldaxr(p_shared_owners);
        while (__stlxr(v41 - 1, p_shared_owners));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v21 = (std::__shared_weak_count *)v154.__r_.__value_.__l.__size_;
      if (v154.__r_.__value_.__l.__size_)
      {
        v42 = (unint64_t *)(v154.__r_.__value_.__l.__size_ + 8);
        do
          v23 = __ldaxr(v42);
        while (__stlxr(v23 - 1, v42));
        goto LABEL_24;
      }
LABEL_26:
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&v177);
      if ((_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      goto LABEL_28;
    }
    v50 = (MIL::IRStateValueType *)MIL::IRValueType::AsStateType(v14);
    v51 = (void *)MIL::IRStateValueType::GetWrappedType(v50);
    if (!MIL::IRValueType::TryCastAsMemoryLayoutType(v51))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v177);
      v127 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v177, (uint64_t)"PropagateInputTensorShapes: State input ", 40);
      v128 = *((char *)v10 + 39);
      if (v128 >= 0)
        v129 = (uint64_t)(v10 + 2);
      else
        v129 = v10[2];
      if (v128 >= 0)
        v130 = *((unsigned __int8 *)v10 + 39);
      else
        v130 = v10[3];
      v131 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v127, v129, v130);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v131, (uint64_t)" wraps an invalid type.", 23);
      v132 = (_QWORD *)MIL::Builder::FunctionBuilder::GetLocationPtr((MIL::Builder::FunctionBuilder *)v184);
      v133 = v132[1];
      *(_QWORD *)&v162 = *v132;
      *((_QWORD *)&v162 + 1) = v133;
      if (v133)
      {
        v134 = (unint64_t *)(v133 + 8);
        do
          v135 = __ldxr(v134);
        while (__stxr(v135 + 1, v134));
      }
      std::stringbuf::str();
      MIL::Passes::TypeInferenceResult::TypeInferenceResult(a5, &v162, 3, (uint64_t)&v160);
      if (v161 < 0)
        operator delete(v160);
      v105 = (std::__shared_weak_count *)*((_QWORD *)&v162 + 1);
      if (*((_QWORD *)&v162 + 1))
      {
        v136 = (unint64_t *)(*((_QWORD *)&v162 + 1) + 8);
        do
          v107 = __ldaxr(v136);
        while (__stlxr(v107 - 1, v136));
        goto LABEL_121;
      }
      goto LABEL_123;
    }
    v52 = (MIL::IRStateValueType *)MIL::IRValueType::AsStateType(v14);
    v53 = (MIL::IRValueType *)MIL::IRStateValueType::GetWrappedType(v52);
    v54 = MIL::IRValueType::AsMemoryLayoutType(v53);
    if (MIL::IRMemoryLayoutValueType::TryAsTensorBufferType(v54))
    {
      v55 = (MIL::IRStateValueType *)MIL::IRValueType::AsStateType(v14);
      v56 = (MIL::IRValueType *)MIL::IRStateValueType::GetWrappedType(v55);
      MIL::Builder::FunctionBuilder::GetContext((uint64_t)v184, &v166);
      v163 = 0;
      v164 = 0;
      v165 = 0;
      std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v163, (const void *)v10[5], v10[6], (v10[6] - v10[5]) >> 3);
      if (v163)
      {
        v164 = v163;
        operator delete(v163);
      }
      v58 = v167;
      if (v167)
      {
        v59 = (unint64_t *)&v167->__shared_owners_;
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      MIL::Builder::FunctionBuilder::GetContext((uint64_t)v184, &v177);
      v62 = (MIL::IRTypedArgument *)MIL::IRStateValueType::Make((void (***)(MIL::MILContextImpl *__hidden))v177, TensorBufferArgumentHelper, v61);
      MIL::IRTypedArgument::Make(v62, &v154);
      *(_QWORD *)&__p = v10 + 2;
      v63 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v182, (unsigned __int8 *)v10 + 16, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
      std::shared_ptr<MIL::IRTypedArgument>::operator=[abi:ne180100]<MIL::IRTypedArgument,std::default_delete<MIL::IRTypedArgument>,void>((_QWORD *)v63 + 5, (uint64_t *)&v154);
      v64 = v154.__r_.__value_.__r.__words[0];
      v154.__r_.__value_.__r.__words[0] = 0;
      if (v64)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v64 + 8))(v64);
      v65 = (std::__shared_weak_count *)v178;
      if (v178)
      {
        v66 = (unint64_t *)(v178 + 8);
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
    }
LABEL_28:
    v10 = (uint64_t *)*v10;
    if (!v10)
      goto LABEL_73;
  }
  if (MIL::IsTensorBuffer(v14, v24))
  {
    MIL::Builder::FunctionBuilder::GetContext((uint64_t)v184, &v158);
    v155 = 0;
    v156 = 0;
    v157 = 0;
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v155, (const void *)v10[5], v10[6], (v10[6] - v10[5]) >> 3);
    if (v155)
    {
      v156 = v155;
      operator delete(v155);
    }
    v45 = v159;
    if (v159)
    {
      v46 = (unint64_t *)&v159->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    MIL::IRTypedArgument::Make(v44, &__p);
    v177 = (MIL::IRStateValueType *)(v10 + 2);
    v48 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v182, (unsigned __int8 *)v10 + 16, (uint64_t)&std::piecewise_construct, (__int128 **)&v177);
    std::shared_ptr<MIL::IRTypedArgument>::operator=[abi:ne180100]<MIL::IRTypedArgument,std::default_delete<MIL::IRTypedArgument>,void>((_QWORD *)v48 + 5, (uint64_t *)&__p);
    v49 = __p;
    *(_QWORD *)&__p = 0;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    goto LABEL_28;
  }
  if (MIL::IsPixelBuffer(v14, v43))
  {
    v68 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(v14);
    v69 = (MIL::IRPixelBufferValueType *)MIL::IRMemoryLayoutValueType::AsPixelBufferType(v68);
    PixelFormatType = MIL::IRPixelBufferValueType::GetPixelFormatType(v69);
    __p = 0uLL;
    v150 = 0;
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, (const void *)v10[5], v10[6], (v10[6] - v10[5]) >> 3);
    BytesPerRow = MIL::IRPixelBufferValueType::TryGetBytesPerRow(v69);
    Attributes = MIL::IRPixelBufferValueType::GetAttributes(v69);
    std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)&v177, Attributes);
    if (BytesPerRow)
    {
      v73 = MIL::IRPixelBufferValueType::GetBytesPerRow((MIL::IRPixelBufferValueTypeImpl **)v69);
      memset(&v154, 0, sizeof(v154));
      std::vector<MIL::IRProperty const*>::__init_with_size[abi:ne180100]<MIL::IRProperty const**,MIL::IRProperty const**>(&v154, *(const void **)v73, *(_QWORD *)(v73 + 8), (uint64_t)(*(_QWORD *)(v73 + 8) - *(_QWORD *)v73) >> 3);
      MIL::Builder::FunctionBuilder::GetContext((uint64_t)v184, &v168);
      v74 = (MIL::IRTypedArgument *)MIL::IRPixelBufferValueType::MakeWithShape(v168, PixelFormatType, &__p, (uint64_t)&v154, (uint64_t *)&v177);
      MIL::IRTypedArgument::Make(v74, &v170);
      v185[0] = (__int128 *)(v10 + 2);
      v75 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v182, (unsigned __int8 *)v10 + 16, (uint64_t)&std::piecewise_construct, v185);
      std::shared_ptr<MIL::IRTypedArgument>::operator=[abi:ne180100]<MIL::IRTypedArgument,std::default_delete<MIL::IRTypedArgument>,void>((_QWORD *)v75 + 5, &v170);
      v76 = v170;
      v170 = 0;
      if (v76)
        (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
      v77 = v169;
      if (v169)
      {
        v78 = (unint64_t *)&v169->__shared_owners_;
        do
          v79 = __ldaxr(v78);
        while (__stlxr(v79 - 1, v78));
        if (!v79)
        {
          ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
          std::__shared_weak_count::__release_weak(v77);
        }
      }
      if (v154.__r_.__value_.__r.__words[0])
      {
        v154.__r_.__value_.__l.__size_ = v154.__r_.__value_.__r.__words[0];
        operator delete(v154.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      MIL::Builder::FunctionBuilder::GetContext((uint64_t)v184, &v154);
      v80 = (MIL::IRTypedArgument *)MIL::IRPixelBufferValueType::MakeWithShape((void (***)(MIL::MILContextImpl *__hidden))v154.__r_.__value_.__l.__data_, PixelFormatType, &__p, (uint64_t *)&v177);
      MIL::IRTypedArgument::Make(v80, v185);
      v168 = (void (***)(MIL::MILContextImpl *__hidden))(v10 + 2);
      v81 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v182, (unsigned __int8 *)v10 + 16, (uint64_t)&std::piecewise_construct, (__int128 **)&v168);
      std::shared_ptr<MIL::IRTypedArgument>::operator=[abi:ne180100]<MIL::IRTypedArgument,std::default_delete<MIL::IRTypedArgument>,void>((_QWORD *)v81 + 5, (uint64_t *)v185);
      v82 = v185[0];
      v185[0] = 0;
      if (v82)
        (*(void (**)(__int128 *))(*(_QWORD *)v82 + 8))(v82);
      v21 = (std::__shared_weak_count *)v154.__r_.__value_.__l.__size_;
      if (v154.__r_.__value_.__l.__size_)
      {
        v83 = (unint64_t *)(v154.__r_.__value_.__l.__size_ + 8);
        do
          v23 = __ldaxr(v83);
        while (__stlxr(v23 - 1, v83));
        goto LABEL_24;
      }
    }
    goto LABEL_26;
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v177);
  v137 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v177, (uint64_t)"PropagateInputTensorShapes: Unsupported input type for: ", 56);
  v138 = *((char *)v10 + 39);
  if (v138 >= 0)
    v139 = (uint64_t)(v10 + 2);
  else
    v139 = v10[2];
  if (v138 >= 0)
    v140 = *((unsigned __int8 *)v10 + 39);
  else
    v140 = v10[3];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v137, v139, v140);
  v141 = (_QWORD *)MIL::Builder::FunctionBuilder::GetLocationPtr((MIL::Builder::FunctionBuilder *)v184);
  v142 = v141[1];
  *(_QWORD *)&v153 = *v141;
  *((_QWORD *)&v153 + 1) = v142;
  if (v142)
  {
    v143 = (unint64_t *)(v142 + 8);
    do
      v144 = __ldxr(v143);
    while (__stxr(v144 + 1, v143));
  }
  std::stringbuf::str();
  MIL::Passes::TypeInferenceResult::TypeInferenceResult(a5, &v153, 3, (uint64_t)&v151);
  if (v152 < 0)
    operator delete(v151);
  v105 = (std::__shared_weak_count *)*((_QWORD *)&v153 + 1);
  if (*((_QWORD *)&v153 + 1))
  {
    v145 = (unint64_t *)(*((_QWORD *)&v153 + 1) + 8);
    do
      v107 = __ldaxr(v145);
    while (__stlxr(v107 - 1, v145));
    goto LABEL_121;
  }
LABEL_123:
  v177 = (MIL::IRStateValueType *)*MEMORY[0x1E0DE4F60];
  *(MIL::IRStateValueType **)((char *)&v177 + *((_QWORD *)v177 - 3)) = *(MIL::IRStateValueType **)(MEMORY[0x1E0DE4F60]
                                                                                                 + 24);
  v178 = MEMORY[0x1E0DE4FB8] + 16;
  if (v180 < 0)
    operator delete(v179);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1E0C022F8](v181);
LABEL_126:
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v182);
}

void sub_1E063509C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  uint64_t v59;

  if (a25 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  std::ostringstream::~ostringstream((uint64_t)&a59);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v59 - 160);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::GetTensorBufferArgumentHelper(uint64_t a1, MIL::IRValueType *a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  void (***v7)(MIL::MILContextImpl *__hidden);
  unint64_t *p_shared_owners;
  unint64_t v9;
  MIL::IRMemoryLayoutValueType *v10;
  MIL::IRTensorBufferValueType *v11;
  int DataType;
  uint64_t InterleaveFactors;
  uint64_t Attributes;
  uint64_t Strides;
  uint64_t updated;
  uint64_t RowAlignmentInBytes;
  unint64_t *v18;
  unint64_t v19;
  void (***v20)(MIL::MILContextImpl *__hidden);
  unint64_t *v21;
  unint64_t v22;
  _BOOL4 HasFullyUnknownStrideProperty;
  _BOOL4 v24;
  unint64_t *v25;
  unint64_t v26;
  void (***v27)(MIL::MILContextImpl *__hidden);
  void (***v28)(MIL::MILContextImpl *__hidden);
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  void *v34;
  void *v35;
  uint64_t v36;
  void (***v37[4])(MIL::MILContextImpl *__hidden);
  void *v38[5];
  void *__p;
  void *v40;
  uint64_t v41;
  uint64_t v42[5];
  void *v43;
  void *v44;
  uint64_t v45;

  v7 = *(void (****)(MIL::MILContextImpl *__hidden))a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  v38[3] = *(void **)a1;
  v38[4] = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  memset(v38, 0, 24);
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v38, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
  v10 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(a2);
  v11 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v10);
  DataType = MIL::IRTensorBufferValueType::GetDataType(v11);
  InterleaveFactors = MIL::IRTensorBufferValueType::GetInterleaveFactors(v11);
  v43 = 0;
  v44 = 0;
  v45 = 0;
  std::vector<MIL::IRProperty const*>::__init_with_size[abi:ne180100]<MIL::IRProperty const**,MIL::IRProperty const**>(&v43, *(const void **)InterleaveFactors, *(_QWORD *)(InterleaveFactors + 8), (uint64_t)(*(_QWORD *)(InterleaveFactors + 8) - *(_QWORD *)InterleaveFactors) >> 3);
  Attributes = MIL::IRTensorBufferValueType::GetAttributes(v11);
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v42, Attributes);
  __p = 0;
  v40 = 0;
  v41 = 0;
  if (MIL::IRTensorBufferValueType::TryGetStrides(v11))
  {
    Strides = MIL::IRTensorBufferValueType::GetStrides((MIL::IRTensorBufferValueTypeImpl **)v11);
    if (&__p != (void **)Strides)
      std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)&__p, *(char **)Strides, *(_QWORD *)(Strides + 8), (uint64_t)(*(_QWORD *)(Strides + 8) - *(_QWORD *)Strides) >> 3);
    updated = MIL::IRTensorBufferValueType::MakeWithShape(v7, DataType, (__int128 *)v38, (uint64_t)&__p, (uint64_t)&v43, v42);
    if (__p)
    {
      v40 = __p;
      operator delete(__p);
    }
  }
  else
  {
    RowAlignmentInBytes = MIL::IRTensorBufferValueType::TryGetRowAlignmentInBytes(v11);
    updated = MIL::IRTensorBufferValueType::MakeWithShapeAndRowAlignment(v7, DataType, (__int128 *)v38, RowAlignmentInBytes, (uint64_t)&v43, v42);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v42);
  if (v43)
  {
    v44 = v43;
    operator delete(v43);
  }
  if (v38[0])
  {
    v38[1] = v38[0];
    operator delete(v38[0]);
  }
  if (v6)
  {
    v18 = (unint64_t *)&v6->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v20 = *(void (****)(MIL::MILContextImpl *__hidden))(a1 + 8);
  v37[2] = *(void (****)(MIL::MILContextImpl *__hidden))a1;
  v37[3] = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 1);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v24 = HasFullyUnknownStrideProperty;
  if (!v20)
    goto LABEL_26;
  v25 = (unint64_t *)(v20 + 1);
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    (*v20)[2]((MIL::MILContextImpl *)v20);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v20);
    if (!v24)
      return updated;
  }
  else
  {
LABEL_26:
    if (!HasFullyUnknownStrideProperty)
      return updated;
  }
  v27 = *(void (****)(MIL::MILContextImpl *__hidden))a1;
  v28 = *(void (****)(MIL::MILContextImpl *__hidden))(a1 + 8);
  v37[0] = v27;
  v37[1] = v28;
  if (v28)
  {
    v29 = (unint64_t *)(v28 + 1);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  v34 = 0;
  v35 = 0;
  v36 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v34, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
  if (v34)
  {
    v35 = v34;
    operator delete(v34);
  }
  if (v28)
  {
    v31 = (unint64_t *)(v28 + 1);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      (*v28)[2]((MIL::MILContextImpl *)v28);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v28);
    }
  }
  return updated;
}

void sub_1E0635694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25)
{
  if (__p)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>::unordered_map(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::Builder::FunctionBuilder>> const&>(a1, i + 16, (__int128 *)i + 1);
  return a1;
}

void sub_1E063578C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::Builder::FunctionBuilder>> const&>(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<MIL::Builder::FunctionBuilder>> const&>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_1E0635A0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<MIL::Builder::FunctionBuilder>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x38uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1E0635A80(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::InferValueTypesFromBlock@<X0>(MIL::Builder::BlockBuilder *this@<X2>, uint64_t a2@<X0>, std::string::size_type a3@<X1>, _QWORD *a4@<X3>, unsigned int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  MIL::Builder::OperationBuilder *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t Operator;
  int v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  const MIL::Builder::OperationBuilder *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  MIL::Builder::OperationBuilder *v23;
  _QWORD *Parameters;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  MIL::IRArgument *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  std::vector<int>::pointer v35;
  _QWORD *v36;
  std::vector<int>::pointer v37;
  uint64_t Name;
  unsigned __int8 *Variable;
  MIL::Builder::Variable::VariableImpl **v40;
  std::vector<int>::pointer v41;
  std::__shared_weak_count *end;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  std::vector<int>::pointer begin;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  MIL::IRTypedArgument *Type;
  MIL::Builder::Variable::VariableImpl **Input;
  unsigned __int8 *v55;
  uint64_t v56;
  std::vector<int>::pointer v57;
  _QWORD *v58;
  std::vector<int>::pointer v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  _QWORD *v69;
  _QWORD *v70;
  char *v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  std::vector<int>::pointer v75;
  std::string::size_type v76;
  uint64_t v77;
  unint64_t *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  __int128 *v82;
  int v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  unsigned __int16 *v108;
  unsigned __int8 *v109;
  _QWORD *v110;
  uint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  int v118;
  MIL::Builder::OperationBuilder *v120;
  uint64_t *v121;
  uint64_t v122;
  __int128 v123;
  MIL::Builder::OperationBuilder *v124;
  uint64_t v125;
  __int128 v126;
  MIL::Builder::OperationBuilder *v127;
  uint64_t NumArguments;
  uint64_t v129;
  _BOOL4 v131;
  _QWORD *v132;
  uint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t v140;
  MIL::Builder::Variable::VariableImpl **ArgumentForParameter;
  unsigned __int8 *v142;
  unsigned __int8 *v143;
  uint64_t ValueType;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  char *v154;
  char *v155;
  char *v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  char *v161;
  uint64_t v162;
  std::string::size_type *v163;
  std::string::size_type v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *size;
  unint64_t *v168;
  unint64_t v169;
  _QWORD *v170;
  std::string *v171;
  std::string::size_type v172;
  std::string::size_type *v173;
  std::string::size_type v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::string::size_type *v180;
  std::string::size_type v181;
  unint64_t *v182;
  unint64_t v183;
  unint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  std::string::size_type v188;
  unint64_t v189;
  char v190;
  uint64_t v191;
  MIL::MILContext *v192;
  const MIL::IRValueType *v193;
  uint64_t v194;
  const MIL::IRValueType *StrongestCompatibleType;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  BOOL v199;
  std::vector<int>::pointer v200;
  int *v201;
  int64_t v202;
  unint64_t v203;
  unint64_t v204;
  char *v205;
  int *v206;
  std::vector<int>::pointer v207;
  std::vector<int>::pointer v208;
  uint64_t v209;
  const MIL::IRValueType *v210;
  unint64_t v211;
  uint64_t v212;
  std::string::size_type *v213;
  std::string::size_type v214;
  unint64_t *v215;
  unint64_t v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  uint64_t *v220;
  MIL::IRTypedArgument::IRTypedArgumentImpl ***v221;
  MIL::IRTypedArgument::IRTypedArgumentImpl ***v222;
  std::string::size_type v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  _QWORD *v228;
  _QWORD *v229;
  uint64_t v230;
  MIL::Fp16 *v231;
  std::string::size_type v232;
  uint64_t v233;
  _QWORD *v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  int64_t v238;
  unint64_t v239;
  char *v240;
  uint64_t v241;
  char *v242;
  _QWORD *v243;
  std::string::size_type v244;
  std::string::size_type v245;
  __int128 v246;
  int64x2_t v247;
  std::string::size_type v248;
  std::string::size_type v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  std::string::size_type v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  _QWORD *v257;
  uint64_t v258;
  std::string::size_type v259;
  uint64_t v260;
  std::string::size_type v261;
  uint64_t v262;
  std::vector<int>::pointer v263;
  std::string *v264;
  std::string::size_type *v265;
  std::string::size_type v266;
  unint64_t *v267;
  unint64_t v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  char v272;
  _QWORD *v273;
  uint64_t v274;
  unint64_t *v275;
  unint64_t v276;
  std::__shared_weak_count *v277;
  unint64_t *v278;
  unint64_t v279;
  const void **v280;
  MIL::Builder::Variable::VariableImpl **v281;
  unsigned __int8 *v282;
  unsigned __int8 *v283;
  unsigned __int8 *v284;
  MIL::Builder::Variable::VariableImpl **v285;
  uint64_t v286;
  unint64_t *v287;
  unint64_t v288;
  unsigned __int8 *v289;
  uint64_t v290;
  std::__shared_weak_count *v291;
  unint64_t *v292;
  unint64_t v293;
  _QWORD *v294;
  int v295;
  uint64_t v296;
  uint64_t v297;
  _QWORD *v298;
  _QWORD *v299;
  std::string *v300;
  std::string::size_type v301;
  _QWORD *v302;
  uint64_t v303;
  unint64_t *v304;
  unint64_t v305;
  std::__shared_weak_count *v306;
  unint64_t *v307;
  unint64_t v308;
  std::__shared_weak_count *v309;
  unint64_t *v310;
  unint64_t v311;
  MIL::Builder::FunctionBuilder *v312;
  unsigned __int8 *v313;
  std::string::size_type v314;
  std::string::size_type v315;
  std::string::size_type v316;
  uint64_t v317;
  unint64_t v318;
  int *v319;
  unsigned __int8 *v320;
  unsigned __int8 *v321;
  _QWORD *v322;
  uint64_t v323;
  unint64_t *v324;
  unint64_t v325;
  _QWORD *v326;
  uint64_t v327;
  unint64_t *v328;
  unint64_t v329;
  std::__shared_weak_count *v330;
  unint64_t *v331;
  unint64_t v332;
  _QWORD *v333;
  uint64_t v334;
  unint64_t *v335;
  unint64_t v336;
  unint64_t *v337;
  _QWORD *v338;
  uint64_t v339;
  unint64_t *v340;
  unint64_t v341;
  unint64_t *v342;
  _QWORD *v343;
  int v344;
  uint64_t v345;
  uint64_t v346;
  _QWORD *v347;
  _QWORD *v348;
  std::string *v349;
  std::string::size_type v350;
  _QWORD *v351;
  uint64_t v352;
  unint64_t *v353;
  unint64_t v354;
  std::__shared_weak_count *v355;
  unint64_t *v356;
  unint64_t v357;
  _QWORD *v358;
  uint64_t v359;
  unint64_t *v360;
  unint64_t v361;
  std::__shared_weak_count *v362;
  unint64_t *v363;
  unint64_t v364;
  _QWORD *v365;
  int v366;
  uint64_t v367;
  uint64_t v368;
  _QWORD *v369;
  _QWORD *v370;
  std::string *v371;
  std::string::size_type v372;
  _QWORD *v373;
  uint64_t v374;
  unint64_t *v375;
  unint64_t v376;
  unint64_t *v377;
  _QWORD *v378;
  uint64_t v379;
  unint64_t *v380;
  unint64_t v381;
  std::__shared_weak_count *v382;
  unint64_t *v383;
  unint64_t v384;
  uint64_t v385;
  unint64_t *v386;
  unint64_t *v387;
  unint64_t v388;
  _QWORD *v389;
  uint64_t v390;
  unint64_t *v391;
  unint64_t v392;
  unint64_t *v393;
  uint64_t *v394;
  std::__shared_weak_count *v395;
  unint64_t *v396;
  unint64_t v397;
  uint64_t Attributes;
  std::__shared_weak_count *v399;
  unint64_t *v400;
  unint64_t v401;
  std::__shared_weak_count *v402;
  unint64_t *v403;
  unint64_t v404;
  MIL::Builder::OperationBuilder::OperationBuilderImpl **v405;
  unint64_t *v406;
  unint64_t v407;
  MIL::Builder::Variable::VariableImpl ***v408;
  MIL::Builder::Variable::VariableImpl ***v409;
  _QWORD *v410;
  uint64_t v411;
  unint64_t v412;
  int v413;
  MIL::Builder::Variable::VariableImpl **v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  int v423;
  void *v424;
  BOOL v425;
  unint64_t i;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  void *v433;
  BOOL HasVariadicUnknownDims;
  _QWORD *v435;
  uint64_t v436;
  unint64_t *v437;
  unint64_t v438;
  std::__shared_weak_count *v439;
  unint64_t *v440;
  unint64_t v441;
  _QWORD *v442;
  uint64_t v443;
  unint64_t *v444;
  unint64_t v445;
  std::__shared_weak_count *v446;
  unint64_t *v447;
  unint64_t v448;
  std::__shared_weak_count *v449;
  unint64_t *v450;
  unint64_t v451;
  _QWORD *v452;
  uint64_t v453;
  uint64_t v454;
  int v455;
  uint64_t v456;
  uint64_t v457;
  _QWORD *v458;
  _QWORD *v459;
  uint64_t v460;
  unint64_t *v461;
  unint64_t v462;
  std::__shared_weak_count *v463;
  unint64_t *v464;
  unint64_t v465;
  std::__shared_weak_count *v466;
  unint64_t *v467;
  unint64_t v468;
  unint64_t j;
  MIL::IRValueType *OutputType;
  MIL::IRValueType *v471;
  __int128 *v472;
  const MIL::IRValueType *v473;
  const MIL::IRValueType *v474;
  uint64_t v475;
  uint64_t v476;
  int v477;
  uint64_t v478;
  uint64_t v479;
  MIL::IRTypedArgument *v480;
  unsigned __int8 *v481;
  void *v482;
  std::__shared_weak_count *v483;
  unint64_t *v484;
  unint64_t v485;
  const MIL::IRValueType *v486;
  MIL::IRMemoryLayoutValueType *v487;
  MIL::IRTensorBufferValueType *v488;
  uint64_t Shape;
  MIL::IRTypedArgument *TensorBufferArgumentHelper;
  std::__shared_weak_count *v491;
  unint64_t *v492;
  unint64_t v493;
  unsigned __int8 *v494;
  std::string::size_type v495;
  std::vector<int>::pointer v496;
  const MIL::IRValueType *v497;
  MIL::IRMemoryLayoutValueType *v498;
  MIL::IRPixelBufferValueType *v499;
  unsigned int PixelFormatType;
  MIL::IRMemoryLayoutValueType *v501;
  MIL::IRPixelBufferValueType *v502;
  uint64_t v503;
  uint64_t BytesPerRow;
  uint64_t v505;
  uint64_t v506;
  MIL::IRTypedArgument *v507;
  unsigned __int8 *v508;
  std::string::size_type v509;
  std::__shared_weak_count *v510;
  unint64_t *v511;
  unint64_t v512;
  unsigned __int8 *v513;
  std::vector<int>::pointer v514;
  MIL::IRTypedArgument *v515;
  unsigned __int8 *v516;
  void *v517;
  unint64_t *v518;
  uint64_t *v519;
  std::__shared_weak_count *v520;
  unint64_t *v521;
  unint64_t v522;
  uint64_t v523;
  std::__shared_weak_count *v524;
  unint64_t *v525;
  unint64_t v526;
  std::__shared_weak_count *v527;
  unint64_t *v528;
  unint64_t v529;
  unint64_t v530;
  __int128 v531;
  unint64_t *v532;
  unint64_t v533;
  unsigned __int8 *v534;
  std::vector<int>::pointer v535;
  std::__shared_weak_count *v536;
  unint64_t *v537;
  unint64_t v538;
  _QWORD *v539;
  uint64_t v540;
  int v541;
  uint64_t v542;
  uint64_t v543;
  _QWORD *v544;
  _QWORD *v545;
  uint64_t v546;
  unint64_t *v547;
  unint64_t v548;
  std::__shared_weak_count *v549;
  unint64_t *v550;
  unint64_t v551;
  _QWORD *v552;
  _QWORD *v553;
  uint64_t v554;
  uint64_t v555;
  int v556;
  uint64_t v557;
  uint64_t v558;
  _QWORD *v559;
  _QWORD *v560;
  _QWORD *v561;
  uint64_t v562;
  unint64_t *v563;
  unint64_t v564;
  std::__shared_weak_count *v565;
  unint64_t *v566;
  unint64_t v567;
  _QWORD *v568;
  uint64_t v569;
  unint64_t *v570;
  unint64_t v571;
  std::__shared_weak_count *v572;
  unint64_t *v573;
  unint64_t v574;
  _QWORD *LocationPtr;
  uint64_t v576;
  unint64_t *v577;
  unint64_t v578;
  std::__shared_weak_count *v579;
  unint64_t *v580;
  unint64_t v581;
  int *v583;
  int v585[2];
  int *v587;
  int *v588;
  uint64_t v589;
  uint64_t v590;
  void *v594[2];
  char v595;
  __int128 v596;
  void *v597;
  void *v598;
  uint64_t v599;
  uint64_t v600;
  std::__shared_weak_count *v601;
  MIL::Builder::OperationBuilder *v602;
  std::__shared_weak_count *v603;
  uint64_t v604;
  std::__shared_weak_count *v605;
  __int128 v606;
  void *v607;
  char v608;
  __int128 v609;
  uint64_t v610;
  std::__shared_weak_count *v611;
  void *v612[2];
  char v613;
  __int128 v614;
  void *p_p;
  std::__shared_weak_count *v616;
  _QWORD *v617;
  _QWORD *v618;
  uint64_t v619;
  __int128 v620;
  __int128 v621;
  int v622;
  void *v623[2];
  char v624;
  __int128 v625;
  std::string v626;
  void *v627;
  uint64_t v628;
  char v629;
  MIL::Builder::OperationBuilder *v630;
  std::__shared_weak_count *v631;
  uint64_t v632;
  uint64_t v633;
  _QWORD v634[4];
  int v635;
  _QWORD v636[4];
  int v637;
  __int128 v638;
  void *v639[2];
  char v640;
  __int128 v641;
  uint64_t v642;
  std::__shared_weak_count *v643;
  std::vector<int>::value_type __x[5];
  char v645;
  __int128 v646;
  std::string v647;
  __int128 v648;
  __int128 v649;
  int v650;
  MIL::Builder::FunctionBuilder *v651;
  __int128 v652;
  void *v653[2];
  char v654;
  __int128 v655;
  void *v656;
  char v657;
  __int128 v658;
  std::string __p;
  void *v660;
  std::__shared_weak_count *v661;
  char v662;
  __int128 v663;
  std::vector<int> v664;
  std::string::size_type v665;
  std::string::value_type *v666;
  void *v667;
  char v668;
  _BYTE v669[152];
  MIL::Builder::Variable::VariableImpl ***v670;
  MIL::Builder::Variable::VariableImpl ***v671;
  uint64_t v672;
  __int128 *v673;
  __int128 *v674;
  __int128 *v675;
  __int128 *v676;
  __int128 *v677;
  std::string *v678;

  memset(v636, 0, sizeof(v636));
  v637 = 1065353216;
  memset(v634, 0, sizeof(v634));
  v635 = 1065353216;
  MIL::Builder::BlockBuilder::GetOperations(this, (uint64_t)&v632);
  v7 = v632;
  v589 = v633;
  if (v632 == v633)
  {
LABEL_863:
    v664.__begin_ = (std::vector<int>::pointer)&v632;
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v664);
    LocationPtr = (_QWORD *)MIL::Builder::BlockBuilder::GetLocationPtr(this);
    v576 = LocationPtr[1];
    *(_QWORD *)&v596 = *LocationPtr;
    *((_QWORD *)&v596 + 1) = v576;
    if (v576)
    {
      v577 = (unint64_t *)(v576 + 8);
      do
        v578 = __ldxr(v577);
      while (__stxr(v578 + 1, v577));
    }
    std::string::basic_string[abi:ne180100]<0>(v594, "Success");
    MIL::Passes::TypeInferenceResult::TypeInferenceResult(a6, &v596, 2, (uint64_t)v594);
    if (v595 < 0)
      operator delete(v594[0]);
    v579 = (std::__shared_weak_count *)*((_QWORD *)&v596 + 1);
    if (*((_QWORD *)&v596 + 1))
    {
      v580 = (unint64_t *)(*((_QWORD *)&v596 + 1) + 8);
      do
        v581 = __ldaxr(v580);
      while (__stlxr(v581 - 1, v580));
      if (!v581)
      {
        ((void (*)(std::__shared_weak_count *))v579->__on_zero_shared)(v579);
        std::__shared_weak_count::__release_weak(v579);
      }
    }
    goto LABEL_874;
  }
  v587 = *(int **)(MEMORY[0x1E0DE4F60] + 24);
  v588 = (int *)*MEMORY[0x1E0DE4F60];
  v583 = (int *)(MEMORY[0x1E0DE4FB8] + 16);
  while (2)
  {
    v8 = *(MIL::Builder::OperationBuilder **)v7;
    v9 = *(std::__shared_weak_count **)(v7 + 8);
    v630 = *(MIL::Builder::OperationBuilder **)v7;
    v631 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    Operator = MIL::Builder::OperationBuilder::GetOperator(v8);
    v590 = v7;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)Operator + 104))(Operator) & 1) != 0)
    {
      v13 = 3;
      goto LABEL_690;
    }
    v14 = MIL::Builder::OperationBuilder::GetOperator(v630);
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
    if (*(char *)(v15 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v626, *(const std::string::value_type **)v15, *(_QWORD *)(v15 + 8));
    }
    else
    {
      v16 = *(_OWORD *)v15;
      v626.__r_.__value_.__r.__words[2] = *(_QWORD *)(v15 + 16);
      *(_OWORD *)&v626.__r_.__value_.__l.__data_ = v16;
    }
    if (SHIBYTE(v626.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v626.__r_.__value_.__l.__data_);
    if (v629 < 0)
    {
      if (v628 == 14)
      {
        v18 = (uint64_t *)v627;
        goto LABEL_18;
      }
    }
    else if (v629 == 14)
    {
      v18 = (uint64_t *)&v627;
LABEL_18:
      v19 = *v18;
      v20 = *(uint64_t *)((char *)v18 + 6);
      v21 = v19 == 0x6172745F766E6F63 && v20 == 0x65736F70736E6172;
      if (v21)
      {
        MIL::Builder::OperationBuilder::GetParameterNames((unsigned __int8 **)v630, (uint64_t)&v664);
        std::string::basic_string[abi:ne180100]<0>(&v648, "output_shape");
        v109 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(&v664, (unsigned __int8 *)&v648);
        if (SBYTE7(v649) < 0)
          operator delete((void *)v648);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v664);
        if (v109)
        {
          v110 = (_QWORD *)MIL::Builder::OperationBuilder::GetLocationPtr(v630);
          v111 = v110[1];
          *(_QWORD *)&v625 = *v110;
          *((_QWORD *)&v625 + 1) = v111;
          if (v111)
          {
            v112 = (unint64_t *)(v111 + 8);
            do
              v113 = __ldxr(v112);
            while (__stxr(v113 + 1, v112));
          }
          std::string::basic_string[abi:ne180100]<0>(v623, "Could not infer a new output shape for conv_transpose when \"output_shape\" is given as an input. If you would like the op output shape to change according to the new input, try removing \"output_shape\" with caution.");
          MIL::Passes::TypeInferenceResult::TypeInferenceResult(a6, &v625, 3, (uint64_t)v623);
          if (v624 < 0)
            operator delete(v623[0]);
          v114 = (std::__shared_weak_count *)*((_QWORD *)&v625 + 1);
          if (*((_QWORD *)&v625 + 1))
          {
            v115 = (unint64_t *)(*((_QWORD *)&v625 + 1) + 8);
            do
              v116 = __ldaxr(v115);
            while (__stlxr(v116 - 1, v115));
            if (!v116)
            {
              ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
              std::__shared_weak_count::__release_weak(v114);
            }
          }
          v13 = 1;
          goto LABEL_688;
        }
      }
    }
    v22 = a6;
    v620 = 0u;
    v621 = 0u;
    v622 = 1065353216;
    v23 = v630;
    Parameters = (_QWORD *)MIL::BuilderPrivate::OperationBuilderPrivate::GetParameters(v630, v17);
    v26 = Parameters + 1;
    v25 = (_QWORD *)*Parameters;
    if ((_QWORD *)*Parameters == Parameters + 1)
      goto LABEL_130;
    while (2)
    {
      v648 = 0uLL;
      *(_QWORD *)&v649 = 0;
      if (*((char *)v25 + 55) < 0)
        std::string::__init_copy_ctor_external(&v647, (const std::string::value_type *)v25[4], v25[5]);
      else
        v647 = *(std::string *)(v25 + 4);
      v27 = v22;
      v29 = v25[7];
      v28 = v25[8];
      while (v29 != v28)
      {
        v31 = *(MIL::IRArgument **)v29;
        v30 = *(_QWORD *)(v29 + 8);
        *(_QWORD *)__x = *(_QWORD *)v29;
        *(_QWORD *)&__x[2] = v30;
        if (v30)
        {
          v32 = (unint64_t *)(v30 + 8);
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
        }
        if ((*(unsigned int (**)(MIL::IRArgument *))(*(_QWORD *)v31 + 24))(v31))
        {
          (*(void (**)(void **__return_ptr, MIL::IRArgument *))(*(_QWORD *)v31 + 48))(v639, v31);
          MIL::IRTypedArgument::Make((uint64_t *)v639, &v664);
          v34 = *((_QWORD *)&v648 + 1);
          if (*((_QWORD *)&v648 + 1) >= (unint64_t)v649)
          {
            v48 = std::vector<std::shared_ptr<MIL::IRTypedArgument>>::__emplace_back_slow_path<std::unique_ptr<MIL::IRTypedArgument>>((uint64_t *)&v648, (uint64_t *)&v664);
            begin = v664.__begin_;
            *((_QWORD *)&v648 + 1) = v48;
            v664.__begin_ = 0;
            if (begin)
              (*(void (**)(std::vector<int>::pointer))(*(_QWORD *)begin + 8))(begin);
          }
          else
          {
            v35 = v664.__begin_;
            **((_QWORD **)&v648 + 1) = v664.__begin_;
            if (v35)
            {
              v36 = (_QWORD *)operator new();
              v37 = v664.__begin_;
              *v36 = &unk_1EA994910;
              v36[1] = 0;
              v36[2] = 0;
              v36[3] = v37;
            }
            else
            {
              v36 = 0;
            }
            *(_QWORD *)(v34 + 8) = v36;
            *((_QWORD *)&v648 + 1) = v34 + 16;
            v664.__begin_ = 0;
          }
          v50 = (std::__shared_weak_count *)v639[1];
          if (v639[1])
          {
            v51 = (unint64_t *)((char *)v639[1] + 8);
            do
              v52 = __ldaxr(v51);
            while (__stlxr(v52 - 1, v51));
            goto LABEL_83;
          }
        }
        else
        {
          Name = MIL::IRArgument::GetName(v31);
          Variable = MIL::Builder::BlockBuilder::TryGetVariable((std::string::size_type)this, Name);
          v40 = (MIL::Builder::Variable::VariableImpl **)Variable;
          if (!Variable)
            goto LABEL_53;
          MIL::Builder::Variable::TryGetValueSharedPtr((MIL::Builder::Variable::VariableImpl **)Variable, &v664);
          v41 = v664.__begin_;
          end = (std::__shared_weak_count *)v664.__end_;
          if (!v664.__end_)
            goto LABEL_40;
          v43 = (unint64_t *)(v664.__end_ + 2);
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))end->__on_zero_shared)(end);
            std::__shared_weak_count::__release_weak(end);
            if (!v41)
            {
LABEL_52:
              Type = (MIL::IRTypedArgument *)MIL::Builder::Variable::TryGetType(v40);
              v27 = v22;
              if (!Type)
              {
LABEL_53:
                Input = (MIL::Builder::Variable::VariableImpl **)MIL::Builder::FunctionBuilder::TryGetInput(a3, Name);
                if (!Input || (Type = (MIL::IRTypedArgument *)MIL::Builder::Variable::TryGetType(Input)) == 0)
                {
                  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v664);
                  v86 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v664, (uint64_t)"Could not deduce type of arg: ", 30);
                  v87 = *(char *)(Name + 23);
                  if (v87 >= 0)
                    v88 = Name;
                  else
                    v88 = *(_QWORD *)Name;
                  if (v87 >= 0)
                    v89 = *(unsigned __int8 *)(Name + 23);
                  else
                    v89 = *(_QWORD *)(Name + 8);
                  v90 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, v88, v89);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)".", 1);
                  v91 = (_QWORD *)MIL::Builder::OperationBuilder::GetLocationPtr(v23);
                  v92 = v91[1];
                  *(_QWORD *)&v652 = *v91;
                  *((_QWORD *)&v652 + 1) = v92;
                  if (v92)
                  {
                    v93 = (unint64_t *)(v92 + 8);
                    do
                      v94 = __ldxr(v93);
                    while (__stxr(v94 + 1, v93));
                  }
                  std::stringbuf::str();
                  MIL::Passes::TypeInferenceResult::TypeInferenceResult(v27, &v652, 3, (uint64_t)&__p);
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__p.__r_.__value_.__l.__data_);
                  v95 = (std::__shared_weak_count *)*((_QWORD *)&v652 + 1);
                  if (*((_QWORD *)&v652 + 1))
                  {
                    v96 = (unint64_t *)(*((_QWORD *)&v652 + 1) + 8);
                    do
                      v97 = __ldaxr(v96);
                    while (__stlxr(v97 - 1, v96));
                    if (!v97)
                    {
                      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                      std::__shared_weak_count::__release_weak(v95);
                    }
                  }
                  v664.__begin_ = v588;
                  *(std::vector<int>::pointer *)((char *)&v664.__begin_ + *((_QWORD *)v588 - 3)) = v587;
                  v664.__end_ = (std::vector<int>::pointer)(MEMORY[0x1E0DE4FB8] + 16);
                  if (v668 < 0)
                    operator delete(v667);
                  std::streambuf::~streambuf();
                  std::ostream::~ostream();
                  MEMORY[0x1E0C022F8](v669);
                  v98 = *(std::__shared_weak_count **)&__x[2];
                  if (*(_QWORD *)&__x[2])
                  {
                    v99 = (unint64_t *)(*(_QWORD *)&__x[2] + 8);
                    do
                      v100 = __ldaxr(v99);
                    while (__stlxr(v100 - 1, v99));
                    if (!v100)
                    {
                      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                      std::__shared_weak_count::__release_weak(v98);
                    }
                  }
                  v83 = 0;
                  goto LABEL_96;
                }
              }
              if (std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a4, (unsigned __int8 *)Name))
              {
                v55 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a4, (unsigned __int8 *)Name);
                if (!v55)
                  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
                std::vector<std::shared_ptr<MIL::IRTypedArgument>>::emplace_back<std::shared_ptr<MIL::IRTypedArgument> const&>((char **)&v648, (__int128 *)(v55 + 40));
              }
              else
              {
                MIL::IRTypedArgument::Make(Type, &v664);
                v56 = *((_QWORD *)&v648 + 1);
                if (*((_QWORD *)&v648 + 1) >= (unint64_t)v649)
                {
                  v74 = std::vector<std::shared_ptr<MIL::IRTypedArgument>>::__emplace_back_slow_path<std::unique_ptr<MIL::IRTypedArgument>>((uint64_t *)&v648, (uint64_t *)&v664);
                  v75 = v664.__begin_;
                  *((_QWORD *)&v648 + 1) = v74;
                  v664.__begin_ = 0;
                  if (v75)
                    (*(void (**)(std::vector<int>::pointer))(*(_QWORD *)v75 + 8))(v75);
                }
                else
                {
                  v57 = v664.__begin_;
                  **((_QWORD **)&v648 + 1) = v664.__begin_;
                  if (v57)
                  {
                    v58 = (_QWORD *)operator new();
                    v59 = v664.__begin_;
                    *v58 = &unk_1EA994910;
                    v58[1] = 0;
                    v58[2] = 0;
                    v58[3] = v59;
                  }
                  else
                  {
                    v58 = 0;
                  }
                  *(_QWORD *)(v56 + 8) = v58;
                  *((_QWORD *)&v648 + 1) = v56 + 16;
                }
              }
              goto LABEL_87;
            }
          }
          else
          {
LABEL_40:
            if (!v41)
              goto LABEL_52;
          }
          MIL::Builder::Variable::TryGetValueSharedPtr(v40, &p_p);
          MIL::IRTypedArgument::Make((uint64_t *)&p_p, &v646);
          v45 = v646;
          v617 = (_QWORD *)v646;
          if ((_QWORD)v646)
          {
            v46 = (_QWORD *)operator new();
            v47 = v646;
            *v46 = &unk_1EA994910;
            v46[1] = 0;
            v46[2] = 0;
            v46[3] = v47;
          }
          else
          {
            v46 = 0;
          }
          v618 = v46;
          *(_QWORD *)&v646 = 0;
          v60 = *((_QWORD *)&v648 + 1);
          if (*((_QWORD *)&v648 + 1) >= (unint64_t)v649)
          {
            v62 = (uint64_t)(*((_QWORD *)&v648 + 1) - v648) >> 4;
            v63 = v62 + 1;
            if ((unint64_t)(v62 + 1) >> 60)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v64 = v649 - v648;
            if ((uint64_t)(v649 - v648) >> 3 > v63)
              v63 = v64 >> 3;
            if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF0)
              v65 = 0xFFFFFFFFFFFFFFFLL;
            else
              v65 = v63;
            v666 = (std::string::value_type *)&v649;
            v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)&v649, v65);
            v68 = &v66[16 * v62];
            *(_QWORD *)v68 = v45;
            *((_QWORD *)v68 + 1) = v46;
            v618 = 0;
            v617 = 0;
            v69 = (_QWORD *)*((_QWORD *)&v648 + 1);
            v70 = (_QWORD *)v648;
            if (*((_QWORD *)&v648 + 1) == (_QWORD)v648)
            {
              v73 = (__int128)vdupq_n_s64(*((unint64_t *)&v648 + 1));
              v71 = &v66[16 * v62];
            }
            else
            {
              v71 = &v66[16 * v62];
              do
              {
                v72 = *((_OWORD *)v69 - 1);
                v69 -= 2;
                *((_OWORD *)v71 - 1) = v72;
                v71 -= 16;
                *v69 = 0;
                v69[1] = 0;
              }
              while (v69 != v70);
              v73 = v648;
            }
            v61 = v68 + 16;
            *(_QWORD *)&v648 = v71;
            *((_QWORD *)&v648 + 1) = v68 + 16;
            *(_OWORD *)&v664.__end_ = v73;
            v76 = v649;
            *(_QWORD *)&v649 = &v66[16 * v67];
            v665 = v76;
            v664.__begin_ = (std::vector<int>::pointer)v73;
            std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v664);
          }
          else
          {
            **((_QWORD **)&v648 + 1) = v45;
            *(_QWORD *)(v60 + 8) = v46;
            v61 = (_QWORD *)(v60 + 16);
            v618 = 0;
            v617 = 0;
          }
          *((_QWORD *)&v648 + 1) = v61;
          v77 = v646;
          *(_QWORD *)&v646 = 0;
          if (v77)
            (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
          v50 = v616;
          v27 = v22;
          if (v616)
          {
            v78 = (unint64_t *)&v616->__shared_owners_;
            do
              v52 = __ldaxr(v78);
            while (__stlxr(v52 - 1, v78));
LABEL_83:
            if (!v52)
            {
              ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
              std::__shared_weak_count::__release_weak(v50);
            }
          }
        }
LABEL_87:
        v79 = *(std::__shared_weak_count **)&__x[2];
        if (*(_QWORD *)&__x[2])
        {
          v80 = (unint64_t *)(*(_QWORD *)&__x[2] + 8);
          do
            v81 = __ldaxr(v80);
          while (__stlxr(v81 - 1, v80));
          if (!v81)
          {
            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
            std::__shared_weak_count::__release_weak(v79);
          }
        }
        v29 += 16;
      }
      v664.__begin_ = (std::vector<int>::pointer)&v647;
      v82 = (__int128 *)(std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v620, (unsigned __int8 *)&v647, (uint64_t)&std::piecewise_construct, (__int128 **)&v664)+ 40);
      if (v82 != &v648)
        std::vector<std::shared_ptr<MIL::IRArgument>>::__assign_with_size[abi:ne180100]<std::shared_ptr<MIL::IRArgument> const*,std::shared_ptr<MIL::IRArgument> const*>((uint64_t)v82, (uint64_t *)v648, *((uint64_t **)&v648 + 1), (uint64_t)(*((_QWORD *)&v648 + 1) - v648) >> 4);
      v83 = 1;
LABEL_96:
      if (SHIBYTE(v647.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v647.__r_.__value_.__l.__data_);
      v664.__begin_ = (std::vector<int>::pointer)&v648;
      std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v664);
      if (v83)
      {
        v84 = (_QWORD *)v25[1];
        if (v84)
        {
          do
          {
            v85 = v84;
            v84 = (_QWORD *)*v84;
          }
          while (v84);
        }
        else
        {
          do
          {
            v85 = (_QWORD *)v25[2];
            v21 = *v85 == (_QWORD)v25;
            v25 = v85;
          }
          while (!v21);
        }
        v25 = v85;
        if (v85 == v26)
        {
LABEL_130:
          v101 = (_QWORD *)MIL::Builder::OperationBuilder::GetLocationPtr(v23);
          v102 = v101[1];
          *(_QWORD *)&v648 = *v101;
          *((_QWORD *)&v648 + 1) = v102;
          if (v102)
          {
            v103 = (unint64_t *)(v102 + 8);
            do
              v104 = __ldxr(v103);
            while (__stxr(v104 + 1, v103));
          }
          std::string::basic_string[abi:ne180100]<0>(&v664, "Success");
          MIL::Passes::TypeInferenceResult::TypeInferenceResult(v22, &v648, 2, (uint64_t)&v664);
          if (SHIBYTE(v664.__end_cap_.__value_) < 0)
            operator delete(v664.__begin_);
          v105 = (std::__shared_weak_count *)*((_QWORD *)&v648 + 1);
          if (*((_QWORD *)&v648 + 1))
          {
            v106 = (unint64_t *)(*((_QWORD *)&v648 + 1) + 8);
            do
              v107 = __ldaxr(v106);
            while (__stlxr(v107 - 1, v106));
            if (!v107)
            {
              ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
              std::__shared_weak_count::__release_weak(v105);
            }
          }
          break;
        }
        continue;
      }
      break;
    }
    a6 = v22;
    if (*(_DWORD *)(v22 + 48) != 2)
    {
      v13 = 1;
      goto LABEL_687;
    }
    MIL::MILResult::~MILResult((void **)v22);
    v618 = 0;
    v617 = 0;
    v619 = 0;
    if ((v629 & 0x80000000) == 0)
    {
      if (v629 == 10)
      {
        v108 = (unsigned __int16 *)&v627;
        goto LABEL_161;
      }
      goto LABEL_165;
    }
    if (v628 != 10)
      goto LABEL_165;
    v108 = (unsigned __int16 *)v627;
LABEL_161:
    v117 = *(_QWORD *)v108;
    v118 = v108[4];
    if (v117 != 0x6F6C5F656C696877 || v118 != 28783)
    {
LABEL_165:
      goto LABEL_166;
    }
    v127 = v630;
    v648 = 0uLL;
    *(_QWORD *)&v649 = 0;
    memset(&v647, 0, sizeof(v647));
    std::string::basic_string[abi:ne180100]<0>(&v664, "loop_vars");
    NumArguments = MIL::Builder::OperationBuilder::GetNumArguments((uint64_t)v127, (const void **)&v664.__begin_);
    v129 = NumArguments;
    if (SHIBYTE(v664.__end_cap_.__value_) < 0)
    {
      operator delete(v664.__begin_);
      if (!v129)
        goto LABEL_246;
    }
    else if (!NumArguments)
    {
LABEL_246:
      v163 = (std::string::size_type *)MIL::Builder::OperationBuilder::GetLocationPtr(v127);
      v164 = v163[1];
      __p.__r_.__value_.__r.__words[0] = *v163;
      __p.__r_.__value_.__l.__size_ = v164;
      if (v164)
      {
        v165 = (unint64_t *)(v164 + 8);
        do
          v166 = __ldxr(v165);
        while (__stxr(v166 + 1, v165));
      }
      std::string::basic_string[abi:ne180100]<0>(&v664, "Success");
      MIL::Passes::TypeInferenceResult::TypeInferenceResult(v22, (__int128 *)&__p, 2, (uint64_t)&v664);
      if (SHIBYTE(v664.__end_cap_.__value_) < 0)
        operator delete(v664.__begin_);
      size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v168 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v169 = __ldaxr(v168);
        while (__stlxr(v169 - 1, v168));
LABEL_285:
        if (!v169)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      goto LABEL_287;
    }
    v140 = 0;
    while (2)
    {
      std::string::basic_string[abi:ne180100]<0>(&v664, "loop_vars");
      ArgumentForParameter = (MIL::Builder::Variable::VariableImpl **)MIL::Builder::OperationBuilder::GetArgumentForParameter((std::string::size_type)v127, (uint64_t)&v664, v140);
      if (SHIBYTE(v664.__end_cap_.__value_) < 0)
        operator delete(v664.__begin_);
      v142 = (unsigned __int8 *)MIL::Builder::Variable::TryGetName(ArgumentForParameter);
      if (v142
        && std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a4, v142))
      {
        v143 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a4, v142);
        if (!v143)
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        ValueType = MIL::IRTypedArgument::TryGetValueType(*((MIL::IRTypedArgument::IRTypedArgumentImpl ***)v143 + 5));
        v145 = ValueType;
        if (ValueType)
        {
          v146 = *((_QWORD *)&v648 + 1);
          if (*((_QWORD *)&v648 + 1) < (unint64_t)v649)
          {
            **((_QWORD **)&v648 + 1) = ValueType;
            v147 = (_QWORD *)(v146 + 8);
            goto LABEL_245;
          }
          v159 = (uint64_t)(*((_QWORD *)&v648 + 1) - v648) >> 3;
          if ((unint64_t)(v159 + 1) >> 61)
LABEL_877:
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v160 = (uint64_t)(v649 - v648) >> 2;
          if (v160 <= v159 + 1)
            v160 = v159 + 1;
          if ((_QWORD)v649 - (_QWORD)v648 >= 0x7FFFFFFFFFFFFFF8uLL)
            v153 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v153 = v160;
          if (v153)
            v154 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v649, v153);
          else
            v154 = 0;
          v155 = &v154[8 * v159];
          *(_QWORD *)v155 = v145;
          v147 = v155 + 8;
          v156 = (char *)*((_QWORD *)&v648 + 1);
          v161 = (char *)v648;
          if (*((_QWORD *)&v648 + 1) != (_QWORD)v648)
          {
            do
            {
              v162 = *((_QWORD *)v156 - 1);
              v156 -= 8;
              *((_QWORD *)v155 - 1) = v162;
              v155 -= 8;
            }
            while (v156 != v161);
            goto LABEL_242;
          }
          goto LABEL_243;
        }
      }
      v148 = MIL::Builder::Variable::TryGetType(ArgumentForParameter);
      v149 = v148;
      if (v148)
      {
        v150 = *((_QWORD *)&v648 + 1);
        if (*((_QWORD *)&v648 + 1) >= (unint64_t)v649)
        {
          v151 = (uint64_t)(*((_QWORD *)&v648 + 1) - v648) >> 3;
          if ((unint64_t)(v151 + 1) >> 61)
            goto LABEL_877;
          v152 = (uint64_t)(v649 - v648) >> 2;
          if (v152 <= v151 + 1)
            v152 = v151 + 1;
          if ((_QWORD)v649 - (_QWORD)v648 >= 0x7FFFFFFFFFFFFFF8uLL)
            v153 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v153 = v152;
          if (v153)
            v154 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v649, v153);
          else
            v154 = 0;
          v155 = &v154[8 * v151];
          *(_QWORD *)v155 = v149;
          v147 = v155 + 8;
          v156 = (char *)*((_QWORD *)&v648 + 1);
          v157 = (char *)v648;
          if (*((_QWORD *)&v648 + 1) != (_QWORD)v648)
          {
            do
            {
              v158 = *((_QWORD *)v156 - 1);
              v156 -= 8;
              *((_QWORD *)v155 - 1) = v158;
              v155 -= 8;
            }
            while (v156 != v157);
LABEL_242:
            v156 = (char *)v648;
          }
LABEL_243:
          *(_QWORD *)&v648 = v155;
          *((_QWORD *)&v648 + 1) = v147;
          *(_QWORD *)&v649 = &v154[8 * v153];
          if (v156)
            operator delete(v156);
        }
        else
        {
          **((_QWORD **)&v648 + 1) = v148;
          v147 = (_QWORD *)(v150 + 8);
        }
LABEL_245:
        *((_QWORD *)&v648 + 1) = v147;
        if (++v140 == v129)
          goto LABEL_246;
        continue;
      }
      break;
    }
    v180 = (std::string::size_type *)MIL::Builder::OperationBuilder::GetLocationPtr(v127);
    v181 = v180[1];
    __p.__r_.__value_.__r.__words[0] = *v180;
    __p.__r_.__value_.__l.__size_ = v181;
    if (v181)
    {
      v182 = (unint64_t *)(v181 + 8);
      do
        v183 = __ldxr(v182);
      while (__stxr(v183 + 1, v182));
    }
    std::string::basic_string[abi:ne180100]<0>(&v664, "Could not get the type for a while_loop var");
    MIL::Passes::TypeInferenceResult::TypeInferenceResult(v22, (__int128 *)&__p, 5, (uint64_t)&v664);
    if (SHIBYTE(v664.__end_cap_.__value_) < 0)
      operator delete(v664.__begin_);
    size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v184 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v169 = __ldaxr(v184);
      while (__stlxr(v169 - 1, v184));
      goto LABEL_285;
    }
LABEL_287:
    if (*(_DWORD *)(v22 + 48) == 2)
    {
      MIL::MILResult::~MILResult((void **)v22);
      if (*(_DWORD *)(v22 + 48) == 2)
      {
        MIL::MILResult::~MILResult((void **)v22);
        v185 = *((_QWORD *)&v648 + 1);
        v186 = v648;
        v187 = (uint64_t)(*((_QWORD *)&v648 + 1) - v648) >> 3;
        v188 = v647.__r_.__value_.__r.__words[0];
        memset(&v664, 0, sizeof(v664));
        std::vector<std::string const*>::reserve((void **)&v664.__begin_, v187);
        if (v185 == v186)
        {
LABEL_481:
          std::vector<std::vector<MIL::IRValueType const*>>::__assign_with_size[abi:ne180100]<std::vector<MIL::IRValueType const*>*,std::vector<MIL::IRValueType const*>*>((uint64_t)&v617, (uint64_t)v647.__r_.__value_.__l.__data_, v647.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v647.__r_.__value_.__l.__size_ - v647.__r_.__value_.__r.__words[0]) >> 3));
LABEL_482:
          v326 = (_QWORD *)MIL::Builder::OperationBuilder::GetLocationPtr(v127);
          v327 = v326[1];
          *(_QWORD *)__x = *v326;
          *(_QWORD *)&__x[2] = v327;
          if (v327)
          {
            v328 = (unint64_t *)(v327 + 8);
            do
              v329 = __ldxr(v328);
            while (__stxr(v329 + 1, v328));
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, "Success");
          a6 = v22;
          MIL::Passes::TypeInferenceResult::TypeInferenceResult(v22, (__int128 *)__x, 2, (uint64_t)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v330 = *(std::__shared_weak_count **)&__x[2];
          if (*(_QWORD *)&__x[2])
          {
            v331 = (unint64_t *)(*(_QWORD *)&__x[2] + 8);
            do
              v332 = __ldaxr(v331);
            while (__stlxr(v332 - 1, v331));
LABEL_499:
            if (!v332)
            {
              ((void (*)(std::__shared_weak_count *))v330->__on_zero_shared)(v330);
              std::__shared_weak_count::__release_weak(v330);
            }
          }
        }
        else
        {
          v189 = 0;
          v190 = 0;
          if (v187 <= 1)
            v191 = 1;
          else
            v191 = v187;
          while (1)
          {
            v192 = *(MIL::MILContext **)(v648 + 8 * v189);
            MIL::Builder::FunctionBuilder::GetContext(a3, &__p);
            v194 = *(_QWORD *)(v188 + 24);
            if (v189 >= (*(_QWORD *)(v188 + 32) - v194) >> 3)
              std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
            StrongestCompatibleType = MIL::GetStrongestCompatibleType((void (***)(MIL::MILContextImpl *__hidden))__p.__r_.__value_.__l.__data_, v192, *(const MIL::IRValueType **)(v194 + 8 * v189), v193);
            a6 = v22;
            v196 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
            if (__p.__r_.__value_.__l.__size_)
            {
              v197 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
              do
                v198 = __ldaxr(v197);
              while (__stlxr(v198 - 1, v197));
              if (!v198)
              {
                ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
                std::__shared_weak_count::__release_weak(v196);
              }
            }
            if (!StrongestCompatibleType)
              break;
            v199 = StrongestCompatibleType != v192;
            v200 = v664.__end_;
            if (v664.__end_ >= v664.__end_cap_.__value_)
            {
              v202 = ((char *)v664.__end_ - (char *)v664.__begin_) >> 3;
              if ((unint64_t)(v202 + 1) >> 61)
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              v203 = v664.__end_cap_.__value_ - v664.__begin_;
              if (v203 <= v202 + 1)
                v203 = v202 + 1;
              if ((int *)((char *)v664.__end_cap_.__value_ - (char *)v664.__begin_) >= (int *)0x7FFFFFFFFFFFFFF8)
                v204 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v204 = v203;
              if (v204)
                v205 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v664.__end_cap_, v204);
              else
                v205 = 0;
              v206 = (int *)&v205[8 * v202];
              *(_QWORD *)v206 = StrongestCompatibleType;
              v201 = v206 + 2;
              v207 = v664.__end_;
              v208 = v664.__begin_;
              if (v664.__end_ != v664.__begin_)
              {
                do
                {
                  v209 = *((_QWORD *)v207 - 1);
                  v207 -= 2;
                  *((_QWORD *)v206 - 1) = v209;
                  v206 -= 2;
                }
                while (v207 != v208);
                v207 = v664.__begin_;
              }
              v664.__begin_ = v206;
              v664.__end_ = v201;
              v664.__end_cap_.__value_ = (int *)&v205[8 * v204];
              if (v207)
                operator delete(v207);
            }
            else
            {
              *(_QWORD *)v664.__end_ = StrongestCompatibleType;
              v201 = v200 + 2;
            }
            v190 |= v199;
            v664.__end_ = v201;
            if (++v189 == v191)
            {
              if ((v190 & 1) == 0)
                goto LABEL_481;
              memset(&__p, 0, sizeof(__p));
              a6 = v22;
              if (*(_DWORD *)(v22 + 48) == 2)
              {
                MIL::MILResult::~MILResult((void **)v22);
                if (v188 != __p.__r_.__value_.__r.__words[0])
                  std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)(v188 + 24), *(char **)(__p.__r_.__value_.__r.__words[0] + 24), *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 32), (uint64_t)(*(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 32)- *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 24)) >> 3);
                v211 = 0;
                while (1)
                {
                  if (v211 >= ((char *)v664.__end_ - (char *)v664.__begin_) >> 3
                    || (v212 = *(_QWORD *)(v188 + 24), v211 >= (*(_QWORD *)(v188 + 32) - v212) >> 3))
                  {
                    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
                  }
                  if ((MIL::IsEqualOrStrongerType(*(MIL **)&v664.__begin_[2 * v211], *(const MIL::IRValueType **)(v212 + 8 * v211), v210) & 1) == 0)break;
                  if (v191 == ++v211)
                  {
                    std::vector<std::vector<MIL::IRValueType const*>>::__assign_with_size[abi:ne180100]<std::vector<MIL::IRValueType const*>*,std::vector<MIL::IRValueType const*>*>((uint64_t)&v617, (uint64_t)__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3));
                    *(_QWORD *)__x = &__p;
                    std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
                    goto LABEL_482;
                  }
                }
                v385 = MIL::Builder::OperationBuilder::GetLocationPtr(v127);
                v386 = *(unint64_t **)(v385 + 8);
                v639[0] = *(void **)v385;
                v639[1] = v386;
                if (v386)
                {
                  v387 = v386 + 1;
                  do
                    v388 = __ldxr(v387);
                  while (__stxr(v388 + 1, v387));
                }
                std::string::basic_string[abi:ne180100]<0>(__x, "Unable to find compatible nested block input types for while_loop");
                MIL::Passes::TypeInferenceResult::TypeInferenceResult(v22, (__int128 *)v639, 5, (uint64_t)__x);
                if (v645 < 0)
                  operator delete(*(void **)__x);
                std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v639);
              }
              p_p = &__p;
              std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
              goto LABEL_593;
            }
          }
          v333 = (_QWORD *)MIL::Builder::OperationBuilder::GetLocationPtr(v127);
          v334 = v333[1];
          *(_QWORD *)__x = *v333;
          *(_QWORD *)&__x[2] = v334;
          if (v334)
          {
            v335 = (unint64_t *)(v334 + 8);
            do
              v336 = __ldxr(v335);
            while (__stxr(v336 + 1, v335));
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, "Could not reconcile loop_var types & body block output types");
          MIL::Passes::TypeInferenceResult::TypeInferenceResult(v22, (__int128 *)__x, 5, (uint64_t)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v330 = *(std::__shared_weak_count **)&__x[2];
          if (*(_QWORD *)&__x[2])
          {
            v337 = (unint64_t *)(*(_QWORD *)&__x[2] + 8);
            do
              v332 = __ldaxr(v337);
            while (__stlxr(v332 - 1, v337));
            goto LABEL_499;
          }
        }
LABEL_593:
        if (v664.__begin_)
        {
          v664.__end_ = v664.__begin_;
          operator delete(v664.__begin_);
        }
      }
    }
    v664.__begin_ = (std::vector<int>::pointer)&v647;
    std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v664);
    if ((_QWORD)v648)
    {
      *((_QWORD *)&v648 + 1) = v648;
      operator delete((void *)v648);
    }
LABEL_166:
    if (*(_DWORD *)(a6 + 48) != 2)
    {
      v13 = 1;
      goto LABEL_686;
    }
    MIL::MILResult::~MILResult((void **)a6);
    *(_QWORD *)v585 = MIL::Builder::OperationBuilder::GetOperator(v630);
    MIL::Builder::OperationBuilder::GetOutputs((MIL::Builder::OperationBuilder::OperationBuilderImpl **)v630, &p_p);
    if (!(*(unsigned int (**)(int *))(**(_QWORD **)v585 + 128))(*(int **)v585))
    {
      v648 = 0u;
      v649 = 0u;
      v650 = 1065353216;
      v124 = v630;
      v125 = (*(uint64_t (**)(int *))(**(_QWORD **)v585 + 16))(*(int **)v585);
      if (*(char *)(v125 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v647, *(const std::string::value_type **)v125, *(_QWORD *)(v125 + 8));
      }
      else
      {
        v126 = *(_OWORD *)v125;
        v647.__r_.__value_.__r.__words[2] = *(_QWORD *)(v125 + 16);
        *(_OWORD *)&v647.__r_.__value_.__l.__data_ = v126;
      }
      if (SHIBYTE(v664.__end_cap_.__value_) < 0)
      {
        v131 = v664.__end_ != (std::vector<int>::pointer)5
            || *v664.__begin_ != 1885431923
            || *((_BYTE *)v664.__begin_ + 4) != 101;
        operator delete(v664.__begin_);
      }
      else
      {
        v131 = SHIBYTE(v664.__end_cap_.__value_) != 5
            || LODWORD(v664.__begin_) != 1885431923
            || BYTE4(v664.__begin_) != 101;
      }
      if (SHIBYTE(v647.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v647.__r_.__value_.__l.__data_);
        if (v131)
        {
LABEL_331:
          v213 = (std::string::size_type *)MIL::Builder::OperationBuilder::GetLocationPtr(v124);
          v214 = v213[1];
          __p.__r_.__value_.__r.__words[0] = *v213;
          __p.__r_.__value_.__l.__size_ = v214;
          if (v214)
          {
            v215 = (unint64_t *)(v214 + 8);
            do
              v216 = __ldxr(v215);
            while (__stxr(v216 + 1, v215));
          }
          std::string::basic_string[abi:ne180100]<0>(&v664, "Success");
          MIL::Passes::TypeInferenceResult::TypeInferenceResult(a6, (__int128 *)&__p, 2, (uint64_t)&v664);
          if (SHIBYTE(v664.__end_cap_.__value_) < 0)
            operator delete(v664.__begin_);
          v217 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v218 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v219 = __ldaxr(v218);
            while (__stlxr(v219 - 1, v218));
            if (!v219)
            {
              ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
              std::__shared_weak_count::__release_weak(v217);
            }
          }
LABEL_607:
          v272 = 1;
          goto LABEL_608;
        }
      }
      else if (v131)
      {
        goto LABEL_331;
      }
      v220 = (uint64_t *)v621;
      if ((_QWORD)v621)
      {
        while (2)
        {
          memset(&__p, 0, sizeof(__p));
          v221 = (MIL::IRTypedArgument::IRTypedArgumentImpl ***)v220[5];
          v222 = (MIL::IRTypedArgument::IRTypedArgumentImpl ***)v220[6];
          while (v221 != v222)
          {
            if (!MIL::IRTypedArgument::IsValue((MIL::IRTypedArgument *)*v221))
            {
              v224 = MIL::IRTypedArgument::GetValueType(*v221);
              v225 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v224 + 24))(v224);
              v226 = v225;
              if (v225 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v225 + 104))(v225) & 1) != 0)
              {
                v227 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v226 + 96))(v226);
                v229 = *(_QWORD **)v227;
                v228 = *(_QWORD **)(v227 + 8);
                while (1)
                {
                  if (v229 == v228)
                  {
                    v230 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v226 + 16))(v226);
                    v231 = (MIL::Fp16 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v226 + 88))(v226);
                    a6 = v22;
                    switch((int)v231)
                    {
                      case 2:
                        LOBYTE(__x[0]) = 0;
                        std::vector<BOOL>::vector(&v664, v230, (unsigned __int8 *)__x);
                        MIL::IRTensorValueType::MakeBoolValue(v226, (uint64_t)&v664, __x);
                        v232 = __p.__r_.__value_.__l.__size_;
                        if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
                        {
                          v259 = std::vector<std::shared_ptr<MIL::IRValue const>>::__emplace_back_slow_path<std::unique_ptr<MIL::IRTensorValue const>>((uint64_t *)&__p, (uint64_t *)__x);
                          v260 = *(_QWORD *)__x;
                          __p.__r_.__value_.__l.__size_ = v259;
                          *(_QWORD *)__x = 0;
                          if (v260)
                            (*(void (**)(uint64_t))(*(_QWORD *)v260 + 8))(v260);
                        }
                        else
                        {
                          v233 = *(_QWORD *)__x;
                          *(_QWORD *)__p.__r_.__value_.__l.__size_ = *(_QWORD *)__x;
                          if (v233)
                          {
                            v234 = (_QWORD *)operator new();
                            v235 = *(_QWORD *)__x;
                            *v234 = &unk_1EA992A68;
                            v234[1] = 0;
                            v234[2] = 0;
                            v234[3] = v235;
                          }
                          else
                          {
                            v234 = 0;
                          }
                          *(_QWORD *)(v232 + 8) = v234;
                          __p.__r_.__value_.__l.__size_ = v232 + 16;
                        }
                        v263 = v664.__begin_;
                        if (!v664.__begin_)
                          goto LABEL_396;
                        goto LABEL_395;
                      case 4:
                        LOWORD(__x[0]) = MIL::Fp16::FromFloat(v231, 0.0);
                        std::vector<MIL::Fp16>::vector(&v664, v230, __x);
                        MIL::IRTensorValueType::MakeFloat16Value(v226, (uint64_t)&v664, __x);
                        v253 = __p.__r_.__value_.__l.__size_;
                        if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
                          goto LABEL_388;
                        v254 = *(_QWORD *)__x;
                        *(_QWORD *)__p.__r_.__value_.__l.__size_ = *(_QWORD *)__x;
                        if (v254)
                          goto LABEL_382;
                        goto LABEL_383;
                      case 5:
                        __x[0] = 0;
                        std::vector<float>::vector(&v664, v230, __x);
                        MIL::IRTensorValueType::MakeFloat32Value(v226, (uint64_t)&v664, __x);
                        v253 = __p.__r_.__value_.__l.__size_;
                        if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
                          goto LABEL_388;
                        v256 = *(_QWORD *)__x;
                        *(_QWORD *)__p.__r_.__value_.__l.__size_ = *(_QWORD *)__x;
                        if (v256)
                          goto LABEL_382;
                        goto LABEL_383;
                      case 11:
                        __x[0] = 0;
                        std::vector<int>::vector(&v664, v230, __x);
                        MIL::IRTensorValueType::MakeInt32Value(v226, (uint64_t)&v664, __x);
                        v253 = __p.__r_.__value_.__l.__size_;
                        if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
                        {
LABEL_388:
                          v261 = std::vector<std::shared_ptr<MIL::IRValue const>>::__emplace_back_slow_path<std::unique_ptr<MIL::IRTensorValue const>>((uint64_t *)&__p, (uint64_t *)__x);
                          v262 = *(_QWORD *)__x;
                          __p.__r_.__value_.__l.__size_ = v261;
                          *(_QWORD *)__x = 0;
                          if (v262)
                            (*(void (**)(uint64_t))(*(_QWORD *)v262 + 8))(v262);
                        }
                        else
                        {
                          v255 = *(_QWORD *)__x;
                          *(_QWORD *)__p.__r_.__value_.__l.__size_ = *(_QWORD *)__x;
                          if (v255)
                          {
LABEL_382:
                            v257 = (_QWORD *)operator new();
                            v258 = *(_QWORD *)__x;
                            *v257 = &unk_1EA992A68;
                            v257[1] = 0;
                            v257[2] = 0;
                            v257[3] = v258;
                          }
                          else
                          {
LABEL_383:
                            v257 = 0;
                          }
                          *(_QWORD *)(v253 + 8) = v257;
                          __p.__r_.__value_.__l.__size_ = v253 + 16;
                        }
                        v263 = v664.__begin_;
                        if (v664.__begin_)
                        {
                          v664.__end_ = v664.__begin_;
LABEL_395:
                          operator delete(v263);
                        }
                        break;
                      default:
                        v389 = (_QWORD *)MIL::Builder::OperationBuilder::GetLocationPtr(v124);
                        v390 = v389[1];
                        *(_QWORD *)__x = *v389;
                        *(_QWORD *)&__x[2] = v390;
                        if (v390)
                        {
                          v391 = (unint64_t *)(v390 + 8);
                          do
                            v392 = __ldxr(v391);
                          while (__stxr(v392 + 1, v391));
                        }
                        std::string::basic_string[abi:ne180100]<0>(&v664, "Unhandled data type for shape");
                        MIL::Passes::TypeInferenceResult::TypeInferenceResult(v22, (__int128 *)__x, 4, (uint64_t)&v664);
                        if (SHIBYTE(v664.__end_cap_.__value_) < 0)
                          operator delete(v664.__begin_);
                        v277 = *(std::__shared_weak_count **)&__x[2];
                        if (!*(_QWORD *)&__x[2])
                          goto LABEL_606;
                        v393 = (unint64_t *)(*(_QWORD *)&__x[2] + 8);
                        do
                          v279 = __ldaxr(v393);
                        while (__stlxr(v279 - 1, v393));
                        goto LABEL_419;
                    }
                    goto LABEL_396;
                  }
                  if ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v229 + 24))(*v229))
                    break;
                  ++v229;
                }
                v273 = (_QWORD *)MIL::Builder::OperationBuilder::GetLocationPtr(v124);
                v274 = v273[1];
                *(_QWORD *)__x = *v273;
                *(_QWORD *)&__x[2] = v274;
                a6 = v22;
                if (v274)
                {
                  v275 = (unint64_t *)(v274 + 8);
                  do
                    v276 = __ldxr(v275);
                  while (__stxr(v276 + 1, v275));
                }
                std::string::basic_string[abi:ne180100]<0>(&v664, "Success");
                MIL::Passes::TypeInferenceResult::TypeInferenceResult(v22, (__int128 *)__x, 2, (uint64_t)&v664);
                if (SHIBYTE(v664.__end_cap_.__value_) < 0)
                  operator delete(v664.__begin_);
                v277 = *(std::__shared_weak_count **)&__x[2];
                if (*(_QWORD *)&__x[2])
                {
                  v278 = (unint64_t *)(*(_QWORD *)&__x[2] + 8);
                  do
                    v279 = __ldaxr(v278);
                  while (__stlxr(v279 - 1, v278));
                  goto LABEL_419;
                }
              }
              else
              {
                v338 = (_QWORD *)MIL::Builder::OperationBuilder::GetLocationPtr(v124);
                v339 = v338[1];
                *(_QWORD *)__x = *v338;
                *(_QWORD *)&__x[2] = v339;
                if (v339)
                {
                  v340 = (unint64_t *)(v339 + 8);
                  do
                    v341 = __ldxr(v340);
                  while (__stxr(v341 + 1, v340));
                }
                std::string::basic_string[abi:ne180100]<0>(&v664, "Success");
                MIL::Passes::TypeInferenceResult::TypeInferenceResult(a6, (__int128 *)__x, 2, (uint64_t)&v664);
                if (SHIBYTE(v664.__end_cap_.__value_) < 0)
                  operator delete(v664.__begin_);
                v277 = *(std::__shared_weak_count **)&__x[2];
                if (*(_QWORD *)&__x[2])
                {
                  v342 = (unint64_t *)(*(_QWORD *)&__x[2] + 8);
                  do
                    v279 = __ldaxr(v342);
                  while (__stlxr(v279 - 1, v342));
LABEL_419:
                  if (!v279)
                  {
                    ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
                    std::__shared_weak_count::__release_weak(v277);
                  }
                }
              }
LABEL_606:
              v639[0] = &__p;
              std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)v639);
              goto LABEL_607;
            }
            MIL::IRTypedArgument::TryGetValueSharedPtr((uint64_t)*v221, __x);
            v223 = __p.__r_.__value_.__l.__size_;
            if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
            {
              v236 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 4;
              v237 = v236 + 1;
              if ((unint64_t)(v236 + 1) >> 60)
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              v238 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
              if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 3 > v237)
                v237 = v238 >> 3;
              if ((unint64_t)v238 >= 0x7FFFFFFFFFFFFFF0)
                v239 = 0xFFFFFFFFFFFFFFFLL;
              else
                v239 = v237;
              v666 = &__p.__r_.__value_.__s.__data_[16];
              v240 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v239);
              v242 = &v240[16 * v236];
              *(_OWORD *)v242 = *(_OWORD *)__x;
              *(_QWORD *)&__x[2] = 0;
              *(_QWORD *)__x = 0;
              v243 = (_QWORD *)__p.__r_.__value_.__l.__size_;
              v244 = __p.__r_.__value_.__r.__words[0];
              if (__p.__r_.__value_.__l.__size_ == __p.__r_.__value_.__r.__words[0])
              {
                v247 = vdupq_n_s64(__p.__r_.__value_.__l.__size_);
                v245 = (std::string::size_type)&v240[16 * v236];
              }
              else
              {
                v245 = (std::string::size_type)&v240[16 * v236];
                do
                {
                  v246 = *((_OWORD *)v243 - 1);
                  v243 -= 2;
                  *(_OWORD *)(v245 - 16) = v246;
                  v245 -= 16;
                  *v243 = 0;
                  v243[1] = 0;
                }
                while (v243 != (_QWORD *)v244);
                v247 = *(int64x2_t *)&__p.__r_.__value_.__l.__data_;
              }
              v248 = (std::string::size_type)(v242 + 16);
              __p.__r_.__value_.__r.__words[0] = v245;
              __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v242 + 16);
              *(int64x2_t *)&v664.__end_ = v247;
              v249 = __p.__r_.__value_.__r.__words[2];
              __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v240[16 * v241];
              v665 = v249;
              v664.__begin_ = (std::vector<int>::pointer)v247.i64[0];
              std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v664);
              v250 = *(std::__shared_weak_count **)&__x[2];
              __p.__r_.__value_.__l.__size_ = v248;
              a6 = v22;
              if (*(_QWORD *)&__x[2])
              {
                v251 = (unint64_t *)(*(_QWORD *)&__x[2] + 8);
                do
                  v252 = __ldaxr(v251);
                while (__stlxr(v252 - 1, v251));
                if (!v252)
                {
                  ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
                  std::__shared_weak_count::__release_weak(v250);
                }
              }
            }
            else
            {
              *(_OWORD *)__p.__r_.__value_.__l.__size_ = *(_OWORD *)__x;
              __p.__r_.__value_.__l.__size_ = v223 + 16;
            }
LABEL_396:
            v221 += 2;
          }
          v664.__begin_ = (std::vector<int>::pointer)(v220 + 2);
          v264 = (std::string *)(std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v648, (unsigned __int8 *)v220 + 16, (uint64_t)&std::piecewise_construct, (__int128 **)&v664)+ 40);
          if (v264 != &__p)
            std::vector<std::shared_ptr<MIL::IRArgument>>::__assign_with_size[abi:ne180100]<std::shared_ptr<MIL::IRArgument> const*,std::shared_ptr<MIL::IRArgument> const*>((uint64_t)v264, (uint64_t *)__p.__r_.__value_.__l.__data_, (uint64_t *)__p.__r_.__value_.__l.__size_, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 4);
          v639[0] = &__p;
          std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)v639);
          v220 = (uint64_t *)*v220;
          if (v220)
            continue;
          break;
        }
      }
      v265 = (std::string::size_type *)MIL::Builder::OperationBuilder::GetLocationPtr(v124);
      v266 = v265[1];
      __p.__r_.__value_.__r.__words[0] = *v265;
      __p.__r_.__value_.__l.__size_ = v266;
      if (v266)
      {
        v267 = (unint64_t *)(v266 + 8);
        do
          v268 = __ldxr(v267);
        while (__stxr(v268 + 1, v267));
      }
      std::string::basic_string[abi:ne180100]<0>(&v664, "Success");
      MIL::Passes::TypeInferenceResult::TypeInferenceResult(a6, (__int128 *)&__p, 2, (uint64_t)&v664);
      if (SHIBYTE(v664.__end_cap_.__value_) < 0)
        operator delete(v664.__begin_);
      v269 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v270 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v271 = __ldaxr(v270);
        while (__stlxr(v271 - 1, v270));
        if (!v271)
        {
          ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
          std::__shared_weak_count::__release_weak(v269);
        }
      }
      v272 = 0;
LABEL_608:
      if (*(_DWORD *)(a6 + 48) == 2)
      {
        MIL::MILResult::~MILResult((void **)a6);
        if ((v272 & 1) != 0)
        {
          MIL::Builder::FunctionBuilder::GetContext(a3, &v664);
          v394 = (uint64_t *)MIL::Builder::OperationBuilder::GetLocationPtr(v630);
          v395 = (std::__shared_weak_count *)v394[1];
          v604 = *v394;
          v605 = v395;
          if (v395)
          {
            v396 = (unint64_t *)&v395->__shared_owners_;
            do
              v397 = __ldxr(v396);
            while (__stxr(v397 + 1, v396));
          }
          Attributes = MIL::Builder::OperationBuilder::GetAttributes(v630);
          (*(void (**)(std::vector<int>::value_type *__return_ptr, int *, std::vector<int> *, uint64_t *, __int128 *, uint64_t, _QWORD **))(**(_QWORD **)v585 + 192))(__x, *(int **)v585, &v664, &v604, &v620, Attributes, &v617);
          v399 = v605;
          if (v605)
          {
            v400 = (unint64_t *)&v605->__shared_owners_;
            do
              v401 = __ldaxr(v400);
            while (__stlxr(v401 - 1, v400));
            if (!v401)
            {
              ((void (*)(std::__shared_weak_count *))v399->__on_zero_shared)(v399);
              std::__shared_weak_count::__release_weak(v399);
            }
          }
          v402 = (std::__shared_weak_count *)v664.__end_;
          if (v664.__end_)
          {
            v403 = (unint64_t *)(v664.__end_ + 2);
            do
              v404 = __ldaxr(v403);
            while (__stlxr(v404 - 1, v403));
            if (!v404)
            {
              ((void (*)(std::__shared_weak_count *))v402->__on_zero_shared)(v402);
              std::__shared_weak_count::__release_weak(v402);
            }
          }
          v405 = (MIL::Builder::OperationBuilder::OperationBuilderImpl **)v630;
          v602 = v630;
          v603 = v631;
          if (v631)
          {
            v406 = (unint64_t *)&v631->__shared_owners_;
            do
              v407 = __ldxr(v406);
            while (__stxr(v407 + 1, v406));
          }
          MIL::Builder::OperationBuilder::GetOutputs(v405, (void **)&v670);
          v408 = v670;
          v409 = v671;
          if ((char *)v671 - (char *)v670 == *(_QWORD *)&__x[2] - *(_QWORD *)__x)
          {
            v410 = (_QWORD *)v621;
            if (!(_QWORD)v621)
            {
LABEL_648:
              if (v409 != v408)
              {
                for (i = 0; i < v671 - v670; ++i)
                {
                  v427 = MIL::Builder::Variable::TryGetType(v408[i]);
                  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v427 + 24))(v427)
                    && (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)__x + 8 * i) + 24))(*(_QWORD *)(*(_QWORD *)__x + 8 * i)))
                  {
                    v428 = MIL::Builder::Variable::TryGetType(v670[i]);
                    v429 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v428 + 24))(v428);
                    v430 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v429 + 96))(v429);
                    memset(&v647, 0, sizeof(v647));
                    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v647, *(const void **)v430, *(_QWORD *)(v430 + 8), (uint64_t)(*(_QWORD *)(v430 + 8) - *(_QWORD *)v430) >> 3);
                    v431 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)__x + 8 * i) + 24))(*(_QWORD *)(*(_QWORD *)__x + 8 * i));
                    v432 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v431 + 96))(v431);
                    memset(&__p, 0, sizeof(__p));
                    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v432, *(_QWORD *)(v432 + 8), (uint64_t)(*(_QWORD *)(v432 + 8) - *(_QWORD *)v432) >> 3);
                    if (MIL::ValueTypeInferenceUtils::ShapeHasVariadicUnknownDims((uint64_t)&v647))
                    {
                      v433 = (void *)__p.__r_.__value_.__r.__words[0];
                    }
                    else
                    {
                      HasVariadicUnknownDims = MIL::ValueTypeInferenceUtils::ShapeHasVariadicUnknownDims((uint64_t)&__p);
                      v433 = (void *)__p.__r_.__value_.__r.__words[0];
                      if (!HasVariadicUnknownDims
                        && v647.__r_.__value_.__l.__size_ - v647.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__l.__size_
                                                                                               - __p.__r_.__value_.__r.__words[0])
                      {
                        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v664);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v664, (uint64_t)"Invalid tensor rank ", 20);
                        v552 = (_QWORD *)std::ostream::operator<<();
                        v553 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v552, (uint64_t)" inferred from: ", 16);
                        v554 = MIL::Builder::OperationBuilder::GetOperator(v602);
                        v555 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v554 + 16))(v554);
                        v556 = *(char *)(v555 + 23);
                        if (v556 >= 0)
                          v557 = v555;
                        else
                          v557 = *(_QWORD *)v555;
                        if (v556 >= 0)
                          v558 = *(unsigned __int8 *)(v555 + 23);
                        else
                          v558 = *(_QWORD *)(v555 + 8);
                        v559 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v553, v557, v558);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v559, (uint64_t)", expecting ", 12);
                        v560 = (_QWORD *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v560, (uint64_t)".", 1);
                        v561 = (_QWORD *)MIL::Builder::OperationBuilder::GetLocationPtr(v602);
                        v562 = v561[1];
                        *(_QWORD *)&v658 = *v561;
                        *((_QWORD *)&v658 + 1) = v562;
                        if (v562)
                        {
                          v563 = (unint64_t *)(v562 + 8);
                          do
                            v564 = __ldxr(v563);
                          while (__stxr(v564 + 1, v563));
                        }
                        std::stringbuf::str();
                        MIL::Passes::TypeInferenceResult::TypeInferenceResult(a6, &v658, 3, (uint64_t)&v656);
                        if (v657 < 0)
                          operator delete(v656);
                        v565 = (std::__shared_weak_count *)*((_QWORD *)&v658 + 1);
                        if (*((_QWORD *)&v658 + 1))
                        {
                          v566 = (unint64_t *)(*((_QWORD *)&v658 + 1) + 8);
                          do
                            v567 = __ldaxr(v566);
                          while (__stlxr(v567 - 1, v566));
                          if (!v567)
                          {
                            ((void (*)(std::__shared_weak_count *))v565->__on_zero_shared)(v565);
                            std::__shared_weak_count::__release_weak(v565);
                          }
                        }
                        v664.__begin_ = v588;
                        *(std::vector<int>::pointer *)((char *)&v664.__begin_ + *((_QWORD *)v588 - 3)) = v587;
                        v664.__end_ = (std::vector<int>::pointer)(MEMORY[0x1E0DE4FB8] + 16);
                        if (v668 < 0)
                          operator delete(v667);
                        std::streambuf::~streambuf();
                        std::ostream::~ostream();
                        MEMORY[0x1E0C022F8](v669);
                        if (__p.__r_.__value_.__r.__words[0])
                        {
                          __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                          operator delete(__p.__r_.__value_.__l.__data_);
                        }
                        if (v647.__r_.__value_.__r.__words[0])
                        {
                          v647.__r_.__value_.__l.__size_ = v647.__r_.__value_.__r.__words[0];
                          operator delete(v647.__r_.__value_.__l.__data_);
                        }
                        goto LABEL_718;
                      }
                    }
                    if (v433)
                    {
                      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v433;
                      operator delete(v433);
                    }
                    if (v647.__r_.__value_.__r.__words[0])
                    {
                      v647.__r_.__value_.__l.__size_ = v647.__r_.__value_.__r.__words[0];
                      operator delete(v647.__r_.__value_.__l.__data_);
                    }
                  }
                  v408 = v670;
                }
              }
LABEL_661:
              v435 = (_QWORD *)MIL::Builder::OperationBuilder::GetLocationPtr(v602);
              v436 = v435[1];
              *(_QWORD *)&v655 = *v435;
              *((_QWORD *)&v655 + 1) = v436;
              if (v436)
              {
                v437 = (unint64_t *)(v436 + 8);
                do
                  v438 = __ldxr(v437);
                while (__stxr(v438 + 1, v437));
              }
              std::string::basic_string[abi:ne180100]<0>(v653, "Success");
              MIL::Passes::TypeInferenceResult::TypeInferenceResult(a6, &v655, 2, (uint64_t)v653);
              if (v654 < 0)
                operator delete(v653[0]);
              v439 = (std::__shared_weak_count *)*((_QWORD *)&v655 + 1);
              if (*((_QWORD *)&v655 + 1))
              {
                v440 = (unint64_t *)(*((_QWORD *)&v655 + 1) + 8);
                do
                  v441 = __ldaxr(v440);
                while (__stlxr(v441 - 1, v440));
                if (!v441)
                {
                  ((void (*)(std::__shared_weak_count *))v439->__on_zero_shared)(v439);
                  std::__shared_weak_count::__release_weak(v439);
                }
              }
              goto LABEL_718;
            }
LABEL_628:
            if (v410[6] == v410[5])
              goto LABEL_646;
            v411 = 0;
            v412 = 0;
            LOBYTE(v413) = 1;
            while (1)
            {
              v414 = (MIL::Builder::Variable::VariableImpl **)MIL::Builder::OperationBuilder::GetArgumentForParameter((std::string::size_type)v602, (uint64_t)(v410 + 2), v412);
              v415 = MIL::Builder::Variable::TryGetType(v414);
              if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v415 + 24))(v415))
                goto LABEL_661;
              v416 = MIL::IRTypedArgument::TryGetValueType(*(MIL::IRTypedArgument::IRTypedArgumentImpl ***)(v410[5] + v411));
              if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v416 + 24))(v416))
                goto LABEL_661;
              v417 = MIL::Builder::Variable::TryGetType(v414);
              v418 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v417 + 24))(v417);
              v419 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v418 + 96))(v418);
              memset(&v664, 0, sizeof(v664));
              std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v664, *(const void **)v419, *(_QWORD *)(v419 + 8), (uint64_t)(*(_QWORD *)(v419 + 8) - *(_QWORD *)v419) >> 3);
              v420 = MIL::IRTypedArgument::TryGetValueType(*(MIL::IRTypedArgument::IRTypedArgumentImpl ***)(v410[5] + v411));
              v421 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v420 + 24))(v420);
              v422 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v421 + 96))(v421);
              memset(&v647, 0, sizeof(v647));
              std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v647, *(const void **)v422, *(_QWORD *)(v422 + 8), (uint64_t)(*(_QWORD *)(v422 + 8) - *(_QWORD *)v422) >> 3);
              if (!MIL::ValueTypeInferenceUtils::ShapeHasVariadicUnknownDims((uint64_t)&v664))
                break;
              v413 = 0;
              v423 = 4;
              v424 = (void *)v647.__r_.__value_.__r.__words[0];
              if (v647.__r_.__value_.__r.__words[0])
                goto LABEL_634;
LABEL_635:
              if (v664.__begin_)
              {
                v664.__end_ = v664.__begin_;
                operator delete(v664.__begin_);
              }
              if (!v423)
              {
                ++v412;
                v411 += 16;
                if (v412 < (uint64_t)(v410[6] - v410[5]) >> 4)
                  continue;
              }
              if (!v413)
                goto LABEL_661;
LABEL_646:
              v410 = (_QWORD *)*v410;
              if (!v410)
              {
                v408 = v670;
                v409 = v671;
                goto LABEL_648;
              }
              goto LABEL_628;
            }
            v425 = MIL::ValueTypeInferenceUtils::ShapeHasVariadicUnknownDims((uint64_t)&v647);
            v424 = (void *)v647.__r_.__value_.__r.__words[0];
            if (v425)
            {
              v413 = 0;
              v423 = 4;
              if (!v647.__r_.__value_.__r.__words[0])
                goto LABEL_635;
            }
            else
            {
              v413 = ((char *)v664.__end_ - (char *)v664.__begin_ == v647.__r_.__value_.__l.__size_
                                                                   - v647.__r_.__value_.__r.__words[0]) & v413;
              v423 = 4
                   * ((char *)v664.__end_ - (char *)v664.__begin_ != v647.__r_.__value_.__l.__size_
                                                                   - v647.__r_.__value_.__r.__words[0]);
              if (!v647.__r_.__value_.__r.__words[0])
                goto LABEL_635;
            }
LABEL_634:
            v647.__r_.__value_.__l.__size_ = (std::string::size_type)v424;
            operator delete(v424);
            goto LABEL_635;
          }
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v664);
          v452 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v664, (uint64_t)"Invalid number of outputs types inferred from: ", 47);
          v453 = MIL::Builder::OperationBuilder::GetOperator(v602);
          v454 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v453 + 16))(v453);
          v455 = *(char *)(v454 + 23);
          if (v455 >= 0)
            v456 = v454;
          else
            v456 = *(_QWORD *)v454;
          if (v455 >= 0)
            v457 = *(unsigned __int8 *)(v454 + 23);
          else
            v457 = *(_QWORD *)(v454 + 8);
          v458 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v452, v456, v457);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v458, (uint64_t)".", 1);
          v459 = (_QWORD *)MIL::Builder::OperationBuilder::GetLocationPtr(v602);
          v460 = v459[1];
          *(_QWORD *)&v663 = *v459;
          *((_QWORD *)&v663 + 1) = v460;
          if (v460)
          {
            v461 = (unint64_t *)(v460 + 8);
            do
              v462 = __ldxr(v461);
            while (__stxr(v462 + 1, v461));
          }
          std::stringbuf::str();
          MIL::Passes::TypeInferenceResult::TypeInferenceResult(a6, &v663, 3, (uint64_t)&v660);
          if (v662 < 0)
            operator delete(v660);
          v463 = (std::__shared_weak_count *)*((_QWORD *)&v663 + 1);
          if (*((_QWORD *)&v663 + 1))
          {
            v464 = (unint64_t *)(*((_QWORD *)&v663 + 1) + 8);
            do
              v465 = __ldaxr(v464);
            while (__stlxr(v465 - 1, v464));
            if (!v465)
            {
              ((void (*)(std::__shared_weak_count *))v463->__on_zero_shared)(v463);
              std::__shared_weak_count::__release_weak(v463);
            }
          }
          v664.__begin_ = v588;
          *(std::vector<int>::pointer *)((char *)&v664.__begin_ + *((_QWORD *)v588 - 3)) = v587;
          v664.__end_ = (std::vector<int>::pointer)(MEMORY[0x1E0DE4FB8] + 16);
          if (v668 < 0)
            operator delete(v667);
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x1E0C022F8](v669);
LABEL_718:
          if (v670)
          {
            v671 = v670;
            operator delete(v670);
          }
          v466 = v603;
          if (v603)
          {
            v467 = (unint64_t *)&v603->__shared_owners_;
            do
              v468 = __ldaxr(v467);
            while (__stlxr(v468 - 1, v467));
            if (!v468)
            {
              ((void (*)(std::__shared_weak_count *))v466->__on_zero_shared)(v466);
              std::__shared_weak_count::__release_weak(v466);
            }
          }
          if (*(_DWORD *)(a6 + 48) == 2)
          {
            MIL::MILResult::~MILResult((void **)a6);
            if (v616 != p_p)
            {
              for (j = 0; j < ((char *)v616 - (_BYTE *)p_p) >> 3; ++j)
              {
                OutputType = (MIL::IRValueType *)MIL::Builder::OperationBuilder::GetOutputType((MIL::Builder::OperationBuilder::OperationBuilderImpl **)v630, j);
                v471 = *(MIL::IRValueType **)(*(_QWORD *)__x + 8 * j);
                v472 = (__int128 *)MIL::Builder::Variable::GetName(*((MIL::Builder::Variable::VariableImpl ***)p_p + j));
                if (MIL::IsTensor(OutputType, v473) && MIL::IsTensor(v471, v474))
                {
                  v475 = MIL::IRValueType::AsTensorType(OutputType);
                  v476 = MIL::IRValueType::AsTensorType(v471);
                  v477 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v476 + 88))(v476);
                  v478 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v476 + 96))(v476);
                  memset(&v647, 0, sizeof(v647));
                  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v647, *(const void **)v478, *(_QWORD *)(v478 + 8), (uint64_t)(*(_QWORD *)(v478 + 8) - *(_QWORD *)v478) >> 3);
                  v479 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v475 + 80))(v475);
                  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)&v664, v479);
                  MIL::Builder::FunctionBuilder::GetContext(a3, &v670);
                  v480 = (MIL::IRTypedArgument *)MIL::IRTensorValueType::MakeWithShape((void (***)(MIL::MILContextImpl *__hidden))v670, v477, (uint64_t)&v647, (uint64_t *)&v664);
                  MIL::IRTypedArgument::Make(v480, &v660);
                  v673 = v472;
                  v481 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a4, (unsigned __int8 *)v472, (uint64_t)&std::piecewise_construct, &v673);
                  std::shared_ptr<MIL::IRTypedArgument>::operator=[abi:ne180100]<MIL::IRTypedArgument,std::default_delete<MIL::IRTypedArgument>,void>((_QWORD *)v481 + 5, (uint64_t *)&v660);
                  v482 = v660;
                  v660 = 0;
                  if (v482)
                    (*(void (**)(void *))(*(_QWORD *)v482 + 8))(v482);
                  v483 = (std::__shared_weak_count *)v671;
                  if (v671)
                  {
                    v484 = (unint64_t *)(v671 + 1);
                    do
                      v485 = __ldaxr(v484);
                    while (__stlxr(v485 - 1, v484));
                    goto LABEL_735;
                  }
                }
                else
                {
                  if (MIL::IsTensorBuffer(OutputType, v474)
                    && MIL::IsTensorBuffer(v471, v486))
                  {
                    v487 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(v471);
                    v488 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v487);
                    Shape = MIL::IRTensorBufferValueType::GetShape(v488);
                    memset(&v664, 0, sizeof(v664));
                    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v664, *(const void **)Shape, *(_QWORD *)(Shape + 8), (uint64_t)(*(_QWORD *)(Shape + 8) - *(_QWORD *)Shape) >> 3);
                    MIL::Builder::FunctionBuilder::GetContext(a3, &v600);
                    v597 = 0;
                    v598 = 0;
                    v599 = 0;
                    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v597, v664.__begin_, (uint64_t)v664.__end_, ((char *)v664.__end_ - (char *)v664.__begin_) >> 3);
                    if (v597)
                    {
                      v598 = v597;
                      operator delete(v597);
                    }
                    v491 = v601;
                    if (v601)
                    {
                      v492 = (unint64_t *)&v601->__shared_owners_;
                      do
                        v493 = __ldaxr(v492);
                      while (__stlxr(v493 - 1, v492));
                      if (!v493)
                      {
                        ((void (*)(std::__shared_weak_count *))v491->__on_zero_shared)(v491);
                        std::__shared_weak_count::__release_weak(v491);
                      }
                    }
                    MIL::IRTypedArgument::Make(TensorBufferArgumentHelper, &v647);
                    v674 = v472;
                    v494 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a4, (unsigned __int8 *)v472, (uint64_t)&std::piecewise_construct, &v674);
                    std::shared_ptr<MIL::IRTypedArgument>::operator=[abi:ne180100]<MIL::IRTypedArgument,std::default_delete<MIL::IRTypedArgument>,void>((_QWORD *)v494 + 5, (uint64_t *)&v647);
                    v495 = v647.__r_.__value_.__r.__words[0];
                    v647.__r_.__value_.__r.__words[0] = 0;
                    if (v495)
                      (*(void (**)(std::string::size_type))(*(_QWORD *)v495 + 8))(v495);
                    v496 = v664.__begin_;
                    if (!v664.__begin_)
                      continue;
                    v664.__end_ = v664.__begin_;
                    goto LABEL_772;
                  }
                  if (!MIL::IsPixelBuffer(OutputType, v486)
                    || !MIL::IsPixelBuffer(v471, v497))
                  {
                    MIL::IRTypedArgument::Make(v471, &v664);
                    v677 = v472;
                    v513 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a4, (unsigned __int8 *)v472, (uint64_t)&std::piecewise_construct, &v677);
                    std::shared_ptr<MIL::IRTypedArgument>::operator=[abi:ne180100]<MIL::IRTypedArgument,std::default_delete<MIL::IRTypedArgument>,void>((_QWORD *)v513 + 5, (uint64_t *)&v664);
                    v514 = v664.__begin_;
                    v664.__begin_ = 0;
                    if (v514)
                      (*(void (**)(std::vector<int>::pointer))(*(_QWORD *)v514 + 8))(v514);
                    continue;
                  }
                  v498 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(OutputType);
                  v499 = (MIL::IRPixelBufferValueType *)MIL::IRMemoryLayoutValueType::AsPixelBufferType(v498);
                  PixelFormatType = MIL::IRPixelBufferValueType::GetPixelFormatType(v499);
                  v501 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(v471);
                  v502 = (MIL::IRPixelBufferValueType *)MIL::IRMemoryLayoutValueType::AsPixelBufferType(v501);
                  v503 = MIL::IRPixelBufferValueType::GetShape(v502);
                  memset(&v647, 0, sizeof(v647));
                  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v647, *(const void **)v503, *(_QWORD *)(v503 + 8), (uint64_t)(*(_QWORD *)(v503 + 8) - *(_QWORD *)v503) >> 3);
                  BytesPerRow = MIL::IRPixelBufferValueType::TryGetBytesPerRow(v499);
                  v505 = MIL::IRPixelBufferValueType::GetAttributes(v499);
                  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)&v664, v505);
                  if (BytesPerRow)
                  {
                    v506 = MIL::IRPixelBufferValueType::GetBytesPerRow((MIL::IRPixelBufferValueTypeImpl **)v499);
                    v670 = 0;
                    v671 = 0;
                    v672 = 0;
                    std::vector<MIL::IRProperty const*>::__init_with_size[abi:ne180100]<MIL::IRProperty const**,MIL::IRProperty const**>(&v670, *(const void **)v506, *(_QWORD *)(v506 + 8), (uint64_t)(*(_QWORD *)(v506 + 8) - *(_QWORD *)v506) >> 3);
                    MIL::Builder::FunctionBuilder::GetContext(a3, &v660);
                    v507 = (MIL::IRTypedArgument *)MIL::IRPixelBufferValueType::MakeWithShape((void (***)(MIL::MILContextImpl *__hidden))v660, PixelFormatType, (__int128 *)&v647, (uint64_t)&v670, (uint64_t *)&v664);
                    MIL::IRTypedArgument::Make(v507, &__p);
                    v676 = v472;
                    v508 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a4, (unsigned __int8 *)v472, (uint64_t)&std::piecewise_construct, &v676);
                    std::shared_ptr<MIL::IRTypedArgument>::operator=[abi:ne180100]<MIL::IRTypedArgument,std::default_delete<MIL::IRTypedArgument>,void>((_QWORD *)v508 + 5, (uint64_t *)&__p);
                    v509 = __p.__r_.__value_.__r.__words[0];
                    __p.__r_.__value_.__r.__words[0] = 0;
                    if (v509)
                      (*(void (**)(std::string::size_type))(*(_QWORD *)v509 + 8))(v509);
                    v510 = v661;
                    if (v661)
                    {
                      v511 = (unint64_t *)&v661->__shared_owners_;
                      do
                        v512 = __ldaxr(v511);
                      while (__stlxr(v512 - 1, v511));
                      if (!v512)
                      {
                        ((void (*)(std::__shared_weak_count *))v510->__on_zero_shared)(v510);
                        std::__shared_weak_count::__release_weak(v510);
                      }
                    }
                    if (v670)
                    {
                      v671 = v670;
                      operator delete(v670);
                    }
                  }
                  else
                  {
                    MIL::Builder::FunctionBuilder::GetContext(a3, &v670);
                    v515 = (MIL::IRTypedArgument *)MIL::IRPixelBufferValueType::MakeWithShape((void (***)(MIL::MILContextImpl *__hidden))v670, PixelFormatType, (__int128 *)&v647, (uint64_t *)&v664);
                    MIL::IRTypedArgument::Make(v515, &v660);
                    v675 = v472;
                    v516 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a4, (unsigned __int8 *)v472, (uint64_t)&std::piecewise_construct, &v675);
                    std::shared_ptr<MIL::IRTypedArgument>::operator=[abi:ne180100]<MIL::IRTypedArgument,std::default_delete<MIL::IRTypedArgument>,void>((_QWORD *)v516 + 5, (uint64_t *)&v660);
                    v517 = v660;
                    v660 = 0;
                    if (v517)
                      (*(void (**)(void *))(*(_QWORD *)v517 + 8))(v517);
                    v483 = (std::__shared_weak_count *)v671;
                    if (v671)
                    {
                      v518 = (unint64_t *)(v671 + 1);
                      do
                        v485 = __ldaxr(v518);
                      while (__stlxr(v485 - 1, v518));
LABEL_735:
                      if (!v485)
                      {
                        ((void (*)(std::__shared_weak_count *))v483->__on_zero_shared)(v483);
                        std::__shared_weak_count::__release_weak(v483);
                      }
                    }
                  }
                }
                std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&v664);
                v496 = (std::vector<int>::pointer)v647.__r_.__value_.__r.__words[0];
                if (v647.__r_.__value_.__r.__words[0])
                {
                  v647.__r_.__value_.__l.__size_ = v647.__r_.__value_.__r.__words[0];
LABEL_772:
                  operator delete(v496);
                }
              }
            }
            if ((a5 & 1) != 0)
            v13 = 0;
          }
          else
          {
            v13 = 1;
          }
          if (*(_QWORD *)__x)
          {
            *(_QWORD *)&__x[2] = *(_QWORD *)__x;
            operator delete(*(void **)__x);
          }
LABEL_683:
          std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)&v648);
          goto LABEL_684;
        }
        if (v617 == v618)
        {
          MIL::Builder::FunctionBuilder::GetContext(a3, &__p);
          v519 = (uint64_t *)MIL::Builder::OperationBuilder::GetLocationPtr(v630);
          v520 = (std::__shared_weak_count *)v519[1];
          v610 = *v519;
          v611 = v520;
          if (v520)
          {
            v521 = (unint64_t *)&v520->__shared_owners_;
            do
              v522 = __ldxr(v521);
            while (__stxr(v522 + 1, v521));
          }
          v523 = MIL::Builder::OperationBuilder::GetAttributes(v630);
          memset(&v664, 0, sizeof(v664));
          (*(void (**)(std::string *__return_ptr, int *, std::string *, uint64_t *, __int128 *, uint64_t, std::vector<int> *, uint64_t))(**(_QWORD **)v585 + 208))(&v647, *(int **)v585, &__p, &v610, &v648, v523, &v664, 0xFFFFFFFFLL);
          *(_QWORD *)__x = &v664;
          std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
          v524 = v611;
          if (v611)
          {
            v525 = (unint64_t *)&v611->__shared_owners_;
            do
              v526 = __ldaxr(v525);
            while (__stlxr(v526 - 1, v525));
            if (!v526)
            {
              ((void (*)(std::__shared_weak_count *))v524->__on_zero_shared)(v524);
              std::__shared_weak_count::__release_weak(v524);
            }
          }
          v527 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v528 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v529 = __ldaxr(v528);
            while (__stlxr(v529 - 1, v528));
            if (!v529)
            {
              ((void (*)(std::__shared_weak_count *))v527->__on_zero_shared)(v527);
              std::__shared_weak_count::__release_weak(v527);
            }
          }
          if (((char *)v616 - (_BYTE *)p_p) >> 3 == (uint64_t)(v647.__r_.__value_.__l.__size_
                                                             - v647.__r_.__value_.__r.__words[0]) >> 4)
          {
            if (v616 != p_p)
            {
              v530 = 0;
              do
              {
                v531 = *(_OWORD *)(v647.__r_.__value_.__r.__words[0] + 16 * v530);
                v606 = v531;
                if (*((_QWORD *)&v531 + 1))
                {
                  v532 = (unint64_t *)(*((_QWORD *)&v531 + 1) + 8);
                  do
                    v533 = __ldxr(v532);
                  while (__stxr(v533 + 1, v532));
                }
                MIL::IRTypedArgument::Make((uint64_t *)&v606, &v664);
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)MIL::Builder::Variable::GetName(*((MIL::Builder::Variable::VariableImpl ***)p_p + v530));
                v534 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a4, (unsigned __int8 *)__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
                std::shared_ptr<MIL::IRTypedArgument>::operator=[abi:ne180100]<MIL::IRTypedArgument,std::default_delete<MIL::IRTypedArgument>,void>((_QWORD *)v534 + 5, (uint64_t *)&v664);
                v535 = v664.__begin_;
                v664.__begin_ = 0;
                if (v535)
                  (*(void (**)(std::vector<int>::pointer))(*(_QWORD *)v535 + 8))(v535);
                v536 = (std::__shared_weak_count *)*((_QWORD *)&v606 + 1);
                if (*((_QWORD *)&v606 + 1))
                {
                  v537 = (unint64_t *)(*((_QWORD *)&v606 + 1) + 8);
                  do
                    v538 = __ldaxr(v537);
                  while (__stlxr(v538 - 1, v537));
                  if (!v538)
                  {
                    ((void (*)(std::__shared_weak_count *))v536->__on_zero_shared)(v536);
                    std::__shared_weak_count::__release_weak(v536);
                  }
                }
                ++v530;
              }
              while (v530 < ((char *)v616 - (_BYTE *)p_p) >> 3);
            }
            v13 = 3;
          }
          else
          {
            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v664);
            v539 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v664, (uint64_t)"Invalid number of outputs values inferred from: ", 48);
            v540 = (*(uint64_t (**)(int *))(**(_QWORD **)v585 + 16))(*(int **)v585);
            v541 = *(char *)(v540 + 23);
            if (v541 >= 0)
              v542 = v540;
            else
              v542 = *(_QWORD *)v540;
            if (v541 >= 0)
              v543 = *(unsigned __int8 *)(v540 + 23);
            else
              v543 = *(_QWORD *)(v540 + 8);
            v544 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v539, v542, v543);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v544, (uint64_t)".", 1);
            v545 = (_QWORD *)MIL::Builder::OperationBuilder::GetLocationPtr(v630);
            v546 = v545[1];
            *(_QWORD *)&v609 = *v545;
            *((_QWORD *)&v609 + 1) = v546;
            if (v546)
            {
              v547 = (unint64_t *)(v546 + 8);
              do
                v548 = __ldxr(v547);
              while (__stxr(v548 + 1, v547));
            }
            std::stringbuf::str();
            MIL::Passes::TypeInferenceResult::TypeInferenceResult(a6, &v609, 3, (uint64_t)&v607);
            if (v608 < 0)
              operator delete(v607);
            v549 = (std::__shared_weak_count *)*((_QWORD *)&v609 + 1);
            if (*((_QWORD *)&v609 + 1))
            {
              v550 = (unint64_t *)(*((_QWORD *)&v609 + 1) + 8);
              do
                v551 = __ldaxr(v550);
              while (__stlxr(v551 - 1, v550));
              if (!v551)
              {
                ((void (*)(std::__shared_weak_count *))v549->__on_zero_shared)(v549);
                std::__shared_weak_count::__release_weak(v549);
              }
            }
            v664.__begin_ = v588;
            *(std::vector<int>::pointer *)((char *)&v664.__begin_ + *((_QWORD *)v588 - 3)) = v587;
            v664.__end_ = (std::vector<int>::pointer)(MEMORY[0x1E0DE4FB8] + 16);
            if (v668 < 0)
              operator delete(v667);
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            MEMORY[0x1E0C022F8](v669);
            v13 = 1;
          }
          v664.__begin_ = (std::vector<int>::pointer)&v647;
          std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v664);
          goto LABEL_683;
        }
        v442 = (_QWORD *)MIL::Builder::OperationBuilder::GetLocationPtr(v630);
        v443 = v442[1];
        *(_QWORD *)&v614 = *v442;
        *((_QWORD *)&v614 + 1) = v443;
        if (v443)
        {
          v444 = (unint64_t *)(v443 + 8);
          do
            v445 = __ldxr(v444);
          while (__stxr(v445 + 1, v444));
        }
        std::string::basic_string[abi:ne180100]<0>(v612, "Found nested blocks on shape op");
        MIL::Passes::TypeInferenceResult::TypeInferenceResult(a6, &v614, 3, (uint64_t)v612);
        if (v613 < 0)
          operator delete(v612[0]);
        v446 = (std::__shared_weak_count *)*((_QWORD *)&v614 + 1);
        if (*((_QWORD *)&v614 + 1))
        {
          v447 = (unint64_t *)(*((_QWORD *)&v614 + 1) + 8);
          do
            v448 = __ldaxr(v447);
          while (__stlxr(v448 - 1, v447));
          if (!v448)
          {
            ((void (*)(std::__shared_weak_count *))v446->__on_zero_shared)(v446);
            std::__shared_weak_count::__release_weak(v446);
          }
        }
      }
      v13 = 1;
      goto LABEL_683;
    }
    v120 = v630;
    std::string::basic_string[abi:ne180100]<0>(&v664, "function");
    MIL::Builder::OperationBuilder::TryGetAttribute((uint64_t)v120, (unsigned __int8 *)&v664, &v652);
    if (SHIBYTE(v664.__end_cap_.__value_) < 0)
      operator delete(v664.__begin_);
    if (!(_QWORD)v652)
    {
      v132 = (_QWORD *)MIL::Builder::OperationBuilder::GetLocationPtr(v120);
      v133 = v132[1];
      *(_QWORD *)&v648 = *v132;
      *((_QWORD *)&v648 + 1) = v133;
      if (v133)
      {
        v134 = (unint64_t *)(v133 + 8);
        do
          v135 = __ldxr(v134);
        while (__stxr(v135 + 1, v134));
      }
      std::string::basic_string[abi:ne180100]<0>(&v664, "Found call op with no function name");
      MIL::Passes::TypeInferenceResult::TypeInferenceResult(a6, &v648, 3, (uint64_t)&v664);
      if (SHIBYTE(v664.__end_cap_.__value_) < 0)
        operator delete(v664.__begin_);
      v136 = (std::__shared_weak_count *)*((_QWORD *)&v648 + 1);
      if (*((_QWORD *)&v648 + 1))
      {
        v137 = (unint64_t *)(*((_QWORD *)&v648 + 1) + 8);
        do
          v138 = __ldaxr(v137);
        while (__stlxr(v138 - 1, v137));
        if (!v138)
        {
          ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
          std::__shared_weak_count::__release_weak(v136);
        }
      }
      goto LABEL_578;
    }
    v121 = (uint64_t *)MIL::IRValue::AsTensor((MIL::IRValue *)v652);
    v122 = MIL::IRTensorValue::GetDataView<std::string>(v121);
    if (*(char *)(v122 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v122, *(_QWORD *)(v122 + 8));
    }
    else
    {
      v123 = *(_OWORD *)v122;
      __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v122 + 16);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v123;
    }
    v651 = 0;
    if (*(_DWORD *)(a6 + 48) != 2)
      goto LABEL_576;
    MIL::MILResult::~MILResult((void **)a6);
    if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v634, (unsigned __int8 *)&__p))
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v634, (unsigned __int8 *)&__p, (uint64_t)&__p);
      v648 = 0u;
      v649 = 0u;
      v650 = 1065353216;
      MIL::Builder::OperationBuilder::GetParameterNames((unsigned __int8 **)v120, (uint64_t)&v647);
      v280 = (const void **)v647.__r_.__value_.__r.__words[2];
      if (v647.__r_.__value_.__r.__words[2])
      {
        while (1)
        {
          if (!MIL::Builder::FunctionBuilder::TryGetInput((std::string::size_type)v651, (uint64_t)(v280 + 2)))
          {
            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v664);
            v343 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v664, (uint64_t)"No input ", 9);
            v344 = *((char *)v280 + 39);
            if (v344 >= 0)
              v345 = (uint64_t)(v280 + 2);
            else
              v345 = (uint64_t)v280[2];
            if (v344 >= 0)
              v346 = *((unsigned __int8 *)v280 + 39);
            else
              v346 = (uint64_t)v280[3];
            v347 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v343, v345, v346);
            v348 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v347, (uint64_t)" in called function ", 20);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v349 = &__p;
            else
              v349 = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v350 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              v350 = __p.__r_.__value_.__l.__size_;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v348, (uint64_t)v349, v350);
            v351 = (_QWORD *)MIL::Builder::OperationBuilder::GetLocationPtr(v120);
            v352 = v351[1];
            *(_QWORD *)&v646 = *v351;
            *((_QWORD *)&v646 + 1) = v352;
            if (v352)
            {
              v353 = (unint64_t *)(v352 + 8);
              do
                v354 = __ldxr(v353);
              while (__stxr(v354 + 1, v353));
            }
            std::stringbuf::str();
            MIL::Passes::TypeInferenceResult::TypeInferenceResult(a6, &v646, 3, (uint64_t)__x);
            if (v645 < 0)
              operator delete(*(void **)__x);
            v355 = (std::__shared_weak_count *)*((_QWORD *)&v646 + 1);
            if (*((_QWORD *)&v646 + 1))
            {
              v356 = (unint64_t *)(*((_QWORD *)&v646 + 1) + 8);
              do
                v357 = __ldaxr(v356);
              while (__stlxr(v357 - 1, v356));
              goto LABEL_561;
            }
LABEL_563:
            v664.__begin_ = v588;
            *(std::vector<int>::pointer *)((char *)&v664.__begin_ + *((_QWORD *)v588 - 3)) = v587;
            v664.__end_ = (std::vector<int>::pointer)(MEMORY[0x1E0DE4FB8] + 16);
            if (v668 < 0)
              operator delete(v667);
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            MEMORY[0x1E0C022F8](v669);
            goto LABEL_566;
          }
          if ((unint64_t)MIL::Builder::OperationBuilder::GetNumArguments((uint64_t)v120, v280 + 2) >= 2)
            break;
          v281 = (MIL::Builder::Variable::VariableImpl **)MIL::Builder::OperationBuilder::GetArgumentForParameter((std::string::size_type)v120, (uint64_t)(v280 + 2), 0);
          v282 = (unsigned __int8 *)MIL::Builder::Variable::TryGetName(v281);
          if (v282)
          {
            if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a4, v282))
            {
              std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v664);
              v365 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v664, (uint64_t)"No inferred type for param ", 27);
              v366 = *((char *)v280 + 39);
              if (v366 >= 0)
                v367 = (uint64_t)(v280 + 2);
              else
                v367 = (uint64_t)v280[2];
              if (v366 >= 0)
                v368 = *((unsigned __int8 *)v280 + 39);
              else
                v368 = (uint64_t)v280[3];
              v369 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v365, v367, v368);
              v370 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v369, (uint64_t)" in called function ", 20);
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v371 = &__p;
              else
                v371 = (std::string *)__p.__r_.__value_.__r.__words[0];
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v372 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              else
                v372 = __p.__r_.__value_.__l.__size_;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v370, (uint64_t)v371, v372);
              v373 = (_QWORD *)MIL::Builder::OperationBuilder::GetLocationPtr(v120);
              v374 = v373[1];
              *(_QWORD *)&v646 = *v373;
              *((_QWORD *)&v646 + 1) = v374;
              if (v374)
              {
                v375 = (unint64_t *)(v374 + 8);
                do
                  v376 = __ldxr(v375);
                while (__stxr(v376 + 1, v375));
              }
              std::stringbuf::str();
              MIL::Passes::TypeInferenceResult::TypeInferenceResult(a6, &v646, 3, (uint64_t)__x);
              if (v645 < 0)
                operator delete(*(void **)__x);
              v355 = (std::__shared_weak_count *)*((_QWORD *)&v646 + 1);
              if (*((_QWORD *)&v646 + 1))
              {
                v377 = (unint64_t *)(*((_QWORD *)&v646 + 1) + 8);
                do
                  v357 = __ldaxr(v377);
                while (__stlxr(v357 - 1, v377));
LABEL_561:
                if (!v357)
                {
                  ((void (*)(std::__shared_weak_count *))v355->__on_zero_shared)(v355);
                  std::__shared_weak_count::__release_weak(v355);
                }
              }
              goto LABEL_563;
            }
            v664.__begin_ = (std::vector<int>::pointer)v282;
            v283 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a4, v282, (uint64_t)&std::piecewise_construct, (__int128 **)&v664);
            v664.__begin_ = (std::vector<int>::pointer)(v280 + 2);
            v284 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v648, (unsigned __int8 *)v280 + 16, (uint64_t)&std::piecewise_construct, (__int128 **)&v664);
            std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]((_QWORD *)v284 + 5, (uint64_t *)v283 + 5);
          }
          else
          {
            v285 = (MIL::Builder::Variable::VariableImpl **)MIL::Builder::OperationBuilder::GetArgumentForParameter((std::string::size_type)v120, (uint64_t)(v280 + 2), 0);
            MIL::Builder::Variable::TryGetValueSharedPtr(v285, __x);
            v286 = *(_QWORD *)__x;
            if (*(_QWORD *)__x)
            {
              v642 = *(_QWORD *)__x;
              v643 = *(std::__shared_weak_count **)&__x[2];
              if (*(_QWORD *)&__x[2])
              {
                v287 = (unint64_t *)(*(_QWORD *)&__x[2] + 8);
                do
                  v288 = __ldxr(v287);
                while (__stxr(v288 + 1, v287));
              }
              MIL::IRTypedArgument::Make(&v642, &v646);
              v664.__begin_ = (std::vector<int>::pointer)(v280 + 2);
              v289 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v648, (unsigned __int8 *)v280 + 16, (uint64_t)&std::piecewise_construct, (__int128 **)&v664);
              std::shared_ptr<MIL::IRTypedArgument>::operator=[abi:ne180100]<MIL::IRTypedArgument,std::default_delete<MIL::IRTypedArgument>,void>((_QWORD *)v289 + 5, (uint64_t *)&v646);
              v290 = v646;
              *(_QWORD *)&v646 = 0;
              if (v290)
                (*(void (**)(uint64_t))(*(_QWORD *)v290 + 8))(v290);
              v291 = v643;
              if (v643)
              {
                v292 = (unint64_t *)&v643->__shared_owners_;
                do
                  v293 = __ldaxr(v292);
                while (__stlxr(v293 - 1, v292));
                if (!v293)
                {
                  ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
                  std::__shared_weak_count::__release_weak(v291);
                }
              }
            }
            else
            {
              std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v664);
              v294 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v664, (uint64_t)"Could not build TypedArgument for ", 34);
              v295 = *((char *)v280 + 39);
              if (v295 >= 0)
                v296 = (uint64_t)(v280 + 2);
              else
                v296 = (uint64_t)v280[2];
              if (v295 >= 0)
                v297 = *((unsigned __int8 *)v280 + 39);
              else
                v297 = (uint64_t)v280[3];
              v298 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v294, v296, v297);
              v299 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v298, (uint64_t)" in called function ", 20);
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v300 = &__p;
              else
                v300 = (std::string *)__p.__r_.__value_.__r.__words[0];
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v301 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              else
                v301 = __p.__r_.__value_.__l.__size_;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v299, (uint64_t)v300, v301);
              v302 = (_QWORD *)MIL::Builder::OperationBuilder::GetLocationPtr(v120);
              v303 = v302[1];
              *(_QWORD *)&v641 = *v302;
              *((_QWORD *)&v641 + 1) = v303;
              if (v303)
              {
                v304 = (unint64_t *)(v303 + 8);
                do
                  v305 = __ldxr(v304);
                while (__stxr(v305 + 1, v304));
              }
              std::stringbuf::str();
              MIL::Passes::TypeInferenceResult::TypeInferenceResult(a6, &v641, 3, (uint64_t)v639);
              if (v640 < 0)
                operator delete(v639[0]);
              v306 = (std::__shared_weak_count *)*((_QWORD *)&v641 + 1);
              if (*((_QWORD *)&v641 + 1))
              {
                v307 = (unint64_t *)(*((_QWORD *)&v641 + 1) + 8);
                do
                  v308 = __ldaxr(v307);
                while (__stlxr(v308 - 1, v307));
                if (!v308)
                {
                  ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
                  std::__shared_weak_count::__release_weak(v306);
                }
              }
              v664.__begin_ = v588;
              *(std::vector<int>::pointer *)((char *)&v664.__begin_ + *((_QWORD *)v588 - 3)) = v587;
              v664.__end_ = (std::vector<int>::pointer)(MEMORY[0x1E0DE4FB8] + 16);
              if (v668 < 0)
                operator delete(v667);
              std::streambuf::~streambuf();
              std::ostream::~ostream();
              MEMORY[0x1E0C022F8](v669);
            }
            v309 = *(std::__shared_weak_count **)&__x[2];
            if (*(_QWORD *)&__x[2])
            {
              v310 = (unint64_t *)(*(_QWORD *)&__x[2] + 8);
              do
                v311 = __ldaxr(v310);
              while (__stlxr(v311 - 1, v310));
              if (!v311)
              {
                ((void (*)(std::__shared_weak_count *))v309->__on_zero_shared)(v309);
                std::__shared_weak_count::__release_weak(v309);
              }
            }
            if (!v286)
              goto LABEL_566;
          }
          v280 = (const void **)*v280;
          if (!v280)
            goto LABEL_470;
        }
        v358 = (_QWORD *)MIL::Builder::OperationBuilder::GetLocationPtr(v120);
        v359 = v358[1];
        *(_QWORD *)__x = *v358;
        *(_QWORD *)&__x[2] = v359;
        if (v359)
        {
          v360 = (unint64_t *)(v359 + 8);
          do
            v361 = __ldxr(v360);
          while (__stxr(v361 + 1, v360));
        }
        std::string::basic_string[abi:ne180100]<0>(&v664, "Don't yet support >1 args for called function params");
        MIL::Passes::TypeInferenceResult::TypeInferenceResult(a6, (__int128 *)__x, 4, (uint64_t)&v664);
        if (SHIBYTE(v664.__end_cap_.__value_) < 0)
          operator delete(v664.__begin_);
        v362 = *(std::__shared_weak_count **)&__x[2];
        if (*(_QWORD *)&__x[2])
        {
          v363 = (unint64_t *)(*(_QWORD *)&__x[2] + 8);
          do
            v364 = __ldaxr(v363);
          while (__stlxr(v364 - 1, v363));
          if (!v364)
          {
            ((void (*)(std::__shared_weak_count *))v362->__on_zero_shared)(v362);
            std::__shared_weak_count::__release_weak(v362);
          }
        }
LABEL_566:
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v647);
        goto LABEL_575;
      }
LABEL_470:
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v647);
      v312 = v651;
      if (*(_DWORD *)(a6 + 48) != 2
        || (MIL::MILResult::~MILResult((void **)a6),
            *(_DWORD *)(a6 + 48) != 2))
      {
LABEL_575:
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&v648);
        goto LABEL_576;
      }
      MIL::MILResult::~MILResult((void **)a6);
      v313 = (unsigned __int8 *)MIL::Builder::FunctionBuilder::SelectedSpecialization(v312);
      MIL::Builder::FunctionBuilder::GetBlock((uint64_t)v312, v313, &v646);
      MIL::Builder::BlockBuilder::GetOutputNames((MIL::Builder::BlockBuilder *)v646, &v647);
      v314 = v647.__r_.__value_.__l.__size_;
      v315 = v647.__r_.__value_.__r.__words[0];
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v314 - v315) >> 3) == MIL::Builder::OperationBuilder::GetNumOutputs(v120))
      {
        v316 = v647.__r_.__value_.__r.__words[0];
        if (v647.__r_.__value_.__l.__size_ != v647.__r_.__value_.__r.__words[0])
        {
          v317 = 0;
          v318 = 0;
          while (1)
          {
            v319 = (int *)(v316 + v317);
            if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(&v648, (unsigned __int8 *)(v316 + v317)))break;
            v664.__begin_ = v319;
            v320 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v648, (unsigned __int8 *)v319, (uint64_t)&std::piecewise_construct, (__int128 **)&v664);
            v664.__begin_ = (std::vector<int>::pointer)MIL::Builder::OperationBuilder::GetOutputName((MIL::Builder::OperationBuilder::OperationBuilderImpl **)v120, v318);
            v321 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a4, (unsigned __int8 *)v664.__begin_, (uint64_t)&std::piecewise_construct, (__int128 **)&v664);
            std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]((_QWORD *)v321 + 5, (uint64_t *)v320 + 5);
            ++v318;
            v316 = v647.__r_.__value_.__r.__words[0];
            v317 += 24;
            if (v318 >= 0xAAAAAAAAAAAAAAABLL
                       * ((uint64_t)(v647.__r_.__value_.__l.__size_ - v647.__r_.__value_.__r.__words[0]) >> 3))
              goto LABEL_477;
          }
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v664);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v664, (uint64_t)"Could not infer type for output at index ", 41);
          std::ostream::operator<<();
          v568 = (_QWORD *)MIL::Builder::OperationBuilder::GetLocationPtr(v120);
          v569 = v568[1];
          *(_QWORD *)&v638 = *v568;
          *((_QWORD *)&v638 + 1) = v569;
          if (v569)
          {
            v570 = (unint64_t *)(v569 + 8);
            do
              v571 = __ldxr(v570);
            while (__stxr(v571 + 1, v570));
          }
          std::stringbuf::str();
          MIL::Passes::TypeInferenceResult::TypeInferenceResult(a6, &v638, 3, (uint64_t)__x);
          if (v645 < 0)
            operator delete(*(void **)__x);
          v572 = (std::__shared_weak_count *)*((_QWORD *)&v638 + 1);
          if (*((_QWORD *)&v638 + 1))
          {
            v573 = (unint64_t *)(*((_QWORD *)&v638 + 1) + 8);
            do
              v574 = __ldaxr(v573);
            while (__stlxr(v574 - 1, v573));
            if (!v574)
            {
              ((void (*)(std::__shared_weak_count *))v572->__on_zero_shared)(v572);
              std::__shared_weak_count::__release_weak(v572);
            }
          }
          v664.__begin_ = v588;
          *(std::vector<int>::pointer *)((char *)&v664.__begin_ + *((_QWORD *)v588 - 3)) = v587;
          v664.__end_ = v583;
          if (v668 < 0)
            operator delete(v667);
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x1E0C022F8](v669);
          goto LABEL_574;
        }
LABEL_477:
        v322 = (_QWORD *)MIL::Builder::OperationBuilder::GetLocationPtr(v120);
        v323 = v322[1];
        *(_QWORD *)__x = *v322;
        *(_QWORD *)&__x[2] = v323;
        if (v323)
        {
          v324 = (unint64_t *)(v323 + 8);
          do
            v325 = __ldxr(v324);
          while (__stxr(v325 + 1, v324));
        }
        std::string::basic_string[abi:ne180100]<0>(&v664, "Success");
        MIL::Passes::TypeInferenceResult::TypeInferenceResult(a6, (__int128 *)__x, 2, (uint64_t)&v664);
      }
      else
      {
        v378 = (_QWORD *)MIL::Builder::OperationBuilder::GetLocationPtr(v120);
        v379 = v378[1];
        *(_QWORD *)__x = *v378;
        *(_QWORD *)&__x[2] = v379;
        if (v379)
        {
          v380 = (unint64_t *)(v379 + 8);
          do
            v381 = __ldxr(v380);
          while (__stxr(v381 + 1, v380));
        }
        std::string::basic_string[abi:ne180100]<0>(&v664, "Num outputs mismatch between call op & callee");
        MIL::Passes::TypeInferenceResult::TypeInferenceResult(a6, (__int128 *)__x, 3, (uint64_t)&v664);
      }
      if (SHIBYTE(v664.__end_cap_.__value_) < 0)
        operator delete(v664.__begin_);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)__x);
LABEL_574:
      v678 = &v647;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v678);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v646);
      goto LABEL_575;
    }
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v664);
    v170 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v664, (uint64_t)"Found multiple call ops calling ", 32);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v171 = &__p;
    else
      v171 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v172 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v172 = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v170, (uint64_t)v171, v172);
    v173 = (std::string::size_type *)MIL::Builder::OperationBuilder::GetLocationPtr(v120);
    v174 = v173[1];
    v647.__r_.__value_.__r.__words[0] = *v173;
    v647.__r_.__value_.__l.__size_ = v174;
    if (v174)
    {
      v175 = (unint64_t *)(v174 + 8);
      do
        v176 = __ldxr(v175);
      while (__stxr(v176 + 1, v175));
    }
    std::stringbuf::str();
    MIL::Passes::TypeInferenceResult::TypeInferenceResult(a6, (__int128 *)&v647, 3, (uint64_t)&v648);
    if (SBYTE7(v649) < 0)
      operator delete((void *)v648);
    v177 = (std::__shared_weak_count *)v647.__r_.__value_.__l.__size_;
    if (v647.__r_.__value_.__l.__size_)
    {
      v178 = (unint64_t *)(v647.__r_.__value_.__l.__size_ + 8);
      do
        v179 = __ldaxr(v178);
      while (__stlxr(v179 - 1, v178));
      if (!v179)
      {
        ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
        std::__shared_weak_count::__release_weak(v177);
      }
    }
    v664.__begin_ = v588;
    *(std::vector<int>::pointer *)((char *)&v664.__begin_ + *((_QWORD *)v588 - 3)) = v587;
    v664.__end_ = (std::vector<int>::pointer)(MEMORY[0x1E0DE4FB8] + 16);
    if (v668 < 0)
      operator delete(v667);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1E0C022F8](v669);
LABEL_576:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
LABEL_578:
    v382 = (std::__shared_weak_count *)*((_QWORD *)&v652 + 1);
    if (*((_QWORD *)&v652 + 1))
    {
      v383 = (unint64_t *)(*((_QWORD *)&v652 + 1) + 8);
      do
        v384 = __ldaxr(v383);
      while (__stlxr(v384 - 1, v383));
      if (!v384)
      {
        ((void (*)(std::__shared_weak_count *))v382->__on_zero_shared)(v382);
        std::__shared_weak_count::__release_weak(v382);
      }
    }
    if (*(_DWORD *)(a6 + 48) == 2)
    {
      MIL::MILResult::~MILResult((void **)a6);
      v13 = 3;
    }
    else
    {
      v13 = 1;
    }
LABEL_684:
    if (p_p)
    {
      v616 = (std::__shared_weak_count *)p_p;
      operator delete(p_p);
    }
LABEL_686:
    v664.__begin_ = (std::vector<int>::pointer)&v617;
    std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v664);
LABEL_687:
    std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)&v620);
LABEL_688:
    if (v629 < 0)
      operator delete(v627);
LABEL_690:
    v449 = v631;
    if (v631)
    {
      v450 = (unint64_t *)&v631->__shared_owners_;
      do
        v451 = __ldaxr(v450);
      while (__stlxr(v451 - 1, v450));
      if (!v451)
      {
        ((void (*)(std::__shared_weak_count *))v449->__on_zero_shared)(v449);
        std::__shared_weak_count::__release_weak(v449);
      }
    }
    if (v13 == 3 || !v13)
    {
      v7 = v590 + 16;
      if (v590 + 16 == v589)
        goto LABEL_863;
      continue;
    }
    break;
  }
  v664.__begin_ = (std::vector<int>::pointer)&v632;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v664);
LABEL_874:
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v634);
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v636);
}

void sub_1E0639F84()
{
  uint64_t v0;
  uint64_t v1;

  __cxa_end_catch();
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)&v1);
  if (v0)
    JUMPOUT(0x1E063A804);
  JUMPOUT(0x1E063A808);
}

void sub_1E063A0C4()
{
  uint64_t v0;
  uint64_t v1;

  if (SLOBYTE(STACK[0x3D7]) < 0)
    operator delete((void *)STACK[0x3C0]);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x378]);
  std::ostringstream::~ostringstream((uint64_t)&STACK[0x4F8]);
  *(_QWORD *)(v0 - 104) = &STACK[0x3F0];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v0 - 104));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x3E0]);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&STACK[0x420]);
  if (SLOBYTE(STACK[0x4C7]) < 0)
    operator delete((void *)STACK[0x4B0]);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x450]);
  if (v1)
    JUMPOUT(0x1E063A804);
  JUMPOUT(0x1E063A808);
}

void sub_1E063A698()
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x4B0]);
  JUMPOUT(0x1E063A6A4);
}

void sub_1E063A6C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a67;
  unint64_t v67;

  v67 = STACK[0x4F8];
  STACK[0x4F8] = 0;
  if (v67)
    (*(void (**)(unint64_t))(*(_QWORD *)v67 + 8))(v67);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](&a67);
  STACK[0x4F8] = (unint64_t)&STACK[0x3F0];
  JUMPOUT(0x1E063A748);
}

void sub_1E063A6FC()
{
  JUMPOUT(0x1E063A754);
}

void sub_1E063A704()
{
  JUMPOUT(0x1E063A808);
}

void sub_1E063A70C(_Unwind_Exception *a1)
{
  void **v2[16];
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x420]);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)v2);
  if (v3 < 0)
    operator delete(v2[14]);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v4);
  v2[0] = (void **)&v5;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](v2);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v6);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&v7);
  _Unwind_Resume(a1);
}

void sub_1E063A738()
{
  STACK[0x388] = (unint64_t)&STACK[0x4B0];
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x388]);
  JUMPOUT(0x1E063A74CLL);
}

void sub_1E063A77C()
{
  if (SLOBYTE(STACK[0x2D7]) < 0)
    JUMPOUT(0x1E063A938);
  JUMPOUT(0x1E063A93CLL);
}

void sub_1E063A790(_Unwind_Exception *a1)
{
  _QWORD v2[16];
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table(v2);
  if (v3 < 0)
    operator delete((void *)v2[14]);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](&v4);
  v2[0] = &v5;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](v2);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(&v6);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(&v7);
  _Unwind_Resume(a1);
}

void sub_1E063A798()
{
  if (SLOBYTE(STACK[0x4C7]) < 0)
    operator delete((void *)STACK[0x4B0]);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x450]);
  std::ostringstream::~ostringstream((uint64_t)&STACK[0x4F8]);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x3C0]);
  if (SLOBYTE(STACK[0x407]) < 0)
    operator delete((void *)STACK[0x3F0]);
  STACK[0x3F0] = (unint64_t)&STACK[0x420];
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3F0]);
  JUMPOUT(0x1E063A924);
}

void sub_1E063A7C4()
{
  JUMPOUT(0x1E063A93CLL);
}

void sub_1E063A7D8()
{
  unint64_t v0;
  unint64_t v1;

  STACK[0x428] = v0;
  v1 = STACK[0x4F8];
  STACK[0x4F8] = 0;
  if (v1)
    (*(void (**)(unint64_t))(*(_QWORD *)v1 + 8))(v1);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](&STACK[0x3C0]);
  if (SLOBYTE(STACK[0x407]) < 0)
    operator delete((void *)STACK[0x3F0]);
  STACK[0x3F0] = (unint64_t)&STACK[0x420];
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&STACK[0x3F0]);
  JUMPOUT(0x1E063A924);
}

