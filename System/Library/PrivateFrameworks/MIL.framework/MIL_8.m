void sub_1E08F16AC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 160);
  *(_QWORD *)(v2 - 160) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x360], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x3C8], 0);
  _Unwind_Resume(a1);
}

void sub_1E08F1C98()
{
  JUMPOUT(0x1E08F1B68);
}

void sub_1E08F1CA0()
{
  JUMPOUT(0x1E08F1BA0);
}

void sub_1E08F1CA8()
{
  JUMPOUT(0x1E08F1BD8);
}

void sub_1E08F1CB0()
{
  JUMPOUT(0x1E08F1C10);
}

void sub_1E08F1CB8()
{
  JUMPOUT(0x1E08F1C48);
}

void sub_1E08F1CC0()
{
  JUMPOUT(0x1E08F1C84);
}

void sub_1E08F1CCC()
{
  JUMPOUT(0x1E08F1CD8);
}

uint64_t MIL::Operators::Common::ios17::TensorToPixelBuffer::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unsigned __int8 *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  unsigned __int8 *v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  void **v52;
  unsigned __int8 *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  void ***v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  void *v65;
  _QWORD *v66;
  void *v67;
  unint64_t v68;
  void **v69;
  void **v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  void **v78;
  void **v79;
  char *v80;
  __int128 v81;
  void **v82;
  uint64_t v83;
  void *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  void *v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  void **v105;
  std::__shared_weak_count *v106;
  std::__shared_weak_count_vtbl *v107;
  std::__shared_weak_count *v108;
  unint64_t *p_shared_owners;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  void **v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  void **v118;
  void **v119;
  std::__shared_weak_count *v120;
  std::__shared_weak_count_vtbl *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  void **v126;
  std::__shared_weak_count *v127;
  std::__shared_weak_count_vtbl *v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  void **v133;
  std::__shared_weak_count *v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t v139;
  void **v140;
  std::__shared_weak_count *v141;
  std::__shared_weak_count_vtbl *v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  uint64_t v146;
  void **v147;
  std::__shared_weak_count *v148;
  std::__shared_weak_count_vtbl *v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  std::__shared_weak_count *v155;
  void **v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  void **v160;
  uint64_t result;
  uint64_t v162;
  void **v163;
  std::__shared_weak_count *v164;
  void *v165[2];
  char v166;
  uint64_t v167;
  std::__shared_weak_count *v168;
  void *v169[2];
  char v170;
  uint64_t v171;
  std::__shared_weak_count *v172;
  void *v173[2];
  char v174;
  void *v175[2];
  char v176;
  uint64_t v177;
  std::__shared_weak_count *v178;
  void *v179[2];
  char v180;
  void *v181[2];
  char v182;
  uint64_t v183;
  std::__shared_weak_count *v184;
  void *v185[2];
  char v186;
  void *v187[2];
  char v188;
  uint64_t v189;
  std::__shared_weak_count *v190;
  void **v191;
  std::__shared_weak_count *v192;
  void *v193[2];
  char v194;
  void *v195[2];
  char v196;
  uint64_t v197;
  std::__shared_weak_count *v198;
  __int128 v199;
  __int128 v200;
  void *v201[2];
  uint64_t v202;
  __n128 v203;
  __n128 v204;
  __n128 v205;
  void *__p;
  void *v207;
  _QWORD *v208;
  void *v209;
  void *v210;
  _QWORD *v211;
  void *v212;
  void *v213;
  _QWORD *v214;
  void *v215;
  void *v216;
  _QWORD *v217;
  void *v218;
  void *v219;
  _QWORD *v220;
  __n128 v221;
  uint64_t v222;
  _QWORD *v223;
  _QWORD v224[3];
  _QWORD *v225;
  _BYTE v226[24];
  _BYTE *v227;
  _QWORD v228[3];
  _QWORD *v229;
  __int128 v230;
  __int128 v231;
  int v232;
  void *v233;
  void *v234;
  _QWORD *v235;
  __int128 v236;
  _QWORD *v237;
  void **v238;
  void **v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;

  v246 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v223 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = operator new(0x18uLL);
  *((_QWORD *)&v230 + 1) = v10 + 3;
  *(_QWORD *)&v231 = v10 + 3;
  *v10 = v7;
  v10[1] = v8;
  v10[2] = v9;
  *(_QWORD *)&v230 = v10;
  v238 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v230);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = operator new(0x18uLL);
  *((_QWORD *)&v236 + 1) = v14 + 3;
  v237 = v14 + 3;
  *v14 = v11;
  v14[1] = v12;
  v14[2] = v13;
  *(_QWORD *)&v236 = v14;
  v239 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v236);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, 0);
  v18 = operator new(0x18uLL);
  v220 = v18 + 3;
  *v18 = v15;
  v18[1] = v16;
  v18[2] = v17;
  v218 = v18;
  v219 = v18 + 3;
  v240 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v218);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = MIL::IRUnknownDimension::Make(a1, 0);
  v21 = MIL::IRUnknownDimension::Make(a1, 0);
  v22 = operator new(0x18uLL);
  v217 = v22 + 3;
  *v22 = v19;
  v22[1] = v20;
  v22[2] = v21;
  v215 = v22;
  v216 = v22 + 3;
  v241 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v215);
  v23 = MIL::IRUnknownDimension::Make(a1, 0);
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = operator new(0x18uLL);
  v214 = v26 + 3;
  *v26 = v23;
  v26[1] = v24;
  v26[2] = v25;
  v212 = v26;
  v213 = v26 + 3;
  v242 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v212);
  v27 = MIL::IRUnknownDimension::Make(a1, 0);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = MIL::IRUnknownDimension::Make(a1, 0);
  v30 = operator new(0x18uLL);
  v210 = v30 + 3;
  v211 = v30 + 3;
  *v30 = v27;
  v30[1] = v28;
  v30[2] = v29;
  v209 = v30;
  v243 = MIL::IRTensorValueType::MakeWithShape(a1, 16, (uint64_t)&v209);
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = MIL::IRUnknownDimension::Make(a1, 0);
  v33 = MIL::IRUnknownDimension::Make(a1, 0);
  v34 = operator new(0x18uLL);
  v234 = v34 + 3;
  v235 = v34 + 3;
  *v34 = v31;
  v34[1] = v32;
  v34[2] = v33;
  v233 = v34;
  v244 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v233);
  v35 = MIL::IRUnknownDimension::Make(a1, 0);
  v36 = MIL::IRUnknownDimension::Make(a1, 0);
  v37 = MIL::IRUnknownDimension::Make(a1, 0);
  v38 = operator new(0x18uLL);
  v207 = v38 + 3;
  v208 = v38 + 3;
  *v38 = v35;
  v38[1] = v36;
  v38[2] = v37;
  __p = v38;
  v245 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v238, 8, &v221);
  MIL::IRParameter::Make(&v221, &v222);
  v39 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "input", &v222);
  v40 = v222;
  v222 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v221.n128_u64[1];
  if (v221.n128_u64[1])
  {
    v42 = (unint64_t *)(v221.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (__p)
  {
    v207 = __p;
    operator delete(__p);
  }
  if (v233)
  {
    v234 = v233;
    operator delete(v233);
  }
  if (v209)
  {
    v210 = v209;
    operator delete(v209);
  }
  if (v212)
  {
    v213 = v212;
    operator delete(v212);
  }
  if (v215)
  {
    v216 = v215;
    operator delete(v215);
  }
  if (v218)
  {
    v219 = v218;
    operator delete(v218);
  }
  if ((_QWORD)v236)
  {
    *((_QWORD *)&v236 + 1) = v236;
    operator delete((void *)v236);
  }
  if ((_QWORD)v230)
  {
    *((_QWORD *)&v230 + 1) = v230;
    operator delete((void *)v230);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v39 + 5) + 64))(*((_QWORD *)v39 + 5), 1);
  v44 = v223;
  *(_QWORD *)&v230 = MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v230, 1, &v205);
  MIL::IRParameter::Make(&v205, (uint64_t *)&v238);
  v45 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[18],std::unique_ptr<MIL::IRParameter>>(v44, "pixel_format_type", (uint64_t *)&v238);
  v46 = v238;
  v238 = 0;
  if (v46)
    (*((void (**)(void **))*v46 + 1))(v46);
  v47 = (std::__shared_weak_count *)v205.n128_u64[1];
  if (v205.n128_u64[1])
  {
    v48 = (unint64_t *)(v205.n128_u64[1] + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v45 + 5) + 32))(*((_QWORD *)v45 + 5), 1);
  v50 = v223;
  v51 = MIL::IRUnknownDimension::Make(a1, 0);
  v52 = (void **)operator new(8uLL);
  v238 = v52;
  *v52 = (void *)v51;
  v239 = v52 + 1;
  v240 = (uint64_t)(v52 + 1);
  *(_QWORD *)&v236 = MIL::IRTensorValueType::MakeWithShape(a1, 12, (uint64_t)&v238);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v236, 1, &v204);
  MIL::IRParameter::Make(&v204, (uint64_t *)&v230);
  v53 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v50, "bytes_per_row", (uint64_t *)&v230);
  v54 = v230;
  *(_QWORD *)&v230 = 0;
  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  v55 = (std::__shared_weak_count *)v204.n128_u64[1];
  if (v204.n128_u64[1])
  {
    v56 = (unint64_t *)(v204.n128_u64[1] + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (v238)
  {
    v239 = v238;
    operator delete(v238);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v53 + 5) + 48))(*((_QWORD *)v53 + 5), 1);
  v212 = 0;
  v58 = operator new();
  *(_QWORD *)v58 = 0;
  *(_QWORD *)(v58 + 8) = 0;
  *(_QWORD *)(v58 + 16) = 0;
  v238 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v212, (void **)v58);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v238, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)v212, 1uLL);
  v59 = (void ***)v212;
  v60 = MIL::IRUnknownDimension::Make(a1, 0);
  v61 = MIL::IRUnknownDimension::Make(a1, 0);
  v62 = operator new(0x10uLL);
  *((_QWORD *)&v236 + 1) = v62 + 2;
  v237 = v62 + 2;
  *v62 = v60;
  v62[1] = v61;
  *(_QWORD *)&v236 = v62;
  v63 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v64 = operator new(8uLL);
  v218 = v64;
  *v64 = v63;
  v220 = v64 + 1;
  v219 = v64 + 1;
  v230 = 0u;
  v231 = 0u;
  v232 = 1065353216;
  v233 = (void *)MIL::IRPixelBufferValueType::MakeWithShape(a1, 0x14u, &v236, (uint64_t)&v218, (uint64_t *)&v230);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v233, 1, &v203);
  MIL::IRParameter::Make(&v203, (uint64_t *)&v209);
  v65 = v209;
  v215 = v209;
  if (v209)
  {
    v66 = (_QWORD *)operator new();
    v67 = v209;
    *v66 = &unk_1EA99F888;
    v66[1] = 0;
    v66[2] = 0;
    v66[3] = v67;
  }
  else
  {
    v66 = 0;
  }
  v216 = v66;
  v209 = 0;
  v68 = (unint64_t)v59[2];
  v69 = v59[1];
  if ((unint64_t)v69 >= v68)
  {
    v71 = ((char *)v69 - (char *)*v59) >> 4;
    v72 = v71 + 1;
    if ((unint64_t)(v71 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v73 = v68 - (_QWORD)*v59;
    if (v73 >> 3 > v72)
      v72 = v73 >> 3;
    if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF0)
      v74 = 0xFFFFFFFFFFFFFFFLL;
    else
      v74 = v72;
    v242 = (uint64_t)(v59 + 2);
    v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v59 + 2), v74);
    v77 = &v75[16 * v71];
    *(_QWORD *)v77 = v65;
    *((_QWORD *)v77 + 1) = v66;
    v216 = 0;
    v215 = 0;
    v79 = *v59;
    v78 = v59[1];
    if (v78 == *v59)
    {
      v82 = v59[1];
      v80 = &v75[16 * v71];
    }
    else
    {
      v80 = &v75[16 * v71];
      do
      {
        v81 = *((_OWORD *)v78 - 1);
        v78 -= 2;
        *((_OWORD *)v80 - 1) = v81;
        v80 -= 16;
        *v78 = 0;
        v78[1] = 0;
      }
      while (v78 != v79);
      v82 = *v59;
      v78 = v59[1];
    }
    v70 = (void **)(v77 + 16);
    *v59 = (void **)v80;
    v238 = v82;
    v239 = v82;
    v59[1] = (void **)(v77 + 16);
    v240 = (uint64_t)v78;
    v83 = (uint64_t)v59[2];
    v59[2] = (void **)&v75[16 * v76];
    v241 = v83;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v238);
  }
  else
  {
    *v69 = v65;
    v69[1] = v66;
    v70 = v69 + 2;
    v216 = 0;
    v215 = 0;
  }
  v59[1] = v70;
  v84 = v209;
  v209 = 0;
  if (v84)
    (*(void (**)(void *))(*(_QWORD *)v84 + 8))(v84);
  v85 = (std::__shared_weak_count *)v203.n128_u64[1];
  if (v203.n128_u64[1])
  {
    v86 = (unint64_t *)(v203.n128_u64[1] + 8);
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&v230);
  if (v218)
  {
    v219 = v218;
    operator delete(v218);
  }
  if ((_QWORD)v236)
  {
    *((_QWORD *)&v236 + 1) = v236;
    operator delete((void *)v236);
  }
  *(_OWORD *)v201 = *(_OWORD *)a2;
  v202 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v88 = (uint64_t)v223;
  *(_QWORD *)&v200 = v223;
  if (v223)
  {
    v89 = (_QWORD *)operator new();
    *v89 = &unk_1EA99F8E8;
    v89[1] = 0;
    v89[2] = 0;
    v89[3] = v88;
  }
  else
  {
    v89 = 0;
  }
  *((_QWORD *)&v200 + 1) = v89;
  v223 = 0;
  *(_QWORD *)&v199 = v212;
  if (v212)
  {
    v90 = (_QWORD *)operator new();
    v91 = v212;
    *v90 = &unk_1EA99F948;
    v90[1] = 0;
    v90[2] = 0;
    v90[3] = v91;
  }
  else
  {
    v90 = 0;
  }
  *((_QWORD *)&v199 + 1) = v90;
  v212 = 0;
  v228[0] = &unk_1EA99FAC8;
  v228[1] = MIL::Operators::Common::ios17::CustomValidators::ValidateTensorToPixelBuffer;
  v229 = v228;
  v227 = 0;
  MIL::IROperator::Make((__int128 *)v201, &v200, &v199, (uint64_t)v228, (uint64_t)v226, a3);
  v92 = v227;
  if (v227 == v226)
  {
    v93 = 4;
    v92 = v226;
  }
  else
  {
    if (!v227)
      goto LABEL_79;
    v93 = 5;
  }
  (*(void (**)(void))(*v92 + 8 * v93))();
LABEL_79:
  v94 = v229;
  if (v229 == v228)
  {
    v95 = 4;
    v94 = v228;
    goto LABEL_83;
  }
  if (v229)
  {
    v95 = 5;
LABEL_83:
    (*(void (**)(void))(*v94 + 8 * v95))();
  }
  v96 = (std::__shared_weak_count *)*((_QWORD *)&v199 + 1);
  if (*((_QWORD *)&v199 + 1))
  {
    v97 = (unint64_t *)(*((_QWORD *)&v199 + 1) + 8);
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = (std::__shared_weak_count *)*((_QWORD *)&v200 + 1);
  if (*((_QWORD *)&v200 + 1))
  {
    v100 = (unint64_t *)(*((_QWORD *)&v200 + 1) + 8);
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  if (SHIBYTE(v202) < 0)
    operator delete(v201[0]);
  v102 = *a3;
  v224[0] = &off_1EA99FBD8;
  v224[1] = MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceTensorToPixelBuffer;
  v225 = v224;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v102 + 200))(v102, v224);
  v103 = v225;
  if (v225 == v224)
  {
    v104 = 4;
    v103 = v224;
  }
  else
  {
    if (!v225)
      goto LABEL_101;
    v104 = 5;
  }
  (*(void (**)(void))(*v103 + 8 * v104))();
LABEL_101:
  MIL::Validation::TensorDTypeConstraints::Make(&v238);
  v105 = v238;
  std::string::basic_string[abi:ne180100]<0>(v195, "input");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v195, 0, (uint64_t *)&v230);
  v197 = v230;
  if ((_QWORD)v230)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = (std::__shared_weak_count_vtbl *)v230;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = v107;
  }
  else
  {
    v106 = 0;
  }
  v198 = v106;
  *(_QWORD *)&v230 = 0;
  std::string::basic_string[abi:ne180100]<0>(v193, "T");
  (*((void (**)(void **, uint64_t *, void **))*v105 + 3))(v105, &v197, v193);
  if (v194 < 0)
    operator delete(v193[0]);
  v108 = v198;
  if (v198)
  {
    p_shared_owners = (unint64_t *)&v198->__shared_owners_;
    do
      v110 = __ldaxr(p_shared_owners);
    while (__stlxr(v110 - 1, p_shared_owners));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v230;
  *(_QWORD *)&v230 = 0;
  if (v111)
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  if (v196 < 0)
    operator delete(v195[0]);
  v112 = *a3;
  v191 = v238;
  if (v238)
  {
    v113 = (std::__shared_weak_count *)operator new();
    v114 = v238;
    v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v113->__shared_owners_ = 0;
    v113->__shared_weak_owners_ = 0;
    v113[1].__vftable = (std::__shared_weak_count_vtbl *)v114;
  }
  else
  {
    v113 = 0;
  }
  v192 = v113;
  v238 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v112 + 56))(v112, &v191);
  v115 = v192;
  if (v192)
  {
    v116 = (unint64_t *)&v192->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = v238;
  v238 = 0;
  if (v118)
    (*((void (**)(void **))*v118 + 1))(v118);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v238);
  v119 = v238;
  std::string::basic_string[abi:ne180100]<0>(v187, "input");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v187, 0, (uint64_t *)&v230);
  v189 = v230;
  if ((_QWORD)v230)
  {
    v120 = (std::__shared_weak_count *)operator new();
    v121 = (std::__shared_weak_count_vtbl *)v230;
    v120->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v120->__shared_owners_ = 0;
    v120->__shared_weak_owners_ = 0;
    v120[1].__vftable = v121;
  }
  else
  {
    v120 = 0;
  }
  v190 = v120;
  *(_QWORD *)&v230 = 0;
  std::string::basic_string[abi:ne180100]<0>(v185, "C");
  (*((void (**)(void **, uint64_t *, _QWORD, void **))*v119 + 3))(v119, &v189, 0, v185);
  if (v186 < 0)
    operator delete(v185[0]);
  v122 = v190;
  if (v190)
  {
    v123 = (unint64_t *)&v190->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v125 = v230;
  *(_QWORD *)&v230 = 0;
  if (v125)
    (*(void (**)(uint64_t))(*(_QWORD *)v125 + 8))(v125);
  if (v188 < 0)
    operator delete(v187[0]);
  v126 = v238;
  std::string::basic_string[abi:ne180100]<0>(v181, "input");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v181, 0, (uint64_t *)&v230);
  v183 = v230;
  if ((_QWORD)v230)
  {
    v127 = (std::__shared_weak_count *)operator new();
    v128 = (std::__shared_weak_count_vtbl *)v230;
    v127->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v127->__shared_owners_ = 0;
    v127->__shared_weak_owners_ = 0;
    v127[1].__vftable = v128;
  }
  else
  {
    v127 = 0;
  }
  v184 = v127;
  *(_QWORD *)&v230 = 0;
  std::string::basic_string[abi:ne180100]<0>(v179, "H");
  (*((void (**)(void **, uint64_t *, uint64_t, void **))*v126 + 3))(v126, &v183, 1, v179);
  if (v180 < 0)
    operator delete(v179[0]);
  v129 = v184;
  if (v184)
  {
    v130 = (unint64_t *)&v184->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v132 = v230;
  *(_QWORD *)&v230 = 0;
  if (v132)
    (*(void (**)(uint64_t))(*(_QWORD *)v132 + 8))(v132);
  if (v182 < 0)
    operator delete(v181[0]);
  v133 = v238;
  std::string::basic_string[abi:ne180100]<0>(v175, "input");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v175, 0, (uint64_t *)&v230);
  v177 = v230;
  if ((_QWORD)v230)
  {
    v134 = (std::__shared_weak_count *)operator new();
    v135 = (std::__shared_weak_count_vtbl *)v230;
    v134->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v134->__shared_owners_ = 0;
    v134->__shared_weak_owners_ = 0;
    v134[1].__vftable = v135;
  }
  else
  {
    v134 = 0;
  }
  v178 = v134;
  *(_QWORD *)&v230 = 0;
  std::string::basic_string[abi:ne180100]<0>(v173, "W");
  (*((void (**)(void **, uint64_t *, uint64_t, void **))*v133 + 3))(v133, &v177, 2, v173);
  if (v174 < 0)
    operator delete(v173[0]);
  v136 = v178;
  if (v178)
  {
    v137 = (unint64_t *)&v178->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  v139 = v230;
  *(_QWORD *)&v230 = 0;
  if (v139)
    (*(void (**)(uint64_t))(*(_QWORD *)v139 + 8))(v139);
  if (v176 < 0)
    operator delete(v175[0]);
  v140 = v238;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v230);
  v171 = v230;
  if ((_QWORD)v230)
  {
    v141 = (std::__shared_weak_count *)operator new();
    v142 = (std::__shared_weak_count_vtbl *)v230;
    v141->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v141->__shared_owners_ = 0;
    v141->__shared_weak_owners_ = 0;
    v141[1].__vftable = v142;
  }
  else
  {
    v141 = 0;
  }
  v172 = v141;
  *(_QWORD *)&v230 = 0;
  std::string::basic_string[abi:ne180100]<0>(v169, "H_OUT");
  (*((void (**)(void **, uint64_t *, _QWORD, void **))*v140 + 3))(v140, &v171, 0, v169);
  if (v170 < 0)
    operator delete(v169[0]);
  v143 = v172;
  if (v172)
  {
    v144 = (unint64_t *)&v172->__shared_owners_;
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 - 1, v144));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  v146 = v230;
  *(_QWORD *)&v230 = 0;
  if (v146)
    (*(void (**)(uint64_t))(*(_QWORD *)v146 + 8))(v146);
  v147 = v238;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v230);
  v167 = v230;
  if ((_QWORD)v230)
  {
    v148 = (std::__shared_weak_count *)operator new();
    v149 = (std::__shared_weak_count_vtbl *)v230;
    v148->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v148->__shared_owners_ = 0;
    v148->__shared_weak_owners_ = 0;
    v148[1].__vftable = v149;
  }
  else
  {
    v148 = 0;
  }
  v168 = v148;
  *(_QWORD *)&v230 = 0;
  std::string::basic_string[abi:ne180100]<0>(v165, "W_OUT");
  (*((void (**)(void **, uint64_t *, uint64_t, void **))*v147 + 3))(v147, &v167, 1, v165);
  if (v166 < 0)
    operator delete(v165[0]);
  v150 = v168;
  if (v168)
  {
    v151 = (unint64_t *)&v168->__shared_owners_;
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
  v153 = v230;
  *(_QWORD *)&v230 = 0;
  if (v153)
    (*(void (**)(uint64_t))(*(_QWORD *)v153 + 8))(v153);
  v154 = *a3;
  v163 = v238;
  if (v238)
  {
    v155 = (std::__shared_weak_count *)operator new();
    v156 = v238;
    v155->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v155->__shared_owners_ = 0;
    v155->__shared_weak_owners_ = 0;
    v155[1].__vftable = (std::__shared_weak_count_vtbl *)v156;
  }
  else
  {
    v155 = 0;
  }
  v164 = v155;
  v238 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v154 + 56))(v154, &v163);
  v157 = v164;
  if (v164)
  {
    v158 = (unint64_t *)&v164->__shared_owners_;
    do
      v159 = __ldaxr(v158);
    while (__stlxr(v159 - 1, v158));
    if (!v159)
    {
      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
      std::__shared_weak_count::__release_weak(v157);
    }
  }
  v160 = v238;
  v238 = 0;
  if (v160)
    (*((void (**)(void **))*v160 + 1))(v160);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v212, 0);
  result = (uint64_t)v223;
  if (v223)
  {
    v162 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v223);
    return MEMORY[0x1E0C023A0](v162, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08F3008(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 136);
  *(_QWORD *)(v2 - 136) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x208], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x268], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::TensorToTensorBuffer::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void **v29;
  void *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  void **v36;
  void *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  char **v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  __int128 v89;
  char *v90;
  char *v91;
  char *v92;
  std::__shared_weak_count *v93;
  unint64_t *p_shared_owners;
  unint64_t v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  char **v103;
  _QWORD *v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  void **v117;
  std::__shared_weak_count *v118;
  std::__shared_weak_count_vtbl *v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  void *v123;
  void **v124;
  std::__shared_weak_count *v125;
  std::__shared_weak_count_vtbl *v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  void **v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  void **v137;
  uint64_t result;
  uint64_t v139;
  void **v140;
  std::__shared_weak_count *v141;
  void *v142[2];
  char v143;
  void *v144;
  std::__shared_weak_count *v145;
  void *v146[2];
  char v147;
  void *v148[2];
  char v149;
  void *v150;
  std::__shared_weak_count *v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  uint64_t v155;
  void *v156;
  void *v157;
  _QWORD *v158;
  void *v159;
  void *v160;
  _QWORD *v161;
  void *v162;
  void *v163;
  _QWORD *v164;
  void *v165;
  void *v166;
  _QWORD *v167;
  void *v168;
  void *v169;
  _QWORD *v170;
  void *v171;
  void *v172;
  _QWORD *v173;
  void *v174;
  void *v175;
  _QWORD *v176;
  void *v177;
  void *v178;
  _QWORD *v179;
  void *v180;
  void *v181;
  _QWORD *v182;
  __n128 v183;
  uint64_t v184;
  __int128 v185;
  char **v186;
  __n128 v187;
  __n128 v188;
  void *__p;
  void *v190;
  _QWORD *v191;
  void *v192;
  void *v193;
  _QWORD *v194;
  void *v195;
  void *v196;
  _QWORD *v197;
  void *v198;
  void *v199;
  _QWORD *v200;
  void *v201;
  void *v202;
  _QWORD *v203;
  void *v204;
  void *v205;
  _QWORD *v206;
  __n128 v207;
  _QWORD *v208;
  void *v209;
  void *v210;
  char *v211;
  char *v212;
  char **v213;
  _QWORD v214[3];
  _QWORD *v215;
  _BYTE v216[24];
  _BYTE *v217;
  _QWORD v218[3];
  _QWORD *v219;
  void *v220;
  void *v221;
  _QWORD *v222;
  void **v223;
  void **v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;

  v231 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v208 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (char *)operator new(8uLL);
  v209 = v8;
  *(_QWORD *)v8 = v7;
  v211 = v8 + 8;
  v210 = v8 + 8;
  v223 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v209);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v220 = v10;
  *v10 = v9;
  v221 = v10 + 1;
  v222 = v10 + 1;
  v224 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v220);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v204 = v12;
  *v12 = v11;
  v206 = v12 + 1;
  v205 = v12 + 1;
  v225 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v204);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  v201 = v14;
  *v14 = v13;
  v203 = v14 + 1;
  v202 = v14 + 1;
  v226 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v201);
  v15 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v16 = operator new(8uLL);
  v198 = v16;
  *v16 = v15;
  v200 = v16 + 1;
  v199 = v16 + 1;
  v227 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v198);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  v195 = v18;
  *v18 = v17;
  v197 = v18 + 1;
  v196 = v18 + 1;
  v228 = MIL::IRTensorValueType::MakeWithShape(a1, 16, (uint64_t)&v195);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v192 = v20;
  *v20 = v19;
  v194 = v20 + 1;
  v193 = v20 + 1;
  v229 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v192);
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  __p = v22;
  *v22 = v21;
  v190 = v22 + 1;
  v191 = v22 + 1;
  v230 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v223, 8, &v207);
  MIL::IRParameter::Make(&v207, (uint64_t *)&v180);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "input", (uint64_t *)&v180);
  v23 = v180;
  v180 = 0;
  if (v23)
    (*(void (**)(void *))(*(_QWORD *)v23 + 8))(v23);
  v24 = (std::__shared_weak_count *)v207.n128_u64[1];
  if (v207.n128_u64[1])
  {
    v25 = (unint64_t *)(v207.n128_u64[1] + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (__p)
  {
    v190 = __p;
    operator delete(__p);
  }
  if (v192)
  {
    v193 = v192;
    operator delete(v192);
  }
  if (v195)
  {
    v196 = v195;
    operator delete(v195);
  }
  if (v198)
  {
    v199 = v198;
    operator delete(v198);
  }
  if (v201)
  {
    v202 = v201;
    operator delete(v201);
  }
  if (v204)
  {
    v205 = v204;
    operator delete(v204);
  }
  if (v220)
  {
    v221 = v220;
    operator delete(v220);
  }
  if (v209)
  {
    v210 = v209;
    operator delete(v209);
  }
  v27 = v208;
  v28 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v29 = (void **)operator new(8uLL);
  v223 = v29;
  *v29 = (void *)v28;
  v224 = v29 + 1;
  v225 = (uint64_t)(v29 + 1);
  v220 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 12, (uint64_t)&v223);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v220, 1, &v188);
  MIL::IRParameter::Make(&v188, (uint64_t *)&v209);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v27, "strides", (uint64_t *)&v209);
  v30 = v209;
  v209 = 0;
  if (v30)
    (*(void (**)(void *))(*(_QWORD *)v30 + 8))(v30);
  v31 = (std::__shared_weak_count *)v188.n128_u64[1];
  if (v188.n128_u64[1])
  {
    v32 = (unint64_t *)(v188.n128_u64[1] + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (v223)
  {
    v224 = v223;
    operator delete(v223);
  }
  v34 = v208;
  v35 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v36 = (void **)operator new(8uLL);
  v223 = v36;
  *v36 = (void *)v35;
  v224 = v36 + 1;
  v225 = (uint64_t)(v36 + 1);
  v220 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v223);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v220, 1, &v187);
  MIL::IRParameter::Make(&v187, (uint64_t *)&v209);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[19],std::unique_ptr<MIL::IRParameter>>(v34, "interleave_factors", (uint64_t *)&v209);
  v37 = v209;
  v209 = 0;
  if (v37)
    (*(void (**)(void *))(*(_QWORD *)v37 + 8))(v37);
  v38 = (std::__shared_weak_count *)v187.n128_u64[1];
  if (v187.n128_u64[1])
  {
    v39 = (unint64_t *)(v187.n128_u64[1] + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (v223)
  {
    v224 = v223;
    operator delete(v223);
  }
  v186 = 0;
  v41 = operator new();
  *(_QWORD *)v41 = 0;
  *(_QWORD *)(v41 + 8) = 0;
  *(_QWORD *)(v41 + 16) = 0;
  v223 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v186, (void **)v41);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v223, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v186, 1uLL);
  v42 = v186;
  v43 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v44 = operator new(8uLL);
  v220 = v44;
  *v44 = v43;
  v221 = v44 + 1;
  v222 = v44 + 1;
  v45 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v46 = operator new(8uLL);
  v204 = v46;
  *v46 = v45;
  v206 = v46 + 1;
  v205 = v46 + 1;
  v223 = (void **)MIL::IRTensorBufferValueType::MakeWithShape(a1, 9, (uint64_t)&v220, (uint64_t)&v204);
  v47 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v48 = operator new(8uLL);
  v201 = v48;
  *v48 = v47;
  v203 = v48 + 1;
  v202 = v48 + 1;
  v49 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v50 = operator new(8uLL);
  v198 = v50;
  *v50 = v49;
  v200 = v50 + 1;
  v199 = v50 + 1;
  v224 = (void **)MIL::IRTensorBufferValueType::MakeWithShape(a1, 10, (uint64_t)&v201, (uint64_t)&v198);
  v51 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v52 = operator new(8uLL);
  v195 = v52;
  *v52 = v51;
  v197 = v52 + 1;
  v196 = v52 + 1;
  v53 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v54 = operator new(8uLL);
  v192 = v54;
  *v54 = v53;
  v194 = v54 + 1;
  v193 = v54 + 1;
  v225 = MIL::IRTensorBufferValueType::MakeWithShape(a1, 11, (uint64_t)&v195, (uint64_t)&v192);
  v55 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v56 = operator new(8uLL);
  __p = v56;
  *v56 = v55;
  v190 = v56 + 1;
  v191 = v56 + 1;
  v57 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v58 = operator new(8uLL);
  v180 = v58;
  *v58 = v57;
  v181 = v58 + 1;
  v182 = v58 + 1;
  v226 = MIL::IRTensorBufferValueType::MakeWithShape(a1, 14, (uint64_t)&__p, (uint64_t)&v180);
  v59 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v60 = operator new(8uLL);
  v177 = v60;
  *v60 = v59;
  v178 = v60 + 1;
  v179 = v60 + 1;
  v61 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v62 = operator new(8uLL);
  v174 = v62;
  *v62 = v61;
  v175 = v62 + 1;
  v176 = v62 + 1;
  v227 = MIL::IRTensorBufferValueType::MakeWithShape(a1, 15, (uint64_t)&v177, (uint64_t)&v174);
  v63 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v64 = operator new(8uLL);
  v171 = v64;
  *v64 = v63;
  v172 = v64 + 1;
  v173 = v64 + 1;
  v65 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v66 = operator new(8uLL);
  v168 = v66;
  *v66 = v65;
  v169 = v66 + 1;
  v170 = v66 + 1;
  v228 = MIL::IRTensorBufferValueType::MakeWithShape(a1, 16, (uint64_t)&v171, (uint64_t)&v168);
  v67 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v68 = operator new(8uLL);
  v165 = v68;
  *v68 = v67;
  v166 = v68 + 1;
  v167 = v68 + 1;
  v69 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v70 = operator new(8uLL);
  v162 = v70;
  *v70 = v69;
  v163 = v70 + 1;
  v164 = v70 + 1;
  v229 = MIL::IRTensorBufferValueType::MakeWithShape(a1, 4, (uint64_t)&v165, (uint64_t)&v162);
  v71 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v72 = operator new(8uLL);
  v159 = v72;
  *v72 = v71;
  v160 = v72 + 1;
  v161 = v72 + 1;
  v73 = MIL::IRUnknownProperty::Make(a1, (MIL::MILContext *)1);
  v74 = operator new(8uLL);
  v156 = v74;
  *v74 = v73;
  v157 = v74 + 1;
  v158 = v74 + 1;
  v230 = MIL::IRTensorBufferValueType::MakeWithShape(a1, 5, (uint64_t)&v159, (uint64_t)&v156);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v223, 8, &v183);
  MIL::IRParameter::Make(&v183, &v184);
  *(_QWORD *)&v185 = v184;
  if (v184)
  {
    v75 = (_QWORD *)operator new();
    v76 = v184;
    *v75 = &unk_1EA99F888;
    v75[1] = 0;
    v75[2] = 0;
    v75[3] = v76;
  }
  else
  {
    v75 = 0;
  }
  *((_QWORD *)&v185 + 1) = v75;
  v184 = 0;
  v77 = v42[2];
  v78 = v42[1];
  if (v78 >= v77)
  {
    v79 = (v78 - *v42) >> 4;
    v80 = v79 + 1;
    if ((unint64_t)(v79 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v81 = v77 - *v42;
    if (v81 >> 3 > v80)
      v80 = v81 >> 3;
    if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF0)
      v82 = 0xFFFFFFFFFFFFFFFLL;
    else
      v82 = v80;
    v213 = v42 + 2;
    v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v42 + 2), v82);
    v85 = &v83[16 * v79];
    *(_OWORD *)v85 = v185;
    v185 = 0uLL;
    v87 = *v42;
    v86 = v42[1];
    if (v86 == *v42)
    {
      v90 = v42[1];
      v88 = &v83[16 * v79];
    }
    else
    {
      v88 = &v83[16 * v79];
      do
      {
        v89 = *((_OWORD *)v86 - 1);
        v86 -= 16;
        *((_OWORD *)v88 - 1) = v89;
        v88 -= 16;
        *(_QWORD *)v86 = 0;
        *((_QWORD *)v86 + 1) = 0;
      }
      while (v86 != v87);
      v90 = *v42;
      v86 = v42[1];
    }
    v91 = v85 + 16;
    *v42 = v88;
    v210 = v90;
    v42[1] = v85 + 16;
    v211 = v86;
    v92 = v42[2];
    v42[2] = &v83[16 * v84];
    v212 = v92;
    v209 = v90;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v209);
    v93 = (std::__shared_weak_count *)*((_QWORD *)&v185 + 1);
    v42[1] = v91;
    if (v93)
    {
      p_shared_owners = (unint64_t *)&v93->__shared_owners_;
      do
        v95 = __ldaxr(p_shared_owners);
      while (__stlxr(v95 - 1, p_shared_owners));
      if (!v95)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
  }
  else
  {
    *(_QWORD *)v78 = v185;
    *((_QWORD *)v78 + 1) = v75;
    v185 = 0uLL;
    v42[1] = v78 + 16;
  }
  v96 = v184;
  v184 = 0;
  if (v96)
    (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
  v97 = (std::__shared_weak_count *)v183.n128_u64[1];
  if (v183.n128_u64[1])
  {
    v98 = (unint64_t *)(v183.n128_u64[1] + 8);
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  if (v156)
  {
    v157 = v156;
    operator delete(v156);
  }
  if (v159)
  {
    v160 = v159;
    operator delete(v159);
  }
  if (v162)
  {
    v163 = v162;
    operator delete(v162);
  }
  if (v165)
  {
    v166 = v165;
    operator delete(v165);
  }
  if (v168)
  {
    v169 = v168;
    operator delete(v168);
  }
  if (v171)
  {
    v172 = v171;
    operator delete(v171);
  }
  if (v174)
  {
    v175 = v174;
    operator delete(v174);
  }
  if (v177)
  {
    v178 = v177;
    operator delete(v177);
  }
  if (v180)
  {
    v181 = v180;
    operator delete(v180);
  }
  if (__p)
  {
    v190 = __p;
    operator delete(__p);
  }
  if (v192)
  {
    v193 = v192;
    operator delete(v192);
  }
  if (v195)
  {
    v196 = v195;
    operator delete(v195);
  }
  if (v198)
  {
    v199 = v198;
    operator delete(v198);
  }
  if (v201)
  {
    v202 = v201;
    operator delete(v201);
  }
  if (v204)
  {
    v205 = v204;
    operator delete(v204);
  }
  if (v220)
  {
    v221 = v220;
    operator delete(v220);
  }
  v154 = *(_OWORD *)a2;
  v155 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v100 = (uint64_t)v208;
  *(_QWORD *)&v153 = v208;
  if (v208)
  {
    v101 = (_QWORD *)operator new();
    *v101 = &unk_1EA99F8E8;
    v101[1] = 0;
    v101[2] = 0;
    v101[3] = v100;
  }
  else
  {
    v101 = 0;
  }
  *((_QWORD *)&v153 + 1) = v101;
  v208 = 0;
  *(_QWORD *)&v152 = v186;
  if (v186)
  {
    v102 = (_QWORD *)operator new();
    v103 = v186;
    *v102 = &unk_1EA99F948;
    v102[1] = 0;
    v102[2] = 0;
    v102[3] = v103;
  }
  else
  {
    v102 = 0;
  }
  *((_QWORD *)&v152 + 1) = v102;
  v186 = 0;
  v218[0] = &unk_1EA99FAC8;
  v218[1] = MIL::Operators::Common::ios17::CustomValidators::ValidateTensorToTensorBuffer;
  v219 = v218;
  v217 = 0;
  MIL::IROperator::Make(&v154, &v153, &v152, (uint64_t)v218, (uint64_t)v216, a3);
  v104 = v217;
  if (v217 == v216)
  {
    v105 = 4;
    v104 = v216;
  }
  else
  {
    if (!v217)
      goto LABEL_113;
    v105 = 5;
  }
  (*(void (**)(void))(*v104 + 8 * v105))();
LABEL_113:
  v106 = v219;
  if (v219 == v218)
  {
    v107 = 4;
    v106 = v218;
    goto LABEL_117;
  }
  if (v219)
  {
    v107 = 5;
LABEL_117:
    (*(void (**)(void))(*v106 + 8 * v107))();
  }
  v108 = (std::__shared_weak_count *)*((_QWORD *)&v152 + 1);
  if (*((_QWORD *)&v152 + 1))
  {
    v109 = (unint64_t *)(*((_QWORD *)&v152 + 1) + 8);
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = (std::__shared_weak_count *)*((_QWORD *)&v153 + 1);
  if (*((_QWORD *)&v153 + 1))
  {
    v112 = (unint64_t *)(*((_QWORD *)&v153 + 1) + 8);
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  if (SHIBYTE(v155) < 0)
    operator delete((void *)v154);
  v114 = *a3;
  v214[0] = &off_1EA99FBD8;
  v214[1] = MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceTensorToTensorBuffer;
  v215 = v214;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v114 + 200))(v114, v214);
  v115 = v215;
  if (v215 == v214)
  {
    v116 = 4;
    v115 = v214;
  }
  else
  {
    if (!v215)
      goto LABEL_135;
    v116 = 5;
  }
  (*(void (**)(void))(*v115 + 8 * v116))();
LABEL_135:
  MIL::Validation::TensorDTypeConstraints::Make(&v223);
  v117 = v223;
  std::string::basic_string[abi:ne180100]<0>(v148, "input");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v148, 0, (uint64_t *)&v209);
  v150 = v209;
  if (v209)
  {
    v118 = (std::__shared_weak_count *)operator new();
    v119 = (std::__shared_weak_count_vtbl *)v209;
    v118->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v118->__shared_owners_ = 0;
    v118->__shared_weak_owners_ = 0;
    v118[1].__vftable = v119;
  }
  else
  {
    v118 = 0;
  }
  v151 = v118;
  v209 = 0;
  std::string::basic_string[abi:ne180100]<0>(v146, "T");
  (*((void (**)(void **, void **, void **))*v117 + 3))(v117, &v150, v146);
  if (v147 < 0)
    operator delete(v146[0]);
  v120 = v151;
  if (v151)
  {
    v121 = (unint64_t *)&v151->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v123 = v209;
  v209 = 0;
  if (v123)
    (*(void (**)(void *))(*(_QWORD *)v123 + 8))(v123);
  if (v149 < 0)
    operator delete(v148[0]);
  v124 = v223;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v209);
  v144 = v209;
  if (v209)
  {
    v125 = (std::__shared_weak_count *)operator new();
    v126 = (std::__shared_weak_count_vtbl *)v209;
    v125->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v125->__shared_owners_ = 0;
    v125->__shared_weak_owners_ = 0;
    v125[1].__vftable = v126;
  }
  else
  {
    v125 = 0;
  }
  v145 = v125;
  v209 = 0;
  std::string::basic_string[abi:ne180100]<0>(v142, "T");
  (*((void (**)(void **, void **, void **))*v124 + 3))(v124, &v144, v142);
  if (v143 < 0)
    operator delete(v142[0]);
  v127 = v145;
  if (v145)
  {
    v128 = (unint64_t *)&v145->__shared_owners_;
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  v130 = v209;
  v209 = 0;
  if (v130)
    (*(void (**)(void *))(*(_QWORD *)v130 + 8))(v130);
  v131 = *a3;
  v140 = v223;
  if (v223)
  {
    v132 = (std::__shared_weak_count *)operator new();
    v133 = v223;
    v132->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v132->__shared_owners_ = 0;
    v132->__shared_weak_owners_ = 0;
    v132[1].__vftable = (std::__shared_weak_count_vtbl *)v133;
  }
  else
  {
    v132 = 0;
  }
  v141 = v132;
  v223 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v131 + 56))(v131, &v140);
  v134 = v141;
  if (v141)
  {
    v135 = (unint64_t *)&v141->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  v137 = v223;
  v223 = 0;
  if (v137)
    (*((void (**)(void **))*v137 + 1))(v137);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v186, 0);
  result = (uint64_t)v208;
  if (v208)
  {
    v139 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v208);
    return MEMORY[0x1E0C023A0](v139, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08F45DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void **a66;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;

  v69 = *(_QWORD *)(v67 - 136);
  *(_QWORD *)(v67 - 136) = 0;
  if (v69)
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
  v70 = *v66;
  *v66 = 0;
  if (v70)
    (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a66, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x290], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::BatchNorm::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count_vtbl *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  std::__shared_weak_count_vtbl *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  std::__shared_weak_count_vtbl *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  std::__shared_weak_count_vtbl *v43;
  unsigned __int8 *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  std::__shared_weak_count_vtbl *v53;
  unsigned __int8 *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  unsigned __int8 *v60;
  std::__shared_weak_count_vtbl *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  char **v66;
  uint64_t v67;
  std::__shared_weak_count_vtbl *v68;
  uint64_t v69;
  std::__shared_weak_count_vtbl *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t *v83;
  char *v84;
  char *v85;
  char *v86;
  __int128 v87;
  char *v88;
  char *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  char **v97;
  _QWORD *v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  _OWORD *v108;
  unsigned __int8 *v109;
  void *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  std::__shared_weak_count *v117;
  unint64_t *p_shared_owners;
  unint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  void *v123;
  std::__shared_weak_count *v124;
  std::__shared_weak_count_vtbl *v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count_vtbl *v129;
  void *v130;
  std::__shared_weak_count *v131;
  std::__shared_weak_count_vtbl *v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count_vtbl *v136;
  void *v137;
  std::__shared_weak_count *v138;
  std::__shared_weak_count_vtbl *v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count_vtbl *v143;
  void *v144;
  std::__shared_weak_count *v145;
  std::__shared_weak_count_vtbl *v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count_vtbl *v150;
  void *v151;
  std::__shared_weak_count *v152;
  std::__shared_weak_count_vtbl *v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count_vtbl *v157;
  void *v158;
  std::__shared_weak_count *v159;
  std::__shared_weak_count_vtbl *v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count_vtbl *v164;
  void *v165;
  std::__shared_weak_count *v166;
  std::__shared_weak_count_vtbl *v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count_vtbl *v171;
  uint64_t v172;
  std::__shared_weak_count *v173;
  std::__shared_weak_count_vtbl *v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  void *v178;
  void *v179;
  std::__shared_weak_count *v180;
  std::__shared_weak_count_vtbl *v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count_vtbl *v185;
  uint64_t v186;
  std::__shared_weak_count *v187;
  std::__shared_weak_count_vtbl *v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  void *v192;
  void *v193;
  std::__shared_weak_count *v194;
  std::__shared_weak_count_vtbl *v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count_vtbl *v199;
  void *v200;
  std::__shared_weak_count *v201;
  std::__shared_weak_count_vtbl *v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  std::__shared_weak_count_vtbl *v206;
  void *v207;
  std::__shared_weak_count *v208;
  std::__shared_weak_count_vtbl *v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  std::__shared_weak_count_vtbl *v213;
  void *v214;
  std::__shared_weak_count *v215;
  std::__shared_weak_count_vtbl *v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  std::__shared_weak_count_vtbl *v220;
  void *v221;
  std::__shared_weak_count *v222;
  std::__shared_weak_count_vtbl *v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  std::__shared_weak_count_vtbl *v227;
  uint64_t v228;
  std::__shared_weak_count *v229;
  std::__shared_weak_count_vtbl *v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  void *v234;
  uint64_t v235;
  std::__shared_weak_count *v236;
  uint64_t v237;
  uint64_t i;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  std::__shared_weak_count *v244;
  uint64_t v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t result;
  uint64_t v252;
  uint64_t v253;
  std::__shared_weak_count *v254;
  void *v255[2];
  char v256;
  uint64_t v257;
  std::__shared_weak_count *v258;
  void *v259;
  std::__shared_weak_count *v260;
  void *v261[2];
  char v262;
  void *v263[2];
  char v264;
  std::__shared_weak_count_vtbl *v265;
  std::__shared_weak_count *v266;
  void *v267[2];
  char v268;
  void *v269[2];
  char v270;
  std::__shared_weak_count_vtbl *v271;
  std::__shared_weak_count *v272;
  void *v273[2];
  char v274;
  void *v275[2];
  char v276;
  std::__shared_weak_count_vtbl *v277;
  std::__shared_weak_count *v278;
  void *v279[2];
  char v280;
  void *v281[2];
  char v282;
  std::__shared_weak_count_vtbl *v283;
  std::__shared_weak_count *v284;
  void *v285[2];
  char v286;
  void *v287[2];
  char v288;
  std::__shared_weak_count_vtbl *v289;
  std::__shared_weak_count *v290;
  void *v291;
  std::__shared_weak_count *v292;
  void *v293[2];
  char v294;
  std::__shared_weak_count_vtbl *v295;
  std::__shared_weak_count *v296;
  void *v297;
  std::__shared_weak_count *v298;
  void *v299[2];
  char v300;
  std::__shared_weak_count_vtbl *v301;
  std::__shared_weak_count *v302;
  void *v303[2];
  char v304;
  void *v305[2];
  char v306;
  std::__shared_weak_count_vtbl *v307;
  std::__shared_weak_count *v308;
  void *v309[2];
  char v310;
  void *v311[2];
  char v312;
  std::__shared_weak_count_vtbl *v313;
  std::__shared_weak_count *v314;
  void *v315[2];
  char v316;
  void *v317[2];
  char v318;
  std::__shared_weak_count_vtbl *v319;
  std::__shared_weak_count *v320;
  void *v321[2];
  char v322;
  void *v323[2];
  char v324;
  std::__shared_weak_count_vtbl *v325;
  std::__shared_weak_count *v326;
  void *v327[2];
  char v328;
  void *v329[2];
  char v330;
  std::__shared_weak_count_vtbl *v331;
  std::__shared_weak_count *v332;
  void *v333[2];
  char v334;
  void *v335[2];
  char v336;
  std::__shared_weak_count_vtbl *v337;
  std::__shared_weak_count *v338;
  std::__shared_weak_count_vtbl *v339;
  std::__shared_weak_count *v340;
  __n128 v341;
  __int128 v342;
  __int128 v343;
  void *v344[2];
  uint64_t v345;
  __n128 v346;
  uint64_t v347;
  uint64_t v348;
  _QWORD *v349;
  char **v350;
  __n128 v351;
  __n128 v352;
  __n128 v353;
  __n128 v354;
  __n128 v355;
  __n128 v356;
  _QWORD *v357;
  void *__p;
  uint64_t Scalar;
  char *v360;
  _QWORD v361[3];
  uint64_t v362[3];
  uint64_t v363[3];
  _QWORD v364[3];
  std::__shared_weak_count_vtbl *v365;
  std::__shared_weak_count_vtbl *p_get_deleter;
  _QWORD *v367;
  _BYTE v368[24];
  _BYTE *v369;
  _BYTE v370[24];
  _BYTE *v371;
  _QWORD v372[3];
  _QWORD *v373;
  std::__shared_weak_count_vtbl *v374;
  uint64_t v375;
  void (__cdecl **v376)(std::__shared_weak_count *__hidden);
  uint64_t v377[3];

  v377[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v357 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (char *)operator new(0x18uLL);
  v360 = v10 + 24;
  *(_QWORD *)v10 = v7;
  *((_QWORD *)v10 + 1) = v8;
  *((_QWORD *)v10 + 2) = v9;
  __p = v10;
  Scalar = (uint64_t)(v10 + 24);
  v374 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v14->__get_deleter;
  v367 = &v14->__get_deleter;
  v14->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v11;
  v14->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v12;
  v14->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v13;
  v365 = v14;
  v375 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v365);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v374, 2, &v356);
  MIL::IRParameter::Make(&v356, &v348);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v348);
  v15 = v348;
  v348 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v356.n128_u64[1];
  if (v356.n128_u64[1])
  {
    v17 = (unint64_t *)(v356.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v365)
  {
    p_get_deleter = v365;
    operator delete(v365);
  }
  if (__p)
  {
    Scalar = (uint64_t)__p;
    operator delete(__p);
  }
  v19 = v357;
  v20 = MIL::IRUnknownDimension::Make(a1, 0);
  v21 = (char *)operator new(8uLL);
  __p = v21;
  *(_QWORD *)v21 = v20;
  v360 = v21 + 8;
  Scalar = (uint64_t)(v21 + 8);
  v374 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v365 = v23;
  v23->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v22;
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v23->~__shared_weak_count_0;
  v367 = &v23->~__shared_weak_count_0;
  v375 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v365);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v374, 2, &v355);
  MIL::IRParameter::Make(&v355, &v348);
  v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v19, "mean", &v348);
  v25 = v348;
  v348 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = (std::__shared_weak_count *)v355.n128_u64[1];
  if (v355.n128_u64[1])
  {
    v27 = (unint64_t *)(v355.n128_u64[1] + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (v365)
  {
    p_get_deleter = v365;
    operator delete(v365);
  }
  if (__p)
  {
    Scalar = (uint64_t)__p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v24 + 5) + 32))(*((_QWORD *)v24 + 5), 1);
  v29 = v357;
  v30 = MIL::IRUnknownDimension::Make(a1, 0);
  v31 = (char *)operator new(8uLL);
  __p = v31;
  *(_QWORD *)v31 = v30;
  v360 = v31 + 8;
  Scalar = (uint64_t)(v31 + 8);
  v374 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v32 = MIL::IRUnknownDimension::Make(a1, 0);
  v33 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v365 = v33;
  v33->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v32;
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v33->~__shared_weak_count_0;
  v367 = &v33->~__shared_weak_count_0;
  v375 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v365);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v374, 2, &v354);
  MIL::IRParameter::Make(&v354, &v348);
  v34 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v29, "variance", &v348);
  v35 = v348;
  v348 = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = (std::__shared_weak_count *)v354.n128_u64[1];
  if (v354.n128_u64[1])
  {
    v37 = (unint64_t *)(v354.n128_u64[1] + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (v365)
  {
    p_get_deleter = v365;
    operator delete(v365);
  }
  if (__p)
  {
    Scalar = (uint64_t)__p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v34 + 5) + 32))(*((_QWORD *)v34 + 5), 1);
  v39 = v357;
  v40 = MIL::IRUnknownDimension::Make(a1, 0);
  v41 = (char *)operator new(8uLL);
  __p = v41;
  *(_QWORD *)v41 = v40;
  v360 = v41 + 8;
  Scalar = (uint64_t)(v41 + 8);
  v374 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v365 = v43;
  v43->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v42;
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v43->~__shared_weak_count_0;
  v367 = &v43->~__shared_weak_count_0;
  v375 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v365);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v374, 2, &v353);
  MIL::IRParameter::Make(&v353, &v348);
  v44 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v39, "beta", &v348);
  v45 = v348;
  v348 = 0;
  if (v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  v46 = (std::__shared_weak_count *)v353.n128_u64[1];
  if (v353.n128_u64[1])
  {
    v47 = (unint64_t *)(v353.n128_u64[1] + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  if (v365)
  {
    p_get_deleter = v365;
    operator delete(v365);
  }
  if (__p)
  {
    Scalar = (uint64_t)__p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v44 + 5) + 32))(*((_QWORD *)v44 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v44 + 5) + 48))(*((_QWORD *)v44 + 5), 1);
  v49 = v357;
  v50 = MIL::IRUnknownDimension::Make(a1, 0);
  v51 = (char *)operator new(8uLL);
  __p = v51;
  *(_QWORD *)v51 = v50;
  v360 = v51 + 8;
  Scalar = (uint64_t)(v51 + 8);
  v374 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v52 = MIL::IRUnknownDimension::Make(a1, 0);
  v53 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v365 = v53;
  v53->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v52;
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v53->~__shared_weak_count_0;
  v367 = &v53->~__shared_weak_count_0;
  v375 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v365);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v374, 2, &v352);
  MIL::IRParameter::Make(&v352, &v348);
  v54 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v49, "gamma", &v348);
  v55 = v348;
  v348 = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = (std::__shared_weak_count *)v352.n128_u64[1];
  if (v352.n128_u64[1])
  {
    v57 = (unint64_t *)(v352.n128_u64[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (v365)
  {
    p_get_deleter = v365;
    operator delete(v365);
  }
  if (__p)
  {
    Scalar = (uint64_t)__p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v54 + 5) + 32))(*((_QWORD *)v54 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v54 + 5) + 48))(*((_QWORD *)v54 + 5), 1);
  v59 = v357;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 4);
  Scalar = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 2, &v351);
  MIL::IRParameter::Make(&v351, (uint64_t *)&v365);
  v60 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v59, "epsilon", (uint64_t *)&v365);
  v61 = v365;
  v365 = 0;
  if (v61)
    (*((void (**)(std::__shared_weak_count_vtbl *))v61->~__shared_weak_count + 1))(v61);
  v62 = (std::__shared_weak_count *)v351.n128_u64[1];
  if (v351.n128_u64[1])
  {
    v63 = (unint64_t *)(v351.n128_u64[1] + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v60 + 5) + 32))(*((_QWORD *)v60 + 5), 1);
  v350 = 0;
  v65 = operator new();
  *(_QWORD *)v65 = 0;
  *(_QWORD *)(v65 + 8) = 0;
  *(_QWORD *)(v65 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v350, (void **)v65);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v350, 1uLL);
  v66 = v350;
  v67 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v68 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v365 = v68;
  v68->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v67;
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v68->~__shared_weak_count_0;
  v367 = &v68->~__shared_weak_count_0;
  v377[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v365);
  v69 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v70 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v374 = v70;
  v70->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v69;
  v375 = (uint64_t)&v70->~__shared_weak_count_0;
  v376 = &v70->~__shared_weak_count_0;
  v377[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v374);
  MIL::IRParameter::MakeTypeSet((uint64_t)v377, 2, &v346);
  MIL::IRParameter::Make(&v346, &v347);
  v71 = v347;
  v348 = v347;
  if (v347)
  {
    v72 = (_QWORD *)operator new();
    v73 = v347;
    *v72 = &unk_1EA99F888;
    v72[1] = 0;
    v72[2] = 0;
    v72[3] = v73;
  }
  else
  {
    v72 = 0;
  }
  v349 = v72;
  v347 = 0;
  v74 = v66[2];
  v75 = v66[1];
  if (v75 >= v74)
  {
    v77 = (v75 - *v66) >> 4;
    v78 = v77 + 1;
    if ((unint64_t)(v77 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v79 = v74 - *v66;
    if (v79 >> 3 > v78)
      v78 = v79 >> 3;
    if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF0)
      v80 = 0xFFFFFFFFFFFFFFFLL;
    else
      v80 = v78;
    v361[1] = v66 + 2;
    v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v66 + 2), v80);
    v83 = (uint64_t *)&v81[16 * v77];
    *v83 = v71;
    v83[1] = (uint64_t)v72;
    v349 = 0;
    v348 = 0;
    v85 = *v66;
    v84 = v66[1];
    if (v84 == *v66)
    {
      v88 = v66[1];
      v86 = &v81[16 * v77];
    }
    else
    {
      v86 = &v81[16 * v77];
      do
      {
        v87 = *((_OWORD *)v84 - 1);
        v84 -= 16;
        *((_OWORD *)v86 - 1) = v87;
        v86 -= 16;
        *(_QWORD *)v84 = 0;
        *((_QWORD *)v84 + 1) = 0;
      }
      while (v84 != v85);
      v88 = *v66;
      v84 = v66[1];
    }
    v76 = (char *)(v83 + 2);
    *v66 = v86;
    Scalar = (uint64_t)v88;
    v66[1] = (char *)(v83 + 2);
    v360 = v84;
    v89 = v66[2];
    v66[2] = &v81[16 * v82];
    v361[0] = v89;
    __p = v88;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v75 = v71;
    *((_QWORD *)v75 + 1) = v72;
    v76 = v75 + 16;
    v349 = 0;
    v348 = 0;
  }
  v66[1] = v76;
  v90 = v347;
  v347 = 0;
  if (v90)
    (*(void (**)(uint64_t))(*(_QWORD *)v90 + 8))(v90);
  v91 = (std::__shared_weak_count *)v346.n128_u64[1];
  if (v346.n128_u64[1])
  {
    v92 = (unint64_t *)(v346.n128_u64[1] + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  if (v374)
  {
    v375 = (uint64_t)v374;
    operator delete(v374);
  }
  if (v365)
  {
    p_get_deleter = v365;
    operator delete(v365);
  }
  *(_OWORD *)v344 = *(_OWORD *)a2;
  v345 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v94 = (uint64_t)v357;
  *(_QWORD *)&v343 = v357;
  if (v357)
  {
    v95 = (_QWORD *)operator new();
    *v95 = &unk_1EA99F8E8;
    v95[1] = 0;
    v95[2] = 0;
    v95[3] = v94;
  }
  else
  {
    v95 = 0;
  }
  *((_QWORD *)&v343 + 1) = v95;
  v357 = 0;
  *(_QWORD *)&v342 = v350;
  if (v350)
  {
    v96 = (_QWORD *)operator new();
    v97 = v350;
    *v96 = &unk_1EA99F948;
    v96[1] = 0;
    v96[2] = 0;
    v96[3] = v97;
  }
  else
  {
    v96 = 0;
  }
  *((_QWORD *)&v342 + 1) = v96;
  v350 = 0;
  v372[0] = &unk_1EA99FAC8;
  v372[1] = MIL::Operators::Common::ios17::CustomValidators::ValidateBatchNorm;
  v373 = v372;
  v371 = 0;
  MIL::IROperator::Make((__int128 *)v344, &v343, &v342, (uint64_t)v372, (uint64_t)v370, a3);
  v98 = v371;
  if (v371 == v370)
  {
    v99 = 4;
    v98 = v370;
  }
  else
  {
    if (!v371)
      goto LABEL_102;
    v99 = 5;
  }
  (*(void (**)(void))(*v98 + 8 * v99))();
LABEL_102:
  v100 = v373;
  if (v373 == v372)
  {
    v101 = 4;
    v100 = v372;
    goto LABEL_106;
  }
  if (v373)
  {
    v101 = 5;
LABEL_106:
    (*(void (**)(void))(*v100 + 8 * v101))();
  }
  v102 = (std::__shared_weak_count *)*((_QWORD *)&v342 + 1);
  if (*((_QWORD *)&v342 + 1))
  {
    v103 = (unint64_t *)(*((_QWORD *)&v342 + 1) + 8);
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = (std::__shared_weak_count *)*((_QWORD *)&v343 + 1);
  if (*((_QWORD *)&v343 + 1))
  {
    v106 = (unint64_t *)(*((_QWORD *)&v343 + 1) + 8);
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  if (SHIBYTE(v345) < 0)
    operator delete(v344[0]);
  v374 = 0;
  v108 = (_OWORD *)operator new();
  *v108 = 0u;
  v108[1] = 0u;
  *((_DWORD *)v108 + 8) = 1065353216;
  v374 = (std::__shared_weak_count_vtbl *)v108;
  v365 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v365, 1, &v341);
  MIL::IRParameter::Make(&v341, (uint64_t *)&__p);
  v109 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v108, "minimum_compute_type", (uint64_t *)&__p);
  v110 = __p;
  __p = 0;
  if (v110)
    (*(void (**)(void *))(*(_QWORD *)v110 + 8))(v110);
  v111 = (std::__shared_weak_count *)v341.n128_u64[1];
  if (v341.n128_u64[1])
  {
    v112 = (unint64_t *)(v341.n128_u64[1] + 8);
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v109 + 5) + 32))(*((_QWORD *)v109 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v109 + 5) + 48))(*((_QWORD *)v109 + 5), 1);
  v114 = *a3;
  v115 = v374;
  v339 = v374;
  if (v374)
  {
    v116 = (std::__shared_weak_count *)operator new();
    v116->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v116->__shared_owners_ = 0;
    v116->__shared_weak_owners_ = 0;
    v116[1].__vftable = v115;
  }
  else
  {
    v116 = 0;
  }
  v340 = v116;
  v374 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v114 + 184))(v114, &v339);
  v117 = v340;
  if (v340)
  {
    p_shared_owners = (unint64_t *)&v340->__shared_owners_;
    do
      v119 = __ldaxr(p_shared_owners);
    while (__stlxr(v119 - 1, p_shared_owners));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&__p, (uint64_t)v368);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v120 + 200))(v120, v368);
  v121 = v369;
  if (v369 == v368)
  {
    v122 = 4;
    v121 = v368;
  }
  else
  {
    if (!v369)
      goto LABEL_139;
    v122 = 5;
  }
  (*(void (**)(void))(*v121 + 8 * v122))();
LABEL_139:
  if (SHIBYTE(v360) < 0)
    operator delete(__p);
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v123 = __p;
  std::string::basic_string[abi:ne180100]<0>(v335, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v335, 0, (uint64_t *)&v365);
  v337 = v365;
  if (v365)
  {
    v124 = (std::__shared_weak_count *)operator new();
    v125 = v365;
    v124->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v124->__shared_owners_ = 0;
    v124->__shared_weak_owners_ = 0;
    v124[1].__vftable = v125;
  }
  else
  {
    v124 = 0;
  }
  v338 = v124;
  v365 = 0;
  std::string::basic_string[abi:ne180100]<0>(v333, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v123 + 24))(v123, &v337, v333);
  if (v334 < 0)
    operator delete(v333[0]);
  v126 = v338;
  if (v338)
  {
    v127 = (unint64_t *)&v338->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  v129 = v365;
  v365 = 0;
  if (v129)
    (*((void (**)(std::__shared_weak_count_vtbl *))v129->~__shared_weak_count + 1))(v129);
  if (v336 < 0)
    operator delete(v335[0]);
  v130 = __p;
  std::string::basic_string[abi:ne180100]<0>(v329, "mean");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v329, 0, (uint64_t *)&v365);
  v331 = v365;
  if (v365)
  {
    v131 = (std::__shared_weak_count *)operator new();
    v132 = v365;
    v131->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v131->__shared_owners_ = 0;
    v131->__shared_weak_owners_ = 0;
    v131[1].__vftable = v132;
  }
  else
  {
    v131 = 0;
  }
  v332 = v131;
  v365 = 0;
  std::string::basic_string[abi:ne180100]<0>(v327, "CONST_TYPE");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v130 + 24))(v130, &v331, v327);
  if (v328 < 0)
    operator delete(v327[0]);
  v133 = v332;
  if (v332)
  {
    v134 = (unint64_t *)&v332->__shared_owners_;
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
  v136 = v365;
  v365 = 0;
  if (v136)
    (*((void (**)(std::__shared_weak_count_vtbl *))v136->~__shared_weak_count + 1))(v136);
  if (v330 < 0)
    operator delete(v329[0]);
  v137 = __p;
  std::string::basic_string[abi:ne180100]<0>(v323, "variance");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v323, 0, (uint64_t *)&v365);
  v325 = v365;
  if (v365)
  {
    v138 = (std::__shared_weak_count *)operator new();
    v139 = v365;
    v138->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v138->__shared_owners_ = 0;
    v138->__shared_weak_owners_ = 0;
    v138[1].__vftable = v139;
  }
  else
  {
    v138 = 0;
  }
  v326 = v138;
  v365 = 0;
  std::string::basic_string[abi:ne180100]<0>(v321, "CONST_TYPE");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v137 + 24))(v137, &v325, v321);
  if (v322 < 0)
    operator delete(v321[0]);
  v140 = v326;
  if (v326)
  {
    v141 = (unint64_t *)&v326->__shared_owners_;
    do
      v142 = __ldaxr(v141);
    while (__stlxr(v142 - 1, v141));
    if (!v142)
    {
      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
      std::__shared_weak_count::__release_weak(v140);
    }
  }
  v143 = v365;
  v365 = 0;
  if (v143)
    (*((void (**)(std::__shared_weak_count_vtbl *))v143->~__shared_weak_count + 1))(v143);
  if (v324 < 0)
    operator delete(v323[0]);
  v144 = __p;
  std::string::basic_string[abi:ne180100]<0>(v317, "beta");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v317, 1, (uint64_t *)&v365);
  v319 = v365;
  if (v365)
  {
    v145 = (std::__shared_weak_count *)operator new();
    v146 = v365;
    v145->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v145->__shared_owners_ = 0;
    v145->__shared_weak_owners_ = 0;
    v145[1].__vftable = v146;
  }
  else
  {
    v145 = 0;
  }
  v320 = v145;
  v365 = 0;
  std::string::basic_string[abi:ne180100]<0>(v315, "CONST_TYPE");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v144 + 24))(v144, &v319, v315);
  if (v316 < 0)
    operator delete(v315[0]);
  v147 = v320;
  if (v320)
  {
    v148 = (unint64_t *)&v320->__shared_owners_;
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
  v150 = v365;
  v365 = 0;
  if (v150)
    (*((void (**)(std::__shared_weak_count_vtbl *))v150->~__shared_weak_count + 1))(v150);
  if (v318 < 0)
    operator delete(v317[0]);
  v151 = __p;
  std::string::basic_string[abi:ne180100]<0>(v311, "gamma");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v311, 1, (uint64_t *)&v365);
  v313 = v365;
  if (v365)
  {
    v152 = (std::__shared_weak_count *)operator new();
    v153 = v365;
    v152->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v152->__shared_owners_ = 0;
    v152->__shared_weak_owners_ = 0;
    v152[1].__vftable = v153;
  }
  else
  {
    v152 = 0;
  }
  v314 = v152;
  v365 = 0;
  std::string::basic_string[abi:ne180100]<0>(v309, "CONST_TYPE");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v151 + 24))(v151, &v313, v309);
  if (v310 < 0)
    operator delete(v309[0]);
  v154 = v314;
  if (v314)
  {
    v155 = (unint64_t *)&v314->__shared_owners_;
    do
      v156 = __ldaxr(v155);
    while (__stlxr(v156 - 1, v155));
    if (!v156)
    {
      ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
      std::__shared_weak_count::__release_weak(v154);
    }
  }
  v157 = v365;
  v365 = 0;
  if (v157)
    (*((void (**)(std::__shared_weak_count_vtbl *))v157->~__shared_weak_count + 1))(v157);
  if (v312 < 0)
    operator delete(v311[0]);
  v158 = __p;
  std::string::basic_string[abi:ne180100]<0>(v305, "epsilon");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v305, 0, (uint64_t *)&v365);
  v307 = v365;
  if (v365)
  {
    v159 = (std::__shared_weak_count *)operator new();
    v160 = v365;
    v159->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v159->__shared_owners_ = 0;
    v159->__shared_weak_owners_ = 0;
    v159[1].__vftable = v160;
  }
  else
  {
    v159 = 0;
  }
  v308 = v159;
  v365 = 0;
  std::string::basic_string[abi:ne180100]<0>(v303, "CONST_TYPE");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v158 + 24))(v158, &v307, v303);
  if (v304 < 0)
    operator delete(v303[0]);
  v161 = v308;
  if (v308)
  {
    v162 = (unint64_t *)&v308->__shared_owners_;
    do
      v163 = __ldaxr(v162);
    while (__stlxr(v163 - 1, v162));
    if (!v163)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  v164 = v365;
  v365 = 0;
  if (v164)
    (*((void (**)(std::__shared_weak_count_vtbl *))v164->~__shared_weak_count + 1))(v164);
  if (v306 < 0)
    operator delete(v305[0]);
  v165 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v365);
  v301 = v365;
  if (v365)
  {
    v166 = (std::__shared_weak_count *)operator new();
    v167 = v365;
    v166->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v166->__shared_owners_ = 0;
    v166->__shared_weak_owners_ = 0;
    v166[1].__vftable = v167;
  }
  else
  {
    v166 = 0;
  }
  v302 = v166;
  v365 = 0;
  std::string::basic_string[abi:ne180100]<0>(v299, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v165 + 24))(v165, &v301, v299);
  if (v300 < 0)
    operator delete(v299[0]);
  v168 = v302;
  if (v302)
  {
    v169 = (unint64_t *)&v302->__shared_owners_;
    do
      v170 = __ldaxr(v169);
    while (__stlxr(v170 - 1, v169));
    if (!v170)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
  }
  v171 = v365;
  v365 = 0;
  if (v171)
    (*((void (**)(std::__shared_weak_count_vtbl *))v171->~__shared_weak_count + 1))(v171);
  v172 = *a3;
  v297 = __p;
  if (__p)
  {
    v173 = (std::__shared_weak_count *)operator new();
    v174 = (std::__shared_weak_count_vtbl *)__p;
    v173->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v173->__shared_owners_ = 0;
    v173->__shared_weak_owners_ = 0;
    v173[1].__vftable = v174;
  }
  else
  {
    v173 = 0;
  }
  v298 = v173;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v172 + 56))(v172, &v297);
  v175 = v298;
  if (v298)
  {
    v176 = (unint64_t *)&v298->__shared_owners_;
    do
      v177 = __ldaxr(v176);
    while (__stlxr(v177 - 1, v176));
    if (!v177)
    {
      ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
      std::__shared_weak_count::__release_weak(v175);
    }
  }
  v178 = __p;
  __p = 0;
  if (v178)
    (*(void (**)(void *))(*(_QWORD *)v178 + 8))(v178);
  MIL::Validation::TensorRankValueConstraints::Make(&__p);
  v179 = __p;
  std::string::basic_string[abi:ne180100]<0>(v293, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v293, 0, (uint64_t *)&v365);
  v295 = v365;
  if (v365)
  {
    v180 = (std::__shared_weak_count *)operator new();
    v181 = v365;
    v180->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v180->__shared_owners_ = 0;
    v180->__shared_weak_owners_ = 0;
    v180[1].__vftable = v181;
  }
  else
  {
    v180 = 0;
  }
  v296 = v180;
  v365 = 0;
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))(*(_QWORD *)v179 + 32))(v179, &v295, 3, 5);
  v182 = v296;
  if (v296)
  {
    v183 = (unint64_t *)&v296->__shared_owners_;
    do
      v184 = __ldaxr(v183);
    while (__stlxr(v184 - 1, v183));
    if (!v184)
    {
      ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
      std::__shared_weak_count::__release_weak(v182);
    }
  }
  v185 = v365;
  v365 = 0;
  if (v185)
    (*((void (**)(std::__shared_weak_count_vtbl *))v185->~__shared_weak_count + 1))(v185);
  if (v294 < 0)
    operator delete(v293[0]);
  v186 = *a3;
  v291 = __p;
  if (__p)
  {
    v187 = (std::__shared_weak_count *)operator new();
    v188 = (std::__shared_weak_count_vtbl *)__p;
    v187->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FC78;
    v187->__shared_owners_ = 0;
    v187->__shared_weak_owners_ = 0;
    v187[1].__vftable = v188;
  }
  else
  {
    v187 = 0;
  }
  v292 = v187;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v186 + 56))(v186, &v291);
  v189 = v292;
  if (v292)
  {
    v190 = (unint64_t *)&v292->__shared_owners_;
    do
      v191 = __ldaxr(v190);
    while (__stlxr(v191 - 1, v190));
    if (!v191)
    {
      ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
      std::__shared_weak_count::__release_weak(v189);
    }
  }
  v192 = __p;
  __p = 0;
  if (v192)
    (*(void (**)(void *))(*(_QWORD *)v192 + 8))(v192);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&__p);
  v193 = __p;
  std::string::basic_string[abi:ne180100]<0>(v287, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v287, 0, (uint64_t *)&v365);
  v289 = v365;
  if (v365)
  {
    v194 = (std::__shared_weak_count *)operator new();
    v195 = v365;
    v194->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v194->__shared_owners_ = 0;
    v194->__shared_weak_owners_ = 0;
    v194[1].__vftable = v195;
  }
  else
  {
    v194 = 0;
  }
  v290 = v194;
  v365 = 0;
  std::string::basic_string[abi:ne180100]<0>(v285, "C");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v193 + 24))(v193, &v289, 1, v285);
  if (v286 < 0)
    operator delete(v285[0]);
  v196 = v290;
  if (v290)
  {
    v197 = (unint64_t *)&v290->__shared_owners_;
    do
      v198 = __ldaxr(v197);
    while (__stlxr(v198 - 1, v197));
    if (!v198)
    {
      ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
      std::__shared_weak_count::__release_weak(v196);
    }
  }
  v199 = v365;
  v365 = 0;
  if (v199)
    (*((void (**)(std::__shared_weak_count_vtbl *))v199->~__shared_weak_count + 1))(v199);
  if (v288 < 0)
    operator delete(v287[0]);
  v200 = __p;
  std::string::basic_string[abi:ne180100]<0>(v281, "mean");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v281, 0, (uint64_t *)&v365);
  v283 = v365;
  if (v365)
  {
    v201 = (std::__shared_weak_count *)operator new();
    v202 = v365;
    v201->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v201->__shared_owners_ = 0;
    v201->__shared_weak_owners_ = 0;
    v201[1].__vftable = v202;
  }
  else
  {
    v201 = 0;
  }
  v284 = v201;
  v365 = 0;
  std::string::basic_string[abi:ne180100]<0>(v279, "C");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v200 + 24))(v200, &v283, 0, v279);
  if (v280 < 0)
    operator delete(v279[0]);
  v203 = v284;
  if (v284)
  {
    v204 = (unint64_t *)&v284->__shared_owners_;
    do
      v205 = __ldaxr(v204);
    while (__stlxr(v205 - 1, v204));
    if (!v205)
    {
      ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
      std::__shared_weak_count::__release_weak(v203);
    }
  }
  v206 = v365;
  v365 = 0;
  if (v206)
    (*((void (**)(std::__shared_weak_count_vtbl *))v206->~__shared_weak_count + 1))(v206);
  if (v282 < 0)
    operator delete(v281[0]);
  v207 = __p;
  std::string::basic_string[abi:ne180100]<0>(v275, "variance");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v275, 0, (uint64_t *)&v365);
  v277 = v365;
  if (v365)
  {
    v208 = (std::__shared_weak_count *)operator new();
    v209 = v365;
    v208->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v208->__shared_owners_ = 0;
    v208->__shared_weak_owners_ = 0;
    v208[1].__vftable = v209;
  }
  else
  {
    v208 = 0;
  }
  v278 = v208;
  v365 = 0;
  std::string::basic_string[abi:ne180100]<0>(v273, "C");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v207 + 24))(v207, &v277, 0, v273);
  if (v274 < 0)
    operator delete(v273[0]);
  v210 = v278;
  if (v278)
  {
    v211 = (unint64_t *)&v278->__shared_owners_;
    do
      v212 = __ldaxr(v211);
    while (__stlxr(v212 - 1, v211));
    if (!v212)
    {
      ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
      std::__shared_weak_count::__release_weak(v210);
    }
  }
  v213 = v365;
  v365 = 0;
  if (v213)
    (*((void (**)(std::__shared_weak_count_vtbl *))v213->~__shared_weak_count + 1))(v213);
  if (v276 < 0)
    operator delete(v275[0]);
  v214 = __p;
  std::string::basic_string[abi:ne180100]<0>(v269, "beta");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v269, 1, (uint64_t *)&v365);
  v271 = v365;
  if (v365)
  {
    v215 = (std::__shared_weak_count *)operator new();
    v216 = v365;
    v215->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v215->__shared_owners_ = 0;
    v215->__shared_weak_owners_ = 0;
    v215[1].__vftable = v216;
  }
  else
  {
    v215 = 0;
  }
  v272 = v215;
  v365 = 0;
  std::string::basic_string[abi:ne180100]<0>(v267, "C");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v214 + 24))(v214, &v271, 0, v267);
  if (v268 < 0)
    operator delete(v267[0]);
  v217 = v272;
  if (v272)
  {
    v218 = (unint64_t *)&v272->__shared_owners_;
    do
      v219 = __ldaxr(v218);
    while (__stlxr(v219 - 1, v218));
    if (!v219)
    {
      ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
      std::__shared_weak_count::__release_weak(v217);
    }
  }
  v220 = v365;
  v365 = 0;
  if (v220)
    (*((void (**)(std::__shared_weak_count_vtbl *))v220->~__shared_weak_count + 1))(v220);
  if (v270 < 0)
    operator delete(v269[0]);
  v221 = __p;
  std::string::basic_string[abi:ne180100]<0>(v263, "gamma");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v263, 1, (uint64_t *)&v365);
  v265 = v365;
  if (v365)
  {
    v222 = (std::__shared_weak_count *)operator new();
    v223 = v365;
    v222->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v222->__shared_owners_ = 0;
    v222->__shared_weak_owners_ = 0;
    v222[1].__vftable = v223;
  }
  else
  {
    v222 = 0;
  }
  v266 = v222;
  v365 = 0;
  std::string::basic_string[abi:ne180100]<0>(v261, "C");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v221 + 24))(v221, &v265, 0, v261);
  if (v262 < 0)
    operator delete(v261[0]);
  v224 = v266;
  if (v266)
  {
    v225 = (unint64_t *)&v266->__shared_owners_;
    do
      v226 = __ldaxr(v225);
    while (__stlxr(v226 - 1, v225));
    if (!v226)
    {
      ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
      std::__shared_weak_count::__release_weak(v224);
    }
  }
  v227 = v365;
  v365 = 0;
  if (v227)
    (*((void (**)(std::__shared_weak_count_vtbl *))v227->~__shared_weak_count + 1))(v227);
  if (v264 < 0)
    operator delete(v263[0]);
  v228 = *a3;
  v259 = __p;
  if (__p)
  {
    v229 = (std::__shared_weak_count *)operator new();
    v230 = (std::__shared_weak_count_vtbl *)__p;
    v229->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v229->__shared_owners_ = 0;
    v229->__shared_weak_owners_ = 0;
    v229[1].__vftable = v230;
  }
  else
  {
    v229 = 0;
  }
  v260 = v229;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v228 + 56))(v228, &v259);
  v231 = v260;
  if (v260)
  {
    v232 = (unint64_t *)&v260->__shared_owners_;
    do
      v233 = __ldaxr(v232);
    while (__stlxr(v233 - 1, v232));
    if (!v233)
    {
      ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
      std::__shared_weak_count::__release_weak(v231);
    }
  }
  v234 = __p;
  __p = 0;
  if (v234)
    (*(void (**)(void *))(*(_QWORD *)v234 + 8))(v234);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v348);
  v235 = v348;
  std::string::basic_string[abi:ne180100]<0>(v255, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v255, 1, v377);
  v257 = v377[0];
  if (v377[0])
  {
    v236 = (std::__shared_weak_count *)operator new();
    v237 = v377[0];
    v236->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v236->__shared_owners_ = 0;
    v236->__shared_weak_owners_ = 0;
    v236[1].__vftable = (std::__shared_weak_count_vtbl *)v237;
  }
  else
  {
    v236 = 0;
  }
  v258 = v236;
  v377[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v361, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v362, "int32");
  std::string::basic_string[abi:ne180100]<0>(v363, "int8");
  std::string::basic_string[abi:ne180100]<0>(v364, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&v365, (unsigned __int8 *)&__p, 5);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v235 + 24))(v235, &v257, &v365, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v365);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v364[i + 2]) < 0)
      operator delete((void *)v364[i]);
  }
  v239 = v258;
  if (v258)
  {
    v240 = (unint64_t *)&v258->__shared_owners_;
    do
      v241 = __ldaxr(v240);
    while (__stlxr(v241 - 1, v240));
    if (!v241)
    {
      ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
      std::__shared_weak_count::__release_weak(v239);
    }
  }
  v242 = v377[0];
  v377[0] = 0;
  if (v242)
    (*(void (**)(uint64_t))(*(_QWORD *)v242 + 8))(v242);
  if (v256 < 0)
    operator delete(v255[0]);
  v243 = *a3;
  v253 = v348;
  if (v348)
  {
    v244 = (std::__shared_weak_count *)operator new();
    v245 = v348;
    v244->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v244->__shared_owners_ = 0;
    v244->__shared_weak_owners_ = 0;
    v244[1].__vftable = (std::__shared_weak_count_vtbl *)v245;
  }
  else
  {
    v244 = 0;
  }
  v254 = v244;
  v348 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v243 + 56))(v243, &v253);
  v246 = v254;
  if (v254)
  {
    v247 = (unint64_t *)&v254->__shared_owners_;
    do
      v248 = __ldaxr(v247);
    while (__stlxr(v248 - 1, v247));
    if (!v248)
    {
      ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
      std::__shared_weak_count::__release_weak(v246);
    }
  }
  v249 = v348;
  v348 = 0;
  if (v249)
    (*(void (**)(uint64_t))(*(_QWORD *)v249 + 8))(v249);
  if (v374)
  {
    v250 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v374);
    MEMORY[0x1E0C023A0](v250, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v350, 0);
  result = (uint64_t)v357;
  if (v357)
  {
    v252 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v357);
    return MEMORY[0x1E0C023A0](v252, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08F6B34(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;

  v4 = STACK[0x3F0];
  STACK[0x3F0] = 0;
  if (v4)
    (*(void (**)(unint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 112), 0);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x400], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x468], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::InstanceNorm::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count_vtbl *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  std::__shared_weak_count_vtbl *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  std::__shared_weak_count_vtbl *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  unsigned __int8 *v40;
  std::__shared_weak_count_vtbl *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  char **v46;
  uint64_t v47;
  std::__shared_weak_count_vtbl *v48;
  uint64_t v49;
  std::__shared_weak_count_vtbl *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t *v63;
  char *v64;
  char *v65;
  char *v66;
  __int128 v67;
  char *v68;
  char *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  char **v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  _OWORD *v88;
  unsigned __int8 *v89;
  void *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  std::__shared_weak_count_vtbl *v95;
  std::__shared_weak_count *v96;
  std::__shared_weak_count *v97;
  unint64_t *p_shared_owners;
  unint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  void *v103;
  std::__shared_weak_count *v104;
  std::__shared_weak_count_vtbl *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count_vtbl *v109;
  void *v110;
  std::__shared_weak_count *v111;
  std::__shared_weak_count_vtbl *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count_vtbl *v116;
  void *v117;
  std::__shared_weak_count *v118;
  std::__shared_weak_count_vtbl *v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count_vtbl *v123;
  void *v124;
  std::__shared_weak_count *v125;
  std::__shared_weak_count_vtbl *v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count_vtbl *v130;
  void *v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count_vtbl *v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  std::__shared_weak_count_vtbl *v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  void *v144;
  void *v145;
  std::__shared_weak_count *v146;
  std::__shared_weak_count_vtbl *v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count_vtbl *v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  std::__shared_weak_count_vtbl *v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  void *v158;
  void *v159;
  std::__shared_weak_count *v160;
  std::__shared_weak_count_vtbl *v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count_vtbl *v165;
  void *v166;
  std::__shared_weak_count *v167;
  std::__shared_weak_count_vtbl *v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count_vtbl *v172;
  void *v173;
  std::__shared_weak_count *v174;
  std::__shared_weak_count_vtbl *v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count_vtbl *v179;
  uint64_t v180;
  std::__shared_weak_count *v181;
  std::__shared_weak_count_vtbl *v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  void *v186;
  uint64_t v187;
  std::__shared_weak_count *v188;
  uint64_t v189;
  uint64_t i;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  std::__shared_weak_count *v196;
  uint64_t v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t result;
  uint64_t v204;
  uint64_t v205;
  std::__shared_weak_count *v206;
  void *v207[2];
  char v208;
  uint64_t v209;
  std::__shared_weak_count *v210;
  void *v211;
  std::__shared_weak_count *v212;
  void *v213[2];
  char v214;
  void *v215[2];
  char v216;
  std::__shared_weak_count_vtbl *v217;
  std::__shared_weak_count *v218;
  void *v219[2];
  char v220;
  void *v221[2];
  char v222;
  std::__shared_weak_count_vtbl *v223;
  std::__shared_weak_count *v224;
  void *v225[2];
  char v226;
  void *v227[2];
  char v228;
  std::__shared_weak_count_vtbl *v229;
  std::__shared_weak_count *v230;
  void *v231;
  std::__shared_weak_count *v232;
  void *v233[2];
  char v234;
  std::__shared_weak_count_vtbl *v235;
  std::__shared_weak_count *v236;
  void *v237;
  std::__shared_weak_count *v238;
  void *v239[2];
  char v240;
  std::__shared_weak_count_vtbl *v241;
  std::__shared_weak_count *v242;
  void *v243[2];
  char v244;
  void *v245[2];
  char v246;
  std::__shared_weak_count_vtbl *v247;
  std::__shared_weak_count *v248;
  void *v249[2];
  char v250;
  void *v251[2];
  char v252;
  std::__shared_weak_count_vtbl *v253;
  std::__shared_weak_count *v254;
  void *v255[2];
  char v256;
  void *v257[2];
  char v258;
  std::__shared_weak_count_vtbl *v259;
  std::__shared_weak_count *v260;
  void *v261[2];
  char v262;
  void *v263[2];
  char v264;
  std::__shared_weak_count_vtbl *v265;
  std::__shared_weak_count *v266;
  std::__shared_weak_count_vtbl *v267;
  std::__shared_weak_count *v268;
  __n128 v269;
  __int128 v270;
  __int128 v271;
  void *v272[2];
  uint64_t v273;
  __n128 v274;
  uint64_t v275;
  uint64_t v276;
  _QWORD *v277;
  char **v278;
  __n128 v279;
  __n128 v280;
  __n128 v281;
  __n128 v282;
  _QWORD *v283;
  void *__p;
  uint64_t Scalar;
  char *v286;
  _QWORD v287[3];
  uint64_t v288[3];
  uint64_t v289[3];
  _QWORD v290[3];
  std::__shared_weak_count_vtbl *v291;
  std::__shared_weak_count_vtbl *p_get_deleter;
  _QWORD *v293;
  _BYTE v294[24];
  _BYTE *v295;
  _BYTE v296[24];
  _BYTE *v297;
  _BYTE v298[24];
  _BYTE *v299;
  std::__shared_weak_count_vtbl *v300;
  uint64_t v301;
  void (__cdecl **v302)(std::__shared_weak_count *__hidden);
  uint64_t v303[3];

  v303[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v283 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (char *)operator new(0x18uLL);
  v286 = v10 + 24;
  *(_QWORD *)v10 = v7;
  *((_QWORD *)v10 + 1) = v8;
  *((_QWORD *)v10 + 2) = v9;
  __p = v10;
  Scalar = (uint64_t)(v10 + 24);
  v300 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v14->__get_deleter;
  v293 = &v14->__get_deleter;
  v14->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v11;
  v14->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v12;
  v14->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v13;
  v291 = v14;
  v301 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v291);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v300, 2, &v282);
  MIL::IRParameter::Make(&v282, &v276);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v276);
  v15 = v276;
  v276 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v282.n128_u64[1];
  if (v282.n128_u64[1])
  {
    v17 = (unint64_t *)(v282.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v291)
  {
    p_get_deleter = v291;
    operator delete(v291);
  }
  if (__p)
  {
    Scalar = (uint64_t)__p;
    operator delete(__p);
  }
  v19 = v283;
  v20 = MIL::IRUnknownDimension::Make(a1, 0);
  v21 = (char *)operator new(8uLL);
  __p = v21;
  *(_QWORD *)v21 = v20;
  v286 = v21 + 8;
  Scalar = (uint64_t)(v21 + 8);
  v300 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v291 = v23;
  v23->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v22;
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v23->~__shared_weak_count_0;
  v293 = &v23->~__shared_weak_count_0;
  v301 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v291);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v300, 2, &v281);
  MIL::IRParameter::Make(&v281, &v276);
  v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v19, "beta", &v276);
  v25 = v276;
  v276 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = (std::__shared_weak_count *)v281.n128_u64[1];
  if (v281.n128_u64[1])
  {
    v27 = (unint64_t *)(v281.n128_u64[1] + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (v291)
  {
    p_get_deleter = v291;
    operator delete(v291);
  }
  if (__p)
  {
    Scalar = (uint64_t)__p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v24 + 5) + 32))(*((_QWORD *)v24 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v24 + 5) + 48))(*((_QWORD *)v24 + 5), 1);
  v29 = v283;
  v30 = MIL::IRUnknownDimension::Make(a1, 0);
  v31 = (char *)operator new(8uLL);
  __p = v31;
  *(_QWORD *)v31 = v30;
  v286 = v31 + 8;
  Scalar = (uint64_t)(v31 + 8);
  v300 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v32 = MIL::IRUnknownDimension::Make(a1, 0);
  v33 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v291 = v33;
  v33->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v32;
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v33->~__shared_weak_count_0;
  v293 = &v33->~__shared_weak_count_0;
  v301 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v291);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v300, 2, &v280);
  MIL::IRParameter::Make(&v280, &v276);
  v34 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v29, "gamma", &v276);
  v35 = v276;
  v276 = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = (std::__shared_weak_count *)v280.n128_u64[1];
  if (v280.n128_u64[1])
  {
    v37 = (unint64_t *)(v280.n128_u64[1] + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (v291)
  {
    p_get_deleter = v291;
    operator delete(v291);
  }
  if (__p)
  {
    Scalar = (uint64_t)__p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v34 + 5) + 32))(*((_QWORD *)v34 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v34 + 5) + 48))(*((_QWORD *)v34 + 5), 1);
  v39 = v283;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 4);
  Scalar = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 2, &v279);
  MIL::IRParameter::Make(&v279, (uint64_t *)&v291);
  v40 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v39, "epsilon", (uint64_t *)&v291);
  v41 = v291;
  v291 = 0;
  if (v41)
    (*((void (**)(std::__shared_weak_count_vtbl *))v41->~__shared_weak_count + 1))(v41);
  v42 = (std::__shared_weak_count *)v279.n128_u64[1];
  if (v279.n128_u64[1])
  {
    v43 = (unint64_t *)(v279.n128_u64[1] + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v40 + 5) + 32))(*((_QWORD *)v40 + 5), 1);
  v278 = 0;
  v45 = operator new();
  *(_QWORD *)v45 = 0;
  *(_QWORD *)(v45 + 8) = 0;
  *(_QWORD *)(v45 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v278, (void **)v45);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v278, 1uLL);
  v46 = v278;
  v47 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v48 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v291 = v48;
  v48->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v47;
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v48->~__shared_weak_count_0;
  v293 = &v48->~__shared_weak_count_0;
  v303[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v291);
  v49 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v50 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v300 = v50;
  v50->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v49;
  v301 = (uint64_t)&v50->~__shared_weak_count_0;
  v302 = &v50->~__shared_weak_count_0;
  v303[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v300);
  MIL::IRParameter::MakeTypeSet((uint64_t)v303, 2, &v274);
  MIL::IRParameter::Make(&v274, &v275);
  v51 = v275;
  v276 = v275;
  if (v275)
  {
    v52 = (_QWORD *)operator new();
    v53 = v275;
    *v52 = &unk_1EA99F888;
    v52[1] = 0;
    v52[2] = 0;
    v52[3] = v53;
  }
  else
  {
    v52 = 0;
  }
  v277 = v52;
  v275 = 0;
  v54 = v46[2];
  v55 = v46[1];
  if (v55 >= v54)
  {
    v57 = (v55 - *v46) >> 4;
    v58 = v57 + 1;
    if ((unint64_t)(v57 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v59 = v54 - *v46;
    if (v59 >> 3 > v58)
      v58 = v59 >> 3;
    if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF0)
      v60 = 0xFFFFFFFFFFFFFFFLL;
    else
      v60 = v58;
    v287[1] = v46 + 2;
    v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v46 + 2), v60);
    v63 = (uint64_t *)&v61[16 * v57];
    *v63 = v51;
    v63[1] = (uint64_t)v52;
    v277 = 0;
    v276 = 0;
    v65 = *v46;
    v64 = v46[1];
    if (v64 == *v46)
    {
      v68 = v46[1];
      v66 = &v61[16 * v57];
    }
    else
    {
      v66 = &v61[16 * v57];
      do
      {
        v67 = *((_OWORD *)v64 - 1);
        v64 -= 16;
        *((_OWORD *)v66 - 1) = v67;
        v66 -= 16;
        *(_QWORD *)v64 = 0;
        *((_QWORD *)v64 + 1) = 0;
      }
      while (v64 != v65);
      v68 = *v46;
      v64 = v46[1];
    }
    v56 = (char *)(v63 + 2);
    *v46 = v66;
    Scalar = (uint64_t)v68;
    v46[1] = (char *)(v63 + 2);
    v286 = v64;
    v69 = v46[2];
    v46[2] = &v61[16 * v62];
    v287[0] = v69;
    __p = v68;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v55 = v51;
    *((_QWORD *)v55 + 1) = v52;
    v56 = v55 + 16;
    v277 = 0;
    v276 = 0;
  }
  v46[1] = v56;
  v70 = v275;
  v275 = 0;
  if (v70)
    (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
  v71 = (std::__shared_weak_count *)v274.n128_u64[1];
  if (v274.n128_u64[1])
  {
    v72 = (unint64_t *)(v274.n128_u64[1] + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  if (v300)
  {
    v301 = (uint64_t)v300;
    operator delete(v300);
  }
  if (v291)
  {
    p_get_deleter = v291;
    operator delete(v291);
  }
  *(_OWORD *)v272 = *(_OWORD *)a2;
  v273 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v74 = (uint64_t)v283;
  *(_QWORD *)&v271 = v283;
  if (v283)
  {
    v75 = (_QWORD *)operator new();
    *v75 = &unk_1EA99F8E8;
    v75[1] = 0;
    v75[2] = 0;
    v75[3] = v74;
  }
  else
  {
    v75 = 0;
  }
  *((_QWORD *)&v271 + 1) = v75;
  v283 = 0;
  *(_QWORD *)&v270 = v278;
  if (v278)
  {
    v76 = (_QWORD *)operator new();
    v77 = v278;
    *v76 = &unk_1EA99F948;
    v76[1] = 0;
    v76[2] = 0;
    v76[3] = v77;
  }
  else
  {
    v76 = 0;
  }
  *((_QWORD *)&v270 + 1) = v76;
  v278 = 0;
  v299 = 0;
  v297 = 0;
  MIL::IROperator::Make((__int128 *)v272, &v271, &v270, (uint64_t)v298, (uint64_t)v296, a3);
  v78 = v297;
  if (v297 == v296)
  {
    v79 = 4;
    v78 = v296;
  }
  else
  {
    if (!v297)
      goto LABEL_80;
    v79 = 5;
  }
  (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_80:
  v80 = v299;
  if (v299 == v298)
  {
    v81 = 4;
    v80 = v298;
    goto LABEL_84;
  }
  if (v299)
  {
    v81 = 5;
LABEL_84:
    (*(void (**)(void))(*v80 + 8 * v81))();
  }
  v82 = (std::__shared_weak_count *)*((_QWORD *)&v270 + 1);
  if (*((_QWORD *)&v270 + 1))
  {
    v83 = (unint64_t *)(*((_QWORD *)&v270 + 1) + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = (std::__shared_weak_count *)*((_QWORD *)&v271 + 1);
  if (*((_QWORD *)&v271 + 1))
  {
    v86 = (unint64_t *)(*((_QWORD *)&v271 + 1) + 8);
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  if (SHIBYTE(v273) < 0)
    operator delete(v272[0]);
  v300 = 0;
  v88 = (_OWORD *)operator new();
  *v88 = 0u;
  v88[1] = 0u;
  *((_DWORD *)v88 + 8) = 1065353216;
  v300 = (std::__shared_weak_count_vtbl *)v88;
  v291 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v291, 1, &v269);
  MIL::IRParameter::Make(&v269, (uint64_t *)&__p);
  v89 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v88, "minimum_compute_type", (uint64_t *)&__p);
  v90 = __p;
  __p = 0;
  if (v90)
    (*(void (**)(void *))(*(_QWORD *)v90 + 8))(v90);
  v91 = (std::__shared_weak_count *)v269.n128_u64[1];
  if (v269.n128_u64[1])
  {
    v92 = (unint64_t *)(v269.n128_u64[1] + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v89 + 5) + 32))(*((_QWORD *)v89 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v89 + 5) + 48))(*((_QWORD *)v89 + 5), 1);
  v94 = *a3;
  v95 = v300;
  v267 = v300;
  if (v300)
  {
    v96 = (std::__shared_weak_count *)operator new();
    v96->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v96->__shared_owners_ = 0;
    v96->__shared_weak_owners_ = 0;
    v96[1].__vftable = v95;
  }
  else
  {
    v96 = 0;
  }
  v268 = v96;
  v300 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v94 + 184))(v94, &v267);
  v97 = v268;
  if (v268)
  {
    p_shared_owners = (unint64_t *)&v268->__shared_owners_;
    do
      v99 = __ldaxr(p_shared_owners);
    while (__stlxr(v99 - 1, p_shared_owners));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&__p, (uint64_t)v294);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v100 + 200))(v100, v294);
  v101 = v295;
  if (v295 == v294)
  {
    v102 = 4;
    v101 = v294;
  }
  else
  {
    if (!v295)
      goto LABEL_117;
    v102 = 5;
  }
  (*(void (**)(void))(*v101 + 8 * v102))();
LABEL_117:
  if (SHIBYTE(v286) < 0)
    operator delete(__p);
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v103 = __p;
  std::string::basic_string[abi:ne180100]<0>(v263, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v263, 0, (uint64_t *)&v291);
  v265 = v291;
  if (v291)
  {
    v104 = (std::__shared_weak_count *)operator new();
    v105 = v291;
    v104->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v104->__shared_owners_ = 0;
    v104->__shared_weak_owners_ = 0;
    v104[1].__vftable = v105;
  }
  else
  {
    v104 = 0;
  }
  v266 = v104;
  v291 = 0;
  std::string::basic_string[abi:ne180100]<0>(v261, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v103 + 24))(v103, &v265, v261);
  if (v262 < 0)
    operator delete(v261[0]);
  v106 = v266;
  if (v266)
  {
    v107 = (unint64_t *)&v266->__shared_owners_;
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  v109 = v291;
  v291 = 0;
  if (v109)
    (*((void (**)(std::__shared_weak_count_vtbl *))v109->~__shared_weak_count + 1))(v109);
  if (v264 < 0)
    operator delete(v263[0]);
  v110 = __p;
  std::string::basic_string[abi:ne180100]<0>(v257, "beta");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v257, 1, (uint64_t *)&v291);
  v259 = v291;
  if (v291)
  {
    v111 = (std::__shared_weak_count *)operator new();
    v112 = v291;
    v111->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v111->__shared_owners_ = 0;
    v111->__shared_weak_owners_ = 0;
    v111[1].__vftable = v112;
  }
  else
  {
    v111 = 0;
  }
  v260 = v111;
  v291 = 0;
  std::string::basic_string[abi:ne180100]<0>(v255, "CONST_TYPE");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v110 + 24))(v110, &v259, v255);
  if (v256 < 0)
    operator delete(v255[0]);
  v113 = v260;
  if (v260)
  {
    v114 = (unint64_t *)&v260->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  v116 = v291;
  v291 = 0;
  if (v116)
    (*((void (**)(std::__shared_weak_count_vtbl *))v116->~__shared_weak_count + 1))(v116);
  if (v258 < 0)
    operator delete(v257[0]);
  v117 = __p;
  std::string::basic_string[abi:ne180100]<0>(v251, "gamma");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v251, 1, (uint64_t *)&v291);
  v253 = v291;
  if (v291)
  {
    v118 = (std::__shared_weak_count *)operator new();
    v119 = v291;
    v118->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v118->__shared_owners_ = 0;
    v118->__shared_weak_owners_ = 0;
    v118[1].__vftable = v119;
  }
  else
  {
    v118 = 0;
  }
  v254 = v118;
  v291 = 0;
  std::string::basic_string[abi:ne180100]<0>(v249, "CONST_TYPE");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v117 + 24))(v117, &v253, v249);
  if (v250 < 0)
    operator delete(v249[0]);
  v120 = v254;
  if (v254)
  {
    v121 = (unint64_t *)&v254->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v123 = v291;
  v291 = 0;
  if (v123)
    (*((void (**)(std::__shared_weak_count_vtbl *))v123->~__shared_weak_count + 1))(v123);
  if (v252 < 0)
    operator delete(v251[0]);
  v124 = __p;
  std::string::basic_string[abi:ne180100]<0>(v245, "epsilon");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v245, 0, (uint64_t *)&v291);
  v247 = v291;
  if (v291)
  {
    v125 = (std::__shared_weak_count *)operator new();
    v126 = v291;
    v125->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v125->__shared_owners_ = 0;
    v125->__shared_weak_owners_ = 0;
    v125[1].__vftable = v126;
  }
  else
  {
    v125 = 0;
  }
  v248 = v125;
  v291 = 0;
  std::string::basic_string[abi:ne180100]<0>(v243, "CONST_TYPE");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v124 + 24))(v124, &v247, v243);
  if (v244 < 0)
    operator delete(v243[0]);
  v127 = v248;
  if (v248)
  {
    v128 = (unint64_t *)&v248->__shared_owners_;
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  v130 = v291;
  v291 = 0;
  if (v130)
    (*((void (**)(std::__shared_weak_count_vtbl *))v130->~__shared_weak_count + 1))(v130);
  if (v246 < 0)
    operator delete(v245[0]);
  v131 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v291);
  v241 = v291;
  if (v291)
  {
    v132 = (std::__shared_weak_count *)operator new();
    v133 = v291;
    v132->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v132->__shared_owners_ = 0;
    v132->__shared_weak_owners_ = 0;
    v132[1].__vftable = v133;
  }
  else
  {
    v132 = 0;
  }
  v242 = v132;
  v291 = 0;
  std::string::basic_string[abi:ne180100]<0>(v239, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v131 + 24))(v131, &v241, v239);
  if (v240 < 0)
    operator delete(v239[0]);
  v134 = v242;
  if (v242)
  {
    v135 = (unint64_t *)&v242->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  v137 = v291;
  v291 = 0;
  if (v137)
    (*((void (**)(std::__shared_weak_count_vtbl *))v137->~__shared_weak_count + 1))(v137);
  v138 = *a3;
  v237 = __p;
  if (__p)
  {
    v139 = (std::__shared_weak_count *)operator new();
    v140 = (std::__shared_weak_count_vtbl *)__p;
    v139->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v139->__shared_owners_ = 0;
    v139->__shared_weak_owners_ = 0;
    v139[1].__vftable = v140;
  }
  else
  {
    v139 = 0;
  }
  v238 = v139;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v138 + 56))(v138, &v237);
  v141 = v238;
  if (v238)
  {
    v142 = (unint64_t *)&v238->__shared_owners_;
    do
      v143 = __ldaxr(v142);
    while (__stlxr(v143 - 1, v142));
    if (!v143)
    {
      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
      std::__shared_weak_count::__release_weak(v141);
    }
  }
  v144 = __p;
  __p = 0;
  if (v144)
    (*(void (**)(void *))(*(_QWORD *)v144 + 8))(v144);
  MIL::Validation::TensorRankValueConstraints::Make(&__p);
  v145 = __p;
  std::string::basic_string[abi:ne180100]<0>(v233, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v233, 0, (uint64_t *)&v291);
  v235 = v291;
  if (v291)
  {
    v146 = (std::__shared_weak_count *)operator new();
    v147 = v291;
    v146->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v146->__shared_owners_ = 0;
    v146->__shared_weak_owners_ = 0;
    v146[1].__vftable = v147;
  }
  else
  {
    v146 = 0;
  }
  v236 = v146;
  v291 = 0;
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))(*(_QWORD *)v145 + 32))(v145, &v235, 3, 4);
  v148 = v236;
  if (v236)
  {
    v149 = (unint64_t *)&v236->__shared_owners_;
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
    }
  }
  v151 = v291;
  v291 = 0;
  if (v151)
    (*((void (**)(std::__shared_weak_count_vtbl *))v151->~__shared_weak_count + 1))(v151);
  if (v234 < 0)
    operator delete(v233[0]);
  v152 = *a3;
  v231 = __p;
  if (__p)
  {
    v153 = (std::__shared_weak_count *)operator new();
    v154 = (std::__shared_weak_count_vtbl *)__p;
    v153->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FC78;
    v153->__shared_owners_ = 0;
    v153->__shared_weak_owners_ = 0;
    v153[1].__vftable = v154;
  }
  else
  {
    v153 = 0;
  }
  v232 = v153;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v152 + 56))(v152, &v231);
  v155 = v232;
  if (v232)
  {
    v156 = (unint64_t *)&v232->__shared_owners_;
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
  v158 = __p;
  __p = 0;
  if (v158)
    (*(void (**)(void *))(*(_QWORD *)v158 + 8))(v158);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&__p);
  v159 = __p;
  std::string::basic_string[abi:ne180100]<0>(v227, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v227, 0, (uint64_t *)&v291);
  v229 = v291;
  if (v291)
  {
    v160 = (std::__shared_weak_count *)operator new();
    v161 = v291;
    v160->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v160->__shared_owners_ = 0;
    v160->__shared_weak_owners_ = 0;
    v160[1].__vftable = v161;
  }
  else
  {
    v160 = 0;
  }
  v230 = v160;
  v291 = 0;
  std::string::basic_string[abi:ne180100]<0>(v225, "C");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v159 + 24))(v159, &v229, 1, v225);
  if (v226 < 0)
    operator delete(v225[0]);
  v162 = v230;
  if (v230)
  {
    v163 = (unint64_t *)&v230->__shared_owners_;
    do
      v164 = __ldaxr(v163);
    while (__stlxr(v164 - 1, v163));
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
    }
  }
  v165 = v291;
  v291 = 0;
  if (v165)
    (*((void (**)(std::__shared_weak_count_vtbl *))v165->~__shared_weak_count + 1))(v165);
  if (v228 < 0)
    operator delete(v227[0]);
  v166 = __p;
  std::string::basic_string[abi:ne180100]<0>(v221, "beta");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v221, 1, (uint64_t *)&v291);
  v223 = v291;
  if (v291)
  {
    v167 = (std::__shared_weak_count *)operator new();
    v168 = v291;
    v167->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v167->__shared_owners_ = 0;
    v167->__shared_weak_owners_ = 0;
    v167[1].__vftable = v168;
  }
  else
  {
    v167 = 0;
  }
  v224 = v167;
  v291 = 0;
  std::string::basic_string[abi:ne180100]<0>(v219, "C");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v166 + 24))(v166, &v223, 0, v219);
  if (v220 < 0)
    operator delete(v219[0]);
  v169 = v224;
  if (v224)
  {
    v170 = (unint64_t *)&v224->__shared_owners_;
    do
      v171 = __ldaxr(v170);
    while (__stlxr(v171 - 1, v170));
    if (!v171)
    {
      ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
      std::__shared_weak_count::__release_weak(v169);
    }
  }
  v172 = v291;
  v291 = 0;
  if (v172)
    (*((void (**)(std::__shared_weak_count_vtbl *))v172->~__shared_weak_count + 1))(v172);
  if (v222 < 0)
    operator delete(v221[0]);
  v173 = __p;
  std::string::basic_string[abi:ne180100]<0>(v215, "gamma");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v215, 1, (uint64_t *)&v291);
  v217 = v291;
  if (v291)
  {
    v174 = (std::__shared_weak_count *)operator new();
    v175 = v291;
    v174->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v174->__shared_owners_ = 0;
    v174->__shared_weak_owners_ = 0;
    v174[1].__vftable = v175;
  }
  else
  {
    v174 = 0;
  }
  v218 = v174;
  v291 = 0;
  std::string::basic_string[abi:ne180100]<0>(v213, "C");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v173 + 24))(v173, &v217, 0, v213);
  if (v214 < 0)
    operator delete(v213[0]);
  v176 = v218;
  if (v218)
  {
    v177 = (unint64_t *)&v218->__shared_owners_;
    do
      v178 = __ldaxr(v177);
    while (__stlxr(v178 - 1, v177));
    if (!v178)
    {
      ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
      std::__shared_weak_count::__release_weak(v176);
    }
  }
  v179 = v291;
  v291 = 0;
  if (v179)
    (*((void (**)(std::__shared_weak_count_vtbl *))v179->~__shared_weak_count + 1))(v179);
  if (v216 < 0)
    operator delete(v215[0]);
  v180 = *a3;
  v211 = __p;
  if (__p)
  {
    v181 = (std::__shared_weak_count *)operator new();
    v182 = (std::__shared_weak_count_vtbl *)__p;
    v181->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v181->__shared_owners_ = 0;
    v181->__shared_weak_owners_ = 0;
    v181[1].__vftable = v182;
  }
  else
  {
    v181 = 0;
  }
  v212 = v181;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v180 + 56))(v180, &v211);
  v183 = v212;
  if (v212)
  {
    v184 = (unint64_t *)&v212->__shared_owners_;
    do
      v185 = __ldaxr(v184);
    while (__stlxr(v185 - 1, v184));
    if (!v185)
    {
      ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
      std::__shared_weak_count::__release_weak(v183);
    }
  }
  v186 = __p;
  __p = 0;
  if (v186)
    (*(void (**)(void *))(*(_QWORD *)v186 + 8))(v186);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v276);
  v187 = v276;
  std::string::basic_string[abi:ne180100]<0>(v207, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v207, 1, v303);
  v209 = v303[0];
  if (v303[0])
  {
    v188 = (std::__shared_weak_count *)operator new();
    v189 = v303[0];
    v188->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v188->__shared_owners_ = 0;
    v188->__shared_weak_owners_ = 0;
    v188[1].__vftable = (std::__shared_weak_count_vtbl *)v189;
  }
  else
  {
    v188 = 0;
  }
  v210 = v188;
  v303[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v287, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v288, "int32");
  std::string::basic_string[abi:ne180100]<0>(v289, "int8");
  std::string::basic_string[abi:ne180100]<0>(v290, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&v291, (unsigned __int8 *)&__p, 5);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v187 + 24))(v187, &v209, &v291, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v291);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v290[i + 2]) < 0)
      operator delete((void *)v290[i]);
  }
  v191 = v210;
  if (v210)
  {
    v192 = (unint64_t *)&v210->__shared_owners_;
    do
      v193 = __ldaxr(v192);
    while (__stlxr(v193 - 1, v192));
    if (!v193)
    {
      ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
      std::__shared_weak_count::__release_weak(v191);
    }
  }
  v194 = v303[0];
  v303[0] = 0;
  if (v194)
    (*(void (**)(uint64_t))(*(_QWORD *)v194 + 8))(v194);
  if (v208 < 0)
    operator delete(v207[0]);
  v195 = *a3;
  v205 = v276;
  if (v276)
  {
    v196 = (std::__shared_weak_count *)operator new();
    v197 = v276;
    v196->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v196->__shared_owners_ = 0;
    v196->__shared_weak_owners_ = 0;
    v196[1].__vftable = (std::__shared_weak_count_vtbl *)v197;
  }
  else
  {
    v196 = 0;
  }
  v206 = v196;
  v276 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v195 + 56))(v195, &v205);
  v198 = v206;
  if (v206)
  {
    v199 = (unint64_t *)&v206->__shared_owners_;
    do
      v200 = __ldaxr(v199);
    while (__stlxr(v200 - 1, v199));
    if (!v200)
    {
      ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
      std::__shared_weak_count::__release_weak(v198);
    }
  }
  v201 = v276;
  v276 = 0;
  if (v201)
    (*(void (**)(uint64_t))(*(_QWORD *)v201 + 8))(v201);
  if (v300)
  {
    v202 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v300);
    MEMORY[0x1E0C023A0](v202, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v278, 0);
  result = (uint64_t)v283;
  if (v283)
  {
    v204 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v283);
    return MEMORY[0x1E0C023A0](v204, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08F8E0C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;

  v4 = STACK[0x2F0];
  STACK[0x2F0] = 0;
  if (v4)
    (*(void (**)(unint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 112), 0);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x300], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x348], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::L2Norm::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count_vtbl *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  unsigned __int8 *v20;
  std::__shared_weak_count_vtbl *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  char **v26;
  uint64_t v27;
  std::__shared_weak_count_vtbl *v28;
  uint64_t v29;
  std::__shared_weak_count_vtbl *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t *v43;
  char *v44;
  char *v45;
  char *v46;
  __int128 v47;
  char *v48;
  char *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  char **v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  _OWORD *v68;
  unsigned __int8 *v69;
  void *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  std::__shared_weak_count_vtbl *v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  unint64_t *p_shared_owners;
  unint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  void *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count_vtbl *v89;
  void *v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count_vtbl *v96;
  void *v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count_vtbl *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count_vtbl *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  std::__shared_weak_count_vtbl *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  void *v110;
  void *v111;
  std::__shared_weak_count *v112;
  std::__shared_weak_count_vtbl *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count_vtbl *v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  std::__shared_weak_count_vtbl *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  void *v124;
  void *v125;
  std::__shared_weak_count *v126;
  std::__shared_weak_count_vtbl *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count_vtbl *v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  std::__shared_weak_count_vtbl *v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  void *v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  uint64_t v141;
  uint64_t i;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t result;
  uint64_t v156;
  uint64_t v157;
  std::__shared_weak_count *v158;
  void *v159[2];
  char v160;
  uint64_t v161;
  std::__shared_weak_count *v162;
  void *v163;
  std::__shared_weak_count *v164;
  void *v165[2];
  char v166;
  void *v167[2];
  char v168;
  std::__shared_weak_count_vtbl *v169;
  std::__shared_weak_count *v170;
  void *v171;
  std::__shared_weak_count *v172;
  void *v173[2];
  char v174;
  std::__shared_weak_count_vtbl *v175;
  std::__shared_weak_count *v176;
  void *v177;
  std::__shared_weak_count *v178;
  void *v179[2];
  char v180;
  std::__shared_weak_count_vtbl *v181;
  std::__shared_weak_count *v182;
  void *v183[2];
  char v184;
  void *v185[2];
  char v186;
  std::__shared_weak_count_vtbl *v187;
  std::__shared_weak_count *v188;
  void *v189[2];
  char v190;
  void *v191[2];
  char v192;
  std::__shared_weak_count_vtbl *v193;
  std::__shared_weak_count *v194;
  std::__shared_weak_count_vtbl *v195;
  std::__shared_weak_count *v196;
  __n128 v197;
  __int128 v198;
  __int128 v199;
  void *v200[2];
  uint64_t v201;
  __n128 v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  char **v206;
  __n128 v207;
  __n128 v208;
  _QWORD *v209;
  void *__p;
  uint64_t Scalar;
  char *v212;
  _QWORD v213[3];
  uint64_t v214[3];
  uint64_t v215[3];
  _QWORD v216[3];
  std::__shared_weak_count_vtbl *v217;
  std::__shared_weak_count_vtbl *p_get_deleter;
  _QWORD *v219;
  _BYTE v220[24];
  _BYTE *v221;
  _BYTE v222[24];
  _BYTE *v223;
  _BYTE v224[24];
  _BYTE *v225;
  std::__shared_weak_count_vtbl *v226;
  uint64_t v227;
  void (__cdecl **v228)(std::__shared_weak_count *__hidden);
  uint64_t v229[3];

  v229[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v209 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (char *)operator new(0x18uLL);
  v212 = v10 + 24;
  *(_QWORD *)v10 = v7;
  *((_QWORD *)v10 + 1) = v8;
  *((_QWORD *)v10 + 2) = v9;
  __p = v10;
  Scalar = (uint64_t)(v10 + 24);
  v226 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v14->__get_deleter;
  v219 = &v14->__get_deleter;
  v14->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v11;
  v14->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v12;
  v14->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v13;
  v217 = v14;
  v227 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v217);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v226, 2, &v208);
  MIL::IRParameter::Make(&v208, &v204);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v204);
  v15 = v204;
  v204 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v208.n128_u64[1];
  if (v208.n128_u64[1])
  {
    v17 = (unint64_t *)(v208.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v217)
  {
    p_get_deleter = v217;
    operator delete(v217);
  }
  if (__p)
  {
    Scalar = (uint64_t)__p;
    operator delete(__p);
  }
  v19 = v209;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 4);
  Scalar = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 2, &v207);
  MIL::IRParameter::Make(&v207, (uint64_t *)&v217);
  v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v19, "epsilon", (uint64_t *)&v217);
  v21 = v217;
  v217 = 0;
  if (v21)
    (*((void (**)(std::__shared_weak_count_vtbl *))v21->~__shared_weak_count + 1))(v21);
  v22 = (std::__shared_weak_count *)v207.n128_u64[1];
  if (v207.n128_u64[1])
  {
    v23 = (unint64_t *)(v207.n128_u64[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v20 + 5) + 32))(*((_QWORD *)v20 + 5), 1);
  v206 = 0;
  v25 = operator new();
  *(_QWORD *)v25 = 0;
  *(_QWORD *)(v25 + 8) = 0;
  *(_QWORD *)(v25 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v206, (void **)v25);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v206, 1uLL);
  v26 = v206;
  v27 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v28 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v217 = v28;
  v28->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v27;
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v28->~__shared_weak_count_0;
  v219 = &v28->~__shared_weak_count_0;
  v229[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v217);
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v226 = v30;
  v30->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v29;
  v227 = (uint64_t)&v30->~__shared_weak_count_0;
  v228 = &v30->~__shared_weak_count_0;
  v229[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v226);
  MIL::IRParameter::MakeTypeSet((uint64_t)v229, 2, &v202);
  MIL::IRParameter::Make(&v202, &v203);
  v31 = v203;
  v204 = v203;
  if (v203)
  {
    v32 = (_QWORD *)operator new();
    v33 = v203;
    *v32 = &unk_1EA99F888;
    v32[1] = 0;
    v32[2] = 0;
    v32[3] = v33;
  }
  else
  {
    v32 = 0;
  }
  v205 = v32;
  v203 = 0;
  v34 = v26[2];
  v35 = v26[1];
  if (v35 >= v34)
  {
    v37 = (v35 - *v26) >> 4;
    v38 = v37 + 1;
    if ((unint64_t)(v37 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v39 = v34 - *v26;
    if (v39 >> 3 > v38)
      v38 = v39 >> 3;
    if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0)
      v40 = 0xFFFFFFFFFFFFFFFLL;
    else
      v40 = v38;
    v213[1] = v26 + 2;
    v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v26 + 2), v40);
    v43 = (uint64_t *)&v41[16 * v37];
    *v43 = v31;
    v43[1] = (uint64_t)v32;
    v204 = 0;
    v205 = 0;
    v45 = *v26;
    v44 = v26[1];
    if (v44 == *v26)
    {
      v48 = v26[1];
      v46 = &v41[16 * v37];
    }
    else
    {
      v46 = &v41[16 * v37];
      do
      {
        v47 = *((_OWORD *)v44 - 1);
        v44 -= 16;
        *((_OWORD *)v46 - 1) = v47;
        v46 -= 16;
        *(_QWORD *)v44 = 0;
        *((_QWORD *)v44 + 1) = 0;
      }
      while (v44 != v45);
      v48 = *v26;
      v44 = v26[1];
    }
    v36 = (char *)(v43 + 2);
    *v26 = v46;
    Scalar = (uint64_t)v48;
    v26[1] = (char *)(v43 + 2);
    v212 = v44;
    v49 = v26[2];
    v26[2] = &v41[16 * v42];
    v213[0] = v49;
    __p = v48;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v35 = v31;
    *((_QWORD *)v35 + 1) = v32;
    v36 = v35 + 16;
    v204 = 0;
    v205 = 0;
  }
  v26[1] = v36;
  v50 = v203;
  v203 = 0;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  v51 = (std::__shared_weak_count *)v202.n128_u64[1];
  if (v202.n128_u64[1])
  {
    v52 = (unint64_t *)(v202.n128_u64[1] + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  if (v226)
  {
    v227 = (uint64_t)v226;
    operator delete(v226);
  }
  if (v217)
  {
    p_get_deleter = v217;
    operator delete(v217);
  }
  *(_OWORD *)v200 = *(_OWORD *)a2;
  v201 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v54 = (uint64_t)v209;
  *(_QWORD *)&v199 = v209;
  if (v209)
  {
    v55 = (_QWORD *)operator new();
    *v55 = &unk_1EA99F8E8;
    v55[1] = 0;
    v55[2] = 0;
    v55[3] = v54;
  }
  else
  {
    v55 = 0;
  }
  *((_QWORD *)&v199 + 1) = v55;
  v209 = 0;
  *(_QWORD *)&v198 = v206;
  if (v206)
  {
    v56 = (_QWORD *)operator new();
    v57 = v206;
    *v56 = &unk_1EA99F948;
    v56[1] = 0;
    v56[2] = 0;
    v56[3] = v57;
  }
  else
  {
    v56 = 0;
  }
  *((_QWORD *)&v198 + 1) = v56;
  v206 = 0;
  v225 = 0;
  v223 = 0;
  MIL::IROperator::Make((__int128 *)v200, &v199, &v198, (uint64_t)v224, (uint64_t)v222, a3);
  v58 = v223;
  if (v223 == v222)
  {
    v59 = 4;
    v58 = v222;
  }
  else
  {
    if (!v223)
      goto LABEL_58;
    v59 = 5;
  }
  (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_58:
  v60 = v225;
  if (v225 == v224)
  {
    v61 = 4;
    v60 = v224;
    goto LABEL_62;
  }
  if (v225)
  {
    v61 = 5;
LABEL_62:
    (*(void (**)(void))(*v60 + 8 * v61))();
  }
  v62 = (std::__shared_weak_count *)*((_QWORD *)&v198 + 1);
  if (*((_QWORD *)&v198 + 1))
  {
    v63 = (unint64_t *)(*((_QWORD *)&v198 + 1) + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v65 = (std::__shared_weak_count *)*((_QWORD *)&v199 + 1);
  if (*((_QWORD *)&v199 + 1))
  {
    v66 = (unint64_t *)(*((_QWORD *)&v199 + 1) + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  if (SHIBYTE(v201) < 0)
    operator delete(v200[0]);
  v226 = 0;
  v68 = (_OWORD *)operator new();
  *v68 = 0u;
  v68[1] = 0u;
  *((_DWORD *)v68 + 8) = 1065353216;
  v226 = (std::__shared_weak_count_vtbl *)v68;
  v217 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v217, 1, &v197);
  MIL::IRParameter::Make(&v197, (uint64_t *)&__p);
  v69 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v68, "minimum_compute_type", (uint64_t *)&__p);
  v70 = __p;
  __p = 0;
  if (v70)
    (*(void (**)(void *))(*(_QWORD *)v70 + 8))(v70);
  v71 = (std::__shared_weak_count *)v197.n128_u64[1];
  if (v197.n128_u64[1])
  {
    v72 = (unint64_t *)(v197.n128_u64[1] + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v69 + 5) + 32))(*((_QWORD *)v69 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v69 + 5) + 48))(*((_QWORD *)v69 + 5), 1);
  v74 = *a3;
  v75 = v226;
  v195 = v226;
  if (v226)
  {
    v76 = (std::__shared_weak_count *)operator new();
    v76->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v76->__shared_owners_ = 0;
    v76->__shared_weak_owners_ = 0;
    v76[1].__vftable = v75;
  }
  else
  {
    v76 = 0;
  }
  v196 = v76;
  v226 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v74 + 184))(v74, &v195);
  v77 = v196;
  if (v196)
  {
    p_shared_owners = (unint64_t *)&v196->__shared_owners_;
    do
      v79 = __ldaxr(p_shared_owners);
    while (__stlxr(v79 - 1, p_shared_owners));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v80 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&__p, (uint64_t)v220);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v80 + 200))(v80, v220);
  v81 = v221;
  if (v221 == v220)
  {
    v82 = 4;
    v81 = v220;
  }
  else
  {
    if (!v221)
      goto LABEL_95;
    v82 = 5;
  }
  (*(void (**)(void))(*v81 + 8 * v82))();
LABEL_95:
  if (SHIBYTE(v212) < 0)
    operator delete(__p);
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v83 = __p;
  std::string::basic_string[abi:ne180100]<0>(v191, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v191, 0, (uint64_t *)&v217);
  v193 = v217;
  if (v217)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = v217;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v194 = v84;
  v217 = 0;
  std::string::basic_string[abi:ne180100]<0>(v189, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v83 + 24))(v83, &v193, v189);
  if (v190 < 0)
    operator delete(v189[0]);
  v86 = v194;
  if (v194)
  {
    v87 = (unint64_t *)&v194->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = v217;
  v217 = 0;
  if (v89)
    (*((void (**)(std::__shared_weak_count_vtbl *))v89->~__shared_weak_count + 1))(v89);
  if (v192 < 0)
    operator delete(v191[0]);
  v90 = __p;
  std::string::basic_string[abi:ne180100]<0>(v185, "epsilon");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v185, 0, (uint64_t *)&v217);
  v187 = v217;
  if (v217)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = v217;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v188 = v91;
  v217 = 0;
  std::string::basic_string[abi:ne180100]<0>(v183, "CONST_TYPE");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v90 + 24))(v90, &v187, v183);
  if (v184 < 0)
    operator delete(v183[0]);
  v93 = v188;
  if (v188)
  {
    v94 = (unint64_t *)&v188->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v217;
  v217 = 0;
  if (v96)
    (*((void (**)(std::__shared_weak_count_vtbl *))v96->~__shared_weak_count + 1))(v96);
  if (v186 < 0)
    operator delete(v185[0]);
  v97 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v217);
  v181 = v217;
  if (v217)
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = v217;
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = v99;
  }
  else
  {
    v98 = 0;
  }
  v182 = v98;
  v217 = 0;
  std::string::basic_string[abi:ne180100]<0>(v179, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v97 + 24))(v97, &v181, v179);
  if (v180 < 0)
    operator delete(v179[0]);
  v100 = v182;
  if (v182)
  {
    v101 = (unint64_t *)&v182->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = v217;
  v217 = 0;
  if (v103)
    (*((void (**)(std::__shared_weak_count_vtbl *))v103->~__shared_weak_count + 1))(v103);
  v104 = *a3;
  v177 = __p;
  if (__p)
  {
    v105 = (std::__shared_weak_count *)operator new();
    v106 = (std::__shared_weak_count_vtbl *)__p;
    v105->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v105->__shared_owners_ = 0;
    v105->__shared_weak_owners_ = 0;
    v105[1].__vftable = v106;
  }
  else
  {
    v105 = 0;
  }
  v178 = v105;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v104 + 56))(v104, &v177);
  v107 = v178;
  if (v178)
  {
    v108 = (unint64_t *)&v178->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = __p;
  __p = 0;
  if (v110)
    (*(void (**)(void *))(*(_QWORD *)v110 + 8))(v110);
  MIL::Validation::TensorRankValueConstraints::Make(&__p);
  v111 = __p;
  std::string::basic_string[abi:ne180100]<0>(v173, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v173, 0, (uint64_t *)&v217);
  v175 = v217;
  if (v217)
  {
    v112 = (std::__shared_weak_count *)operator new();
    v113 = v217;
    v112->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v112->__shared_owners_ = 0;
    v112->__shared_weak_owners_ = 0;
    v112[1].__vftable = v113;
  }
  else
  {
    v112 = 0;
  }
  v176 = v112;
  v217 = 0;
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))(*(_QWORD *)v111 + 32))(v111, &v175, 3, 5);
  v114 = v176;
  if (v176)
  {
    v115 = (unint64_t *)&v176->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = v217;
  v217 = 0;
  if (v117)
    (*((void (**)(std::__shared_weak_count_vtbl *))v117->~__shared_weak_count + 1))(v117);
  if (v174 < 0)
    operator delete(v173[0]);
  v118 = *a3;
  v171 = __p;
  if (__p)
  {
    v119 = (std::__shared_weak_count *)operator new();
    v120 = (std::__shared_weak_count_vtbl *)__p;
    v119->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FC78;
    v119->__shared_owners_ = 0;
    v119->__shared_weak_owners_ = 0;
    v119[1].__vftable = v120;
  }
  else
  {
    v119 = 0;
  }
  v172 = v119;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v118 + 56))(v118, &v171);
  v121 = v172;
  if (v172)
  {
    v122 = (unint64_t *)&v172->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = __p;
  __p = 0;
  if (v124)
    (*(void (**)(void *))(*(_QWORD *)v124 + 8))(v124);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&__p);
  v125 = __p;
  std::string::basic_string[abi:ne180100]<0>(v167, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v167, 0, (uint64_t *)&v217);
  v169 = v217;
  if (v217)
  {
    v126 = (std::__shared_weak_count *)operator new();
    v127 = v217;
    v126->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v126->__shared_owners_ = 0;
    v126->__shared_weak_owners_ = 0;
    v126[1].__vftable = v127;
  }
  else
  {
    v126 = 0;
  }
  v170 = v126;
  v217 = 0;
  std::string::basic_string[abi:ne180100]<0>(v165, "C");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v125 + 24))(v125, &v169, 1, v165);
  if (v166 < 0)
    operator delete(v165[0]);
  v128 = v170;
  if (v170)
  {
    v129 = (unint64_t *)&v170->__shared_owners_;
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v131 = v217;
  v217 = 0;
  if (v131)
    (*((void (**)(std::__shared_weak_count_vtbl *))v131->~__shared_weak_count + 1))(v131);
  if (v168 < 0)
    operator delete(v167[0]);
  v132 = *a3;
  v163 = __p;
  if (__p)
  {
    v133 = (std::__shared_weak_count *)operator new();
    v134 = (std::__shared_weak_count_vtbl *)__p;
    v133->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v133->__shared_owners_ = 0;
    v133->__shared_weak_owners_ = 0;
    v133[1].__vftable = v134;
  }
  else
  {
    v133 = 0;
  }
  v164 = v133;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v132 + 56))(v132, &v163);
  v135 = v164;
  if (v164)
  {
    v136 = (unint64_t *)&v164->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = __p;
  __p = 0;
  if (v138)
    (*(void (**)(void *))(*(_QWORD *)v138 + 8))(v138);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v204);
  v139 = v204;
  std::string::basic_string[abi:ne180100]<0>(v159, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v159, 1, v229);
  v161 = v229[0];
  if (v229[0])
  {
    v140 = (std::__shared_weak_count *)operator new();
    v141 = v229[0];
    v140->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v140->__shared_owners_ = 0;
    v140->__shared_weak_owners_ = 0;
    v140[1].__vftable = (std::__shared_weak_count_vtbl *)v141;
  }
  else
  {
    v140 = 0;
  }
  v162 = v140;
  v229[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v213, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v214, "int32");
  std::string::basic_string[abi:ne180100]<0>(v215, "int8");
  std::string::basic_string[abi:ne180100]<0>(v216, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&v217, (unsigned __int8 *)&__p, 5);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v139 + 24))(v139, &v161, &v217, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v217);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v216[i + 2]) < 0)
      operator delete((void *)v216[i]);
  }
  v143 = v162;
  if (v162)
  {
    v144 = (unint64_t *)&v162->__shared_owners_;
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 - 1, v144));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  v146 = v229[0];
  v229[0] = 0;
  if (v146)
    (*(void (**)(uint64_t))(*(_QWORD *)v146 + 8))(v146);
  if (v160 < 0)
    operator delete(v159[0]);
  v147 = *a3;
  v157 = v204;
  if (v204)
  {
    v148 = (std::__shared_weak_count *)operator new();
    v149 = v204;
    v148->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v148->__shared_owners_ = 0;
    v148->__shared_weak_owners_ = 0;
    v148[1].__vftable = (std::__shared_weak_count_vtbl *)v149;
  }
  else
  {
    v148 = 0;
  }
  v158 = v148;
  v204 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v147 + 56))(v147, &v157);
  v150 = v158;
  if (v158)
  {
    v151 = (unint64_t *)&v158->__shared_owners_;
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
  v153 = v204;
  v204 = 0;
  if (v153)
    (*(void (**)(uint64_t))(*(_QWORD *)v153 + 8))(v153);
  if (v226)
  {
    v154 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v226);
    MEMORY[0x1E0C023A0](v154, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v206, 0);
  result = (uint64_t)v209;
  if (v209)
  {
    v156 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v209);
    return MEMORY[0x1E0C023A0](v156, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08FA838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a71;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v74;

  if (a71)
    (*(void (**)(uint64_t))(*(_QWORD *)a71 + 8))(a71);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v72 - 112), 0);
  v74 = *v71;
  *v71 = 0;
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x200], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x228], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::LayerNorm::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  unsigned __int8 *v18;
  std::__shared_weak_count_vtbl *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count_vtbl *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count_vtbl *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  unsigned __int8 *v48;
  std::__shared_weak_count_vtbl *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  char **v54;
  uint64_t v55;
  std::__shared_weak_count_vtbl *v56;
  uint64_t v57;
  std::__shared_weak_count_vtbl *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t *v71;
  char *v72;
  char *v73;
  char *v74;
  __int128 v75;
  char *v76;
  char *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  char **v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  _OWORD *v96;
  unsigned __int8 *v97;
  void *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  std::__shared_weak_count_vtbl *v103;
  std::__shared_weak_count *v104;
  std::__shared_weak_count *v105;
  unint64_t *p_shared_owners;
  unint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  void *v111;
  std::__shared_weak_count *v112;
  std::__shared_weak_count_vtbl *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count_vtbl *v117;
  void *v118;
  std::__shared_weak_count *v119;
  std::__shared_weak_count_vtbl *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count_vtbl *v124;
  void *v125;
  std::__shared_weak_count *v126;
  std::__shared_weak_count_vtbl *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count_vtbl *v131;
  void *v132;
  std::__shared_weak_count *v133;
  std::__shared_weak_count_vtbl *v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count_vtbl *v138;
  void *v139;
  std::__shared_weak_count *v140;
  std::__shared_weak_count_vtbl *v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count_vtbl *v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  std::__shared_weak_count_vtbl *v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  void *v152;
  void *v153;
  std::__shared_weak_count *v154;
  std::__shared_weak_count_vtbl *v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count_vtbl *v159;
  uint64_t v160;
  std::__shared_weak_count *v161;
  std::__shared_weak_count_vtbl *v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  void *v166;
  uint64_t v167;
  std::__shared_weak_count *v168;
  uint64_t v169;
  uint64_t i;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  std::__shared_weak_count *v176;
  uint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t result;
  uint64_t v184;
  uint64_t v185;
  std::__shared_weak_count *v186;
  void *v187[2];
  char v188;
  uint64_t v189;
  std::__shared_weak_count *v190;
  void *v191;
  std::__shared_weak_count *v192;
  void *v193[2];
  char v194;
  void *v195[2];
  char v196;
  std::__shared_weak_count_vtbl *v197;
  std::__shared_weak_count *v198;
  void *v199;
  std::__shared_weak_count *v200;
  void *v201[2];
  char v202;
  std::__shared_weak_count_vtbl *v203;
  std::__shared_weak_count *v204;
  void *v205[2];
  char v206;
  void *v207[2];
  char v208;
  std::__shared_weak_count_vtbl *v209;
  std::__shared_weak_count *v210;
  void *v211[2];
  char v212;
  void *v213[2];
  char v214;
  std::__shared_weak_count_vtbl *v215;
  std::__shared_weak_count *v216;
  void *v217[2];
  char v218;
  void *v219[2];
  char v220;
  std::__shared_weak_count_vtbl *v221;
  std::__shared_weak_count *v222;
  void *v223[2];
  char v224;
  void *v225[2];
  char v226;
  std::__shared_weak_count_vtbl *v227;
  std::__shared_weak_count *v228;
  std::__shared_weak_count_vtbl *v229;
  std::__shared_weak_count *v230;
  __n128 v231;
  __int128 v232;
  __int128 v233;
  void *v234[2];
  uint64_t v235;
  __n128 v236;
  uint64_t v237;
  uint64_t v238;
  _QWORD *v239;
  char **v240;
  __n128 v241;
  __n128 v242;
  __n128 v243;
  __n128 v244;
  __n128 v245;
  _QWORD *v246;
  void *__p;
  uint64_t Scalar;
  char *v249;
  _QWORD v250[3];
  uint64_t v251[3];
  uint64_t v252[3];
  _QWORD v253[3];
  std::__shared_weak_count_vtbl *v254;
  std::__shared_weak_count_vtbl *p_on_zero_shared;
  _QWORD *v256;
  _BYTE v257[24];
  _BYTE *v258;
  _BYTE v259[24];
  _BYTE *v260;
  _BYTE v261[24];
  _BYTE *v262;
  std::__shared_weak_count_vtbl *v263;
  uint64_t v264;
  void (__cdecl **v265)(std::__shared_weak_count *__hidden);
  uint64_t v266[3];

  v266[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v246 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (char *)operator new(8uLL);
  __p = v8;
  *(_QWORD *)v8 = v7;
  v249 = v8 + 8;
  Scalar = (uint64_t)(v8 + 8);
  v263 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v254 = v10;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  p_on_zero_shared = (std::__shared_weak_count_vtbl *)&v10->~__shared_weak_count_0;
  v256 = &v10->~__shared_weak_count_0;
  v264 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v254);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v263, 2, &v245);
  MIL::IRParameter::Make(&v245, &v238);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v238);
  v11 = v238;
  v238 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v245.n128_u64[1];
  if (v245.n128_u64[1])
  {
    v13 = (unint64_t *)(v245.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v254)
  {
    p_on_zero_shared = v254;
    operator delete(v254);
  }
  if (__p)
  {
    Scalar = (uint64_t)__p;
    operator delete(__p);
  }
  v15 = v246;
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = (char *)operator new(8uLL);
  __p = v17;
  *(_QWORD *)v17 = v16;
  v249 = v17 + 8;
  Scalar = (uint64_t)(v17 + 8);
  v263 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v263, 1, &v244);
  MIL::IRParameter::Make(&v244, (uint64_t *)&v254);
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v15, "axes", (uint64_t *)&v254);
  v19 = v254;
  v254 = 0;
  if (v19)
    (*((void (**)(std::__shared_weak_count_vtbl *))v19->~__shared_weak_count + 1))(v19);
  v20 = (std::__shared_weak_count *)v244.n128_u64[1];
  if (v244.n128_u64[1])
  {
    v21 = (unint64_t *)(v244.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (__p)
  {
    Scalar = (uint64_t)__p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 32))(*((_QWORD *)v18 + 5), 1);
  v23 = v246;
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = (char *)operator new(0x10uLL);
  v249 = v26 + 16;
  *(_QWORD *)v26 = v24;
  *((_QWORD *)v26 + 1) = v25;
  __p = v26;
  Scalar = (uint64_t)(v26 + 16);
  v263 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v27 = MIL::IRUnknownDimension::Make(a1, 0);
  v28 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v29 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (std::__shared_weak_count_vtbl *)&v29->__on_zero_shared;
  v256 = &v29->__on_zero_shared;
  v29->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v27;
  v29->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v28;
  v254 = v29;
  v264 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v254);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v263, 2, &v243);
  MIL::IRParameter::Make(&v243, &v238);
  v30 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v23, "gamma", &v238);
  v31 = v238;
  v238 = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v32 = (std::__shared_weak_count *)v243.n128_u64[1];
  if (v243.n128_u64[1])
  {
    v33 = (unint64_t *)(v243.n128_u64[1] + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (v254)
  {
    p_on_zero_shared = v254;
    operator delete(v254);
  }
  if (__p)
  {
    Scalar = (uint64_t)__p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v30 + 5) + 32))(*((_QWORD *)v30 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v30 + 5) + 48))(*((_QWORD *)v30 + 5), 1);
  v35 = v246;
  v36 = MIL::IRUnknownDimension::Make(a1, 0);
  v37 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v38 = (char *)operator new(0x10uLL);
  v249 = v38 + 16;
  *(_QWORD *)v38 = v36;
  *((_QWORD *)v38 + 1) = v37;
  __p = v38;
  Scalar = (uint64_t)(v38 + 16);
  v263 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v39 = MIL::IRUnknownDimension::Make(a1, 0);
  v40 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v41 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (std::__shared_weak_count_vtbl *)&v41->__on_zero_shared;
  v256 = &v41->__on_zero_shared;
  v41->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v39;
  v41->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v40;
  v254 = v41;
  v264 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v254);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v263, 2, &v242);
  MIL::IRParameter::Make(&v242, &v238);
  v42 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v35, "beta", &v238);
  v43 = v238;
  v238 = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v44 = (std::__shared_weak_count *)v242.n128_u64[1];
  if (v242.n128_u64[1])
  {
    v45 = (unint64_t *)(v242.n128_u64[1] + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (v254)
  {
    p_on_zero_shared = v254;
    operator delete(v254);
  }
  if (__p)
  {
    Scalar = (uint64_t)__p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v42 + 5) + 32))(*((_QWORD *)v42 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v42 + 5) + 48))(*((_QWORD *)v42 + 5), 1);
  v47 = v246;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 4);
  Scalar = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 2, &v241);
  MIL::IRParameter::Make(&v241, (uint64_t *)&v254);
  v48 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v47, "epsilon", (uint64_t *)&v254);
  v49 = v254;
  v254 = 0;
  if (v49)
    (*((void (**)(std::__shared_weak_count_vtbl *))v49->~__shared_weak_count + 1))(v49);
  v50 = (std::__shared_weak_count *)v241.n128_u64[1];
  if (v241.n128_u64[1])
  {
    v51 = (unint64_t *)(v241.n128_u64[1] + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v48 + 5) + 32))(*((_QWORD *)v48 + 5), 1);
  v240 = 0;
  v53 = operator new();
  *(_QWORD *)v53 = 0;
  *(_QWORD *)(v53 + 8) = 0;
  *(_QWORD *)(v53 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v240, (void **)v53);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v240, 1uLL);
  v54 = v240;
  v55 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v56 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v254 = v56;
  v56->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v55;
  p_on_zero_shared = (std::__shared_weak_count_vtbl *)&v56->~__shared_weak_count_0;
  v256 = &v56->~__shared_weak_count_0;
  v266[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v254);
  v57 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v58 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v263 = v58;
  v58->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v57;
  v264 = (uint64_t)&v58->~__shared_weak_count_0;
  v265 = &v58->~__shared_weak_count_0;
  v266[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v263);
  MIL::IRParameter::MakeTypeSet((uint64_t)v266, 2, &v236);
  MIL::IRParameter::Make(&v236, &v237);
  v59 = v237;
  v238 = v237;
  if (v237)
  {
    v60 = (_QWORD *)operator new();
    v61 = v237;
    *v60 = &unk_1EA99F888;
    v60[1] = 0;
    v60[2] = 0;
    v60[3] = v61;
  }
  else
  {
    v60 = 0;
  }
  v239 = v60;
  v237 = 0;
  v62 = v54[2];
  v63 = v54[1];
  if (v63 >= v62)
  {
    v65 = (v63 - *v54) >> 4;
    v66 = v65 + 1;
    if ((unint64_t)(v65 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v67 = v62 - *v54;
    if (v67 >> 3 > v66)
      v66 = v67 >> 3;
    if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF0)
      v68 = 0xFFFFFFFFFFFFFFFLL;
    else
      v68 = v66;
    v250[1] = v54 + 2;
    v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v54 + 2), v68);
    v71 = (uint64_t *)&v69[16 * v65];
    *v71 = v59;
    v71[1] = (uint64_t)v60;
    v239 = 0;
    v238 = 0;
    v73 = *v54;
    v72 = v54[1];
    if (v72 == *v54)
    {
      v76 = v54[1];
      v74 = &v69[16 * v65];
    }
    else
    {
      v74 = &v69[16 * v65];
      do
      {
        v75 = *((_OWORD *)v72 - 1);
        v72 -= 16;
        *((_OWORD *)v74 - 1) = v75;
        v74 -= 16;
        *(_QWORD *)v72 = 0;
        *((_QWORD *)v72 + 1) = 0;
      }
      while (v72 != v73);
      v76 = *v54;
      v72 = v54[1];
    }
    v64 = (char *)(v71 + 2);
    *v54 = v74;
    Scalar = (uint64_t)v76;
    v54[1] = (char *)(v71 + 2);
    v249 = v72;
    v77 = v54[2];
    v54[2] = &v69[16 * v70];
    v250[0] = v77;
    __p = v76;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v63 = v59;
    *((_QWORD *)v63 + 1) = v60;
    v64 = v63 + 16;
    v239 = 0;
    v238 = 0;
  }
  v54[1] = v64;
  v78 = v237;
  v237 = 0;
  if (v78)
    (*(void (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78);
  v79 = (std::__shared_weak_count *)v236.n128_u64[1];
  if (v236.n128_u64[1])
  {
    v80 = (unint64_t *)(v236.n128_u64[1] + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  if (v263)
  {
    v264 = (uint64_t)v263;
    operator delete(v263);
  }
  if (v254)
  {
    p_on_zero_shared = v254;
    operator delete(v254);
  }
  *(_OWORD *)v234 = *(_OWORD *)a2;
  v235 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v82 = (uint64_t)v246;
  *(_QWORD *)&v233 = v246;
  if (v246)
  {
    v83 = (_QWORD *)operator new();
    *v83 = &unk_1EA99F8E8;
    v83[1] = 0;
    v83[2] = 0;
    v83[3] = v82;
  }
  else
  {
    v83 = 0;
  }
  *((_QWORD *)&v233 + 1) = v83;
  v246 = 0;
  *(_QWORD *)&v232 = v240;
  if (v240)
  {
    v84 = (_QWORD *)operator new();
    v85 = v240;
    *v84 = &unk_1EA99F948;
    v84[1] = 0;
    v84[2] = 0;
    v84[3] = v85;
  }
  else
  {
    v84 = 0;
  }
  *((_QWORD *)&v232 + 1) = v84;
  v240 = 0;
  v262 = 0;
  v260 = 0;
  MIL::IROperator::Make((__int128 *)v234, &v233, &v232, (uint64_t)v261, (uint64_t)v259, a3);
  v86 = v260;
  if (v260 == v259)
  {
    v87 = 4;
    v86 = v259;
  }
  else
  {
    if (!v260)
      goto LABEL_89;
    v87 = 5;
  }
  (*(void (**)(void))(*v86 + 8 * v87))();
LABEL_89:
  v88 = v262;
  if (v262 == v261)
  {
    v89 = 4;
    v88 = v261;
    goto LABEL_93;
  }
  if (v262)
  {
    v89 = 5;
LABEL_93:
    (*(void (**)(void))(*v88 + 8 * v89))();
  }
  v90 = (std::__shared_weak_count *)*((_QWORD *)&v232 + 1);
  if (*((_QWORD *)&v232 + 1))
  {
    v91 = (unint64_t *)(*((_QWORD *)&v232 + 1) + 8);
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = (std::__shared_weak_count *)*((_QWORD *)&v233 + 1);
  if (*((_QWORD *)&v233 + 1))
  {
    v94 = (unint64_t *)(*((_QWORD *)&v233 + 1) + 8);
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  if (SHIBYTE(v235) < 0)
    operator delete(v234[0]);
  v263 = 0;
  v96 = (_OWORD *)operator new();
  *v96 = 0u;
  v96[1] = 0u;
  *((_DWORD *)v96 + 8) = 1065353216;
  v263 = (std::__shared_weak_count_vtbl *)v96;
  v254 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v254, 1, &v231);
  MIL::IRParameter::Make(&v231, (uint64_t *)&__p);
  v97 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v96, "minimum_compute_type", (uint64_t *)&__p);
  v98 = __p;
  __p = 0;
  if (v98)
    (*(void (**)(void *))(*(_QWORD *)v98 + 8))(v98);
  v99 = (std::__shared_weak_count *)v231.n128_u64[1];
  if (v231.n128_u64[1])
  {
    v100 = (unint64_t *)(v231.n128_u64[1] + 8);
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v97 + 5) + 32))(*((_QWORD *)v97 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v97 + 5) + 48))(*((_QWORD *)v97 + 5), 1);
  v102 = *a3;
  v103 = v263;
  v229 = v263;
  if (v263)
  {
    v104 = (std::__shared_weak_count *)operator new();
    v104->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v104->__shared_owners_ = 0;
    v104->__shared_weak_owners_ = 0;
    v104[1].__vftable = v103;
  }
  else
  {
    v104 = 0;
  }
  v230 = v104;
  v263 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v102 + 184))(v102, &v229);
  v105 = v230;
  if (v230)
  {
    p_shared_owners = (unint64_t *)&v230->__shared_owners_;
    do
      v107 = __ldaxr(p_shared_owners);
    while (__stlxr(v107 - 1, p_shared_owners));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&__p, (uint64_t)v257);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v108 + 200))(v108, v257);
  v109 = v258;
  if (v258 == v257)
  {
    v110 = 4;
    v109 = v257;
  }
  else
  {
    if (!v258)
      goto LABEL_126;
    v110 = 5;
  }
  (*(void (**)(void))(*v109 + 8 * v110))();
LABEL_126:
  if (SHIBYTE(v249) < 0)
    operator delete(__p);
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v111 = __p;
  std::string::basic_string[abi:ne180100]<0>(v225, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v225, 0, (uint64_t *)&v254);
  v227 = v254;
  if (v254)
  {
    v112 = (std::__shared_weak_count *)operator new();
    v113 = v254;
    v112->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v112->__shared_owners_ = 0;
    v112->__shared_weak_owners_ = 0;
    v112[1].__vftable = v113;
  }
  else
  {
    v112 = 0;
  }
  v228 = v112;
  v254 = 0;
  std::string::basic_string[abi:ne180100]<0>(v223, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v111 + 24))(v111, &v227, v223);
  if (v224 < 0)
    operator delete(v223[0]);
  v114 = v228;
  if (v228)
  {
    v115 = (unint64_t *)&v228->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = v254;
  v254 = 0;
  if (v117)
    (*((void (**)(std::__shared_weak_count_vtbl *))v117->~__shared_weak_count + 1))(v117);
  if (v226 < 0)
    operator delete(v225[0]);
  v118 = __p;
  std::string::basic_string[abi:ne180100]<0>(v219, "gamma");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v219, 1, (uint64_t *)&v254);
  v221 = v254;
  if (v254)
  {
    v119 = (std::__shared_weak_count *)operator new();
    v120 = v254;
    v119->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v119->__shared_owners_ = 0;
    v119->__shared_weak_owners_ = 0;
    v119[1].__vftable = v120;
  }
  else
  {
    v119 = 0;
  }
  v222 = v119;
  v254 = 0;
  std::string::basic_string[abi:ne180100]<0>(v217, "CONST_TYPE");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v118 + 24))(v118, &v221, v217);
  if (v218 < 0)
    operator delete(v217[0]);
  v121 = v222;
  if (v222)
  {
    v122 = (unint64_t *)&v222->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = v254;
  v254 = 0;
  if (v124)
    (*((void (**)(std::__shared_weak_count_vtbl *))v124->~__shared_weak_count + 1))(v124);
  if (v220 < 0)
    operator delete(v219[0]);
  v125 = __p;
  std::string::basic_string[abi:ne180100]<0>(v213, "beta");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v213, 1, (uint64_t *)&v254);
  v215 = v254;
  if (v254)
  {
    v126 = (std::__shared_weak_count *)operator new();
    v127 = v254;
    v126->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v126->__shared_owners_ = 0;
    v126->__shared_weak_owners_ = 0;
    v126[1].__vftable = v127;
  }
  else
  {
    v126 = 0;
  }
  v216 = v126;
  v254 = 0;
  std::string::basic_string[abi:ne180100]<0>(v211, "CONST_TYPE");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v125 + 24))(v125, &v215, v211);
  if (v212 < 0)
    operator delete(v211[0]);
  v128 = v216;
  if (v216)
  {
    v129 = (unint64_t *)&v216->__shared_owners_;
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v131 = v254;
  v254 = 0;
  if (v131)
    (*((void (**)(std::__shared_weak_count_vtbl *))v131->~__shared_weak_count + 1))(v131);
  if (v214 < 0)
    operator delete(v213[0]);
  v132 = __p;
  std::string::basic_string[abi:ne180100]<0>(v207, "epsilon");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v207, 0, (uint64_t *)&v254);
  v209 = v254;
  if (v254)
  {
    v133 = (std::__shared_weak_count *)operator new();
    v134 = v254;
    v133->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v133->__shared_owners_ = 0;
    v133->__shared_weak_owners_ = 0;
    v133[1].__vftable = v134;
  }
  else
  {
    v133 = 0;
  }
  v210 = v133;
  v254 = 0;
  std::string::basic_string[abi:ne180100]<0>(v205, "CONST_TYPE");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v132 + 24))(v132, &v209, v205);
  if (v206 < 0)
    operator delete(v205[0]);
  v135 = v210;
  if (v210)
  {
    v136 = (unint64_t *)&v210->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = v254;
  v254 = 0;
  if (v138)
    (*((void (**)(std::__shared_weak_count_vtbl *))v138->~__shared_weak_count + 1))(v138);
  if (v208 < 0)
    operator delete(v207[0]);
  v139 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v254);
  v203 = v254;
  if (v254)
  {
    v140 = (std::__shared_weak_count *)operator new();
    v141 = v254;
    v140->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v140->__shared_owners_ = 0;
    v140->__shared_weak_owners_ = 0;
    v140[1].__vftable = v141;
  }
  else
  {
    v140 = 0;
  }
  v204 = v140;
  v254 = 0;
  std::string::basic_string[abi:ne180100]<0>(v201, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v139 + 24))(v139, &v203, v201);
  if (v202 < 0)
    operator delete(v201[0]);
  v142 = v204;
  if (v204)
  {
    v143 = (unint64_t *)&v204->__shared_owners_;
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  v145 = v254;
  v254 = 0;
  if (v145)
    (*((void (**)(std::__shared_weak_count_vtbl *))v145->~__shared_weak_count + 1))(v145);
  v146 = *a3;
  v199 = __p;
  if (__p)
  {
    v147 = (std::__shared_weak_count *)operator new();
    v148 = (std::__shared_weak_count_vtbl *)__p;
    v147->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v147->__shared_owners_ = 0;
    v147->__shared_weak_owners_ = 0;
    v147[1].__vftable = v148;
  }
  else
  {
    v147 = 0;
  }
  v200 = v147;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v146 + 56))(v146, &v199);
  v149 = v200;
  if (v200)
  {
    v150 = (unint64_t *)&v200->__shared_owners_;
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  v152 = __p;
  __p = 0;
  if (v152)
    (*(void (**)(void *))(*(_QWORD *)v152 + 8))(v152);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&__p);
  v153 = __p;
  std::string::basic_string[abi:ne180100]<0>(v195, "axes");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v195, 0, (uint64_t *)&v254);
  v197 = v254;
  if (v254)
  {
    v154 = (std::__shared_weak_count *)operator new();
    v155 = v254;
    v154->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v154->__shared_owners_ = 0;
    v154->__shared_weak_owners_ = 0;
    v154[1].__vftable = v155;
  }
  else
  {
    v154 = 0;
  }
  v198 = v154;
  v254 = 0;
  std::string::basic_string[abi:ne180100]<0>(v193, "K");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v153 + 24))(v153, &v197, 0, v193);
  if (v194 < 0)
    operator delete(v193[0]);
  v156 = v198;
  if (v198)
  {
    v157 = (unint64_t *)&v198->__shared_owners_;
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  v159 = v254;
  v254 = 0;
  if (v159)
    (*((void (**)(std::__shared_weak_count_vtbl *))v159->~__shared_weak_count + 1))(v159);
  if (v196 < 0)
    operator delete(v195[0]);
  v160 = *a3;
  v191 = __p;
  if (__p)
  {
    v161 = (std::__shared_weak_count *)operator new();
    v162 = (std::__shared_weak_count_vtbl *)__p;
    v161->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v161->__shared_owners_ = 0;
    v161->__shared_weak_owners_ = 0;
    v161[1].__vftable = v162;
  }
  else
  {
    v161 = 0;
  }
  v192 = v161;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v160 + 56))(v160, &v191);
  v163 = v192;
  if (v192)
  {
    v164 = (unint64_t *)&v192->__shared_owners_;
    do
      v165 = __ldaxr(v164);
    while (__stlxr(v165 - 1, v164));
    if (!v165)
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v163);
    }
  }
  v166 = __p;
  __p = 0;
  if (v166)
    (*(void (**)(void *))(*(_QWORD *)v166 + 8))(v166);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v238);
  v167 = v238;
  std::string::basic_string[abi:ne180100]<0>(v187, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v187, 1, v266);
  v189 = v266[0];
  if (v266[0])
  {
    v168 = (std::__shared_weak_count *)operator new();
    v169 = v266[0];
    v168->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v168->__shared_owners_ = 0;
    v168->__shared_weak_owners_ = 0;
    v168[1].__vftable = (std::__shared_weak_count_vtbl *)v169;
  }
  else
  {
    v168 = 0;
  }
  v190 = v168;
  v266[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v250, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v251, "int32");
  std::string::basic_string[abi:ne180100]<0>(v252, "int8");
  std::string::basic_string[abi:ne180100]<0>(v253, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&v254, (unsigned __int8 *)&__p, 5);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v167 + 24))(v167, &v189, &v254, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v254);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v253[i + 2]) < 0)
      operator delete((void *)v253[i]);
  }
  v171 = v190;
  if (v190)
  {
    v172 = (unint64_t *)&v190->__shared_owners_;
    do
      v173 = __ldaxr(v172);
    while (__stlxr(v173 - 1, v172));
    if (!v173)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
  }
  v174 = v266[0];
  v266[0] = 0;
  if (v174)
    (*(void (**)(uint64_t))(*(_QWORD *)v174 + 8))(v174);
  if (v188 < 0)
    operator delete(v187[0]);
  v175 = *a3;
  v185 = v238;
  if (v238)
  {
    v176 = (std::__shared_weak_count *)operator new();
    v177 = v238;
    v176->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v176->__shared_owners_ = 0;
    v176->__shared_weak_owners_ = 0;
    v176[1].__vftable = (std::__shared_weak_count_vtbl *)v177;
  }
  else
  {
    v176 = 0;
  }
  v186 = v176;
  v238 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v175 + 56))(v175, &v185);
  v178 = v186;
  if (v186)
  {
    v179 = (unint64_t *)&v186->__shared_owners_;
    do
      v180 = __ldaxr(v179);
    while (__stlxr(v180 - 1, v179));
    if (!v180)
    {
      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
      std::__shared_weak_count::__release_weak(v178);
    }
  }
  v181 = v238;
  v238 = 0;
  if (v181)
    (*(void (**)(uint64_t))(*(_QWORD *)v181 + 8))(v181);
  if (v263)
  {
    v182 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v263);
    MEMORY[0x1E0C023A0](v182, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v240, 0);
  result = (uint64_t)v246;
  if (v246)
  {
    v184 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v246);
    return MEMORY[0x1E0C023A0](v184, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08FC42C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;

  v4 = STACK[0x230];
  STACK[0x230] = 0;
  if (v4)
    (*(void (**)(unint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 112), 0);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x240], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x298], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::LocalResponseNorm::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count_vtbl *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  unsigned __int8 *v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unsigned __int8 *v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  unsigned __int8 *v32;
  std::__shared_weak_count_vtbl *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  unsigned __int8 *v38;
  std::__shared_weak_count_vtbl *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  char **v44;
  uint64_t v45;
  std::__shared_weak_count_vtbl *v46;
  uint64_t v47;
  std::__shared_weak_count_vtbl *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t *v61;
  char *v62;
  char *v63;
  char *v64;
  __int128 v65;
  char *v66;
  char *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  char **v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  _OWORD *v86;
  unsigned __int8 *v87;
  void *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  std::__shared_weak_count_vtbl *v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count *v95;
  unint64_t *p_shared_owners;
  unint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  void *v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count_vtbl *v107;
  void *v108;
  std::__shared_weak_count *v109;
  std::__shared_weak_count_vtbl *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count_vtbl *v114;
  void *v115;
  std::__shared_weak_count *v116;
  std::__shared_weak_count_vtbl *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count_vtbl *v121;
  void *v122;
  std::__shared_weak_count *v123;
  std::__shared_weak_count_vtbl *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count_vtbl *v128;
  void *v129;
  std::__shared_weak_count *v130;
  std::__shared_weak_count_vtbl *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count_vtbl *v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  std::__shared_weak_count_vtbl *v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  void *v142;
  void *v143;
  std::__shared_weak_count *v144;
  std::__shared_weak_count_vtbl *v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count_vtbl *v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  std::__shared_weak_count_vtbl *v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  void *v156;
  void *v157;
  std::__shared_weak_count *v158;
  std::__shared_weak_count_vtbl *v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count_vtbl *v163;
  uint64_t v164;
  std::__shared_weak_count *v165;
  std::__shared_weak_count_vtbl *v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  void *v170;
  uint64_t v171;
  std::__shared_weak_count *v172;
  uint64_t v173;
  uint64_t i;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  std::__shared_weak_count *v180;
  uint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t result;
  uint64_t v188;
  uint64_t v189;
  std::__shared_weak_count *v190;
  void *v191[2];
  char v192;
  uint64_t v193;
  std::__shared_weak_count *v194;
  void *v195;
  std::__shared_weak_count *v196;
  void *v197[2];
  char v198;
  void *v199[2];
  char v200;
  std::__shared_weak_count_vtbl *v201;
  std::__shared_weak_count *v202;
  void *v203;
  std::__shared_weak_count *v204;
  void *v205[2];
  char v206;
  std::__shared_weak_count_vtbl *v207;
  std::__shared_weak_count *v208;
  void *v209;
  std::__shared_weak_count *v210;
  void *v211[2];
  char v212;
  std::__shared_weak_count_vtbl *v213;
  std::__shared_weak_count *v214;
  void *v215[2];
  char v216;
  void *v217[2];
  char v218;
  std::__shared_weak_count_vtbl *v219;
  std::__shared_weak_count *v220;
  void *v221[2];
  char v222;
  void *v223[2];
  char v224;
  std::__shared_weak_count_vtbl *v225;
  std::__shared_weak_count *v226;
  void *v227[2];
  char v228;
  void *v229[2];
  char v230;
  std::__shared_weak_count_vtbl *v231;
  std::__shared_weak_count *v232;
  void *v233[2];
  char v234;
  void *v235[2];
  char v236;
  std::__shared_weak_count_vtbl *v237;
  std::__shared_weak_count *v238;
  std::__shared_weak_count_vtbl *v239;
  std::__shared_weak_count *v240;
  __n128 v241;
  __int128 v242;
  __int128 v243;
  void *v244[2];
  uint64_t v245;
  __n128 v246;
  uint64_t v247;
  uint64_t v248;
  _QWORD *v249;
  char **v250;
  __n128 v251;
  __n128 v252;
  __n128 v253;
  __n128 v254;
  __n128 v255;
  _QWORD *v256;
  void *__p;
  uint64_t v258;
  char *v259;
  _QWORD v260[3];
  uint64_t v261[3];
  uint64_t v262[3];
  _QWORD v263[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *p_get_deleter;
  _QWORD *v266;
  _BYTE v267[24];
  _BYTE *v268;
  _BYTE v269[24];
  _BYTE *v270;
  _BYTE v271[24];
  _BYTE *v272;
  std::__shared_weak_count_vtbl *v273;
  uint64_t v274;
  void (__cdecl **v275)(std::__shared_weak_count *__hidden);
  uint64_t v276[3];

  v276[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v256 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (char *)operator new(0x18uLL);
  v259 = v10 + 24;
  *(_QWORD *)v10 = v7;
  *((_QWORD *)v10 + 1) = v8;
  *((_QWORD *)v10 + 2) = v9;
  __p = v10;
  v258 = (uint64_t)(v10 + 24);
  v273 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v14->__get_deleter;
  v266 = &v14->__get_deleter;
  v14->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v11;
  v14->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v12;
  v14->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v13;
  Scalar = v14;
  v274 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v273, 2, &v255);
  MIL::IRParameter::Make(&v255, &v248);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v248);
  v15 = v248;
  v248 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v255.n128_u64[1];
  if (v255.n128_u64[1])
  {
    v17 = (unint64_t *)(v255.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (Scalar)
  {
    p_get_deleter = Scalar;
    operator delete(Scalar);
  }
  if (__p)
  {
    v258 = (uint64_t)__p;
    operator delete(__p);
  }
  v19 = v256;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v254);
  MIL::IRParameter::Make(&v254, (uint64_t *)&__p);
  v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v19, "size", (uint64_t *)&__p);
  v21 = __p;
  __p = 0;
  if (v21)
    (*(void (**)(void *))(*(_QWORD *)v21 + 8))(v21);
  v22 = (std::__shared_weak_count *)v254.n128_u64[1];
  if (v254.n128_u64[1])
  {
    v23 = (unint64_t *)(v254.n128_u64[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v20 + 5) + 32))(*((_QWORD *)v20 + 5), 1);
  v25 = v256;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v258 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 2, &v253);
  MIL::IRParameter::Make(&v253, (uint64_t *)&Scalar);
  v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v25, "alpha", (uint64_t *)&Scalar);
  v27 = Scalar;
  Scalar = 0;
  if (v27)
    (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  v28 = (std::__shared_weak_count *)v253.n128_u64[1];
  if (v253.n128_u64[1])
  {
    v29 = (unint64_t *)(v253.n128_u64[1] + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v26 + 5) + 32))(*((_QWORD *)v26 + 5), 1);
  v31 = v256;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v258 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 2, &v252);
  MIL::IRParameter::Make(&v252, (uint64_t *)&Scalar);
  v32 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v31, "beta", (uint64_t *)&Scalar);
  v33 = Scalar;
  Scalar = 0;
  if (v33)
    (*((void (**)(std::__shared_weak_count_vtbl *))v33->~__shared_weak_count + 1))(v33);
  v34 = (std::__shared_weak_count *)v252.n128_u64[1];
  if (v252.n128_u64[1])
  {
    v35 = (unint64_t *)(v252.n128_u64[1] + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v32 + 5) + 32))(*((_QWORD *)v32 + 5), 1);
  v37 = v256;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v258 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 2, &v251);
  MIL::IRParameter::Make(&v251, (uint64_t *)&Scalar);
  v38 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v37, "k", (uint64_t *)&Scalar);
  v39 = Scalar;
  Scalar = 0;
  if (v39)
    (*((void (**)(std::__shared_weak_count_vtbl *))v39->~__shared_weak_count + 1))(v39);
  v40 = (std::__shared_weak_count *)v251.n128_u64[1];
  if (v251.n128_u64[1])
  {
    v41 = (unint64_t *)(v251.n128_u64[1] + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v38 + 5) + 32))(*((_QWORD *)v38 + 5), 1);
  v250 = 0;
  v43 = operator new();
  *(_QWORD *)v43 = 0;
  *(_QWORD *)(v43 + 8) = 0;
  *(_QWORD *)(v43 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v250, (void **)v43);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v250, 1uLL);
  v44 = v250;
  v45 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v46 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v46;
  v46->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v45;
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v46->~__shared_weak_count_0;
  v266 = &v46->~__shared_weak_count_0;
  v276[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v47 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v48 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v273 = v48;
  v48->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v47;
  v274 = (uint64_t)&v48->~__shared_weak_count_0;
  v275 = &v48->~__shared_weak_count_0;
  v276[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v273);
  MIL::IRParameter::MakeTypeSet((uint64_t)v276, 2, &v246);
  MIL::IRParameter::Make(&v246, &v247);
  v49 = v247;
  v248 = v247;
  if (v247)
  {
    v50 = (_QWORD *)operator new();
    v51 = v247;
    *v50 = &unk_1EA99F888;
    v50[1] = 0;
    v50[2] = 0;
    v50[3] = v51;
  }
  else
  {
    v50 = 0;
  }
  v249 = v50;
  v247 = 0;
  v52 = v44[2];
  v53 = v44[1];
  if (v53 >= v52)
  {
    v55 = (v53 - *v44) >> 4;
    v56 = v55 + 1;
    if ((unint64_t)(v55 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v57 = v52 - *v44;
    if (v57 >> 3 > v56)
      v56 = v57 >> 3;
    if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF0)
      v58 = 0xFFFFFFFFFFFFFFFLL;
    else
      v58 = v56;
    v260[1] = v44 + 2;
    v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v44 + 2), v58);
    v61 = (uint64_t *)&v59[16 * v55];
    *v61 = v49;
    v61[1] = (uint64_t)v50;
    v249 = 0;
    v248 = 0;
    v63 = *v44;
    v62 = v44[1];
    if (v62 == *v44)
    {
      v66 = v44[1];
      v64 = &v59[16 * v55];
    }
    else
    {
      v64 = &v59[16 * v55];
      do
      {
        v65 = *((_OWORD *)v62 - 1);
        v62 -= 16;
        *((_OWORD *)v64 - 1) = v65;
        v64 -= 16;
        *(_QWORD *)v62 = 0;
        *((_QWORD *)v62 + 1) = 0;
      }
      while (v62 != v63);
      v66 = *v44;
      v62 = v44[1];
    }
    v54 = (char *)(v61 + 2);
    *v44 = v64;
    v258 = (uint64_t)v66;
    v44[1] = (char *)(v61 + 2);
    v259 = v62;
    v67 = v44[2];
    v44[2] = &v59[16 * v60];
    v260[0] = v67;
    __p = v66;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v53 = v49;
    *((_QWORD *)v53 + 1) = v50;
    v54 = v53 + 16;
    v249 = 0;
    v248 = 0;
  }
  v44[1] = v54;
  v68 = v247;
  v247 = 0;
  if (v68)
    (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
  v69 = (std::__shared_weak_count *)v246.n128_u64[1];
  if (v246.n128_u64[1])
  {
    v70 = (unint64_t *)(v246.n128_u64[1] + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  if (v273)
  {
    v274 = (uint64_t)v273;
    operator delete(v273);
  }
  if (Scalar)
  {
    p_get_deleter = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v244 = *(_OWORD *)a2;
  v245 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v72 = (uint64_t)v256;
  *(_QWORD *)&v243 = v256;
  if (v256)
  {
    v73 = (_QWORD *)operator new();
    *v73 = &unk_1EA99F8E8;
    v73[1] = 0;
    v73[2] = 0;
    v73[3] = v72;
  }
  else
  {
    v73 = 0;
  }
  *((_QWORD *)&v243 + 1) = v73;
  v256 = 0;
  *(_QWORD *)&v242 = v250;
  if (v250)
  {
    v74 = (_QWORD *)operator new();
    v75 = v250;
    *v74 = &unk_1EA99F948;
    v74[1] = 0;
    v74[2] = 0;
    v74[3] = v75;
  }
  else
  {
    v74 = 0;
  }
  *((_QWORD *)&v242 + 1) = v74;
  v250 = 0;
  v272 = 0;
  v270 = 0;
  MIL::IROperator::Make((__int128 *)v244, &v243, &v242, (uint64_t)v271, (uint64_t)v269, a3);
  v76 = v270;
  if (v270 == v269)
  {
    v77 = 4;
    v76 = v269;
  }
  else
  {
    if (!v270)
      goto LABEL_79;
    v77 = 5;
  }
  (*(void (**)(void))(*v76 + 8 * v77))();
LABEL_79:
  v78 = v272;
  if (v272 == v271)
  {
    v79 = 4;
    v78 = v271;
    goto LABEL_83;
  }
  if (v272)
  {
    v79 = 5;
LABEL_83:
    (*(void (**)(void))(*v78 + 8 * v79))();
  }
  v80 = (std::__shared_weak_count *)*((_QWORD *)&v242 + 1);
  if (*((_QWORD *)&v242 + 1))
  {
    v81 = (unint64_t *)(*((_QWORD *)&v242 + 1) + 8);
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v83 = (std::__shared_weak_count *)*((_QWORD *)&v243 + 1);
  if (*((_QWORD *)&v243 + 1))
  {
    v84 = (unint64_t *)(*((_QWORD *)&v243 + 1) + 8);
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  if (SHIBYTE(v245) < 0)
    operator delete(v244[0]);
  v273 = 0;
  v86 = (_OWORD *)operator new();
  *v86 = 0u;
  v86[1] = 0u;
  *((_DWORD *)v86 + 8) = 1065353216;
  v273 = (std::__shared_weak_count_vtbl *)v86;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v241);
  MIL::IRParameter::Make(&v241, (uint64_t *)&__p);
  v87 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v86, "minimum_compute_type", (uint64_t *)&__p);
  v88 = __p;
  __p = 0;
  if (v88)
    (*(void (**)(void *))(*(_QWORD *)v88 + 8))(v88);
  v89 = (std::__shared_weak_count *)v241.n128_u64[1];
  if (v241.n128_u64[1])
  {
    v90 = (unint64_t *)(v241.n128_u64[1] + 8);
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v87 + 5) + 32))(*((_QWORD *)v87 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v87 + 5) + 48))(*((_QWORD *)v87 + 5), 1);
  v92 = *a3;
  v93 = v273;
  v239 = v273;
  if (v273)
  {
    v94 = (std::__shared_weak_count *)operator new();
    v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v94->__shared_owners_ = 0;
    v94->__shared_weak_owners_ = 0;
    v94[1].__vftable = v93;
  }
  else
  {
    v94 = 0;
  }
  v240 = v94;
  v273 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v92 + 184))(v92, &v239);
  v95 = v240;
  if (v240)
  {
    p_shared_owners = (unint64_t *)&v240->__shared_owners_;
    do
      v97 = __ldaxr(p_shared_owners);
    while (__stlxr(v97 - 1, p_shared_owners));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&__p, (uint64_t)v267);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v98 + 200))(v98, v267);
  v99 = v268;
  if (v268 == v267)
  {
    v100 = 4;
    v99 = v267;
  }
  else
  {
    if (!v268)
      goto LABEL_116;
    v100 = 5;
  }
  (*(void (**)(void))(*v99 + 8 * v100))();
LABEL_116:
  if (SHIBYTE(v259) < 0)
    operator delete(__p);
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v101 = __p;
  std::string::basic_string[abi:ne180100]<0>(v235, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v235, 0, (uint64_t *)&Scalar);
  v237 = Scalar;
  if (Scalar)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = Scalar;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v238 = v102;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v233, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v101 + 24))(v101, &v237, v233);
  if (v234 < 0)
    operator delete(v233[0]);
  v104 = v238;
  if (v238)
  {
    v105 = (unint64_t *)&v238->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = Scalar;
  Scalar = 0;
  if (v107)
    (*((void (**)(std::__shared_weak_count_vtbl *))v107->~__shared_weak_count + 1))(v107);
  if (v236 < 0)
    operator delete(v235[0]);
  v108 = __p;
  std::string::basic_string[abi:ne180100]<0>(v229, "alpha");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v229, 0, (uint64_t *)&Scalar);
  v231 = Scalar;
  if (Scalar)
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = Scalar;
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = v110;
  }
  else
  {
    v109 = 0;
  }
  v232 = v109;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v227, "CONST_TYPE");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v108 + 24))(v108, &v231, v227);
  if (v228 < 0)
    operator delete(v227[0]);
  v111 = v232;
  if (v232)
  {
    v112 = (unint64_t *)&v232->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = Scalar;
  Scalar = 0;
  if (v114)
    (*((void (**)(std::__shared_weak_count_vtbl *))v114->~__shared_weak_count + 1))(v114);
  if (v230 < 0)
    operator delete(v229[0]);
  v115 = __p;
  std::string::basic_string[abi:ne180100]<0>(v223, "beta");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v223, 0, (uint64_t *)&Scalar);
  v225 = Scalar;
  if (Scalar)
  {
    v116 = (std::__shared_weak_count *)operator new();
    v117 = Scalar;
    v116->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v116->__shared_owners_ = 0;
    v116->__shared_weak_owners_ = 0;
    v116[1].__vftable = v117;
  }
  else
  {
    v116 = 0;
  }
  v226 = v116;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v221, "CONST_TYPE");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v115 + 24))(v115, &v225, v221);
  if (v222 < 0)
    operator delete(v221[0]);
  v118 = v226;
  if (v226)
  {
    v119 = (unint64_t *)&v226->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  v121 = Scalar;
  Scalar = 0;
  if (v121)
    (*((void (**)(std::__shared_weak_count_vtbl *))v121->~__shared_weak_count + 1))(v121);
  if (v224 < 0)
    operator delete(v223[0]);
  v122 = __p;
  std::string::basic_string[abi:ne180100]<0>(v217, "k");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v217, 0, (uint64_t *)&Scalar);
  v219 = Scalar;
  if (Scalar)
  {
    v123 = (std::__shared_weak_count *)operator new();
    v124 = Scalar;
    v123->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v123->__shared_owners_ = 0;
    v123->__shared_weak_owners_ = 0;
    v123[1].__vftable = v124;
  }
  else
  {
    v123 = 0;
  }
  v220 = v123;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v215, "CONST_TYPE");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v122 + 24))(v122, &v219, v215);
  if (v216 < 0)
    operator delete(v215[0]);
  v125 = v220;
  if (v220)
  {
    v126 = (unint64_t *)&v220->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  v128 = Scalar;
  Scalar = 0;
  if (v128)
    (*((void (**)(std::__shared_weak_count_vtbl *))v128->~__shared_weak_count + 1))(v128);
  if (v218 < 0)
    operator delete(v217[0]);
  v129 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v213 = Scalar;
  if (Scalar)
  {
    v130 = (std::__shared_weak_count *)operator new();
    v131 = Scalar;
    v130->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v130->__shared_owners_ = 0;
    v130->__shared_weak_owners_ = 0;
    v130[1].__vftable = v131;
  }
  else
  {
    v130 = 0;
  }
  v214 = v130;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v211, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v129 + 24))(v129, &v213, v211);
  if (v212 < 0)
    operator delete(v211[0]);
  v132 = v214;
  if (v214)
  {
    v133 = (unint64_t *)&v214->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  v135 = Scalar;
  Scalar = 0;
  if (v135)
    (*((void (**)(std::__shared_weak_count_vtbl *))v135->~__shared_weak_count + 1))(v135);
  v136 = *a3;
  v209 = __p;
  if (__p)
  {
    v137 = (std::__shared_weak_count *)operator new();
    v138 = (std::__shared_weak_count_vtbl *)__p;
    v137->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v137->__shared_owners_ = 0;
    v137->__shared_weak_owners_ = 0;
    v137[1].__vftable = v138;
  }
  else
  {
    v137 = 0;
  }
  v210 = v137;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v136 + 56))(v136, &v209);
  v139 = v210;
  if (v210)
  {
    v140 = (unint64_t *)&v210->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  v142 = __p;
  __p = 0;
  if (v142)
    (*(void (**)(void *))(*(_QWORD *)v142 + 8))(v142);
  MIL::Validation::TensorRankValueConstraints::Make(&__p);
  v143 = __p;
  std::string::basic_string[abi:ne180100]<0>(v205, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v205, 0, (uint64_t *)&Scalar);
  v207 = Scalar;
  if (Scalar)
  {
    v144 = (std::__shared_weak_count *)operator new();
    v145 = Scalar;
    v144->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v144->__shared_owners_ = 0;
    v144->__shared_weak_owners_ = 0;
    v144[1].__vftable = v145;
  }
  else
  {
    v144 = 0;
  }
  v208 = v144;
  Scalar = 0;
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))(*(_QWORD *)v143 + 32))(v143, &v207, 3, 5);
  v146 = v208;
  if (v208)
  {
    v147 = (unint64_t *)&v208->__shared_owners_;
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  v149 = Scalar;
  Scalar = 0;
  if (v149)
    (*((void (**)(std::__shared_weak_count_vtbl *))v149->~__shared_weak_count + 1))(v149);
  if (v206 < 0)
    operator delete(v205[0]);
  v150 = *a3;
  v203 = __p;
  if (__p)
  {
    v151 = (std::__shared_weak_count *)operator new();
    v152 = (std::__shared_weak_count_vtbl *)__p;
    v151->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FC78;
    v151->__shared_owners_ = 0;
    v151->__shared_weak_owners_ = 0;
    v151[1].__vftable = v152;
  }
  else
  {
    v151 = 0;
  }
  v204 = v151;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v150 + 56))(v150, &v203);
  v153 = v204;
  if (v204)
  {
    v154 = (unint64_t *)&v204->__shared_owners_;
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
      std::__shared_weak_count::__release_weak(v153);
    }
  }
  v156 = __p;
  __p = 0;
  if (v156)
    (*(void (**)(void *))(*(_QWORD *)v156 + 8))(v156);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&__p);
  v157 = __p;
  std::string::basic_string[abi:ne180100]<0>(v199, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v199, 0, (uint64_t *)&Scalar);
  v201 = Scalar;
  if (Scalar)
  {
    v158 = (std::__shared_weak_count *)operator new();
    v159 = Scalar;
    v158->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v158->__shared_owners_ = 0;
    v158->__shared_weak_owners_ = 0;
    v158[1].__vftable = v159;
  }
  else
  {
    v158 = 0;
  }
  v202 = v158;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v197, "C");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v157 + 24))(v157, &v201, 1, v197);
  if (v198 < 0)
    operator delete(v197[0]);
  v160 = v202;
  if (v202)
  {
    v161 = (unint64_t *)&v202->__shared_owners_;
    do
      v162 = __ldaxr(v161);
    while (__stlxr(v162 - 1, v161));
    if (!v162)
    {
      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
      std::__shared_weak_count::__release_weak(v160);
    }
  }
  v163 = Scalar;
  Scalar = 0;
  if (v163)
    (*((void (**)(std::__shared_weak_count_vtbl *))v163->~__shared_weak_count + 1))(v163);
  if (v200 < 0)
    operator delete(v199[0]);
  v164 = *a3;
  v195 = __p;
  if (__p)
  {
    v165 = (std::__shared_weak_count *)operator new();
    v166 = (std::__shared_weak_count_vtbl *)__p;
    v165->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v165->__shared_owners_ = 0;
    v165->__shared_weak_owners_ = 0;
    v165[1].__vftable = v166;
  }
  else
  {
    v165 = 0;
  }
  v196 = v165;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v164 + 56))(v164, &v195);
  v167 = v196;
  if (v196)
  {
    v168 = (unint64_t *)&v196->__shared_owners_;
    do
      v169 = __ldaxr(v168);
    while (__stlxr(v169 - 1, v168));
    if (!v169)
    {
      ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
      std::__shared_weak_count::__release_weak(v167);
    }
  }
  v170 = __p;
  __p = 0;
  if (v170)
    (*(void (**)(void *))(*(_QWORD *)v170 + 8))(v170);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v248);
  v171 = v248;
  std::string::basic_string[abi:ne180100]<0>(v191, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v191, 1, v276);
  v193 = v276[0];
  if (v276[0])
  {
    v172 = (std::__shared_weak_count *)operator new();
    v173 = v276[0];
    v172->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v172->__shared_owners_ = 0;
    v172->__shared_weak_owners_ = 0;
    v172[1].__vftable = (std::__shared_weak_count_vtbl *)v173;
  }
  else
  {
    v172 = 0;
  }
  v194 = v172;
  v276[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v260, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v261, "int32");
  std::string::basic_string[abi:ne180100]<0>(v262, "int8");
  std::string::basic_string[abi:ne180100]<0>(v263, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 5);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v171 + 24))(v171, &v193, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v263[i + 2]) < 0)
      operator delete((void *)v263[i]);
  }
  v175 = v194;
  if (v194)
  {
    v176 = (unint64_t *)&v194->__shared_owners_;
    do
      v177 = __ldaxr(v176);
    while (__stlxr(v177 - 1, v176));
    if (!v177)
    {
      ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
      std::__shared_weak_count::__release_weak(v175);
    }
  }
  v178 = v276[0];
  v276[0] = 0;
  if (v178)
    (*(void (**)(uint64_t))(*(_QWORD *)v178 + 8))(v178);
  if (v192 < 0)
    operator delete(v191[0]);
  v179 = *a3;
  v189 = v248;
  if (v248)
  {
    v180 = (std::__shared_weak_count *)operator new();
    v181 = v248;
    v180->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v180->__shared_owners_ = 0;
    v180->__shared_weak_owners_ = 0;
    v180[1].__vftable = (std::__shared_weak_count_vtbl *)v181;
  }
  else
  {
    v180 = 0;
  }
  v190 = v180;
  v248 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v179 + 56))(v179, &v189);
  v182 = v190;
  if (v190)
  {
    v183 = (unint64_t *)&v190->__shared_owners_;
    do
      v184 = __ldaxr(v183);
    while (__stlxr(v184 - 1, v183));
    if (!v184)
    {
      ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
      std::__shared_weak_count::__release_weak(v182);
    }
  }
  v185 = v248;
  v248 = 0;
  if (v185)
    (*(void (**)(uint64_t))(*(_QWORD *)v185 + 8))(v185);
  if (v273)
  {
    v186 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v273);
    MEMORY[0x1E0C023A0](v186, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v250, 0);
  result = (uint64_t)v256;
  if (v256)
  {
    v188 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v256);
    return MEMORY[0x1E0C023A0](v188, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08FE1A8(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;

  v4 = STACK[0x270];
  STACK[0x270] = 0;
  if (v4)
    (*(void (**)(unint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 112), 0);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x280], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x2D8], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::CustomValidators::ValidateDequantize(MIL::Operators::Common::ios17::CustomValidators *this@<X0>, uint64_t a2@<X8>)
{
  MIL::IRValueType *ParameterType;
  MIL::IRTensorValueType *v6;
  MIL::IRValue *ParameterValue;
  uint64_t *v8;
  _BOOL4 IsParameterSet;
  _BOOL4 v10;
  MIL::IRValueType *v11;
  MIL::IRTensorValueType *v12;
  unsigned __int8 v13;
  _BOOL4 v14;
  _BOOL4 v15;
  const void *v16;
  unsigned int v17;
  MIL::Validation *v18;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25[2];
  void *__p;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  int v30;

  std::string::basic_string[abi:ne180100]<0>(&__p, "input");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v6 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if (SHIBYTE(v27) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "scale");
  ParameterValue = (MIL::IRValue *)MIL::IROperation::GetParameterValue(this);
  v8 = (uint64_t *)MIL::IRValue::AsTensor(ParameterValue);
  if (SHIBYTE(v27) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "zero_point");
  IsParameterSet = MIL::IROperation::IsParameterSet((uint64_t)this, (const void **)&__p);
  v10 = IsParameterSet;
  if (SHIBYTE(v27) < 0)
  {
    operator delete(__p);
    if (v10)
      goto LABEL_7;
LABEL_11:
    v12 = 0;
    v13 = 0;
    goto LABEL_12;
  }
  if (!IsParameterSet)
    goto LABEL_11;
LABEL_7:
  std::string::basic_string[abi:ne180100]<0>(&__p, "zero_point");
  v11 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v12 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v11);
  if (SHIBYTE(v27) < 0)
    operator delete(__p);
  v13 = 1;
LABEL_12:
  std::string::basic_string[abi:ne180100]<0>(&__p, "axis");
  v14 = MIL::IROperation::IsParameterSet((uint64_t)this, (const void **)&__p);
  v15 = v14;
  if (SHIBYTE(v27) < 0)
  {
    operator delete(__p);
    if (v15)
      goto LABEL_14;
LABEL_18:
    v18 = 0;
    goto LABEL_19;
  }
  if (!v14)
    goto LABEL_18;
LABEL_14:
  std::string::basic_string[abi:ne180100]<0>(&__p, "axis");
  v16 = (const void *)MIL::IROperation::GetParameterValue(this);
  v17 = MIL::IRValue::GetScalar<int>(v16);
  if (SHIBYTE(v27) < 0)
    operator delete(__p);
  v18 = (MIL::Validation *)(v17 | 0x100000000);
LABEL_19:
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v20 = (std::__shared_weak_count *)LocationPtr[1];
  v25[0] = *LocationPtr;
  v25[1] = (uint64_t)v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
  }
  if (v20)
  {
    v23 = (unint64_t *)&v20->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)&__p))
  {
    MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a2);
  }
  else
  {
    *(_OWORD *)(a2 + 8) = v27;
    v27 = 0uLL;
    *(_OWORD *)(a2 + 24) = v28;
    *(_QWORD *)(a2 + 40) = v29;
    v28 = 0uLL;
    v29 = 0;
    *(_QWORD *)a2 = &off_1EA99F170;
    *(_DWORD *)(a2 + 48) = v30;
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&__p);
}

void sub_1E08FEB0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::ValidateDequantizeInputs(MIL::IRTensorValueType *a1@<X0>, uint64_t *a2@<X1>, MIL::IRTensorValueType *a3@<X2>, unsigned __int8 a4@<W3>, MIL::Validation *a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20[2];
  void *__p[2];
  char v22;

  std::string::basic_string[abi:ne180100]<0>(__p, "dequantize");
  v14 = *a6;
  v15 = (std::__shared_weak_count *)a6[1];
  v20[0] = v14;
  v20[1] = (uint64_t)v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v22 < 0)
    operator delete(__p[0]);
}

void sub_1E08FEC48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::CustomValidators::ValidateDynamicDequantize(MIL::Operators::Common::ios17::CustomValidators *this@<X0>, uint64_t a2@<X8>)
{
  _BYTE v4[8];
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  int v8;

  MIL::Operators::Common::ios17::CustomValidators::ValidateDequantize(this, (uint64_t)v4);
  if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)v4))
  {
    MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a2);
  }
  else
  {
    *(_OWORD *)(a2 + 8) = v5;
    v5 = 0uLL;
    *(_OWORD *)(a2 + 24) = v6;
    *(_QWORD *)(a2 + 40) = v7;
    v6 = 0uLL;
    v7 = 0;
    *(_QWORD *)a2 = &off_1EA99F170;
    *(_DWORD *)(a2 + 48) = v8;
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v4);
}

void sub_1E08FECF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)va);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::CustomValidators::ValidateDynamicQuantize(MIL::Operators::Common::ios17::CustomValidators *this@<X0>, uint64_t a2@<X8>)
{
  const void *ParameterValue;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  MIL::IRValueType *ParameterType;
  MIL::IRTensorValueType *v10;
  _BOOL4 IsParameterSet;
  _BOOL4 v12;
  const void *v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  const void *v26;
  MIL::IRValueType *Type;
  MIL::IRTensorValueType *v28;
  MIL::IRValueType *v29;
  MIL::IRTensorValueType *v30;
  char v31;
  uint64_t v32;
  uint64_t *LocationPtr;
  MIL::Validation *v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46[2];
  void *v47[2];
  char v48;
  _BYTE v49[48];
  int v50;
  uint64_t v51[2];
  std::string v52;
  void *v53;
  char v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  void *__p;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  int v61;
  void *v62;
  char v63;
  uint64_t v64;

  std::string::basic_string[abi:ne180100]<0>(&__p, "has_zero_point");
  ParameterValue = (const void *)MIL::IROperation::GetParameterValue(this);
  v6 = MIL::IRValue::GetScalar<BOOL>(ParameterValue);
  if (SHIBYTE(v58) < 0)
    operator delete(__p);
  if (v6)
    v7 = 3;
  else
    v7 = 2;
  v8 = (_QWORD *)(*(uint64_t (**)(MIL::Operators::Common::ios17::CustomValidators *))(*(_QWORD *)this + 176))(this);
  if (v7 == (uint64_t)(v8[1] - *v8) >> 4)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "input");
    ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
    v10 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
    if (SHIBYTE(v58) < 0)
      operator delete(__p);
    std::string::basic_string[abi:ne180100]<0>(&__p, "axis");
    IsParameterSet = MIL::IROperation::IsParameterSet((uint64_t)this, (const void **)&__p);
    v12 = IsParameterSet;
    if (SHIBYTE(v58) < 0)
    {
      operator delete(__p);
      if (v12)
        goto LABEL_11;
    }
    else if (IsParameterSet)
    {
LABEL_11:
      std::string::basic_string[abi:ne180100]<0>(&__p, "axis");
      v13 = (const void *)MIL::IROperation::GetParameterValue(this);
      v14 = MIL::IRValue::GetScalar<int>(v13);
      LOBYTE(v12) = v14;
      v15 = v14 & 0xFFFFFF00;
      if (SHIBYTE(v58) < 0)
        operator delete(__p);
      v16 = 0x100000000;
      goto LABEL_29;
    }
    v16 = 0;
    v15 = 0;
LABEL_29:
    std::string::basic_string[abi:ne180100]<0>(&__p, "output_dtype");
    v26 = (const void *)MIL::IROperation::GetParameterValue(this);
    MIL::IRValue::GetScalar<std::string>(v26, &v52);
    if (SHIBYTE(v58) < 0)
      operator delete(__p);
    if (v8[1] - *v8 <= 0x10uLL)
      std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
    Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(*(MIL::IRNamedValueType **)(*v8 + 16));
    v28 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(Type);
    if (v6)
    {
      if (v8[1] - *v8 <= 0x20uLL)
        std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
      v29 = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(*(MIL::IRNamedValueType **)(*v8 + 32));
      v30 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v29);
      v31 = 1;
    }
    else
    {
      v30 = 0;
      v31 = 0;
    }
    v32 = (*(uint64_t (**)(MIL::Operators::Common::ios17::CustomValidators *))(*(_QWORD *)this + 56))(this);
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v34 = (MIL::Validation *)(v16 | v15 | v12);
    v35 = (std::__shared_weak_count *)LocationPtr[1];
    v51[0] = *LocationPtr;
    v51[1] = (uint64_t)v35;
    if (v35)
    {
      p_shared_owners = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldxr(p_shared_owners);
      while (__stxr(v37 + 1, p_shared_owners));
    }
    if (v35)
    {
      v38 = (unint64_t *)&v35->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)&__p))
      goto LABEL_57;
    std::string::basic_string[abi:ne180100]<0>(v47, "dynamic_quantize");
    v40 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v41 = (std::__shared_weak_count *)v40[1];
    v46[0] = *v40;
    v46[1] = (uint64_t)v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    MIL::MILResult::operator=((uint64_t)&__p, (uint64_t)v49);
    v61 = v50;
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v49);
    if (v41)
    {
      v44 = (unint64_t *)&v41->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    if (v48 < 0)
      operator delete(v47[0]);
    if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)&__p))
    {
      MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a2);
    }
    else
    {
LABEL_57:
      *(_OWORD *)(a2 + 8) = v58;
      v58 = 0uLL;
      *(_OWORD *)(a2 + 24) = v59;
      *(_QWORD *)(a2 + 40) = v60;
      v59 = 0uLL;
      v60 = 0;
      *(_QWORD *)a2 = &off_1EA99F170;
      *(_DWORD *)(a2 + 48) = v61;
    }
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&__p);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
    return;
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"The length of outputs(", 22);
  v17 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)") does not match the expected(", 30);
  v18 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)")", 1);
  v19 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v20 = (std::__shared_weak_count *)v19[1];
  v55 = *v19;
  v56 = v20;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  std::stringbuf::str();
  MIL::ValidationResult::ValidationResult(a2, &v55, 310, &v53);
  if (v54 < 0)
    operator delete(v53);
  v23 = v56;
  if (v56)
  {
    v24 = (unint64_t *)&v56->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  __p = (void *)*MEMORY[0x1E0DE4F60];
  *(void **)((char *)&__p + *((_QWORD *)__p - 3)) = *(void **)(MEMORY[0x1E0DE4F60] + 24);
  *(_QWORD *)&v58 = MEMORY[0x1E0DE4FB8] + 16;
  if (v63 < 0)
    operator delete(v62);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1E0C022F8](&v64);
}

void sub_1E08FF230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a40);
  if (a31 < 0)
    operator delete(a26);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::ValidateCommonInputTypes(MIL::IRTensorValueType *this@<X1>, MIL::IRTensorValueType *a2@<X0>, MIL::IRTensorValueType *a3@<X2>, unsigned __int8 a4@<W3>, MIL::Validation *a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, MIL::ValidationResult *a8@<X8>)
{
  int v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::string *v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::string *v28;
  __int128 v29;
  unint64_t *v30;
  int v31;
  MIL::IRDimension *v32;
  MIL::IRDimension *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::string *v37;
  __int128 v38;
  uint64_t v39;
  const std::string::value_type *v40;
  std::string::size_type v41;
  std::string *v42;
  __int128 v43;
  std::string *v44;
  __int128 v45;
  uint64_t v46;
  const std::string::value_type *v47;
  std::string::size_type v48;
  std::string *v49;
  __int128 v50;
  unint64_t *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::string *v55;
  __int128 v56;
  unint64_t *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::string *v61;
  __int128 v62;
  unint64_t *v63;
  MIL::IRDimension *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::string *v68;
  __int128 v69;
  uint64_t v70;
  const std::string::value_type *v71;
  std::string::size_type v72;
  std::string *v73;
  __int128 v74;
  std::string *v75;
  __int128 v76;
  uint64_t v77;
  const std::string::value_type *v78;
  std::string::size_type v79;
  std::string *v80;
  __int128 v81;
  unint64_t *v82;
  _QWORD *v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  void *v95[2];
  std::string::size_type v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  void *v99;
  std::string::size_type v100;
  unsigned __int8 v101;
  void *v102;
  std::string::size_type v103;
  unsigned __int8 v104;
  std::string v105;
  std::string v106;
  std::string v107;
  void *__p[2];
  std::string::size_type v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  void *v112;
  char v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  std::string v116;
  void *v117;
  char v118;
  uint64_t v119;
  void *v120[2];
  std::string::size_type v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  __int128 v124;
  std::string::size_type v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  __int128 v128;
  std::string::size_type v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  __int128 v132;
  std::string::size_type v133;
  uint64_t v134;
  std::__shared_weak_count *v135;

  v15 = BYTE4(a5);
  v16 = a4;
  if (!MIL::IRTensorValueType::IsScalar(this))
  {
    if (v16 && MIL::IRTensorValueType::IsScalar(a3))
    {
      v25 = (std::__shared_weak_count *)a7[1];
      v126 = *a7;
      v127 = v25;
      if (v25)
      {
        p_shared_owners = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldxr(p_shared_owners);
        while (__stxr(v27 + 1, p_shared_owners));
      }
      std::operator+<char>();
      v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v125 = v28->__r_.__value_.__r.__words[2];
      v124 = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      MIL::ValidationResult::ValidationResult(a8, &v126, 315, &v124);
      if (SHIBYTE(v125) < 0)
        operator delete((void *)v124);
      if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v116.__r_.__value_.__l.__data_);
      v22 = v127;
      if (v127)
      {
        v30 = (unint64_t *)&v127->__shared_owners_;
        do
          v24 = __ldaxr(v30);
        while (__stlxr(v24 - 1, v30));
        goto LABEL_88;
      }
      return;
    }
    if (!v15)
    {
      v58 = (std::__shared_weak_count *)a7[1];
      v122 = *a7;
      v123 = v58;
      if (v58)
      {
        v59 = (unint64_t *)&v58->__shared_owners_;
        do
          v60 = __ldxr(v59);
        while (__stxr(v60 + 1, v59));
      }
      std::operator+<char>();
      v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
      v121 = v61->__r_.__value_.__r.__words[2];
      *(_OWORD *)v120 = v62;
      v61->__r_.__value_.__l.__size_ = 0;
      v61->__r_.__value_.__r.__words[2] = 0;
      v61->__r_.__value_.__r.__words[0] = 0;
      MIL::ValidationResult::ValidationResult(a8, &v122, 315, v120);
      if (SHIBYTE(v121) < 0)
        operator delete(v120[0]);
      if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v116.__r_.__value_.__l.__data_);
      v22 = v123;
      if (v123)
      {
        v63 = (unint64_t *)&v123->__shared_owners_;
        do
          v24 = __ldaxr(v63);
        while (__stlxr(v24 - 1, v63));
        goto LABEL_88;
      }
      return;
    }
    v31 = MIL::IRTensorValueType::Rank(a2);
    if ((*(unsigned int (**)(MIL::IRTensorValueType *))(*(_QWORD *)a2 + 104))(a2)
      && !MIL::Validation::IsAxisValidForRank(a5, v31))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v116);
      v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v116, (uint64_t)"For operator: ", 14);
      v84 = *(char *)(a6 + 23);
      if (v84 >= 0)
        v85 = a6;
      else
        v85 = *(_QWORD *)a6;
      if (v84 >= 0)
        v86 = *(unsigned __int8 *)(a6 + 23);
      else
        v86 = *(_QWORD *)(a6 + 8);
      v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, v85, v86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)", 'axis' must be within range (-data_rank - 1, data_rank) (exclusive). Provided axis: ", 86);
      v88 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"for input 'data' with rank: ", 28);
      std::ostream::operator<<();
      v89 = (std::__shared_weak_count *)a7[1];
      v114 = *a7;
      v115 = v89;
      if (v89)
      {
        v90 = (unint64_t *)&v89->__shared_owners_;
        do
          v91 = __ldxr(v90);
        while (__stxr(v91 + 1, v90));
      }
      std::stringbuf::str();
      MIL::ValidationResult::ValidationResult(a8, &v114, 315, &v112);
      if (v113 < 0)
        operator delete(v112);
      v92 = v115;
      if (v115)
      {
        v93 = (unint64_t *)&v115->__shared_owners_;
        do
          v94 = __ldaxr(v93);
        while (__stlxr(v94 - 1, v93));
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
        }
      }
      v116.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F60];
      *(std::string::size_type *)((char *)v116.__r_.__value_.__r.__words
                                + *(_QWORD *)(v116.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v116.__r_.__value_.__l.__size_ = MEMORY[0x1E0DE4FB8] + 16;
      if (v118 < 0)
        operator delete(v117);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1E0C022F8](&v119);
      return;
    }
    v32 = **(MIL::IRDimension ***)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)this + 96))(this);
    if (v16)
    {
      v33 = **(MIL::IRDimension ***)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)a3 + 96))(a3);
      if (v33 != v32)
      {
        v34 = (std::__shared_weak_count *)a7[1];
        v110 = *a7;
        v111 = v34;
        if (v34)
        {
          v35 = (unint64_t *)&v34->__shared_owners_;
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
        }
        std::operator+<char>();
        v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
        v106.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v38;
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v37->__r_.__value_.__r.__words[0] = 0;
        v39 = MIL::IRDimension::AsConstant(v32);
        (*(void (**)(void **__return_ptr))(*(_QWORD *)v39 + 40))(&v102);
        if ((v104 & 0x80u) == 0)
          v40 = (const std::string::value_type *)&v102;
        else
          v40 = (const std::string::value_type *)v102;
        if ((v104 & 0x80u) == 0)
          v41 = v104;
        else
          v41 = v103;
        v42 = std::string::append(&v106, v40, v41);
        v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
        v107.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v43;
        v42->__r_.__value_.__l.__size_ = 0;
        v42->__r_.__value_.__r.__words[2] = 0;
        v42->__r_.__value_.__r.__words[0] = 0;
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v116.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        v46 = MIL::IRDimension::AsConstant(v33);
        (*(void (**)(void **__return_ptr))(*(_QWORD *)v46 + 40))(&v99);
        if ((v101 & 0x80u) == 0)
          v47 = (const std::string::value_type *)&v99;
        else
          v47 = (const std::string::value_type *)v99;
        if ((v101 & 0x80u) == 0)
          v48 = v101;
        else
          v48 = v100;
        v49 = std::string::append(&v116, v47, v48);
        v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
        v109 = v49->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v50;
        v49->__r_.__value_.__l.__size_ = 0;
        v49->__r_.__value_.__r.__words[2] = 0;
        v49->__r_.__value_.__r.__words[0] = 0;
        MIL::ValidationResult::ValidationResult(a8, &v110, 315, __p);
        if (SHIBYTE(v109) < 0)
          operator delete(__p[0]);
        if ((char)v101 < 0)
          operator delete(v99);
        if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v116.__r_.__value_.__l.__data_);
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v107.__r_.__value_.__l.__data_);
        if ((char)v104 < 0)
          operator delete(v102);
        if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v106.__r_.__value_.__l.__data_);
        if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v105.__r_.__value_.__l.__data_);
        v22 = v111;
        if (v111)
        {
          v51 = (unint64_t *)&v111->__shared_owners_;
          do
            v24 = __ldaxr(v51);
          while (__stlxr(v24 - 1, v51));
          goto LABEL_88;
        }
        return;
      }
    }
    if ((*(unsigned int (**)(MIL::IRTensorValueType *))(*(_QWORD *)a2 + 104))(a2))
    {
      v64 = *(MIL::IRDimension **)(*(_QWORD *)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)a2 + 96))(a2)
                                 + 8 * ((v31 & ((int)a5 >> 31)) + (int)a5));
      if (v64 != v32)
      {
        v65 = (std::__shared_weak_count *)a7[1];
        v97 = *a7;
        v98 = v65;
        if (v65)
        {
          v66 = (unint64_t *)&v65->__shared_owners_;
          do
            v67 = __ldxr(v66);
          while (__stxr(v67 + 1, v66));
        }
        std::operator+<char>();
        v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
        v106.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v69;
        v68->__r_.__value_.__l.__size_ = 0;
        v68->__r_.__value_.__r.__words[2] = 0;
        v68->__r_.__value_.__r.__words[0] = 0;
        v70 = MIL::IRDimension::AsConstant(v32);
        (*(void (**)(void **__return_ptr))(*(_QWORD *)v70 + 40))(&v102);
        if ((v104 & 0x80u) == 0)
          v71 = (const std::string::value_type *)&v102;
        else
          v71 = (const std::string::value_type *)v102;
        if ((v104 & 0x80u) == 0)
          v72 = v104;
        else
          v72 = v103;
        v73 = std::string::append(&v106, v71, v72);
        v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
        v107.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v74;
        v73->__r_.__value_.__l.__size_ = 0;
        v73->__r_.__value_.__r.__words[2] = 0;
        v73->__r_.__value_.__r.__words[0] = 0;
        v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
        v116.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v76;
        v75->__r_.__value_.__l.__size_ = 0;
        v75->__r_.__value_.__r.__words[2] = 0;
        v75->__r_.__value_.__r.__words[0] = 0;
        v77 = MIL::IRDimension::AsConstant(v64);
        (*(void (**)(void **__return_ptr))(*(_QWORD *)v77 + 40))(&v99);
        if ((v101 & 0x80u) == 0)
          v78 = (const std::string::value_type *)&v99;
        else
          v78 = (const std::string::value_type *)v99;
        if ((v101 & 0x80u) == 0)
          v79 = v101;
        else
          v79 = v100;
        v80 = std::string::append(&v116, v78, v79);
        v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
        v96 = v80->__r_.__value_.__r.__words[2];
        *(_OWORD *)v95 = v81;
        v80->__r_.__value_.__l.__size_ = 0;
        v80->__r_.__value_.__r.__words[2] = 0;
        v80->__r_.__value_.__r.__words[0] = 0;
        MIL::ValidationResult::ValidationResult(a8, &v97, 315, v95);
        if (SHIBYTE(v96) < 0)
          operator delete(v95[0]);
        if ((char)v101 < 0)
          operator delete(v99);
        if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v116.__r_.__value_.__l.__data_);
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v107.__r_.__value_.__l.__data_);
        if ((char)v104 < 0)
          operator delete(v102);
        if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v106.__r_.__value_.__l.__data_);
        if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v105.__r_.__value_.__l.__data_);
        v22 = v98;
        if (v98)
        {
          v82 = (unint64_t *)&v98->__shared_owners_;
          do
            v24 = __ldaxr(v82);
          while (__stlxr(v24 - 1, v82));
          goto LABEL_88;
        }
        return;
      }
    }
    goto LABEL_125;
  }
  if (!v16 || MIL::IRTensorValueType::IsScalar(a3))
  {
    if (v15)
    {
      v17 = (std::__shared_weak_count *)a7[1];
      v130 = *a7;
      v131 = v17;
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      std::operator+<char>();
      v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      v129 = v20->__r_.__value_.__r.__words[2];
      v128 = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      MIL::ValidationResult::ValidationResult(a8, &v130, 315, &v128);
      if (SHIBYTE(v129) < 0)
        operator delete((void *)v128);
      if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v116.__r_.__value_.__l.__data_);
      v22 = v131;
      if (v131)
      {
        v23 = (unint64_t *)&v131->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
LABEL_88:
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
        return;
      }
      return;
    }
LABEL_125:
    MIL::ValidationResult::ValidationResult(a8);
    return;
  }
  v52 = (std::__shared_weak_count *)a7[1];
  v134 = *a7;
  v135 = v52;
  if (v52)
  {
    v53 = (unint64_t *)&v52->__shared_owners_;
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
  }
  std::operator+<char>();
  v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
  v133 = v55->__r_.__value_.__r.__words[2];
  v132 = v56;
  v55->__r_.__value_.__l.__size_ = 0;
  v55->__r_.__value_.__r.__words[2] = 0;
  v55->__r_.__value_.__r.__words[0] = 0;
  MIL::ValidationResult::ValidationResult(a8, &v134, 315, &v132);
  if (SHIBYTE(v133) < 0)
    operator delete((void *)v132);
  if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v116.__r_.__value_.__l.__data_);
  v22 = v135;
  if (v135)
  {
    v57 = (unint64_t *)&v135->__shared_owners_;
    do
      v24 = __ldaxr(v57);
    while (__stlxr(v24 - 1, v57));
    goto LABEL_88;
  }
}

void sub_1E08FFC38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;

  if (a14 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  if (a64 < 0)
    operator delete(a59);
  if (a47 < 0)
    operator delete(a42);
  if (a28 < 0)
    operator delete(a23);
  if (a40 < 0)
    operator delete(a35);
  if (a34 < 0)
    operator delete(a29);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

MIL::MILResult *`anonymous namespace'::ValidateOuputDtypeAndZeroPointTypes@<X0>(uint64_t a1@<X0>, char a2@<W1>, const void **a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, MIL::ValidationResult *a6@<X8>)
{
  int v10;
  size_t v11;
  const void *v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  int v16;
  int v17;
  void *v19;
  int v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  void **v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  void *v42;
  char v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  void *v46[2];
  unsigned __int8 v47;
  void *__p;
  size_t __n;
  unsigned __int8 v50;
  void *v51;
  char v52;
  uint64_t v53;

  if (!a2)
    return MIL::ValidationResult::ValidationResult(a6);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  MIL::IRDataTypeToString(v10, &__p);
  if ((v50 & 0x80u) == 0)
    v11 = v50;
  else
    v11 = __n;
  v12 = (const void *)*((unsigned __int8 *)a3 + 23);
  v13 = (char)v12;
  if ((char)v12 < 0)
    v12 = a3[1];
  if ((const void *)v11 != v12)
  {
    if ((v50 & 0x80) != 0)
      operator delete(__p);
    goto LABEL_24;
  }
  if (v13 >= 0)
    v14 = (unsigned __int8 *)a3;
  else
    v14 = (unsigned __int8 *)*a3;
  if ((v50 & 0x80) != 0)
  {
    v19 = __p;
    v20 = memcmp(__p, v14, __n);
    operator delete(v19);
    if (v20)
      goto LABEL_24;
    return MIL::ValidationResult::ValidationResult(a6);
  }
  if (!v50)
    return MIL::ValidationResult::ValidationResult(a6);
  v15 = 0;
  do
  {
    v16 = *((unsigned __int8 *)&__p + v15);
    v17 = v14[v15];
  }
  while (v16 == v17 && v50 - 1 != v15++);
  if (v16 == v17)
    return MIL::ValidationResult::ValidationResult(a6);
LABEL_24:
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
  v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"For operator: ", 14);
  v22 = *(char *)(a4 + 23);
  if (v22 >= 0)
    v23 = a4;
  else
    v23 = *(_QWORD *)a4;
  if (v22 >= 0)
    v24 = *(unsigned __int8 *)(a4 + 23);
  else
    v24 = *(_QWORD *)(a4 + 8);
  v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v23, v24);
  v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)", zero_point (", 14);
  MIL::IRDataTypeToString(v10, v46);
  if ((v47 & 0x80u) == 0)
    v27 = v46;
  else
    v27 = (void **)v46[0];
  if ((v47 & 0x80u) == 0)
    v28 = v47;
  else
    v28 = (uint64_t)v46[1];
  v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v27, v28);
  v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)") and output_dtype (", 20);
  v31 = *((char *)a3 + 23);
  if (v31 >= 0)
    v32 = (uint64_t)a3;
  else
    v32 = (uint64_t)*a3;
  if (v31 >= 0)
    v33 = *((unsigned __int8 *)a3 + 23);
  else
    v33 = (uint64_t)a3[1];
  v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, v32, v33);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)") do not have consistent data types.", 36);
  if ((char)v47 < 0)
    operator delete(v46[0]);
  v35 = (std::__shared_weak_count *)a5[1];
  v44 = *a5;
  v45 = v35;
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldxr(p_shared_owners);
    while (__stxr(v37 + 1, p_shared_owners));
  }
  std::stringbuf::str();
  MIL::ValidationResult::ValidationResult(a6, &v44, 315, &v42);
  if (v43 < 0)
    operator delete(v42);
  v38 = v45;
  if (v45)
  {
    v39 = (unint64_t *)&v45->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  __p = (void *)*MEMORY[0x1E0DE4F60];
  *(void **)((char *)&__p + *((_QWORD *)__p - 3)) = *(void **)(MEMORY[0x1E0DE4F60] + 24);
  __n = MEMORY[0x1E0DE4FB8] + 16;
  if (v52 < 0)
    operator delete(v51);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (MIL::MILResult *)MEMORY[0x1E0C022F8](&v53);
}

void sub_1E0900198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::ostringstream::~ostringstream((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::CustomValidators::ValidateQuantize(MIL::Operators::Common::ios17::CustomValidators *this@<X0>, uint64_t a2@<X8>)
{
  MIL::IRValueType *ParameterType;
  MIL::IRTensorValueType *v6;
  MIL::IRValue *ParameterValue;
  uint64_t *v8;
  _BOOL4 IsParameterSet;
  _BOOL4 v10;
  MIL::IRValueType *v11;
  MIL::IRTensorValueType *v12;
  char v13;
  _BOOL4 v14;
  _BOOL4 v15;
  const void *v16;
  int v17;
  unsigned __int8 v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  const void *v22;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29[2];
  void *__p;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  std::string v35;

  std::string::basic_string[abi:ne180100]<0>(&__p, "input");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v6 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if (SHIBYTE(v31) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "scale");
  ParameterValue = (MIL::IRValue *)MIL::IROperation::GetParameterValue(this);
  v8 = (uint64_t *)MIL::IRValue::AsTensor(ParameterValue);
  if (SHIBYTE(v31) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "zero_point");
  IsParameterSet = MIL::IROperation::IsParameterSet((uint64_t)this, (const void **)&__p);
  v10 = IsParameterSet;
  if (SHIBYTE(v31) < 0)
  {
    operator delete(__p);
    if (v10)
      goto LABEL_7;
LABEL_11:
    v12 = 0;
    v13 = 0;
    goto LABEL_12;
  }
  if (!IsParameterSet)
    goto LABEL_11;
LABEL_7:
  std::string::basic_string[abi:ne180100]<0>(&__p, "zero_point");
  v11 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v12 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v11);
  if (SHIBYTE(v31) < 0)
    operator delete(__p);
  v13 = 1;
LABEL_12:
  std::string::basic_string[abi:ne180100]<0>(&__p, "axis");
  v14 = MIL::IROperation::IsParameterSet((uint64_t)this, (const void **)&__p);
  v15 = v14;
  if (SHIBYTE(v31) < 0)
  {
    operator delete(__p);
    if (v15)
      goto LABEL_14;
LABEL_18:
    v21 = 0;
    v20 = 0;
    v19 = 0;
    goto LABEL_19;
  }
  if (!v14)
    goto LABEL_18;
LABEL_14:
  std::string::basic_string[abi:ne180100]<0>(&__p, "axis");
  v16 = (const void *)MIL::IROperation::GetParameterValue(this);
  v17 = MIL::IRValue::GetScalar<int>(v16);
  v18 = v17;
  v19 = v17 & 0xFFFFFF00;
  if (SHIBYTE(v31) < 0)
    operator delete(__p);
  v20 = v18;
  v21 = 0x100000000;
LABEL_19:
  std::string::basic_string[abi:ne180100]<0>(&__p, "output_dtype");
  v22 = (const void *)MIL::IROperation::GetParameterValue(this);
  MIL::IRValue::GetScalar<std::string>(v22, &v35);
  if (SHIBYTE(v31) < 0)
    operator delete(__p);
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v24 = (std::__shared_weak_count *)LocationPtr[1];
  v29[0] = *LocationPtr;
  v29[1] = (uint64_t)v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(p_shared_owners);
    while (__stxr(v26 + 1, p_shared_owners));
  }
  if (v24)
  {
    v27 = (unint64_t *)&v24->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)&__p))
  {
    MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a2);
  }
  else
  {
    *(_OWORD *)(a2 + 8) = v31;
    v31 = 0uLL;
    *(_OWORD *)(a2 + 24) = v32;
    *(_QWORD *)(a2 + 40) = v33;
    v32 = 0uLL;
    v33 = 0;
    *(_QWORD *)a2 = &off_1EA99F170;
    *(_DWORD *)(a2 + 48) = v34;
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&__p);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
}

void sub_1E09004DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::ValidateQuantizeInputs(MIL::IRTensorValueType *a1@<X0>, uint64_t *a2@<X1>, MIL::IRTensorValueType *a3@<X2>, char a4@<W3>, MIL::Validation *a5@<X4>, const void **a6@<X5>, uint64_t *a7@<X6>, uint64_t a8@<X8>)
{
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27[2];
  void *v28[2];
  char v29;
  void *__p[2];
  char v31;
  int v32;
  uint64_t v33[2];
  _BYTE v34[8];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  int v38;

  std::string::basic_string[abi:ne180100]<0>(__p, "quantize");
  v16 = (std::__shared_weak_count *)a7[1];
  v33[0] = *a7;
  v33[1] = (uint64_t)v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  if (v16)
  {
    v19 = (unint64_t *)&v16->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v31 < 0)
    operator delete(__p[0]);
  if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)v34))
    goto LABEL_24;
  std::string::basic_string[abi:ne180100]<0>(v28, "quantize");
  v21 = *a7;
  v22 = (std::__shared_weak_count *)a7[1];
  v27[0] = v21;
  v27[1] = (uint64_t)v22;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  MIL::MILResult::operator=((uint64_t)v34, (uint64_t)__p);
  v38 = v32;
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)__p);
  if (v22)
  {
    v25 = (unint64_t *)&v22->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (v29 < 0)
    operator delete(v28[0]);
  if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)v34))
  {
    MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a8);
  }
  else
  {
LABEL_24:
    *(_OWORD *)(a8 + 8) = v35;
    v35 = 0uLL;
    *(_OWORD *)(a8 + 24) = v36;
    *(_QWORD *)(a8 + 40) = v37;
    v36 = 0uLL;
    v37 = 0;
    *(_QWORD *)a8 = &off_1EA99F170;
    *(_DWORD *)(a8 + 48) = v38;
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v34);
}

void sub_1E0900754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,char a30)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a17 < 0)
    operator delete(__p);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a30);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceDequantize(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  MIL::IRValueType *SingleValueType;
  MIL::IRTensorValueType *v9;
  MIL::IRValue *SingleValue;
  uint64_t *v11;
  unsigned __int8 *v12;
  MIL::IRTensorValueType *v13;
  MIL::IRValueType *v14;
  unsigned __int8 v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  const void *v18;
  int v19;
  unsigned __int8 v20;
  uint64_t v21;
  MIL::Validation *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t *v33;
  void *exception;
  void *v35;
  void *v36;
  uint64_t v37;
  std::string v38[2];
  int v39;
  uint64_t v40[2];
  void *__p[2];
  char v42;
  int v43;

  std::string::basic_string[abi:ne180100]<0>(__p, "input");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  v9 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(SingleValueType);
  if (v42 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "scale");
  SingleValue = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::TryGetSingleValue(a3, (uint64_t)__p);
  v11 = (uint64_t *)MIL::IRValue::AsTensor(SingleValue);
  if (v42 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "zero_point");
  v12 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  v13 = (MIL::IRTensorValueType *)v12;
  if (v42 < 0)
  {
    operator delete(__p[0]);
    if (v13)
      goto LABEL_7;
LABEL_11:
    v15 = 0;
    goto LABEL_12;
  }
  if (!v12)
    goto LABEL_11;
LABEL_7:
  std::string::basic_string[abi:ne180100]<0>(__p, "zero_point");
  v14 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  v13 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v14);
  if (v42 < 0)
    operator delete(__p[0]);
  v15 = 1;
LABEL_12:
  std::string::basic_string[abi:ne180100]<0>(__p, "axis");
  v16 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  v17 = v16;
  if (v42 < 0)
  {
    operator delete(__p[0]);
    if (v17)
      goto LABEL_14;
LABEL_18:
    v21 = 0;
    v20 = 0;
    goto LABEL_19;
  }
  if (!v16)
    goto LABEL_18;
LABEL_14:
  std::string::basic_string[abi:ne180100]<0>(__p, "axis");
  v18 = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)__p);
  v19 = MIL::IRValue::GetScalar<int>(v18);
  v20 = v19;
  LODWORD(v17) = v19 & 0xFFFFFF00;
  if (v42 < 0)
    operator delete(__p[0]);
  v21 = 0x100000000;
LABEL_19:
  v22 = (MIL::Validation *)(v21 | v17 | v20);
  v23 = *a2;
  v24 = (std::__shared_weak_count *)a2[1];
  v40[0] = v23;
  v40[1] = (uint64_t)v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(p_shared_owners);
    while (__stxr(v26 + 1, p_shared_owners));
  }
  if (v24)
  {
    v27 = (unint64_t *)&v24->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)__p))
  {
    exception = __cxa_allocate_exception(0x48uLL);
    MIL::MILResult::MILResult(v38, (uint64_t)__p);
    v38[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA99F170;
    v39 = v43;
    MIL::ValidationError::ValidationError(exception, v38);
  }
  v29 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v9 + 96))(v9);
  v35 = 0;
  v36 = 0;
  v37 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v35, *(const void **)v29, *(_QWORD *)(v29 + 8), (uint64_t)(*(_QWORD *)(v29 + 8) - *(_QWORD *)v29) >> 3);
  v30 = (*(uint64_t (**)(uint64_t *))(*v11 + 32))(v11);
  v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 88))(v30);
  v32 = MIL::IRTensorValueType::MakeWithShape(*a1, v31, (uint64_t)&v35);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v33 = (uint64_t *)operator new(8uLL);
  *a4 = v33;
  *v33++ = v32;
  a4[1] = v33;
  a4[2] = v33;
  if (v35)
  {
    v36 = v35;
    operator delete(v35);
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)__p);
}

void sub_1E0900ACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a13);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a22);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceDynamicDequantize(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9[2];

  v4 = (std::__shared_weak_count *)a2[1];
  v9[0] = *a2;
  v9[1] = (uint64_t)v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceDequantize(a1, v9, a3, a4);
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1E0900BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceDynamicQuantize(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  MIL::IRValueType *SingleValueType;
  uint64_t v9;
  const void *SingleValue;
  char v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  const void *v14;
  MIL::Validation *v15;
  const void *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _BYTE *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  void *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  std::logic_error *exception;
  void *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  char *v47;
  char *v48;
  _QWORD v49[3];
  _QWORD v50[2];
  _BYTE v51[56];
  std::string v52;
  void *__p;
  _BYTE *v54;
  uint64_t v55;
  std::string v56;

  std::string::basic_string[abi:ne180100]<0>(&__p, "input");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&__p);
  v9 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(v55) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "has_zero_point");
  SingleValue = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&__p);
  v11 = MIL::IRValue::GetScalar<BOOL>(SingleValue);
  if (SHIBYTE(v55) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "axis");
  v12 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)&__p);
  v13 = v12;
  if ((SHIBYTE(v55) & 0x80000000) == 0)
  {
    if (v12)
      goto LABEL_7;
LABEL_10:
    v15 = 0;
    goto LABEL_11;
  }
  operator delete(__p);
  if (!v13)
    goto LABEL_10;
LABEL_7:
  std::string::basic_string[abi:ne180100]<0>(&__p, "axis");
  v14 = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&__p);
  v15 = (MIL::Validation *)MIL::IRValue::GetScalar<int>(v14);
  if (SHIBYTE(v55) < 0)
    operator delete(__p);
LABEL_11:
  std::string::basic_string[abi:ne180100]<0>(&__p, "output_dtype");
  v16 = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&__p);
  MIL::IRValue::GetScalar<std::string>(v16, &v56);
  if (SHIBYTE(v55) < 0)
  {
    operator delete(__p);
    if (!v13)
      goto LABEL_16;
  }
  else if (!v13)
  {
    goto LABEL_16;
  }
  v17 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 96))(v9);
  if (!MIL::Validation::IsAxisValidForRank(v15, (v17[1] - *v17) >> 3))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Axis must be within range (-input_ndim - 1, input_ndim) (exclusive). Invalid axis: ", 83);
    v41 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" for input_ndim: ", 17);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 96))(v9);
    std::ostream::operator<<();
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::logic_error::logic_error(exception, &v52);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
LABEL_16:
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 96))(v9);
  __p = 0;
  v54 = 0;
  v55 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v18, *(_QWORD *)(v18 + 8), (uint64_t)(*(_QWORD *)(v18 + 8) - *(_QWORD *)v18) >> 3);
  if (MIL::ValueTypeInferenceUtils::ShapeHasVariadicUnknownDims((uint64_t)&__p))
  {
    v37 = __cxa_allocate_exception(0x48uLL);
    v38 = a2[1];
    v50[0] = *a2;
    v50[1] = v38;
    if (v38)
    {
      v39 = (unint64_t *)(v38 + 8);
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    std::string::basic_string[abi:ne180100]<0>(v49, "Variadic shape is not supported for dynamic_quantization type inference.");
    MIL::ValidationResult::ValidationResult(v51, v50, 315, v49);
    MIL::ValidationError::ValidationError(v37, v51);
  }
  memset(&v52, 0, sizeof(v52));
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v52, __p, (uint64_t)v54, (v54 - (_BYTE *)__p) >> 3);
  v46 = 0;
  v47 = 0;
  v48 = 0;
  if (v13)
  {
    v19 = __p;
    v20 = v54;
    v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v48, 1uLL);
    v23 = &v21[8 * v22];
    *(_QWORD *)v21 = v19[(int)((_DWORD)v15 + (((unint64_t)(v20 - (_BYTE *)v19) >> 3) & ((int)v15 >> 31)))];
    v24 = v21 + 8;
    v26 = (char *)v46;
    v25 = v47;
    if (v47 != v46)
    {
      do
      {
        v27 = *((_QWORD *)v25 - 1);
        v25 -= 8;
        *((_QWORD *)v21 - 1) = v27;
        v21 -= 8;
      }
      while (v25 != v26);
      v25 = (char *)v46;
    }
    v46 = v21;
    v47 = v24;
    v48 = v23;
    if (v25)
      operator delete(v25);
    v47 = v24;
  }
  v28 = MIL::StringToIRDataType((const void **)&v56.__r_.__value_.__l.__data_, 0);
  v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 88))(v9);
  if ((v11 & 1) != 0)
  {
    v43 = 0;
    v44 = 0;
    v45 = 0;
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v43, v46, (uint64_t)v47, (v47 - (_BYTE *)v46) >> 3);
    v30 = MIL::IRTensorValueType::MakeWithShape(*a1, v28, (uint64_t)&v52);
    v31 = MIL::IRTensorValueType::MakeWithShape(*a1, v29, (uint64_t)&v46);
    v32 = MIL::IRTensorValueType::MakeWithShape(*a1, v28, (uint64_t)&v43);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    v33 = operator new(0x18uLL);
    a4[1] = v33 + 3;
    a4[2] = v33 + 3;
    *v33 = v30;
    v33[1] = v31;
    v33[2] = v32;
    *a4 = v33;
    if (v43)
    {
      v44 = v43;
      operator delete(v43);
    }
  }
  else
  {
    v34 = MIL::IRTensorValueType::MakeWithShape(*a1, v28, (uint64_t)&v52);
    v35 = MIL::IRTensorValueType::MakeWithShape(*a1, v29, (uint64_t)&v46);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    v36 = operator new(0x10uLL);
    a4[1] = v36 + 2;
    a4[2] = v36 + 2;
    *v36 = v34;
    v36[1] = v35;
    *a4 = v36;
  }
  if (v46)
  {
    v47 = (char *)v46;
    operator delete(v46);
  }
  if (v52.__r_.__value_.__r.__words[0])
  {
    v52.__r_.__value_.__l.__size_ = v52.__r_.__value_.__r.__words[0];
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  if (__p)
  {
    v54 = __p;
    operator delete(__p);
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
}

void sub_1E09010E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  void *v42;
  int v43;
  uint64_t v44;

  if (a36 < 0)
  {
    operator delete(__p);
    if ((v43 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a37);
      if (*(char *)(v44 - 81) < 0)
        operator delete(*(void **)(v44 - 104));
      _Unwind_Resume(a1);
    }
  }
  else if (!v43)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v42);
  goto LABEL_6;
}

void MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceQuantize(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  MIL::IRValueType *SingleValueType;
  uint64_t v9;
  MIL::IRValue *SingleValue;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  MIL::IRValueType *v14;
  MIL::IRTensorValueType *v15;
  char v16;
  unsigned __int8 *v17;
  MIL::IRTensorValueType *v18;
  uint64_t *v19;
  const void *v20;
  int v21;
  void (****v22)(MIL::MILContextImpl *__hidden);
  unsigned int v23;
  uint64_t v24;
  const void *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t *v35;
  void *exception;
  char v37;
  void *v38;
  void *v39;
  uint64_t v40;
  std::string v41[2];
  int v42;
  uint64_t v43[2];
  void *__p[2];
  char v45;
  int v46;
  std::string v47;

  std::string::basic_string[abi:ne180100]<0>(__p, "input");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  v9 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (v45 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "scale");
  SingleValue = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::TryGetSingleValue(a3, (uint64_t)__p);
  v11 = MIL::IRValue::AsTensor(SingleValue);
  if (v45 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "zero_point");
  v12 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  v13 = v12;
  if (v45 < 0)
  {
    operator delete(__p[0]);
    if (v13)
      goto LABEL_7;
LABEL_11:
    v15 = 0;
    v16 = 0;
    goto LABEL_12;
  }
  if (!v12)
    goto LABEL_11;
LABEL_7:
  std::string::basic_string[abi:ne180100]<0>(__p, "zero_point");
  v14 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  v15 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v14);
  if (v45 < 0)
    operator delete(__p[0]);
  v16 = 1;
LABEL_12:
  std::string::basic_string[abi:ne180100]<0>(__p, "axis");
  v17 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (v45 < 0)
    operator delete(__p[0]);
  v37 = v16;
  if (v17)
  {
    v18 = (MIL::IRTensorValueType *)v9;
    v19 = (uint64_t *)v11;
    std::string::basic_string[abi:ne180100]<0>(__p, "axis");
    v20 = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)__p);
    v21 = MIL::IRValue::GetScalar<int>(v20);
    LOBYTE(v17) = v21;
    v22 = a1;
    v23 = v21 & 0xFFFFFF00;
    if (v45 < 0)
      operator delete(__p[0]);
    v24 = 0x100000000;
  }
  else
  {
    v18 = (MIL::IRTensorValueType *)v9;
    v19 = (uint64_t *)v11;
    v22 = a1;
    v24 = 0;
    v23 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "output_dtype");
  v25 = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)__p);
  MIL::IRValue::GetScalar<std::string>(v25, &v47);
  if (v45 < 0)
    operator delete(__p[0]);
  v26 = *a2;
  v27 = (std::__shared_weak_count *)a2[1];
  v43[0] = v26;
  v43[1] = (uint64_t)v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(p_shared_owners);
    while (__stxr(v29 + 1, p_shared_owners));
  }
  if (v27)
  {
    v30 = (unint64_t *)&v27->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)__p))
  {
    exception = __cxa_allocate_exception(0x48uLL);
    MIL::MILResult::MILResult(v41, (uint64_t)__p);
    v41[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA99F170;
    v42 = v46;
    MIL::ValidationError::ValidationError(exception, v41);
  }
  v32 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v18 + 96))(v18);
  v38 = 0;
  v39 = 0;
  v40 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v38, *(const void **)v32, *(_QWORD *)(v32 + 8), (uint64_t)(*(_QWORD *)(v32 + 8) - *(_QWORD *)v32) >> 3);
  v33 = MIL::StringToIRDataType((const void **)&v47.__r_.__value_.__l.__data_, 0);
  v34 = MIL::IRTensorValueType::MakeWithShape(*v22, v33, (uint64_t)&v38);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v35 = (uint64_t *)operator new(8uLL);
  *a4 = v35;
  *v35++ = v34;
  a4[1] = v35;
  a4[2] = v35;
  if (v38)
  {
    v39 = v38;
    operator delete(v38);
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)__p);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
}

void sub_1E09015B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a13);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a22);
  if (*(char *)(v27 - 89) < 0)
    operator delete(*(void **)(v27 - 112));
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::CustomValueInference::ValueInferenceDequantize(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  unsigned __int8 *v7;
  uint64_t v8;
  MIL::IRTensorValueType *v9;
  unsigned __int8 *v10;
  uint64_t *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  MIL::IRTensorValueType *v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  const void *v21;
  int v22;
  unsigned __int8 v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  MIL::Validation *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unsigned __int8 *v34;
  uint64_t *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unsigned __int8 *v40;
  uint64_t *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  uint64_t *v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  MIL::IRValueType *v54;
  uint64_t v55;
  int v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  MIL::IRValueType *v68;
  uint64_t v69;
  int v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  _QWORD *ProgramFirstSet;
  uint64_t v77;
  int v78;
  _QWORD **v79;
  uint64_t v80;
  uint64_t v81;
  void **v82;
  uint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  MIL::IRValueType *v95;
  uint64_t v96;
  int v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  int v105;
  _QWORD **v106;
  uint64_t v107;
  uint64_t v108;
  void **v109;
  uint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  int v118;
  _QWORD **v119;
  uint64_t v120;
  uint64_t v121;
  void **v122;
  uint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  int v131;
  _QWORD **v132;
  uint64_t v133;
  uint64_t v134;
  void **v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void **v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void **v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void **v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  void **v151;
  uint64_t v152;
  uint64_t v153;
  void **v154;
  uint64_t v155;
  uint64_t v156;
  void **v157;
  uint64_t v158;
  uint64_t v159;
  void **v160;
  uint64_t v161;
  uint64_t v162;
  void **v163;
  uint64_t v164;
  uint64_t v165;
  void **v166;
  uint64_t v167;
  uint64_t v168;
  void *v169;
  _QWORD *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  uint64_t v176;
  void **v177;
  uint64_t v178;
  uint64_t v179;
  void *v180;
  _QWORD *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  uint64_t v187;
  void **v188;
  uint64_t v189;
  uint64_t v190;
  void *v191;
  _QWORD *v192;
  unint64_t *v193;
  unint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  uint64_t v198;
  void **v199;
  uint64_t v200;
  uint64_t v201;
  void *v202;
  _QWORD *v203;
  unint64_t *v204;
  unint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  void *exception;
  std::logic_error *v219;
  std::logic_error *v220;
  std::logic_error *v221;
  _QWORD v223[8];
  char v224;
  uint64_t v225;
  std::__shared_weak_count *v226;
  _QWORD v227[8];
  char v228;
  uint64_t v229;
  std::__shared_weak_count *v230;
  uint64_t v231;
  std::__shared_weak_count *v232;
  uint64_t v233;
  std::__shared_weak_count *v234;
  _QWORD v235[8];
  char v236;
  uint64_t v237;
  std::__shared_weak_count *v238;
  _QWORD v239[8];
  char v240;
  _QWORD v241[8];
  uint64_t v242;
  std::__shared_weak_count *v243;
  _QWORD v244[8];
  uint64_t v245;
  std::__shared_weak_count *v246;
  void *__p[2];
  char v248;
  char v249;
  uint64_t v250;
  std::__shared_weak_count *v251;
  _QWORD v252[8];
  uint64_t v253;
  std::__shared_weak_count *v254;
  uint64_t v255;
  std::__shared_weak_count *v256;
  uint64_t v257;
  std::__shared_weak_count *v258;
  std::string v259[2];
  int v260;
  uint64_t v261[2];
  _BYTE v262[48];
  int v263;
  void *v264;
  void *v265;
  uint64_t v266;
  void *v267;
  void *v268;
  uint64_t v269;
  uint64_t v270;
  __int128 v271;
  void **v272;
  __int128 v273;
  uint64_t v274;
  uint64_t v275;
  void *v276;
  void *v277;
  uint64_t v278;
  void *v279;
  void *v280;
  void **v281;
  void *v282;
  __int128 v283;
  void **v284;
  __int128 v285;
  uint64_t v286;
  uint64_t v287;
  void *v288;
  void *v289;
  void **v290;
  uint64_t v291;

  v291 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(__p, "input");
  v7 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v8 = MIL::IRValue::AsTensor(**((MIL::IRValue ***)v7 + 5));
  v9 = (MIL::IRTensorValueType *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
  if (v248 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "scale");
  v10 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v10)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v11 = (uint64_t *)MIL::IRValue::AsTensor(**((MIL::IRValue ***)v10 + 5));
  if (v248 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "zero_point");
  v12 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  v13 = v12;
  if (v248 < 0)
  {
    operator delete(__p[0]);
    if (v13)
      goto LABEL_9;
LABEL_14:
    v16 = 0;
    v17 = 0;
    goto LABEL_15;
  }
  if (!v12)
    goto LABEL_14;
LABEL_9:
  std::string::basic_string[abi:ne180100]<0>(__p, "zero_point");
  v14 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v14)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v15 = MIL::IRValue::AsTensor(**((MIL::IRValue ***)v14 + 5));
  v16 = (MIL::IRTensorValueType *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
  if (v248 < 0)
    operator delete(__p[0]);
  v17 = 1;
LABEL_15:
  std::string::basic_string[abi:ne180100]<0>(__p, "axis");
  v18 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  v19 = v18;
  if (v248 < 0)
  {
    operator delete(__p[0]);
    if (v19)
      goto LABEL_17;
LABEL_22:
    v25 = 0;
    v23 = 0;
    v24 = 0;
    goto LABEL_23;
  }
  if (!v18)
    goto LABEL_22;
LABEL_17:
  std::string::basic_string[abi:ne180100]<0>(__p, "axis");
  v20 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v20)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v21 = (const void *)MIL::IRValue::AsTensor(**((MIL::IRValue ***)v20 + 5));
  v22 = MIL::IRValue::GetScalar<int>(v21);
  v23 = v22;
  v24 = v22 & 0xFFFFFF00;
  if (v248 < 0)
    operator delete(__p[0]);
  v25 = 0x100000000;
LABEL_23:
  v26 = v24 | v23;
  v27 = (MIL::Validation *)(v25 | v26);
  v28 = *a2;
  v29 = (std::__shared_weak_count *)a2[1];
  v261[0] = v28;
  v261[1] = (uint64_t)v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldxr(p_shared_owners);
    while (__stxr(v31 + 1, p_shared_owners));
  }
  if (v29)
  {
    v32 = (unint64_t *)&v29->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)v262))
  {
    exception = __cxa_allocate_exception(0x48uLL);
    MIL::MILResult::MILResult(v259, (uint64_t)v262);
    v259[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA99F170;
    v260 = v263;
    MIL::ValidationError::ValidationError(exception, v259);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "input");
  v34 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v34)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v35 = (uint64_t *)*((_QWORD *)v34 + 5);
  v36 = *v35;
  v37 = (std::__shared_weak_count *)v35[1];
  v257 = *v35;
  v258 = v37;
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  if (v248 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "scale");
  v40 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v40)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v41 = (uint64_t *)*((_QWORD *)v40 + 5);
  v43 = *v41;
  v42 = (std::__shared_weak_count *)v41[1];
  v255 = v43;
  v256 = v42;
  if (v42)
  {
    v44 = (unint64_t *)&v42->__shared_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  if (v248 < 0)
    operator delete(__p[0]);
  v254 = 0;
  v253 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "zero_point");
  v46 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  v47 = v46;
  if (v248 < 0)
  {
    operator delete(__p[0]);
    if (!v47)
      goto LABEL_54;
  }
  else if (!v46)
  {
    goto LABEL_54;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "zero_point");
  v48 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v48)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v49 = (uint64_t *)*((_QWORD *)v48 + 5);
  v51 = *v49;
  v50 = (std::__shared_weak_count *)v49[1];
  if (v50)
  {
    v52 = (unint64_t *)&v50->__shared_owners_;
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
  }
  v253 = v51;
  v254 = v50;
  if (v248 < 0)
    operator delete(__p[0]);
LABEL_54:
  v54 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 32))(v36);
  v55 = MIL::IRValueType::AsTensorType(v54);
  v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 88))(v55);
  if (v56 != 9)
  {
    if (v56 != 14)
    {
      v219 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v219, "Unsupported Datatype for the input IRTensor.");
      v219->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(v219, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
    v233 = v36;
    v234 = v37;
    if (v37)
    {
      v57 = (unint64_t *)&v37->__shared_owners_;
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
    }
    MIL::ValueInference::Tensor<unsigned char>::FromIRTensorValue(&v233, (uint64_t)v252);
    v59 = v234;
    if (v234)
    {
      v60 = (unint64_t *)&v234->__shared_owners_;
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    LOBYTE(__p[0]) = 0;
    v249 = 0;
    if (v253)
    {
      v231 = v253;
      v232 = v254;
      if (v254)
      {
        v62 = (unint64_t *)&v254->__shared_owners_;
        do
          v63 = __ldxr(v62);
        while (__stxr(v63 + 1, v62));
      }
      MIL::ValueInference::Tensor<unsigned char>::FromIRTensorValue(&v231, (uint64_t)&v270);
      std::optional<MIL::ValueInference::Tensor<unsigned char>>::operator=[abi:ne180100]<MIL::ValueInference::Tensor<unsigned char>,void>((uint64_t)__p, (uint64_t)&v270);
      MIL::ValueInference::Tensor<unsigned char>::~Tensor(&v270);
      v64 = v232;
      if (v232)
      {
        v65 = (unint64_t *)&v232->__shared_owners_;
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
    }
    v67 = v255;
    v68 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v255 + 32))(v255);
    v69 = MIL::IRValueType::AsTensorType(v68);
    v70 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v69 + 88))(v69);
    if (v70 != 4)
    {
      if (v70 != 5)
      {
        v220 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v220, "Unsupported Datatype for the scale IRTensor.");
        v220->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(v220, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
      }
      v229 = v67;
      v230 = v256;
      if (v256)
      {
        v71 = (unint64_t *)&v256->__shared_owners_;
        do
          v72 = __ldxr(v71);
        while (__stxr(v72 + 1, v71));
      }
      MIL::ValueInference::Tensor<float>::FromIRTensorValue(&v229, (uint64_t)v244);
      v73 = v230;
      if (v230)
      {
        v74 = (unint64_t *)&v230->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      std::__optional_move_base<MIL::ValueInference::Tensor<unsigned char>,false>::__optional_move_base[abi:ne180100](v227, (uint64_t)__p);
      if (v19)
      {
        ProgramFirstSet = (_QWORD *)MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v252);
        v77 = (uint64_t)(ProgramFirstSet[1] - *ProgramFirstSet) >> 3;
        if ((int)v26 < 0)
          v78 = (uint64_t)(ProgramFirstSet[1] - *ProgramFirstSet) >> 3;
        else
          v78 = 0;
        v270 = 1;
        std::vector<unsigned long long>::vector(&v276, v77 - (v78 + (int)v26), &v270);
        v79 = (_QWORD **)MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v244);
        *(_QWORD *)v276 = **v79;
        MIL::ValueInference::Tensor<unsigned char>::Cast<float>(v252, (uint64_t)&v270);
        if (!v228)
        {
LABEL_261:
          MIL::ValueInference::Tensor<float>::Reshape(v244, (uint64_t *)&v276, (uint64_t)&v288);
          v282 = &unk_1EA99BD50;
          *(_QWORD *)&v283 = MIL::MathOps::MulOp<float>;
          v284 = &v282;
          v162 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v270);
          v265 = 0;
          v264 = 0;
          v266 = 0;
          std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v264, *(const void **)v162, *(_QWORD *)(v162 + 8), (uint64_t)(*(_QWORD *)(v162 + 8) - *(_QWORD *)v162) >> 3);
          MIL::ValueInference::BinaryOp<float,float>(&v270, &v288, (uint64_t)&v282, &v264, (uint64_t)v241);
          if (v264)
          {
            v265 = v264;
            operator delete(v264);
          }
          v163 = v284;
          if (v284 == &v282)
          {
            v164 = 4;
            v163 = &v282;
          }
          else
          {
            if (!v284)
              goto LABEL_268;
            v164 = 5;
          }
          (*((void (**)(void))*v163 + v164))();
LABEL_268:
          MIL::ValueInference::Tensor<float>::~Tensor(&v288);
          MIL::ValueInference::Tensor<float>::~Tensor(&v270);
          if (v276)
          {
            v277 = v276;
            operator delete(v276);
          }
          goto LABEL_350;
        }
        MIL::ValueInference::Tensor<unsigned char>::Reshape(v227, (uint64_t *)&v276, (uint64_t)&v282);
        MIL::ValueInference::Tensor<unsigned char>::Cast<float>(&v282, (uint64_t)&v288);
        MIL::ValueInference::Tensor<unsigned char>::~Tensor(&v282);
        v279 = &unk_1EA99BD50;
        v280 = MIL::MathOps::SubOp<float>;
        v281 = &v279;
        v80 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v270);
        v268 = 0;
        v267 = 0;
        v269 = 0;
        std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v267, *(const void **)v80, *(_QWORD *)(v80 + 8), (uint64_t)(*(_QWORD *)(v80 + 8) - *(_QWORD *)v80) >> 3);
        MIL::ValueInference::BinaryOp<float,float>(&v270, &v288, (uint64_t)&v279, &v267, (uint64_t)&v282);
        if ((_QWORD)v271)
        {
          *((_QWORD *)&v271 + 1) = v271;
          operator delete((void *)v271);
        }
        v271 = v283;
        v272 = v284;
        v284 = 0;
        v283 = 0uLL;
        if ((_QWORD)v273)
        {
          *((_QWORD *)&v273 + 1) = v273;
          operator delete((void *)v273);
        }
        v273 = v285;
        v81 = v286;
        v286 = 0;
        v285 = 0uLL;
        v274 = v81;
        v275 = v287;
        MIL::ValueInference::Tensor<float>::~Tensor(&v282);
        if (v267)
        {
          v268 = v267;
          operator delete(v267);
        }
        v82 = v281;
        if (v281 == &v279)
        {
          v83 = 4;
          v82 = &v279;
        }
        else
        {
          if (!v281)
          {
LABEL_260:
            MIL::ValueInference::Tensor<float>::~Tensor(&v288);
            goto LABEL_261;
          }
          v83 = 5;
        }
        (*((void (**)(void))*v82 + v83))();
        goto LABEL_260;
      }
      MIL::ValueInference::Tensor<unsigned char>::Cast<float>(v252, (uint64_t)&v270);
      if (!v228)
      {
LABEL_342:
        v288 = &unk_1EA99BD50;
        v289 = MIL::MathOps::MulOp<float>;
        v290 = &v288;
        v198 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v270);
        v282 = 0;
        v283 = 0uLL;
        std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v282, *(const void **)v198, *(_QWORD *)(v198 + 8), (uint64_t)(*(_QWORD *)(v198 + 8) - *(_QWORD *)v198) >> 3);
        MIL::ValueInference::BinaryOp<float,float>(&v270, v244, (uint64_t)&v288, &v282, (uint64_t)v241);
        if (v282)
        {
          *(_QWORD *)&v283 = v282;
          operator delete(v282);
        }
        v199 = v290;
        if (v290 == &v288)
        {
          v200 = 4;
          v199 = &v288;
        }
        else
        {
          if (!v290)
          {
LABEL_349:
            MIL::ValueInference::Tensor<float>::~Tensor(&v270);
LABEL_350:
            if (v228)
              MIL::ValueInference::Tensor<unsigned char>::~Tensor(v227);
            MIL::ValueInference::Tensor<float>::ToIRTensorValue((uint64_t)v241, *a1, &v282);
            v202 = v282;
            v201 = v283;
            v288 = v282;
            v289 = (void *)v283;
            v282 = 0;
            *(_QWORD *)&v283 = 0;
            a4[1] = 0;
            a4[2] = 0;
            *a4 = 0;
            v270 = (uint64_t)a4;
            LOBYTE(v271) = 0;
            v203 = operator new(0x10uLL);
            *a4 = v203;
            a4[1] = v203;
            a4[2] = v203 + 2;
            *v203 = v202;
            v203[1] = v201;
            if (v201)
            {
              v204 = (unint64_t *)(v201 + 8);
              do
                v205 = __ldxr(v204);
              while (__stxr(v205 + 1, v204));
            }
            a4[1] = v203 + 2;
            std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v288);
            v206 = (std::__shared_weak_count *)v283;
            if ((_QWORD)v283)
            {
              v207 = (unint64_t *)(v283 + 8);
              do
                v208 = __ldaxr(v207);
              while (__stlxr(v208 - 1, v207));
              if (!v208)
              {
                ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
                std::__shared_weak_count::__release_weak(v206);
              }
            }
            MIL::ValueInference::Tensor<float>::~Tensor(v241);
            MIL::ValueInference::Tensor<float>::~Tensor(v244);
LABEL_361:
            if (v249)
              MIL::ValueInference::Tensor<unsigned char>::~Tensor(__p);
            MIL::ValueInference::Tensor<unsigned char>::~Tensor(v252);
            goto LABEL_364;
          }
          v200 = 5;
        }
        (*((void (**)(void))*v199 + v200))();
        goto LABEL_349;
      }
      MIL::ValueInference::Tensor<unsigned char>::Cast<float>(v227, (uint64_t)&v288);
      v279 = &unk_1EA99BD50;
      v280 = MIL::MathOps::SubOp<float>;
      v281 = &v279;
      v149 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v270);
      v277 = 0;
      v276 = 0;
      v278 = 0;
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v276, *(const void **)v149, *(_QWORD *)(v149 + 8), (uint64_t)(*(_QWORD *)(v149 + 8) - *(_QWORD *)v149) >> 3);
      MIL::ValueInference::BinaryOp<float,float>(&v270, &v288, (uint64_t)&v279, &v276, (uint64_t)&v282);
      if ((_QWORD)v271)
      {
        *((_QWORD *)&v271 + 1) = v271;
        operator delete((void *)v271);
      }
      v271 = v283;
      v272 = v284;
      v284 = 0;
      v283 = 0uLL;
      if ((_QWORD)v273)
      {
        *((_QWORD *)&v273 + 1) = v273;
        operator delete((void *)v273);
      }
      v273 = v285;
      v150 = v286;
      v286 = 0;
      v285 = 0uLL;
      v274 = v150;
      v275 = v287;
      MIL::ValueInference::Tensor<float>::~Tensor(&v282);
      if (v276)
      {
        v277 = v276;
        operator delete(v276);
      }
      v151 = v281;
      if (v281 == &v279)
      {
        v152 = 4;
        v151 = &v279;
      }
      else
      {
        if (!v281)
        {
LABEL_341:
          MIL::ValueInference::Tensor<float>::~Tensor(&v288);
          goto LABEL_342;
        }
        v152 = 5;
      }
      (*((void (**)(void))*v151 + v152))();
      goto LABEL_341;
    }
    v225 = v67;
    v226 = v256;
    if (v256)
    {
      v124 = (unint64_t *)&v256->__shared_owners_;
      do
        v125 = __ldxr(v124);
      while (__stxr(v125 + 1, v124));
    }
    MIL::ValueInference::Tensor<MIL::Fp16>::FromIRTensorValue(&v225, (uint64_t)v244);
    v126 = v226;
    if (v226)
    {
      v127 = (unint64_t *)&v226->__shared_owners_;
      do
        v128 = __ldaxr(v127);
      while (__stlxr(v128 - 1, v127));
      if (!v128)
      {
        ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
        std::__shared_weak_count::__release_weak(v126);
      }
    }
    std::__optional_move_base<MIL::ValueInference::Tensor<unsigned char>,false>::__optional_move_base[abi:ne180100](v223, (uint64_t)__p);
    if (v19)
    {
      v129 = (_QWORD *)MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v252);
      v130 = (uint64_t)(v129[1] - *v129) >> 3;
      if ((int)v26 < 0)
        v131 = (uint64_t)(v129[1] - *v129) >> 3;
      else
        v131 = 0;
      v270 = 1;
      std::vector<unsigned long long>::vector(&v276, v130 - (v131 + (int)v26), &v270);
      v132 = (_QWORD **)MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v244);
      *(_QWORD *)v276 = **v132;
      MIL::ValueInference::Tensor<unsigned char>::Cast<MIL::Fp16>(v252, (uint64_t)&v270);
      if (!v224)
      {
LABEL_249:
        MIL::ValueInference::Tensor<MIL::Fp16>::Reshape(v244, (uint64_t *)&v276, (uint64_t)&v288);
        v282 = &unk_1EA99FCD8;
        *(_QWORD *)&v283 = MIL::MathOps::MulOp<MIL::Fp16>;
        v284 = &v282;
        v159 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v270);
        v265 = 0;
        v264 = 0;
        v266 = 0;
        std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v264, *(const void **)v159, *(_QWORD *)(v159 + 8), (uint64_t)(*(_QWORD *)(v159 + 8) - *(_QWORD *)v159) >> 3);
        MIL::ValueInference::BinaryOp<MIL::Fp16,MIL::Fp16>(&v270, &v288, (uint64_t)&v282, &v264, (uint64_t)v241);
        if (v264)
        {
          v265 = v264;
          operator delete(v264);
        }
        v160 = v284;
        if (v284 == &v282)
        {
          v161 = 4;
          v160 = &v282;
        }
        else
        {
          if (!v284)
            goto LABEL_256;
          v161 = 5;
        }
        (*((void (**)(void))*v160 + v161))();
LABEL_256:
        MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v288);
        MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v270);
        if (v276)
        {
          v277 = v276;
          operator delete(v276);
        }
        goto LABEL_328;
      }
      MIL::ValueInference::Tensor<unsigned char>::Reshape(v223, (uint64_t *)&v276, (uint64_t)&v282);
      MIL::ValueInference::Tensor<unsigned char>::Cast<MIL::Fp16>(&v282, (uint64_t)&v288);
      MIL::ValueInference::Tensor<unsigned char>::~Tensor(&v282);
      v279 = &unk_1EA99FCD8;
      v280 = MIL::MathOps::SubOp<MIL::Fp16>;
      v281 = &v279;
      v133 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v270);
      v268 = 0;
      v267 = 0;
      v269 = 0;
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v267, *(const void **)v133, *(_QWORD *)(v133 + 8), (uint64_t)(*(_QWORD *)(v133 + 8) - *(_QWORD *)v133) >> 3);
      MIL::ValueInference::BinaryOp<MIL::Fp16,MIL::Fp16>(&v270, &v288, (uint64_t)&v279, &v267, (uint64_t)&v282);
      if ((_QWORD)v271)
      {
        *((_QWORD *)&v271 + 1) = v271;
        operator delete((void *)v271);
      }
      v271 = v283;
      v272 = v284;
      v284 = 0;
      v283 = 0uLL;
      if ((_QWORD)v273)
      {
        *((_QWORD *)&v273 + 1) = v273;
        operator delete((void *)v273);
      }
      v273 = v285;
      v134 = v286;
      v286 = 0;
      v285 = 0uLL;
      v274 = v134;
      v275 = v287;
      MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v282);
      if (v267)
      {
        v268 = v267;
        operator delete(v267);
      }
      v135 = v281;
      if (v281 == &v279)
      {
        v136 = 4;
        v135 = &v279;
      }
      else
      {
        if (!v281)
        {
LABEL_248:
          MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v288);
          goto LABEL_249;
        }
        v136 = 5;
      }
      (*((void (**)(void))*v135 + v136))();
      goto LABEL_248;
    }
    MIL::ValueInference::Tensor<unsigned char>::Cast<MIL::Fp16>(v252, (uint64_t)&v270);
    if (!v224)
    {
LABEL_320:
      v288 = &unk_1EA99FCD8;
      v289 = MIL::MathOps::MulOp<MIL::Fp16>;
      v290 = &v288;
      v187 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v270);
      v282 = 0;
      v283 = 0uLL;
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v282, *(const void **)v187, *(_QWORD *)(v187 + 8), (uint64_t)(*(_QWORD *)(v187 + 8) - *(_QWORD *)v187) >> 3);
      MIL::ValueInference::BinaryOp<MIL::Fp16,MIL::Fp16>(&v270, v244, (uint64_t)&v288, &v282, (uint64_t)v241);
      if (v282)
      {
        *(_QWORD *)&v283 = v282;
        operator delete(v282);
      }
      v188 = v290;
      if (v290 == &v288)
      {
        v189 = 4;
        v188 = &v288;
      }
      else
      {
        if (!v290)
        {
LABEL_327:
          MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v270);
LABEL_328:
          if (v224)
            MIL::ValueInference::Tensor<unsigned char>::~Tensor(v223);
          MIL::ValueInference::Tensor<MIL::Fp16>::ToIRTensorValue((uint64_t)v241, *a1, &v282);
          v191 = v282;
          v190 = v283;
          v288 = v282;
          v289 = (void *)v283;
          v282 = 0;
          *(_QWORD *)&v283 = 0;
          a4[1] = 0;
          a4[2] = 0;
          *a4 = 0;
          v270 = (uint64_t)a4;
          LOBYTE(v271) = 0;
          v192 = operator new(0x10uLL);
          *a4 = v192;
          a4[1] = v192;
          a4[2] = v192 + 2;
          *v192 = v191;
          v192[1] = v190;
          if (v190)
          {
            v193 = (unint64_t *)(v190 + 8);
            do
              v194 = __ldxr(v193);
            while (__stxr(v194 + 1, v193));
          }
          a4[1] = v192 + 2;
          std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v288);
          v195 = (std::__shared_weak_count *)v283;
          if ((_QWORD)v283)
          {
            v196 = (unint64_t *)(v283 + 8);
            do
              v197 = __ldaxr(v196);
            while (__stlxr(v197 - 1, v196));
            if (!v197)
            {
              ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
              std::__shared_weak_count::__release_weak(v195);
            }
          }
          MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(v241);
          MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(v244);
          goto LABEL_361;
        }
        v189 = 5;
      }
      (*((void (**)(void))*v188 + v189))();
      goto LABEL_327;
    }
    MIL::ValueInference::Tensor<unsigned char>::Cast<MIL::Fp16>(v223, (uint64_t)&v288);
    v279 = &unk_1EA99FCD8;
    v280 = MIL::MathOps::SubOp<MIL::Fp16>;
    v281 = &v279;
    v145 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v270);
    v277 = 0;
    v276 = 0;
    v278 = 0;
    std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v276, *(const void **)v145, *(_QWORD *)(v145 + 8), (uint64_t)(*(_QWORD *)(v145 + 8) - *(_QWORD *)v145) >> 3);
    MIL::ValueInference::BinaryOp<MIL::Fp16,MIL::Fp16>(&v270, &v288, (uint64_t)&v279, &v276, (uint64_t)&v282);
    if ((_QWORD)v271)
    {
      *((_QWORD *)&v271 + 1) = v271;
      operator delete((void *)v271);
    }
    v271 = v283;
    v272 = v284;
    v284 = 0;
    v283 = 0uLL;
    if ((_QWORD)v273)
    {
      *((_QWORD *)&v273 + 1) = v273;
      operator delete((void *)v273);
    }
    v273 = v285;
    v146 = v286;
    v286 = 0;
    v285 = 0uLL;
    v274 = v146;
    v275 = v287;
    MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v282);
    if (v276)
    {
      v277 = v276;
      operator delete(v276);
    }
    v147 = v281;
    if (v281 == &v279)
    {
      v148 = 4;
      v147 = &v279;
    }
    else
    {
      if (!v281)
      {
LABEL_319:
        MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v288);
        goto LABEL_320;
      }
      v148 = 5;
    }
    (*((void (**)(void))*v147 + v148))();
    goto LABEL_319;
  }
  v250 = v36;
  v251 = v37;
  if (v37)
  {
    v84 = (unint64_t *)&v37->__shared_owners_;
    do
      v85 = __ldxr(v84);
    while (__stxr(v85 + 1, v84));
  }
  MIL::ValueInference::Tensor<signed char>::FromIRTensorValue(&v250, (uint64_t)v252);
  v86 = v251;
  if (v251)
  {
    v87 = (unint64_t *)&v251->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  LOBYTE(__p[0]) = 0;
  v249 = 0;
  if (v253)
  {
    v245 = v253;
    v246 = v254;
    if (v254)
    {
      v89 = (unint64_t *)&v254->__shared_owners_;
      do
        v90 = __ldxr(v89);
      while (__stxr(v90 + 1, v89));
    }
    MIL::ValueInference::Tensor<signed char>::FromIRTensorValue(&v245, (uint64_t)&v270);
    std::optional<MIL::ValueInference::Tensor<signed char>>::operator=[abi:ne180100]<MIL::ValueInference::Tensor<signed char>,void>((uint64_t)__p, (uint64_t)&v270);
    MIL::ValueInference::Tensor<signed char>::~Tensor(&v270);
    v91 = v246;
    if (v246)
    {
      v92 = (unint64_t *)&v246->__shared_owners_;
      do
        v93 = __ldaxr(v92);
      while (__stlxr(v93 - 1, v92));
      if (!v93)
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
      }
    }
  }
  v94 = v255;
  v95 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v255 + 32))(v255);
  v96 = MIL::IRValueType::AsTensorType(v95);
  v97 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v96 + 88))(v96);
  if (v97 == 4)
  {
    v237 = v94;
    v238 = v256;
    if (v256)
    {
      v111 = (unint64_t *)&v256->__shared_owners_;
      do
        v112 = __ldxr(v111);
      while (__stxr(v112 + 1, v111));
    }
    MIL::ValueInference::Tensor<MIL::Fp16>::FromIRTensorValue(&v237, (uint64_t)v244);
    v113 = v238;
    if (v238)
    {
      v114 = (unint64_t *)&v238->__shared_owners_;
      do
        v115 = __ldaxr(v114);
      while (__stlxr(v115 - 1, v114));
      if (!v115)
      {
        ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
        std::__shared_weak_count::__release_weak(v113);
      }
    }
    std::__optional_move_base<MIL::ValueInference::Tensor<signed char>,false>::__optional_move_base[abi:ne180100](v235, (uint64_t)__p);
    if (v19)
    {
      v116 = (_QWORD *)MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v252);
      v117 = (uint64_t)(v116[1] - *v116) >> 3;
      if ((int)v26 < 0)
        v118 = (uint64_t)(v116[1] - *v116) >> 3;
      else
        v118 = 0;
      v270 = 1;
      std::vector<unsigned long long>::vector(&v276, v117 - (v118 + (int)v26), &v270);
      v119 = (_QWORD **)MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v244);
      *(_QWORD *)v276 = **v119;
      MIL::ValueInference::Tensor<signed char>::Cast<MIL::Fp16>(v252, (uint64_t)&v270);
      if (!v236)
      {
LABEL_225:
        MIL::ValueInference::Tensor<MIL::Fp16>::Reshape(v244, (uint64_t *)&v276, (uint64_t)&v288);
        v282 = &unk_1EA99FCD8;
        *(_QWORD *)&v283 = MIL::MathOps::MulOp<MIL::Fp16>;
        v284 = &v282;
        v153 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v270);
        v265 = 0;
        v264 = 0;
        v266 = 0;
        std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v264, *(const void **)v153, *(_QWORD *)(v153 + 8), (uint64_t)(*(_QWORD *)(v153 + 8) - *(_QWORD *)v153) >> 3);
        MIL::ValueInference::BinaryOp<MIL::Fp16,MIL::Fp16>(&v270, &v288, (uint64_t)&v282, &v264, (uint64_t)v241);
        if (v264)
        {
          v265 = v264;
          operator delete(v264);
        }
        v154 = v284;
        if (v284 == &v282)
        {
          v155 = 4;
          v154 = &v282;
        }
        else
        {
          if (!v284)
            goto LABEL_232;
          v155 = 5;
        }
        (*((void (**)(void))*v154 + v155))();
LABEL_232:
        MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v288);
        MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v270);
        if (v276)
        {
          v277 = v276;
          operator delete(v276);
        }
        goto LABEL_281;
      }
      MIL::ValueInference::Tensor<signed char>::Reshape(v235, (uint64_t *)&v276, (uint64_t)&v282);
      MIL::ValueInference::Tensor<signed char>::Cast<MIL::Fp16>(&v282, (uint64_t)&v288);
      MIL::ValueInference::Tensor<signed char>::~Tensor(&v282);
      v279 = &unk_1EA99FCD8;
      v280 = MIL::MathOps::SubOp<MIL::Fp16>;
      v281 = &v279;
      v120 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v270);
      v268 = 0;
      v267 = 0;
      v269 = 0;
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v267, *(const void **)v120, *(_QWORD *)(v120 + 8), (uint64_t)(*(_QWORD *)(v120 + 8) - *(_QWORD *)v120) >> 3);
      MIL::ValueInference::BinaryOp<MIL::Fp16,MIL::Fp16>(&v270, &v288, (uint64_t)&v279, &v267, (uint64_t)&v282);
      if ((_QWORD)v271)
      {
        *((_QWORD *)&v271 + 1) = v271;
        operator delete((void *)v271);
      }
      v271 = v283;
      v272 = v284;
      v284 = 0;
      v283 = 0uLL;
      if ((_QWORD)v273)
      {
        *((_QWORD *)&v273 + 1) = v273;
        operator delete((void *)v273);
      }
      v273 = v285;
      v121 = v286;
      v286 = 0;
      v285 = 0uLL;
      v274 = v121;
      v275 = v287;
      MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v282);
      if (v267)
      {
        v268 = v267;
        operator delete(v267);
      }
      v122 = v281;
      if (v281 == &v279)
      {
        v123 = 4;
        v122 = &v279;
      }
      else
      {
        if (!v281)
        {
LABEL_224:
          MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v288);
          goto LABEL_225;
        }
        v123 = 5;
      }
      (*((void (**)(void))*v122 + v123))();
      goto LABEL_224;
    }
    MIL::ValueInference::Tensor<signed char>::Cast<MIL::Fp16>(v252, (uint64_t)&v270);
    if (!v236)
    {
LABEL_273:
      v288 = &unk_1EA99FCD8;
      v289 = MIL::MathOps::MulOp<MIL::Fp16>;
      v290 = &v288;
      v165 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v270);
      v282 = 0;
      v283 = 0uLL;
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v282, *(const void **)v165, *(_QWORD *)(v165 + 8), (uint64_t)(*(_QWORD *)(v165 + 8) - *(_QWORD *)v165) >> 3);
      MIL::ValueInference::BinaryOp<MIL::Fp16,MIL::Fp16>(&v270, v244, (uint64_t)&v288, &v282, (uint64_t)v241);
      if (v282)
      {
        *(_QWORD *)&v283 = v282;
        operator delete(v282);
      }
      v166 = v290;
      if (v290 == &v288)
      {
        v167 = 4;
        v166 = &v288;
      }
      else
      {
        if (!v290)
        {
LABEL_280:
          MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v270);
LABEL_281:
          if (v236)
            MIL::ValueInference::Tensor<signed char>::~Tensor(v235);
          MIL::ValueInference::Tensor<MIL::Fp16>::ToIRTensorValue((uint64_t)v241, *a1, &v282);
          v169 = v282;
          v168 = v283;
          v288 = v282;
          v289 = (void *)v283;
          v282 = 0;
          *(_QWORD *)&v283 = 0;
          a4[1] = 0;
          a4[2] = 0;
          *a4 = 0;
          v270 = (uint64_t)a4;
          LOBYTE(v271) = 0;
          v170 = operator new(0x10uLL);
          *a4 = v170;
          a4[1] = v170;
          a4[2] = v170 + 2;
          *v170 = v169;
          v170[1] = v168;
          if (v168)
          {
            v171 = (unint64_t *)(v168 + 8);
            do
              v172 = __ldxr(v171);
            while (__stxr(v172 + 1, v171));
          }
          a4[1] = v170 + 2;
          std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v288);
          v173 = (std::__shared_weak_count *)v283;
          if ((_QWORD)v283)
          {
            v174 = (unint64_t *)(v283 + 8);
            do
              v175 = __ldaxr(v174);
            while (__stlxr(v175 - 1, v174));
            if (!v175)
            {
              ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
              std::__shared_weak_count::__release_weak(v173);
            }
          }
          MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(v241);
          MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(v244);
          goto LABEL_314;
        }
        v167 = 5;
      }
      (*((void (**)(void))*v166 + v167))();
      goto LABEL_280;
    }
    MIL::ValueInference::Tensor<signed char>::Cast<MIL::Fp16>(v235, (uint64_t)&v288);
    v279 = &unk_1EA99FCD8;
    v280 = MIL::MathOps::SubOp<MIL::Fp16>;
    v281 = &v279;
    v137 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v270);
    v277 = 0;
    v276 = 0;
    v278 = 0;
    std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v276, *(const void **)v137, *(_QWORD *)(v137 + 8), (uint64_t)(*(_QWORD *)(v137 + 8) - *(_QWORD *)v137) >> 3);
    MIL::ValueInference::BinaryOp<MIL::Fp16,MIL::Fp16>(&v270, &v288, (uint64_t)&v279, &v276, (uint64_t)&v282);
    if ((_QWORD)v271)
    {
      *((_QWORD *)&v271 + 1) = v271;
      operator delete((void *)v271);
    }
    v271 = v283;
    v272 = v284;
    v284 = 0;
    v283 = 0uLL;
    if ((_QWORD)v273)
    {
      *((_QWORD *)&v273 + 1) = v273;
      operator delete((void *)v273);
    }
    v273 = v285;
    v138 = v286;
    v286 = 0;
    v285 = 0uLL;
    v274 = v138;
    v275 = v287;
    MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v282);
    if (v276)
    {
      v277 = v276;
      operator delete(v276);
    }
    v139 = v281;
    if (v281 == &v279)
    {
      v140 = 4;
      v139 = &v279;
    }
    else
    {
      if (!v281)
      {
LABEL_272:
        MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v288);
        goto LABEL_273;
      }
      v140 = 5;
    }
    (*((void (**)(void))*v139 + v140))();
    goto LABEL_272;
  }
  if (v97 != 5)
  {
    v221 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v221, "Unsupported Datatype for the scale IRTensor.");
    v221->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(v221, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  v242 = v94;
  v243 = v256;
  if (v256)
  {
    v98 = (unint64_t *)&v256->__shared_owners_;
    do
      v99 = __ldxr(v98);
    while (__stxr(v99 + 1, v98));
  }
  MIL::ValueInference::Tensor<float>::FromIRTensorValue(&v242, (uint64_t)v244);
  v100 = v243;
  if (v243)
  {
    v101 = (unint64_t *)&v243->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  std::__optional_move_base<MIL::ValueInference::Tensor<signed char>,false>::__optional_move_base[abi:ne180100](v239, (uint64_t)__p);
  if (v19)
  {
    v103 = (_QWORD *)MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v252);
    v104 = (uint64_t)(v103[1] - *v103) >> 3;
    if ((int)v26 < 0)
      v105 = (uint64_t)(v103[1] - *v103) >> 3;
    else
      v105 = 0;
    v270 = 1;
    std::vector<unsigned long long>::vector(&v276, v104 - (v105 + (int)v26), &v270);
    v106 = (_QWORD **)MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v244);
    *(_QWORD *)v276 = **v106;
    MIL::ValueInference::Tensor<signed char>::Cast<float>(v252, (uint64_t)&v270);
    if (!v240)
    {
LABEL_237:
      MIL::ValueInference::Tensor<float>::Reshape(v244, (uint64_t *)&v276, (uint64_t)&v288);
      v282 = &unk_1EA99BD50;
      *(_QWORD *)&v283 = MIL::MathOps::MulOp<float>;
      v284 = &v282;
      v156 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v270);
      v265 = 0;
      v264 = 0;
      v266 = 0;
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v264, *(const void **)v156, *(_QWORD *)(v156 + 8), (uint64_t)(*(_QWORD *)(v156 + 8) - *(_QWORD *)v156) >> 3);
      MIL::ValueInference::BinaryOp<float,float>(&v270, &v288, (uint64_t)&v282, &v264, (uint64_t)v241);
      if (v264)
      {
        v265 = v264;
        operator delete(v264);
      }
      v157 = v284;
      if (v284 == &v282)
      {
        v158 = 4;
        v157 = &v282;
      }
      else
      {
        if (!v284)
          goto LABEL_244;
        v158 = 5;
      }
      (*((void (**)(void))*v157 + v158))();
LABEL_244:
      MIL::ValueInference::Tensor<float>::~Tensor(&v288);
      MIL::ValueInference::Tensor<float>::~Tensor(&v270);
      if (v276)
      {
        v277 = v276;
        operator delete(v276);
      }
      goto LABEL_303;
    }
    MIL::ValueInference::Tensor<signed char>::Reshape(v239, (uint64_t *)&v276, (uint64_t)&v282);
    MIL::ValueInference::Tensor<signed char>::Cast<float>(&v282, (uint64_t)&v288);
    MIL::ValueInference::Tensor<signed char>::~Tensor(&v282);
    v279 = &unk_1EA99BD50;
    v280 = MIL::MathOps::SubOp<float>;
    v281 = &v279;
    v107 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v270);
    v268 = 0;
    v267 = 0;
    v269 = 0;
    std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v267, *(const void **)v107, *(_QWORD *)(v107 + 8), (uint64_t)(*(_QWORD *)(v107 + 8) - *(_QWORD *)v107) >> 3);
    MIL::ValueInference::BinaryOp<float,float>(&v270, &v288, (uint64_t)&v279, &v267, (uint64_t)&v282);
    if ((_QWORD)v271)
    {
      *((_QWORD *)&v271 + 1) = v271;
      operator delete((void *)v271);
    }
    v271 = v283;
    v272 = v284;
    v284 = 0;
    v283 = 0uLL;
    if ((_QWORD)v273)
    {
      *((_QWORD *)&v273 + 1) = v273;
      operator delete((void *)v273);
    }
    v273 = v285;
    v108 = v286;
    v286 = 0;
    v285 = 0uLL;
    v274 = v108;
    v275 = v287;
    MIL::ValueInference::Tensor<float>::~Tensor(&v282);
    if (v267)
    {
      v268 = v267;
      operator delete(v267);
    }
    v109 = v281;
    if (v281 == &v279)
    {
      v110 = 4;
      v109 = &v279;
    }
    else
    {
      if (!v281)
      {
LABEL_236:
        MIL::ValueInference::Tensor<float>::~Tensor(&v288);
        goto LABEL_237;
      }
      v110 = 5;
    }
    (*((void (**)(void))*v109 + v110))();
    goto LABEL_236;
  }
  MIL::ValueInference::Tensor<signed char>::Cast<float>(v252, (uint64_t)&v270);
  if (v240)
  {
    MIL::ValueInference::Tensor<signed char>::Cast<float>(v239, (uint64_t)&v288);
    v279 = &unk_1EA99BD50;
    v280 = MIL::MathOps::SubOp<float>;
    v281 = &v279;
    v141 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v270);
    v277 = 0;
    v276 = 0;
    v278 = 0;
    std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v276, *(const void **)v141, *(_QWORD *)(v141 + 8), (uint64_t)(*(_QWORD *)(v141 + 8) - *(_QWORD *)v141) >> 3);
    MIL::ValueInference::BinaryOp<float,float>(&v270, &v288, (uint64_t)&v279, &v276, (uint64_t)&v282);
    if ((_QWORD)v271)
    {
      *((_QWORD *)&v271 + 1) = v271;
      operator delete((void *)v271);
    }
    v271 = v283;
    v272 = v284;
    v284 = 0;
    v283 = 0uLL;
    if ((_QWORD)v273)
    {
      *((_QWORD *)&v273 + 1) = v273;
      operator delete((void *)v273);
    }
    v273 = v285;
    v142 = v286;
    v286 = 0;
    v285 = 0uLL;
    v274 = v142;
    v275 = v287;
    MIL::ValueInference::Tensor<float>::~Tensor(&v282);
    if (v276)
    {
      v277 = v276;
      operator delete(v276);
    }
    v143 = v281;
    if (v281 == &v279)
    {
      v144 = 4;
      v143 = &v279;
    }
    else
    {
      if (!v281)
      {
LABEL_294:
        MIL::ValueInference::Tensor<float>::~Tensor(&v288);
        goto LABEL_295;
      }
      v144 = 5;
    }
    (*((void (**)(void))*v143 + v144))();
    goto LABEL_294;
  }
LABEL_295:
  v288 = &unk_1EA99BD50;
  v289 = MIL::MathOps::MulOp<float>;
  v290 = &v288;
  v176 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v270);
  v282 = 0;
  v283 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v282, *(const void **)v176, *(_QWORD *)(v176 + 8), (uint64_t)(*(_QWORD *)(v176 + 8) - *(_QWORD *)v176) >> 3);
  MIL::ValueInference::BinaryOp<float,float>(&v270, v244, (uint64_t)&v288, &v282, (uint64_t)v241);
  if (v282)
  {
    *(_QWORD *)&v283 = v282;
    operator delete(v282);
  }
  v177 = v290;
  if (v290 == &v288)
  {
    v178 = 4;
    v177 = &v288;
    goto LABEL_301;
  }
  if (v290)
  {
    v178 = 5;
LABEL_301:
    (*((void (**)(void))*v177 + v178))();
  }
  MIL::ValueInference::Tensor<float>::~Tensor(&v270);
LABEL_303:
  if (v240)
    MIL::ValueInference::Tensor<signed char>::~Tensor(v239);
  MIL::ValueInference::Tensor<float>::ToIRTensorValue((uint64_t)v241, *a1, &v282);
  v180 = v282;
  v179 = v283;
  v288 = v282;
  v289 = (void *)v283;
  v282 = 0;
  *(_QWORD *)&v283 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v270 = (uint64_t)a4;
  LOBYTE(v271) = 0;
  v181 = operator new(0x10uLL);
  *a4 = v181;
  a4[1] = v181;
  a4[2] = v181 + 2;
  *v181 = v180;
  v181[1] = v179;
  if (v179)
  {
    v182 = (unint64_t *)(v179 + 8);
    do
      v183 = __ldxr(v182);
    while (__stxr(v183 + 1, v182));
  }
  a4[1] = v181 + 2;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v288);
  v184 = (std::__shared_weak_count *)v283;
  if ((_QWORD)v283)
  {
    v185 = (unint64_t *)(v283 + 8);
    do
      v186 = __ldaxr(v185);
    while (__stlxr(v186 - 1, v185));
    if (!v186)
    {
      ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
      std::__shared_weak_count::__release_weak(v184);
    }
  }
  MIL::ValueInference::Tensor<float>::~Tensor(v241);
  MIL::ValueInference::Tensor<float>::~Tensor(v244);
LABEL_314:
  if (v249)
    MIL::ValueInference::Tensor<signed char>::~Tensor(__p);
  MIL::ValueInference::Tensor<signed char>::~Tensor(v252);
LABEL_364:
  v209 = v254;
  if (v254)
  {
    v210 = (unint64_t *)&v254->__shared_owners_;
    do
      v211 = __ldaxr(v210);
    while (__stlxr(v211 - 1, v210));
    if (!v211)
    {
      ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
      std::__shared_weak_count::__release_weak(v209);
    }
  }
  v212 = v256;
  if (v256)
  {
    v213 = (unint64_t *)&v256->__shared_owners_;
    do
      v214 = __ldaxr(v213);
    while (__stlxr(v214 - 1, v213));
    if (!v214)
    {
      ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
      std::__shared_weak_count::__release_weak(v212);
    }
  }
  v215 = v258;
  if (v258)
  {
    v216 = (unint64_t *)&v258->__shared_owners_;
    do
      v217 = __ldaxr(v216);
    while (__stlxr(v217 - 1, v216));
    if (!v217)
    {
      ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
      std::__shared_weak_count::__release_weak(v215);
    }
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v262);
}

void sub_1E0903550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a67;
  uint64_t v67;
  void *v69;
  _QWORD *v70;
  uint64_t v71;

  v69 = (void *)STACK[0x3D8];
  if (STACK[0x3D8])
  {
    STACK[0x3E0] = (unint64_t)v69;
    operator delete(v69);
  }
  v70 = *(_QWORD **)(v67 - 232);
  if (v70 == (_QWORD *)(v67 - 256))
  {
    v71 = 4;
    v70 = (_QWORD *)(v67 - 256);
  }
  else
  {
    if (!v70)
      goto LABEL_8;
    v71 = 5;
  }
  (*(void (**)(void))(*v70 + 8 * v71))();
LABEL_8:
  MIL::ValueInference::Tensor<float>::~Tensor((_QWORD *)(v67 - 160));
  MIL::ValueInference::Tensor<float>::~Tensor(&STACK[0x398]);
  if (a30)
    MIL::ValueInference::Tensor<unsigned char>::~Tensor(&a22);
  MIL::ValueInference::Tensor<float>::~Tensor(&a67);
  if (LOBYTE(STACK[0x260]))
    MIL::ValueInference::Tensor<unsigned char>::~Tensor(&STACK[0x220]);
  MIL::ValueInference::Tensor<unsigned char>::~Tensor(&STACK[0x278]);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2B8]);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2C8]);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2D8]);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&STACK[0x330]);
  _Unwind_Resume(a1);
}

void sub_1E0903EAC()
{
  JUMPOUT(0x1E0903E8CLL);
}

uint64_t std::optional<MIL::ValueInference::Tensor<signed char>>::operator=[abi:ne180100]<MIL::ValueInference::Tensor<signed char>,void>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (*(_BYTE *)(a1 + 64))
  {
    std::vector<float>::__move_assign(a1 + 8, (__n128 *)(a2 + 8));
    std::vector<float>::__move_assign(a1 + 32, (__n128 *)(a2 + 32));
    v4 = *(_QWORD *)(a2 + 56);
  }
  else
  {
    *(_QWORD *)a1 = &off_1EA99BCA0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    v4 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_BYTE *)(a1 + 64) = 1;
  }
  *(_QWORD *)(a1 + 56) = v4;
  return a1;
}

uint64_t std::optional<MIL::ValueInference::Tensor<unsigned char>>::operator=[abi:ne180100]<MIL::ValueInference::Tensor<unsigned char>,void>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (*(_BYTE *)(a1 + 64))
  {
    std::vector<float>::__move_assign(a1 + 8, (__n128 *)(a2 + 8));
    std::vector<float>::__move_assign(a1 + 32, (__n128 *)(a2 + 32));
    v4 = *(_QWORD *)(a2 + 56);
  }
  else
  {
    *(_QWORD *)a1 = &off_1EA99BC70;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    v4 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_BYTE *)(a1 + 64) = 1;
  }
  *(_QWORD *)(a1 + 56) = v4;
  return a1;
}

void MIL::Operators::Common::ios17::CustomValueInference::ValueInferenceDynamicDequantize(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9[2];

  v4 = (std::__shared_weak_count *)a2[1];
  v9[0] = *a2;
  v9[1] = (uint64_t)v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  MIL::Operators::Common::ios17::CustomValueInference::ValueInferenceDequantize(a1, v9, a3, a4);
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1E090407C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::CustomValueInference::ValueInferenceDynamicQuantize(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X2>, uint64_t a3@<X8>)
{
  unsigned int v3;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  const void *v11;
  int v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  const void *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned __int8 *v19;
  const void *v20;
  _QWORD *v21;
  unsigned __int8 *v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::string *v28;
  void (***v29)(MIL::MILContextImpl *__hidden);
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unsigned __int8 *v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unsigned __int8 *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  _OWORD *v47;
  uint64_t v48;
  __int128 v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t i;
  std::string *p_p;
  void (***v54)(MIL::MILContextImpl *__hidden);
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unsigned __int8 *v60;
  std::string::size_type v61;
  unint64_t *v62;
  unint64_t v63;
  unsigned __int8 *v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  _OWORD *v68;
  uint64_t v69;
  __int128 v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t j;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  void (***v77)(MIL::MILContextImpl *__hidden);
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unsigned __int8 *v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  unsigned __int8 *v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  unsigned __int8 *v91;
  uint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  _OWORD *v95;
  uint64_t v96;
  __int128 v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t k;
  void (***v101)(MIL::MILContextImpl *__hidden);
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  unsigned __int8 *v107;
  std::string::size_type v108;
  unint64_t *v109;
  unint64_t v110;
  unsigned __int8 *v111;
  uint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  _OWORD *v115;
  uint64_t v116;
  __int128 v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t m;
  _QWORD *v121;
  std::logic_error *exception;
  uint64_t v123;
  std::__shared_weak_count *v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  void *v129;
  char v130;
  char v131;
  void *v132[2];
  char v133;
  void *v134[2];
  char v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  std::string v140;
  void **v141;
  char v142;
  std::string v143;
  uint64_t v144;
  void *__p;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;

  v151 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&__p, "input");
  v7 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v8 = MIL::IRValue::AsTensor(**((MIL::IRValue ***)v7 + 5));
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
  if (SHIBYTE(v147) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "has_zero_point");
  v10 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  if (!v10)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v11 = (const void *)MIL::IRValue::AsTensor(**((MIL::IRValue ***)v10 + 5));
  v12 = MIL::IRValue::GetScalar<BOOL>(v11);
  if (SHIBYTE(v147) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "axis");
  v13 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  v14 = v13;
  if (SHIBYTE(v147) < 0)
  {
    operator delete(__p);
    if (v14)
      goto LABEL_9;
LABEL_14:
    v18 = 0;
    LOBYTE(v17) = 0;
    goto LABEL_15;
  }
  if (!v13)
    goto LABEL_14;
LABEL_9:
  std::string::basic_string[abi:ne180100]<0>(&__p, "axis");
  v15 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  if (!v15)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v16 = (const void *)MIL::IRValue::AsTensor(**((MIL::IRValue ***)v15 + 5));
  v17 = MIL::IRValue::GetScalar<int>(v16);
  if (SHIBYTE(v147) < 0)
    operator delete(__p);
  v3 = v17 >> 8;
  v18 = 0x100000000;
LABEL_15:
  std::string::basic_string[abi:ne180100]<0>(&__p, "output_dtype");
  v19 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  if (!v19)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v20 = (const void *)MIL::IRValue::AsTensor(**((MIL::IRValue ***)v19 + 5));
  MIL::IRValue::GetScalar<std::string>(v20, &v140);
  if (SHIBYTE(v147) < 0)
  {
    operator delete(__p);
    if (!v14)
      goto LABEL_21;
  }
  else if (!v14)
  {
    goto LABEL_21;
  }
  v21 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 96))(v9);
  if (!MIL::Validation::IsAxisValidForRank((MIL::Validation *)(v17 | (v3 << 8)), (v21[1] - *v21) >> 3))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Axis must be within range (-input_ndim - 1, input_ndim) (exclusive). Invalid axis: ", 83);
    v121 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v121, (uint64_t)" for input_ndim: ", 17);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 96))(v9);
    std::ostream::operator<<();
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::logic_error::logic_error(exception, &v143);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
LABEL_21:
  std::string::basic_string[abi:ne180100]<0>(&__p, "input");
  v22 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  if (!v22)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v23 = (uint64_t *)*((_QWORD *)v22 + 5);
  v25 = *v23;
  v24 = (std::__shared_weak_count *)v23[1];
  v138 = *v23;
  v139 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v27 = __ldxr(p_shared_owners);
    while (__stxr(v27 + 1, p_shared_owners));
  }
  if (SHIBYTE(v147) < 0)
    operator delete(__p);
  if ((SHIBYTE(v140.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) == 4)
    {
      v28 = &v140;
      goto LABEL_32;
    }
LABEL_33:
    if (v12)
    {
      v29 = *a1;
      v125 = v25;
      v126 = v24;
      if (v24)
      {
        v30 = (unint64_t *)&v24->__shared_owners_;
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
      }
      MIL::Passes::QuantizeValueAsymmetricUInt8(v29, &v125, v17 | ((*(_QWORD *)&v3 & 0xFFFFFFLL) << 8) | v18, (uint64_t)&v143);
      v32 = v126;
      if (v126)
      {
        v33 = (unint64_t *)&v126->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      std::string::basic_string[abi:ne180100]<0>(v134, "quantized_data");
      v132[0] = v134;
      v35 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v143, (unsigned __int8 *)v134, (uint64_t)&std::piecewise_construct, (__int128 **)v132);
      v36 = *((_QWORD *)v35 + 6);
      __p = (void *)*((_QWORD *)v35 + 5);
      v146 = v36;
      if (v36)
      {
        v37 = (unint64_t *)(v36 + 8);
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
      }
      std::string::basic_string[abi:ne180100]<0>(v132, "scale");
      v129 = v132;
      v39 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v143, (unsigned __int8 *)v132, (uint64_t)&std::piecewise_construct, (__int128 **)&v129);
      v40 = *((_QWORD *)v39 + 6);
      v147 = *((_QWORD *)v39 + 5);
      v148 = v40;
      if (v40)
      {
        v41 = (unint64_t *)(v40 + 8);
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
      }
      std::string::basic_string[abi:ne180100]<0>(&v129, "zero_point");
      v141 = &v129;
      v43 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v143, (unsigned __int8 *)&v129, (uint64_t)&std::piecewise_construct, (__int128 **)&v141);
      v44 = *((_QWORD *)v43 + 6);
      v149 = *((_QWORD *)v43 + 5);
      v150 = v44;
      if (v44)
      {
        v45 = (unint64_t *)(v44 + 8);
        do
          v46 = __ldxr(v45);
        while (__stxr(v46 + 1, v45));
      }
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      v141 = (void **)a3;
      v142 = 0;
      v47 = operator new(0x30uLL);
      v48 = 0;
      *(_QWORD *)a3 = v47;
      *(_QWORD *)(a3 + 8) = v47;
      *(_QWORD *)(a3 + 16) = v47 + 3;
      do
      {
        v49 = *((_OWORD *)&__p + v48);
        *v47 = v49;
        if (*((_QWORD *)&v49 + 1))
        {
          v50 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
          do
            v51 = __ldxr(v50);
          while (__stxr(v51 + 1, v50));
        }
        ++v48;
        ++v47;
      }
      while (v48 != 3);
      *(_QWORD *)(a3 + 8) = v47;
      for (i = 32; i != -16; i -= 16)
        std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&__p + i);
LABEL_58:
      if (v131 < 0)
        operator delete(v129);
      if (v133 < 0)
        operator delete(v132[0]);
      if (v135 < 0)
        operator delete(v134[0]);
      p_p = &v143;
      goto LABEL_91;
    }
    v54 = *a1;
    v123 = v25;
    v124 = v24;
    if (v24)
    {
      v55 = (unint64_t *)&v24->__shared_owners_;
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
    }
    MIL::Passes::QuantizeValueNoZeroPointUInt8(v54, &v123, v17 | ((*(_QWORD *)&v3 & 0xFFFFFFLL) << 8) | v18, (uint64_t)&__p);
    v57 = v124;
    if (v124)
    {
      v58 = (unint64_t *)&v124->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v134, "quantized_data");
    v132[0] = v134;
    v60 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&__p, (unsigned __int8 *)v134, (uint64_t)&std::piecewise_construct, (__int128 **)v132);
    v61 = *((_QWORD *)v60 + 6);
    v143.__r_.__value_.__r.__words[0] = *((_QWORD *)v60 + 5);
    v143.__r_.__value_.__l.__size_ = v61;
    if (v61)
    {
      v62 = (unint64_t *)(v61 + 8);
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
    }
    std::string::basic_string[abi:ne180100]<0>(v132, "scale");
    v129 = v132;
    v64 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&__p, (unsigned __int8 *)v132, (uint64_t)&std::piecewise_construct, (__int128 **)&v129);
    v65 = *((_QWORD *)v64 + 6);
    v143.__r_.__value_.__r.__words[2] = *((_QWORD *)v64 + 5);
    v144 = v65;
    if (v65)
    {
      v66 = (unint64_t *)(v65 + 8);
      do
        v67 = __ldxr(v66);
      while (__stxr(v67 + 1, v66));
    }
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    v129 = (void *)a3;
    v130 = 0;
    v68 = operator new(0x20uLL);
    v69 = 0;
    *(_QWORD *)a3 = v68;
    *(_QWORD *)(a3 + 8) = v68;
    *(_QWORD *)(a3 + 16) = v68 + 2;
    do
    {
      v70 = *((_OWORD *)&v143.__r_.__value_.__l.__data_ + v69);
      *v68 = v70;
      if (*((_QWORD *)&v70 + 1))
      {
        v71 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
        do
          v72 = __ldxr(v71);
        while (__stxr(v72 + 1, v71));
      }
      ++v69;
      ++v68;
    }
    while (v69 != 2);
    *(_QWORD *)(a3 + 8) = v68;
    for (j = 16; j != -16; j -= 16)
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v143 + j);
    goto LABEL_86;
  }
  if (v140.__r_.__value_.__l.__size_ != 4)
    goto LABEL_33;
  v28 = (std::string *)v140.__r_.__value_.__r.__words[0];
LABEL_32:
  if (LODWORD(v28->__r_.__value_.__l.__data_) != 947154537)
    goto LABEL_33;
  if (v12)
  {
    v77 = *a1;
    v136 = v25;
    v137 = v24;
    if (v24)
    {
      v78 = (unint64_t *)&v24->__shared_owners_;
      do
        v79 = __ldxr(v78);
      while (__stxr(v79 + 1, v78));
    }
    MIL::Passes::QuantizeValueAsymmetricInt8(v77, &v136, v17 | ((*(_QWORD *)&v3 & 0xFFFFFFLL) << 8) | v18, (uint64_t)&v143);
    v80 = v137;
    if (v137)
    {
      v81 = (unint64_t *)&v137->__shared_owners_;
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 - 1, v81));
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v134, "quantized_data");
    v132[0] = v134;
    v83 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v143, (unsigned __int8 *)v134, (uint64_t)&std::piecewise_construct, (__int128 **)v132);
    v84 = *((_QWORD *)v83 + 6);
    __p = (void *)*((_QWORD *)v83 + 5);
    v146 = v84;
    if (v84)
    {
      v85 = (unint64_t *)(v84 + 8);
      do
        v86 = __ldxr(v85);
      while (__stxr(v86 + 1, v85));
    }
    std::string::basic_string[abi:ne180100]<0>(v132, "scale");
    v129 = v132;
    v87 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v143, (unsigned __int8 *)v132, (uint64_t)&std::piecewise_construct, (__int128 **)&v129);
    v88 = *((_QWORD *)v87 + 6);
    v147 = *((_QWORD *)v87 + 5);
    v148 = v88;
    if (v88)
    {
      v89 = (unint64_t *)(v88 + 8);
      do
        v90 = __ldxr(v89);
      while (__stxr(v90 + 1, v89));
    }
    std::string::basic_string[abi:ne180100]<0>(&v129, "zero_point");
    v141 = &v129;
    v91 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&v143, (unsigned __int8 *)&v129, (uint64_t)&std::piecewise_construct, (__int128 **)&v141);
    v92 = *((_QWORD *)v91 + 6);
    v149 = *((_QWORD *)v91 + 5);
    v150 = v92;
    if (v92)
    {
      v93 = (unint64_t *)(v92 + 8);
      do
        v94 = __ldxr(v93);
      while (__stxr(v94 + 1, v93));
    }
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    v141 = (void **)a3;
    v142 = 0;
    v95 = operator new(0x30uLL);
    v96 = 0;
    *(_QWORD *)a3 = v95;
    *(_QWORD *)(a3 + 8) = v95;
    *(_QWORD *)(a3 + 16) = v95 + 3;
    do
    {
      v97 = *((_OWORD *)&__p + v96);
      *v95 = v97;
      if (*((_QWORD *)&v97 + 1))
      {
        v98 = (unint64_t *)(*((_QWORD *)&v97 + 1) + 8);
        do
          v99 = __ldxr(v98);
        while (__stxr(v99 + 1, v98));
      }
      ++v96;
      ++v95;
    }
    while (v96 != 3);
    *(_QWORD *)(a3 + 8) = v95;
    for (k = 32; k != -16; k -= 16)
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&__p + k);
    goto LABEL_58;
  }
  v101 = *a1;
  v127 = v25;
  v128 = v24;
  if (v24)
  {
    v102 = (unint64_t *)&v24->__shared_owners_;
    do
      v103 = __ldxr(v102);
    while (__stxr(v103 + 1, v102));
  }
  MIL::Passes::QuantizeValueSymmetricInt8(v101, &v127, v17 | ((*(_QWORD *)&v3 & 0xFFFFFFLL) << 8) | v18, (uint64_t)&__p);
  v104 = v128;
  if (v128)
  {
    v105 = (unint64_t *)&v128->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v134, "quantized_data");
  v132[0] = v134;
  v107 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&__p, (unsigned __int8 *)v134, (uint64_t)&std::piecewise_construct, (__int128 **)v132);
  v108 = *((_QWORD *)v107 + 6);
  v143.__r_.__value_.__r.__words[0] = *((_QWORD *)v107 + 5);
  v143.__r_.__value_.__l.__size_ = v108;
  if (v108)
  {
    v109 = (unint64_t *)(v108 + 8);
    do
      v110 = __ldxr(v109);
    while (__stxr(v110 + 1, v109));
  }
  std::string::basic_string[abi:ne180100]<0>(v132, "scale");
  v129 = v132;
  v111 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&__p, (unsigned __int8 *)v132, (uint64_t)&std::piecewise_construct, (__int128 **)&v129);
  v112 = *((_QWORD *)v111 + 6);
  v143.__r_.__value_.__r.__words[2] = *((_QWORD *)v111 + 5);
  v144 = v112;
  if (v112)
  {
    v113 = (unint64_t *)(v112 + 8);
    do
      v114 = __ldxr(v113);
    while (__stxr(v114 + 1, v113));
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v129 = (void *)a3;
  v130 = 0;
  v115 = operator new(0x20uLL);
  v116 = 0;
  *(_QWORD *)a3 = v115;
  *(_QWORD *)(a3 + 8) = v115;
  *(_QWORD *)(a3 + 16) = v115 + 2;
  do
  {
    v117 = *((_OWORD *)&v143.__r_.__value_.__l.__data_ + v116);
    *v115 = v117;
    if (*((_QWORD *)&v117 + 1))
    {
      v118 = (unint64_t *)(*((_QWORD *)&v117 + 1) + 8);
      do
        v119 = __ldxr(v118);
      while (__stxr(v119 + 1, v118));
    }
    ++v116;
    ++v115;
  }
  while (v116 != 2);
  *(_QWORD *)(a3 + 8) = v115;
  for (m = 16; m != -16; m -= 16)
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v143 + m);
LABEL_86:
  if (v133 < 0)
    operator delete(v132[0]);
  if (v135 < 0)
    operator delete(v134[0]);
  p_p = (std::string *)&__p;
LABEL_91:
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)p_p);
  v74 = v139;
  if (v139)
  {
    v75 = (unint64_t *)&v139->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v140.__r_.__value_.__l.__data_);
}

void sub_1E0904C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,char a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;

  if (a51 < 0)
  {
    operator delete(__p);
    if ((v60 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a54);
      if (a42 < 0)
        operator delete(a37);
      _Unwind_Resume(a1);
    }
  }
  else if (!v60)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v59);
  goto LABEL_6;
}

void MIL::Operators::Common::ios17::CustomValueInference::ValueInferenceQuantize(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  unsigned __int8 *v7;
  uint64_t v8;
  MIL::IRTensorValueType *v9;
  unsigned __int8 *v10;
  uint64_t *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  MIL::IRTensorValueType *v16;
  char v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  const void *v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned __int8 *v25;
  const void *v26;
  MIL::Validation *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unsigned __int8 *v34;
  uint64_t *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unsigned __int8 *v40;
  uint64_t *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  uint64_t *v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  MIL::IRValueType *v67;
  uint64_t v68;
  int v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  __int128 v76;
  _OWORD *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  MIL::IRValueType *v94;
  uint64_t v95;
  int v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  __int128 v103;
  _OWORD *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::string *v110;
  std::string *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  __int128 v118;
  _OWORD *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  __int128 v131;
  _OWORD *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  __int128 v138;
  _OWORD *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  __int128 v145;
  _OWORD *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  __int128 v161;
  _OWORD *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  __int128 v168;
  _OWORD *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  void *exception;
  std::logic_error *v176;
  std::logic_error *v177;
  std::logic_error *v178;
  _QWORD v180[8];
  char v181;
  _QWORD v182[8];
  char v183;
  uint64_t (**v184)();
  __int128 v185;
  uint64_t v186;
  __int128 v187;
  uint64_t v188;
  uint64_t v189;
  char v190;
  uint64_t v191;
  std::__shared_weak_count *v192;
  uint64_t (**v193)();
  __int128 v194;
  uint64_t v195;
  __int128 v196;
  uint64_t v197;
  uint64_t v198;
  char v199;
  uint64_t v200;
  std::__shared_weak_count *v201;
  uint64_t v202;
  std::__shared_weak_count *v203;
  uint64_t v204;
  std::__shared_weak_count *v205;
  _QWORD v206[8];
  char v207;
  _QWORD v208[8];
  char v209;
  uint64_t (**v210)();
  __int128 v211;
  uint64_t v212;
  __int128 v213;
  uint64_t v214;
  uint64_t v215;
  char v216;
  uint64_t v217;
  std::__shared_weak_count *v218;
  __int128 v219;
  uint64_t (**v220)();
  __int128 v221;
  uint64_t v222;
  __int128 v223;
  uint64_t v224;
  uint64_t v225;
  char v226;
  _QWORD *v227;
  char v228;
  uint64_t v229;
  std::__shared_weak_count *v230;
  uint64_t v231;
  __int128 v232;
  uint64_t v233;
  __int128 v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  std::__shared_weak_count *v238;
  _QWORD v239[8];
  uint64_t v240;
  std::__shared_weak_count *v241;
  void *__p[2];
  char v243;
  uint64_t v244;
  std::__shared_weak_count *v245;
  uint64_t v246;
  std::__shared_weak_count *v247;
  uint64_t v248;
  std::__shared_weak_count *v249;
  std::string v250[2];
  int v251;
  uint64_t v252[2];
  _BYTE v253[48];
  int v254;
  std::string v255;
  __int128 v256;
  __int128 v257;
  uint64_t v258;

  v258 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(__p, "input");
  v7 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v8 = MIL::IRValue::AsTensor(**((MIL::IRValue ***)v7 + 5));
  v9 = (MIL::IRTensorValueType *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
  if (v243 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "scale");
  v10 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v10)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v11 = (uint64_t *)MIL::IRValue::AsTensor(**((MIL::IRValue ***)v10 + 5));
  if (v243 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "zero_point");
  v12 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  v13 = v12;
  if (v243 < 0)
  {
    operator delete(__p[0]);
    if (v13)
      goto LABEL_9;
LABEL_14:
    v16 = 0;
    v17 = 0;
    goto LABEL_15;
  }
  if (!v12)
    goto LABEL_14;
LABEL_9:
  std::string::basic_string[abi:ne180100]<0>(__p, "zero_point");
  v14 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v14)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v15 = MIL::IRValue::AsTensor(**((MIL::IRValue ***)v14 + 5));
  v16 = (MIL::IRTensorValueType *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
  if (v243 < 0)
    operator delete(__p[0]);
  v17 = 1;
LABEL_15:
  std::string::basic_string[abi:ne180100]<0>(__p, "axis");
  v18 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  v19 = v18;
  if (v243 < 0)
  {
    operator delete(__p[0]);
    if (v19)
      goto LABEL_17;
LABEL_22:
    v24 = 0;
    v23 = 0;
    goto LABEL_23;
  }
  if (!v18)
    goto LABEL_22;
LABEL_17:
  std::string::basic_string[abi:ne180100]<0>(__p, "axis");
  v20 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v20)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v21 = (const void *)MIL::IRValue::AsTensor(**((MIL::IRValue ***)v20 + 5));
  v22 = MIL::IRValue::GetScalar<int>(v21);
  LOBYTE(v19) = v22;
  v23 = v22 & 0xFFFFFF00;
  if (v243 < 0)
    operator delete(__p[0]);
  v24 = 0x100000000;
LABEL_23:
  std::string::basic_string[abi:ne180100]<0>(__p, "output_dtype");
  v25 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v25)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v26 = (const void *)MIL::IRValue::AsTensor(**((MIL::IRValue ***)v25 + 5));
  MIL::IRValue::GetScalar<std::string>(v26, &v255);
  if (v243 < 0)
    operator delete(__p[0]);
  v27 = (MIL::Validation *)(v24 | v23 | v19);
  v28 = *a2;
  v29 = (std::__shared_weak_count *)a2[1];
  v252[0] = v28;
  v252[1] = (uint64_t)v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldxr(p_shared_owners);
    while (__stxr(v31 + 1, p_shared_owners));
  }
  if (v29)
  {
    v32 = (unint64_t *)&v29->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)v253))
  {
    exception = __cxa_allocate_exception(0x48uLL);
    MIL::MILResult::MILResult(v250, (uint64_t)v253);
    v250[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA99F170;
    v251 = v254;
    MIL::ValidationError::ValidationError(exception, v250);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "input");
  v34 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v34)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v35 = (uint64_t *)*((_QWORD *)v34 + 5);
  v36 = *v35;
  v37 = (std::__shared_weak_count *)v35[1];
  v248 = *v35;
  v249 = v37;
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  if (v243 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "scale");
  v40 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v40)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v41 = (uint64_t *)*((_QWORD *)v40 + 5);
  v43 = *v41;
  v42 = (std::__shared_weak_count *)v41[1];
  v246 = v43;
  v247 = v42;
  if (v42)
  {
    v44 = (unint64_t *)&v42->__shared_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  if (v243 < 0)
    operator delete(__p[0]);
  v245 = 0;
  v244 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "zero_point");
  v46 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  v47 = v46;
  if (v243 < 0)
  {
    operator delete(__p[0]);
    if (!v47)
      goto LABEL_57;
  }
  else if (!v46)
  {
    goto LABEL_57;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "zero_point");
  v48 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v48)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v49 = (uint64_t *)*((_QWORD *)v48 + 5);
  v51 = *v49;
  v50 = (std::__shared_weak_count *)v49[1];
  if (v50)
  {
    v52 = (unint64_t *)&v50->__shared_owners_;
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
  }
  v244 = v51;
  v245 = v50;
  if (v243 < 0)
    operator delete(__p[0]);
LABEL_57:
  v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 32))(v36);
  v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 88))(v54);
  if (v55 != 4)
  {
    if (v55 != 5)
    {
      v176 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v176, "Unsupported Datatype for the input IRTensor.");
      v176->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(v176, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
    v240 = v36;
    v241 = v37;
    if (v37)
    {
      v56 = (unint64_t *)&v37->__shared_owners_;
      do
        v57 = __ldxr(v56);
      while (__stxr(v57 + 1, v56));
    }
    MIL::ValueInference::Tensor<float>::FromIRTensorValue(&v240, (uint64_t)__p);
    v58 = v241;
    if (v241)
    {
      v59 = (unint64_t *)&v241->__shared_owners_;
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    v237 = v246;
    v238 = v247;
    if (v247)
    {
      v61 = (unint64_t *)&v247->__shared_owners_;
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
    }
    MIL::ValueInference::Tensor<float>::FromIRTensorValue(&v237, (uint64_t)v239);
    v63 = v238;
    if (v238)
    {
      v64 = (unint64_t *)&v238->__shared_owners_;
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    v66 = v244;
    if (v244)
    {
      v67 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v244 + 32))(v244);
      v68 = MIL::IRValueType::AsTensorType(v67);
      v69 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v68 + 88))(v68);
      if (v69 != 9)
      {
        if (v69 != 14)
        {
          v177 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v177, "Unsupported Datatype for the zeroPoint IRTensor.");
          v177->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
          __cxa_throw(v177, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
        }
        v217 = v66;
        v218 = v245;
        if (v245)
        {
          v70 = (unint64_t *)&v245->__shared_owners_;
          do
            v71 = __ldxr(v70);
          while (__stxr(v71 + 1, v70));
        }
        MIL::ValueInference::Tensor<unsigned char>::FromIRTensorValue(&v217, (uint64_t)&v231);
        v72 = v218;
        if (v218)
        {
          v73 = (unint64_t *)&v218->__shared_owners_;
          do
            v74 = __ldaxr(v73);
          while (__stlxr(v74 - 1, v73));
          if (!v74)
          {
            ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
            std::__shared_weak_count::__release_weak(v72);
          }
        }
        v211 = v232;
        v210 = &off_1EA99BC70;
        v212 = v233;
        v232 = 0uLL;
        v213 = v234;
        v233 = 0;
        v234 = 0uLL;
        v75 = v235;
        v235 = 0;
        v214 = v75;
        v215 = v236;
        v216 = 1;
        if (v216)
          MIL::ValueInference::Tensor<unsigned char>::~Tensor(&v210);
        MIL::ValueInference::Tensor<unsigned char>::ToIRTensorValue((uint64_t)&v227, *a1, &v219);
        v76 = v219;
        v256 = v219;
        v219 = 0uLL;
        a4[1] = 0;
        a4[2] = 0;
        *a4 = 0;
        *(_QWORD *)&v257 = a4;
        BYTE8(v257) = 0;
        v77 = operator new(0x10uLL);
        *a4 = v77;
        a4[1] = v77;
        a4[2] = v77 + 1;
        *v77 = v76;
        if (*((_QWORD *)&v76 + 1))
        {
          v78 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
        a4[1] = v77 + 1;
        std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v256);
        v80 = (std::__shared_weak_count *)*((_QWORD *)&v219 + 1);
        if (*((_QWORD *)&v219 + 1))
        {
          v81 = (unint64_t *)(*((_QWORD *)&v219 + 1) + 8);
          do
            v82 = __ldaxr(v81);
          while (__stlxr(v82 - 1, v81));
          if (!v82)
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
        }
        MIL::ValueInference::Tensor<unsigned char>::~Tensor(&v227);
LABEL_209:
        MIL::ValueInference::Tensor<unsigned char>::~Tensor(&v231);
        goto LABEL_210;
      }
      v229 = v66;
      v230 = v245;
      if (v245)
      {
        v125 = (unint64_t *)&v245->__shared_owners_;
        do
          v126 = __ldxr(v125);
        while (__stxr(v126 + 1, v125));
      }
      MIL::ValueInference::Tensor<signed char>::FromIRTensorValue(&v229, (uint64_t)&v231);
      v127 = v230;
      if (v230)
      {
        v128 = (unint64_t *)&v230->__shared_owners_;
        do
          v129 = __ldaxr(v128);
        while (__stlxr(v129 - 1, v128));
        if (!v129)
        {
          ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
          std::__shared_weak_count::__release_weak(v127);
        }
      }
      v221 = v232;
      v220 = &off_1EA99BCA0;
      v222 = v233;
      v232 = 0uLL;
      v223 = v234;
      v233 = 0;
      v234 = 0uLL;
      v130 = v235;
      v235 = 0;
      v224 = v130;
      v225 = v236;
      v226 = 1;
      if (v226)
        MIL::ValueInference::Tensor<signed char>::~Tensor(&v220);
      MIL::ValueInference::Tensor<signed char>::ToIRTensorValue((uint64_t)&v227, *a1, &v219);
      v131 = v219;
      v256 = v219;
      v219 = 0uLL;
      a4[1] = 0;
      a4[2] = 0;
      *a4 = 0;
      *(_QWORD *)&v257 = a4;
      BYTE8(v257) = 0;
      v132 = operator new(0x10uLL);
      *a4 = v132;
      a4[1] = v132;
      a4[2] = v132 + 1;
      *v132 = v131;
      if (*((_QWORD *)&v131 + 1))
      {
        v133 = (unint64_t *)(*((_QWORD *)&v131 + 1) + 8);
        do
          v134 = __ldxr(v133);
        while (__stxr(v134 + 1, v133));
      }
      a4[1] = v132 + 1;
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v256);
      v135 = (std::__shared_weak_count *)*((_QWORD *)&v219 + 1);
      if (*((_QWORD *)&v219 + 1))
      {
        v136 = (unint64_t *)(*((_QWORD *)&v219 + 1) + 8);
        do
          v137 = __ldaxr(v136);
        while (__stlxr(v137 - 1, v136));
        if (!v137)
        {
          ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
          std::__shared_weak_count::__release_weak(v135);
        }
      }
      MIL::ValueInference::Tensor<signed char>::~Tensor(&v227);
LABEL_180:
      MIL::ValueInference::Tensor<signed char>::~Tensor(&v231);
LABEL_210:
      MIL::ValueInference::Tensor<float>::~Tensor(v239);
      MIL::ValueInference::Tensor<float>::~Tensor(__p);
      goto LABEL_211;
    }
    if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v255.__r_.__value_.__l.__size_ != 4)
        goto LABEL_199;
      v111 = (std::string *)v255.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) != 4)
        goto LABEL_199;
      v111 = &v255;
    }
    if (LODWORD(v111->__r_.__value_.__l.__data_) == 947154537)
    {
      LOBYTE(v208[0]) = 0;
      v209 = 0;
      if (v209)
        MIL::ValueInference::Tensor<signed char>::~Tensor(v208);
      MIL::ValueInference::Tensor<signed char>::ToIRTensorValue((uint64_t)&v231, *a1, &v256);
      v168 = v256;
      v257 = v256;
      v256 = 0uLL;
      a4[1] = 0;
      a4[2] = 0;
      *a4 = 0;
      v227 = a4;
      v228 = 0;
      v169 = operator new(0x10uLL);
      *a4 = v169;
      a4[1] = v169;
      a4[2] = v169 + 1;
      *v169 = v168;
      if (*((_QWORD *)&v168 + 1))
      {
        v170 = (unint64_t *)(*((_QWORD *)&v168 + 1) + 8);
        do
          v171 = __ldxr(v170);
        while (__stxr(v171 + 1, v170));
      }
      a4[1] = v169 + 1;
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v257);
      v172 = (std::__shared_weak_count *)*((_QWORD *)&v256 + 1);
      if (*((_QWORD *)&v256 + 1))
      {
        v173 = (unint64_t *)(*((_QWORD *)&v256 + 1) + 8);
        do
          v174 = __ldaxr(v173);
        while (__stlxr(v174 - 1, v173));
        if (!v174)
        {
          ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
          std::__shared_weak_count::__release_weak(v172);
        }
      }
      goto LABEL_180;
    }
LABEL_199:
    LOBYTE(v206[0]) = 0;
    v207 = 0;
    if (v207)
      MIL::ValueInference::Tensor<unsigned char>::~Tensor(v206);
    MIL::ValueInference::Tensor<unsigned char>::ToIRTensorValue((uint64_t)&v231, *a1, &v256);
    v145 = v256;
    v257 = v256;
    v256 = 0uLL;
    a4[1] = 0;
    a4[2] = 0;
    *a4 = 0;
    v227 = a4;
    v228 = 0;
    v146 = operator new(0x10uLL);
    *a4 = v146;
    a4[1] = v146;
    a4[2] = v146 + 1;
    *v146 = v145;
    if (*((_QWORD *)&v145 + 1))
    {
      v147 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
      do
        v148 = __ldxr(v147);
      while (__stxr(v148 + 1, v147));
    }
    a4[1] = v146 + 1;
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v257);
    v149 = (std::__shared_weak_count *)*((_QWORD *)&v256 + 1);
    if (*((_QWORD *)&v256 + 1))
    {
      v150 = (unint64_t *)(*((_QWORD *)&v256 + 1) + 8);
      do
        v151 = __ldaxr(v150);
      while (__stlxr(v151 - 1, v150));
      if (!v151)
      {
        ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
        std::__shared_weak_count::__release_weak(v149);
      }
    }
    goto LABEL_209;
  }
  v204 = v36;
  v205 = v37;
  if (v37)
  {
    v83 = (unint64_t *)&v37->__shared_owners_;
    do
      v84 = __ldxr(v83);
    while (__stxr(v84 + 1, v83));
  }
  MIL::ValueInference::Tensor<MIL::Fp16>::FromIRTensorValue(&v204, (uint64_t)__p);
  v85 = v205;
  if (v205)
  {
    v86 = (unint64_t *)&v205->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v202 = v246;
  v203 = v247;
  if (v247)
  {
    v88 = (unint64_t *)&v247->__shared_owners_;
    do
      v89 = __ldxr(v88);
    while (__stxr(v89 + 1, v88));
  }
  MIL::ValueInference::Tensor<MIL::Fp16>::FromIRTensorValue(&v202, (uint64_t)v239);
  v90 = v203;
  if (v203)
  {
    v91 = (unint64_t *)&v203->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = v244;
  if (!v244)
  {
    if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v255.__r_.__value_.__l.__size_ != 4)
        goto LABEL_184;
      v110 = (std::string *)v255.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) != 4)
        goto LABEL_184;
      v110 = &v255;
    }
    if (LODWORD(v110->__r_.__value_.__l.__data_) == 947154537)
    {
      LOBYTE(v182[0]) = 0;
      v183 = 0;
      if (v183)
        MIL::ValueInference::Tensor<signed char>::~Tensor(v182);
      MIL::ValueInference::Tensor<signed char>::ToIRTensorValue((uint64_t)&v231, *a1, &v256);
      v161 = v256;
      v257 = v256;
      v256 = 0uLL;
      a4[1] = 0;
      a4[2] = 0;
      *a4 = 0;
      v227 = a4;
      v228 = 0;
      v162 = operator new(0x10uLL);
      *a4 = v162;
      a4[1] = v162;
      a4[2] = v162 + 1;
      *v162 = v161;
      if (*((_QWORD *)&v161 + 1))
      {
        v163 = (unint64_t *)(*((_QWORD *)&v161 + 1) + 8);
        do
          v164 = __ldxr(v163);
        while (__stxr(v164 + 1, v163));
      }
      a4[1] = v162 + 1;
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v257);
      v165 = (std::__shared_weak_count *)*((_QWORD *)&v256 + 1);
      if (*((_QWORD *)&v256 + 1))
      {
        v166 = (unint64_t *)(*((_QWORD *)&v256 + 1) + 8);
        do
          v167 = __ldaxr(v166);
        while (__stlxr(v167 - 1, v166));
        if (!v167)
        {
          ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
          std::__shared_weak_count::__release_weak(v165);
        }
      }
      goto LABEL_160;
    }
LABEL_184:
    LOBYTE(v180[0]) = 0;
    v181 = 0;
    if (v181)
      MIL::ValueInference::Tensor<unsigned char>::~Tensor(v180);
    MIL::ValueInference::Tensor<unsigned char>::ToIRTensorValue((uint64_t)&v231, *a1, &v256);
    v138 = v256;
    v257 = v256;
    v256 = 0uLL;
    a4[1] = 0;
    a4[2] = 0;
    *a4 = 0;
    v227 = a4;
    v228 = 0;
    v139 = operator new(0x10uLL);
    *a4 = v139;
    a4[1] = v139;
    a4[2] = v139 + 1;
    *v139 = v138;
    if (*((_QWORD *)&v138 + 1))
    {
      v140 = (unint64_t *)(*((_QWORD *)&v138 + 1) + 8);
      do
        v141 = __ldxr(v140);
      while (__stxr(v141 + 1, v140));
    }
    a4[1] = v139 + 1;
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v257);
    v142 = (std::__shared_weak_count *)*((_QWORD *)&v256 + 1);
    if (*((_QWORD *)&v256 + 1))
    {
      v143 = (unint64_t *)(*((_QWORD *)&v256 + 1) + 8);
      do
        v144 = __ldaxr(v143);
      while (__stlxr(v144 - 1, v143));
      if (!v144)
      {
        ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
        std::__shared_weak_count::__release_weak(v142);
      }
    }
    goto LABEL_194;
  }
  v94 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v244 + 32))(v244);
  v95 = MIL::IRValueType::AsTensorType(v94);
  v96 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v95 + 88))(v95);
  if (v96 != 9)
  {
    if (v96 != 14)
    {
      v178 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v178, "Unsupported Datatype for the zeroPoint IRTensor.");
      v178->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(v178, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
    v191 = v93;
    v192 = v245;
    if (v245)
    {
      v97 = (unint64_t *)&v245->__shared_owners_;
      do
        v98 = __ldxr(v97);
      while (__stxr(v98 + 1, v97));
    }
    MIL::ValueInference::Tensor<unsigned char>::FromIRTensorValue(&v191, (uint64_t)&v231);
    v99 = v192;
    if (v192)
    {
      v100 = (unint64_t *)&v192->__shared_owners_;
      do
        v101 = __ldaxr(v100);
      while (__stlxr(v101 - 1, v100));
      if (!v101)
      {
        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
        std::__shared_weak_count::__release_weak(v99);
      }
    }
    v185 = v232;
    v184 = &off_1EA99BC70;
    v186 = v233;
    v232 = 0uLL;
    v187 = v234;
    v233 = 0;
    v234 = 0uLL;
    v102 = v235;
    v235 = 0;
    v188 = v102;
    v189 = v236;
    v190 = 1;
    if (v190)
      MIL::ValueInference::Tensor<unsigned char>::~Tensor(&v184);
    MIL::ValueInference::Tensor<unsigned char>::ToIRTensorValue((uint64_t)&v227, *a1, &v219);
    v103 = v219;
    v256 = v219;
    v219 = 0uLL;
    a4[1] = 0;
    a4[2] = 0;
    *a4 = 0;
    *(_QWORD *)&v257 = a4;
    BYTE8(v257) = 0;
    v104 = operator new(0x10uLL);
    *a4 = v104;
    a4[1] = v104;
    a4[2] = v104 + 1;
    *v104 = v103;
    if (*((_QWORD *)&v103 + 1))
    {
      v105 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
      do
        v106 = __ldxr(v105);
      while (__stxr(v106 + 1, v105));
    }
    a4[1] = v104 + 1;
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v256);
    v107 = (std::__shared_weak_count *)*((_QWORD *)&v219 + 1);
    if (*((_QWORD *)&v219 + 1))
    {
      v108 = (unint64_t *)(*((_QWORD *)&v219 + 1) + 8);
      do
        v109 = __ldaxr(v108);
      while (__stlxr(v109 - 1, v108));
      if (!v109)
      {
        ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
        std::__shared_weak_count::__release_weak(v107);
      }
    }
    MIL::ValueInference::Tensor<unsigned char>::~Tensor(&v227);
LABEL_194:
    MIL::ValueInference::Tensor<unsigned char>::~Tensor(&v231);
    goto LABEL_195;
  }
  v200 = v93;
  v201 = v245;
  if (v245)
  {
    v112 = (unint64_t *)&v245->__shared_owners_;
    do
      v113 = __ldxr(v112);
    while (__stxr(v113 + 1, v112));
  }
  MIL::ValueInference::Tensor<signed char>::FromIRTensorValue(&v200, (uint64_t)&v231);
  v114 = v201;
  if (v201)
  {
    v115 = (unint64_t *)&v201->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v194 = v232;
  v193 = &off_1EA99BCA0;
  v195 = v233;
  v232 = 0uLL;
  v196 = v234;
  v233 = 0;
  v234 = 0uLL;
  v117 = v235;
  v235 = 0;
  v197 = v117;
  v198 = v236;
  v199 = 1;
  if (v199)
    MIL::ValueInference::Tensor<signed char>::~Tensor(&v193);
  MIL::ValueInference::Tensor<signed char>::ToIRTensorValue((uint64_t)&v227, *a1, &v219);
  v118 = v219;
  v256 = v219;
  v219 = 0uLL;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  *(_QWORD *)&v257 = a4;
  BYTE8(v257) = 0;
  v119 = operator new(0x10uLL);
  *a4 = v119;
  a4[1] = v119;
  a4[2] = v119 + 1;
  *v119 = v118;
  if (*((_QWORD *)&v118 + 1))
  {
    v120 = (unint64_t *)(*((_QWORD *)&v118 + 1) + 8);
    do
      v121 = __ldxr(v120);
    while (__stxr(v121 + 1, v120));
  }
  a4[1] = v119 + 1;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v256);
  v122 = (std::__shared_weak_count *)*((_QWORD *)&v219 + 1);
  if (*((_QWORD *)&v219 + 1))
  {
    v123 = (unint64_t *)(*((_QWORD *)&v219 + 1) + 8);
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  MIL::ValueInference::Tensor<signed char>::~Tensor(&v227);
LABEL_160:
  MIL::ValueInference::Tensor<signed char>::~Tensor(&v231);
LABEL_195:
  MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(v239);
  MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(__p);
LABEL_211:
  v152 = v245;
  if (v245)
  {
    v153 = (unint64_t *)&v245->__shared_owners_;
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
    }
  }
  v155 = v247;
  if (v247)
  {
    v156 = (unint64_t *)&v247->__shared_owners_;
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
  v158 = v249;
  if (v249)
  {
    v159 = (unint64_t *)&v249->__shared_owners_;
    do
      v160 = __ldaxr(v159);
    while (__stlxr(v160 - 1, v159));
    if (!v160)
    {
      ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
      std::__shared_weak_count::__release_weak(v158);
    }
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v253);
  if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v255.__r_.__value_.__l.__data_);
}

void sub_1E0906380(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2A8]);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v1 - 112);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v1 - 128);
  MIL::ValueInference::Tensor<signed char>::~Tensor(&STACK[0x2F8]);
  MIL::ValueInference::Tensor<float>::~Tensor(&STACK[0x348]);
  MIL::ValueInference::Tensor<float>::~Tensor(&STACK[0x398]);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x3D8]);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x3E8]);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x3F8]);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)(v1 - 208));
  if (*(char *)(v1 - 129) < 0)
    operator delete(*(void **)(v1 - 152));
  _Unwind_Resume(a1);
}

void `anonymous namespace'::QuantizeTensor<signed char,float>(MIL::ParserContext *this@<X0>, MIL::ParserContext *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  _QWORD **v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t ProgramFirstSet;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  void *__p;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  void *v71[2];
  uint64_t v72;
  uint64_t v73;
  _QWORD v74[8];
  void *v75[3];
  _QWORD v76[3];
  _QWORD *v77;
  _QWORD v78[3];
  _QWORD *v79;
  _QWORD v80[3];
  _QWORD *v81;
  _QWORD v82[3];
  _QWORD *v83;
  _QWORD v84[3];
  _QWORD *v85;
  _QWORD v86[3];
  _QWORD *v87;
  _QWORD v88[3];
  _QWORD *v89;
  _QWORD v90[3];
  _QWORD *v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  if ((a4 & 0xFF00000000) == 0)
  {
    v82[0] = &unk_1EA99BD50;
    v82[1] = MIL::MathOps::RealDivOp<float>;
    v83 = v82;
    ProgramFirstSet = MIL::ParserContext::GetProgramFirstSet(this);
    v41 = 0;
    v42 = 0;
    v43 = 0;
    std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v41, *(const void **)ProgramFirstSet, *(_QWORD *)(ProgramFirstSet + 8), (uint64_t)(*(_QWORD *)(ProgramFirstSet + 8) - *(_QWORD *)ProgramFirstSet) >> 3);
    MIL::ValueInference::BinaryOp<float,float>(this, a2, (uint64_t)v82, &v41, (uint64_t)v74);
    if (v41)
    {
      v42 = v41;
      operator delete(v41);
    }
    v18 = v83;
    if (v83 == v82)
    {
      v19 = 4;
      v18 = v82;
    }
    else
    {
      if (!v83)
        goto LABEL_48;
      v19 = 5;
    }
    (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_48:
    v80[0] = &unk_1EA99BE00;
    v80[1] = MIL::MathOps::RoundOp<float>;
    v81 = v80;
    MIL::ValueInference::Tensor<float>::ForEach((uint64_t)v74, (uint64_t)v80, (uint64_t)&v68);
    v29 = v81;
    if (v81 == v80)
    {
      v30 = 4;
      v29 = v80;
    }
    else
    {
      if (!v81)
        goto LABEL_53;
      v30 = 5;
    }
    (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_53:
    if (!*(_BYTE *)(a3 + 64))
      goto LABEL_66;
    MIL::ValueInference::Tensor<signed char>::Cast<float>((_QWORD *)a3, (uint64_t)&v59);
    v78[0] = &unk_1EA99BD50;
    v78[1] = MIL::MathOps::AddOp<float>;
    v79 = v78;
    v31 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v68);
    v38 = 0;
    v39 = 0;
    v40 = 0;
    std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v38, *(const void **)v31, *(_QWORD *)(v31 + 8), (uint64_t)(*(_QWORD *)(v31 + 8) - *(_QWORD *)v31) >> 3);
    MIL::ValueInference::BinaryOp<float,float>(&v68, &v59, (uint64_t)v78, &v38, (uint64_t)&v53);
    if ((_QWORD)v69)
    {
      *((_QWORD *)&v69 + 1) = v69;
      operator delete((void *)v69);
    }
    v69 = v54;
    v70 = v55;
    v55 = 0;
    v54 = 0uLL;
    if (v71[0])
    {
      v71[1] = v71[0];
      operator delete(v71[0]);
    }
    *(_OWORD *)v71 = v56;
    v32 = v57;
    v57 = 0;
    v56 = 0uLL;
    v72 = v32;
    v73 = v58;
    MIL::ValueInference::Tensor<float>::~Tensor(&v53);
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v33 = v79;
    if (v79 == v78)
    {
      v34 = 4;
      v33 = v78;
    }
    else
    {
      if (!v79)
      {
LABEL_65:
        MIL::ValueInference::Tensor<float>::~Tensor(&v59);
LABEL_66:
        v76[0] = &off_1EA9A1428;
        v77 = v76;
        MIL::ValueInference::Tensor<float>::ForEach((uint64_t)&v68, (uint64_t)v76, (uint64_t)&v59);
        if ((_QWORD)v69)
        {
          *((_QWORD *)&v69 + 1) = v69;
          operator delete((void *)v69);
        }
        v69 = v60;
        v70 = v61;
        v61 = 0;
        v60 = 0uLL;
        if (v71[0])
        {
          v71[1] = v71[0];
          operator delete(v71[0]);
        }
        *(_OWORD *)v71 = v62;
        v35 = v63;
        v63 = 0;
        v62 = 0uLL;
        v72 = v35;
        v73 = v64;
        MIL::ValueInference::Tensor<float>::~Tensor(&v59);
        v36 = v77;
        if (v77 == v76)
        {
          v37 = 4;
          v36 = v76;
        }
        else
        {
          if (!v77)
          {
LABEL_75:
            MIL::ValueInference::Tensor<float>::Cast<signed char>(&v68, a5);
            MIL::ValueInference::Tensor<float>::~Tensor(&v68);
            MIL::ValueInference::Tensor<float>::~Tensor(v74);
            return;
          }
          v37 = 5;
        }
        (*(void (**)(void))(*v36 + 8 * v37))();
        goto LABEL_75;
      }
      v34 = 5;
    }
    (*(void (**)(void))(*v33 + 8 * v34))();
    goto LABEL_65;
  }
  v9 = a4;
  v10 = (_QWORD *)MIL::ParserContext::GetProgramFirstSet(this);
  v11 = (uint64_t)(v10[1] - *v10) >> 3;
  if (v9 < 0)
    v12 = (uint64_t)(v10[1] - *v10) >> 3;
  else
    v12 = 0;
  v74[0] = 1;
  std::vector<unsigned long long>::vector(v75, v11 - (v12 + v9), v74);
  v13 = (_QWORD **)MIL::ParserContext::GetProgramFirstSet(a2);
  *(_QWORD *)v75[0] = **v13;
  MIL::ValueInference::Tensor<float>::Reshape(a2, (uint64_t *)v75, (uint64_t)v74);
  v90[0] = &unk_1EA99BD50;
  v90[1] = MIL::MathOps::RealDivOp<float>;
  v91 = v90;
  v14 = MIL::ParserContext::GetProgramFirstSet(this);
  __p = 0;
  v66 = 0;
  v67 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)v14, *(_QWORD *)(v14 + 8), (uint64_t)(*(_QWORD *)(v14 + 8) - *(_QWORD *)v14) >> 3);
  MIL::ValueInference::BinaryOp<float,float>(this, v74, (uint64_t)v90, &__p, (uint64_t)&v68);
  if (__p)
  {
    v66 = __p;
    operator delete(__p);
  }
  v15 = v91;
  if (v91 == v90)
  {
    v16 = 4;
    v15 = v90;
  }
  else
  {
    if (!v91)
      goto LABEL_17;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_17:
  v88[0] = &unk_1EA99BE00;
  v88[1] = MIL::MathOps::RoundOp<float>;
  v89 = v88;
  MIL::ValueInference::Tensor<float>::ForEach((uint64_t)&v68, (uint64_t)v88, (uint64_t)&v59);
  v20 = v89;
  if (v89 == v88)
  {
    v21 = 4;
    v20 = v88;
  }
  else
  {
    if (!v89)
      goto LABEL_22;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_22:
  if (!*(_BYTE *)(a3 + 64))
    goto LABEL_35;
  MIL::ValueInference::Tensor<signed char>::Reshape((_QWORD *)a3, (uint64_t *)v75, (uint64_t)&v47);
  MIL::ValueInference::Tensor<signed char>::Cast<float>(&v47, (uint64_t)&v53);
  MIL::ValueInference::Tensor<signed char>::~Tensor(&v47);
  v86[0] = &unk_1EA99BD50;
  v86[1] = MIL::MathOps::AddOp<float>;
  v87 = v86;
  v22 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v59);
  v44 = 0;
  v45 = 0;
  v46 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v44, *(const void **)v22, *(_QWORD *)(v22 + 8), (uint64_t)(*(_QWORD *)(v22 + 8) - *(_QWORD *)v22) >> 3);
  MIL::ValueInference::BinaryOp<float,float>(&v59, &v53, (uint64_t)v86, &v44, (uint64_t)&v47);
  if ((_QWORD)v60)
  {
    *((_QWORD *)&v60 + 1) = v60;
    operator delete((void *)v60);
  }
  v60 = v48;
  v61 = v49;
  v49 = 0;
  v48 = 0uLL;
  if ((_QWORD)v62)
  {
    *((_QWORD *)&v62 + 1) = v62;
    operator delete((void *)v62);
  }
  v62 = v50;
  v23 = v51;
  v51 = 0;
  v50 = 0uLL;
  v63 = v23;
  v64 = v52;
  MIL::ValueInference::Tensor<float>::~Tensor(&v47);
  if (v44)
  {
    v45 = v44;
    operator delete(v44);
  }
  v24 = v87;
  if (v87 == v86)
  {
    v25 = 4;
    v24 = v86;
    goto LABEL_33;
  }
  if (v87)
  {
    v25 = 5;
LABEL_33:
    (*(void (**)(void))(*v24 + 8 * v25))();
  }
  MIL::ValueInference::Tensor<float>::~Tensor(&v53);
LABEL_35:
  v84[0] = &off_1EA9A13A8;
  v85 = v84;
  MIL::ValueInference::Tensor<float>::ForEach((uint64_t)&v59, (uint64_t)v84, (uint64_t)&v53);
  if ((_QWORD)v60)
  {
    *((_QWORD *)&v60 + 1) = v60;
    operator delete((void *)v60);
  }
  v60 = v54;
  v61 = v55;
  v55 = 0;
  v54 = 0uLL;
  if ((_QWORD)v62)
  {
    *((_QWORD *)&v62 + 1) = v62;
    operator delete((void *)v62);
  }
  v62 = v56;
  v26 = v57;
  v57 = 0;
  v56 = 0uLL;
  v63 = v26;
  v64 = v58;
  MIL::ValueInference::Tensor<float>::~Tensor(&v53);
  v27 = v85;
  if (v85 == v84)
  {
    v28 = 4;
    v27 = v84;
  }
  else
  {
    if (!v85)
      goto LABEL_44;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_44:
  MIL::ValueInference::Tensor<float>::Cast<signed char>(&v59, a5);
  MIL::ValueInference::Tensor<float>::~Tensor(&v59);
  MIL::ValueInference::Tensor<float>::~Tensor(&v68);
  MIL::ValueInference::Tensor<float>::~Tensor(v74);
  if (v75[0])
  {
    v75[1] = v75[0];
    operator delete(v75[0]);
  }
}

void sub_1E0906E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  char a68;
  uint64_t a71;
  _QWORD *v72;
  uint64_t v73;

  if (__p)
    operator delete(__p);
  v72 = (_QWORD *)a71;
  if ((char *)a71 == &a68)
  {
    v73 = 4;
    v72 = &a68;
  }
  else
  {
    if (!a71)
      goto LABEL_8;
    v73 = 5;
  }
  (*(void (**)(void))(*v72 + 8 * v73))();
LABEL_8:
  MIL::ValueInference::Tensor<float>::~Tensor(&a34);
  MIL::ValueInference::Tensor<float>::~Tensor(&a45);
  MIL::ValueInference::Tensor<float>::~Tensor(&a53);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::QuantizeTensor<unsigned char,float>(MIL::ParserContext *this@<X0>, MIL::ParserContext *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  _QWORD **v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t ProgramFirstSet;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  void *__p;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  void *v71[2];
  uint64_t v72;
  uint64_t v73;
  _QWORD v74[8];
  void *v75[3];
  _QWORD v76[3];
  _QWORD *v77;
  _QWORD v78[3];
  _QWORD *v79;
  _QWORD v80[3];
  _QWORD *v81;
  _QWORD v82[3];
  _QWORD *v83;
  _QWORD v84[3];
  _QWORD *v85;
  _QWORD v86[3];
  _QWORD *v87;
  _QWORD v88[3];
  _QWORD *v89;
  _QWORD v90[3];
  _QWORD *v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  if ((a4 & 0xFF00000000) == 0)
  {
    v82[0] = &unk_1EA99BD50;
    v82[1] = MIL::MathOps::RealDivOp<float>;
    v83 = v82;
    ProgramFirstSet = MIL::ParserContext::GetProgramFirstSet(this);
    v41 = 0;
    v42 = 0;
    v43 = 0;
    std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v41, *(const void **)ProgramFirstSet, *(_QWORD *)(ProgramFirstSet + 8), (uint64_t)(*(_QWORD *)(ProgramFirstSet + 8) - *(_QWORD *)ProgramFirstSet) >> 3);
    MIL::ValueInference::BinaryOp<float,float>(this, a2, (uint64_t)v82, &v41, (uint64_t)v74);
    if (v41)
    {
      v42 = v41;
      operator delete(v41);
    }
    v18 = v83;
    if (v83 == v82)
    {
      v19 = 4;
      v18 = v82;
    }
    else
    {
      if (!v83)
        goto LABEL_48;
      v19 = 5;
    }
    (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_48:
    v80[0] = &unk_1EA99BE00;
    v80[1] = MIL::MathOps::RoundOp<float>;
    v81 = v80;
    MIL::ValueInference::Tensor<float>::ForEach((uint64_t)v74, (uint64_t)v80, (uint64_t)&v68);
    v29 = v81;
    if (v81 == v80)
    {
      v30 = 4;
      v29 = v80;
    }
    else
    {
      if (!v81)
        goto LABEL_53;
      v30 = 5;
    }
    (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_53:
    if (!*(_BYTE *)(a3 + 64))
      goto LABEL_66;
    MIL::ValueInference::Tensor<unsigned char>::Cast<float>((_QWORD *)a3, (uint64_t)&v59);
    v78[0] = &unk_1EA99BD50;
    v78[1] = MIL::MathOps::AddOp<float>;
    v79 = v78;
    v31 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v68);
    v38 = 0;
    v39 = 0;
    v40 = 0;
    std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v38, *(const void **)v31, *(_QWORD *)(v31 + 8), (uint64_t)(*(_QWORD *)(v31 + 8) - *(_QWORD *)v31) >> 3);
    MIL::ValueInference::BinaryOp<float,float>(&v68, &v59, (uint64_t)v78, &v38, (uint64_t)&v53);
    if ((_QWORD)v69)
    {
      *((_QWORD *)&v69 + 1) = v69;
      operator delete((void *)v69);
    }
    v69 = v54;
    v70 = v55;
    v55 = 0;
    v54 = 0uLL;
    if (v71[0])
    {
      v71[1] = v71[0];
      operator delete(v71[0]);
    }
    *(_OWORD *)v71 = v56;
    v32 = v57;
    v57 = 0;
    v56 = 0uLL;
    v72 = v32;
    v73 = v58;
    MIL::ValueInference::Tensor<float>::~Tensor(&v53);
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v33 = v79;
    if (v79 == v78)
    {
      v34 = 4;
      v33 = v78;
    }
    else
    {
      if (!v79)
      {
LABEL_65:
        MIL::ValueInference::Tensor<float>::~Tensor(&v59);
LABEL_66:
        v76[0] = &off_1EA9A1528;
        v77 = v76;
        MIL::ValueInference::Tensor<float>::ForEach((uint64_t)&v68, (uint64_t)v76, (uint64_t)&v59);
        if ((_QWORD)v69)
        {
          *((_QWORD *)&v69 + 1) = v69;
          operator delete((void *)v69);
        }
        v69 = v60;
        v70 = v61;
        v61 = 0;
        v60 = 0uLL;
        if (v71[0])
        {
          v71[1] = v71[0];
          operator delete(v71[0]);
        }
        *(_OWORD *)v71 = v62;
        v35 = v63;
        v63 = 0;
        v62 = 0uLL;
        v72 = v35;
        v73 = v64;
        MIL::ValueInference::Tensor<float>::~Tensor(&v59);
        v36 = v77;
        if (v77 == v76)
        {
          v37 = 4;
          v36 = v76;
        }
        else
        {
          if (!v77)
          {
LABEL_75:
            MIL::ValueInference::Tensor<float>::Cast<unsigned char>(&v68, a5);
            MIL::ValueInference::Tensor<float>::~Tensor(&v68);
            MIL::ValueInference::Tensor<float>::~Tensor(v74);
            return;
          }
          v37 = 5;
        }
        (*(void (**)(void))(*v36 + 8 * v37))();
        goto LABEL_75;
      }
      v34 = 5;
    }
    (*(void (**)(void))(*v33 + 8 * v34))();
    goto LABEL_65;
  }
  v9 = a4;
  v10 = (_QWORD *)MIL::ParserContext::GetProgramFirstSet(this);
  v11 = (uint64_t)(v10[1] - *v10) >> 3;
  if (v9 < 0)
    v12 = (uint64_t)(v10[1] - *v10) >> 3;
  else
    v12 = 0;
  v74[0] = 1;
  std::vector<unsigned long long>::vector(v75, v11 - (v12 + v9), v74);
  v13 = (_QWORD **)MIL::ParserContext::GetProgramFirstSet(a2);
  *(_QWORD *)v75[0] = **v13;
  MIL::ValueInference::Tensor<float>::Reshape(a2, (uint64_t *)v75, (uint64_t)v74);
  v90[0] = &unk_1EA99BD50;
  v90[1] = MIL::MathOps::RealDivOp<float>;
  v91 = v90;
  v14 = MIL::ParserContext::GetProgramFirstSet(this);
  __p = 0;
  v66 = 0;
  v67 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)v14, *(_QWORD *)(v14 + 8), (uint64_t)(*(_QWORD *)(v14 + 8) - *(_QWORD *)v14) >> 3);
  MIL::ValueInference::BinaryOp<float,float>(this, v74, (uint64_t)v90, &__p, (uint64_t)&v68);
  if (__p)
  {
    v66 = __p;
    operator delete(__p);
  }
  v15 = v91;
  if (v91 == v90)
  {
    v16 = 4;
    v15 = v90;
  }
  else
  {
    if (!v91)
      goto LABEL_17;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_17:
  v88[0] = &unk_1EA99BE00;
  v88[1] = MIL::MathOps::RoundOp<float>;
  v89 = v88;
  MIL::ValueInference::Tensor<float>::ForEach((uint64_t)&v68, (uint64_t)v88, (uint64_t)&v59);
  v20 = v89;
  if (v89 == v88)
  {
    v21 = 4;
    v20 = v88;
  }
  else
  {
    if (!v89)
      goto LABEL_22;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_22:
  if (!*(_BYTE *)(a3 + 64))
    goto LABEL_35;
  MIL::ValueInference::Tensor<unsigned char>::Reshape((_QWORD *)a3, (uint64_t *)v75, (uint64_t)&v47);
  MIL::ValueInference::Tensor<unsigned char>::Cast<float>(&v47, (uint64_t)&v53);
  MIL::ValueInference::Tensor<unsigned char>::~Tensor(&v47);
  v86[0] = &unk_1EA99BD50;
  v86[1] = MIL::MathOps::AddOp<float>;
  v87 = v86;
  v22 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v59);
  v44 = 0;
  v45 = 0;
  v46 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v44, *(const void **)v22, *(_QWORD *)(v22 + 8), (uint64_t)(*(_QWORD *)(v22 + 8) - *(_QWORD *)v22) >> 3);
  MIL::ValueInference::BinaryOp<float,float>(&v59, &v53, (uint64_t)v86, &v44, (uint64_t)&v47);
  if ((_QWORD)v60)
  {
    *((_QWORD *)&v60 + 1) = v60;
    operator delete((void *)v60);
  }
  v60 = v48;
  v61 = v49;
  v49 = 0;
  v48 = 0uLL;
  if ((_QWORD)v62)
  {
    *((_QWORD *)&v62 + 1) = v62;
    operator delete((void *)v62);
  }
  v62 = v50;
  v23 = v51;
  v51 = 0;
  v50 = 0uLL;
  v63 = v23;
  v64 = v52;
  MIL::ValueInference::Tensor<float>::~Tensor(&v47);
  if (v44)
  {
    v45 = v44;
    operator delete(v44);
  }
  v24 = v87;
  if (v87 == v86)
  {
    v25 = 4;
    v24 = v86;
    goto LABEL_33;
  }
  if (v87)
  {
    v25 = 5;
LABEL_33:
    (*(void (**)(void))(*v24 + 8 * v25))();
  }
  MIL::ValueInference::Tensor<float>::~Tensor(&v53);
LABEL_35:
  v84[0] = &off_1EA9A14A8;
  v85 = v84;
  MIL::ValueInference::Tensor<float>::ForEach((uint64_t)&v59, (uint64_t)v84, (uint64_t)&v53);
  if ((_QWORD)v60)
  {
    *((_QWORD *)&v60 + 1) = v60;
    operator delete((void *)v60);
  }
  v60 = v54;
  v61 = v55;
  v55 = 0;
  v54 = 0uLL;
  if ((_QWORD)v62)
  {
    *((_QWORD *)&v62 + 1) = v62;
    operator delete((void *)v62);
  }
  v62 = v56;
  v26 = v57;
  v57 = 0;
  v56 = 0uLL;
  v63 = v26;
  v64 = v58;
  MIL::ValueInference::Tensor<float>::~Tensor(&v53);
  v27 = v85;
  if (v85 == v84)
  {
    v28 = 4;
    v27 = v84;
  }
  else
  {
    if (!v85)
      goto LABEL_44;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_44:
  MIL::ValueInference::Tensor<float>::Cast<unsigned char>(&v59, a5);
  MIL::ValueInference::Tensor<float>::~Tensor(&v59);
  MIL::ValueInference::Tensor<float>::~Tensor(&v68);
  MIL::ValueInference::Tensor<float>::~Tensor(v74);
  if (v75[0])
  {
    v75[1] = v75[0];
    operator delete(v75[0]);
  }
}

void sub_1E09077F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  char a68;
  uint64_t a71;
  _QWORD *v72;
  uint64_t v73;

  if (__p)
    operator delete(__p);
  v72 = (_QWORD *)a71;
  if ((char *)a71 == &a68)
  {
    v73 = 4;
    v72 = &a68;
  }
  else
  {
    if (!a71)
      goto LABEL_8;
    v73 = 5;
  }
  (*(void (**)(void))(*v72 + 8 * v73))();
LABEL_8:
  MIL::ValueInference::Tensor<float>::~Tensor(&a34);
  MIL::ValueInference::Tensor<float>::~Tensor(&a45);
  MIL::ValueInference::Tensor<float>::~Tensor(&a53);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::QuantizeTensor<signed char,MIL::Fp16>(MIL::ParserContext *this@<X0>, MIL::ParserContext *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  _QWORD **v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t ProgramFirstSet;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  void *__p;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  void *v71[2];
  uint64_t v72;
  uint64_t v73;
  _QWORD v74[8];
  void *v75[3];
  _QWORD v76[3];
  _QWORD *v77;
  _QWORD v78[3];
  _QWORD *v79;
  _QWORD v80[3];
  _QWORD *v81;
  _QWORD v82[3];
  _QWORD *v83;
  _QWORD v84[3];
  _QWORD *v85;
  _QWORD v86[3];
  _QWORD *v87;
  _QWORD v88[3];
  _QWORD *v89;
  _QWORD v90[3];
  _QWORD *v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  if ((a4 & 0xFF00000000) == 0)
  {
    v82[0] = &unk_1EA99FCD8;
    v82[1] = MIL::MathOps::RealDivOp<MIL::Fp16>;
    v83 = v82;
    ProgramFirstSet = MIL::ParserContext::GetProgramFirstSet(this);
    v41 = 0;
    v42 = 0;
    v43 = 0;
    std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v41, *(const void **)ProgramFirstSet, *(_QWORD *)(ProgramFirstSet + 8), (uint64_t)(*(_QWORD *)(ProgramFirstSet + 8) - *(_QWORD *)ProgramFirstSet) >> 3);
    MIL::ValueInference::BinaryOp<MIL::Fp16,MIL::Fp16>(this, a2, (uint64_t)v82, &v41, (uint64_t)v74);
    if (v41)
    {
      v42 = v41;
      operator delete(v41);
    }
    v18 = v83;
    if (v83 == v82)
    {
      v19 = 4;
      v18 = v82;
    }
    else
    {
      if (!v83)
        goto LABEL_48;
      v19 = 5;
    }
    (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_48:
    v80[0] = &unk_1EA9A0428;
    v80[1] = MIL::MathOps::RoundOp<MIL::Fp16>;
    v81 = v80;
    MIL::ValueInference::Tensor<MIL::Fp16>::ForEach((uint64_t)v74, (uint64_t)v80, (uint64_t)&v68);
    v29 = v81;
    if (v81 == v80)
    {
      v30 = 4;
      v29 = v80;
    }
    else
    {
      if (!v81)
        goto LABEL_53;
      v30 = 5;
    }
    (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_53:
    if (!*(_BYTE *)(a3 + 64))
      goto LABEL_66;
    MIL::ValueInference::Tensor<signed char>::Cast<MIL::Fp16>((_QWORD *)a3, (uint64_t)&v59);
    v78[0] = &unk_1EA99FCD8;
    v78[1] = MIL::MathOps::AddOp<MIL::Fp16>;
    v79 = v78;
    v31 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v68);
    v38 = 0;
    v39 = 0;
    v40 = 0;
    std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v38, *(const void **)v31, *(_QWORD *)(v31 + 8), (uint64_t)(*(_QWORD *)(v31 + 8) - *(_QWORD *)v31) >> 3);
    MIL::ValueInference::BinaryOp<MIL::Fp16,MIL::Fp16>(&v68, &v59, (uint64_t)v78, &v38, (uint64_t)&v53);
    if ((_QWORD)v69)
    {
      *((_QWORD *)&v69 + 1) = v69;
      operator delete((void *)v69);
    }
    v69 = v54;
    v70 = v55;
    v55 = 0;
    v54 = 0uLL;
    if (v71[0])
    {
      v71[1] = v71[0];
      operator delete(v71[0]);
    }
    *(_OWORD *)v71 = v56;
    v32 = v57;
    v57 = 0;
    v56 = 0uLL;
    v72 = v32;
    v73 = v58;
    MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v53);
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v33 = v79;
    if (v79 == v78)
    {
      v34 = 4;
      v33 = v78;
    }
    else
    {
      if (!v79)
      {
LABEL_65:
        MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v59);
LABEL_66:
        v76[0] = &off_1EA9A1628;
        v77 = v76;
        MIL::ValueInference::Tensor<MIL::Fp16>::ForEach((uint64_t)&v68, (uint64_t)v76, (uint64_t)&v59);
        if ((_QWORD)v69)
        {
          *((_QWORD *)&v69 + 1) = v69;
          operator delete((void *)v69);
        }
        v69 = v60;
        v70 = v61;
        v61 = 0;
        v60 = 0uLL;
        if (v71[0])
        {
          v71[1] = v71[0];
          operator delete(v71[0]);
        }
        *(_OWORD *)v71 = v62;
        v35 = v63;
        v63 = 0;
        v62 = 0uLL;
        v72 = v35;
        v73 = v64;
        MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v59);
        v36 = v77;
        if (v77 == v76)
        {
          v37 = 4;
          v36 = v76;
        }
        else
        {
          if (!v77)
          {
LABEL_75:
            MIL::ValueInference::Tensor<MIL::Fp16>::Cast<signed char>(&v68, a5);
            MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v68);
            MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(v74);
            return;
          }
          v37 = 5;
        }
        (*(void (**)(void))(*v36 + 8 * v37))();
        goto LABEL_75;
      }
      v34 = 5;
    }
    (*(void (**)(void))(*v33 + 8 * v34))();
    goto LABEL_65;
  }
  v9 = a4;
  v10 = (_QWORD *)MIL::ParserContext::GetProgramFirstSet(this);
  v11 = (uint64_t)(v10[1] - *v10) >> 3;
  if (v9 < 0)
    v12 = (uint64_t)(v10[1] - *v10) >> 3;
  else
    v12 = 0;
  v74[0] = 1;
  std::vector<unsigned long long>::vector(v75, v11 - (v12 + v9), v74);
  v13 = (_QWORD **)MIL::ParserContext::GetProgramFirstSet(a2);
  *(_QWORD *)v75[0] = **v13;
  MIL::ValueInference::Tensor<MIL::Fp16>::Reshape(a2, (uint64_t *)v75, (uint64_t)v74);
  v90[0] = &unk_1EA99FCD8;
  v90[1] = MIL::MathOps::RealDivOp<MIL::Fp16>;
  v91 = v90;
  v14 = MIL::ParserContext::GetProgramFirstSet(this);
  __p = 0;
  v66 = 0;
  v67 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)v14, *(_QWORD *)(v14 + 8), (uint64_t)(*(_QWORD *)(v14 + 8) - *(_QWORD *)v14) >> 3);
  MIL::ValueInference::BinaryOp<MIL::Fp16,MIL::Fp16>(this, v74, (uint64_t)v90, &__p, (uint64_t)&v68);
  if (__p)
  {
    v66 = __p;
    operator delete(__p);
  }
  v15 = v91;
  if (v91 == v90)
  {
    v16 = 4;
    v15 = v90;
  }
  else
  {
    if (!v91)
      goto LABEL_17;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_17:
  v88[0] = &unk_1EA9A0428;
  v88[1] = MIL::MathOps::RoundOp<MIL::Fp16>;
  v89 = v88;
  MIL::ValueInference::Tensor<MIL::Fp16>::ForEach((uint64_t)&v68, (uint64_t)v88, (uint64_t)&v59);
  v20 = v89;
  if (v89 == v88)
  {
    v21 = 4;
    v20 = v88;
  }
  else
  {
    if (!v89)
      goto LABEL_22;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_22:
  if (!*(_BYTE *)(a3 + 64))
    goto LABEL_35;
  MIL::ValueInference::Tensor<signed char>::Reshape((_QWORD *)a3, (uint64_t *)v75, (uint64_t)&v47);
  MIL::ValueInference::Tensor<signed char>::Cast<MIL::Fp16>(&v47, (uint64_t)&v53);
  MIL::ValueInference::Tensor<signed char>::~Tensor(&v47);
  v86[0] = &unk_1EA99FCD8;
  v86[1] = MIL::MathOps::AddOp<MIL::Fp16>;
  v87 = v86;
  v22 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v59);
  v44 = 0;
  v45 = 0;
  v46 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v44, *(const void **)v22, *(_QWORD *)(v22 + 8), (uint64_t)(*(_QWORD *)(v22 + 8) - *(_QWORD *)v22) >> 3);
  MIL::ValueInference::BinaryOp<MIL::Fp16,MIL::Fp16>(&v59, &v53, (uint64_t)v86, &v44, (uint64_t)&v47);
  if ((_QWORD)v60)
  {
    *((_QWORD *)&v60 + 1) = v60;
    operator delete((void *)v60);
  }
  v60 = v48;
  v61 = v49;
  v49 = 0;
  v48 = 0uLL;
  if ((_QWORD)v62)
  {
    *((_QWORD *)&v62 + 1) = v62;
    operator delete((void *)v62);
  }
  v62 = v50;
  v23 = v51;
  v51 = 0;
  v50 = 0uLL;
  v63 = v23;
  v64 = v52;
  MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v47);
  if (v44)
  {
    v45 = v44;
    operator delete(v44);
  }
  v24 = v87;
  if (v87 == v86)
  {
    v25 = 4;
    v24 = v86;
    goto LABEL_33;
  }
  if (v87)
  {
    v25 = 5;
LABEL_33:
    (*(void (**)(void))(*v24 + 8 * v25))();
  }
  MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v53);
LABEL_35:
  v84[0] = &off_1EA9A15A8;
  v85 = v84;
  MIL::ValueInference::Tensor<MIL::Fp16>::ForEach((uint64_t)&v59, (uint64_t)v84, (uint64_t)&v53);
  if ((_QWORD)v60)
  {
    *((_QWORD *)&v60 + 1) = v60;
    operator delete((void *)v60);
  }
  v60 = v54;
  v61 = v55;
  v55 = 0;
  v54 = 0uLL;
  if ((_QWORD)v62)
  {
    *((_QWORD *)&v62 + 1) = v62;
    operator delete((void *)v62);
  }
  v62 = v56;
  v26 = v57;
  v57 = 0;
  v56 = 0uLL;
  v63 = v26;
  v64 = v58;
  MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v53);
  v27 = v85;
  if (v85 == v84)
  {
    v28 = 4;
    v27 = v84;
  }
  else
  {
    if (!v85)
      goto LABEL_44;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_44:
  MIL::ValueInference::Tensor<MIL::Fp16>::Cast<signed char>(&v59, a5);
  MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v59);
  MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v68);
  MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(v74);
  if (v75[0])
  {
    v75[1] = v75[0];
    operator delete(v75[0]);
  }
}

void sub_1E0908174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  char a68;
  uint64_t a71;
  _QWORD *v72;
  uint64_t v73;

  if (__p)
    operator delete(__p);
  v72 = (_QWORD *)a71;
  if ((char *)a71 == &a68)
  {
    v73 = 4;
    v72 = &a68;
  }
  else
  {
    if (!a71)
      goto LABEL_8;
    v73 = 5;
  }
  (*(void (**)(void))(*v72 + 8 * v73))();
LABEL_8:
  MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&a34);
  MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&a45);
  MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&a53);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::QuantizeTensor<unsigned char,MIL::Fp16>(MIL::ParserContext *this@<X0>, MIL::ParserContext *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  _QWORD **v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t ProgramFirstSet;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  void *__p;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  void *v71[2];
  uint64_t v72;
  uint64_t v73;
  _QWORD v74[8];
  void *v75[3];
  _QWORD v76[3];
  _QWORD *v77;
  _QWORD v78[3];
  _QWORD *v79;
  _QWORD v80[3];
  _QWORD *v81;
  _QWORD v82[3];
  _QWORD *v83;
  _QWORD v84[3];
  _QWORD *v85;
  _QWORD v86[3];
  _QWORD *v87;
  _QWORD v88[3];
  _QWORD *v89;
  _QWORD v90[3];
  _QWORD *v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  if ((a4 & 0xFF00000000) == 0)
  {
    v82[0] = &unk_1EA99FCD8;
    v82[1] = MIL::MathOps::RealDivOp<MIL::Fp16>;
    v83 = v82;
    ProgramFirstSet = MIL::ParserContext::GetProgramFirstSet(this);
    v41 = 0;
    v42 = 0;
    v43 = 0;
    std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v41, *(const void **)ProgramFirstSet, *(_QWORD *)(ProgramFirstSet + 8), (uint64_t)(*(_QWORD *)(ProgramFirstSet + 8) - *(_QWORD *)ProgramFirstSet) >> 3);
    MIL::ValueInference::BinaryOp<MIL::Fp16,MIL::Fp16>(this, a2, (uint64_t)v82, &v41, (uint64_t)v74);
    if (v41)
    {
      v42 = v41;
      operator delete(v41);
    }
    v18 = v83;
    if (v83 == v82)
    {
      v19 = 4;
      v18 = v82;
    }
    else
    {
      if (!v83)
        goto LABEL_48;
      v19 = 5;
    }
    (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_48:
    v80[0] = &unk_1EA9A0428;
    v80[1] = MIL::MathOps::RoundOp<MIL::Fp16>;
    v81 = v80;
    MIL::ValueInference::Tensor<MIL::Fp16>::ForEach((uint64_t)v74, (uint64_t)v80, (uint64_t)&v68);
    v29 = v81;
    if (v81 == v80)
    {
      v30 = 4;
      v29 = v80;
    }
    else
    {
      if (!v81)
        goto LABEL_53;
      v30 = 5;
    }
    (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_53:
    if (!*(_BYTE *)(a3 + 64))
      goto LABEL_66;
    MIL::ValueInference::Tensor<unsigned char>::Cast<MIL::Fp16>((_QWORD *)a3, (uint64_t)&v59);
    v78[0] = &unk_1EA99FCD8;
    v78[1] = MIL::MathOps::AddOp<MIL::Fp16>;
    v79 = v78;
    v31 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v68);
    v38 = 0;
    v39 = 0;
    v40 = 0;
    std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v38, *(const void **)v31, *(_QWORD *)(v31 + 8), (uint64_t)(*(_QWORD *)(v31 + 8) - *(_QWORD *)v31) >> 3);
    MIL::ValueInference::BinaryOp<MIL::Fp16,MIL::Fp16>(&v68, &v59, (uint64_t)v78, &v38, (uint64_t)&v53);
    if ((_QWORD)v69)
    {
      *((_QWORD *)&v69 + 1) = v69;
      operator delete((void *)v69);
    }
    v69 = v54;
    v70 = v55;
    v55 = 0;
    v54 = 0uLL;
    if (v71[0])
    {
      v71[1] = v71[0];
      operator delete(v71[0]);
    }
    *(_OWORD *)v71 = v56;
    v32 = v57;
    v57 = 0;
    v56 = 0uLL;
    v72 = v32;
    v73 = v58;
    MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v53);
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    v33 = v79;
    if (v79 == v78)
    {
      v34 = 4;
      v33 = v78;
    }
    else
    {
      if (!v79)
      {
LABEL_65:
        MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v59);
LABEL_66:
        v76[0] = &off_1EA9A1728;
        v77 = v76;
        MIL::ValueInference::Tensor<MIL::Fp16>::ForEach((uint64_t)&v68, (uint64_t)v76, (uint64_t)&v59);
        if ((_QWORD)v69)
        {
          *((_QWORD *)&v69 + 1) = v69;
          operator delete((void *)v69);
        }
        v69 = v60;
        v70 = v61;
        v61 = 0;
        v60 = 0uLL;
        if (v71[0])
        {
          v71[1] = v71[0];
          operator delete(v71[0]);
        }
        *(_OWORD *)v71 = v62;
        v35 = v63;
        v63 = 0;
        v62 = 0uLL;
        v72 = v35;
        v73 = v64;
        MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v59);
        v36 = v77;
        if (v77 == v76)
        {
          v37 = 4;
          v36 = v76;
        }
        else
        {
          if (!v77)
          {
LABEL_75:
            MIL::ValueInference::Tensor<MIL::Fp16>::Cast<unsigned char>(&v68, a5);
            MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v68);
            MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(v74);
            return;
          }
          v37 = 5;
        }
        (*(void (**)(void))(*v36 + 8 * v37))();
        goto LABEL_75;
      }
      v34 = 5;
    }
    (*(void (**)(void))(*v33 + 8 * v34))();
    goto LABEL_65;
  }
  v9 = a4;
  v10 = (_QWORD *)MIL::ParserContext::GetProgramFirstSet(this);
  v11 = (uint64_t)(v10[1] - *v10) >> 3;
  if (v9 < 0)
    v12 = (uint64_t)(v10[1] - *v10) >> 3;
  else
    v12 = 0;
  v74[0] = 1;
  std::vector<unsigned long long>::vector(v75, v11 - (v12 + v9), v74);
  v13 = (_QWORD **)MIL::ParserContext::GetProgramFirstSet(a2);
  *(_QWORD *)v75[0] = **v13;
  MIL::ValueInference::Tensor<MIL::Fp16>::Reshape(a2, (uint64_t *)v75, (uint64_t)v74);
  v90[0] = &unk_1EA99FCD8;
  v90[1] = MIL::MathOps::RealDivOp<MIL::Fp16>;
  v91 = v90;
  v14 = MIL::ParserContext::GetProgramFirstSet(this);
  __p = 0;
  v66 = 0;
  v67 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)v14, *(_QWORD *)(v14 + 8), (uint64_t)(*(_QWORD *)(v14 + 8) - *(_QWORD *)v14) >> 3);
  MIL::ValueInference::BinaryOp<MIL::Fp16,MIL::Fp16>(this, v74, (uint64_t)v90, &__p, (uint64_t)&v68);
  if (__p)
  {
    v66 = __p;
    operator delete(__p);
  }
  v15 = v91;
  if (v91 == v90)
  {
    v16 = 4;
    v15 = v90;
  }
  else
  {
    if (!v91)
      goto LABEL_17;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_17:
  v88[0] = &unk_1EA9A0428;
  v88[1] = MIL::MathOps::RoundOp<MIL::Fp16>;
  v89 = v88;
  MIL::ValueInference::Tensor<MIL::Fp16>::ForEach((uint64_t)&v68, (uint64_t)v88, (uint64_t)&v59);
  v20 = v89;
  if (v89 == v88)
  {
    v21 = 4;
    v20 = v88;
  }
  else
  {
    if (!v89)
      goto LABEL_22;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_22:
  if (!*(_BYTE *)(a3 + 64))
    goto LABEL_35;
  MIL::ValueInference::Tensor<unsigned char>::Reshape((_QWORD *)a3, (uint64_t *)v75, (uint64_t)&v47);
  MIL::ValueInference::Tensor<unsigned char>::Cast<MIL::Fp16>(&v47, (uint64_t)&v53);
  MIL::ValueInference::Tensor<unsigned char>::~Tensor(&v47);
  v86[0] = &unk_1EA99FCD8;
  v86[1] = MIL::MathOps::AddOp<MIL::Fp16>;
  v87 = v86;
  v22 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v59);
  v44 = 0;
  v45 = 0;
  v46 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v44, *(const void **)v22, *(_QWORD *)(v22 + 8), (uint64_t)(*(_QWORD *)(v22 + 8) - *(_QWORD *)v22) >> 3);
  MIL::ValueInference::BinaryOp<MIL::Fp16,MIL::Fp16>(&v59, &v53, (uint64_t)v86, &v44, (uint64_t)&v47);
  if ((_QWORD)v60)
  {
    *((_QWORD *)&v60 + 1) = v60;
    operator delete((void *)v60);
  }
  v60 = v48;
  v61 = v49;
  v49 = 0;
  v48 = 0uLL;
  if ((_QWORD)v62)
  {
    *((_QWORD *)&v62 + 1) = v62;
    operator delete((void *)v62);
  }
  v62 = v50;
  v23 = v51;
  v51 = 0;
  v50 = 0uLL;
  v63 = v23;
  v64 = v52;
  MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v47);
  if (v44)
  {
    v45 = v44;
    operator delete(v44);
  }
  v24 = v87;
  if (v87 == v86)
  {
    v25 = 4;
    v24 = v86;
    goto LABEL_33;
  }
  if (v87)
  {
    v25 = 5;
LABEL_33:
    (*(void (**)(void))(*v24 + 8 * v25))();
  }
  MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v53);
LABEL_35:
  v84[0] = &off_1EA9A16A8;
  v85 = v84;
  MIL::ValueInference::Tensor<MIL::Fp16>::ForEach((uint64_t)&v59, (uint64_t)v84, (uint64_t)&v53);
  if ((_QWORD)v60)
  {
    *((_QWORD *)&v60 + 1) = v60;
    operator delete((void *)v60);
  }
  v60 = v54;
  v61 = v55;
  v55 = 0;
  v54 = 0uLL;
  if ((_QWORD)v62)
  {
    *((_QWORD *)&v62 + 1) = v62;
    operator delete((void *)v62);
  }
  v62 = v56;
  v26 = v57;
  v57 = 0;
  v56 = 0uLL;
  v63 = v26;
  v64 = v58;
  MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v53);
  v27 = v85;
  if (v85 == v84)
  {
    v28 = 4;
    v27 = v84;
  }
  else
  {
    if (!v85)
      goto LABEL_44;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_44:
  MIL::ValueInference::Tensor<MIL::Fp16>::Cast<unsigned char>(&v59, a5);
  MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v59);
  MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v68);
  MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(v74);
  if (v75[0])
  {
    v75[1] = v75[0];
    operator delete(v75[0]);
  }
}

void sub_1E0908AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  char a68;
  uint64_t a71;
  _QWORD *v72;
  uint64_t v73;

  if (__p)
    operator delete(__p);
  v72 = (_QWORD *)a71;
  if ((char *)a71 == &a68)
  {
    v73 = 4;
    v72 = &a68;
  }
  else
  {
    if (!a71)
      goto LABEL_8;
    v73 = 5;
  }
  (*(void (**)(void))(*v72 + 8 * v73))();
LABEL_8:
  MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&a34);
  MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&a45);
  MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&a53);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::ValidateCommonInputs(MIL::IRTensorValueType *a1@<X0>, uint64_t *a2@<X1>, MIL::IRTensorValueType *a3@<X2>, unsigned __int8 a4@<W3>, MIL::Validation *a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, uint64_t a8@<X8>)
{
  MIL::IRTensorValueType *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  MIL::IRValueType *v22;
  uint64_t v23;
  int v24;
  float *Data;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _WORD *v30;
  uint64_t v31;
  _QWORD *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  _QWORD *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  std::logic_error *exception;
  MIL::IRValueType *v53;
  uint64_t v54;
  int v55;
  std::string *v56;
  __int128 v57;
  std::string *v58;
  __int128 v59;
  std::string v60;
  std::string v61;
  void *v62;
  char v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  void *__p;
  char v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  std::string v70;
  void *v71;
  char v72;
  uint64_t v73;
  uint64_t v74[2];
  _BYTE v75[8];
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  int v79;

  v16 = (MIL::IRTensorValueType *)(*(uint64_t (**)(uint64_t *))(*a2 + 32))(a2);
  v17 = (std::__shared_weak_count *)a7[1];
  v74[0] = *a7;
  v74[1] = (uint64_t)v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  if (v17)
  {
    v20 = (unint64_t *)&v17->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)v75))
  {
    *(_OWORD *)(a8 + 8) = v76;
    v76 = 0uLL;
    *(_OWORD *)(a8 + 24) = v77;
    *(_QWORD *)(a8 + 40) = v78;
    v77 = 0uLL;
    v78 = 0;
    *(_QWORD *)a8 = &off_1EA99F170;
    *(_DWORD *)(a8 + 48) = v79;
    goto LABEL_57;
  }
  v22 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t *))(*a2 + 32))(a2);
  v23 = MIL::IRValueType::AsTensorType(v22);
  v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 88))(v23);
  if (v24 == 4)
  {
    v28 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(a2);
    if (v29)
    {
      v30 = (_WORD *)v28;
      v31 = 2 * v29;
      while (1)
      {
        LOWORD(v61.__r_.__value_.__l.__data_) = *v30;
        if (MIL::Fp16::GetFloat((MIL::Fp16 *)&v61) <= 0.0)
          break;
        ++v30;
        v31 -= 2;
        if (!v31)
          goto LABEL_22;
      }
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v70);
      v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v70, (uint64_t)"For operator: ", 14);
      v44 = *(char *)(a6 + 23);
      if (v44 >= 0)
        v45 = a6;
      else
        v45 = *(_QWORD *)a6;
      if (v44 >= 0)
        v46 = *(unsigned __int8 *)(a6 + 23);
      else
        v46 = *(_QWORD *)(a6 + 8);
      v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, v45, v46);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)", scale must be positive, but get ", 34);
      MIL::Fp16::GetFloat((MIL::Fp16 *)&v61);
      std::ostream::operator<<();
      v48 = a7[1];
      v64 = *a7;
      v65 = (std::__shared_weak_count *)v48;
      if (v48)
      {
        v49 = (unint64_t *)(v48 + 8);
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
      }
      std::stringbuf::str();
      MIL::ValidationResult::ValidationResult(a8, &v64, 315, &v62);
      if (v63 < 0)
        operator delete(v62);
      v40 = v65;
      if (!v65)
        goto LABEL_54;
      v51 = (unint64_t *)&v65->__shared_owners_;
      do
        v42 = __ldaxr(v51);
      while (__stlxr(v42 - 1, v51));
      goto LABEL_52;
    }
LABEL_22:
    MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a8);
    goto LABEL_57;
  }
  if (v24 != 5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    v53 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t *))(*a2 + 32))(a2);
    v54 = MIL::IRValueType::AsTensorType(v53);
    v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 88))(v54);
    MIL::IRDataTypeToString(v55, &v60);
    v56 = std::string::insert(&v60, 0, "Unsupported Datatype for the scale ");
    v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v57;
    v56->__r_.__value_.__l.__size_ = 0;
    v56->__r_.__value_.__r.__words[2] = 0;
    v56->__r_.__value_.__r.__words[0] = 0;
    v58 = std::string::append(&v61, " , must be fp32 or fp16");
    v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
    v70.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v59;
    v58->__r_.__value_.__l.__size_ = 0;
    v58->__r_.__value_.__r.__words[2] = 0;
    v58->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &v70);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  Data = (float *)MIL::IRTensorValue::GetDataView<float>(a2);
  if (!v26)
    goto LABEL_22;
  v27 = 4 * v26;
  while (*Data > 0.0)
  {
    ++Data;
    v27 -= 4;
    if (!v27)
      goto LABEL_22;
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v70);
  v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v70, (uint64_t)"For operator: ", 14);
  v33 = *(char *)(a6 + 23);
  if (v33 >= 0)
    v34 = a6;
  else
    v34 = *(_QWORD *)a6;
  if (v33 >= 0)
    v35 = *(unsigned __int8 *)(a6 + 23);
  else
    v35 = *(_QWORD *)(a6 + 8);
  v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v34, v35);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)", scale must be positive, but get ", 34);
  std::ostream::operator<<();
  v37 = a7[1];
  v68 = *a7;
  v69 = (std::__shared_weak_count *)v37;
  if (v37)
  {
    v38 = (unint64_t *)(v37 + 8);
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  std::stringbuf::str();
  MIL::ValidationResult::ValidationResult(a8, &v68, 315, &__p);
  if (v67 < 0)
    operator delete(__p);
  v40 = v69;
  if (!v69)
    goto LABEL_54;
  v41 = (unint64_t *)&v69->__shared_owners_;
  do
    v42 = __ldaxr(v41);
  while (__stlxr(v42 - 1, v41));
LABEL_52:
  if (!v42)
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
LABEL_54:
  v70.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F60];
  *(std::string::size_type *)((char *)v70.__r_.__value_.__r.__words + *(_QWORD *)(v70.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v70.__r_.__value_.__l.__size_ = MEMORY[0x1E0DE4FB8] + 16;
  if (v72 < 0)
    operator delete(v71);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1E0C022F8](&v73);
LABEL_57:
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v75);
}

void sub_1E090924C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  void *v44;
  int v45;
  uint64_t v46;

  if (a44 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v45 & 1) == 0)
    {
LABEL_10:
      MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)(v46 - 152));
      _Unwind_Resume(a1);
    }
  }
  else if (!v45)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v44);
  goto LABEL_10;
}

_BYTE *std::__optional_move_base<MIL::ValueInference::Tensor<signed char>,false>::__optional_move_base[abi:ne180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[64] = 0;
  std::__optional_storage_base<MIL::ValueInference::Tensor<signed char>,false>::__construct_from[abi:ne180100]<std::__optional_move_base<MIL::ValueInference::Tensor<signed char>,false>>((uint64_t)a1, a2);
  return a1;
}

__n128 std::__optional_storage_base<MIL::ValueInference::Tensor<signed char>,false>::__construct_from[abi:ne180100]<std::__optional_move_base<MIL::ValueInference::Tensor<signed char>,false>>(uint64_t a1, uint64_t a2)
{
  __n128 result;
  uint64_t v3;

  if (*(_BYTE *)(a2 + 64))
  {
    *(_QWORD *)a1 = &off_1EA99BCA0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    result = *(__n128 *)(a2 + 32);
    *(__n128 *)(a1 + 32) = result;
    v3 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a1 + 56) = v3;
    *(_BYTE *)(a1 + 64) = 1;
  }
  return result;
}

_BYTE *std::__optional_move_base<MIL::ValueInference::Tensor<unsigned char>,false>::__optional_move_base[abi:ne180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[64] = 0;
  std::__optional_storage_base<MIL::ValueInference::Tensor<unsigned char>,false>::__construct_from[abi:ne180100]<std::__optional_move_base<MIL::ValueInference::Tensor<unsigned char>,false>>((uint64_t)a1, a2);
  return a1;
}

__n128 std::__optional_storage_base<MIL::ValueInference::Tensor<unsigned char>,false>::__construct_from[abi:ne180100]<std::__optional_move_base<MIL::ValueInference::Tensor<unsigned char>,false>>(uint64_t a1, uint64_t a2)
{
  __n128 result;
  uint64_t v3;

  if (*(_BYTE *)(a2 + 64))
  {
    *(_QWORD *)a1 = &off_1EA99BC70;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    result = *(__n128 *)(a2 + 32);
    *(__n128 *)(a1 + 32) = result;
    v3 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a1 + 56) = v3;
    *(_BYTE *)(a1 + 64) = 1;
  }
  return result;
}

void std::__function::__func<MIL::ValueInference::Tensor<signed char> `anonymous namespace'::QuantizeTensor<signed char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(float)#1},std::allocator<MIL::ValueInference::Tensor<signed char> `anonymous namespace'::QuantizeTensor<signed char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(float)#1}>,float ()(float)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<MIL::ValueInference::Tensor<signed char> `anonymous namespace'::QuantizeTensor<signed char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(float)#1},std::allocator<MIL::ValueInference::Tensor<signed char> `anonymous namespace'::QuantizeTensor<signed char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(float)#1}>,float ()(float)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1EA9A13A8;
  return result;
}

void std::__function::__func<MIL::ValueInference::Tensor<signed char> `anonymous namespace'::QuantizeTensor<signed char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(float)#1},std::allocator<MIL::ValueInference::Tensor<signed char> `anonymous namespace'::QuantizeTensor<signed char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(float)#1}>,float ()(float)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1EA9A13A8;
}

float std::__function::__func<MIL::ValueInference::Tensor<signed char> `anonymous namespace'::QuantizeTensor<signed char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(float)#1},std::allocator<MIL::ValueInference::Tensor<signed char> `anonymous namespace'::QuantizeTensor<signed char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(float)#1}>,float ()(float)>::operator()(uint64_t a1, float *a2)
{
  float v2;

  v2 = *a2;
  if (*a2 > 127.0)
    v2 = 127.0;
  return fmaxf(v2, -128.0);
}

uint64_t std::__function::__func<MIL::ValueInference::Tensor<signed char> `anonymous namespace'::QuantizeTensor<signed char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(float)#1},std::allocator<MIL::ValueInference::Tensor<signed char> `anonymous namespace'::QuantizeTensor<signed char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(float)#1}>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::ValueInference::Tensor<signed char> `anonymous namespace'::QuantizeTensor<signed char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(float)#1},std::allocator<MIL::ValueInference::Tensor<signed char> `anonymous namespace'::QuantizeTensor<signed char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(float)#1}>,float ()(float)>::target_type()
{
}

void std::__function::__func<MIL::ValueInference::Tensor<signed char> `anonymous namespace'::QuantizeTensor<signed char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(float)#2},std::allocator<MIL::ValueInference::Tensor<signed char> `anonymous namespace'::QuantizeTensor<signed char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(float)#2}>,float ()(float)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<MIL::ValueInference::Tensor<signed char> `anonymous namespace'::QuantizeTensor<signed char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(float)#2},std::allocator<MIL::ValueInference::Tensor<signed char> `anonymous namespace'::QuantizeTensor<signed char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(float)#2}>,float ()(float)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1EA9A1428;
  return result;
}

void std::__function::__func<MIL::ValueInference::Tensor<signed char> `anonymous namespace'::QuantizeTensor<signed char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(float)#2},std::allocator<MIL::ValueInference::Tensor<signed char> `anonymous namespace'::QuantizeTensor<signed char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(float)#2}>,float ()(float)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1EA9A1428;
}

float std::__function::__func<MIL::ValueInference::Tensor<signed char> `anonymous namespace'::QuantizeTensor<signed char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(float)#2},std::allocator<MIL::ValueInference::Tensor<signed char> `anonymous namespace'::QuantizeTensor<signed char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(float)#2}>,float ()(float)>::operator()(uint64_t a1, float *a2)
{
  float v2;

  v2 = *a2;
  if (*a2 > 127.0)
    v2 = 127.0;
  return fmaxf(v2, -128.0);
}

uint64_t std::__function::__func<MIL::ValueInference::Tensor<signed char> `anonymous namespace'::QuantizeTensor<signed char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(float)#2},std::allocator<MIL::ValueInference::Tensor<signed char> `anonymous namespace'::QuantizeTensor<signed char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(float)#2}>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::ValueInference::Tensor<signed char> `anonymous namespace'::QuantizeTensor<signed char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(float)#2},std::allocator<MIL::ValueInference::Tensor<signed char> `anonymous namespace'::QuantizeTensor<signed char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(float)#2}>,float ()(float)>::target_type()
{
}

void std::__function::__func<MIL::ValueInference::Tensor<unsigned char> `anonymous namespace'::QuantizeTensor<unsigned char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(float)#1},std::allocator<MIL::ValueInference::Tensor<unsigned char> `anonymous namespace'::QuantizeTensor<unsigned char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(float)#1}>,float ()(float)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<MIL::ValueInference::Tensor<unsigned char> `anonymous namespace'::QuantizeTensor<unsigned char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(float)#1},std::allocator<MIL::ValueInference::Tensor<unsigned char> `anonymous namespace'::QuantizeTensor<unsigned char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(float)#1}>,float ()(float)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1EA9A14A8;
  return result;
}

void std::__function::__func<MIL::ValueInference::Tensor<unsigned char> `anonymous namespace'::QuantizeTensor<unsigned char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(float)#1},std::allocator<MIL::ValueInference::Tensor<unsigned char> `anonymous namespace'::QuantizeTensor<unsigned char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(float)#1}>,float ()(float)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1EA9A14A8;
}

float std::__function::__func<MIL::ValueInference::Tensor<unsigned char> `anonymous namespace'::QuantizeTensor<unsigned char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(float)#1},std::allocator<MIL::ValueInference::Tensor<unsigned char> `anonymous namespace'::QuantizeTensor<unsigned char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(float)#1}>,float ()(float)>::operator()(uint64_t a1, float *a2)
{
  float v2;

  v2 = *a2;
  if (*a2 > 255.0)
    v2 = 255.0;
  return fmaxf(v2, 0.0);
}

uint64_t std::__function::__func<MIL::ValueInference::Tensor<unsigned char> `anonymous namespace'::QuantizeTensor<unsigned char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(float)#1},std::allocator<MIL::ValueInference::Tensor<unsigned char> `anonymous namespace'::QuantizeTensor<unsigned char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(float)#1}>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::ValueInference::Tensor<unsigned char> `anonymous namespace'::QuantizeTensor<unsigned char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(float)#1},std::allocator<MIL::ValueInference::Tensor<unsigned char> `anonymous namespace'::QuantizeTensor<unsigned char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(float)#1}>,float ()(float)>::target_type()
{
}

void std::__function::__func<MIL::ValueInference::Tensor<unsigned char> `anonymous namespace'::QuantizeTensor<unsigned char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(float)#2},std::allocator<MIL::ValueInference::Tensor<unsigned char> `anonymous namespace'::QuantizeTensor<unsigned char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(float)#2}>,float ()(float)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<MIL::ValueInference::Tensor<unsigned char> `anonymous namespace'::QuantizeTensor<unsigned char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(float)#2},std::allocator<MIL::ValueInference::Tensor<unsigned char> `anonymous namespace'::QuantizeTensor<unsigned char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(float)#2}>,float ()(float)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1EA9A1528;
  return result;
}

void std::__function::__func<MIL::ValueInference::Tensor<unsigned char> `anonymous namespace'::QuantizeTensor<unsigned char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(float)#2},std::allocator<MIL::ValueInference::Tensor<unsigned char> `anonymous namespace'::QuantizeTensor<unsigned char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(float)#2}>,float ()(float)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1EA9A1528;
}

float std::__function::__func<MIL::ValueInference::Tensor<unsigned char> `anonymous namespace'::QuantizeTensor<unsigned char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(float)#2},std::allocator<MIL::ValueInference::Tensor<unsigned char> `anonymous namespace'::QuantizeTensor<unsigned char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(float)#2}>,float ()(float)>::operator()(uint64_t a1, float *a2)
{
  float v2;

  v2 = *a2;
  if (*a2 > 255.0)
    v2 = 255.0;
  return fmaxf(v2, 0.0);
}

uint64_t std::__function::__func<MIL::ValueInference::Tensor<unsigned char> `anonymous namespace'::QuantizeTensor<unsigned char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(float)#2},std::allocator<MIL::ValueInference::Tensor<unsigned char> `anonymous namespace'::QuantizeTensor<unsigned char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(float)#2}>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::ValueInference::Tensor<unsigned char> `anonymous namespace'::QuantizeTensor<unsigned char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(float)#2},std::allocator<MIL::ValueInference::Tensor<unsigned char> `anonymous namespace'::QuantizeTensor<unsigned char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(float)#2}>,float ()(float)>::target_type()
{
}

void std::__function::__func<MIL::ValueInference::Tensor<signed char> `anonymous namespace'::QuantizeTensor<signed char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(MIL::Fp16)#1},std::allocator<MIL::ValueInference::Tensor<signed char> `anonymous namespace'::QuantizeTensor<signed char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<MIL::ValueInference::Tensor<signed char> `anonymous namespace'::QuantizeTensor<signed char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(MIL::Fp16)#1},std::allocator<MIL::ValueInference::Tensor<signed char> `anonymous namespace'::QuantizeTensor<signed char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1EA9A15A8;
  return result;
}

void std::__function::__func<MIL::ValueInference::Tensor<signed char> `anonymous namespace'::QuantizeTensor<signed char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(MIL::Fp16)#1},std::allocator<MIL::ValueInference::Tensor<signed char> `anonymous namespace'::QuantizeTensor<signed char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1EA9A15A8;
}

uint64_t std::__function::__func<MIL::ValueInference::Tensor<signed char> `anonymous namespace'::QuantizeTensor<signed char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(MIL::Fp16)#1},std::allocator<MIL::ValueInference::Tensor<signed char> `anonymous namespace'::QuantizeTensor<signed char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::operator()(MIL::Fp16 *a1, __int16 *a2)
{
  __int16 v2;
  MIL::Fp16 *v3;
  float Float;
  float v5;
  MIL::Fp16 *v6;
  float v7;
  __int16 v9;
  __int16 v10;
  __int16 v11;

  v2 = *a2;
  v3 = (MIL::Fp16 *)MIL::Fp16::FromFloat(a1, -128.0);
  v11 = v2;
  v10 = (__int16)v3;
  v9 = MIL::Fp16::FromFloat(v3, 127.0);
  Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v10);
  v5 = MIL::Fp16::GetFloat((MIL::Fp16 *)&v11);
  v7 = MIL::Fp16::GetFloat((MIL::Fp16 *)&v9);
  if (v7 >= v5)
    v7 = v5;
  if (Float >= v7)
    v7 = Float;
  return MIL::Fp16::FromFloat(v6, v7);
}

uint64_t std::__function::__func<MIL::ValueInference::Tensor<signed char> `anonymous namespace'::QuantizeTensor<signed char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(MIL::Fp16)#1},std::allocator<MIL::ValueInference::Tensor<signed char> `anonymous namespace'::QuantizeTensor<signed char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::ValueInference::Tensor<signed char> `anonymous namespace'::QuantizeTensor<signed char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(MIL::Fp16)#1},std::allocator<MIL::ValueInference::Tensor<signed char> `anonymous namespace'::QuantizeTensor<signed char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

void std::__function::__func<MIL::ValueInference::Tensor<signed char> `anonymous namespace'::QuantizeTensor<signed char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(MIL::Fp16)#2},std::allocator<MIL::ValueInference::Tensor<signed char> `anonymous namespace'::QuantizeTensor<signed char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<MIL::ValueInference::Tensor<signed char> `anonymous namespace'::QuantizeTensor<signed char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(MIL::Fp16)#2},std::allocator<MIL::ValueInference::Tensor<signed char> `anonymous namespace'::QuantizeTensor<signed char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1EA9A1628;
  return result;
}

void std::__function::__func<MIL::ValueInference::Tensor<signed char> `anonymous namespace'::QuantizeTensor<signed char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(MIL::Fp16)#2},std::allocator<MIL::ValueInference::Tensor<signed char> `anonymous namespace'::QuantizeTensor<signed char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1EA9A1628;
}

uint64_t std::__function::__func<MIL::ValueInference::Tensor<signed char> `anonymous namespace'::QuantizeTensor<signed char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(MIL::Fp16)#2},std::allocator<MIL::ValueInference::Tensor<signed char> `anonymous namespace'::QuantizeTensor<signed char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::operator()(MIL::Fp16 *a1, __int16 *a2)
{
  __int16 v2;
  MIL::Fp16 *v3;
  float Float;
  float v5;
  MIL::Fp16 *v6;
  float v7;
  __int16 v9;
  __int16 v10;
  __int16 v11;

  v2 = *a2;
  v3 = (MIL::Fp16 *)MIL::Fp16::FromFloat(a1, -128.0);
  v11 = v2;
  v10 = (__int16)v3;
  v9 = MIL::Fp16::FromFloat(v3, 127.0);
  Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v10);
  v5 = MIL::Fp16::GetFloat((MIL::Fp16 *)&v11);
  v7 = MIL::Fp16::GetFloat((MIL::Fp16 *)&v9);
  if (v7 >= v5)
    v7 = v5;
  if (Float >= v7)
    v7 = Float;
  return MIL::Fp16::FromFloat(v6, v7);
}

uint64_t std::__function::__func<MIL::ValueInference::Tensor<signed char> `anonymous namespace'::QuantizeTensor<signed char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(MIL::Fp16)#2},std::allocator<MIL::ValueInference::Tensor<signed char> `anonymous namespace'::QuantizeTensor<signed char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::ValueInference::Tensor<signed char> `anonymous namespace'::QuantizeTensor<signed char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(MIL::Fp16)#2},std::allocator<MIL::ValueInference::Tensor<signed char> `anonymous namespace'::QuantizeTensor<signed char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

void std::__function::__func<MIL::ValueInference::Tensor<unsigned char> `anonymous namespace'::QuantizeTensor<unsigned char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(MIL::Fp16)#1},std::allocator<MIL::ValueInference::Tensor<unsigned char> `anonymous namespace'::QuantizeTensor<unsigned char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<MIL::ValueInference::Tensor<unsigned char> `anonymous namespace'::QuantizeTensor<unsigned char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(MIL::Fp16)#1},std::allocator<MIL::ValueInference::Tensor<unsigned char> `anonymous namespace'::QuantizeTensor<unsigned char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1EA9A16A8;
  return result;
}

void std::__function::__func<MIL::ValueInference::Tensor<unsigned char> `anonymous namespace'::QuantizeTensor<unsigned char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(MIL::Fp16)#1},std::allocator<MIL::ValueInference::Tensor<unsigned char> `anonymous namespace'::QuantizeTensor<unsigned char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1EA9A16A8;
}

uint64_t std::__function::__func<MIL::ValueInference::Tensor<unsigned char> `anonymous namespace'::QuantizeTensor<unsigned char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(MIL::Fp16)#1},std::allocator<MIL::ValueInference::Tensor<unsigned char> `anonymous namespace'::QuantizeTensor<unsigned char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::operator()(MIL::Fp16 *a1, __int16 *a2)
{
  __int16 v2;
  MIL::Fp16 *v3;
  float Float;
  float v5;
  MIL::Fp16 *v6;
  float v7;
  __int16 v9;
  __int16 v10;
  __int16 v11;

  v2 = *a2;
  v3 = (MIL::Fp16 *)MIL::Fp16::FromFloat(a1, 0.0);
  v11 = v2;
  v10 = (__int16)v3;
  v9 = MIL::Fp16::FromFloat(v3, 255.0);
  Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v10);
  v5 = MIL::Fp16::GetFloat((MIL::Fp16 *)&v11);
  v7 = MIL::Fp16::GetFloat((MIL::Fp16 *)&v9);
  if (v7 >= v5)
    v7 = v5;
  if (Float >= v7)
    v7 = Float;
  return MIL::Fp16::FromFloat(v6, v7);
}

uint64_t std::__function::__func<MIL::ValueInference::Tensor<unsigned char> `anonymous namespace'::QuantizeTensor<unsigned char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(MIL::Fp16)#1},std::allocator<MIL::ValueInference::Tensor<unsigned char> `anonymous namespace'::QuantizeTensor<unsigned char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::ValueInference::Tensor<unsigned char> `anonymous namespace'::QuantizeTensor<unsigned char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(MIL::Fp16)#1},std::allocator<MIL::ValueInference::Tensor<unsigned char> `anonymous namespace'::QuantizeTensor<unsigned char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

void std::__function::__func<MIL::ValueInference::Tensor<unsigned char> `anonymous namespace'::QuantizeTensor<unsigned char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(MIL::Fp16)#2},std::allocator<MIL::ValueInference::Tensor<unsigned char> `anonymous namespace'::QuantizeTensor<unsigned char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<MIL::ValueInference::Tensor<unsigned char> `anonymous namespace'::QuantizeTensor<unsigned char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(MIL::Fp16)#2},std::allocator<MIL::ValueInference::Tensor<unsigned char> `anonymous namespace'::QuantizeTensor<unsigned char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1EA9A1728;
  return result;
}

void std::__function::__func<MIL::ValueInference::Tensor<unsigned char> `anonymous namespace'::QuantizeTensor<unsigned char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(MIL::Fp16)#2},std::allocator<MIL::ValueInference::Tensor<unsigned char> `anonymous namespace'::QuantizeTensor<unsigned char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1EA9A1728;
}

uint64_t std::__function::__func<MIL::ValueInference::Tensor<unsigned char> `anonymous namespace'::QuantizeTensor<unsigned char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(MIL::Fp16)#2},std::allocator<MIL::ValueInference::Tensor<unsigned char> `anonymous namespace'::QuantizeTensor<unsigned char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::operator()(MIL::Fp16 *a1, __int16 *a2)
{
  __int16 v2;
  MIL::Fp16 *v3;
  float Float;
  float v5;
  MIL::Fp16 *v6;
  float v7;
  __int16 v9;
  __int16 v10;
  __int16 v11;

  v2 = *a2;
  v3 = (MIL::Fp16 *)MIL::Fp16::FromFloat(a1, 0.0);
  v11 = v2;
  v10 = (__int16)v3;
  v9 = MIL::Fp16::FromFloat(v3, 255.0);
  Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v10);
  v5 = MIL::Fp16::GetFloat((MIL::Fp16 *)&v11);
  v7 = MIL::Fp16::GetFloat((MIL::Fp16 *)&v9);
  if (v7 >= v5)
    v7 = v5;
  if (Float >= v7)
    v7 = Float;
  return MIL::Fp16::FromFloat(v6, v7);
}

uint64_t std::__function::__func<MIL::ValueInference::Tensor<unsigned char> `anonymous namespace'::QuantizeTensor<unsigned char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(MIL::Fp16)#2},std::allocator<MIL::ValueInference::Tensor<unsigned char> `anonymous namespace'::QuantizeTensor<unsigned char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::ValueInference::Tensor<unsigned char> `anonymous namespace'::QuantizeTensor<unsigned char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(MIL::Fp16)#2},std::allocator<MIL::ValueInference::Tensor<unsigned char> `anonymous namespace'::QuantizeTensor<unsigned char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

uint64_t MIL::Operators::Common::ios17::Dequantize::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  std::__shared_weak_count_vtbl *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  std::__shared_weak_count_vtbl *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  unsigned __int8 *v36;
  void *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  char **v42;
  uint64_t v43;
  std::__shared_weak_count_vtbl *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t *v59;
  char *v60;
  char *v61;
  char *v62;
  __int128 v63;
  char *v64;
  char *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  char **v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  void *v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *p_shared_owners;
  unint64_t v95;
  std::__shared_weak_count_vtbl *v96;
  void *v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count_vtbl *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count_vtbl *v103;
  void *v104;
  std::__shared_weak_count *v105;
  std::__shared_weak_count_vtbl *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count_vtbl *v110;
  void *v111;
  std::__shared_weak_count *v112;
  std::__shared_weak_count_vtbl *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count_vtbl *v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  std::__shared_weak_count_vtbl *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  void *v124;
  void *v125;
  std::__shared_weak_count *v126;
  std::__shared_weak_count_vtbl *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count_vtbl *v131;
  void *v132;
  std::__shared_weak_count *v133;
  std::__shared_weak_count_vtbl *v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count_vtbl *v138;
  void *v139;
  std::__shared_weak_count *v140;
  std::__shared_weak_count_vtbl *v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count_vtbl *v145;
  void *v146;
  std::__shared_weak_count *v147;
  std::__shared_weak_count_vtbl *v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count_vtbl *v152;
  uint64_t v153;
  std::__shared_weak_count *v154;
  std::__shared_weak_count_vtbl *v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  void *v159;
  uint64_t result;
  uint64_t v161;
  void *v162;
  std::__shared_weak_count *v163;
  std::__shared_weak_count_vtbl *v164;
  std::__shared_weak_count *v165;
  void *v166[2];
  char v167;
  std::__shared_weak_count_vtbl *v168;
  std::__shared_weak_count *v169;
  void *v170[2];
  char v171;
  std::__shared_weak_count_vtbl *v172;
  std::__shared_weak_count *v173;
  void *v174[2];
  char v175;
  std::__shared_weak_count_vtbl *v176;
  std::__shared_weak_count *v177;
  void *v178;
  std::__shared_weak_count *v179;
  void *v180[2];
  char v181;
  std::__shared_weak_count_vtbl *v182;
  std::__shared_weak_count *v183;
  void *v184[2];
  char v185;
  void *v186[2];
  char v187;
  std::__shared_weak_count_vtbl *v188;
  std::__shared_weak_count *v189;
  void *v190[2];
  char v191;
  void *v192[2];
  char v193;
  std::__shared_weak_count_vtbl *v194;
  std::__shared_weak_count *v195;
  void *v196[2];
  char v197;
  void *v198[2];
  char v199;
  std::__shared_weak_count_vtbl *v200;
  std::__shared_weak_count *v201;
  __int128 v202;
  __int128 v203;
  void *v204[2];
  uint64_t v205;
  __n128 v206;
  uint64_t v207;
  uint64_t v208;
  _QWORD *v209;
  char **v210;
  __n128 v211;
  __n128 v212;
  __n128 v213;
  __n128 v214;
  _QWORD *v215;
  void *__p;
  void *v217;
  char *v218;
  char *v219;
  char **v220;
  _QWORD v221[3];
  _QWORD *v222;
  _QWORD v223[3];
  _QWORD *v224;
  _BYTE v225[24];
  _BYTE *v226;
  _QWORD v227[3];
  _QWORD *v228;
  void *v229;
  uint64_t v230;
  _QWORD *v231;
  _QWORD v232[2];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *v234;
  void (__cdecl **v235)(std::__shared_weak_count *__hidden);
  uint64_t v236;

  v236 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v215 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (char *)operator new(8uLL);
  __p = v8;
  *(_QWORD *)v8 = v7;
  v218 = v8 + 8;
  v217 = v8 + 8;
  v229 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&__p);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v10;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v234 = (std::__shared_weak_count_vtbl *)&v10->~__shared_weak_count_0;
  v235 = &v10->~__shared_weak_count_0;
  v230 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v229, 2, &v214);
  MIL::IRParameter::Make(&v214, &v208);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "input", &v208);
  v11 = v208;
  v208 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v214.n128_u64[1];
  if (v214.n128_u64[1])
  {
    v13 = (unint64_t *)(v214.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (Scalar)
  {
    v234 = Scalar;
    operator delete(Scalar);
  }
  if (__p)
  {
    v217 = __p;
    operator delete(__p);
  }
  v15 = v215;
  v16 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v17 = (char *)operator new(8uLL);
  __p = v17;
  *(_QWORD *)v17 = v16;
  v218 = v17 + 8;
  v217 = v17 + 8;
  v229 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v19;
  v19->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v18;
  v234 = (std::__shared_weak_count_vtbl *)&v19->~__shared_weak_count_0;
  v235 = &v19->~__shared_weak_count_0;
  v230 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v229, 2, &v213);
  MIL::IRParameter::Make(&v213, &v208);
  v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v15, "scale", &v208);
  v21 = v208;
  v208 = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = (std::__shared_weak_count *)v213.n128_u64[1];
  if (v213.n128_u64[1])
  {
    v23 = (unint64_t *)(v213.n128_u64[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (Scalar)
  {
    v234 = Scalar;
    operator delete(Scalar);
  }
  if (__p)
  {
    v217 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v20 + 5) + 32))(*((_QWORD *)v20 + 5), 1);
  v25 = v215;
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = (char *)operator new(8uLL);
  __p = v27;
  *(_QWORD *)v27 = v26;
  v218 = v27 + 8;
  v217 = v27 + 8;
  v229 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&__p);
  v28 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v29 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v29;
  v29->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v28;
  v234 = (std::__shared_weak_count_vtbl *)&v29->~__shared_weak_count_0;
  v235 = &v29->~__shared_weak_count_0;
  v230 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v229, 2, &v212);
  MIL::IRParameter::Make(&v212, &v208);
  v30 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v25, "zero_point", &v208);
  v31 = v208;
  v208 = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v32 = (std::__shared_weak_count *)v212.n128_u64[1];
  if (v212.n128_u64[1])
  {
    v33 = (unint64_t *)(v212.n128_u64[1] + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (Scalar)
  {
    v234 = Scalar;
    operator delete(Scalar);
  }
  if (__p)
  {
    v217 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v30 + 5) + 32))(*((_QWORD *)v30 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v30 + 5) + 48))(*((_QWORD *)v30 + 5), 1);
  v35 = v215;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v211);
  MIL::IRParameter::Make(&v211, (uint64_t *)&__p);
  v36 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v35, "axis", (uint64_t *)&__p);
  v37 = __p;
  __p = 0;
  if (v37)
    (*(void (**)(void *))(*(_QWORD *)v37 + 8))(v37);
  v38 = (std::__shared_weak_count *)v211.n128_u64[1];
  if (v211.n128_u64[1])
  {
    v39 = (unint64_t *)(v211.n128_u64[1] + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v36 + 5) + 32))(*((_QWORD *)v36 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v36 + 5) + 48))(*((_QWORD *)v36 + 5), 1);
  v210 = 0;
  v41 = operator new();
  *(_QWORD *)v41 = 0;
  *(_QWORD *)(v41 + 8) = 0;
  *(_QWORD *)(v41 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v210, (void **)v41);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v210, 1uLL);
  v42 = v210;
  v43 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v44 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v44;
  v44->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v43;
  v234 = (std::__shared_weak_count_vtbl *)&v44->~__shared_weak_count_0;
  v235 = &v44->~__shared_weak_count_0;
  v232[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v45 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v46 = operator new(8uLL);
  v229 = v46;
  *v46 = v45;
  v230 = (uint64_t)(v46 + 1);
  v231 = v46 + 1;
  v232[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v229);
  MIL::IRParameter::MakeTypeSet((uint64_t)v232, 2, &v206);
  MIL::IRParameter::Make(&v206, &v207);
  v47 = v207;
  v208 = v207;
  if (v207)
  {
    v48 = (_QWORD *)operator new();
    v49 = v207;
    *v48 = &unk_1EA99F888;
    v48[1] = 0;
    v48[2] = 0;
    v48[3] = v49;
  }
  else
  {
    v48 = 0;
  }
  v209 = v48;
  v207 = 0;
  v50 = v42[2];
  v51 = v42[1];
  if (v51 >= v50)
  {
    v53 = (v51 - *v42) >> 4;
    v54 = v53 + 1;
    if ((unint64_t)(v53 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v55 = v50 - *v42;
    if (v55 >> 3 > v54)
      v54 = v55 >> 3;
    if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF0)
      v56 = 0xFFFFFFFFFFFFFFFLL;
    else
      v56 = v54;
    v220 = v42 + 2;
    v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v42 + 2), v56);
    v59 = (uint64_t *)&v57[16 * v53];
    *v59 = v47;
    v59[1] = (uint64_t)v48;
    v208 = 0;
    v209 = 0;
    v61 = *v42;
    v60 = v42[1];
    if (v60 == *v42)
    {
      v64 = v42[1];
      v62 = &v57[16 * v53];
    }
    else
    {
      v62 = &v57[16 * v53];
      do
      {
        v63 = *((_OWORD *)v60 - 1);
        v60 -= 16;
        *((_OWORD *)v62 - 1) = v63;
        v62 -= 16;
        *(_QWORD *)v60 = 0;
        *((_QWORD *)v60 + 1) = 0;
      }
      while (v60 != v61);
      v64 = *v42;
      v60 = v42[1];
    }
    v52 = (char *)(v59 + 2);
    *v42 = v62;
    v217 = v64;
    v42[1] = (char *)(v59 + 2);
    v218 = v60;
    v65 = v42[2];
    v42[2] = &v57[16 * v58];
    v219 = v65;
    __p = v64;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v51 = v47;
    *((_QWORD *)v51 + 1) = v48;
    v52 = v51 + 16;
    v208 = 0;
    v209 = 0;
  }
  v42[1] = v52;
  v66 = v207;
  v207 = 0;
  if (v66)
    (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
  v67 = (std::__shared_weak_count *)v206.n128_u64[1];
  if (v206.n128_u64[1])
  {
    v68 = (unint64_t *)(v206.n128_u64[1] + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  if (v229)
  {
    v230 = (uint64_t)v229;
    operator delete(v229);
  }
  if (Scalar)
  {
    v234 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v204 = *(_OWORD *)a2;
  v205 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v70 = (uint64_t)v215;
  *(_QWORD *)&v203 = v215;
  if (v215)
  {
    v71 = (_QWORD *)operator new();
    *v71 = &unk_1EA99F8E8;
    v71[1] = 0;
    v71[2] = 0;
    v71[3] = v70;
  }
  else
  {
    v71 = 0;
  }
  *((_QWORD *)&v203 + 1) = v71;
  v215 = 0;
  *(_QWORD *)&v202 = v210;
  if (v210)
  {
    v72 = (_QWORD *)operator new();
    v73 = v210;
    *v72 = &unk_1EA99F948;
    v72[1] = 0;
    v72[2] = 0;
    v72[3] = v73;
  }
  else
  {
    v72 = 0;
  }
  *((_QWORD *)&v202 + 1) = v72;
  v210 = 0;
  v227[0] = &unk_1EA99FAC8;
  v227[1] = MIL::Operators::Common::ios17::CustomValidators::ValidateDequantize;
  v228 = v227;
  v226 = 0;
  MIL::IROperator::Make((__int128 *)v204, &v203, &v202, (uint64_t)v227, (uint64_t)v225, a3);
  v74 = v226;
  if (v226 == v225)
  {
    v75 = 4;
    v74 = v225;
  }
  else
  {
    if (!v226)
      goto LABEL_80;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_80:
  v76 = v228;
  if (v228 == v227)
  {
    v77 = 4;
    v76 = v227;
    goto LABEL_84;
  }
  if (v228)
  {
    v77 = 5;
LABEL_84:
    (*(void (**)(void))(*v76 + 8 * v77))();
  }
  v78 = (std::__shared_weak_count *)*((_QWORD *)&v202 + 1);
  if (*((_QWORD *)&v202 + 1))
  {
    v79 = (unint64_t *)(*((_QWORD *)&v202 + 1) + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = (std::__shared_weak_count *)*((_QWORD *)&v203 + 1);
  if (*((_QWORD *)&v203 + 1))
  {
    v82 = (unint64_t *)(*((_QWORD *)&v203 + 1) + 8);
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  if (SHIBYTE(v205) < 0)
    operator delete(v204[0]);
  v84 = *a3;
  v223[0] = &off_1EA99FBD8;
  v223[1] = MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceDequantize;
  v224 = v223;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v84 + 200))(v84, v223);
  v85 = v224;
  if (v224 == v223)
  {
    v86 = 4;
    v85 = v223;
  }
  else
  {
    if (!v224)
      goto LABEL_102;
    v86 = 5;
  }
  (*(void (**)(void))(*v85 + 8 * v86))();
LABEL_102:
  v87 = *a3;
  v221[0] = &off_1EA9A00F8;
  v221[1] = MIL::Operators::Common::ios17::CustomValueInference::ValueInferenceDequantize;
  v222 = v221;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v87 + 216))(v87, v221);
  v88 = v222;
  if (v222 == v221)
  {
    v89 = 4;
    v88 = v221;
  }
  else
  {
    if (!v222)
      goto LABEL_107;
    v89 = 5;
  }
  (*(void (**)(void))(*v88 + 8 * v89))();
LABEL_107:
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v90 = __p;
  std::string::basic_string[abi:ne180100]<0>(v198, "input");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v198, 0, (uint64_t *)&Scalar);
  v200 = Scalar;
  if (Scalar)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = Scalar;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v201 = v91;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v196, "QT");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v90 + 24))(v90, &v200, v196);
  if (v197 < 0)
    operator delete(v196[0]);
  v93 = v201;
  if (v201)
  {
    p_shared_owners = (unint64_t *)&v201->__shared_owners_;
    do
      v95 = __ldaxr(p_shared_owners);
    while (__stlxr(v95 - 1, p_shared_owners));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = Scalar;
  Scalar = 0;
  if (v96)
    (*((void (**)(std::__shared_weak_count_vtbl *))v96->~__shared_weak_count + 1))(v96);
  if (v199 < 0)
    operator delete(v198[0]);
  v97 = __p;
  std::string::basic_string[abi:ne180100]<0>(v192, "scale");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v192, 0, (uint64_t *)&Scalar);
  v194 = Scalar;
  if (Scalar)
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = Scalar;
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = v99;
  }
  else
  {
    v98 = 0;
  }
  v195 = v98;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v190, "FT");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v97 + 24))(v97, &v194, v190);
  if (v191 < 0)
    operator delete(v190[0]);
  v100 = v195;
  if (v195)
  {
    v101 = (unint64_t *)&v195->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = Scalar;
  Scalar = 0;
  if (v103)
    (*((void (**)(std::__shared_weak_count_vtbl *))v103->~__shared_weak_count + 1))(v103);
  if (v193 < 0)
    operator delete(v192[0]);
  v104 = __p;
  std::string::basic_string[abi:ne180100]<0>(v186, "zero_point");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v186, 1, (uint64_t *)&Scalar);
  v188 = Scalar;
  if (Scalar)
  {
    v105 = (std::__shared_weak_count *)operator new();
    v106 = Scalar;
    v105->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v105->__shared_owners_ = 0;
    v105->__shared_weak_owners_ = 0;
    v105[1].__vftable = v106;
  }
  else
  {
    v105 = 0;
  }
  v189 = v105;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v184, "QT");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v104 + 24))(v104, &v188, v184);
  if (v185 < 0)
    operator delete(v184[0]);
  v107 = v189;
  if (v189)
  {
    v108 = (unint64_t *)&v189->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = Scalar;
  Scalar = 0;
  if (v110)
    (*((void (**)(std::__shared_weak_count_vtbl *))v110->~__shared_weak_count + 1))(v110);
  if (v187 < 0)
    operator delete(v186[0]);
  v111 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v182 = Scalar;
  if (Scalar)
  {
    v112 = (std::__shared_weak_count *)operator new();
    v113 = Scalar;
    v112->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v112->__shared_owners_ = 0;
    v112->__shared_weak_owners_ = 0;
    v112[1].__vftable = v113;
  }
  else
  {
    v112 = 0;
  }
  v183 = v112;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v180, "FT");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v111 + 24))(v111, &v182, v180);
  if (v181 < 0)
    operator delete(v180[0]);
  v114 = v183;
  if (v183)
  {
    v115 = (unint64_t *)&v183->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = Scalar;
  Scalar = 0;
  if (v117)
    (*((void (**)(std::__shared_weak_count_vtbl *))v117->~__shared_weak_count + 1))(v117);
  v118 = *a3;
  v178 = __p;
  if (__p)
  {
    v119 = (std::__shared_weak_count *)operator new();
    v120 = (std::__shared_weak_count_vtbl *)__p;
    v119->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v119->__shared_owners_ = 0;
    v119->__shared_weak_owners_ = 0;
    v119[1].__vftable = v120;
  }
  else
  {
    v119 = 0;
  }
  v179 = v119;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v118 + 56))(v118, &v178);
  v121 = v179;
  if (v179)
  {
    v122 = (unint64_t *)&v179->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = __p;
  __p = 0;
  if (v124)
    (*(void (**)(void *))(*(_QWORD *)v124 + 8))(v124);
  MIL::Validation::TensorRankValueConstraints::Make(&__p);
  v125 = __p;
  std::string::basic_string[abi:ne180100]<0>(v174, "input");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v174, 0, (uint64_t *)&Scalar);
  v176 = Scalar;
  if (Scalar)
  {
    v126 = (std::__shared_weak_count *)operator new();
    v127 = Scalar;
    v126->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v126->__shared_owners_ = 0;
    v126->__shared_weak_owners_ = 0;
    v126[1].__vftable = v127;
  }
  else
  {
    v126 = 0;
  }
  v177 = v126;
  Scalar = 0;
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))(*(_QWORD *)v125 + 32))(v125, &v176, 1, 0x7FFFFFFFFFFFFFFFLL);
  v128 = v177;
  if (v177)
  {
    v129 = (unint64_t *)&v177->__shared_owners_;
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v131 = Scalar;
  Scalar = 0;
  if (v131)
    (*((void (**)(std::__shared_weak_count_vtbl *))v131->~__shared_weak_count + 1))(v131);
  if (v175 < 0)
    operator delete(v174[0]);
  v132 = __p;
  std::string::basic_string[abi:ne180100]<0>(v170, "scale");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v170, 0, (uint64_t *)&Scalar);
  v172 = Scalar;
  if (Scalar)
  {
    v133 = (std::__shared_weak_count *)operator new();
    v134 = Scalar;
    v133->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v133->__shared_owners_ = 0;
    v133->__shared_weak_owners_ = 0;
    v133[1].__vftable = v134;
  }
  else
  {
    v133 = 0;
  }
  v173 = v133;
  Scalar = 0;
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, uint64_t))(*(_QWORD *)v132 + 32))(v132, &v172, 0, 1);
  v135 = v173;
  if (v173)
  {
    v136 = (unint64_t *)&v173->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = Scalar;
  Scalar = 0;
  if (v138)
    (*((void (**)(std::__shared_weak_count_vtbl *))v138->~__shared_weak_count + 1))(v138);
  if (v171 < 0)
    operator delete(v170[0]);
  v139 = __p;
  std::string::basic_string[abi:ne180100]<0>(v166, "zero_point");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v166, 1, (uint64_t *)&Scalar);
  v168 = Scalar;
  if (Scalar)
  {
    v140 = (std::__shared_weak_count *)operator new();
    v141 = Scalar;
    v140->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v140->__shared_owners_ = 0;
    v140->__shared_weak_owners_ = 0;
    v140[1].__vftable = v141;
  }
  else
  {
    v140 = 0;
  }
  v169 = v140;
  Scalar = 0;
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, uint64_t))(*(_QWORD *)v139 + 32))(v139, &v168, 0, 1);
  v142 = v169;
  if (v169)
  {
    v143 = (unint64_t *)&v169->__shared_owners_;
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  v145 = Scalar;
  Scalar = 0;
  if (v145)
    (*((void (**)(std::__shared_weak_count_vtbl *))v145->~__shared_weak_count + 1))(v145);
  if (v167 < 0)
    operator delete(v166[0]);
  v146 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v164 = Scalar;
  if (Scalar)
  {
    v147 = (std::__shared_weak_count *)operator new();
    v148 = Scalar;
    v147->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v147->__shared_owners_ = 0;
    v147->__shared_weak_owners_ = 0;
    v147[1].__vftable = v148;
  }
  else
  {
    v147 = 0;
  }
  v165 = v147;
  Scalar = 0;
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))(*(_QWORD *)v146 + 32))(v146, &v164, 1, 0x7FFFFFFFFFFFFFFFLL);
  v149 = v165;
  if (v165)
  {
    v150 = (unint64_t *)&v165->__shared_owners_;
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  v152 = Scalar;
  Scalar = 0;
  if (v152)
    (*((void (**)(std::__shared_weak_count_vtbl *))v152->~__shared_weak_count + 1))(v152);
  v153 = *a3;
  v162 = __p;
  if (__p)
  {
    v154 = (std::__shared_weak_count *)operator new();
    v155 = (std::__shared_weak_count_vtbl *)__p;
    v154->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FC78;
    v154->__shared_owners_ = 0;
    v154->__shared_weak_owners_ = 0;
    v154[1].__vftable = v155;
  }
  else
  {
    v154 = 0;
  }
  v163 = v154;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v153 + 56))(v153, &v162);
  v156 = v163;
  if (v163)
  {
    v157 = (unint64_t *)&v163->__shared_owners_;
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  v159 = __p;
  __p = 0;
  if (v159)
    (*(void (**)(void *))(*(_QWORD *)v159 + 8))(v159);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v210, 0);
  result = (uint64_t)v215;
  if (v215)
  {
    v161 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v215);
    return MEMORY[0x1E0C023A0](v161, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E090AEE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  void **a71;
  uint64_t *v71;
  unint64_t v73;
  uint64_t v74;

  v73 = STACK[0x240];
  STACK[0x240] = 0;
  if (v73)
    (*(void (**)(unint64_t))(*(_QWORD *)v73 + 8))(v73);
  v74 = *v71;
  *v71 = 0;
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a71, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x238], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::DynamicDequantize::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  std::__shared_weak_count_vtbl *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  std::__shared_weak_count_vtbl *v28;
  unsigned __int8 *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  unsigned __int8 *v35;
  void *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  char **v41;
  uint64_t v42;
  std::__shared_weak_count_vtbl *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t *v58;
  char *v59;
  char *v60;
  char *v61;
  __int128 v62;
  char *v63;
  char *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  char **v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  void *v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count_vtbl *v91;
  std::__shared_weak_count *v92;
  unint64_t *p_shared_owners;
  unint64_t v94;
  std::__shared_weak_count_vtbl *v95;
  void *v96;
  std::__shared_weak_count *v97;
  std::__shared_weak_count_vtbl *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count_vtbl *v102;
  void *v103;
  std::__shared_weak_count *v104;
  std::__shared_weak_count_vtbl *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count_vtbl *v109;
  void *v110;
  std::__shared_weak_count *v111;
  std::__shared_weak_count_vtbl *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count_vtbl *v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  std::__shared_weak_count_vtbl *v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  void *v123;
  void *v124;
  std::__shared_weak_count *v125;
  std::__shared_weak_count_vtbl *v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count_vtbl *v130;
  void *v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count_vtbl *v137;
  void *v138;
  std::__shared_weak_count *v139;
  std::__shared_weak_count_vtbl *v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count_vtbl *v144;
  void *v145;
  std::__shared_weak_count *v146;
  std::__shared_weak_count_vtbl *v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count_vtbl *v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  std::__shared_weak_count_vtbl *v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  void *v158;
  uint64_t result;
  uint64_t v160;
  void *v161;
  std::__shared_weak_count *v162;
  std::__shared_weak_count_vtbl *v163;
  std::__shared_weak_count *v164;
  void *v165[2];
  char v166;
  std::__shared_weak_count_vtbl *v167;
  std::__shared_weak_count *v168;
  void *v169[2];
  char v170;
  std::__shared_weak_count_vtbl *v171;
  std::__shared_weak_count *v172;
  void *v173[2];
  char v174;
  std::__shared_weak_count_vtbl *v175;
  std::__shared_weak_count *v176;
  void *v177;
  std::__shared_weak_count *v178;
  void *v179[2];
  char v180;
  std::__shared_weak_count_vtbl *v181;
  std::__shared_weak_count *v182;
  void *v183[2];
  char v184;
  void *v185[2];
  char v186;
  std::__shared_weak_count_vtbl *v187;
  std::__shared_weak_count *v188;
  void *v189[2];
  char v190;
  void *v191[2];
  char v192;
  std::__shared_weak_count_vtbl *v193;
  std::__shared_weak_count *v194;
  void *v195[2];
  char v196;
  void *v197[2];
  char v198;
  std::__shared_weak_count_vtbl *v199;
  std::__shared_weak_count *v200;
  __int128 v201;
  __int128 v202;
  void *v203[2];
  uint64_t v204;
  __n128 v205;
  uint64_t v206;
  uint64_t v207;
  _QWORD *v208;
  char **v209;
  __n128 v210;
  __n128 v211;
  __n128 v212;
  __n128 v213;
  _QWORD *v214;
  void *__p;
  void *v216;
  char *v217;
  char *v218;
  char **v219;
  _QWORD v220[3];
  _QWORD *v221;
  _QWORD v222[3];
  _QWORD *v223;
  _BYTE v224[24];
  _BYTE *v225;
  _QWORD v226[3];
  _QWORD *v227;
  void *v228;
  uint64_t v229;
  _QWORD *v230;
  _QWORD v231[2];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *v233;
  void (__cdecl **v234)(std::__shared_weak_count *__hidden);
  uint64_t v235;

  v235 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v214 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (char *)operator new(8uLL);
  __p = v8;
  *(_QWORD *)v8 = v7;
  v217 = v8 + 8;
  v216 = v8 + 8;
  v228 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&__p);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v10;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v233 = (std::__shared_weak_count_vtbl *)&v10->~__shared_weak_count_0;
  v234 = &v10->~__shared_weak_count_0;
  v229 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v228, 2, &v213);
  MIL::IRParameter::Make(&v213, &v207);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "input", &v207);
  v11 = v207;
  v207 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v213.n128_u64[1];
  if (v213.n128_u64[1])
  {
    v13 = (unint64_t *)(v213.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (Scalar)
  {
    v233 = Scalar;
    operator delete(Scalar);
  }
  if (__p)
  {
    v216 = __p;
    operator delete(__p);
  }
  v15 = v214;
  v16 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v17 = (char *)operator new(8uLL);
  __p = v17;
  *(_QWORD *)v17 = v16;
  v217 = v17 + 8;
  v216 = v17 + 8;
  v228 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v19;
  v19->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v18;
  v233 = (std::__shared_weak_count_vtbl *)&v19->~__shared_weak_count_0;
  v234 = &v19->~__shared_weak_count_0;
  v229 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v228, 2, &v212);
  MIL::IRParameter::Make(&v212, &v207);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v15, "scale", &v207);
  v20 = v207;
  v207 = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = (std::__shared_weak_count *)v212.n128_u64[1];
  if (v212.n128_u64[1])
  {
    v22 = (unint64_t *)(v212.n128_u64[1] + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (Scalar)
  {
    v233 = Scalar;
    operator delete(Scalar);
  }
  if (__p)
  {
    v216 = __p;
    operator delete(__p);
  }
  v24 = v214;
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = (char *)operator new(8uLL);
  __p = v26;
  *(_QWORD *)v26 = v25;
  v217 = v26 + 8;
  v216 = v26 + 8;
  v228 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&__p);
  v27 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v28 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v28;
  v28->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v27;
  v233 = (std::__shared_weak_count_vtbl *)&v28->~__shared_weak_count_0;
  v234 = &v28->~__shared_weak_count_0;
  v229 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v228, 2, &v211);
  MIL::IRParameter::Make(&v211, &v207);
  v29 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v24, "zero_point", &v207);
  v30 = v207;
  v207 = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  v31 = (std::__shared_weak_count *)v211.n128_u64[1];
  if (v211.n128_u64[1])
  {
    v32 = (unint64_t *)(v211.n128_u64[1] + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (Scalar)
  {
    v233 = Scalar;
    operator delete(Scalar);
  }
  if (__p)
  {
    v216 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v29 + 5) + 48))(*((_QWORD *)v29 + 5), 1);
  v34 = v214;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v210);
  MIL::IRParameter::Make(&v210, (uint64_t *)&__p);
  v35 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v34, "axis", (uint64_t *)&__p);
  v36 = __p;
  __p = 0;
  if (v36)
    (*(void (**)(void *))(*(_QWORD *)v36 + 8))(v36);
  v37 = (std::__shared_weak_count *)v210.n128_u64[1];
  if (v210.n128_u64[1])
  {
    v38 = (unint64_t *)(v210.n128_u64[1] + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v35 + 5) + 32))(*((_QWORD *)v35 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v35 + 5) + 48))(*((_QWORD *)v35 + 5), 1);
  v209 = 0;
  v40 = operator new();
  *(_QWORD *)v40 = 0;
  *(_QWORD *)(v40 + 8) = 0;
  *(_QWORD *)(v40 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v209, (void **)v40);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v209, 1uLL);
  v41 = v209;
  v42 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v43 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v43;
  v43->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v42;
  v233 = (std::__shared_weak_count_vtbl *)&v43->~__shared_weak_count_0;
  v234 = &v43->~__shared_weak_count_0;
  v231[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v44 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v45 = operator new(8uLL);
  v228 = v45;
  *v45 = v44;
  v229 = (uint64_t)(v45 + 1);
  v230 = v45 + 1;
  v231[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v228);
  MIL::IRParameter::MakeTypeSet((uint64_t)v231, 2, &v205);
  MIL::IRParameter::Make(&v205, &v206);
  v46 = v206;
  v207 = v206;
  if (v206)
  {
    v47 = (_QWORD *)operator new();
    v48 = v206;
    *v47 = &unk_1EA99F888;
    v47[1] = 0;
    v47[2] = 0;
    v47[3] = v48;
  }
  else
  {
    v47 = 0;
  }
  v208 = v47;
  v206 = 0;
  v49 = v41[2];
  v50 = v41[1];
  if (v50 >= v49)
  {
    v52 = (v50 - *v41) >> 4;
    v53 = v52 + 1;
    if ((unint64_t)(v52 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v54 = v49 - *v41;
    if (v54 >> 3 > v53)
      v53 = v54 >> 3;
    if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF0)
      v55 = 0xFFFFFFFFFFFFFFFLL;
    else
      v55 = v53;
    v219 = v41 + 2;
    v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v41 + 2), v55);
    v58 = (uint64_t *)&v56[16 * v52];
    *v58 = v46;
    v58[1] = (uint64_t)v47;
    v207 = 0;
    v208 = 0;
    v60 = *v41;
    v59 = v41[1];
    if (v59 == *v41)
    {
      v63 = v41[1];
      v61 = &v56[16 * v52];
    }
    else
    {
      v61 = &v56[16 * v52];
      do
      {
        v62 = *((_OWORD *)v59 - 1);
        v59 -= 16;
        *((_OWORD *)v61 - 1) = v62;
        v61 -= 16;
        *(_QWORD *)v59 = 0;
        *((_QWORD *)v59 + 1) = 0;
      }
      while (v59 != v60);
      v63 = *v41;
      v59 = v41[1];
    }
    v51 = (char *)(v58 + 2);
    *v41 = v61;
    v216 = v63;
    v41[1] = (char *)(v58 + 2);
    v217 = v59;
    v64 = v41[2];
    v41[2] = &v56[16 * v57];
    v218 = v64;
    __p = v63;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v50 = v46;
    *((_QWORD *)v50 + 1) = v47;
    v51 = v50 + 16;
    v207 = 0;
    v208 = 0;
  }
  v41[1] = v51;
  v65 = v206;
  v206 = 0;
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  v66 = (std::__shared_weak_count *)v205.n128_u64[1];
  if (v205.n128_u64[1])
  {
    v67 = (unint64_t *)(v205.n128_u64[1] + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if (v228)
  {
    v229 = (uint64_t)v228;
    operator delete(v228);
  }
  if (Scalar)
  {
    v233 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v203 = *(_OWORD *)a2;
  v204 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v69 = (uint64_t)v214;
  *(_QWORD *)&v202 = v214;
  if (v214)
  {
    v70 = (_QWORD *)operator new();
    *v70 = &unk_1EA99F8E8;
    v70[1] = 0;
    v70[2] = 0;
    v70[3] = v69;
  }
  else
  {
    v70 = 0;
  }
  *((_QWORD *)&v202 + 1) = v70;
  v214 = 0;
  *(_QWORD *)&v201 = v209;
  if (v209)
  {
    v71 = (_QWORD *)operator new();
    v72 = v209;
    *v71 = &unk_1EA99F948;
    v71[1] = 0;
    v71[2] = 0;
    v71[3] = v72;
  }
  else
  {
    v71 = 0;
  }
  *((_QWORD *)&v201 + 1) = v71;
  v209 = 0;
  v226[0] = &unk_1EA99FAC8;
  v226[1] = MIL::Operators::Common::ios17::CustomValidators::ValidateDynamicDequantize;
  v227 = v226;
  v225 = 0;
  MIL::IROperator::Make((__int128 *)v203, &v202, &v201, (uint64_t)v226, (uint64_t)v224, a3);
  v73 = v225;
  if (v225 == v224)
  {
    v74 = 4;
    v73 = v224;
  }
  else
  {
    if (!v225)
      goto LABEL_80;
    v74 = 5;
  }
  (*(void (**)(void))(*v73 + 8 * v74))();
LABEL_80:
  v75 = v227;
  if (v227 == v226)
  {
    v76 = 4;
    v75 = v226;
    goto LABEL_84;
  }
  if (v227)
  {
    v76 = 5;
LABEL_84:
    (*(void (**)(void))(*v75 + 8 * v76))();
  }
  v77 = (std::__shared_weak_count *)*((_QWORD *)&v201 + 1);
  if (*((_QWORD *)&v201 + 1))
  {
    v78 = (unint64_t *)(*((_QWORD *)&v201 + 1) + 8);
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v80 = (std::__shared_weak_count *)*((_QWORD *)&v202 + 1);
  if (*((_QWORD *)&v202 + 1))
  {
    v81 = (unint64_t *)(*((_QWORD *)&v202 + 1) + 8);
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  if (SHIBYTE(v204) < 0)
    operator delete(v203[0]);
  v83 = *a3;
  v222[0] = &off_1EA99FBD8;
  v222[1] = MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceDynamicDequantize;
  v223 = v222;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v83 + 200))(v83, v222);
  v84 = v223;
  if (v223 == v222)
  {
    v85 = 4;
    v84 = v222;
  }
  else
  {
    if (!v223)
      goto LABEL_102;
    v85 = 5;
  }
  (*(void (**)(void))(*v84 + 8 * v85))();
LABEL_102:
  v86 = *a3;
  v220[0] = &off_1EA9A00F8;
  v220[1] = MIL::Operators::Common::ios17::CustomValueInference::ValueInferenceDynamicDequantize;
  v221 = v220;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v86 + 216))(v86, v220);
  v87 = v221;
  if (v221 == v220)
  {
    v88 = 4;
    v87 = v220;
  }
  else
  {
    if (!v221)
      goto LABEL_107;
    v88 = 5;
  }
  (*(void (**)(void))(*v87 + 8 * v88))();
LABEL_107:
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v89 = __p;
  std::string::basic_string[abi:ne180100]<0>(v197, "input");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v197, 0, (uint64_t *)&Scalar);
  v199 = Scalar;
  if (Scalar)
  {
    v90 = (std::__shared_weak_count *)operator new();
    v91 = Scalar;
    v90->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v90->__shared_owners_ = 0;
    v90->__shared_weak_owners_ = 0;
    v90[1].__vftable = v91;
  }
  else
  {
    v90 = 0;
  }
  v200 = v90;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v195, "QT");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v89 + 24))(v89, &v199, v195);
  if (v196 < 0)
    operator delete(v195[0]);
  v92 = v200;
  if (v200)
  {
    p_shared_owners = (unint64_t *)&v200->__shared_owners_;
    do
      v94 = __ldaxr(p_shared_owners);
    while (__stlxr(v94 - 1, p_shared_owners));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = Scalar;
  Scalar = 0;
  if (v95)
    (*((void (**)(std::__shared_weak_count_vtbl *))v95->~__shared_weak_count + 1))(v95);
  if (v198 < 0)
    operator delete(v197[0]);
  v96 = __p;
  std::string::basic_string[abi:ne180100]<0>(v191, "scale");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v191, 0, (uint64_t *)&Scalar);
  v193 = Scalar;
  if (Scalar)
  {
    v97 = (std::__shared_weak_count *)operator new();
    v98 = Scalar;
    v97->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v97->__shared_owners_ = 0;
    v97->__shared_weak_owners_ = 0;
    v97[1].__vftable = v98;
  }
  else
  {
    v97 = 0;
  }
  v194 = v97;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v189, "FT");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v96 + 24))(v96, &v193, v189);
  if (v190 < 0)
    operator delete(v189[0]);
  v99 = v194;
  if (v194)
  {
    v100 = (unint64_t *)&v194->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v102 = Scalar;
  Scalar = 0;
  if (v102)
    (*((void (**)(std::__shared_weak_count_vtbl *))v102->~__shared_weak_count + 1))(v102);
  if (v192 < 0)
    operator delete(v191[0]);
  v103 = __p;
  std::string::basic_string[abi:ne180100]<0>(v185, "zero_point");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v185, 1, (uint64_t *)&Scalar);
  v187 = Scalar;
  if (Scalar)
  {
    v104 = (std::__shared_weak_count *)operator new();
    v105 = Scalar;
    v104->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v104->__shared_owners_ = 0;
    v104->__shared_weak_owners_ = 0;
    v104[1].__vftable = v105;
  }
  else
  {
    v104 = 0;
  }
  v188 = v104;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v183, "QT");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v103 + 24))(v103, &v187, v183);
  if (v184 < 0)
    operator delete(v183[0]);
  v106 = v188;
  if (v188)
  {
    v107 = (unint64_t *)&v188->__shared_owners_;
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  v109 = Scalar;
  Scalar = 0;
  if (v109)
    (*((void (**)(std::__shared_weak_count_vtbl *))v109->~__shared_weak_count + 1))(v109);
  if (v186 < 0)
    operator delete(v185[0]);
  v110 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v181 = Scalar;
  if (Scalar)
  {
    v111 = (std::__shared_weak_count *)operator new();
    v112 = Scalar;
    v111->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v111->__shared_owners_ = 0;
    v111->__shared_weak_owners_ = 0;
    v111[1].__vftable = v112;
  }
  else
  {
    v111 = 0;
  }
  v182 = v111;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v179, "FT");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v110 + 24))(v110, &v181, v179);
  if (v180 < 0)
    operator delete(v179[0]);
  v113 = v182;
  if (v182)
  {
    v114 = (unint64_t *)&v182->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  v116 = Scalar;
  Scalar = 0;
  if (v116)
    (*((void (**)(std::__shared_weak_count_vtbl *))v116->~__shared_weak_count + 1))(v116);
  v117 = *a3;
  v177 = __p;
  if (__p)
  {
    v118 = (std::__shared_weak_count *)operator new();
    v119 = (std::__shared_weak_count_vtbl *)__p;
    v118->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v118->__shared_owners_ = 0;
    v118->__shared_weak_owners_ = 0;
    v118[1].__vftable = v119;
  }
  else
  {
    v118 = 0;
  }
  v178 = v118;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v117 + 56))(v117, &v177);
  v120 = v178;
  if (v178)
  {
    v121 = (unint64_t *)&v178->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v123 = __p;
  __p = 0;
  if (v123)
    (*(void (**)(void *))(*(_QWORD *)v123 + 8))(v123);
  MIL::Validation::TensorRankValueConstraints::Make(&__p);
  v124 = __p;
  std::string::basic_string[abi:ne180100]<0>(v173, "input");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v173, 0, (uint64_t *)&Scalar);
  v175 = Scalar;
  if (Scalar)
  {
    v125 = (std::__shared_weak_count *)operator new();
    v126 = Scalar;
    v125->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v125->__shared_owners_ = 0;
    v125->__shared_weak_owners_ = 0;
    v125[1].__vftable = v126;
  }
  else
  {
    v125 = 0;
  }
  v176 = v125;
  Scalar = 0;
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))(*(_QWORD *)v124 + 32))(v124, &v175, 1, 0x7FFFFFFFFFFFFFFFLL);
  v127 = v176;
  if (v176)
  {
    v128 = (unint64_t *)&v176->__shared_owners_;
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  v130 = Scalar;
  Scalar = 0;
  if (v130)
    (*((void (**)(std::__shared_weak_count_vtbl *))v130->~__shared_weak_count + 1))(v130);
  if (v174 < 0)
    operator delete(v173[0]);
  v131 = __p;
  std::string::basic_string[abi:ne180100]<0>(v169, "scale");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v169, 0, (uint64_t *)&Scalar);
  v171 = Scalar;
  if (Scalar)
  {
    v132 = (std::__shared_weak_count *)operator new();
    v133 = Scalar;
    v132->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v132->__shared_owners_ = 0;
    v132->__shared_weak_owners_ = 0;
    v132[1].__vftable = v133;
  }
  else
  {
    v132 = 0;
  }
  v172 = v132;
  Scalar = 0;
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, uint64_t))(*(_QWORD *)v131 + 32))(v131, &v171, 0, 1);
  v134 = v172;
  if (v172)
  {
    v135 = (unint64_t *)&v172->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  v137 = Scalar;
  Scalar = 0;
  if (v137)
    (*((void (**)(std::__shared_weak_count_vtbl *))v137->~__shared_weak_count + 1))(v137);
  if (v170 < 0)
    operator delete(v169[0]);
  v138 = __p;
  std::string::basic_string[abi:ne180100]<0>(v165, "zero_point");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v165, 1, (uint64_t *)&Scalar);
  v167 = Scalar;
  if (Scalar)
  {
    v139 = (std::__shared_weak_count *)operator new();
    v140 = Scalar;
    v139->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v139->__shared_owners_ = 0;
    v139->__shared_weak_owners_ = 0;
    v139[1].__vftable = v140;
  }
  else
  {
    v139 = 0;
  }
  v168 = v139;
  Scalar = 0;
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, uint64_t))(*(_QWORD *)v138 + 32))(v138, &v167, 0, 1);
  v141 = v168;
  if (v168)
  {
    v142 = (unint64_t *)&v168->__shared_owners_;
    do
      v143 = __ldaxr(v142);
    while (__stlxr(v143 - 1, v142));
    if (!v143)
    {
      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
      std::__shared_weak_count::__release_weak(v141);
    }
  }
  v144 = Scalar;
  Scalar = 0;
  if (v144)
    (*((void (**)(std::__shared_weak_count_vtbl *))v144->~__shared_weak_count + 1))(v144);
  if (v166 < 0)
    operator delete(v165[0]);
  v145 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v163 = Scalar;
  if (Scalar)
  {
    v146 = (std::__shared_weak_count *)operator new();
    v147 = Scalar;
    v146->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v146->__shared_owners_ = 0;
    v146->__shared_weak_owners_ = 0;
    v146[1].__vftable = v147;
  }
  else
  {
    v146 = 0;
  }
  v164 = v146;
  Scalar = 0;
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))(*(_QWORD *)v145 + 32))(v145, &v163, 1, 0x7FFFFFFFFFFFFFFFLL);
  v148 = v164;
  if (v164)
  {
    v149 = (unint64_t *)&v164->__shared_owners_;
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
    }
  }
  v151 = Scalar;
  Scalar = 0;
  if (v151)
    (*((void (**)(std::__shared_weak_count_vtbl *))v151->~__shared_weak_count + 1))(v151);
  v152 = *a3;
  v161 = __p;
  if (__p)
  {
    v153 = (std::__shared_weak_count *)operator new();
    v154 = (std::__shared_weak_count_vtbl *)__p;
    v153->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FC78;
    v153->__shared_owners_ = 0;
    v153->__shared_weak_owners_ = 0;
    v153[1].__vftable = v154;
  }
  else
  {
    v153 = 0;
  }
  v162 = v153;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v152 + 56))(v152, &v161);
  v155 = v162;
  if (v162)
  {
    v156 = (unint64_t *)&v162->__shared_owners_;
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
  v158 = __p;
  __p = 0;
  if (v158)
    (*(void (**)(void *))(*(_QWORD *)v158 + 8))(v158);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v209, 0);
  result = (uint64_t)v214;
  if (v214)
  {
    v160 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v214);
    return MEMORY[0x1E0C023A0](v160, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E090C71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  void **a71;
  uint64_t *v71;
  unint64_t v73;
  uint64_t v74;

  v73 = STACK[0x240];
  STACK[0x240] = 0;
  if (v73)
    (*(void (**)(unint64_t))(*(_QWORD *)v73 + 8))(v73);
  v74 = *v71;
  *v71 = 0;
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a71, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x238], 0);
  _Unwind_Resume(a1);
}

void sub_1E090CA10()
{
  uint64_t v0;

  if (STACK[0x280] != v0 && !STACK[0x280])
    JUMPOUT(0x1E090C9D0);
  JUMPOUT(0x1E090C9CCLL);
}

void sub_1E090CA5C()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2 = *(_QWORD **)(v1 - 176);
  if (v2 == v0)
  {
    v3 = 4;
    v2 = (_QWORD *)(v1 - 200);
  }
  else
  {
    if (!v2)
    {
LABEL_6:
      MIL::Operators::Common::ios15::GeLU::Make();
      JUMPOUT(0x1E090CA9CLL);
    }
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
  goto LABEL_6;
}

void sub_1E090CAB4()
{
  JUMPOUT(0x1E090CA00);
}

void sub_1E090CABC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a69);
  JUMPOUT(0x1E090CAC8);
}

void sub_1E090CAF4()
{
  JUMPOUT(0x1E090CC2CLL);
}

void sub_1E090CB04()
{
  JUMPOUT(0x1E090C9E8);
}

void sub_1E090CB18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a72;
  unint64_t v72;

  v72 = STACK[0x240];
  STACK[0x240] = 0;
  if (v72)
    (*(void (**)(unint64_t))(*(_QWORD *)v72 + 8))(v72);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a72);
  JUMPOUT(0x1E090C9F4);
}

void sub_1E090CB4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a69;
  uint64_t v69;
  void *v70;
  void *v71;

  if (a69)
    (*(void (**)(uint64_t))(*(_QWORD *)a69 + 8))(a69);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x208]);
  v70 = *(void **)(v69 - 96);
  if (v70)
  {
    *(_QWORD *)(v69 - 88) = v70;
    operator delete(v70);
  }
  v71 = (void *)STACK[0x240];
  if (STACK[0x240])
  {
    STACK[0x248] = (unint64_t)v71;
    operator delete(v71);
  }
  JUMPOUT(0x1E090C9F4);
}

void sub_1E090CC04()
{
  void *v0;

  v0 = (void *)STACK[0x240];
  if (STACK[0x240])
  {
    STACK[0x248] = (unint64_t)v0;
    operator delete(v0);
  }
  JUMPOUT(0x1E090C9F4);
}

void sub_1E090CC44()
{
  JUMPOUT(0x1E090C9F4);
}

void sub_1E090CC4C()
{
  JUMPOUT(0x1E090CC58);
}

uint64_t MIL::Operators::Common::ios17::DynamicQuantize::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  unsigned __int8 *v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  unsigned __int8 *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  unsigned __int8 *v28;
  void *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  void **v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  void *v53;
  std::__shared_weak_count *v54;
  std::__shared_weak_count_vtbl *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count_vtbl *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  std::__shared_weak_count_vtbl *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  void *v66;
  void *v67;
  std::__shared_weak_count *v68;
  std::__shared_weak_count_vtbl *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count_vtbl *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  std::__shared_weak_count_vtbl *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  uint64_t v83;
  uint64_t i;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t result;
  uint64_t v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  void *v100[2];
  char v101;
  uint64_t v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  void *v105;
  std::__shared_weak_count *v106;
  void *v107[2];
  char v108;
  std::__shared_weak_count_vtbl *v109;
  std::__shared_weak_count *v110;
  void *v111;
  std::__shared_weak_count *v112;
  void *v113[2];
  char v114;
  void *v115[2];
  char v116;
  std::__shared_weak_count_vtbl *v117;
  std::__shared_weak_count *v118;
  void **v119;
  std::__shared_weak_count *v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  void *v123[2];
  uint64_t v124;
  __n128 v125;
  __n128 v126;
  __n128 v127;
  __n128 v128;
  uint64_t v129;
  _QWORD *v130;
  void *__p;
  void *v132;
  _QWORD *v133;
  _QWORD v134[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *v136;
  void (__cdecl **v137)(std::__shared_weak_count *__hidden);
  _QWORD v138[3];
  _QWORD *v139;
  _QWORD v140[3];
  _QWORD *v141;
  _BYTE v142[24];
  _BYTE *v143;
  _QWORD v144[3];
  _QWORD *v145;
  void **v146[3];

  v146[2] = *(void ***)MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v130 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  __p = v8;
  *v8 = v7;
  v132 = v8 + 1;
  v133 = v8 + 1;
  v146[0] = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v10;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v136 = (std::__shared_weak_count_vtbl *)&v10->~__shared_weak_count_0;
  v137 = &v10->~__shared_weak_count_0;
  v146[1] = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)v146, 2, &v128);
  MIL::IRParameter::Make(&v128, &v129);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "input", &v129);
  v11 = v129;
  v129 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v128.n128_u64[1];
  if (v128.n128_u64[1])
  {
    v13 = (unint64_t *)(v128.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (Scalar)
  {
    v136 = Scalar;
    operator delete(Scalar);
  }
  if (__p)
  {
    v132 = __p;
    operator delete(__p);
  }
  v15 = v130;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v127);
  MIL::IRParameter::Make(&v127, (uint64_t *)&__p);
  v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v15, "has_zero_point", (uint64_t *)&__p);
  v17 = __p;
  __p = 0;
  if (v17)
    (*(void (**)(void *))(*(_QWORD *)v17 + 8))(v17);
  v18 = (std::__shared_weak_count *)v127.n128_u64[1];
  if (v127.n128_u64[1])
  {
    v19 = (unint64_t *)(v127.n128_u64[1] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v16 + 5) + 32))(*((_QWORD *)v16 + 5), 1);
  v21 = v130;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v126);
  MIL::IRParameter::Make(&v126, (uint64_t *)&__p);
  v22 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v21, "axis", (uint64_t *)&__p);
  v23 = __p;
  __p = 0;
  if (v23)
    (*(void (**)(void *))(*(_QWORD *)v23 + 8))(v23);
  v24 = (std::__shared_weak_count *)v126.n128_u64[1];
  if (v126.n128_u64[1])
  {
    v25 = (unint64_t *)(v126.n128_u64[1] + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v22 + 5) + 32))(*((_QWORD *)v22 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v22 + 5) + 48))(*((_QWORD *)v22 + 5), 1);
  v27 = v130;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v125);
  MIL::IRParameter::Make(&v125, (uint64_t *)&__p);
  v28 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v27, "output_dtype", (uint64_t *)&__p);
  v29 = __p;
  __p = 0;
  if (v29)
    (*(void (**)(void *))(*(_QWORD *)v29 + 8))(v29);
  v30 = (std::__shared_weak_count *)v125.n128_u64[1];
  if (v125.n128_u64[1])
  {
    v31 = (unint64_t *)(v125.n128_u64[1] + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v28 + 5) + 32))(*((_QWORD *)v28 + 5), 1);
  v146[0] = 0;
  *(_OWORD *)v123 = *(_OWORD *)a2;
  v124 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v33 = (uint64_t)v130;
  v121 = (uint64_t)v130;
  if (v130)
  {
    v34 = (std::__shared_weak_count *)operator new();
    v34->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v34->__shared_owners_ = 0;
    v34->__shared_weak_owners_ = 0;
    v34[1].__vftable = (std::__shared_weak_count_vtbl *)v33;
    v122 = v34;
    v130 = 0;
    v119 = v146[0];
    if (v146[0])
    {
      v35 = (std::__shared_weak_count *)operator new();
      v36 = v146[0];
      v35->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F948;
      v35->__shared_owners_ = 0;
      v35->__shared_weak_owners_ = 0;
      v35[1].__vftable = (std::__shared_weak_count_vtbl *)v36;
    }
    else
    {
      v35 = 0;
    }
  }
  else
  {
    v35 = 0;
    v122 = 0;
    v130 = 0;
    v119 = 0;
  }
  v120 = v35;
  v146[0] = 0;
  v144[0] = &unk_1EA99FAC8;
  v144[1] = MIL::Operators::Common::ios17::CustomValidators::ValidateDynamicQuantize;
  v145 = v144;
  v143 = 0;
  MIL::IROperator::Make((__int128 *)v123, 3, 4, 2, 3, (uint64_t)&v121, (uint64_t)&v119, (uint64_t)v144, a3, (uint64_t)v142);
  v37 = v143;
  if (v143 == v142)
  {
    v38 = 4;
    v37 = v142;
  }
  else
  {
    if (!v143)
      goto LABEL_43;
    v38 = 5;
  }
  (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_43:
  v39 = v145;
  if (v145 == v144)
  {
    v40 = 4;
    v39 = v144;
    goto LABEL_47;
  }
  if (v145)
  {
    v40 = 5;
LABEL_47:
    (*(void (**)(void))(*v39 + 8 * v40))();
  }
  v41 = v120;
  if (v120)
  {
    p_shared_owners = (unint64_t *)&v120->__shared_owners_;
    do
      v43 = __ldaxr(p_shared_owners);
    while (__stlxr(v43 - 1, p_shared_owners));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = v122;
  if (v122)
  {
    v45 = (unint64_t *)&v122->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (SHIBYTE(v124) < 0)
    operator delete(v123[0]);
  v47 = *a3;
  v140[0] = &off_1EA99FBD8;
  v140[1] = MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceDynamicQuantize;
  v141 = v140;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v47 + 200))(v47, v140);
  v48 = v141;
  if (v141 == v140)
  {
    v49 = 4;
    v48 = v140;
  }
  else
  {
    if (!v141)
      goto LABEL_65;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_65:
  v50 = *a3;
  v138[0] = &off_1EA9A00F8;
  v138[1] = MIL::Operators::Common::ios17::CustomValueInference::ValueInferenceDynamicQuantize;
  v139 = v138;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v50 + 216))(v50, v138);
  v51 = v139;
  if (v139 == v138)
  {
    v52 = 4;
    v51 = v138;
  }
  else
  {
    if (!v139)
      goto LABEL_70;
    v52 = 5;
  }
  (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_70:
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v53 = __p;
  std::string::basic_string[abi:ne180100]<0>(v115, "input");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v115, 0, (uint64_t *)&Scalar);
  v117 = Scalar;
  if (Scalar)
  {
    v54 = (std::__shared_weak_count *)operator new();
    v55 = Scalar;
    v54->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v54->__shared_owners_ = 0;
    v54->__shared_weak_owners_ = 0;
    v54[1].__vftable = v55;
  }
  else
  {
    v54 = 0;
  }
  v118 = v54;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v113, "FT");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v53 + 24))(v53, &v117, v113);
  if (v114 < 0)
    operator delete(v113[0]);
  v56 = v118;
  if (v118)
  {
    v57 = (unint64_t *)&v118->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = Scalar;
  Scalar = 0;
  if (v59)
    (*((void (**)(std::__shared_weak_count_vtbl *))v59->~__shared_weak_count + 1))(v59);
  if (v116 < 0)
    operator delete(v115[0]);
  v60 = *a3;
  v111 = __p;
  if (__p)
  {
    v61 = (std::__shared_weak_count *)operator new();
    v62 = (std::__shared_weak_count_vtbl *)__p;
    v61->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v61->__shared_owners_ = 0;
    v61->__shared_weak_owners_ = 0;
    v61[1].__vftable = v62;
  }
  else
  {
    v61 = 0;
  }
  v112 = v61;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v60 + 56))(v60, &v111);
  v63 = v112;
  if (v112)
  {
    v64 = (unint64_t *)&v112->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = __p;
  __p = 0;
  if (v66)
    (*(void (**)(void *))(*(_QWORD *)v66 + 8))(v66);
  MIL::Validation::TensorRankValueConstraints::Make(&__p);
  v67 = __p;
  std::string::basic_string[abi:ne180100]<0>(v107, "input");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v107, 0, (uint64_t *)&Scalar);
  v109 = Scalar;
  if (Scalar)
  {
    v68 = (std::__shared_weak_count *)operator new();
    v69 = Scalar;
    v68->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v68->__shared_owners_ = 0;
    v68->__shared_weak_owners_ = 0;
    v68[1].__vftable = v69;
  }
  else
  {
    v68 = 0;
  }
  v110 = v68;
  Scalar = 0;
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))(*(_QWORD *)v67 + 32))(v67, &v109, 1, 0x7FFFFFFFFFFFFFFFLL);
  v70 = v110;
  if (v110)
  {
    v71 = (unint64_t *)&v110->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = Scalar;
  Scalar = 0;
  if (v73)
    (*((void (**)(std::__shared_weak_count_vtbl *))v73->~__shared_weak_count + 1))(v73);
  if (v108 < 0)
    operator delete(v107[0]);
  v74 = *a3;
  v105 = __p;
  if (__p)
  {
    v75 = (std::__shared_weak_count *)operator new();
    v76 = (std::__shared_weak_count_vtbl *)__p;
    v75->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FC78;
    v75->__shared_owners_ = 0;
    v75->__shared_weak_owners_ = 0;
    v75[1].__vftable = v76;
  }
  else
  {
    v75 = 0;
  }
  v106 = v75;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v74 + 56))(v74, &v105);
  v77 = v106;
  if (v106)
  {
    v78 = (unint64_t *)&v106->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v80 = __p;
  __p = 0;
  if (v80)
    (*(void (**)(void *))(*(_QWORD *)v80 + 8))(v80);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v129);
  v81 = v129;
  std::string::basic_string[abi:ne180100]<0>(v100, "output_dtype");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v100, 0, &v102);
  v103 = v102;
  if (v102)
  {
    v82 = (std::__shared_weak_count *)operator new();
    v83 = v102;
    v82->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v82->__shared_owners_ = 0;
    v82->__shared_weak_owners_ = 0;
    v82[1].__vftable = (std::__shared_weak_count_vtbl *)v83;
  }
  else
  {
    v82 = 0;
  }
  v104 = v82;
  v102 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "int8");
  std::string::basic_string[abi:ne180100]<0>(v134, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 2);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, _QWORD))(*(_QWORD *)v81 + 24))(v81, &v103, &Scalar, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v134[i + 2]) < 0)
      operator delete((void *)v134[i]);
  }
  v85 = v104;
  if (v104)
  {
    v86 = (unint64_t *)&v104->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = v102;
  v102 = 0;
  if (v88)
    (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
  if (v101 < 0)
    operator delete(v100[0]);
  v89 = *a3;
  v98 = v129;
  if (v129)
  {
    v90 = (std::__shared_weak_count *)operator new();
    v91 = v129;
    v90->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v90->__shared_owners_ = 0;
    v90->__shared_weak_owners_ = 0;
    v90[1].__vftable = (std::__shared_weak_count_vtbl *)v91;
  }
  else
  {
    v90 = 0;
  }
  v99 = v90;
  v129 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v89 + 56))(v89, &v98);
  v92 = v99;
  if (v99)
  {
    v93 = (unint64_t *)&v99->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = v129;
  v129 = 0;
  if (v95)
    (*(void (**)(uint64_t))(*(_QWORD *)v95 + 8))(v95);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](v146, 0);
  result = (uint64_t)v130;
  if (v130)
  {
    v97 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v130);
    return MEMORY[0x1E0C023A0](v97, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E090D87C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  uint64_t v55;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  if (a44 < 0)
    operator delete(__p);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)(v55 - 72), 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a55, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::Quantize::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  unsigned __int8 *v36;
  void *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  unsigned __int8 *v42;
  void *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  char **v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count_vtbl *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t *v65;
  char *v66;
  char *v67;
  char *v68;
  __int128 v69;
  char *v70;
  char *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  char **v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  void *v96;
  std::__shared_weak_count *v97;
  std::__shared_weak_count_vtbl *v98;
  std::__shared_weak_count *v99;
  unint64_t *p_shared_owners;
  unint64_t v101;
  void *v102;
  void *v103;
  std::__shared_weak_count *v104;
  std::__shared_weak_count_vtbl *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  void *v109;
  void *v110;
  std::__shared_weak_count *v111;
  std::__shared_weak_count_vtbl *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  void *v116;
  void *v117;
  std::__shared_weak_count *v118;
  std::__shared_weak_count_vtbl *v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  void *v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  std::__shared_weak_count_vtbl *v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  void *v130;
  void *v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  void *v137;
  void *v138;
  std::__shared_weak_count *v139;
  std::__shared_weak_count_vtbl *v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  void *v144;
  void *v145;
  std::__shared_weak_count *v146;
  std::__shared_weak_count_vtbl *v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  void *v151;
  void *v152;
  std::__shared_weak_count *v153;
  std::__shared_weak_count_vtbl *v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  void *v158;
  uint64_t v159;
  std::__shared_weak_count *v160;
  std::__shared_weak_count_vtbl *v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  void *v165;
  std::__shared_weak_count_vtbl *v166;
  std::__shared_weak_count *v167;
  uint64_t v168;
  uint64_t i;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  std::__shared_weak_count *v175;
  std::__shared_weak_count_vtbl *v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count_vtbl *v180;
  uint64_t result;
  uint64_t v182;
  std::__shared_weak_count_vtbl *v183;
  std::__shared_weak_count *v184;
  void *v185[2];
  char v186;
  uint64_t v187;
  std::__shared_weak_count *v188;
  void *v189;
  std::__shared_weak_count *v190;
  void *v191;
  std::__shared_weak_count *v192;
  void *v193[2];
  char v194;
  void *v195;
  std::__shared_weak_count *v196;
  void *v197[2];
  char v198;
  void *v199;
  std::__shared_weak_count *v200;
  void *v201[2];
  char v202;
  void *v203;
  std::__shared_weak_count *v204;
  void *v205;
  std::__shared_weak_count *v206;
  void *v207[2];
  char v208;
  void *v209;
  std::__shared_weak_count *v210;
  void *v211[2];
  char v212;
  void *v213[2];
  char v214;
  void *v215;
  std::__shared_weak_count *v216;
  void *v217[2];
  char v218;
  void *v219[2];
  char v220;
  void *v221;
  std::__shared_weak_count *v222;
  void *v223[2];
  char v224;
  void *v225[2];
  char v226;
  void *v227;
  std::__shared_weak_count *v228;
  __int128 v229;
  __int128 v230;
  void *v231[2];
  uint64_t v232;
  __n128 v233;
  uint64_t v234;
  uint64_t v235;
  _QWORD *v236;
  char **v237;
  __n128 v238;
  __n128 v239;
  __n128 v240;
  __n128 v241;
  __n128 v242;
  _QWORD *v243;
  void *v244;
  void *v245;
  char *v246;
  _QWORD v247[3];
  void *__p;
  void *v249;
  _QWORD *v250;
  _QWORD v251[3];
  _QWORD *v252;
  _QWORD v253[3];
  _QWORD *v254;
  _BYTE v255[24];
  _BYTE *v256;
  _QWORD v257[3];
  _QWORD *v258;
  std::__shared_weak_count_vtbl *v259;
  uint64_t v260;
  void (__cdecl **v261)(std::__shared_weak_count *__hidden);
  _QWORD v262[3];

  v262[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v243 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (char *)operator new(8uLL);
  v244 = v8;
  *(_QWORD *)v8 = v7;
  v246 = v8 + 8;
  v245 = v8 + 8;
  v259 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v244);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v250 = v10 + 1;
  v249 = v10 + 1;
  v260 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v259, 2, &v242);
  MIL::IRParameter::Make(&v242, &v235);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "input", &v235);
  v11 = v235;
  v235 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v242.n128_u64[1];
  if (v242.n128_u64[1])
  {
    v13 = (unint64_t *)(v242.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v249 = __p;
    operator delete(__p);
  }
  if (v244)
  {
    v245 = v244;
    operator delete(v244);
  }
  v15 = v243;
  v16 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v17 = (char *)operator new(8uLL);
  v244 = v17;
  *(_QWORD *)v17 = v16;
  v246 = v17 + 8;
  v245 = v17 + 8;
  v259 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v244);
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = operator new(8uLL);
  __p = v19;
  *v19 = v18;
  v250 = v19 + 1;
  v249 = v19 + 1;
  v260 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v259, 2, &v241);
  MIL::IRParameter::Make(&v241, &v235);
  v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v15, "scale", &v235);
  v21 = v235;
  v235 = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = (std::__shared_weak_count *)v241.n128_u64[1];
  if (v241.n128_u64[1])
  {
    v23 = (unint64_t *)(v241.n128_u64[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (__p)
  {
    v249 = __p;
    operator delete(__p);
  }
  if (v244)
  {
    v245 = v244;
    operator delete(v244);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v20 + 5) + 32))(*((_QWORD *)v20 + 5), 1);
  v25 = v243;
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = (char *)operator new(8uLL);
  v244 = v27;
  *(_QWORD *)v27 = v26;
  v246 = v27 + 8;
  v245 = v27 + 8;
  v259 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v244);
  v28 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v29 = operator new(8uLL);
  __p = v29;
  *v29 = v28;
  v250 = v29 + 1;
  v249 = v29 + 1;
  v260 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v259, 2, &v240);
  MIL::IRParameter::Make(&v240, &v235);
  v30 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v25, "zero_point", &v235);
  v31 = v235;
  v235 = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v32 = (std::__shared_weak_count *)v240.n128_u64[1];
  if (v240.n128_u64[1])
  {
    v33 = (unint64_t *)(v240.n128_u64[1] + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (__p)
  {
    v249 = __p;
    operator delete(__p);
  }
  if (v244)
  {
    v245 = v244;
    operator delete(v244);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v30 + 5) + 32))(*((_QWORD *)v30 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v30 + 5) + 48))(*((_QWORD *)v30 + 5), 1);
  v35 = v243;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v239);
  MIL::IRParameter::Make(&v239, (uint64_t *)&v244);
  v36 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v35, "axis", (uint64_t *)&v244);
  v37 = v244;
  v244 = 0;
  if (v37)
    (*(void (**)(void *))(*(_QWORD *)v37 + 8))(v37);
  v38 = (std::__shared_weak_count *)v239.n128_u64[1];
  if (v239.n128_u64[1])
  {
    v39 = (unint64_t *)(v239.n128_u64[1] + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v36 + 5) + 32))(*((_QWORD *)v36 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v36 + 5) + 48))(*((_QWORD *)v36 + 5), 1);
  v41 = v243;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v238);
  MIL::IRParameter::Make(&v238, (uint64_t *)&v244);
  v42 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v41, "output_dtype", (uint64_t *)&v244);
  v43 = v244;
  v244 = 0;
  if (v43)
    (*(void (**)(void *))(*(_QWORD *)v43 + 8))(v43);
  v44 = (std::__shared_weak_count *)v238.n128_u64[1];
  if (v238.n128_u64[1])
  {
    v45 = (unint64_t *)(v238.n128_u64[1] + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v42 + 5) + 32))(*((_QWORD *)v42 + 5), 1);
  v237 = 0;
  v47 = operator new();
  *(_QWORD *)v47 = 0;
  *(_QWORD *)(v47 + 8) = 0;
  *(_QWORD *)(v47 + 16) = 0;
  v244 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v237, (void **)v47);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v244, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v237, 1uLL);
  v48 = v237;
  v49 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v50 = operator new(8uLL);
  __p = v50;
  *v50 = v49;
  v250 = v50 + 1;
  v249 = v50 + 1;
  v262[0] = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&__p);
  v51 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v52 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v259 = v52;
  v52->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v51;
  v260 = (uint64_t)&v52->~__shared_weak_count_0;
  v261 = &v52->~__shared_weak_count_0;
  v262[1] = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v259);
  MIL::IRParameter::MakeTypeSet((uint64_t)v262, 2, &v233);
  MIL::IRParameter::Make(&v233, &v234);
  v53 = v234;
  v235 = v234;
  if (v234)
  {
    v54 = (_QWORD *)operator new();
    v55 = v234;
    *v54 = &unk_1EA99F888;
    v54[1] = 0;
    v54[2] = 0;
    v54[3] = v55;
  }
  else
  {
    v54 = 0;
  }
  v236 = v54;
  v234 = 0;
  v56 = v48[2];
  v57 = v48[1];
  if (v57 >= v56)
  {
    v59 = (v57 - *v48) >> 4;
    v60 = v59 + 1;
    if ((unint64_t)(v59 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v61 = v56 - *v48;
    if (v61 >> 3 > v60)
      v60 = v61 >> 3;
    if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF0)
      v62 = 0xFFFFFFFFFFFFFFFLL;
    else
      v62 = v60;
    v247[1] = v48 + 2;
    v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v48 + 2), v62);
    v65 = (uint64_t *)&v63[16 * v59];
    *v65 = v53;
    v65[1] = (uint64_t)v54;
    v236 = 0;
    v235 = 0;
    v67 = *v48;
    v66 = v48[1];
    if (v66 == *v48)
    {
      v70 = v48[1];
      v68 = &v63[16 * v59];
    }
    else
    {
      v68 = &v63[16 * v59];
      do
      {
        v69 = *((_OWORD *)v66 - 1);
        v66 -= 16;
        *((_OWORD *)v68 - 1) = v69;
        v68 -= 16;
        *(_QWORD *)v66 = 0;
        *((_QWORD *)v66 + 1) = 0;
      }
      while (v66 != v67);
      v70 = *v48;
      v66 = v48[1];
    }
    v58 = (char *)(v65 + 2);
    *v48 = v68;
    v245 = v70;
    v48[1] = (char *)(v65 + 2);
    v246 = v66;
    v71 = v48[2];
    v48[2] = &v63[16 * v64];
    v247[0] = v71;
    v244 = v70;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v244);
  }
  else
  {
    *(_QWORD *)v57 = v53;
    *((_QWORD *)v57 + 1) = v54;
    v58 = v57 + 16;
    v236 = 0;
    v235 = 0;
  }
  v48[1] = v58;
  v72 = v234;
  v234 = 0;
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  v73 = (std::__shared_weak_count *)v233.n128_u64[1];
  if (v233.n128_u64[1])
  {
    v74 = (unint64_t *)(v233.n128_u64[1] + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  if (v259)
  {
    v260 = (uint64_t)v259;
    operator delete(v259);
  }
  if (__p)
  {
    v249 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v231 = *(_OWORD *)a2;
  v232 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v76 = (uint64_t)v243;
  *(_QWORD *)&v230 = v243;
  if (v243)
  {
    v77 = (_QWORD *)operator new();
    *v77 = &unk_1EA99F8E8;
    v77[1] = 0;
    v77[2] = 0;
    v77[3] = v76;
  }
  else
  {
    v77 = 0;
  }
  *((_QWORD *)&v230 + 1) = v77;
  v243 = 0;
  *(_QWORD *)&v229 = v237;
  if (v237)
  {
    v78 = (_QWORD *)operator new();
    v79 = v237;
    *v78 = &unk_1EA99F948;
    v78[1] = 0;
    v78[2] = 0;
    v78[3] = v79;
  }
  else
  {
    v78 = 0;
  }
  *((_QWORD *)&v229 + 1) = v78;
  v237 = 0;
  v257[0] = &unk_1EA99FAC8;
  v257[1] = MIL::Operators::Common::ios17::CustomValidators::ValidateQuantize;
  v258 = v257;
  v256 = 0;
  MIL::IROperator::Make((__int128 *)v231, &v230, &v229, (uint64_t)v257, (uint64_t)v255, a3);
  v80 = v256;
  if (v256 == v255)
  {
    v81 = 4;
    v80 = v255;
  }
  else
  {
    if (!v256)
      goto LABEL_87;
    v81 = 5;
  }
  (*(void (**)(void))(*v80 + 8 * v81))();
LABEL_87:
  v82 = v258;
  if (v258 == v257)
  {
    v83 = 4;
    v82 = v257;
    goto LABEL_91;
  }
  if (v258)
  {
    v83 = 5;
LABEL_91:
    (*(void (**)(void))(*v82 + 8 * v83))();
  }
  v84 = (std::__shared_weak_count *)*((_QWORD *)&v229 + 1);
  if (*((_QWORD *)&v229 + 1))
  {
    v85 = (unint64_t *)(*((_QWORD *)&v229 + 1) + 8);
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = (std::__shared_weak_count *)*((_QWORD *)&v230 + 1);
  if (*((_QWORD *)&v230 + 1))
  {
    v88 = (unint64_t *)(*((_QWORD *)&v230 + 1) + 8);
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  if (SHIBYTE(v232) < 0)
    operator delete(v231[0]);
  v90 = *a3;
  v253[0] = &off_1EA99FBD8;
  v253[1] = MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceQuantize;
  v254 = v253;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v90 + 200))(v90, v253);
  v91 = v254;
  if (v254 == v253)
  {
    v92 = 4;
    v91 = v253;
  }
  else
  {
    if (!v254)
      goto LABEL_109;
    v92 = 5;
  }
  (*(void (**)(void))(*v91 + 8 * v92))();
LABEL_109:
  v93 = *a3;
  v251[0] = &off_1EA9A00F8;
  v251[1] = MIL::Operators::Common::ios17::CustomValueInference::ValueInferenceQuantize;
  v252 = v251;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v93 + 216))(v93, v251);
  v94 = v252;
  if (v252 == v251)
  {
    v95 = 4;
    v94 = v251;
  }
  else
  {
    if (!v252)
      goto LABEL_114;
    v95 = 5;
  }
  (*(void (**)(void))(*v94 + 8 * v95))();
LABEL_114:
  MIL::Validation::TensorDTypeConstraints::Make(&v244);
  v96 = v244;
  std::string::basic_string[abi:ne180100]<0>(v225, "input");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v225, 0, (uint64_t *)&__p);
  v227 = __p;
  if (__p)
  {
    v97 = (std::__shared_weak_count *)operator new();
    v98 = (std::__shared_weak_count_vtbl *)__p;
    v97->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v97->__shared_owners_ = 0;
    v97->__shared_weak_owners_ = 0;
    v97[1].__vftable = v98;
  }
  else
  {
    v97 = 0;
  }
  v228 = v97;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v223, "FT");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v96 + 24))(v96, &v227, v223);
  if (v224 < 0)
    operator delete(v223[0]);
  v99 = v228;
  if (v228)
  {
    p_shared_owners = (unint64_t *)&v228->__shared_owners_;
    do
      v101 = __ldaxr(p_shared_owners);
    while (__stlxr(v101 - 1, p_shared_owners));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v102 = __p;
  __p = 0;
  if (v102)
    (*(void (**)(void *))(*(_QWORD *)v102 + 8))(v102);
  if (v226 < 0)
    operator delete(v225[0]);
  v103 = v244;
  std::string::basic_string[abi:ne180100]<0>(v219, "scale");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v219, 0, (uint64_t *)&__p);
  v221 = __p;
  if (__p)
  {
    v104 = (std::__shared_weak_count *)operator new();
    v105 = (std::__shared_weak_count_vtbl *)__p;
    v104->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v104->__shared_owners_ = 0;
    v104->__shared_weak_owners_ = 0;
    v104[1].__vftable = v105;
  }
  else
  {
    v104 = 0;
  }
  v222 = v104;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v217, "FT");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v103 + 24))(v103, &v221, v217);
  if (v218 < 0)
    operator delete(v217[0]);
  v106 = v222;
  if (v222)
  {
    v107 = (unint64_t *)&v222->__shared_owners_;
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  v109 = __p;
  __p = 0;
  if (v109)
    (*(void (**)(void *))(*(_QWORD *)v109 + 8))(v109);
  if (v220 < 0)
    operator delete(v219[0]);
  v110 = v244;
  std::string::basic_string[abi:ne180100]<0>(v213, "zero_point");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v213, 1, (uint64_t *)&__p);
  v215 = __p;
  if (__p)
  {
    v111 = (std::__shared_weak_count *)operator new();
    v112 = (std::__shared_weak_count_vtbl *)__p;
    v111->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v111->__shared_owners_ = 0;
    v111->__shared_weak_owners_ = 0;
    v111[1].__vftable = v112;
  }
  else
  {
    v111 = 0;
  }
  v216 = v111;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v211, "QT");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v110 + 24))(v110, &v215, v211);
  if (v212 < 0)
    operator delete(v211[0]);
  v113 = v216;
  if (v216)
  {
    v114 = (unint64_t *)&v216->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  v116 = __p;
  __p = 0;
  if (v116)
    (*(void (**)(void *))(*(_QWORD *)v116 + 8))(v116);
  if (v214 < 0)
    operator delete(v213[0]);
  v117 = v244;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v209 = __p;
  if (__p)
  {
    v118 = (std::__shared_weak_count *)operator new();
    v119 = (std::__shared_weak_count_vtbl *)__p;
    v118->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v118->__shared_owners_ = 0;
    v118->__shared_weak_owners_ = 0;
    v118[1].__vftable = v119;
  }
  else
  {
    v118 = 0;
  }
  v210 = v118;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v207, "QT");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v117 + 24))(v117, &v209, v207);
  if (v208 < 0)
    operator delete(v207[0]);
  v120 = v210;
  if (v210)
  {
    v121 = (unint64_t *)&v210->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v123 = __p;
  __p = 0;
  if (v123)
    (*(void (**)(void *))(*(_QWORD *)v123 + 8))(v123);
  v124 = *a3;
  v205 = v244;
  if (v244)
  {
    v125 = (std::__shared_weak_count *)operator new();
    v126 = (std::__shared_weak_count_vtbl *)v244;
    v125->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v125->__shared_owners_ = 0;
    v125->__shared_weak_owners_ = 0;
    v125[1].__vftable = v126;
  }
  else
  {
    v125 = 0;
  }
  v206 = v125;
  v244 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v124 + 56))(v124, &v205);
  v127 = v206;
  if (v206)
  {
    v128 = (unint64_t *)&v206->__shared_owners_;
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  v130 = v244;
  v244 = 0;
  if (v130)
    (*(void (**)(void *))(*(_QWORD *)v130 + 8))(v130);
  MIL::Validation::TensorRankValueConstraints::Make(&v244);
  v131 = v244;
  std::string::basic_string[abi:ne180100]<0>(v201, "input");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v201, 0, (uint64_t *)&__p);
  v203 = __p;
  if (__p)
  {
    v132 = (std::__shared_weak_count *)operator new();
    v133 = (std::__shared_weak_count_vtbl *)__p;
    v132->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v132->__shared_owners_ = 0;
    v132->__shared_weak_owners_ = 0;
    v132[1].__vftable = v133;
  }
  else
  {
    v132 = 0;
  }
  v204 = v132;
  __p = 0;
  (*(void (**)(void *, void **, uint64_t, uint64_t))(*(_QWORD *)v131 + 32))(v131, &v203, 1, 0x7FFFFFFFFFFFFFFFLL);
  v134 = v204;
  if (v204)
  {
    v135 = (unint64_t *)&v204->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  v137 = __p;
  __p = 0;
  if (v137)
    (*(void (**)(void *))(*(_QWORD *)v137 + 8))(v137);
  if (v202 < 0)
    operator delete(v201[0]);
  v138 = v244;
  std::string::basic_string[abi:ne180100]<0>(v197, "scale");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v197, 0, (uint64_t *)&__p);
  v199 = __p;
  if (__p)
  {
    v139 = (std::__shared_weak_count *)operator new();
    v140 = (std::__shared_weak_count_vtbl *)__p;
    v139->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v139->__shared_owners_ = 0;
    v139->__shared_weak_owners_ = 0;
    v139[1].__vftable = v140;
  }
  else
  {
    v139 = 0;
  }
  v200 = v139;
  __p = 0;
  (*(void (**)(void *, void **, _QWORD, uint64_t))(*(_QWORD *)v138 + 32))(v138, &v199, 0, 1);
  v141 = v200;
  if (v200)
  {
    v142 = (unint64_t *)&v200->__shared_owners_;
    do
      v143 = __ldaxr(v142);
    while (__stlxr(v143 - 1, v142));
    if (!v143)
    {
      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
      std::__shared_weak_count::__release_weak(v141);
    }
  }
  v144 = __p;
  __p = 0;
  if (v144)
    (*(void (**)(void *))(*(_QWORD *)v144 + 8))(v144);
  if (v198 < 0)
    operator delete(v197[0]);
  v145 = v244;
  std::string::basic_string[abi:ne180100]<0>(v193, "zero_point");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v193, 1, (uint64_t *)&__p);
  v195 = __p;
  if (__p)
  {
    v146 = (std::__shared_weak_count *)operator new();
    v147 = (std::__shared_weak_count_vtbl *)__p;
    v146->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v146->__shared_owners_ = 0;
    v146->__shared_weak_owners_ = 0;
    v146[1].__vftable = v147;
  }
  else
  {
    v146 = 0;
  }
  v196 = v146;
  __p = 0;
  (*(void (**)(void *, void **, _QWORD, uint64_t))(*(_QWORD *)v145 + 32))(v145, &v195, 0, 1);
  v148 = v196;
  if (v196)
  {
    v149 = (unint64_t *)&v196->__shared_owners_;
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
    }
  }
  v151 = __p;
  __p = 0;
  if (v151)
    (*(void (**)(void *))(*(_QWORD *)v151 + 8))(v151);
  if (v194 < 0)
    operator delete(v193[0]);
  v152 = v244;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v191 = __p;
  if (__p)
  {
    v153 = (std::__shared_weak_count *)operator new();
    v154 = (std::__shared_weak_count_vtbl *)__p;
    v153->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v153->__shared_owners_ = 0;
    v153->__shared_weak_owners_ = 0;
    v153[1].__vftable = v154;
  }
  else
  {
    v153 = 0;
  }
  v192 = v153;
  __p = 0;
  (*(void (**)(void *, void **, uint64_t, uint64_t))(*(_QWORD *)v152 + 32))(v152, &v191, 1, 0x7FFFFFFFFFFFFFFFLL);
  v155 = v192;
  if (v192)
  {
    v156 = (unint64_t *)&v192->__shared_owners_;
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
  v158 = __p;
  __p = 0;
  if (v158)
    (*(void (**)(void *))(*(_QWORD *)v158 + 8))(v158);
  v159 = *a3;
  v189 = v244;
  if (v244)
  {
    v160 = (std::__shared_weak_count *)operator new();
    v161 = (std::__shared_weak_count_vtbl *)v244;
    v160->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FC78;
    v160->__shared_owners_ = 0;
    v160->__shared_weak_owners_ = 0;
    v160[1].__vftable = v161;
  }
  else
  {
    v160 = 0;
  }
  v190 = v160;
  v244 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v159 + 56))(v159, &v189);
  v162 = v190;
  if (v190)
  {
    v163 = (unint64_t *)&v190->__shared_owners_;
    do
      v164 = __ldaxr(v163);
    while (__stlxr(v164 - 1, v163));
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
    }
  }
  v165 = v244;
  v244 = 0;
  if (v165)
    (*(void (**)(void *))(*(_QWORD *)v165 + 8))(v165);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v259);
  v166 = v259;
  std::string::basic_string[abi:ne180100]<0>(v185, "output_dtype");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v185, 0, &v235);
  v187 = v235;
  if (v235)
  {
    v167 = (std::__shared_weak_count *)operator new();
    v168 = v235;
    v167->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v167->__shared_owners_ = 0;
    v167->__shared_weak_owners_ = 0;
    v167[1].__vftable = (std::__shared_weak_count_vtbl *)v168;
  }
  else
  {
    v167 = 0;
  }
  v188 = v167;
  v235 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v244, "int8");
  std::string::basic_string[abi:ne180100]<0>(v247, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v244, 2);
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, void **, _QWORD))v166->~__shared_weak_count + 3))(v166, &v187, &__p, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v247[i + 2]) < 0)
      operator delete((void *)v247[i]);
  }
  v170 = v188;
  if (v188)
  {
    v171 = (unint64_t *)&v188->__shared_owners_;
    do
      v172 = __ldaxr(v171);
    while (__stlxr(v172 - 1, v171));
    if (!v172)
    {
      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
      std::__shared_weak_count::__release_weak(v170);
    }
  }
  v173 = v235;
  v235 = 0;
  if (v173)
    (*(void (**)(uint64_t))(*(_QWORD *)v173 + 8))(v173);
  if (v186 < 0)
    operator delete(v185[0]);
  v174 = *a3;
  v183 = v259;
  if (v259)
  {
    v175 = (std::__shared_weak_count *)operator new();
    v176 = v259;
    v175->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v175->__shared_owners_ = 0;
    v175->__shared_weak_owners_ = 0;
    v175[1].__vftable = v176;
  }
  else
  {
    v175 = 0;
  }
  v184 = v175;
  v259 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v174 + 56))(v174, &v183);
  v177 = v184;
  if (v184)
  {
    v178 = (unint64_t *)&v184->__shared_owners_;
    do
      v179 = __ldaxr(v178);
    while (__stlxr(v179 - 1, v178));
    if (!v179)
    {
      ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
      std::__shared_weak_count::__release_weak(v177);
    }
  }
  v180 = v259;
  v259 = 0;
  if (v180)
    (*((void (**)(std::__shared_weak_count_vtbl *))v180->~__shared_weak_count + 1))(v180);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v237, 0);
  result = (uint64_t)v243;
  if (v243)
  {
    v182 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v243);
    return MEMORY[0x1E0C023A0](v182, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E090F20C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 112);
  *(_QWORD *)(v2 - 112) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x238], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x290], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::GRU::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unsigned __int8 *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unsigned __int8 *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  _QWORD *v58;
  unsigned __int8 *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  _QWORD *v64;
  unsigned __int8 *v65;
  void *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  _QWORD *v70;
  unsigned __int8 *v71;
  void *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  _QWORD *v76;
  unsigned __int8 *v77;
  void *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  _QWORD *v82;
  unsigned __int8 *v83;
  void *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  char **v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  std::__shared_weak_count_vtbl *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  char *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t *v110;
  char *v111;
  char *v112;
  char *v113;
  __int128 v114;
  char *v115;
  char *v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  char **v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  std::__shared_weak_count_vtbl *v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  char *v131;
  char *v132;
  char *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t *v140;
  char *v141;
  char *v142;
  char *v143;
  __int128 v144;
  char *v145;
  char *v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  char **v154;
  _QWORD *v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  _OWORD *v165;
  unsigned __int8 *v166;
  void *v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  uint64_t v171;
  std::__shared_weak_count_vtbl *v172;
  std::__shared_weak_count *v173;
  std::__shared_weak_count *v174;
  unint64_t *p_shared_owners;
  unint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  void *v180;
  std::__shared_weak_count *v181;
  std::__shared_weak_count_vtbl *v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  void *v186;
  void *v187;
  std::__shared_weak_count *v188;
  std::__shared_weak_count_vtbl *v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  void *v193;
  void *v194;
  std::__shared_weak_count *v195;
  std::__shared_weak_count_vtbl *v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  void *v200;
  void *v201;
  std::__shared_weak_count *v202;
  std::__shared_weak_count_vtbl *v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  void *v207;
  void *v208;
  std::__shared_weak_count *v209;
  std::__shared_weak_count_vtbl *v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  void *v214;
  void *v215;
  std::__shared_weak_count *v216;
  std::__shared_weak_count_vtbl *v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  void *v221;
  void *v222;
  std::__shared_weak_count *v223;
  std::__shared_weak_count_vtbl *v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  void *v228;
  uint64_t v229;
  std::__shared_weak_count *v230;
  std::__shared_weak_count_vtbl *v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  void *v235;
  void *v236;
  std::__shared_weak_count *v237;
  std::__shared_weak_count_vtbl *v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  void *v242;
  void *v243;
  std::__shared_weak_count *v244;
  std::__shared_weak_count_vtbl *v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  void *v249;
  void *v250;
  std::__shared_weak_count *v251;
  std::__shared_weak_count_vtbl *v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  void *v256;
  void *v257;
  std::__shared_weak_count *v258;
  std::__shared_weak_count_vtbl *v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  void *v263;
  void *v264;
  std::__shared_weak_count *v265;
  std::__shared_weak_count_vtbl *v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  void *v270;
  void *v271;
  std::__shared_weak_count *v272;
  std::__shared_weak_count_vtbl *v273;
  std::__shared_weak_count *v274;
  unint64_t *v275;
  unint64_t v276;
  void *v277;
  void *v278;
  std::__shared_weak_count *v279;
  std::__shared_weak_count_vtbl *v280;
  std::__shared_weak_count *v281;
  unint64_t *v282;
  unint64_t v283;
  void *v284;
  void *v285;
  std::__shared_weak_count *v286;
  std::__shared_weak_count_vtbl *v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  void *v291;
  void *v292;
  std::__shared_weak_count *v293;
  std::__shared_weak_count_vtbl *v294;
  std::__shared_weak_count *v295;
  unint64_t *v296;
  unint64_t v297;
  void *v298;
  void *v299;
  std::__shared_weak_count *v300;
  std::__shared_weak_count_vtbl *v301;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  void *v305;
  void *v306;
  std::__shared_weak_count *v307;
  std::__shared_weak_count_vtbl *v308;
  std::__shared_weak_count *v309;
  unint64_t *v310;
  unint64_t v311;
  void *v312;
  void *v313;
  std::__shared_weak_count *v314;
  std::__shared_weak_count_vtbl *v315;
  std::__shared_weak_count *v316;
  unint64_t *v317;
  unint64_t v318;
  void *v319;
  void *v320;
  std::__shared_weak_count *v321;
  std::__shared_weak_count_vtbl *v322;
  std::__shared_weak_count *v323;
  unint64_t *v324;
  unint64_t v325;
  void *v326;
  void *v327;
  std::__shared_weak_count *v328;
  std::__shared_weak_count_vtbl *v329;
  std::__shared_weak_count *v330;
  unint64_t *v331;
  unint64_t v332;
  void *v333;
  uint64_t v334;
  std::__shared_weak_count *v335;
  std::__shared_weak_count_vtbl *v336;
  std::__shared_weak_count *v337;
  unint64_t *v338;
  unint64_t v339;
  void *v340;
  uint64_t v341;
  std::__shared_weak_count *v342;
  uint64_t v343;
  uint64_t i;
  std::__shared_weak_count *v345;
  unint64_t *v346;
  unint64_t v347;
  uint64_t v348;
  uint64_t v349;
  std::__shared_weak_count *v350;
  uint64_t v351;
  uint64_t j;
  std::__shared_weak_count *v353;
  unint64_t *v354;
  unint64_t v355;
  uint64_t v356;
  uint64_t v357;
  std::__shared_weak_count *v358;
  uint64_t v359;
  uint64_t k;
  std::__shared_weak_count *v361;
  unint64_t *v362;
  unint64_t v363;
  uint64_t v364;
  uint64_t v365;
  std::__shared_weak_count *v366;
  uint64_t v367;
  uint64_t m;
  std::__shared_weak_count *v369;
  unint64_t *v370;
  unint64_t v371;
  uint64_t v372;
  uint64_t v373;
  std::__shared_weak_count *v374;
  uint64_t v375;
  std::__shared_weak_count *v376;
  unint64_t *v377;
  unint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t result;
  uint64_t v382;
  uint64_t v383;
  std::__shared_weak_count *v384;
  void *v385[2];
  char v386;
  uint64_t v387;
  std::__shared_weak_count *v388;
  void *v389[2];
  char v390;
  uint64_t v391;
  std::__shared_weak_count *v392;
  void *v393[2];
  char v394;
  uint64_t v395;
  std::__shared_weak_count *v396;
  void *v397[2];
  char v398;
  uint64_t v399;
  std::__shared_weak_count *v400;
  void *v401;
  std::__shared_weak_count *v402;
  void *v403[2];
  char v404;
  void *v405;
  std::__shared_weak_count *v406;
  void *v407[2];
  char v408;
  void *v409;
  std::__shared_weak_count *v410;
  void *v411[2];
  char v412;
  void *v413;
  std::__shared_weak_count *v414;
  void *v415[2];
  char v416;
  void *v417;
  std::__shared_weak_count *v418;
  void *v419[2];
  char v420;
  void *v421[2];
  char v422;
  void *v423;
  std::__shared_weak_count *v424;
  void *v425[2];
  char v426;
  void *v427[2];
  char v428;
  void *v429;
  std::__shared_weak_count *v430;
  void *v431[2];
  char v432;
  void *v433[2];
  char v434;
  void *v435;
  std::__shared_weak_count *v436;
  void *v437[2];
  char v438;
  void *v439[2];
  char v440;
  void *v441;
  std::__shared_weak_count *v442;
  void *v443[2];
  char v444;
  void *v445[2];
  char v446;
  void *v447;
  std::__shared_weak_count *v448;
  void *v449[2];
  char v450;
  void *v451[2];
  char v452;
  void *v453;
  std::__shared_weak_count *v454;
  void *v455[2];
  char v456;
  void *v457[2];
  char v458;
  void *v459;
  std::__shared_weak_count *v460;
  void *v461[2];
  char v462;
  void *v463[2];
  char v464;
  void *v465;
  std::__shared_weak_count *v466;
  void *v467[2];
  char v468;
  void *v469[2];
  char v470;
  void *v471;
  std::__shared_weak_count *v472;
  void *v473[2];
  char v474;
  void *v475[2];
  char v476;
  void *v477;
  std::__shared_weak_count *v478;
  void *v479;
  std::__shared_weak_count *v480;
  void *v481[2];
  char v482;
  void *v483;
  std::__shared_weak_count *v484;
  void *v485[2];
  char v486;
  void *v487;
  std::__shared_weak_count *v488;
  void *v489[2];
  char v490;
  void *v491[2];
  char v492;
  void *v493;
  std::__shared_weak_count *v494;
  void *v495[2];
  char v496;
  void *v497[2];
  char v498;
  void *v499;
  std::__shared_weak_count *v500;
  void *v501[2];
  char v502;
  void *v503[2];
  char v504;
  void *v505;
  std::__shared_weak_count *v506;
  void *v507[2];
  char v508;
  void *v509[2];
  char v510;
  void *v511;
  std::__shared_weak_count *v512;
  void *v513[2];
  char v514;
  void *v515[2];
  char v516;
  void *v517;
  std::__shared_weak_count *v518;
  std::__shared_weak_count_vtbl *v519;
  std::__shared_weak_count *v520;
  __n128 v521;
  __int128 v522;
  __int128 v523;
  void *v524[2];
  uint64_t v525;
  __n128 v526;
  __n128 v527;
  uint64_t v528;
  uint64_t v529;
  _QWORD *v530;
  char **v531;
  __n128 v532;
  __n128 v533;
  __n128 v534;
  __n128 v535;
  __n128 v536;
  __n128 v537;
  __n128 v538;
  __n128 v539;
  __n128 v540;
  _QWORD *v541;
  void *v542;
  void *v543;
  char *v544;
  char *v545;
  char **v546;
  char v547;
  _QWORD v548[3];
  _QWORD v549[3];
  _QWORD v550[3];
  void *v551[3];
  void *__p;
  void *v553;
  _QWORD *v554;
  _QWORD v555[3];
  _QWORD *v556;
  _BYTE v557[24];
  _BYTE *v558;
  _QWORD v559[3];
  _QWORD *v560;
  std::__shared_weak_count_vtbl *v561;
  uint64_t p_get_deleter;
  _QWORD *p_on_zero_shared;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;

  v566 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v541 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = (char *)operator new(0x18uLL);
  v544 = v10 + 24;
  *(_QWORD *)v10 = v7;
  *((_QWORD *)v10 + 1) = v8;
  *((_QWORD *)v10 + 2) = v9;
  v542 = v10;
  v543 = v10 + 24;
  v561 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v542);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = operator new(0x18uLL);
  v554 = v14 + 3;
  *v14 = v11;
  v14[1] = v12;
  v14[2] = v13;
  __p = v14;
  v553 = v14 + 3;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v561, 2, &v540);
  MIL::IRParameter::Make(&v540, &v529);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v529);
  v15 = v529;
  v529 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v540.n128_u64[1];
  if (v540.n128_u64[1])
  {
    v17 = (unint64_t *)(v540.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v553 = __p;
    operator delete(__p);
  }
  if (v542)
  {
    v543 = v542;
    operator delete(v542);
  }
  v19 = v541;
  v20 = MIL::IRUnknownDimension::Make(a1, 0);
  v21 = MIL::IRUnknownDimension::Make(a1, 0);
  v22 = (char *)operator new(0x10uLL);
  v544 = v22 + 16;
  *(_QWORD *)v22 = v20;
  *((_QWORD *)v22 + 1) = v21;
  v542 = v22;
  v543 = v22 + 16;
  v561 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v542);
  v23 = MIL::IRUnknownDimension::Make(a1, 0);
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = operator new(0x10uLL);
  v554 = v25 + 2;
  *v25 = v23;
  v25[1] = v24;
  __p = v25;
  v553 = v25 + 2;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v561, 2, &v539);
  MIL::IRParameter::Make(&v539, &v529);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v19, "initial_h", &v529);
  v26 = v529;
  v529 = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = (std::__shared_weak_count *)v539.n128_u64[1];
  if (v539.n128_u64[1])
  {
    v28 = (unint64_t *)(v539.n128_u64[1] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (__p)
  {
    v553 = __p;
    operator delete(__p);
  }
  if (v542)
  {
    v543 = v542;
    operator delete(v542);
  }
  v30 = v541;
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = MIL::IRUnknownDimension::Make(a1, 0);
  v33 = (char *)operator new(0x10uLL);
  v544 = v33 + 16;
  *(_QWORD *)v33 = v31;
  *((_QWORD *)v33 + 1) = v32;
  v542 = v33;
  v543 = v33 + 16;
  v561 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v542);
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = MIL::IRUnknownDimension::Make(a1, 0);
  v36 = operator new(0x10uLL);
  v554 = v36 + 2;
  *v36 = v34;
  v36[1] = v35;
  __p = v36;
  v553 = v36 + 2;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v561, 2, &v538);
  MIL::IRParameter::Make(&v538, &v529);
  v37 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v30, "weight_ih", &v529);
  v38 = v529;
  v529 = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  v39 = (std::__shared_weak_count *)v538.n128_u64[1];
  if (v538.n128_u64[1])
  {
    v40 = (unint64_t *)(v538.n128_u64[1] + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  if (__p)
  {
    v553 = __p;
    operator delete(__p);
  }
  if (v542)
  {
    v543 = v542;
    operator delete(v542);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v37 + 5) + 32))(*((_QWORD *)v37 + 5), 1);
  v42 = v541;
  v43 = MIL::IRUnknownDimension::Make(a1, 0);
  v44 = MIL::IRUnknownDimension::Make(a1, 0);
  v45 = (char *)operator new(0x10uLL);
  v544 = v45 + 16;
  *(_QWORD *)v45 = v43;
  *((_QWORD *)v45 + 1) = v44;
  v542 = v45;
  v543 = v45 + 16;
  v561 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v542);
  v46 = MIL::IRUnknownDimension::Make(a1, 0);
  v47 = MIL::IRUnknownDimension::Make(a1, 0);
  v48 = operator new(0x10uLL);
  v554 = v48 + 2;
  *v48 = v46;
  v48[1] = v47;
  __p = v48;
  v553 = v48 + 2;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v561, 2, &v537);
  MIL::IRParameter::Make(&v537, &v529);
  v49 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v42, "weight_hh", &v529);
  v50 = v529;
  v529 = 0;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  v51 = (std::__shared_weak_count *)v537.n128_u64[1];
  if (v537.n128_u64[1])
  {
    v52 = (unint64_t *)(v537.n128_u64[1] + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  if (__p)
  {
    v553 = __p;
    operator delete(__p);
  }
  if (v542)
  {
    v543 = v542;
    operator delete(v542);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v49 + 5) + 32))(*((_QWORD *)v49 + 5), 1);
  v54 = v541;
  v55 = MIL::IRUnknownDimension::Make(a1, 0);
  v56 = (char *)operator new(8uLL);
  v542 = v56;
  *(_QWORD *)v56 = v55;
  v544 = v56 + 8;
  v543 = v56 + 8;
  v561 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v542);
  v57 = MIL::IRUnknownDimension::Make(a1, 0);
  v58 = operator new(8uLL);
  __p = v58;
  *v58 = v57;
  v554 = v58 + 1;
  v553 = v58 + 1;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v561, 2, &v536);
  MIL::IRParameter::Make(&v536, &v529);
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v54, "bias", &v529);
  v60 = v529;
  v529 = 0;
  if (v60)
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v536.n128_u64[1];
  if (v536.n128_u64[1])
  {
    v62 = (unint64_t *)(v536.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (__p)
  {
    v553 = __p;
    operator delete(__p);
  }
  if (v542)
  {
    v543 = v542;
    operator delete(v542);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 32))(*((_QWORD *)v59 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 48))(*((_QWORD *)v59 + 5), 1);
  v64 = v541;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v535);
  MIL::IRParameter::Make(&v535, (uint64_t *)&v542);
  v65 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v64, "direction", (uint64_t *)&v542);
  v66 = v542;
  v542 = 0;
  if (v66)
    (*(void (**)(void *))(*(_QWORD *)v66 + 8))(v66);
  v67 = (std::__shared_weak_count *)v535.n128_u64[1];
  if (v535.n128_u64[1])
  {
    v68 = (unint64_t *)(v535.n128_u64[1] + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v65 + 5) + 32))(*((_QWORD *)v65 + 5), 1);
  v70 = v541;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v534);
  MIL::IRParameter::Make(&v534, (uint64_t *)&v542);
  v71 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[16],std::unique_ptr<MIL::IRParameter>>(v70, "output_sequence", (uint64_t *)&v542);
  v72 = v542;
  v542 = 0;
  if (v72)
    (*(void (**)(void *))(*(_QWORD *)v72 + 8))(v72);
  v73 = (std::__shared_weak_count *)v534.n128_u64[1];
  if (v534.n128_u64[1])
  {
    v74 = (unint64_t *)(v534.n128_u64[1] + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v71 + 5) + 32))(*((_QWORD *)v71 + 5), 1);
  v76 = v541;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v533);
  MIL::IRParameter::Make(&v533, (uint64_t *)&v542);
  v77 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v76, "recurrent_activation", (uint64_t *)&v542);
  v78 = v542;
  v542 = 0;
  if (v78)
    (*(void (**)(void *))(*(_QWORD *)v78 + 8))(v78);
  v79 = (std::__shared_weak_count *)v533.n128_u64[1];
  if (v533.n128_u64[1])
  {
    v80 = (unint64_t *)(v533.n128_u64[1] + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v77 + 5) + 32))(*((_QWORD *)v77 + 5), 1);
  v82 = v541;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v532);
  MIL::IRParameter::Make(&v532, (uint64_t *)&v542);
  v83 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v82, "activation", (uint64_t *)&v542);
  v84 = v542;
  v542 = 0;
  if (v84)
    (*(void (**)(void *))(*(_QWORD *)v84 + 8))(v84);
  v85 = (std::__shared_weak_count *)v532.n128_u64[1];
  if (v532.n128_u64[1])
  {
    v86 = (unint64_t *)(v532.n128_u64[1] + 8);
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v83 + 5) + 32))(*((_QWORD *)v83 + 5), 1);
  v531 = 0;
  v88 = operator new();
  *(_QWORD *)v88 = 0;
  *(_QWORD *)(v88 + 8) = 0;
  *(_QWORD *)(v88 + 16) = 0;
  v542 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v531, (void **)v88);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v542, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v531, 2uLL);
  v89 = v531;
  v90 = MIL::IRUnknownDimension::Make(a1, 0);
  v91 = MIL::IRUnknownDimension::Make(a1, 0);
  v92 = MIL::IRUnknownDimension::Make(a1, 0);
  v93 = operator new(0x18uLL);
  v554 = v93 + 3;
  *v93 = v90;
  v93[1] = v91;
  v93[2] = v92;
  __p = v93;
  v553 = v93 + 3;
  v564 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v94 = MIL::IRUnknownDimension::Make(a1, 0);
  v95 = MIL::IRUnknownDimension::Make(a1, 0);
  v96 = MIL::IRUnknownDimension::Make(a1, 0);
  v97 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (uint64_t)&v97->__get_deleter;
  p_on_zero_shared = &v97->__get_deleter;
  v97->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v94;
  v97->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v95;
  v97->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v96;
  v561 = v97;
  v565 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v561);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v564, 2, &v527);
  MIL::IRParameter::Make(&v527, &v528);
  v98 = v528;
  v529 = v528;
  if (v528)
  {
    v99 = (_QWORD *)operator new();
    v100 = v528;
    *v99 = &unk_1EA99F888;
    v99[1] = 0;
    v99[2] = 0;
    v99[3] = v100;
  }
  else
  {
    v99 = 0;
  }
  v530 = v99;
  v528 = 0;
  v101 = v89[2];
  v102 = v89[1];
  if (v102 >= v101)
  {
    v104 = (v102 - *v89) >> 4;
    v105 = v104 + 1;
    if ((unint64_t)(v104 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v106 = v101 - *v89;
    if (v106 >> 3 > v105)
      v105 = v106 >> 3;
    if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFF0)
      v107 = 0xFFFFFFFFFFFFFFFLL;
    else
      v107 = v105;
    v546 = v89 + 2;
    v108 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v89 + 2), v107);
    v110 = (uint64_t *)&v108[16 * v104];
    *v110 = v98;
    v110[1] = (uint64_t)v99;
    v530 = 0;
    v529 = 0;
    v112 = *v89;
    v111 = v89[1];
    if (v111 == *v89)
    {
      v115 = v89[1];
      v113 = &v108[16 * v104];
    }
    else
    {
      v113 = &v108[16 * v104];
      do
      {
        v114 = *((_OWORD *)v111 - 1);
        v111 -= 16;
        *((_OWORD *)v113 - 1) = v114;
        v113 -= 16;
        *(_QWORD *)v111 = 0;
        *((_QWORD *)v111 + 1) = 0;
      }
      while (v111 != v112);
      v115 = *v89;
      v111 = v89[1];
    }
    v103 = (char *)(v110 + 2);
    *v89 = v113;
    v543 = v115;
    v89[1] = (char *)(v110 + 2);
    v544 = v111;
    v116 = v89[2];
    v89[2] = &v108[16 * v109];
    v545 = v116;
    v542 = v115;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v542);
  }
  else
  {
    *(_QWORD *)v102 = v98;
    *((_QWORD *)v102 + 1) = v99;
    v103 = v102 + 16;
    v530 = 0;
    v529 = 0;
  }
  v89[1] = v103;
  v117 = v528;
  v528 = 0;
  if (v117)
    (*(void (**)(uint64_t))(*(_QWORD *)v117 + 8))(v117);
  v118 = (std::__shared_weak_count *)v527.n128_u64[1];
  if (v527.n128_u64[1])
  {
    v119 = (unint64_t *)(v527.n128_u64[1] + 8);
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  if (v561)
  {
    p_get_deleter = (uint64_t)v561;
    operator delete(v561);
  }
  if (__p)
  {
    v553 = __p;
    operator delete(__p);
  }
  v121 = v531;
  v122 = MIL::IRUnknownDimension::Make(a1, 0);
  v123 = MIL::IRUnknownDimension::Make(a1, 0);
  v124 = operator new(0x10uLL);
  v554 = v124 + 2;
  *v124 = v122;
  v124[1] = v123;
  __p = v124;
  v553 = v124 + 2;
  v564 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v125 = MIL::IRUnknownDimension::Make(a1, 0);
  v126 = MIL::IRUnknownDimension::Make(a1, 0);
  v127 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_get_deleter = (uint64_t)&v127->__on_zero_shared;
  p_on_zero_shared = &v127->__on_zero_shared;
  v127->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v125;
  v127->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v126;
  v561 = v127;
  v565 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v561);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v564, 2, &v526);
  MIL::IRParameter::Make(&v526, &v528);
  v128 = v528;
  v529 = v528;
  if (v528)
  {
    v129 = (_QWORD *)operator new();
    v130 = v528;
    *v129 = &unk_1EA99F888;
    v129[1] = 0;
    v129[2] = 0;
    v129[3] = v130;
  }
  else
  {
    v129 = 0;
  }
  v530 = v129;
  v528 = 0;
  v131 = v121[2];
  v132 = v121[1];
  if (v132 >= v131)
  {
    v134 = (v132 - *v121) >> 4;
    v135 = v134 + 1;
    if ((unint64_t)(v134 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v136 = v131 - *v121;
    if (v136 >> 3 > v135)
      v135 = v136 >> 3;
    if ((unint64_t)v136 >= 0x7FFFFFFFFFFFFFF0)
      v137 = 0xFFFFFFFFFFFFFFFLL;
    else
      v137 = v135;
    v546 = v121 + 2;
    v138 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v121 + 2), v137);
    v140 = (uint64_t *)&v138[16 * v134];
    *v140 = v128;
    v140[1] = (uint64_t)v129;
    v530 = 0;
    v529 = 0;
    v142 = *v121;
    v141 = v121[1];
    if (v141 == *v121)
    {
      v145 = v121[1];
      v143 = &v138[16 * v134];
    }
    else
    {
      v143 = &v138[16 * v134];
      do
      {
        v144 = *((_OWORD *)v141 - 1);
        v141 -= 16;
        *((_OWORD *)v143 - 1) = v144;
        v143 -= 16;
        *(_QWORD *)v141 = 0;
        *((_QWORD *)v141 + 1) = 0;
      }
      while (v141 != v142);
      v145 = *v121;
      v141 = v121[1];
    }
    v133 = (char *)(v140 + 2);
    *v121 = v143;
    v543 = v145;
    v121[1] = (char *)(v140 + 2);
    v544 = v141;
    v146 = v121[2];
    v121[2] = &v138[16 * v139];
    v545 = v146;
    v542 = v145;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v542);
  }
  else
  {
    *(_QWORD *)v132 = v128;
    *((_QWORD *)v132 + 1) = v129;
    v133 = v132 + 16;
    v530 = 0;
    v529 = 0;
  }
  v121[1] = v133;
  v147 = v528;
  v528 = 0;
  if (v147)
    (*(void (**)(uint64_t))(*(_QWORD *)v147 + 8))(v147);
  v148 = (std::__shared_weak_count *)v526.n128_u64[1];
  if (v526.n128_u64[1])
  {
    v149 = (unint64_t *)(v526.n128_u64[1] + 8);
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
    }
  }
  if (v561)
  {
    p_get_deleter = (uint64_t)v561;
    operator delete(v561);
  }
  if (__p)
  {
    v553 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v524 = *(_OWORD *)a2;
  v525 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v151 = (uint64_t)v541;
  *(_QWORD *)&v523 = v541;
  if (v541)
  {
    v152 = (_QWORD *)operator new();
    *v152 = &unk_1EA99F8E8;
    v152[1] = 0;
    v152[2] = 0;
    v152[3] = v151;
  }
  else
  {
    v152 = 0;
  }
  *((_QWORD *)&v523 + 1) = v152;
  v541 = 0;
  *(_QWORD *)&v522 = v531;
  if (v531)
  {
    v153 = (_QWORD *)operator new();
    v154 = v531;
    *v153 = &unk_1EA99F948;
    v153[1] = 0;
    v153[2] = 0;
    v153[3] = v154;
  }
  else
  {
    v153 = 0;
  }
  *((_QWORD *)&v522 + 1) = v153;
  v531 = 0;
  v559[0] = &unk_1EA99FAC8;
  v559[1] = MIL::Operators::Common::ios17::CustomValidators::ValidateGRU;
  v560 = v559;
  v558 = 0;
  MIL::IROperator::Make((__int128 *)v524, &v523, &v522, (uint64_t)v559, (uint64_t)v557, a3);
  v155 = v558;
  if (v558 == v557)
  {
    v156 = 4;
    v155 = v557;
  }
  else
  {
    if (!v558)
      goto LABEL_151;
    v156 = 5;
  }
  (*(void (**)(void))(*v155 + 8 * v156))();
LABEL_151:
  v157 = v560;
  if (v560 == v559)
  {
    v158 = 4;
    v157 = v559;
    goto LABEL_155;
  }
  if (v560)
  {
    v158 = 5;
LABEL_155:
    (*(void (**)(void))(*v157 + 8 * v158))();
  }
  v159 = (std::__shared_weak_count *)*((_QWORD *)&v522 + 1);
  if (*((_QWORD *)&v522 + 1))
  {
    v160 = (unint64_t *)(*((_QWORD *)&v522 + 1) + 8);
    do
      v161 = __ldaxr(v160);
    while (__stlxr(v161 - 1, v160));
    if (!v161)
    {
      ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
      std::__shared_weak_count::__release_weak(v159);
    }
  }
  v162 = (std::__shared_weak_count *)*((_QWORD *)&v523 + 1);
  if (*((_QWORD *)&v523 + 1))
  {
    v163 = (unint64_t *)(*((_QWORD *)&v523 + 1) + 8);
    do
      v164 = __ldaxr(v163);
    while (__stlxr(v164 - 1, v163));
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
    }
  }
  if (SHIBYTE(v525) < 0)
    operator delete(v524[0]);
  v561 = 0;
  v165 = (_OWORD *)operator new();
  *v165 = 0u;
  v165[1] = 0u;
  *((_DWORD *)v165 + 8) = 1065353216;
  v561 = (std::__shared_weak_count_vtbl *)v165;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v521);
  MIL::IRParameter::Make(&v521, (uint64_t *)&v542);
  v166 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v165, "minimum_compute_type", (uint64_t *)&v542);
  v167 = v542;
  v542 = 0;
  if (v167)
    (*(void (**)(void *))(*(_QWORD *)v167 + 8))(v167);
  v168 = (std::__shared_weak_count *)v521.n128_u64[1];
  if (v521.n128_u64[1])
  {
    v169 = (unint64_t *)(v521.n128_u64[1] + 8);
    do
      v170 = __ldaxr(v169);
    while (__stlxr(v170 - 1, v169));
    if (!v170)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v166 + 5) + 32))(*((_QWORD *)v166 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v166 + 5) + 48))(*((_QWORD *)v166 + 5), 1);
  v171 = *a3;
  v172 = v561;
  v519 = v561;
  if (v561)
  {
    v173 = (std::__shared_weak_count *)operator new();
    v173->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v173->__shared_owners_ = 0;
    v173->__shared_weak_owners_ = 0;
    v173[1].__vftable = v172;
  }
  else
  {
    v173 = 0;
  }
  v520 = v173;
  v561 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v171 + 184))(v171, &v519);
  v174 = v520;
  if (v520)
  {
    p_shared_owners = (unint64_t *)&v520->__shared_owners_;
    do
      v176 = __ldaxr(p_shared_owners);
    while (__stlxr(v176 - 1, p_shared_owners));
    if (!v176)
    {
      ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
      std::__shared_weak_count::__release_weak(v174);
    }
  }
  v177 = *a3;
  v555[0] = &off_1EA99FBD8;
  v555[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceGRU;
  v556 = v555;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v177 + 200))(v177, v555);
  v178 = v556;
  if (v556 == v555)
  {
    v179 = 4;
    v178 = v555;
  }
  else
  {
    if (!v556)
      goto LABEL_188;
    v179 = 5;
  }
  (*(void (**)(void))(*v178 + 8 * v179))();
LABEL_188:
  MIL::Validation::TensorDTypeConstraints::Make(&v542);
  v180 = v542;
  std::string::basic_string[abi:ne180100]<0>(v515, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v515, 0, (uint64_t *)&__p);
  v517 = __p;
  if (__p)
  {
    v181 = (std::__shared_weak_count *)operator new();
    v182 = (std::__shared_weak_count_vtbl *)__p;
    v181->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v181->__shared_owners_ = 0;
    v181->__shared_weak_owners_ = 0;
    v181[1].__vftable = v182;
  }
  else
  {
    v181 = 0;
  }
  v518 = v181;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v513, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v180 + 24))(v180, &v517, v513);
  if (v514 < 0)
    operator delete(v513[0]);
  v183 = v518;
  if (v518)
  {
    v184 = (unint64_t *)&v518->__shared_owners_;
    do
      v185 = __ldaxr(v184);
    while (__stlxr(v185 - 1, v184));
    if (!v185)
    {
      ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
      std::__shared_weak_count::__release_weak(v183);
    }
  }
  v186 = __p;
  __p = 0;
  if (v186)
    (*(void (**)(void *))(*(_QWORD *)v186 + 8))(v186);
  if (v516 < 0)
    operator delete(v515[0]);
  v187 = v542;
  std::string::basic_string[abi:ne180100]<0>(v509, "initial_h");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v509, 0, (uint64_t *)&__p);
  v511 = __p;
  if (__p)
  {
    v188 = (std::__shared_weak_count *)operator new();
    v189 = (std::__shared_weak_count_vtbl *)__p;
    v188->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v188->__shared_owners_ = 0;
    v188->__shared_weak_owners_ = 0;
    v188[1].__vftable = v189;
  }
  else
  {
    v188 = 0;
  }
  v512 = v188;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v507, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v187 + 24))(v187, &v511, v507);
  if (v508 < 0)
    operator delete(v507[0]);
  v190 = v512;
  if (v512)
  {
    v191 = (unint64_t *)&v512->__shared_owners_;
    do
      v192 = __ldaxr(v191);
    while (__stlxr(v192 - 1, v191));
    if (!v192)
    {
      ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
      std::__shared_weak_count::__release_weak(v190);
    }
  }
  v193 = __p;
  __p = 0;
  if (v193)
    (*(void (**)(void *))(*(_QWORD *)v193 + 8))(v193);
  if (v510 < 0)
    operator delete(v509[0]);
  v194 = v542;
  std::string::basic_string[abi:ne180100]<0>(v503, "weight_ih");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v503, 0, (uint64_t *)&__p);
  v505 = __p;
  if (__p)
  {
    v195 = (std::__shared_weak_count *)operator new();
    v196 = (std::__shared_weak_count_vtbl *)__p;
    v195->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v195->__shared_owners_ = 0;
    v195->__shared_weak_owners_ = 0;
    v195[1].__vftable = v196;
  }
  else
  {
    v195 = 0;
  }
  v506 = v195;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v501, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v194 + 24))(v194, &v505, v501);
  if (v502 < 0)
    operator delete(v501[0]);
  v197 = v506;
  if (v506)
  {
    v198 = (unint64_t *)&v506->__shared_owners_;
    do
      v199 = __ldaxr(v198);
    while (__stlxr(v199 - 1, v198));
    if (!v199)
    {
      ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
      std::__shared_weak_count::__release_weak(v197);
    }
  }
  v200 = __p;
  __p = 0;
  if (v200)
    (*(void (**)(void *))(*(_QWORD *)v200 + 8))(v200);
  if (v504 < 0)
    operator delete(v503[0]);
  v201 = v542;
  std::string::basic_string[abi:ne180100]<0>(v497, "weight_hh");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v497, 0, (uint64_t *)&__p);
  v499 = __p;
  if (__p)
  {
    v202 = (std::__shared_weak_count *)operator new();
    v203 = (std::__shared_weak_count_vtbl *)__p;
    v202->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v202->__shared_owners_ = 0;
    v202->__shared_weak_owners_ = 0;
    v202[1].__vftable = v203;
  }
  else
  {
    v202 = 0;
  }
  v500 = v202;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v495, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v201 + 24))(v201, &v499, v495);
  if (v496 < 0)
    operator delete(v495[0]);
  v204 = v500;
  if (v500)
  {
    v205 = (unint64_t *)&v500->__shared_owners_;
    do
      v206 = __ldaxr(v205);
    while (__stlxr(v206 - 1, v205));
    if (!v206)
    {
      ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
      std::__shared_weak_count::__release_weak(v204);
    }
  }
  v207 = __p;
  __p = 0;
  if (v207)
    (*(void (**)(void *))(*(_QWORD *)v207 + 8))(v207);
  if (v498 < 0)
    operator delete(v497[0]);
  v208 = v542;
  std::string::basic_string[abi:ne180100]<0>(v491, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v491, 1, (uint64_t *)&__p);
  v493 = __p;
  if (__p)
  {
    v209 = (std::__shared_weak_count *)operator new();
    v210 = (std::__shared_weak_count_vtbl *)__p;
    v209->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v209->__shared_owners_ = 0;
    v209->__shared_weak_owners_ = 0;
    v209[1].__vftable = v210;
  }
  else
  {
    v209 = 0;
  }
  v494 = v209;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v489, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v208 + 24))(v208, &v493, v489);
  if (v490 < 0)
    operator delete(v489[0]);
  v211 = v494;
  if (v494)
  {
    v212 = (unint64_t *)&v494->__shared_owners_;
    do
      v213 = __ldaxr(v212);
    while (__stlxr(v213 - 1, v212));
    if (!v213)
    {
      ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
      std::__shared_weak_count::__release_weak(v211);
    }
  }
  v214 = __p;
  __p = 0;
  if (v214)
    (*(void (**)(void *))(*(_QWORD *)v214 + 8))(v214);
  if (v492 < 0)
    operator delete(v491[0]);
  v215 = v542;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v487 = __p;
  if (__p)
  {
    v216 = (std::__shared_weak_count *)operator new();
    v217 = (std::__shared_weak_count_vtbl *)__p;
    v216->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v216->__shared_owners_ = 0;
    v216->__shared_weak_owners_ = 0;
    v216[1].__vftable = v217;
  }
  else
  {
    v216 = 0;
  }
  v488 = v216;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v485, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v215 + 24))(v215, &v487, v485);
  if (v486 < 0)
    operator delete(v485[0]);
  v218 = v488;
  if (v488)
  {
    v219 = (unint64_t *)&v488->__shared_owners_;
    do
      v220 = __ldaxr(v219);
    while (__stlxr(v220 - 1, v219));
    if (!v220)
    {
      ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
      std::__shared_weak_count::__release_weak(v218);
    }
  }
  v221 = __p;
  __p = 0;
  if (v221)
    (*(void (**)(void *))(*(_QWORD *)v221 + 8))(v221);
  v222 = v542;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 0, &__p);
  v483 = __p;
  if (__p)
  {
    v223 = (std::__shared_weak_count *)operator new();
    v224 = (std::__shared_weak_count_vtbl *)__p;
    v223->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v223->__shared_owners_ = 0;
    v223->__shared_weak_owners_ = 0;
    v223[1].__vftable = v224;
  }
  else
  {
    v223 = 0;
  }
  v484 = v223;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v481, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v222 + 24))(v222, &v483, v481);
  if (v482 < 0)
    operator delete(v481[0]);
  v225 = v484;
  if (v484)
  {
    v226 = (unint64_t *)&v484->__shared_owners_;
    do
      v227 = __ldaxr(v226);
    while (__stlxr(v227 - 1, v226));
    if (!v227)
    {
      ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
      std::__shared_weak_count::__release_weak(v225);
    }
  }
  v228 = __p;
  __p = 0;
  if (v228)
    (*(void (**)(void *))(*(_QWORD *)v228 + 8))(v228);
  v229 = *a3;
  v479 = v542;
  if (v542)
  {
    v230 = (std::__shared_weak_count *)operator new();
    v231 = (std::__shared_weak_count_vtbl *)v542;
    v230->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v230->__shared_owners_ = 0;
    v230->__shared_weak_owners_ = 0;
    v230[1].__vftable = v231;
  }
  else
  {
    v230 = 0;
  }
  v480 = v230;
  v542 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v229 + 56))(v229, &v479);
  v232 = v480;
  if (v480)
  {
    v233 = (unint64_t *)&v480->__shared_owners_;
    do
      v234 = __ldaxr(v233);
    while (__stlxr(v234 - 1, v233));
    if (!v234)
    {
      ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
      std::__shared_weak_count::__release_weak(v232);
    }
  }
  v235 = v542;
  v542 = 0;
  if (v235)
    (*(void (**)(void *))(*(_QWORD *)v235 + 8))(v235);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v542);
  v236 = v542;
  std::string::basic_string[abi:ne180100]<0>(v475, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v475, 0, (uint64_t *)&__p);
  v477 = __p;
  if (__p)
  {
    v237 = (std::__shared_weak_count *)operator new();
    v238 = (std::__shared_weak_count_vtbl *)__p;
    v237->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v237->__shared_owners_ = 0;
    v237->__shared_weak_owners_ = 0;
    v237[1].__vftable = v238;
  }
  else
  {
    v237 = 0;
  }
  v478 = v237;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v473, "S");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v236 + 24))(v236, &v477, 0, v473);
  if (v474 < 0)
    operator delete(v473[0]);
  v239 = v478;
  if (v478)
  {
    v240 = (unint64_t *)&v478->__shared_owners_;
    do
      v241 = __ldaxr(v240);
    while (__stlxr(v241 - 1, v240));
    if (!v241)
    {
      ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
      std::__shared_weak_count::__release_weak(v239);
    }
  }
  v242 = __p;
  __p = 0;
  if (v242)
    (*(void (**)(void *))(*(_QWORD *)v242 + 8))(v242);
  if (v476 < 0)
    operator delete(v475[0]);
  v243 = v542;
  std::string::basic_string[abi:ne180100]<0>(v469, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v469, 0, (uint64_t *)&__p);
  v471 = __p;
  if (__p)
  {
    v244 = (std::__shared_weak_count *)operator new();
    v245 = (std::__shared_weak_count_vtbl *)__p;
    v244->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v244->__shared_owners_ = 0;
    v244->__shared_weak_owners_ = 0;
    v244[1].__vftable = v245;
  }
  else
  {
    v244 = 0;
  }
  v472 = v244;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v467, "B");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v243 + 24))(v243, &v471, 1, v467);
  if (v468 < 0)
    operator delete(v467[0]);
  v246 = v472;
  if (v472)
  {
    v247 = (unint64_t *)&v472->__shared_owners_;
    do
      v248 = __ldaxr(v247);
    while (__stlxr(v248 - 1, v247));
    if (!v248)
    {
      ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
      std::__shared_weak_count::__release_weak(v246);
    }
  }
  v249 = __p;
  __p = 0;
  if (v249)
    (*(void (**)(void *))(*(_QWORD *)v249 + 8))(v249);
  if (v470 < 0)
    operator delete(v469[0]);
  v250 = v542;
  std::string::basic_string[abi:ne180100]<0>(v463, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v463, 0, (uint64_t *)&__p);
  v465 = __p;
  if (__p)
  {
    v251 = (std::__shared_weak_count *)operator new();
    v252 = (std::__shared_weak_count_vtbl *)__p;
    v251->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v251->__shared_owners_ = 0;
    v251->__shared_weak_owners_ = 0;
    v251[1].__vftable = v252;
  }
  else
  {
    v251 = 0;
  }
  v466 = v251;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v461, "I");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v250 + 24))(v250, &v465, 2, v461);
  if (v462 < 0)
    operator delete(v461[0]);
  v253 = v466;
  if (v466)
  {
    v254 = (unint64_t *)&v466->__shared_owners_;
    do
      v255 = __ldaxr(v254);
    while (__stlxr(v255 - 1, v254));
    if (!v255)
    {
      ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
      std::__shared_weak_count::__release_weak(v253);
    }
  }
  v256 = __p;
  __p = 0;
  if (v256)
    (*(void (**)(void *))(*(_QWORD *)v256 + 8))(v256);
  if (v464 < 0)
    operator delete(v463[0]);
  v257 = v542;
  std::string::basic_string[abi:ne180100]<0>(v457, "initial_h");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v457, 0, (uint64_t *)&__p);
  v459 = __p;
  if (__p)
  {
    v258 = (std::__shared_weak_count *)operator new();
    v259 = (std::__shared_weak_count_vtbl *)__p;
    v258->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v258->__shared_owners_ = 0;
    v258->__shared_weak_owners_ = 0;
    v258[1].__vftable = v259;
  }
  else
  {
    v258 = 0;
  }
  v460 = v258;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v455, "B");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v257 + 24))(v257, &v459, 0, v455);
  if (v456 < 0)
    operator delete(v455[0]);
  v260 = v460;
  if (v460)
  {
    v261 = (unint64_t *)&v460->__shared_owners_;
    do
      v262 = __ldaxr(v261);
    while (__stlxr(v262 - 1, v261));
    if (!v262)
    {
      ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
      std::__shared_weak_count::__release_weak(v260);
    }
  }
  v263 = __p;
  __p = 0;
  if (v263)
    (*(void (**)(void *))(*(_QWORD *)v263 + 8))(v263);
  if (v458 < 0)
    operator delete(v457[0]);
  v264 = v542;
  std::string::basic_string[abi:ne180100]<0>(v451, "initial_h");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v451, 0, (uint64_t *)&__p);
  v453 = __p;
  if (__p)
  {
    v265 = (std::__shared_weak_count *)operator new();
    v266 = (std::__shared_weak_count_vtbl *)__p;
    v265->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v265->__shared_owners_ = 0;
    v265->__shared_weak_owners_ = 0;
    v265[1].__vftable = v266;
  }
  else
  {
    v265 = 0;
  }
  v454 = v265;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v449, "H");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v264 + 24))(v264, &v453, 1, v449);
  if (v450 < 0)
    operator delete(v449[0]);
  v267 = v454;
  if (v454)
  {
    v268 = (unint64_t *)&v454->__shared_owners_;
    do
      v269 = __ldaxr(v268);
    while (__stlxr(v269 - 1, v268));
    if (!v269)
    {
      ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
      std::__shared_weak_count::__release_weak(v267);
    }
  }
  v270 = __p;
  __p = 0;
  if (v270)
    (*(void (**)(void *))(*(_QWORD *)v270 + 8))(v270);
  if (v452 < 0)
    operator delete(v451[0]);
  v271 = v542;
  std::string::basic_string[abi:ne180100]<0>(v445, "weight_ih");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v445, 0, (uint64_t *)&__p);
  v447 = __p;
  if (__p)
  {
    v272 = (std::__shared_weak_count *)operator new();
    v273 = (std::__shared_weak_count_vtbl *)__p;
    v272->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v272->__shared_owners_ = 0;
    v272->__shared_weak_owners_ = 0;
    v272[1].__vftable = v273;
  }
  else
  {
    v272 = 0;
  }
  v448 = v272;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v443, "H_dim");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v271 + 24))(v271, &v447, 0, v443);
  if (v444 < 0)
    operator delete(v443[0]);
  v274 = v448;
  if (v448)
  {
    v275 = (unint64_t *)&v448->__shared_owners_;
    do
      v276 = __ldaxr(v275);
    while (__stlxr(v276 - 1, v275));
    if (!v276)
    {
      ((void (*)(std::__shared_weak_count *))v274->__on_zero_shared)(v274);
      std::__shared_weak_count::__release_weak(v274);
    }
  }
  v277 = __p;
  __p = 0;
  if (v277)
    (*(void (**)(void *))(*(_QWORD *)v277 + 8))(v277);
  if (v446 < 0)
    operator delete(v445[0]);
  v278 = v542;
  std::string::basic_string[abi:ne180100]<0>(v439, "weight_ih");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v439, 0, (uint64_t *)&__p);
  v441 = __p;
  if (__p)
  {
    v279 = (std::__shared_weak_count *)operator new();
    v280 = (std::__shared_weak_count_vtbl *)__p;
    v279->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v279->__shared_owners_ = 0;
    v279->__shared_weak_owners_ = 0;
    v279[1].__vftable = v280;
  }
  else
  {
    v279 = 0;
  }
  v442 = v279;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v437, "I");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v278 + 24))(v278, &v441, 1, v437);
  if (v438 < 0)
    operator delete(v437[0]);
  v281 = v442;
  if (v442)
  {
    v282 = (unint64_t *)&v442->__shared_owners_;
    do
      v283 = __ldaxr(v282);
    while (__stlxr(v283 - 1, v282));
    if (!v283)
    {
      ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
      std::__shared_weak_count::__release_weak(v281);
    }
  }
  v284 = __p;
  __p = 0;
  if (v284)
    (*(void (**)(void *))(*(_QWORD *)v284 + 8))(v284);
  if (v440 < 0)
    operator delete(v439[0]);
  v285 = v542;
  std::string::basic_string[abi:ne180100]<0>(v433, "weight_hh");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v433, 0, (uint64_t *)&__p);
  v435 = __p;
  if (__p)
  {
    v286 = (std::__shared_weak_count *)operator new();
    v287 = (std::__shared_weak_count_vtbl *)__p;
    v286->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v286->__shared_owners_ = 0;
    v286->__shared_weak_owners_ = 0;
    v286[1].__vftable = v287;
  }
  else
  {
    v286 = 0;
  }
  v436 = v286;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v431, "H_dim");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v285 + 24))(v285, &v435, 0, v431);
  if (v432 < 0)
    operator delete(v431[0]);
  v288 = v436;
  if (v436)
  {
    v289 = (unint64_t *)&v436->__shared_owners_;
    do
      v290 = __ldaxr(v289);
    while (__stlxr(v290 - 1, v289));
    if (!v290)
    {
      ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
      std::__shared_weak_count::__release_weak(v288);
    }
  }
  v291 = __p;
  __p = 0;
  if (v291)
    (*(void (**)(void *))(*(_QWORD *)v291 + 8))(v291);
  if (v434 < 0)
    operator delete(v433[0]);
  v292 = v542;
  std::string::basic_string[abi:ne180100]<0>(v427, "weight_hh");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v427, 0, (uint64_t *)&__p);
  v429 = __p;
  if (__p)
  {
    v293 = (std::__shared_weak_count *)operator new();
    v294 = (std::__shared_weak_count_vtbl *)__p;
    v293->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v293->__shared_owners_ = 0;
    v293->__shared_weak_owners_ = 0;
    v293[1].__vftable = v294;
  }
  else
  {
    v293 = 0;
  }
  v430 = v293;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v425, "H");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v292 + 24))(v292, &v429, 1, v425);
  if (v426 < 0)
    operator delete(v425[0]);
  v295 = v430;
  if (v430)
  {
    v296 = (unint64_t *)&v430->__shared_owners_;
    do
      v297 = __ldaxr(v296);
    while (__stlxr(v297 - 1, v296));
    if (!v297)
    {
      ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
      std::__shared_weak_count::__release_weak(v295);
    }
  }
  v298 = __p;
  __p = 0;
  if (v298)
    (*(void (**)(void *))(*(_QWORD *)v298 + 8))(v298);
  if (v428 < 0)
    operator delete(v427[0]);
  v299 = v542;
  std::string::basic_string[abi:ne180100]<0>(v421, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v421, 1, (uint64_t *)&__p);
  v423 = __p;
  if (__p)
  {
    v300 = (std::__shared_weak_count *)operator new();
    v301 = (std::__shared_weak_count_vtbl *)__p;
    v300->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v300->__shared_owners_ = 0;
    v300->__shared_weak_owners_ = 0;
    v300[1].__vftable = v301;
  }
  else
  {
    v300 = 0;
  }
  v424 = v300;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v419, "H_dim");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v299 + 24))(v299, &v423, 0, v419);
  if (v420 < 0)
    operator delete(v419[0]);
  v302 = v424;
  if (v424)
  {
    v303 = (unint64_t *)&v424->__shared_owners_;
    do
      v304 = __ldaxr(v303);
    while (__stlxr(v304 - 1, v303));
    if (!v304)
    {
      ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
      std::__shared_weak_count::__release_weak(v302);
    }
  }
  v305 = __p;
  __p = 0;
  if (v305)
    (*(void (**)(void *))(*(_QWORD *)v305 + 8))(v305);
  if (v422 < 0)
    operator delete(v421[0]);
  v306 = v542;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v417 = __p;
  if (__p)
  {
    v307 = (std::__shared_weak_count *)operator new();
    v308 = (std::__shared_weak_count_vtbl *)__p;
    v307->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v307->__shared_owners_ = 0;
    v307->__shared_weak_owners_ = 0;
    v307[1].__vftable = v308;
  }
  else
  {
    v307 = 0;
  }
  v418 = v307;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v415, "B");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v306 + 24))(v306, &v417, 1, v415);
  if (v416 < 0)
    operator delete(v415[0]);
  v309 = v418;
  if (v418)
  {
    v310 = (unint64_t *)&v418->__shared_owners_;
    do
      v311 = __ldaxr(v310);
    while (__stlxr(v311 - 1, v310));
    if (!v311)
    {
      ((void (*)(std::__shared_weak_count *))v309->__on_zero_shared)(v309);
      std::__shared_weak_count::__release_weak(v309);
    }
  }
  v312 = __p;
  __p = 0;
  if (v312)
    (*(void (**)(void *))(*(_QWORD *)v312 + 8))(v312);
  v313 = v542;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v413 = __p;
  if (__p)
  {
    v314 = (std::__shared_weak_count *)operator new();
    v315 = (std::__shared_weak_count_vtbl *)__p;
    v314->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v314->__shared_owners_ = 0;
    v314->__shared_weak_owners_ = 0;
    v314[1].__vftable = v315;
  }
  else
  {
    v314 = 0;
  }
  v414 = v314;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v411, "H");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v313 + 24))(v313, &v413, 2, v411);
  if (v412 < 0)
    operator delete(v411[0]);
  v316 = v414;
  if (v414)
  {
    v317 = (unint64_t *)&v414->__shared_owners_;
    do
      v318 = __ldaxr(v317);
    while (__stlxr(v318 - 1, v317));
    if (!v318)
    {
      ((void (*)(std::__shared_weak_count *))v316->__on_zero_shared)(v316);
      std::__shared_weak_count::__release_weak(v316);
    }
  }
  v319 = __p;
  __p = 0;
  if (v319)
    (*(void (**)(void *))(*(_QWORD *)v319 + 8))(v319);
  v320 = v542;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 0, &__p);
  v409 = __p;
  if (__p)
  {
    v321 = (std::__shared_weak_count *)operator new();
    v322 = (std::__shared_weak_count_vtbl *)__p;
    v321->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v321->__shared_owners_ = 0;
    v321->__shared_weak_owners_ = 0;
    v321[1].__vftable = v322;
  }
  else
  {
    v321 = 0;
  }
  v410 = v321;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v407, "B");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v320 + 24))(v320, &v409, 0, v407);
  if (v408 < 0)
    operator delete(v407[0]);
  v323 = v410;
  if (v410)
  {
    v324 = (unint64_t *)&v410->__shared_owners_;
    do
      v325 = __ldaxr(v324);
    while (__stlxr(v325 - 1, v324));
    if (!v325)
    {
      ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
      std::__shared_weak_count::__release_weak(v323);
    }
  }
  v326 = __p;
  __p = 0;
  if (v326)
    (*(void (**)(void *))(*(_QWORD *)v326 + 8))(v326);
  v327 = v542;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 0, &__p);
  v405 = __p;
  if (__p)
  {
    v328 = (std::__shared_weak_count *)operator new();
    v329 = (std::__shared_weak_count_vtbl *)__p;
    v328->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v328->__shared_owners_ = 0;
    v328->__shared_weak_owners_ = 0;
    v328[1].__vftable = v329;
  }
  else
  {
    v328 = 0;
  }
  v406 = v328;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v403, "H");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v327 + 24))(v327, &v405, 1, v403);
  if (v404 < 0)
    operator delete(v403[0]);
  v330 = v406;
  if (v406)
  {
    v331 = (unint64_t *)&v406->__shared_owners_;
    do
      v332 = __ldaxr(v331);
    while (__stlxr(v332 - 1, v331));
    if (!v332)
    {
      ((void (*)(std::__shared_weak_count *))v330->__on_zero_shared)(v330);
      std::__shared_weak_count::__release_weak(v330);
    }
  }
  v333 = __p;
  __p = 0;
  if (v333)
    (*(void (**)(void *))(*(_QWORD *)v333 + 8))(v333);
  v334 = *a3;
  v401 = v542;
  if (v542)
  {
    v335 = (std::__shared_weak_count *)operator new();
    v336 = (std::__shared_weak_count_vtbl *)v542;
    v335->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v335->__shared_owners_ = 0;
    v335->__shared_weak_owners_ = 0;
    v335[1].__vftable = v336;
  }
  else
  {
    v335 = 0;
  }
  v402 = v335;
  v542 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v334 + 56))(v334, &v401);
  v337 = v402;
  if (v402)
  {
    v338 = (unint64_t *)&v402->__shared_owners_;
    do
      v339 = __ldaxr(v338);
    while (__stlxr(v339 - 1, v338));
    if (!v339)
    {
      ((void (*)(std::__shared_weak_count *))v337->__on_zero_shared)(v337);
      std::__shared_weak_count::__release_weak(v337);
    }
  }
  v340 = v542;
  v542 = 0;
  if (v340)
    (*(void (**)(void *))(*(_QWORD *)v340 + 8))(v340);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v529);
  v341 = v529;
  std::string::basic_string[abi:ne180100]<0>(v397, "direction");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v397, 0, &v564);
  v399 = v564;
  if (v564)
  {
    v342 = (std::__shared_weak_count *)operator new();
    v343 = v564;
    v342->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v342->__shared_owners_ = 0;
    v342->__shared_weak_owners_ = 0;
    v342[1].__vftable = (std::__shared_weak_count_vtbl *)v343;
  }
  else
  {
    v342 = 0;
  }
  v400 = v342;
  v564 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v542, "forward");
  std::string::basic_string[abi:ne180100]<0>(&v545, "reverse");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v542, 2);
  (*(void (**)(uint64_t, uint64_t *, void **, _QWORD))(*(_QWORD *)v341 + 24))(v341, &v399, &__p, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -6; i -= 3)
  {
    if (*(&v547 + i * 8) < 0)
      operator delete((&v545)[i]);
  }
  v345 = v400;
  if (v400)
  {
    v346 = (unint64_t *)&v400->__shared_owners_;
    do
      v347 = __ldaxr(v346);
    while (__stlxr(v347 - 1, v346));
    if (!v347)
    {
      ((void (*)(std::__shared_weak_count *))v345->__on_zero_shared)(v345);
      std::__shared_weak_count::__release_weak(v345);
    }
  }
  v348 = v564;
  v564 = 0;
  if (v348)
    (*(void (**)(uint64_t))(*(_QWORD *)v348 + 8))(v348);
  if (v398 < 0)
    operator delete(v397[0]);
  v349 = v529;
  std::string::basic_string[abi:ne180100]<0>(v393, "recurrent_activation");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v393, 0, &v564);
  v395 = v564;
  if (v564)
  {
    v350 = (std::__shared_weak_count *)operator new();
    v351 = v564;
    v350->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v350->__shared_owners_ = 0;
    v350->__shared_weak_owners_ = 0;
    v350[1].__vftable = (std::__shared_weak_count_vtbl *)v351;
  }
  else
  {
    v350 = 0;
  }
  v396 = v350;
  v564 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v542, "hard_sigmoid");
  std::string::basic_string[abi:ne180100]<0>(&v545, "linear");
  std::string::basic_string[abi:ne180100]<0>(v548, "relu");
  std::string::basic_string[abi:ne180100]<0>(v549, "scaled_tanh");
  std::string::basic_string[abi:ne180100]<0>(v550, "sigmoid");
  std::string::basic_string[abi:ne180100]<0>(v551, "tanh");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v542, 6);
  (*(void (**)(uint64_t, uint64_t *, void **, _QWORD))(*(_QWORD *)v349 + 24))(v349, &v395, &__p, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (j = 0; j != -18; j -= 3)
  {
    if (SHIBYTE(v551[j + 2]) < 0)
      operator delete(v551[j]);
  }
  v353 = v396;
  if (v396)
  {
    v354 = (unint64_t *)&v396->__shared_owners_;
    do
      v355 = __ldaxr(v354);
    while (__stlxr(v355 - 1, v354));
    if (!v355)
    {
      ((void (*)(std::__shared_weak_count *))v353->__on_zero_shared)(v353);
      std::__shared_weak_count::__release_weak(v353);
    }
  }
  v356 = v564;
  v564 = 0;
  if (v356)
    (*(void (**)(uint64_t))(*(_QWORD *)v356 + 8))(v356);
  if (v394 < 0)
    operator delete(v393[0]);
  v357 = v529;
  std::string::basic_string[abi:ne180100]<0>(v389, "activation");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v389, 0, &v564);
  v391 = v564;
  if (v564)
  {
    v358 = (std::__shared_weak_count *)operator new();
    v359 = v564;
    v358->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v358->__shared_owners_ = 0;
    v358->__shared_weak_owners_ = 0;
    v358[1].__vftable = (std::__shared_weak_count_vtbl *)v359;
  }
  else
  {
    v358 = 0;
  }
  v392 = v358;
  v564 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v542, "hard_sigmoid");
  std::string::basic_string[abi:ne180100]<0>(&v545, "linear");
  std::string::basic_string[abi:ne180100]<0>(v548, "relu");
  std::string::basic_string[abi:ne180100]<0>(v549, "scaled_tanh");
  std::string::basic_string[abi:ne180100]<0>(v550, "sigmoid");
  std::string::basic_string[abi:ne180100]<0>(v551, "tanh");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v542, 6);
  (*(void (**)(uint64_t, uint64_t *, void **, _QWORD))(*(_QWORD *)v357 + 24))(v357, &v391, &__p, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (k = 0; k != -18; k -= 3)
  {
    if (SHIBYTE(v551[k + 2]) < 0)
      operator delete(v551[k]);
  }
  v361 = v392;
  if (v392)
  {
    v362 = (unint64_t *)&v392->__shared_owners_;
    do
      v363 = __ldaxr(v362);
    while (__stlxr(v363 - 1, v362));
    if (!v363)
    {
      ((void (*)(std::__shared_weak_count *))v361->__on_zero_shared)(v361);
      std::__shared_weak_count::__release_weak(v361);
    }
  }
  v364 = v564;
  v564 = 0;
  if (v364)
    (*(void (**)(uint64_t))(*(_QWORD *)v364 + 8))(v364);
  if (v390 < 0)
    operator delete(v389[0]);
  v365 = v529;
  std::string::basic_string[abi:ne180100]<0>(v385, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v385, 1, &v564);
  v387 = v564;
  if (v564)
  {
    v366 = (std::__shared_weak_count *)operator new();
    v367 = v564;
    v366->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v366->__shared_owners_ = 0;
    v366->__shared_weak_owners_ = 0;
    v366[1].__vftable = (std::__shared_weak_count_vtbl *)v367;
  }
  else
  {
    v366 = 0;
  }
  v388 = v366;
  v564 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v542, "fp16");
  std::string::basic_string[abi:ne180100]<0>(&v545, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v548, "int32");
  std::string::basic_string[abi:ne180100]<0>(v549, "int8");
  std::string::basic_string[abi:ne180100]<0>(v550, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v542, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v365 + 24))(v365, &v387, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (m = 0; m != -15; m -= 3)
  {
    if (SHIBYTE(v550[m + 2]) < 0)
      operator delete((void *)v550[m]);
  }
  v369 = v388;
  if (v388)
  {
    v370 = (unint64_t *)&v388->__shared_owners_;
    do
      v371 = __ldaxr(v370);
    while (__stlxr(v371 - 1, v370));
    if (!v371)
    {
      ((void (*)(std::__shared_weak_count *))v369->__on_zero_shared)(v369);
      std::__shared_weak_count::__release_weak(v369);
    }
  }
  v372 = v564;
  v564 = 0;
  if (v372)
    (*(void (**)(uint64_t))(*(_QWORD *)v372 + 8))(v372);
  if (v386 < 0)
    operator delete(v385[0]);
  v373 = *a3;
  v383 = v529;
  if (v529)
  {
    v374 = (std::__shared_weak_count *)operator new();
    v375 = v529;
    v374->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v374->__shared_owners_ = 0;
    v374->__shared_weak_owners_ = 0;
    v374[1].__vftable = (std::__shared_weak_count_vtbl *)v375;
  }
  else
  {
    v374 = 0;
  }
  v384 = v374;
  v529 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v373 + 56))(v373, &v383);
  v376 = v384;
  if (v384)
  {
    v377 = (unint64_t *)&v384->__shared_owners_;
    do
      v378 = __ldaxr(v377);
    while (__stlxr(v378 - 1, v377));
    if (!v378)
    {
      ((void (*)(std::__shared_weak_count *))v376->__on_zero_shared)(v376);
      std::__shared_weak_count::__release_weak(v376);
    }
  }
  v379 = v529;
  v529 = 0;
  if (v379)
    (*(void (**)(uint64_t))(*(_QWORD *)v379 + 8))(v379);
  if (v561)
  {
    v380 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v561);
    MEMORY[0x1E0C023A0](v380, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v531, 0);
  result = (uint64_t)v541;
  if (v541)
  {
    v382 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v541);
    return MEMORY[0x1E0C023A0](v382, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0912890(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;

  v4 = STACK[0x608];
  STACK[0x608] = 0;
  if (v4)
    (*(void (**)(unint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 128), 0);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x618], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x6B0], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::LSTM::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unsigned __int8 *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  unsigned __int8 *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  _QWORD *v69;
  unsigned __int8 *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  _QWORD *v79;
  unsigned __int8 *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  unsigned __int8 *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  unsigned __int8 *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  _QWORD *v113;
  unsigned __int8 *v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  _QWORD *v123;
  unsigned __int8 *v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  _QWORD *v129;
  unsigned __int8 *v130;
  void *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  _QWORD *v135;
  unsigned __int8 *v136;
  void *v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  _QWORD *v141;
  unsigned __int8 *v142;
  void *v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  _QWORD *v147;
  unsigned __int8 *v148;
  void *v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  _QWORD *v153;
  unsigned __int8 *v154;
  void *v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  _QWORD *v159;
  unsigned __int8 *v160;
  void *v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  uint64_t v165;
  char **v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  std::__shared_weak_count_vtbl *v174;
  uint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  char *v178;
  char *v179;
  char *v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t v184;
  char *v185;
  uint64_t v186;
  uint64_t *v187;
  char *v188;
  char *v189;
  char *v190;
  __int128 v191;
  char *v192;
  char *v193;
  uint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  char **v198;
  uint64_t v199;
  uint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  uint64_t v203;
  std::__shared_weak_count_vtbl *v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  char *v208;
  char *v209;
  char *v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  char *v215;
  uint64_t v216;
  uint64_t *v217;
  char *v218;
  char *v219;
  char *v220;
  __int128 v221;
  char *v222;
  char *v223;
  uint64_t v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  char **v228;
  uint64_t v229;
  uint64_t v230;
  _QWORD *v231;
  uint64_t v232;
  uint64_t v233;
  std::__shared_weak_count_vtbl *v234;
  uint64_t v235;
  _QWORD *v236;
  uint64_t v237;
  char *v238;
  char *v239;
  char *v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  unint64_t v244;
  char *v245;
  uint64_t v246;
  uint64_t *v247;
  char *v248;
  char *v249;
  char *v250;
  __int128 v251;
  char *v252;
  char *v253;
  uint64_t v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  uint64_t v258;
  _QWORD *v259;
  _QWORD *v260;
  char **v261;
  _QWORD *v262;
  uint64_t v263;
  _QWORD *v264;
  uint64_t v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  _OWORD *v272;
  unsigned __int8 *v273;
  void *v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  unint64_t v277;
  uint64_t v278;
  std::__shared_weak_count_vtbl *v279;
  std::__shared_weak_count *v280;
  std::__shared_weak_count *v281;
  unint64_t *p_shared_owners;
  unint64_t v283;
  uint64_t v284;
  _QWORD *v285;
  uint64_t v286;
  void *v287;
  std::__shared_weak_count *v288;
  std::__shared_weak_count_vtbl *v289;
  std::__shared_weak_count *v290;
  unint64_t *v291;
  unint64_t v292;
  void *v293;
  void *v294;
  std::__shared_weak_count *v295;
  std::__shared_weak_count_vtbl *v296;
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  void *v300;
  void *v301;
  std::__shared_weak_count *v302;
  std::__shared_weak_count_vtbl *v303;
  std::__shared_weak_count *v304;
  unint64_t *v305;
  unint64_t v306;
  void *v307;
  void *v308;
  std::__shared_weak_count *v309;
  std::__shared_weak_count_vtbl *v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  void *v314;
  void *v315;
  std::__shared_weak_count *v316;
  std::__shared_weak_count_vtbl *v317;
  std::__shared_weak_count *v318;
  unint64_t *v319;
  unint64_t v320;
  void *v321;
  void *v322;
  std::__shared_weak_count *v323;
  std::__shared_weak_count_vtbl *v324;
  std::__shared_weak_count *v325;
  unint64_t *v326;
  unint64_t v327;
  void *v328;
  void *v329;
  std::__shared_weak_count *v330;
  std::__shared_weak_count_vtbl *v331;
  std::__shared_weak_count *v332;
  unint64_t *v333;
  unint64_t v334;
  void *v335;
  void *v336;
  std::__shared_weak_count *v337;
  std::__shared_weak_count_vtbl *v338;
  std::__shared_weak_count *v339;
  unint64_t *v340;
  unint64_t v341;
  void *v342;
  void *v343;
  std::__shared_weak_count *v344;
  std::__shared_weak_count_vtbl *v345;
  std::__shared_weak_count *v346;
  unint64_t *v347;
  unint64_t v348;
  void *v349;
  void *v350;
  std::__shared_weak_count *v351;
  std::__shared_weak_count_vtbl *v352;
  std::__shared_weak_count *v353;
  unint64_t *v354;
  unint64_t v355;
  void *v356;
  void *v357;
  std::__shared_weak_count *v358;
  std::__shared_weak_count_vtbl *v359;
  std::__shared_weak_count *v360;
  unint64_t *v361;
  unint64_t v362;
  void *v363;
  void *v364;
  std::__shared_weak_count *v365;
  std::__shared_weak_count_vtbl *v366;
  std::__shared_weak_count *v367;
  unint64_t *v368;
  unint64_t v369;
  void *v370;
  void *v371;
  std::__shared_weak_count *v372;
  std::__shared_weak_count_vtbl *v373;
  std::__shared_weak_count *v374;
  unint64_t *v375;
  unint64_t v376;
  void *v377;
  void *v378;
  std::__shared_weak_count *v379;
  std::__shared_weak_count_vtbl *v380;
  std::__shared_weak_count *v381;
  unint64_t *v382;
  unint64_t v383;
  void *v384;
  void *v385;
  std::__shared_weak_count *v386;
  std::__shared_weak_count_vtbl *v387;
  std::__shared_weak_count *v388;
  unint64_t *v389;
  unint64_t v390;
  void *v391;
  uint64_t v392;
  std::__shared_weak_count *v393;
  std::__shared_weak_count_vtbl *v394;
  std::__shared_weak_count *v395;
  unint64_t *v396;
  unint64_t v397;
  void *v398;
  void *v399;
  std::__shared_weak_count *v400;
  std::__shared_weak_count_vtbl *v401;
  std::__shared_weak_count *v402;
  unint64_t *v403;
  unint64_t v404;
  void *v405;
  void *v406;
  std::__shared_weak_count *v407;
  std::__shared_weak_count_vtbl *v408;
  std::__shared_weak_count *v409;
  unint64_t *v410;
  unint64_t v411;
  void *v412;
  void *v413;
  std::__shared_weak_count *v414;
  std::__shared_weak_count_vtbl *v415;
  std::__shared_weak_count *v416;
  unint64_t *v417;
  unint64_t v418;
  void *v419;
  void *v420;
  std::__shared_weak_count *v421;
  std::__shared_weak_count_vtbl *v422;
  std::__shared_weak_count *v423;
  unint64_t *v424;
  unint64_t v425;
  void *v426;
  void *v427;
  std::__shared_weak_count *v428;
  std::__shared_weak_count_vtbl *v429;
  std::__shared_weak_count *v430;
  unint64_t *v431;
  unint64_t v432;
  void *v433;
  void *v434;
  std::__shared_weak_count *v435;
  std::__shared_weak_count_vtbl *v436;
  std::__shared_weak_count *v437;
  unint64_t *v438;
  unint64_t v439;
  void *v440;
  void *v441;
  std::__shared_weak_count *v442;
  std::__shared_weak_count_vtbl *v443;
  std::__shared_weak_count *v444;
  unint64_t *v445;
  unint64_t v446;
  void *v447;
  void *v448;
  std::__shared_weak_count *v449;
  std::__shared_weak_count_vtbl *v450;
  std::__shared_weak_count *v451;
  unint64_t *v452;
  unint64_t v453;
  void *v454;
  void *v455;
  std::__shared_weak_count *v456;
  std::__shared_weak_count_vtbl *v457;
  std::__shared_weak_count *v458;
  unint64_t *v459;
  unint64_t v460;
  void *v461;
  void *v462;
  std::__shared_weak_count *v463;
  std::__shared_weak_count_vtbl *v464;
  std::__shared_weak_count *v465;
  unint64_t *v466;
  unint64_t v467;
  void *v468;
  void *v469;
  std::__shared_weak_count *v470;
  std::__shared_weak_count_vtbl *v471;
  std::__shared_weak_count *v472;
  unint64_t *v473;
  unint64_t v474;
  void *v475;
  void *v476;
  std::__shared_weak_count *v477;
  std::__shared_weak_count_vtbl *v478;
  std::__shared_weak_count *v479;
  unint64_t *v480;
  unint64_t v481;
  void *v482;
  void *v483;
  std::__shared_weak_count *v484;
  std::__shared_weak_count_vtbl *v485;
  std::__shared_weak_count *v486;
  unint64_t *v487;
  unint64_t v488;
  void *v489;
  void *v490;
  std::__shared_weak_count *v491;
  std::__shared_weak_count_vtbl *v492;
  std::__shared_weak_count *v493;
  unint64_t *v494;
  unint64_t v495;
  void *v496;
  void *v497;
  std::__shared_weak_count *v498;
  std::__shared_weak_count_vtbl *v499;
  std::__shared_weak_count *v500;
  unint64_t *v501;
  unint64_t v502;
  void *v503;
  void *v504;
  std::__shared_weak_count *v505;
  std::__shared_weak_count_vtbl *v506;
  std::__shared_weak_count *v507;
  unint64_t *v508;
  unint64_t v509;
  void *v510;
  void *v511;
  std::__shared_weak_count *v512;
  std::__shared_weak_count_vtbl *v513;
  std::__shared_weak_count *v514;
  unint64_t *v515;
  unint64_t v516;
  void *v517;
  void *v518;
  std::__shared_weak_count *v519;
  std::__shared_weak_count_vtbl *v520;
  std::__shared_weak_count *v521;
  unint64_t *v522;
  unint64_t v523;
  void *v524;
  void *v525;
  std::__shared_weak_count *v526;
  std::__shared_weak_count_vtbl *v527;
  std::__shared_weak_count *v528;
  unint64_t *v529;
  unint64_t v530;
  void *v531;
  void *v532;
  std::__shared_weak_count *v533;
  std::__shared_weak_count_vtbl *v534;
  std::__shared_weak_count *v535;
  unint64_t *v536;
  unint64_t v537;
  void *v538;
  void *v539;
  std::__shared_weak_count *v540;
  std::__shared_weak_count_vtbl *v541;
  std::__shared_weak_count *v542;
  unint64_t *v543;
  unint64_t v544;
  void *v545;
  void *v546;
  std::__shared_weak_count *v547;
  std::__shared_weak_count_vtbl *v548;
  std::__shared_weak_count *v549;
  unint64_t *v550;
  unint64_t v551;
  void *v552;
  void *v553;
  std::__shared_weak_count *v554;
  std::__shared_weak_count_vtbl *v555;
  std::__shared_weak_count *v556;
  unint64_t *v557;
  unint64_t v558;
  void *v559;
  void *v560;
  std::__shared_weak_count *v561;
  std::__shared_weak_count_vtbl *v562;
  std::__shared_weak_count *v563;
  unint64_t *v564;
  unint64_t v565;
  void *v566;
  void *v567;
  std::__shared_weak_count *v568;
  std::__shared_weak_count_vtbl *v569;
  std::__shared_weak_count *v570;
  unint64_t *v571;
  unint64_t v572;
  void *v573;
  uint64_t v574;
  std::__shared_weak_count *v575;
  std::__shared_weak_count_vtbl *v576;
  std::__shared_weak_count *v577;
  unint64_t *v578;
  unint64_t v579;
  void *v580;
  uint64_t v581;
  std::__shared_weak_count *v582;
  uint64_t v583;
  uint64_t i;
  std::__shared_weak_count *v585;
  unint64_t *v586;
  unint64_t v587;
  uint64_t v588;
  uint64_t v589;
  std::__shared_weak_count *v590;
  uint64_t v591;
  uint64_t j;
  std::__shared_weak_count *v593;
  unint64_t *v594;
  unint64_t v595;
  uint64_t v596;
  uint64_t v597;
  std::__shared_weak_count *v598;
  uint64_t v599;
  uint64_t k;
  std::__shared_weak_count *v601;
  unint64_t *v602;
  unint64_t v603;
  uint64_t v604;
  uint64_t v605;
  std::__shared_weak_count *v606;
  uint64_t v607;
  uint64_t m;
  std::__shared_weak_count *v609;
  unint64_t *v610;
  unint64_t v611;
  uint64_t v612;
  uint64_t v613;
  std::__shared_weak_count *v614;
  uint64_t v615;
  uint64_t n;
  std::__shared_weak_count *v617;
  unint64_t *v618;
  unint64_t v619;
  uint64_t v620;
  uint64_t v621;
  std::__shared_weak_count *v622;
  uint64_t v623;
  std::__shared_weak_count *v624;
  unint64_t *v625;
  unint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t result;
  uint64_t v630;
  uint64_t v631;
  std::__shared_weak_count *v632;
  void *v633[2];
  char v634;
  uint64_t v635;
  std::__shared_weak_count *v636;
  void *v637[2];
  char v638;
  uint64_t v639;
  std::__shared_weak_count *v640;
  void *v641[2];
  char v642;
  uint64_t v643;
  std::__shared_weak_count *v644;
  void *v645[2];
  char v646;
  uint64_t v647;
  std::__shared_weak_count *v648;
  void *v649[2];
  char v650;
  uint64_t v651;
  std::__shared_weak_count *v652;
  void *v653;
  std::__shared_weak_count *v654;
  void *v655[2];
  char v656;
  void *v657;
  std::__shared_weak_count *v658;
  void *v659[2];
  char v660;
  void *v661;
  std::__shared_weak_count *v662;
  void *v663[2];
  char v664;
  void *v665;
  std::__shared_weak_count *v666;
  void *v667[2];
  char v668;
  void *v669;
  std::__shared_weak_count *v670;
  void *v671[2];
  char v672;
  void *v673;
  std::__shared_weak_count *v674;
  void *v675[2];
  char v676;
  void *v677;
  std::__shared_weak_count *v678;
  void *v679[2];
  char v680;
  void *v681[2];
  char v682;
  void *v683;
  std::__shared_weak_count *v684;
  void *v685[2];
  char v686;
  void *v687[2];
  char v688;
  void *v689;
  std::__shared_weak_count *v690;
  void *v691[2];
  char v692;
  void *v693[2];
  char v694;
  void *v695;
  std::__shared_weak_count *v696;
  void *v697[2];
  char v698;
  void *v699[2];
  char v700;
  void *v701;
  std::__shared_weak_count *v702;
  void *v703[2];
  char v704;
  void *v705[2];
  char v706;
  void *v707;
  std::__shared_weak_count *v708;
  void *v709[2];
  char v710;
  void *v711[2];
  char v712;
  void *v713;
  std::__shared_weak_count *v714;
  void *v715[2];
  char v716;
  void *v717[2];
  char v718;
  void *v719;
  std::__shared_weak_count *v720;
  void *v721[2];
  char v722;
  void *v723[2];
  char v724;
  void *v725;
  std::__shared_weak_count *v726;
  void *v727[2];
  char v728;
  void *v729[2];
  char v730;
  void *v731;
  std::__shared_weak_count *v732;
  void *v733[2];
  char v734;
  void *v735[2];
  char v736;
  void *v737;
  std::__shared_weak_count *v738;
  void *v739[2];
  char v740;
  void *v741[2];
  char v742;
  void *v743;
  std::__shared_weak_count *v744;
  void *v745[2];
  char v746;
  void *v747[2];
  char v748;
  void *v749;
  std::__shared_weak_count *v750;
  void *v751[2];
  char v752;
  void *v753[2];
  char v754;
  void *v755;
  std::__shared_weak_count *v756;
  void *v757[2];
  char v758;
  void *v759[2];
  char v760;
  void *v761;
  std::__shared_weak_count *v762;
  void *v763[2];
  char v764;
  void *v765[2];
  char v766;
  void *v767;
  std::__shared_weak_count *v768;
  void *v769[2];
  char v770;
  void *v771[2];
  char v772;
  void *v773;
  std::__shared_weak_count *v774;
  void *v775[2];
  char v776;
  void *v777[2];
  char v778;
  void *v779;
  std::__shared_weak_count *v780;
  void *v781[2];
  char v782;
  void *v783[2];
  char v784;
  void *v785;
  std::__shared_weak_count *v786;
  void *v787[2];
  char v788;
  void *v789[2];
  char v790;
  void *v791;
  std::__shared_weak_count *v792;
  void *v793;
  std::__shared_weak_count *v794;
  void *v795[2];
  char v796;
  void *v797;
  std::__shared_weak_count *v798;
  void *v799[2];
  char v800;
  void *v801;
  std::__shared_weak_count *v802;
  void *v803[2];
  char v804;
  void *v805;
  std::__shared_weak_count *v806;
  void *v807[2];
  char v808;
  void *v809[2];
  char v810;
  void *v811;
  std::__shared_weak_count *v812;
  void *v813[2];
  char v814;
  void *v815[2];
  char v816;
  void *v817;
  std::__shared_weak_count *v818;
  void *v819[2];
  char v820;
  void *v821[2];
  char v822;
  void *v823;
  std::__shared_weak_count *v824;
  void *v825[2];
  char v826;
  void *v827[2];
  char v828;
  void *v829;
  std::__shared_weak_count *v830;
  void *v831[2];
  char v832;
  void *v833[2];
  char v834;
  void *v835;
  std::__shared_weak_count *v836;
  void *v837[2];
  char v838;
  void *v839[2];
  char v840;
  void *v841;
  std::__shared_weak_count *v842;
  void *v843[2];
  char v844;
  void *v845[2];
  char v846;
  void *v847;
  std::__shared_weak_count *v848;
  void *v849[2];
  char v850;
  void *v851[2];
  char v852;
  void *v853;
  std::__shared_weak_count *v854;
  void *v855[2];
  char v856;
  void *v857[2];
  char v858;
  void *v859;
  std::__shared_weak_count *v860;
  void *v861[2];
  char v862;
  void *v863[2];
  char v864;
  void *v865;
  std::__shared_weak_count *v866;
  void *v867[2];
  char v868;
  void *v869[2];
  char v870;
  void *v871;
  std::__shared_weak_count *v872;
  void *v873[2];
  char v874;
  void *v875[2];
  char v876;
  void *v877;
  std::__shared_weak_count *v878;
  std::__shared_weak_count_vtbl *v879;
  std::__shared_weak_count *v880;
  __n128 v881;
  __int128 v882;
  __int128 v883;
  void *v884[2];
  uint64_t v885;
  __n128 v886;
  __n128 v887;
  __n128 v888;
  uint64_t v889;
  uint64_t v890;
  _QWORD *v891;
  char **v892;
  __n128 v893;
  __n128 v894;
  __n128 v895;
  __n128 v896;
  __n128 v897;
  __n128 v898;
  __n128 v899;
  __n128 v900;
  __n128 v901;
  __n128 v902;
  __n128 v903;
  __n128 v904;
  __n128 v905;
  __n128 v906;
  __n128 v907;
  __n128 v908;
  __n128 v909;
  _QWORD *v910;
  void *Scalar;
  uint64_t v912;
  char *v913;
  char *v914;
  char **v915;
  _QWORD v916[3];
  _QWORD v917[3];
  _QWORD v918[3];
  void *v919[3];
  void *__p;
  void *v921;
  _QWORD *v922;
  _QWORD v923[3];
  _QWORD *v924;
  _BYTE v925[24];
  _BYTE *v926;
  _QWORD v927[3];
  _QWORD *v928;
  std::__shared_weak_count_vtbl *v929;
  uint64_t p_get_deleter;
  _QWORD *p_on_zero_shared;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;

  v934 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v910 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = (char *)operator new(0x18uLL);
  v913 = v10 + 24;
  *(_QWORD *)v10 = v7;
  *((_QWORD *)v10 + 1) = v8;
  *((_QWORD *)v10 + 2) = v9;
  Scalar = v10;
  v912 = (uint64_t)(v10 + 24);
  v929 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = operator new(0x18uLL);
  v922 = v14 + 3;
  *v14 = v11;
  v14[1] = v12;
  v14[2] = v13;
  __p = v14;
  v921 = v14 + 3;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v929, 2, &v909);
  MIL::IRParameter::Make(&v909, &v890);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v890);
  v15 = v890;
  v890 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v909.n128_u64[1];
  if (v909.n128_u64[1])
  {
    v17 = (unint64_t *)(v909.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v921 = __p;
    operator delete(__p);
  }
  if (Scalar)
  {
    v912 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v19 = v910;
  v20 = MIL::IRUnknownDimension::Make(a1, 0);
  v21 = MIL::IRUnknownDimension::Make(a1, 0);
  v22 = (char *)operator new(0x10uLL);
  v913 = v22 + 16;
  *(_QWORD *)v22 = v20;
  *((_QWORD *)v22 + 1) = v21;
  Scalar = v22;
  v912 = (uint64_t)(v22 + 16);
  v929 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v23 = MIL::IRUnknownDimension::Make(a1, 0);
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = operator new(0x10uLL);
  v922 = v25 + 2;
  *v25 = v23;
  v25[1] = v24;
  __p = v25;
  v921 = v25 + 2;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v929, 2, &v908);
  MIL::IRParameter::Make(&v908, &v890);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v19, "initial_h", &v890);
  v26 = v890;
  v890 = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = (std::__shared_weak_count *)v908.n128_u64[1];
  if (v908.n128_u64[1])
  {
    v28 = (unint64_t *)(v908.n128_u64[1] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (__p)
  {
    v921 = __p;
    operator delete(__p);
  }
  if (Scalar)
  {
    v912 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v30 = v910;
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = MIL::IRUnknownDimension::Make(a1, 0);
  v33 = (char *)operator new(0x10uLL);
  v913 = v33 + 16;
  *(_QWORD *)v33 = v31;
  *((_QWORD *)v33 + 1) = v32;
  Scalar = v33;
  v912 = (uint64_t)(v33 + 16);
  v929 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = MIL::IRUnknownDimension::Make(a1, 0);
  v36 = operator new(0x10uLL);
  v922 = v36 + 2;
  *v36 = v34;
  v36[1] = v35;
  __p = v36;
  v921 = v36 + 2;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v929, 2, &v907);
  MIL::IRParameter::Make(&v907, &v890);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v30, "initial_c", &v890);
  v37 = v890;
  v890 = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  v38 = (std::__shared_weak_count *)v907.n128_u64[1];
  if (v907.n128_u64[1])
  {
    v39 = (unint64_t *)(v907.n128_u64[1] + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (__p)
  {
    v921 = __p;
    operator delete(__p);
  }
  if (Scalar)
  {
    v912 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v41 = v910;
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = MIL::IRUnknownDimension::Make(a1, 0);
  v44 = (char *)operator new(0x10uLL);
  v913 = v44 + 16;
  *(_QWORD *)v44 = v42;
  *((_QWORD *)v44 + 1) = v43;
  Scalar = v44;
  v912 = (uint64_t)(v44 + 16);
  v929 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v45 = MIL::IRUnknownDimension::Make(a1, 0);
  v46 = MIL::IRUnknownDimension::Make(a1, 0);
  v47 = operator new(0x10uLL);
  v922 = v47 + 2;
  *v47 = v45;
  v47[1] = v46;
  __p = v47;
  v921 = v47 + 2;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v929, 2, &v906);
  MIL::IRParameter::Make(&v906, &v890);
  v48 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v41, "weight_ih", &v890);
  v49 = v890;
  v890 = 0;
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  v50 = (std::__shared_weak_count *)v906.n128_u64[1];
  if (v906.n128_u64[1])
  {
    v51 = (unint64_t *)(v906.n128_u64[1] + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  if (__p)
  {
    v921 = __p;
    operator delete(__p);
  }
  if (Scalar)
  {
    v912 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v48 + 5) + 32))(*((_QWORD *)v48 + 5), 1);
  v53 = v910;
  v54 = MIL::IRUnknownDimension::Make(a1, 0);
  v55 = MIL::IRUnknownDimension::Make(a1, 0);
  v56 = (char *)operator new(0x10uLL);
  v913 = v56 + 16;
  *(_QWORD *)v56 = v54;
  *((_QWORD *)v56 + 1) = v55;
  Scalar = v56;
  v912 = (uint64_t)(v56 + 16);
  v929 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v57 = MIL::IRUnknownDimension::Make(a1, 0);
  v58 = MIL::IRUnknownDimension::Make(a1, 0);
  v59 = operator new(0x10uLL);
  v922 = v59 + 2;
  *v59 = v57;
  v59[1] = v58;
  __p = v59;
  v921 = v59 + 2;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v929, 2, &v905);
  MIL::IRParameter::Make(&v905, &v890);
  v60 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v53, "weight_hh", &v890);
  v61 = v890;
  v890 = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  v62 = (std::__shared_weak_count *)v905.n128_u64[1];
  if (v905.n128_u64[1])
  {
    v63 = (unint64_t *)(v905.n128_u64[1] + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  if (__p)
  {
    v921 = __p;
    operator delete(__p);
  }
  if (Scalar)
  {
    v912 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v60 + 5) + 32))(*((_QWORD *)v60 + 5), 1);
  v65 = v910;
  v66 = MIL::IRUnknownDimension::Make(a1, 0);
  v67 = (char *)operator new(8uLL);
  Scalar = v67;
  *(_QWORD *)v67 = v66;
  v913 = v67 + 8;
  v912 = (uint64_t)(v67 + 8);
  v929 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v68 = MIL::IRUnknownDimension::Make(a1, 0);
  v69 = operator new(8uLL);
  __p = v69;
  *v69 = v68;
  v922 = v69 + 1;
  v921 = v69 + 1;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v929, 2, &v904);
  MIL::IRParameter::Make(&v904, &v890);
  v70 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v65, "bias", &v890);
  v71 = v890;
  v890 = 0;
  if (v71)
    (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
  v72 = (std::__shared_weak_count *)v904.n128_u64[1];
  if (v904.n128_u64[1])
  {
    v73 = (unint64_t *)(v904.n128_u64[1] + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  if (__p)
  {
    v921 = __p;
    operator delete(__p);
  }
  if (Scalar)
  {
    v912 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v70 + 5) + 32))(*((_QWORD *)v70 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v70 + 5) + 48))(*((_QWORD *)v70 + 5), 1);
  v75 = v910;
  v76 = MIL::IRUnknownDimension::Make(a1, 0);
  v77 = (char *)operator new(8uLL);
  Scalar = v77;
  *(_QWORD *)v77 = v76;
  v913 = v77 + 8;
  v912 = (uint64_t)(v77 + 8);
  v929 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v78 = MIL::IRUnknownDimension::Make(a1, 0);
  v79 = operator new(8uLL);
  __p = v79;
  *v79 = v78;
  v922 = v79 + 1;
  v921 = v79 + 1;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v929, 2, &v903);
  MIL::IRParameter::Make(&v903, &v890);
  v80 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v75, "peephole", &v890);
  v81 = v890;
  v890 = 0;
  if (v81)
    (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
  v82 = (std::__shared_weak_count *)v903.n128_u64[1];
  if (v903.n128_u64[1])
  {
    v83 = (unint64_t *)(v903.n128_u64[1] + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  if (__p)
  {
    v921 = __p;
    operator delete(__p);
  }
  if (Scalar)
  {
    v912 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v80 + 5) + 32))(*((_QWORD *)v80 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v80 + 5) + 48))(*((_QWORD *)v80 + 5), 1);
  v85 = v910;
  v86 = MIL::IRUnknownDimension::Make(a1, 0);
  v87 = MIL::IRUnknownDimension::Make(a1, 0);
  v88 = (char *)operator new(0x10uLL);
  v913 = v88 + 16;
  *(_QWORD *)v88 = v86;
  *((_QWORD *)v88 + 1) = v87;
  Scalar = v88;
  v912 = (uint64_t)(v88 + 16);
  v929 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v89 = MIL::IRUnknownDimension::Make(a1, 0);
  v90 = MIL::IRUnknownDimension::Make(a1, 0);
  v91 = operator new(0x10uLL);
  v922 = v91 + 2;
  *v91 = v89;
  v91[1] = v90;
  __p = v91;
  v921 = v91 + 2;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v929, 2, &v902);
  MIL::IRParameter::Make(&v902, &v890);
  v92 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v85, "weight_ih_back", &v890);
  v93 = v890;
  v890 = 0;
  if (v93)
    (*(void (**)(uint64_t))(*(_QWORD *)v93 + 8))(v93);
  v94 = (std::__shared_weak_count *)v902.n128_u64[1];
  if (v902.n128_u64[1])
  {
    v95 = (unint64_t *)(v902.n128_u64[1] + 8);
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  if (__p)
  {
    v921 = __p;
    operator delete(__p);
  }
  if (Scalar)
  {
    v912 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v92 + 5) + 32))(*((_QWORD *)v92 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v92 + 5) + 48))(*((_QWORD *)v92 + 5), 1);
  v97 = v910;
  v98 = MIL::IRUnknownDimension::Make(a1, 0);
  v99 = MIL::IRUnknownDimension::Make(a1, 0);
  v100 = (char *)operator new(0x10uLL);
  v913 = v100 + 16;
  *(_QWORD *)v100 = v98;
  *((_QWORD *)v100 + 1) = v99;
  Scalar = v100;
  v912 = (uint64_t)(v100 + 16);
  v929 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v101 = MIL::IRUnknownDimension::Make(a1, 0);
  v102 = MIL::IRUnknownDimension::Make(a1, 0);
  v103 = operator new(0x10uLL);
  v922 = v103 + 2;
  *v103 = v101;
  v103[1] = v102;
  __p = v103;
  v921 = v103 + 2;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v929, 2, &v901);
  MIL::IRParameter::Make(&v901, &v890);
  v104 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v97, "weight_hh_back", &v890);
  v105 = v890;
  v890 = 0;
  if (v105)
    (*(void (**)(uint64_t))(*(_QWORD *)v105 + 8))(v105);
  v106 = (std::__shared_weak_count *)v901.n128_u64[1];
  if (v901.n128_u64[1])
  {
    v107 = (unint64_t *)(v901.n128_u64[1] + 8);
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  if (__p)
  {
    v921 = __p;
    operator delete(__p);
  }
  if (Scalar)
  {
    v912 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v104 + 5) + 32))(*((_QWORD *)v104 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v104 + 5) + 48))(*((_QWORD *)v104 + 5), 1);
  v109 = v910;
  v110 = MIL::IRUnknownDimension::Make(a1, 0);
  v111 = (char *)operator new(8uLL);
  Scalar = v111;
  *(_QWORD *)v111 = v110;
  v913 = v111 + 8;
  v912 = (uint64_t)(v111 + 8);
  v929 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v112 = MIL::IRUnknownDimension::Make(a1, 0);
  v113 = operator new(8uLL);
  __p = v113;
  *v113 = v112;
  v922 = v113 + 1;
  v921 = v113 + 1;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v929, 2, &v900);
  MIL::IRParameter::Make(&v900, &v890);
  v114 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v109, "bias_back", &v890);
  v115 = v890;
  v890 = 0;
  if (v115)
    (*(void (**)(uint64_t))(*(_QWORD *)v115 + 8))(v115);
  v116 = (std::__shared_weak_count *)v900.n128_u64[1];
  if (v900.n128_u64[1])
  {
    v117 = (unint64_t *)(v900.n128_u64[1] + 8);
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  if (__p)
  {
    v921 = __p;
    operator delete(__p);
  }
  if (Scalar)
  {
    v912 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v114 + 5) + 32))(*((_QWORD *)v114 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v114 + 5) + 48))(*((_QWORD *)v114 + 5), 1);
  v119 = v910;
  v120 = MIL::IRUnknownDimension::Make(a1, 0);
  v121 = (char *)operator new(8uLL);
  Scalar = v121;
  *(_QWORD *)v121 = v120;
  v913 = v121 + 8;
  v912 = (uint64_t)(v121 + 8);
  v929 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v122 = MIL::IRUnknownDimension::Make(a1, 0);
  v123 = operator new(8uLL);
  __p = v123;
  *v123 = v122;
  v922 = v123 + 1;
  v921 = v123 + 1;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v929, 2, &v899);
  MIL::IRParameter::Make(&v899, &v890);
  v124 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v119, "peephole_back", &v890);
  v125 = v890;
  v890 = 0;
  if (v125)
    (*(void (**)(uint64_t))(*(_QWORD *)v125 + 8))(v125);
  v126 = (std::__shared_weak_count *)v899.n128_u64[1];
  if (v899.n128_u64[1])
  {
    v127 = (unint64_t *)(v899.n128_u64[1] + 8);
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  if (__p)
  {
    v921 = __p;
    operator delete(__p);
  }
  if (Scalar)
  {
    v912 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v124 + 5) + 32))(*((_QWORD *)v124 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v124 + 5) + 48))(*((_QWORD *)v124 + 5), 1);
  v129 = v910;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v898);
  MIL::IRParameter::Make(&v898, (uint64_t *)&Scalar);
  v130 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v129, "direction", (uint64_t *)&Scalar);
  v131 = Scalar;
  Scalar = 0;
  if (v131)
    (*(void (**)(void *))(*(_QWORD *)v131 + 8))(v131);
  v132 = (std::__shared_weak_count *)v898.n128_u64[1];
  if (v898.n128_u64[1])
  {
    v133 = (unint64_t *)(v898.n128_u64[1] + 8);
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v130 + 5) + 32))(*((_QWORD *)v130 + 5), 1);
  v135 = v910;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v897);
  MIL::IRParameter::Make(&v897, (uint64_t *)&Scalar);
  v136 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[16],std::unique_ptr<MIL::IRParameter>>(v135, "output_sequence", (uint64_t *)&Scalar);
  v137 = Scalar;
  Scalar = 0;
  if (v137)
    (*(void (**)(void *))(*(_QWORD *)v137 + 8))(v137);
  v138 = (std::__shared_weak_count *)v897.n128_u64[1];
  if (v897.n128_u64[1])
  {
    v139 = (unint64_t *)(v897.n128_u64[1] + 8);
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v136 + 5) + 32))(*((_QWORD *)v136 + 5), 1);
  v141 = v910;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v896);
  MIL::IRParameter::Make(&v896, (uint64_t *)&Scalar);
  v142 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v141, "recurrent_activation", (uint64_t *)&Scalar);
  v143 = Scalar;
  Scalar = 0;
  if (v143)
    (*(void (**)(void *))(*(_QWORD *)v143 + 8))(v143);
  v144 = (std::__shared_weak_count *)v896.n128_u64[1];
  if (v896.n128_u64[1])
  {
    v145 = (unint64_t *)(v896.n128_u64[1] + 8);
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v142 + 5) + 32))(*((_QWORD *)v142 + 5), 1);
  v147 = v910;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v895);
  MIL::IRParameter::Make(&v895, (uint64_t *)&Scalar);
  v148 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[16],std::unique_ptr<MIL::IRParameter>>(v147, "cell_activation", (uint64_t *)&Scalar);
  v149 = Scalar;
  Scalar = 0;
  if (v149)
    (*(void (**)(void *))(*(_QWORD *)v149 + 8))(v149);
  v150 = (std::__shared_weak_count *)v895.n128_u64[1];
  if (v895.n128_u64[1])
  {
    v151 = (unint64_t *)(v895.n128_u64[1] + 8);
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v148 + 5) + 32))(*((_QWORD *)v148 + 5), 1);
  v153 = v910;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v894);
  MIL::IRParameter::Make(&v894, (uint64_t *)&Scalar);
  v154 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v153, "activation", (uint64_t *)&Scalar);
  v155 = Scalar;
  Scalar = 0;
  if (v155)
    (*(void (**)(void *))(*(_QWORD *)v155 + 8))(v155);
  v156 = (std::__shared_weak_count *)v894.n128_u64[1];
  if (v894.n128_u64[1])
  {
    v157 = (unint64_t *)(v894.n128_u64[1] + 8);
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v154 + 5) + 32))(*((_QWORD *)v154 + 5), 1);
  v159 = v910;
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v912 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v893);
  MIL::IRParameter::Make(&v893, (uint64_t *)&__p);
  v160 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v159, "clip", (uint64_t *)&__p);
  v161 = __p;
  __p = 0;
  if (v161)
    (*(void (**)(void *))(*(_QWORD *)v161 + 8))(v161);
  v162 = (std::__shared_weak_count *)v893.n128_u64[1];
  if (v893.n128_u64[1])
  {
    v163 = (unint64_t *)(v893.n128_u64[1] + 8);
    do
      v164 = __ldaxr(v163);
    while (__stlxr(v164 - 1, v163));
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v160 + 5) + 32))(*((_QWORD *)v160 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v160 + 5) + 48))(*((_QWORD *)v160 + 5), 1);
  v892 = 0;
  v165 = operator new();
  *(_QWORD *)v165 = 0;
  *(_QWORD *)(v165 + 8) = 0;
  *(_QWORD *)(v165 + 16) = 0;
  Scalar = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v892, (void **)v165);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&Scalar, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v892, 3uLL);
  v166 = v892;
  v167 = MIL::IRUnknownDimension::Make(a1, 0);
  v168 = MIL::IRUnknownDimension::Make(a1, 0);
  v169 = MIL::IRUnknownDimension::Make(a1, 0);
  v170 = operator new(0x18uLL);
  v922 = v170 + 3;
  *v170 = v167;
  v170[1] = v168;
  v170[2] = v169;
  __p = v170;
  v921 = v170 + 3;
  v932 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v171 = MIL::IRUnknownDimension::Make(a1, 0);
  v172 = MIL::IRUnknownDimension::Make(a1, 0);
  v173 = MIL::IRUnknownDimension::Make(a1, 0);
  v174 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (uint64_t)&v174->__get_deleter;
  p_on_zero_shared = &v174->__get_deleter;
  v174->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v171;
  v174->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v172;
  v174->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v173;
  v929 = v174;
  v933 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v929);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v932, 2, &v888);
  MIL::IRParameter::Make(&v888, &v889);
  v175 = v889;
  v890 = v889;
  if (v889)
  {
    v176 = (_QWORD *)operator new();
    v177 = v889;
    *v176 = &unk_1EA99F888;
    v176[1] = 0;
    v176[2] = 0;
    v176[3] = v177;
  }
  else
  {
    v176 = 0;
  }
  v891 = v176;
  v889 = 0;
  v178 = v166[2];
  v179 = v166[1];
  if (v179 >= v178)
  {
    v181 = (v179 - *v166) >> 4;
    v182 = v181 + 1;
    if ((unint64_t)(v181 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v183 = v178 - *v166;
    if (v183 >> 3 > v182)
      v182 = v183 >> 3;
    if ((unint64_t)v183 >= 0x7FFFFFFFFFFFFFF0)
      v184 = 0xFFFFFFFFFFFFFFFLL;
    else
      v184 = v182;
    v915 = v166 + 2;
    v185 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v166 + 2), v184);
    v187 = (uint64_t *)&v185[16 * v181];
    *v187 = v175;
    v187[1] = (uint64_t)v176;
    v891 = 0;
    v890 = 0;
    v189 = *v166;
    v188 = v166[1];
    if (v188 == *v166)
    {
      v192 = v166[1];
      v190 = &v185[16 * v181];
    }
    else
    {
      v190 = &v185[16 * v181];
      do
      {
        v191 = *((_OWORD *)v188 - 1);
        v188 -= 16;
        *((_OWORD *)v190 - 1) = v191;
        v190 -= 16;
        *(_QWORD *)v188 = 0;
        *((_QWORD *)v188 + 1) = 0;
      }
      while (v188 != v189);
      v192 = *v166;
      v188 = v166[1];
    }
    v180 = (char *)(v187 + 2);
    *v166 = v190;
    v912 = (uint64_t)v192;
    v166[1] = (char *)(v187 + 2);
    v913 = v188;
    v193 = v166[2];
    v166[2] = &v185[16 * v186];
    v914 = v193;
    Scalar = v192;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v179 = v175;
    *((_QWORD *)v179 + 1) = v176;
    v180 = v179 + 16;
    v891 = 0;
    v890 = 0;
  }
  v166[1] = v180;
  v194 = v889;
  v889 = 0;
  if (v194)
    (*(void (**)(uint64_t))(*(_QWORD *)v194 + 8))(v194);
  v195 = (std::__shared_weak_count *)v888.n128_u64[1];
  if (v888.n128_u64[1])
  {
    v196 = (unint64_t *)(v888.n128_u64[1] + 8);
    do
      v197 = __ldaxr(v196);
    while (__stlxr(v197 - 1, v196));
    if (!v197)
    {
      ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
      std::__shared_weak_count::__release_weak(v195);
    }
  }
  if (v929)
  {
    p_get_deleter = (uint64_t)v929;
    operator delete(v929);
  }
  if (__p)
  {
    v921 = __p;
    operator delete(__p);
  }
  v198 = v892;
  v199 = MIL::IRUnknownDimension::Make(a1, 0);
  v200 = MIL::IRUnknownDimension::Make(a1, 0);
  v201 = operator new(0x10uLL);
  v922 = v201 + 2;
  *v201 = v199;
  v201[1] = v200;
  __p = v201;
  v921 = v201 + 2;
  v932 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v202 = MIL::IRUnknownDimension::Make(a1, 0);
  v203 = MIL::IRUnknownDimension::Make(a1, 0);
  v204 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_get_deleter = (uint64_t)&v204->__on_zero_shared;
  p_on_zero_shared = &v204->__on_zero_shared;
  v204->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v202;
  v204->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v203;
  v929 = v204;
  v933 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v929);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v932, 2, &v887);
  MIL::IRParameter::Make(&v887, &v889);
  v205 = v889;
  v890 = v889;
  if (v889)
  {
    v206 = (_QWORD *)operator new();
    v207 = v889;
    *v206 = &unk_1EA99F888;
    v206[1] = 0;
    v206[2] = 0;
    v206[3] = v207;
  }
  else
  {
    v206 = 0;
  }
  v891 = v206;
  v889 = 0;
  v208 = v198[2];
  v209 = v198[1];
  if (v209 >= v208)
  {
    v211 = (v209 - *v198) >> 4;
    v212 = v211 + 1;
    if ((unint64_t)(v211 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v213 = v208 - *v198;
    if (v213 >> 3 > v212)
      v212 = v213 >> 3;
    if ((unint64_t)v213 >= 0x7FFFFFFFFFFFFFF0)
      v214 = 0xFFFFFFFFFFFFFFFLL;
    else
      v214 = v212;
    v915 = v198 + 2;
    v215 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v198 + 2), v214);
    v217 = (uint64_t *)&v215[16 * v211];
    *v217 = v205;
    v217[1] = (uint64_t)v206;
    v891 = 0;
    v890 = 0;
    v219 = *v198;
    v218 = v198[1];
    if (v218 == *v198)
    {
      v222 = v198[1];
      v220 = &v215[16 * v211];
    }
    else
    {
      v220 = &v215[16 * v211];
      do
      {
        v221 = *((_OWORD *)v218 - 1);
        v218 -= 16;
        *((_OWORD *)v220 - 1) = v221;
        v220 -= 16;
        *(_QWORD *)v218 = 0;
        *((_QWORD *)v218 + 1) = 0;
      }
      while (v218 != v219);
      v222 = *v198;
      v218 = v198[1];
    }
    v210 = (char *)(v217 + 2);
    *v198 = v220;
    v912 = (uint64_t)v222;
    v198[1] = (char *)(v217 + 2);
    v913 = v218;
    v223 = v198[2];
    v198[2] = &v215[16 * v216];
    v914 = v223;
    Scalar = v222;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v209 = v205;
    *((_QWORD *)v209 + 1) = v206;
    v210 = v209 + 16;
    v891 = 0;
    v890 = 0;
  }
  v198[1] = v210;
  v224 = v889;
  v889 = 0;
  if (v224)
    (*(void (**)(uint64_t))(*(_QWORD *)v224 + 8))(v224);
  v225 = (std::__shared_weak_count *)v887.n128_u64[1];
  if (v887.n128_u64[1])
  {
    v226 = (unint64_t *)(v887.n128_u64[1] + 8);
    do
      v227 = __ldaxr(v226);
    while (__stlxr(v227 - 1, v226));
    if (!v227)
    {
      ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
      std::__shared_weak_count::__release_weak(v225);
    }
  }
  if (v929)
  {
    p_get_deleter = (uint64_t)v929;
    operator delete(v929);
  }
  if (__p)
  {
    v921 = __p;
    operator delete(__p);
  }
  v228 = v892;
  v229 = MIL::IRUnknownDimension::Make(a1, 0);
  v230 = MIL::IRUnknownDimension::Make(a1, 0);
  v231 = operator new(0x10uLL);
  v922 = v231 + 2;
  *v231 = v229;
  v231[1] = v230;
  __p = v231;
  v921 = v231 + 2;
  v932 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v232 = MIL::IRUnknownDimension::Make(a1, 0);
  v233 = MIL::IRUnknownDimension::Make(a1, 0);
  v234 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_get_deleter = (uint64_t)&v234->__on_zero_shared;
  p_on_zero_shared = &v234->__on_zero_shared;
  v234->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v232;
  v234->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v233;
  v929 = v234;
  v933 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v929);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v932, 2, &v886);
  MIL::IRParameter::Make(&v886, &v889);
  v235 = v889;
  v890 = v889;
  if (v889)
  {
    v236 = (_QWORD *)operator new();
    v237 = v889;
    *v236 = &unk_1EA99F888;
    v236[1] = 0;
    v236[2] = 0;
    v236[3] = v237;
  }
  else
  {
    v236 = 0;
  }
  v891 = v236;
  v889 = 0;
  v238 = v228[2];
  v239 = v228[1];
  if (v239 >= v238)
  {
    v241 = (v239 - *v228) >> 4;
    v242 = v241 + 1;
    if ((unint64_t)(v241 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v243 = v238 - *v228;
    if (v243 >> 3 > v242)
      v242 = v243 >> 3;
    if ((unint64_t)v243 >= 0x7FFFFFFFFFFFFFF0)
      v244 = 0xFFFFFFFFFFFFFFFLL;
    else
      v244 = v242;
    v915 = v228 + 2;
    v245 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v228 + 2), v244);
    v247 = (uint64_t *)&v245[16 * v241];
    *v247 = v235;
    v247[1] = (uint64_t)v236;
    v891 = 0;
    v890 = 0;
    v249 = *v228;
    v248 = v228[1];
    if (v248 == *v228)
    {
      v252 = v228[1];
      v250 = &v245[16 * v241];
    }
    else
    {
      v250 = &v245[16 * v241];
      do
      {
        v251 = *((_OWORD *)v248 - 1);
        v248 -= 16;
        *((_OWORD *)v250 - 1) = v251;
        v250 -= 16;
        *(_QWORD *)v248 = 0;
        *((_QWORD *)v248 + 1) = 0;
      }
      while (v248 != v249);
      v252 = *v228;
      v248 = v228[1];
    }
    v240 = (char *)(v247 + 2);
    *v228 = v250;
    v912 = (uint64_t)v252;
    v228[1] = (char *)(v247 + 2);
    v913 = v248;
    v253 = v228[2];
    v228[2] = &v245[16 * v246];
    v914 = v253;
    Scalar = v252;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v239 = v235;
    *((_QWORD *)v239 + 1) = v236;
    v240 = v239 + 16;
    v891 = 0;
    v890 = 0;
  }
  v228[1] = v240;
  v254 = v889;
  v889 = 0;
  if (v254)
    (*(void (**)(uint64_t))(*(_QWORD *)v254 + 8))(v254);
  v255 = (std::__shared_weak_count *)v886.n128_u64[1];
  if (v886.n128_u64[1])
  {
    v256 = (unint64_t *)(v886.n128_u64[1] + 8);
    do
      v257 = __ldaxr(v256);
    while (__stlxr(v257 - 1, v256));
    if (!v257)
    {
      ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
      std::__shared_weak_count::__release_weak(v255);
    }
  }
  if (v929)
  {
    p_get_deleter = (uint64_t)v929;
    operator delete(v929);
  }
  if (__p)
  {
    v921 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v884 = *(_OWORD *)a2;
  v885 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v258 = (uint64_t)v910;
  *(_QWORD *)&v883 = v910;
  if (v910)
  {
    v259 = (_QWORD *)operator new();
    *v259 = &unk_1EA99F8E8;
    v259[1] = 0;
    v259[2] = 0;
    v259[3] = v258;
  }
  else
  {
    v259 = 0;
  }
  *((_QWORD *)&v883 + 1) = v259;
  v910 = 0;
  *(_QWORD *)&v882 = v892;
  if (v892)
  {
    v260 = (_QWORD *)operator new();
    v261 = v892;
    *v260 = &unk_1EA99F948;
    v260[1] = 0;
    v260[2] = 0;
    v260[3] = v261;
  }
  else
  {
    v260 = 0;
  }
  *((_QWORD *)&v882 + 1) = v260;
  v892 = 0;
  v927[0] = &unk_1EA99FAC8;
  v927[1] = MIL::Operators::Common::ios17::CustomValidators::ValidateLSTM;
  v928 = v927;
  v926 = 0;
  MIL::IROperator::Make((__int128 *)v884, &v883, &v882, (uint64_t)v927, (uint64_t)v925, a3);
  v262 = v926;
  if (v926 == v925)
  {
    v263 = 4;
    v262 = v925;
  }
  else
  {
    if (!v926)
      goto LABEL_259;
    v263 = 5;
  }
  (*(void (**)(void))(*v262 + 8 * v263))();
LABEL_259:
  v264 = v928;
  if (v928 == v927)
  {
    v265 = 4;
    v264 = v927;
    goto LABEL_263;
  }
  if (v928)
  {
    v265 = 5;
LABEL_263:
    (*(void (**)(void))(*v264 + 8 * v265))();
  }
  v266 = (std::__shared_weak_count *)*((_QWORD *)&v882 + 1);
  if (*((_QWORD *)&v882 + 1))
  {
    v267 = (unint64_t *)(*((_QWORD *)&v882 + 1) + 8);
    do
      v268 = __ldaxr(v267);
    while (__stlxr(v268 - 1, v267));
    if (!v268)
    {
      ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
      std::__shared_weak_count::__release_weak(v266);
    }
  }
  v269 = (std::__shared_weak_count *)*((_QWORD *)&v883 + 1);
  if (*((_QWORD *)&v883 + 1))
  {
    v270 = (unint64_t *)(*((_QWORD *)&v883 + 1) + 8);
    do
      v271 = __ldaxr(v270);
    while (__stlxr(v271 - 1, v270));
    if (!v271)
    {
      ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
      std::__shared_weak_count::__release_weak(v269);
    }
  }
  if (SHIBYTE(v885) < 0)
    operator delete(v884[0]);
  v929 = 0;
  v272 = (_OWORD *)operator new();
  *v272 = 0u;
  v272[1] = 0u;
  *((_DWORD *)v272 + 8) = 1065353216;
  v929 = (std::__shared_weak_count_vtbl *)v272;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v881);
  MIL::IRParameter::Make(&v881, (uint64_t *)&Scalar);
  v273 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v272, "minimum_compute_type", (uint64_t *)&Scalar);
  v274 = Scalar;
  Scalar = 0;
  if (v274)
    (*(void (**)(void *))(*(_QWORD *)v274 + 8))(v274);
  v275 = (std::__shared_weak_count *)v881.n128_u64[1];
  if (v881.n128_u64[1])
  {
    v276 = (unint64_t *)(v881.n128_u64[1] + 8);
    do
      v277 = __ldaxr(v276);
    while (__stlxr(v277 - 1, v276));
    if (!v277)
    {
      ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
      std::__shared_weak_count::__release_weak(v275);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v273 + 5) + 32))(*((_QWORD *)v273 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v273 + 5) + 48))(*((_QWORD *)v273 + 5), 1);
  v278 = *a3;
  v279 = v929;
  v879 = v929;
  if (v929)
  {
    v280 = (std::__shared_weak_count *)operator new();
    v280->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v280->__shared_owners_ = 0;
    v280->__shared_weak_owners_ = 0;
    v280[1].__vftable = v279;
  }
  else
  {
    v280 = 0;
  }
  v880 = v280;
  v929 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v278 + 184))(v278, &v879);
  v281 = v880;
  if (v880)
  {
    p_shared_owners = (unint64_t *)&v880->__shared_owners_;
    do
      v283 = __ldaxr(p_shared_owners);
    while (__stlxr(v283 - 1, p_shared_owners));
    if (!v283)
    {
      ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
      std::__shared_weak_count::__release_weak(v281);
    }
  }
  v284 = *a3;
  v923[0] = &off_1EA99FBD8;
  v923[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceLSTM;
  v924 = v923;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v284 + 200))(v284, v923);
  v285 = v924;
  if (v924 == v923)
  {
    v286 = 4;
    v285 = v923;
  }
  else
  {
    if (!v924)
      goto LABEL_296;
    v286 = 5;
  }
  (*(void (**)(void))(*v285 + 8 * v286))();
LABEL_296:
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v287 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v875, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v875, 0, (uint64_t *)&__p);
  v877 = __p;
  if (__p)
  {
    v288 = (std::__shared_weak_count *)operator new();
    v289 = (std::__shared_weak_count_vtbl *)__p;
    v288->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v288->__shared_owners_ = 0;
    v288->__shared_weak_owners_ = 0;
    v288[1].__vftable = v289;
  }
  else
  {
    v288 = 0;
  }
  v878 = v288;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v873, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v287 + 24))(v287, &v877, v873);
  if (v874 < 0)
    operator delete(v873[0]);
  v290 = v878;
  if (v878)
  {
    v291 = (unint64_t *)&v878->__shared_owners_;
    do
      v292 = __ldaxr(v291);
    while (__stlxr(v292 - 1, v291));
    if (!v292)
    {
      ((void (*)(std::__shared_weak_count *))v290->__on_zero_shared)(v290);
      std::__shared_weak_count::__release_weak(v290);
    }
  }
  v293 = __p;
  __p = 0;
  if (v293)
    (*(void (**)(void *))(*(_QWORD *)v293 + 8))(v293);
  if (v876 < 0)
    operator delete(v875[0]);
  v294 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v869, "initial_h");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v869, 0, (uint64_t *)&__p);
  v871 = __p;
  if (__p)
  {
    v295 = (std::__shared_weak_count *)operator new();
    v296 = (std::__shared_weak_count_vtbl *)__p;
    v295->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v295->__shared_owners_ = 0;
    v295->__shared_weak_owners_ = 0;
    v295[1].__vftable = v296;
  }
  else
  {
    v295 = 0;
  }
  v872 = v295;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v867, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v294 + 24))(v294, &v871, v867);
  if (v868 < 0)
    operator delete(v867[0]);
  v297 = v872;
  if (v872)
  {
    v298 = (unint64_t *)&v872->__shared_owners_;
    do
      v299 = __ldaxr(v298);
    while (__stlxr(v299 - 1, v298));
    if (!v299)
    {
      ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
      std::__shared_weak_count::__release_weak(v297);
    }
  }
  v300 = __p;
  __p = 0;
  if (v300)
    (*(void (**)(void *))(*(_QWORD *)v300 + 8))(v300);
  if (v870 < 0)
    operator delete(v869[0]);
  v301 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v863, "initial_c");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v863, 0, (uint64_t *)&__p);
  v865 = __p;
  if (__p)
  {
    v302 = (std::__shared_weak_count *)operator new();
    v303 = (std::__shared_weak_count_vtbl *)__p;
    v302->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v302->__shared_owners_ = 0;
    v302->__shared_weak_owners_ = 0;
    v302[1].__vftable = v303;
  }
  else
  {
    v302 = 0;
  }
  v866 = v302;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v861, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v301 + 24))(v301, &v865, v861);
  if (v862 < 0)
    operator delete(v861[0]);
  v304 = v866;
  if (v866)
  {
    v305 = (unint64_t *)&v866->__shared_owners_;
    do
      v306 = __ldaxr(v305);
    while (__stlxr(v306 - 1, v305));
    if (!v306)
    {
      ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
      std::__shared_weak_count::__release_weak(v304);
    }
  }
  v307 = __p;
  __p = 0;
  if (v307)
    (*(void (**)(void *))(*(_QWORD *)v307 + 8))(v307);
  if (v864 < 0)
    operator delete(v863[0]);
  v308 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v857, "weight_ih");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v857, 0, (uint64_t *)&__p);
  v859 = __p;
  if (__p)
  {
    v309 = (std::__shared_weak_count *)operator new();
    v310 = (std::__shared_weak_count_vtbl *)__p;
    v309->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v309->__shared_owners_ = 0;
    v309->__shared_weak_owners_ = 0;
    v309[1].__vftable = v310;
  }
  else
  {
    v309 = 0;
  }
  v860 = v309;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v855, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v308 + 24))(v308, &v859, v855);
  if (v856 < 0)
    operator delete(v855[0]);
  v311 = v860;
  if (v860)
  {
    v312 = (unint64_t *)&v860->__shared_owners_;
    do
      v313 = __ldaxr(v312);
    while (__stlxr(v313 - 1, v312));
    if (!v313)
    {
      ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
      std::__shared_weak_count::__release_weak(v311);
    }
  }
  v314 = __p;
  __p = 0;
  if (v314)
    (*(void (**)(void *))(*(_QWORD *)v314 + 8))(v314);
  if (v858 < 0)
    operator delete(v857[0]);
  v315 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v851, "weight_hh");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v851, 0, (uint64_t *)&__p);
  v853 = __p;
  if (__p)
  {
    v316 = (std::__shared_weak_count *)operator new();
    v317 = (std::__shared_weak_count_vtbl *)__p;
    v316->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v316->__shared_owners_ = 0;
    v316->__shared_weak_owners_ = 0;
    v316[1].__vftable = v317;
  }
  else
  {
    v316 = 0;
  }
  v854 = v316;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v849, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v315 + 24))(v315, &v853, v849);
  if (v850 < 0)
    operator delete(v849[0]);
  v318 = v854;
  if (v854)
  {
    v319 = (unint64_t *)&v854->__shared_owners_;
    do
      v320 = __ldaxr(v319);
    while (__stlxr(v320 - 1, v319));
    if (!v320)
    {
      ((void (*)(std::__shared_weak_count *))v318->__on_zero_shared)(v318);
      std::__shared_weak_count::__release_weak(v318);
    }
  }
  v321 = __p;
  __p = 0;
  if (v321)
    (*(void (**)(void *))(*(_QWORD *)v321 + 8))(v321);
  if (v852 < 0)
    operator delete(v851[0]);
  v322 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v845, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v845, 1, (uint64_t *)&__p);
  v847 = __p;
  if (__p)
  {
    v323 = (std::__shared_weak_count *)operator new();
    v324 = (std::__shared_weak_count_vtbl *)__p;
    v323->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v323->__shared_owners_ = 0;
    v323->__shared_weak_owners_ = 0;
    v323[1].__vftable = v324;
  }
  else
  {
    v323 = 0;
  }
  v848 = v323;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v843, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v322 + 24))(v322, &v847, v843);
  if (v844 < 0)
    operator delete(v843[0]);
  v325 = v848;
  if (v848)
  {
    v326 = (unint64_t *)&v848->__shared_owners_;
    do
      v327 = __ldaxr(v326);
    while (__stlxr(v327 - 1, v326));
    if (!v327)
    {
      ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
      std::__shared_weak_count::__release_weak(v325);
    }
  }
  v328 = __p;
  __p = 0;
  if (v328)
    (*(void (**)(void *))(*(_QWORD *)v328 + 8))(v328);
  if (v846 < 0)
    operator delete(v845[0]);
  v329 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v839, "peephole");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v839, 1, (uint64_t *)&__p);
  v841 = __p;
  if (__p)
  {
    v330 = (std::__shared_weak_count *)operator new();
    v331 = (std::__shared_weak_count_vtbl *)__p;
    v330->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v330->__shared_owners_ = 0;
    v330->__shared_weak_owners_ = 0;
    v330[1].__vftable = v331;
  }
  else
  {
    v330 = 0;
  }
  v842 = v330;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v837, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v329 + 24))(v329, &v841, v837);
  if (v838 < 0)
    operator delete(v837[0]);
  v332 = v842;
  if (v842)
  {
    v333 = (unint64_t *)&v842->__shared_owners_;
    do
      v334 = __ldaxr(v333);
    while (__stlxr(v334 - 1, v333));
    if (!v334)
    {
      ((void (*)(std::__shared_weak_count *))v332->__on_zero_shared)(v332);
      std::__shared_weak_count::__release_weak(v332);
    }
  }
  v335 = __p;
  __p = 0;
  if (v335)
    (*(void (**)(void *))(*(_QWORD *)v335 + 8))(v335);
  if (v840 < 0)
    operator delete(v839[0]);
  v336 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v833, "weight_ih_back");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v833, 1, (uint64_t *)&__p);
  v835 = __p;
  if (__p)
  {
    v337 = (std::__shared_weak_count *)operator new();
    v338 = (std::__shared_weak_count_vtbl *)__p;
    v337->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v337->__shared_owners_ = 0;
    v337->__shared_weak_owners_ = 0;
    v337[1].__vftable = v338;
  }
  else
  {
    v337 = 0;
  }
  v836 = v337;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v831, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v336 + 24))(v336, &v835, v831);
  if (v832 < 0)
    operator delete(v831[0]);
  v339 = v836;
  if (v836)
  {
    v340 = (unint64_t *)&v836->__shared_owners_;
    do
      v341 = __ldaxr(v340);
    while (__stlxr(v341 - 1, v340));
    if (!v341)
    {
      ((void (*)(std::__shared_weak_count *))v339->__on_zero_shared)(v339);
      std::__shared_weak_count::__release_weak(v339);
    }
  }
  v342 = __p;
  __p = 0;
  if (v342)
    (*(void (**)(void *))(*(_QWORD *)v342 + 8))(v342);
  if (v834 < 0)
    operator delete(v833[0]);
  v343 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v827, "weight_hh_back");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v827, 1, (uint64_t *)&__p);
  v829 = __p;
  if (__p)
  {
    v344 = (std::__shared_weak_count *)operator new();
    v345 = (std::__shared_weak_count_vtbl *)__p;
    v344->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v344->__shared_owners_ = 0;
    v344->__shared_weak_owners_ = 0;
    v344[1].__vftable = v345;
  }
  else
  {
    v344 = 0;
  }
  v830 = v344;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v825, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v343 + 24))(v343, &v829, v825);
  if (v826 < 0)
    operator delete(v825[0]);
  v346 = v830;
  if (v830)
  {
    v347 = (unint64_t *)&v830->__shared_owners_;
    do
      v348 = __ldaxr(v347);
    while (__stlxr(v348 - 1, v347));
    if (!v348)
    {
      ((void (*)(std::__shared_weak_count *))v346->__on_zero_shared)(v346);
      std::__shared_weak_count::__release_weak(v346);
    }
  }
  v349 = __p;
  __p = 0;
  if (v349)
    (*(void (**)(void *))(*(_QWORD *)v349 + 8))(v349);
  if (v828 < 0)
    operator delete(v827[0]);
  v350 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v821, "bias_back");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v821, 1, (uint64_t *)&__p);
  v823 = __p;
  if (__p)
  {
    v351 = (std::__shared_weak_count *)operator new();
    v352 = (std::__shared_weak_count_vtbl *)__p;
    v351->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v351->__shared_owners_ = 0;
    v351->__shared_weak_owners_ = 0;
    v351[1].__vftable = v352;
  }
  else
  {
    v351 = 0;
  }
  v824 = v351;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v819, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v350 + 24))(v350, &v823, v819);
  if (v820 < 0)
    operator delete(v819[0]);
  v353 = v824;
  if (v824)
  {
    v354 = (unint64_t *)&v824->__shared_owners_;
    do
      v355 = __ldaxr(v354);
    while (__stlxr(v355 - 1, v354));
    if (!v355)
    {
      ((void (*)(std::__shared_weak_count *))v353->__on_zero_shared)(v353);
      std::__shared_weak_count::__release_weak(v353);
    }
  }
  v356 = __p;
  __p = 0;
  if (v356)
    (*(void (**)(void *))(*(_QWORD *)v356 + 8))(v356);
  if (v822 < 0)
    operator delete(v821[0]);
  v357 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v815, "peephole_back");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v815, 1, (uint64_t *)&__p);
  v817 = __p;
  if (__p)
  {
    v358 = (std::__shared_weak_count *)operator new();
    v359 = (std::__shared_weak_count_vtbl *)__p;
    v358->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v358->__shared_owners_ = 0;
    v358->__shared_weak_owners_ = 0;
    v358[1].__vftable = v359;
  }
  else
  {
    v358 = 0;
  }
  v818 = v358;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v813, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v357 + 24))(v357, &v817, v813);
  if (v814 < 0)
    operator delete(v813[0]);
  v360 = v818;
  if (v818)
  {
    v361 = (unint64_t *)&v818->__shared_owners_;
    do
      v362 = __ldaxr(v361);
    while (__stlxr(v362 - 1, v361));
    if (!v362)
    {
      ((void (*)(std::__shared_weak_count *))v360->__on_zero_shared)(v360);
      std::__shared_weak_count::__release_weak(v360);
    }
  }
  v363 = __p;
  __p = 0;
  if (v363)
    (*(void (**)(void *))(*(_QWORD *)v363 + 8))(v363);
  if (v816 < 0)
    operator delete(v815[0]);
  v364 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v809, "clip");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v809, 1, (uint64_t *)&__p);
  v811 = __p;
  if (__p)
  {
    v365 = (std::__shared_weak_count *)operator new();
    v366 = (std::__shared_weak_count_vtbl *)__p;
    v365->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v365->__shared_owners_ = 0;
    v365->__shared_weak_owners_ = 0;
    v365[1].__vftable = v366;
  }
  else
  {
    v365 = 0;
  }
  v812 = v365;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v807, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v364 + 24))(v364, &v811, v807);
  if (v808 < 0)
    operator delete(v807[0]);
  v367 = v812;
  if (v812)
  {
    v368 = (unint64_t *)&v812->__shared_owners_;
    do
      v369 = __ldaxr(v368);
    while (__stlxr(v369 - 1, v368));
    if (!v369)
    {
      ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
      std::__shared_weak_count::__release_weak(v367);
    }
  }
  v370 = __p;
  __p = 0;
  if (v370)
    (*(void (**)(void *))(*(_QWORD *)v370 + 8))(v370);
  if (v810 < 0)
    operator delete(v809[0]);
  v371 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v805 = __p;
  if (__p)
  {
    v372 = (std::__shared_weak_count *)operator new();
    v373 = (std::__shared_weak_count_vtbl *)__p;
    v372->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v372->__shared_owners_ = 0;
    v372->__shared_weak_owners_ = 0;
    v372[1].__vftable = v373;
  }
  else
  {
    v372 = 0;
  }
  v806 = v372;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v803, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v371 + 24))(v371, &v805, v803);
  if (v804 < 0)
    operator delete(v803[0]);
  v374 = v806;
  if (v806)
  {
    v375 = (unint64_t *)&v806->__shared_owners_;
    do
      v376 = __ldaxr(v375);
    while (__stlxr(v376 - 1, v375));
    if (!v376)
    {
      ((void (*)(std::__shared_weak_count *))v374->__on_zero_shared)(v374);
      std::__shared_weak_count::__release_weak(v374);
    }
  }
  v377 = __p;
  __p = 0;
  if (v377)
    (*(void (**)(void *))(*(_QWORD *)v377 + 8))(v377);
  v378 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 0, &__p);
  v801 = __p;
  if (__p)
  {
    v379 = (std::__shared_weak_count *)operator new();
    v380 = (std::__shared_weak_count_vtbl *)__p;
    v379->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v379->__shared_owners_ = 0;
    v379->__shared_weak_owners_ = 0;
    v379[1].__vftable = v380;
  }
  else
  {
    v379 = 0;
  }
  v802 = v379;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v799, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v378 + 24))(v378, &v801, v799);
  if (v800 < 0)
    operator delete(v799[0]);
  v381 = v802;
  if (v802)
  {
    v382 = (unint64_t *)&v802->__shared_owners_;
    do
      v383 = __ldaxr(v382);
    while (__stlxr(v383 - 1, v382));
    if (!v383)
    {
      ((void (*)(std::__shared_weak_count *))v381->__on_zero_shared)(v381);
      std::__shared_weak_count::__release_weak(v381);
    }
  }
  v384 = __p;
  __p = 0;
  if (v384)
    (*(void (**)(void *))(*(_QWORD *)v384 + 8))(v384);
  v385 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)2, 0, &__p);
  v797 = __p;
  if (__p)
  {
    v386 = (std::__shared_weak_count *)operator new();
    v387 = (std::__shared_weak_count_vtbl *)__p;
    v386->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v386->__shared_owners_ = 0;
    v386->__shared_weak_owners_ = 0;
    v386[1].__vftable = v387;
  }
  else
  {
    v386 = 0;
  }
  v798 = v386;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v795, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v385 + 24))(v385, &v797, v795);
  if (v796 < 0)
    operator delete(v795[0]);
  v388 = v798;
  if (v798)
  {
    v389 = (unint64_t *)&v798->__shared_owners_;
    do
      v390 = __ldaxr(v389);
    while (__stlxr(v390 - 1, v389));
    if (!v390)
    {
      ((void (*)(std::__shared_weak_count *))v388->__on_zero_shared)(v388);
      std::__shared_weak_count::__release_weak(v388);
    }
  }
  v391 = __p;
  __p = 0;
  if (v391)
    (*(void (**)(void *))(*(_QWORD *)v391 + 8))(v391);
  v392 = *a3;
  v793 = Scalar;
  if (Scalar)
  {
    v393 = (std::__shared_weak_count *)operator new();
    v394 = (std::__shared_weak_count_vtbl *)Scalar;
    v393->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v393->__shared_owners_ = 0;
    v393->__shared_weak_owners_ = 0;
    v393[1].__vftable = v394;
  }
  else
  {
    v393 = 0;
  }
  v794 = v393;
  Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v392 + 56))(v392, &v793);
  v395 = v794;
  if (v794)
  {
    v396 = (unint64_t *)&v794->__shared_owners_;
    do
      v397 = __ldaxr(v396);
    while (__stlxr(v397 - 1, v396));
    if (!v397)
    {
      ((void (*)(std::__shared_weak_count *))v395->__on_zero_shared)(v395);
      std::__shared_weak_count::__release_weak(v395);
    }
  }
  v398 = Scalar;
  Scalar = 0;
  if (v398)
    (*(void (**)(void *))(*(_QWORD *)v398 + 8))(v398);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&Scalar);
  v399 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v789, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v789, 0, (uint64_t *)&__p);
  v791 = __p;
  if (__p)
  {
    v400 = (std::__shared_weak_count *)operator new();
    v401 = (std::__shared_weak_count_vtbl *)__p;
    v400->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v400->__shared_owners_ = 0;
    v400->__shared_weak_owners_ = 0;
    v400[1].__vftable = v401;
  }
  else
  {
    v400 = 0;
  }
  v792 = v400;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v787, "S");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v399 + 24))(v399, &v791, 0, v787);
  if (v788 < 0)
    operator delete(v787[0]);
  v402 = v792;
  if (v792)
  {
    v403 = (unint64_t *)&v792->__shared_owners_;
    do
      v404 = __ldaxr(v403);
    while (__stlxr(v404 - 1, v403));
    if (!v404)
    {
      ((void (*)(std::__shared_weak_count *))v402->__on_zero_shared)(v402);
      std::__shared_weak_count::__release_weak(v402);
    }
  }
  v405 = __p;
  __p = 0;
  if (v405)
    (*(void (**)(void *))(*(_QWORD *)v405 + 8))(v405);
  if (v790 < 0)
    operator delete(v789[0]);
  v406 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v783, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v783, 0, (uint64_t *)&__p);
  v785 = __p;
  if (__p)
  {
    v407 = (std::__shared_weak_count *)operator new();
    v408 = (std::__shared_weak_count_vtbl *)__p;
    v407->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v407->__shared_owners_ = 0;
    v407->__shared_weak_owners_ = 0;
    v407[1].__vftable = v408;
  }
  else
  {
    v407 = 0;
  }
  v786 = v407;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v781, "B");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v406 + 24))(v406, &v785, 1, v781);
  if (v782 < 0)
    operator delete(v781[0]);
  v409 = v786;
  if (v786)
  {
    v410 = (unint64_t *)&v786->__shared_owners_;
    do
      v411 = __ldaxr(v410);
    while (__stlxr(v411 - 1, v410));
    if (!v411)
    {
      ((void (*)(std::__shared_weak_count *))v409->__on_zero_shared)(v409);
      std::__shared_weak_count::__release_weak(v409);
    }
  }
  v412 = __p;
  __p = 0;
  if (v412)
    (*(void (**)(void *))(*(_QWORD *)v412 + 8))(v412);
  if (v784 < 0)
    operator delete(v783[0]);
  v413 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v777, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v777, 0, (uint64_t *)&__p);
  v779 = __p;
  if (__p)
  {
    v414 = (std::__shared_weak_count *)operator new();
    v415 = (std::__shared_weak_count_vtbl *)__p;
    v414->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v414->__shared_owners_ = 0;
    v414->__shared_weak_owners_ = 0;
    v414[1].__vftable = v415;
  }
  else
  {
    v414 = 0;
  }
  v780 = v414;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v775, "I");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v413 + 24))(v413, &v779, 2, v775);
  if (v776 < 0)
    operator delete(v775[0]);
  v416 = v780;
  if (v780)
  {
    v417 = (unint64_t *)&v780->__shared_owners_;
    do
      v418 = __ldaxr(v417);
    while (__stlxr(v418 - 1, v417));
    if (!v418)
    {
      ((void (*)(std::__shared_weak_count *))v416->__on_zero_shared)(v416);
      std::__shared_weak_count::__release_weak(v416);
    }
  }
  v419 = __p;
  __p = 0;
  if (v419)
    (*(void (**)(void *))(*(_QWORD *)v419 + 8))(v419);
  if (v778 < 0)
    operator delete(v777[0]);
  v420 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v771, "initial_h");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v771, 0, (uint64_t *)&__p);
  v773 = __p;
  if (__p)
  {
    v421 = (std::__shared_weak_count *)operator new();
    v422 = (std::__shared_weak_count_vtbl *)__p;
    v421->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v421->__shared_owners_ = 0;
    v421->__shared_weak_owners_ = 0;
    v421[1].__vftable = v422;
  }
  else
  {
    v421 = 0;
  }
  v774 = v421;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v769, "B");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v420 + 24))(v420, &v773, 0, v769);
  if (v770 < 0)
    operator delete(v769[0]);
  v423 = v774;
  if (v774)
  {
    v424 = (unint64_t *)&v774->__shared_owners_;
    do
      v425 = __ldaxr(v424);
    while (__stlxr(v425 - 1, v424));
    if (!v425)
    {
      ((void (*)(std::__shared_weak_count *))v423->__on_zero_shared)(v423);
      std::__shared_weak_count::__release_weak(v423);
    }
  }
  v426 = __p;
  __p = 0;
  if (v426)
    (*(void (**)(void *))(*(_QWORD *)v426 + 8))(v426);
  if (v772 < 0)
    operator delete(v771[0]);
  v427 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v765, "initial_h");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v765, 0, (uint64_t *)&__p);
  v767 = __p;
  if (__p)
  {
    v428 = (std::__shared_weak_count *)operator new();
    v429 = (std::__shared_weak_count_vtbl *)__p;
    v428->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v428->__shared_owners_ = 0;
    v428->__shared_weak_owners_ = 0;
    v428[1].__vftable = v429;
  }
  else
  {
    v428 = 0;
  }
  v768 = v428;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v763, "H_dir");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v427 + 24))(v427, &v767, 1, v763);
  if (v764 < 0)
    operator delete(v763[0]);
  v430 = v768;
  if (v768)
  {
    v431 = (unint64_t *)&v768->__shared_owners_;
    do
      v432 = __ldaxr(v431);
    while (__stlxr(v432 - 1, v431));
    if (!v432)
    {
      ((void (*)(std::__shared_weak_count *))v430->__on_zero_shared)(v430);
      std::__shared_weak_count::__release_weak(v430);
    }
  }
  v433 = __p;
  __p = 0;
  if (v433)
    (*(void (**)(void *))(*(_QWORD *)v433 + 8))(v433);
  if (v766 < 0)
    operator delete(v765[0]);
  v434 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v759, "initial_c");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v759, 0, (uint64_t *)&__p);
  v761 = __p;
  if (__p)
  {
    v435 = (std::__shared_weak_count *)operator new();
    v436 = (std::__shared_weak_count_vtbl *)__p;
    v435->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v435->__shared_owners_ = 0;
    v435->__shared_weak_owners_ = 0;
    v435[1].__vftable = v436;
  }
  else
  {
    v435 = 0;
  }
  v762 = v435;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v757, "B");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v434 + 24))(v434, &v761, 0, v757);
  if (v758 < 0)
    operator delete(v757[0]);
  v437 = v762;
  if (v762)
  {
    v438 = (unint64_t *)&v762->__shared_owners_;
    do
      v439 = __ldaxr(v438);
    while (__stlxr(v439 - 1, v438));
    if (!v439)
    {
      ((void (*)(std::__shared_weak_count *))v437->__on_zero_shared)(v437);
      std::__shared_weak_count::__release_weak(v437);
    }
  }
  v440 = __p;
  __p = 0;
  if (v440)
    (*(void (**)(void *))(*(_QWORD *)v440 + 8))(v440);
  if (v760 < 0)
    operator delete(v759[0]);
  v441 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v753, "initial_c");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v753, 0, (uint64_t *)&__p);
  v755 = __p;
  if (__p)
  {
    v442 = (std::__shared_weak_count *)operator new();
    v443 = (std::__shared_weak_count_vtbl *)__p;
    v442->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v442->__shared_owners_ = 0;
    v442->__shared_weak_owners_ = 0;
    v442[1].__vftable = v443;
  }
  else
  {
    v442 = 0;
  }
  v756 = v442;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v751, "H_dir");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v441 + 24))(v441, &v755, 1, v751);
  if (v752 < 0)
    operator delete(v751[0]);
  v444 = v756;
  if (v756)
  {
    v445 = (unint64_t *)&v756->__shared_owners_;
    do
      v446 = __ldaxr(v445);
    while (__stlxr(v446 - 1, v445));
    if (!v446)
    {
      ((void (*)(std::__shared_weak_count *))v444->__on_zero_shared)(v444);
      std::__shared_weak_count::__release_weak(v444);
    }
  }
  v447 = __p;
  __p = 0;
  if (v447)
    (*(void (**)(void *))(*(_QWORD *)v447 + 8))(v447);
  if (v754 < 0)
    operator delete(v753[0]);
  v448 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v747, "weight_ih");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v747, 0, (uint64_t *)&__p);
  v749 = __p;
  if (__p)
  {
    v449 = (std::__shared_weak_count *)operator new();
    v450 = (std::__shared_weak_count_vtbl *)__p;
    v449->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v449->__shared_owners_ = 0;
    v449->__shared_weak_owners_ = 0;
    v449[1].__vftable = v450;
  }
  else
  {
    v449 = 0;
  }
  v750 = v449;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v745, "H_dim");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v448 + 24))(v448, &v749, 0, v745);
  if (v746 < 0)
    operator delete(v745[0]);
  v451 = v750;
  if (v750)
  {
    v452 = (unint64_t *)&v750->__shared_owners_;
    do
      v453 = __ldaxr(v452);
    while (__stlxr(v453 - 1, v452));
    if (!v453)
    {
      ((void (*)(std::__shared_weak_count *))v451->__on_zero_shared)(v451);
      std::__shared_weak_count::__release_weak(v451);
    }
  }
  v454 = __p;
  __p = 0;
  if (v454)
    (*(void (**)(void *))(*(_QWORD *)v454 + 8))(v454);
  if (v748 < 0)
    operator delete(v747[0]);
  v455 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v741, "weight_ih");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v741, 0, (uint64_t *)&__p);
  v743 = __p;
  if (__p)
  {
    v456 = (std::__shared_weak_count *)operator new();
    v457 = (std::__shared_weak_count_vtbl *)__p;
    v456->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v456->__shared_owners_ = 0;
    v456->__shared_weak_owners_ = 0;
    v456[1].__vftable = v457;
  }
  else
  {
    v456 = 0;
  }
  v744 = v456;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v739, "I");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v455 + 24))(v455, &v743, 1, v739);
  if (v740 < 0)
    operator delete(v739[0]);
  v458 = v744;
  if (v744)
  {
    v459 = (unint64_t *)&v744->__shared_owners_;
    do
      v460 = __ldaxr(v459);
    while (__stlxr(v460 - 1, v459));
    if (!v460)
    {
      ((void (*)(std::__shared_weak_count *))v458->__on_zero_shared)(v458);
      std::__shared_weak_count::__release_weak(v458);
    }
  }
  v461 = __p;
  __p = 0;
  if (v461)
    (*(void (**)(void *))(*(_QWORD *)v461 + 8))(v461);
  if (v742 < 0)
    operator delete(v741[0]);
  v462 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v735, "weight_hh");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v735, 0, (uint64_t *)&__p);
  v737 = __p;
  if (__p)
  {
    v463 = (std::__shared_weak_count *)operator new();
    v464 = (std::__shared_weak_count_vtbl *)__p;
    v463->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v463->__shared_owners_ = 0;
    v463->__shared_weak_owners_ = 0;
    v463[1].__vftable = v464;
  }
  else
  {
    v463 = 0;
  }
  v738 = v463;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v733, "H_dim");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v462 + 24))(v462, &v737, 0, v733);
  if (v734 < 0)
    operator delete(v733[0]);
  v465 = v738;
  if (v738)
  {
    v466 = (unint64_t *)&v738->__shared_owners_;
    do
      v467 = __ldaxr(v466);
    while (__stlxr(v467 - 1, v466));
    if (!v467)
    {
      ((void (*)(std::__shared_weak_count *))v465->__on_zero_shared)(v465);
      std::__shared_weak_count::__release_weak(v465);
    }
  }
  v468 = __p;
  __p = 0;
  if (v468)
    (*(void (**)(void *))(*(_QWORD *)v468 + 8))(v468);
  if (v736 < 0)
    operator delete(v735[0]);
  v469 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v729, "weight_hh");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v729, 0, (uint64_t *)&__p);
  v731 = __p;
  if (__p)
  {
    v470 = (std::__shared_weak_count *)operator new();
    v471 = (std::__shared_weak_count_vtbl *)__p;
    v470->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v470->__shared_owners_ = 0;
    v470->__shared_weak_owners_ = 0;
    v470[1].__vftable = v471;
  }
  else
  {
    v470 = 0;
  }
  v732 = v470;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v727, "H");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v469 + 24))(v469, &v731, 1, v727);
  if (v728 < 0)
    operator delete(v727[0]);
  v472 = v732;
  if (v732)
  {
    v473 = (unint64_t *)&v732->__shared_owners_;
    do
      v474 = __ldaxr(v473);
    while (__stlxr(v474 - 1, v473));
    if (!v474)
    {
      ((void (*)(std::__shared_weak_count *))v472->__on_zero_shared)(v472);
      std::__shared_weak_count::__release_weak(v472);
    }
  }
  v475 = __p;
  __p = 0;
  if (v475)
    (*(void (**)(void *))(*(_QWORD *)v475 + 8))(v475);
  if (v730 < 0)
    operator delete(v729[0]);
  v476 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v723, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v723, 1, (uint64_t *)&__p);
  v725 = __p;
  if (__p)
  {
    v477 = (std::__shared_weak_count *)operator new();
    v478 = (std::__shared_weak_count_vtbl *)__p;
    v477->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v477->__shared_owners_ = 0;
    v477->__shared_weak_owners_ = 0;
    v477[1].__vftable = v478;
  }
  else
  {
    v477 = 0;
  }
  v726 = v477;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v721, "H_dim");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v476 + 24))(v476, &v725, 0, v721);
  if (v722 < 0)
    operator delete(v721[0]);
  v479 = v726;
  if (v726)
  {
    v480 = (unint64_t *)&v726->__shared_owners_;
    do
      v481 = __ldaxr(v480);
    while (__stlxr(v481 - 1, v480));
    if (!v481)
    {
      ((void (*)(std::__shared_weak_count *))v479->__on_zero_shared)(v479);
      std::__shared_weak_count::__release_weak(v479);
    }
  }
  v482 = __p;
  __p = 0;
  if (v482)
    (*(void (**)(void *))(*(_QWORD *)v482 + 8))(v482);
  if (v724 < 0)
    operator delete(v723[0]);
  v483 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v717, "peephole");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v717, 1, (uint64_t *)&__p);
  v719 = __p;
  if (__p)
  {
    v484 = (std::__shared_weak_count *)operator new();
    v485 = (std::__shared_weak_count_vtbl *)__p;
    v484->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v484->__shared_owners_ = 0;
    v484->__shared_weak_owners_ = 0;
    v484[1].__vftable = v485;
  }
  else
  {
    v484 = 0;
  }
  v720 = v484;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v715, "P_dim");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v483 + 24))(v483, &v719, 0, v715);
  if (v716 < 0)
    operator delete(v715[0]);
  v486 = v720;
  if (v720)
  {
    v487 = (unint64_t *)&v720->__shared_owners_;
    do
      v488 = __ldaxr(v487);
    while (__stlxr(v488 - 1, v487));
    if (!v488)
    {
      ((void (*)(std::__shared_weak_count *))v486->__on_zero_shared)(v486);
      std::__shared_weak_count::__release_weak(v486);
    }
  }
  v489 = __p;
  __p = 0;
  if (v489)
    (*(void (**)(void *))(*(_QWORD *)v489 + 8))(v489);
  if (v718 < 0)
    operator delete(v717[0]);
  v490 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v711, "weight_ih_back");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v711, 1, (uint64_t *)&__p);
  v713 = __p;
  if (__p)
  {
    v491 = (std::__shared_weak_count *)operator new();
    v492 = (std::__shared_weak_count_vtbl *)__p;
    v491->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v491->__shared_owners_ = 0;
    v491->__shared_weak_owners_ = 0;
    v491[1].__vftable = v492;
  }
  else
  {
    v491 = 0;
  }
  v714 = v491;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v709, "H_dim");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v490 + 24))(v490, &v713, 0, v709);
  if (v710 < 0)
    operator delete(v709[0]);
  v493 = v714;
  if (v714)
  {
    v494 = (unint64_t *)&v714->__shared_owners_;
    do
      v495 = __ldaxr(v494);
    while (__stlxr(v495 - 1, v494));
    if (!v495)
    {
      ((void (*)(std::__shared_weak_count *))v493->__on_zero_shared)(v493);
      std::__shared_weak_count::__release_weak(v493);
    }
  }
  v496 = __p;
  __p = 0;
  if (v496)
    (*(void (**)(void *))(*(_QWORD *)v496 + 8))(v496);
  if (v712 < 0)
    operator delete(v711[0]);
  v497 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v705, "weight_ih_back");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v705, 1, (uint64_t *)&__p);
  v707 = __p;
  if (__p)
  {
    v498 = (std::__shared_weak_count *)operator new();
    v499 = (std::__shared_weak_count_vtbl *)__p;
    v498->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v498->__shared_owners_ = 0;
    v498->__shared_weak_owners_ = 0;
    v498[1].__vftable = v499;
  }
  else
  {
    v498 = 0;
  }
  v708 = v498;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v703, "I");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v497 + 24))(v497, &v707, 1, v703);
  if (v704 < 0)
    operator delete(v703[0]);
  v500 = v708;
  if (v708)
  {
    v501 = (unint64_t *)&v708->__shared_owners_;
    do
      v502 = __ldaxr(v501);
    while (__stlxr(v502 - 1, v501));
    if (!v502)
    {
      ((void (*)(std::__shared_weak_count *))v500->__on_zero_shared)(v500);
      std::__shared_weak_count::__release_weak(v500);
    }
  }
  v503 = __p;
  __p = 0;
  if (v503)
    (*(void (**)(void *))(*(_QWORD *)v503 + 8))(v503);
  if (v706 < 0)
    operator delete(v705[0]);
  v504 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v699, "weight_hh_back");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v699, 1, (uint64_t *)&__p);
  v701 = __p;
  if (__p)
  {
    v505 = (std::__shared_weak_count *)operator new();
    v506 = (std::__shared_weak_count_vtbl *)__p;
    v505->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v505->__shared_owners_ = 0;
    v505->__shared_weak_owners_ = 0;
    v505[1].__vftable = v506;
  }
  else
  {
    v505 = 0;
  }
  v702 = v505;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v697, "H_dim");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v504 + 24))(v504, &v701, 0, v697);
  if (v698 < 0)
    operator delete(v697[0]);
  v507 = v702;
  if (v702)
  {
    v508 = (unint64_t *)&v702->__shared_owners_;
    do
      v509 = __ldaxr(v508);
    while (__stlxr(v509 - 1, v508));
    if (!v509)
    {
      ((void (*)(std::__shared_weak_count *))v507->__on_zero_shared)(v507);
      std::__shared_weak_count::__release_weak(v507);
    }
  }
  v510 = __p;
  __p = 0;
  if (v510)
    (*(void (**)(void *))(*(_QWORD *)v510 + 8))(v510);
  if (v700 < 0)
    operator delete(v699[0]);
  v511 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v693, "weight_hh_back");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v693, 1, (uint64_t *)&__p);
  v695 = __p;
  if (__p)
  {
    v512 = (std::__shared_weak_count *)operator new();
    v513 = (std::__shared_weak_count_vtbl *)__p;
    v512->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v512->__shared_owners_ = 0;
    v512->__shared_weak_owners_ = 0;
    v512[1].__vftable = v513;
  }
  else
  {
    v512 = 0;
  }
  v696 = v512;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v691, "H");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v511 + 24))(v511, &v695, 1, v691);
  if (v692 < 0)
    operator delete(v691[0]);
  v514 = v696;
  if (v696)
  {
    v515 = (unint64_t *)&v696->__shared_owners_;
    do
      v516 = __ldaxr(v515);
    while (__stlxr(v516 - 1, v515));
    if (!v516)
    {
      ((void (*)(std::__shared_weak_count *))v514->__on_zero_shared)(v514);
      std::__shared_weak_count::__release_weak(v514);
    }
  }
  v517 = __p;
  __p = 0;
  if (v517)
    (*(void (**)(void *))(*(_QWORD *)v517 + 8))(v517);
  if (v694 < 0)
    operator delete(v693[0]);
  v518 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v687, "bias_back");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v687, 1, (uint64_t *)&__p);
  v689 = __p;
  if (__p)
  {
    v519 = (std::__shared_weak_count *)operator new();
    v520 = (std::__shared_weak_count_vtbl *)__p;
    v519->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v519->__shared_owners_ = 0;
    v519->__shared_weak_owners_ = 0;
    v519[1].__vftable = v520;
  }
  else
  {
    v519 = 0;
  }
  v690 = v519;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v685, "H_dim");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v518 + 24))(v518, &v689, 0, v685);
  if (v686 < 0)
    operator delete(v685[0]);
  v521 = v690;
  if (v690)
  {
    v522 = (unint64_t *)&v690->__shared_owners_;
    do
      v523 = __ldaxr(v522);
    while (__stlxr(v523 - 1, v522));
    if (!v523)
    {
      ((void (*)(std::__shared_weak_count *))v521->__on_zero_shared)(v521);
      std::__shared_weak_count::__release_weak(v521);
    }
  }
  v524 = __p;
  __p = 0;
  if (v524)
    (*(void (**)(void *))(*(_QWORD *)v524 + 8))(v524);
  if (v688 < 0)
    operator delete(v687[0]);
  v525 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v681, "peephole_back");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v681, 1, (uint64_t *)&__p);
  v683 = __p;
  if (__p)
  {
    v526 = (std::__shared_weak_count *)operator new();
    v527 = (std::__shared_weak_count_vtbl *)__p;
    v526->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v526->__shared_owners_ = 0;
    v526->__shared_weak_owners_ = 0;
    v526[1].__vftable = v527;
  }
  else
  {
    v526 = 0;
  }
  v684 = v526;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v679, "P_dim");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v525 + 24))(v525, &v683, 0, v679);
  if (v680 < 0)
    operator delete(v679[0]);
  v528 = v684;
  if (v684)
  {
    v529 = (unint64_t *)&v684->__shared_owners_;
    do
      v530 = __ldaxr(v529);
    while (__stlxr(v530 - 1, v529));
    if (!v530)
    {
      ((void (*)(std::__shared_weak_count *))v528->__on_zero_shared)(v528);
      std::__shared_weak_count::__release_weak(v528);
    }
  }
  v531 = __p;
  __p = 0;
  if (v531)
    (*(void (**)(void *))(*(_QWORD *)v531 + 8))(v531);
  if (v682 < 0)
    operator delete(v681[0]);
  v532 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v677 = __p;
  if (__p)
  {
    v533 = (std::__shared_weak_count *)operator new();
    v534 = (std::__shared_weak_count_vtbl *)__p;
    v533->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v533->__shared_owners_ = 0;
    v533->__shared_weak_owners_ = 0;
    v533[1].__vftable = v534;
  }
  else
  {
    v533 = 0;
  }
  v678 = v533;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v675, "B");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v532 + 24))(v532, &v677, 1, v675);
  if (v676 < 0)
    operator delete(v675[0]);
  v535 = v678;
  if (v678)
  {
    v536 = (unint64_t *)&v678->__shared_owners_;
    do
      v537 = __ldaxr(v536);
    while (__stlxr(v537 - 1, v536));
    if (!v537)
    {
      ((void (*)(std::__shared_weak_count *))v535->__on_zero_shared)(v535);
      std::__shared_weak_count::__release_weak(v535);
    }
  }
  v538 = __p;
  __p = 0;
  if (v538)
    (*(void (**)(void *))(*(_QWORD *)v538 + 8))(v538);
  v539 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v673 = __p;
  if (__p)
  {
    v540 = (std::__shared_weak_count *)operator new();
    v541 = (std::__shared_weak_count_vtbl *)__p;
    v540->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v540->__shared_owners_ = 0;
    v540->__shared_weak_owners_ = 0;
    v540[1].__vftable = v541;
  }
  else
  {
    v540 = 0;
  }
  v674 = v540;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v671, "H_dir");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v539 + 24))(v539, &v673, 2, v671);
  if (v672 < 0)
    operator delete(v671[0]);
  v542 = v674;
  if (v674)
  {
    v543 = (unint64_t *)&v674->__shared_owners_;
    do
      v544 = __ldaxr(v543);
    while (__stlxr(v544 - 1, v543));
    if (!v544)
    {
      ((void (*)(std::__shared_weak_count *))v542->__on_zero_shared)(v542);
      std::__shared_weak_count::__release_weak(v542);
    }
  }
  v545 = __p;
  __p = 0;
  if (v545)
    (*(void (**)(void *))(*(_QWORD *)v545 + 8))(v545);
  v546 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 0, &__p);
  v669 = __p;
  if (__p)
  {
    v547 = (std::__shared_weak_count *)operator new();
    v548 = (std::__shared_weak_count_vtbl *)__p;
    v547->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v547->__shared_owners_ = 0;
    v547->__shared_weak_owners_ = 0;
    v547[1].__vftable = v548;
  }
  else
  {
    v547 = 0;
  }
  v670 = v547;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v667, "B");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v546 + 24))(v546, &v669, 0, v667);
  if (v668 < 0)
    operator delete(v667[0]);
  v549 = v670;
  if (v670)
  {
    v550 = (unint64_t *)&v670->__shared_owners_;
    do
      v551 = __ldaxr(v550);
    while (__stlxr(v551 - 1, v550));
    if (!v551)
    {
      ((void (*)(std::__shared_weak_count *))v549->__on_zero_shared)(v549);
      std::__shared_weak_count::__release_weak(v549);
    }
  }
  v552 = __p;
  __p = 0;
  if (v552)
    (*(void (**)(void *))(*(_QWORD *)v552 + 8))(v552);
  v553 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 0, &__p);
  v665 = __p;
  if (__p)
  {
    v554 = (std::__shared_weak_count *)operator new();
    v555 = (std::__shared_weak_count_vtbl *)__p;
    v554->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v554->__shared_owners_ = 0;
    v554->__shared_weak_owners_ = 0;
    v554[1].__vftable = v555;
  }
  else
  {
    v554 = 0;
  }
  v666 = v554;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v663, "H_dir");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v553 + 24))(v553, &v665, 1, v663);
  if (v664 < 0)
    operator delete(v663[0]);
  v556 = v666;
  if (v666)
  {
    v557 = (unint64_t *)&v666->__shared_owners_;
    do
      v558 = __ldaxr(v557);
    while (__stlxr(v558 - 1, v557));
    if (!v558)
    {
      ((void (*)(std::__shared_weak_count *))v556->__on_zero_shared)(v556);
      std::__shared_weak_count::__release_weak(v556);
    }
  }
  v559 = __p;
  __p = 0;
  if (v559)
    (*(void (**)(void *))(*(_QWORD *)v559 + 8))(v559);
  v560 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)2, 0, &__p);
  v661 = __p;
  if (__p)
  {
    v561 = (std::__shared_weak_count *)operator new();
    v562 = (std::__shared_weak_count_vtbl *)__p;
    v561->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v561->__shared_owners_ = 0;
    v561->__shared_weak_owners_ = 0;
    v561[1].__vftable = v562;
  }
  else
  {
    v561 = 0;
  }
  v662 = v561;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v659, "B");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v560 + 24))(v560, &v661, 0, v659);
  if (v660 < 0)
    operator delete(v659[0]);
  v563 = v662;
  if (v662)
  {
    v564 = (unint64_t *)&v662->__shared_owners_;
    do
      v565 = __ldaxr(v564);
    while (__stlxr(v565 - 1, v564));
    if (!v565)
    {
      ((void (*)(std::__shared_weak_count *))v563->__on_zero_shared)(v563);
      std::__shared_weak_count::__release_weak(v563);
    }
  }
  v566 = __p;
  __p = 0;
  if (v566)
    (*(void (**)(void *))(*(_QWORD *)v566 + 8))(v566);
  v567 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)2, 0, &__p);
  v657 = __p;
  if (__p)
  {
    v568 = (std::__shared_weak_count *)operator new();
    v569 = (std::__shared_weak_count_vtbl *)__p;
    v568->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v568->__shared_owners_ = 0;
    v568->__shared_weak_owners_ = 0;
    v568[1].__vftable = v569;
  }
  else
  {
    v568 = 0;
  }
  v658 = v568;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v655, "H_dir");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v567 + 24))(v567, &v657, 1, v655);
  if (v656 < 0)
    operator delete(v655[0]);
  v570 = v658;
  if (v658)
  {
    v571 = (unint64_t *)&v658->__shared_owners_;
    do
      v572 = __ldaxr(v571);
    while (__stlxr(v572 - 1, v571));
    if (!v572)
    {
      ((void (*)(std::__shared_weak_count *))v570->__on_zero_shared)(v570);
      std::__shared_weak_count::__release_weak(v570);
    }
  }
  v573 = __p;
  __p = 0;
  if (v573)
    (*(void (**)(void *))(*(_QWORD *)v573 + 8))(v573);
  v574 = *a3;
  v653 = Scalar;
  if (Scalar)
  {
    v575 = (std::__shared_weak_count *)operator new();
    v576 = (std::__shared_weak_count_vtbl *)Scalar;
    v575->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v575->__shared_owners_ = 0;
    v575->__shared_weak_owners_ = 0;
    v575[1].__vftable = v576;
  }
  else
  {
    v575 = 0;
  }
  v654 = v575;
  Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v574 + 56))(v574, &v653);
  v577 = v654;
  if (v654)
  {
    v578 = (unint64_t *)&v654->__shared_owners_;
    do
      v579 = __ldaxr(v578);
    while (__stlxr(v579 - 1, v578));
    if (!v579)
    {
      ((void (*)(std::__shared_weak_count *))v577->__on_zero_shared)(v577);
      std::__shared_weak_count::__release_weak(v577);
    }
  }
  v580 = Scalar;
  Scalar = 0;
  if (v580)
    (*(void (**)(void *))(*(_QWORD *)v580 + 8))(v580);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v890);
  v581 = v890;
  std::string::basic_string[abi:ne180100]<0>(v649, "direction");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v649, 0, &v932);
  v651 = v932;
  if (v932)
  {
    v582 = (std::__shared_weak_count *)operator new();
    v583 = v932;
    v582->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v582->__shared_owners_ = 0;
    v582->__shared_weak_owners_ = 0;
    v582[1].__vftable = (std::__shared_weak_count_vtbl *)v583;
  }
  else
  {
    v582 = 0;
  }
  v652 = v582;
  v932 = 0;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "bidirectional");
  std::string::basic_string[abi:ne180100]<0>(&v914, "forward");
  std::string::basic_string[abi:ne180100]<0>(v916, "reverse");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&Scalar, 3);
  (*(void (**)(uint64_t, uint64_t *, void **, _QWORD))(*(_QWORD *)v581 + 24))(v581, &v651, &__p, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -9; i -= 3)
  {
    if (SHIBYTE(v916[i + 2]) < 0)
      operator delete((void *)v916[i]);
  }
  v585 = v652;
  if (v652)
  {
    v586 = (unint64_t *)&v652->__shared_owners_;
    do
      v587 = __ldaxr(v586);
    while (__stlxr(v587 - 1, v586));
    if (!v587)
    {
      ((void (*)(std::__shared_weak_count *))v585->__on_zero_shared)(v585);
      std::__shared_weak_count::__release_weak(v585);
    }
  }
  v588 = v932;
  v932 = 0;
  if (v588)
    (*(void (**)(uint64_t))(*(_QWORD *)v588 + 8))(v588);
  if (v650 < 0)
    operator delete(v649[0]);
  v589 = v890;
  std::string::basic_string[abi:ne180100]<0>(v645, "recurrent_activation");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v645, 0, &v932);
  v647 = v932;
  if (v932)
  {
    v590 = (std::__shared_weak_count *)operator new();
    v591 = v932;
    v590->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v590->__shared_owners_ = 0;
    v590->__shared_weak_owners_ = 0;
    v590[1].__vftable = (std::__shared_weak_count_vtbl *)v591;
  }
  else
  {
    v590 = 0;
  }
  v648 = v590;
  v932 = 0;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "hard_sigmoid");
  std::string::basic_string[abi:ne180100]<0>(&v914, "linear");
  std::string::basic_string[abi:ne180100]<0>(v916, "relu");
  std::string::basic_string[abi:ne180100]<0>(v917, "scaled_tanh");
  std::string::basic_string[abi:ne180100]<0>(v918, "sigmoid");
  std::string::basic_string[abi:ne180100]<0>(v919, "tanh");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&Scalar, 6);
  (*(void (**)(uint64_t, uint64_t *, void **, _QWORD))(*(_QWORD *)v589 + 24))(v589, &v647, &__p, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (j = 0; j != -18; j -= 3)
  {
    if (SHIBYTE(v919[j + 2]) < 0)
      operator delete(v919[j]);
  }
  v593 = v648;
  if (v648)
  {
    v594 = (unint64_t *)&v648->__shared_owners_;
    do
      v595 = __ldaxr(v594);
    while (__stlxr(v595 - 1, v594));
    if (!v595)
    {
      ((void (*)(std::__shared_weak_count *))v593->__on_zero_shared)(v593);
      std::__shared_weak_count::__release_weak(v593);
    }
  }
  v596 = v932;
  v932 = 0;
  if (v596)
    (*(void (**)(uint64_t))(*(_QWORD *)v596 + 8))(v596);
  if (v646 < 0)
    operator delete(v645[0]);
  v597 = v890;
  std::string::basic_string[abi:ne180100]<0>(v641, "cell_activation");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v641, 0, &v932);
  v643 = v932;
  if (v932)
  {
    v598 = (std::__shared_weak_count *)operator new();
    v599 = v932;
    v598->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v598->__shared_owners_ = 0;
    v598->__shared_weak_owners_ = 0;
    v598[1].__vftable = (std::__shared_weak_count_vtbl *)v599;
  }
  else
  {
    v598 = 0;
  }
  v644 = v598;
  v932 = 0;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "hard_sigmoid");
  std::string::basic_string[abi:ne180100]<0>(&v914, "linear");
  std::string::basic_string[abi:ne180100]<0>(v916, "relu");
  std::string::basic_string[abi:ne180100]<0>(v917, "scaled_tanh");
  std::string::basic_string[abi:ne180100]<0>(v918, "sigmoid");
  std::string::basic_string[abi:ne180100]<0>(v919, "tanh");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&Scalar, 6);
  (*(void (**)(uint64_t, uint64_t *, void **, _QWORD))(*(_QWORD *)v597 + 24))(v597, &v643, &__p, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (k = 0; k != -18; k -= 3)
  {
    if (SHIBYTE(v919[k + 2]) < 0)
      operator delete(v919[k]);
  }
  v601 = v644;
  if (v644)
  {
    v602 = (unint64_t *)&v644->__shared_owners_;
    do
      v603 = __ldaxr(v602);
    while (__stlxr(v603 - 1, v602));
    if (!v603)
    {
      ((void (*)(std::__shared_weak_count *))v601->__on_zero_shared)(v601);
      std::__shared_weak_count::__release_weak(v601);
    }
  }
  v604 = v932;
  v932 = 0;
  if (v604)
    (*(void (**)(uint64_t))(*(_QWORD *)v604 + 8))(v604);
  if (v642 < 0)
    operator delete(v641[0]);
  v605 = v890;
  std::string::basic_string[abi:ne180100]<0>(v637, "activation");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v637, 0, &v932);
  v639 = v932;
  if (v932)
  {
    v606 = (std::__shared_weak_count *)operator new();
    v607 = v932;
    v606->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v606->__shared_owners_ = 0;
    v606->__shared_weak_owners_ = 0;
    v606[1].__vftable = (std::__shared_weak_count_vtbl *)v607;
  }
  else
  {
    v606 = 0;
  }
  v640 = v606;
  v932 = 0;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "hard_sigmoid");
  std::string::basic_string[abi:ne180100]<0>(&v914, "linear");
  std::string::basic_string[abi:ne180100]<0>(v916, "relu");
  std::string::basic_string[abi:ne180100]<0>(v917, "scaled_tanh");
  std::string::basic_string[abi:ne180100]<0>(v918, "sigmoid");
  std::string::basic_string[abi:ne180100]<0>(v919, "tanh");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&Scalar, 6);
  (*(void (**)(uint64_t, uint64_t *, void **, _QWORD))(*(_QWORD *)v605 + 24))(v605, &v639, &__p, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (m = 0; m != -18; m -= 3)
  {
    if (SHIBYTE(v919[m + 2]) < 0)
      operator delete(v919[m]);
  }
  v609 = v640;
  if (v640)
  {
    v610 = (unint64_t *)&v640->__shared_owners_;
    do
      v611 = __ldaxr(v610);
    while (__stlxr(v611 - 1, v610));
    if (!v611)
    {
      ((void (*)(std::__shared_weak_count *))v609->__on_zero_shared)(v609);
      std::__shared_weak_count::__release_weak(v609);
    }
  }
  v612 = v932;
  v932 = 0;
  if (v612)
    (*(void (**)(uint64_t))(*(_QWORD *)v612 + 8))(v612);
  if (v638 < 0)
    operator delete(v637[0]);
  v613 = v890;
  std::string::basic_string[abi:ne180100]<0>(v633, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v633, 1, &v932);
  v635 = v932;
  if (v932)
  {
    v614 = (std::__shared_weak_count *)operator new();
    v615 = v932;
    v614->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v614->__shared_owners_ = 0;
    v614->__shared_weak_owners_ = 0;
    v614[1].__vftable = (std::__shared_weak_count_vtbl *)v615;
  }
  else
  {
    v614 = 0;
  }
  v636 = v614;
  v932 = 0;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "fp16");
  std::string::basic_string[abi:ne180100]<0>(&v914, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v916, "int32");
  std::string::basic_string[abi:ne180100]<0>(v917, "int8");
  std::string::basic_string[abi:ne180100]<0>(v918, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&Scalar, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v613 + 24))(v613, &v635, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (n = 0; n != -15; n -= 3)
  {
    if (SHIBYTE(v918[n + 2]) < 0)
      operator delete((void *)v918[n]);
  }
  v617 = v636;
  if (v636)
  {
    v618 = (unint64_t *)&v636->__shared_owners_;
    do
      v619 = __ldaxr(v618);
    while (__stlxr(v619 - 1, v618));
    if (!v619)
    {
      ((void (*)(std::__shared_weak_count *))v617->__on_zero_shared)(v617);
      std::__shared_weak_count::__release_weak(v617);
    }
  }
  v620 = v932;
  v932 = 0;
  if (v620)
    (*(void (**)(uint64_t))(*(_QWORD *)v620 + 8))(v620);
  if (v634 < 0)
    operator delete(v633[0]);
  v621 = *a3;
  v631 = v890;
  if (v890)
  {
    v622 = (std::__shared_weak_count *)operator new();
    v623 = v890;
    v622->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v622->__shared_owners_ = 0;
    v622->__shared_weak_owners_ = 0;
    v622[1].__vftable = (std::__shared_weak_count_vtbl *)v623;
  }
  else
  {
    v622 = 0;
  }
  v632 = v622;
  v890 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v621 + 56))(v621, &v631);
  v624 = v632;
  if (v632)
  {
    v625 = (unint64_t *)&v632->__shared_owners_;
    do
      v626 = __ldaxr(v625);
    while (__stlxr(v626 - 1, v625));
    if (!v626)
    {
      ((void (*)(std::__shared_weak_count *))v624->__on_zero_shared)(v624);
      std::__shared_weak_count::__release_weak(v624);
    }
  }
  v627 = v890;
  v890 = 0;
  if (v627)
    (*(void (**)(uint64_t))(*(_QWORD *)v627 + 8))(v627);
  if (v929)
  {
    v628 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v929);
    MEMORY[0x1E0C023A0](v628, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v892, 0);
  result = (uint64_t)v910;
  if (v910)
  {
    v630 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v910);
    return MEMORY[0x1E0C023A0](v630, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0918784(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;

  v4 = STACK[0xAB8];
  STACK[0xAB8] = 0;
  if (v4)
    (*(void (**)(unint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 128), 0);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0xAC8], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0xBE0], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::RNN::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unsigned __int8 *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unsigned __int8 *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  _QWORD *v58;
  unsigned __int8 *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  _QWORD *v64;
  unsigned __int8 *v65;
  void *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  _QWORD *v70;
  unsigned __int8 *v71;
  void *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  _QWORD *v76;
  unsigned __int8 *v77;
  void *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  char **v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  std::__shared_weak_count_vtbl *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t *v104;
  char *v105;
  char *v106;
  char *v107;
  __int128 v108;
  char *v109;
  char *v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  char **v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  std::__shared_weak_count_vtbl *v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  char *v125;
  char *v126;
  char *v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t *v134;
  char *v135;
  char *v136;
  char *v137;
  __int128 v138;
  char *v139;
  char *v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  _QWORD *v147;
  char **v148;
  _QWORD *v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  _OWORD *v159;
  unsigned __int8 *v160;
  void *v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  uint64_t v165;
  std::__shared_weak_count_vtbl *v166;
  std::__shared_weak_count *v167;
  std::__shared_weak_count *v168;
  unint64_t *p_shared_owners;
  unint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  void *v174;
  std::__shared_weak_count *v175;
  std::__shared_weak_count_vtbl *v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  void *v180;
  void *v181;
  std::__shared_weak_count *v182;
  std::__shared_weak_count_vtbl *v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  void *v187;
  void *v188;
  std::__shared_weak_count *v189;
  std::__shared_weak_count_vtbl *v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  void *v194;
  void *v195;
  std::__shared_weak_count *v196;
  std::__shared_weak_count_vtbl *v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  void *v201;
  void *v202;
  std::__shared_weak_count *v203;
  std::__shared_weak_count_vtbl *v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  void *v208;
  void *v209;
  std::__shared_weak_count *v210;
  std::__shared_weak_count_vtbl *v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  void *v215;
  void *v216;
  std::__shared_weak_count *v217;
  std::__shared_weak_count_vtbl *v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  void *v222;
  uint64_t v223;
  std::__shared_weak_count *v224;
  std::__shared_weak_count_vtbl *v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  void *v229;
  void *v230;
  std::__shared_weak_count *v231;
  std::__shared_weak_count_vtbl *v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  void *v236;
  void *v237;
  std::__shared_weak_count *v238;
  std::__shared_weak_count_vtbl *v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  void *v243;
  void *v244;
  std::__shared_weak_count *v245;
  std::__shared_weak_count_vtbl *v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  void *v250;
  void *v251;
  std::__shared_weak_count *v252;
  std::__shared_weak_count_vtbl *v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  void *v257;
  void *v258;
  std::__shared_weak_count *v259;
  std::__shared_weak_count_vtbl *v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  void *v264;
  void *v265;
  std::__shared_weak_count *v266;
  std::__shared_weak_count_vtbl *v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  void *v271;
  void *v272;
  std::__shared_weak_count *v273;
  std::__shared_weak_count_vtbl *v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  unint64_t v277;
  void *v278;
  void *v279;
  std::__shared_weak_count *v280;
  std::__shared_weak_count_vtbl *v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  void *v285;
  void *v286;
  std::__shared_weak_count *v287;
  std::__shared_weak_count_vtbl *v288;
  std::__shared_weak_count *v289;
  unint64_t *v290;
  unint64_t v291;
  void *v292;
  void *v293;
  std::__shared_weak_count *v294;
  std::__shared_weak_count_vtbl *v295;
  std::__shared_weak_count *v296;
  unint64_t *v297;
  unint64_t v298;
  void *v299;
  void *v300;
  std::__shared_weak_count *v301;
  std::__shared_weak_count_vtbl *v302;
  std::__shared_weak_count *v303;
  unint64_t *v304;
  unint64_t v305;
  void *v306;
  void *v307;
  std::__shared_weak_count *v308;
  std::__shared_weak_count_vtbl *v309;
  std::__shared_weak_count *v310;
  unint64_t *v311;
  unint64_t v312;
  void *v313;
  void *v314;
  std::__shared_weak_count *v315;
  std::__shared_weak_count_vtbl *v316;
  std::__shared_weak_count *v317;
  unint64_t *v318;
  unint64_t v319;
  void *v320;
  uint64_t v321;
  std::__shared_weak_count *v322;
  std::__shared_weak_count_vtbl *v323;
  std::__shared_weak_count *v324;
  unint64_t *v325;
  unint64_t v326;
  void *v327;
  uint64_t v328;
  std::__shared_weak_count *v329;
  uint64_t v330;
  uint64_t i;
  std::__shared_weak_count *v332;
  unint64_t *v333;
  unint64_t v334;
  uint64_t v335;
  uint64_t v336;
  std::__shared_weak_count *v337;
  uint64_t v338;
  uint64_t j;
  std::__shared_weak_count *v340;
  unint64_t *v341;
  unint64_t v342;
  uint64_t v343;
  uint64_t v344;
  std::__shared_weak_count *v345;
  uint64_t v346;
  uint64_t k;
  std::__shared_weak_count *v348;
  unint64_t *v349;
  unint64_t v350;
  uint64_t v351;
  uint64_t v352;
  std::__shared_weak_count *v353;
  uint64_t v354;
  std::__shared_weak_count *v355;
  unint64_t *v356;
  unint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t result;
  uint64_t v361;
  uint64_t v362;
  std::__shared_weak_count *v363;
  void *v364[2];
  char v365;
  uint64_t v366;
  std::__shared_weak_count *v367;
  void *v368[2];
  char v369;
  uint64_t v370;
  std::__shared_weak_count *v371;
  void *v372[2];
  char v373;
  uint64_t v374;
  std::__shared_weak_count *v375;
  void *v376;
  std::__shared_weak_count *v377;
  void *v378[2];
  char v379;
  void *v380;
  std::__shared_weak_count *v381;
  void *v382[2];
  char v383;
  void *v384;
  std::__shared_weak_count *v385;
  void *v386[2];
  char v387;
  void *v388;
  std::__shared_weak_count *v389;
  void *v390[2];
  char v391;
  void *v392;
  std::__shared_weak_count *v393;
  void *v394[2];
  char v395;
  void *v396[2];
  char v397;
  void *v398;
  std::__shared_weak_count *v399;
  void *v400[2];
  char v401;
  void *v402[2];
  char v403;
  void *v404;
  std::__shared_weak_count *v405;
  void *v406[2];
  char v407;
  void *v408[2];
  char v409;
  void *v410;
  std::__shared_weak_count *v411;
  void *v412[2];
  char v413;
  void *v414[2];
  char v415;
  void *v416;
  std::__shared_weak_count *v417;
  void *v418[2];
  char v419;
  void *v420[2];
  char v421;
  void *v422;
  std::__shared_weak_count *v423;
  void *v424[2];
  char v425;
  void *v426[2];
  char v427;
  void *v428;
  std::__shared_weak_count *v429;
  void *v430[2];
  char v431;
  void *v432[2];
  char v433;
  void *v434;
  std::__shared_weak_count *v435;
  void *v436[2];
  char v437;
  void *v438[2];
  char v439;
  void *v440;
  std::__shared_weak_count *v441;
  void *v442[2];
  char v443;
  void *v444[2];
  char v445;
  void *v446;
  std::__shared_weak_count *v447;
  void *v448;
  std::__shared_weak_count *v449;
  void *v450[2];
  char v451;
  void *v452;
  std::__shared_weak_count *v453;
  void *v454[2];
  char v455;
  void *v456;
  std::__shared_weak_count *v457;
  void *v458[2];
  char v459;
  void *v460[2];
  char v461;
  void *v462;
  std::__shared_weak_count *v463;
  void *v464[2];
  char v465;
  void *v466[2];
  char v467;
  void *v468;
  std::__shared_weak_count *v469;
  void *v470[2];
  char v471;
  void *v472[2];
  char v473;
  void *v474;
  std::__shared_weak_count *v475;
  void *v476[2];
  char v477;
  void *v478[2];
  char v479;
  void *v480;
  std::__shared_weak_count *v481;
  void *v482[2];
  char v483;
  void *v484[2];
  char v485;
  void *v486;
  std::__shared_weak_count *v487;
  std::__shared_weak_count_vtbl *v488;
  std::__shared_weak_count *v489;
  __n128 v490;
  __int128 v491;
  __int128 v492;
  void *v493[2];
  uint64_t v494;
  __n128 v495;
  __n128 v496;
  uint64_t v497;
  uint64_t v498;
  _QWORD *v499;
  char **v500;
  __n128 v501;
  __n128 v502;
  __n128 v503;
  __n128 v504;
  __n128 v505;
  __n128 v506;
  __n128 v507;
  __n128 v508;
  _QWORD *v509;
  void *v510;
  void *v511;
  char *v512;
  char *v513;
  char **v514;
  char v515;
  _QWORD v516[3];
  _QWORD v517[3];
  _QWORD v518[3];
  void *v519[3];
  void *__p;
  void *v521;
  _QWORD *v522;
  _QWORD v523[3];
  _QWORD *v524;
  _BYTE v525[24];
  _BYTE *v526;
  _QWORD v527[3];
  _QWORD *v528;
  std::__shared_weak_count_vtbl *v529;
  uint64_t p_get_deleter;
  _QWORD *p_on_zero_shared;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;

  v534 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v509 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = (char *)operator new(0x18uLL);
  v512 = v10 + 24;
  *(_QWORD *)v10 = v7;
  *((_QWORD *)v10 + 1) = v8;
  *((_QWORD *)v10 + 2) = v9;
  v510 = v10;
  v511 = v10 + 24;
  v529 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v510);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = operator new(0x18uLL);
  v522 = v14 + 3;
  *v14 = v11;
  v14[1] = v12;
  v14[2] = v13;
  __p = v14;
  v521 = v14 + 3;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v529, 2, &v508);
  MIL::IRParameter::Make(&v508, &v498);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v498);
  v15 = v498;
  v498 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v508.n128_u64[1];
  if (v508.n128_u64[1])
  {
    v17 = (unint64_t *)(v508.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v521 = __p;
    operator delete(__p);
  }
  if (v510)
  {
    v511 = v510;
    operator delete(v510);
  }
  v19 = v509;
  v20 = MIL::IRUnknownDimension::Make(a1, 0);
  v21 = MIL::IRUnknownDimension::Make(a1, 0);
  v22 = (char *)operator new(0x10uLL);
  v512 = v22 + 16;
  *(_QWORD *)v22 = v20;
  *((_QWORD *)v22 + 1) = v21;
  v510 = v22;
  v511 = v22 + 16;
  v529 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v510);
  v23 = MIL::IRUnknownDimension::Make(a1, 0);
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = operator new(0x10uLL);
  v522 = v25 + 2;
  *v25 = v23;
  v25[1] = v24;
  __p = v25;
  v521 = v25 + 2;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v529, 2, &v507);
  MIL::IRParameter::Make(&v507, &v498);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v19, "initial_h", &v498);
  v26 = v498;
  v498 = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = (std::__shared_weak_count *)v507.n128_u64[1];
  if (v507.n128_u64[1])
  {
    v28 = (unint64_t *)(v507.n128_u64[1] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (__p)
  {
    v521 = __p;
    operator delete(__p);
  }
  if (v510)
  {
    v511 = v510;
    operator delete(v510);
  }
  v30 = v509;
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = MIL::IRUnknownDimension::Make(a1, 0);
  v33 = (char *)operator new(0x10uLL);
  v512 = v33 + 16;
  *(_QWORD *)v33 = v31;
  *((_QWORD *)v33 + 1) = v32;
  v510 = v33;
  v511 = v33 + 16;
  v529 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v510);
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = MIL::IRUnknownDimension::Make(a1, 0);
  v36 = operator new(0x10uLL);
  v522 = v36 + 2;
  *v36 = v34;
  v36[1] = v35;
  __p = v36;
  v521 = v36 + 2;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v529, 2, &v506);
  MIL::IRParameter::Make(&v506, &v498);
  v37 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v30, "weight_ih", &v498);
  v38 = v498;
  v498 = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  v39 = (std::__shared_weak_count *)v506.n128_u64[1];
  if (v506.n128_u64[1])
  {
    v40 = (unint64_t *)(v506.n128_u64[1] + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  if (__p)
  {
    v521 = __p;
    operator delete(__p);
  }
  if (v510)
  {
    v511 = v510;
    operator delete(v510);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v37 + 5) + 32))(*((_QWORD *)v37 + 5), 1);
  v42 = v509;
  v43 = MIL::IRUnknownDimension::Make(a1, 0);
  v44 = MIL::IRUnknownDimension::Make(a1, 0);
  v45 = (char *)operator new(0x10uLL);
  v512 = v45 + 16;
  *(_QWORD *)v45 = v43;
  *((_QWORD *)v45 + 1) = v44;
  v510 = v45;
  v511 = v45 + 16;
  v529 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v510);
  v46 = MIL::IRUnknownDimension::Make(a1, 0);
  v47 = MIL::IRUnknownDimension::Make(a1, 0);
  v48 = operator new(0x10uLL);
  v522 = v48 + 2;
  *v48 = v46;
  v48[1] = v47;
  __p = v48;
  v521 = v48 + 2;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v529, 2, &v505);
  MIL::IRParameter::Make(&v505, &v498);
  v49 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v42, "weight_hh", &v498);
  v50 = v498;
  v498 = 0;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  v51 = (std::__shared_weak_count *)v505.n128_u64[1];
  if (v505.n128_u64[1])
  {
    v52 = (unint64_t *)(v505.n128_u64[1] + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  if (__p)
  {
    v521 = __p;
    operator delete(__p);
  }
  if (v510)
  {
    v511 = v510;
    operator delete(v510);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v49 + 5) + 32))(*((_QWORD *)v49 + 5), 1);
  v54 = v509;
  v55 = MIL::IRUnknownDimension::Make(a1, 0);
  v56 = (char *)operator new(8uLL);
  v510 = v56;
  *(_QWORD *)v56 = v55;
  v512 = v56 + 8;
  v511 = v56 + 8;
  v529 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v510);
  v57 = MIL::IRUnknownDimension::Make(a1, 0);
  v58 = operator new(8uLL);
  __p = v58;
  *v58 = v57;
  v522 = v58 + 1;
  v521 = v58 + 1;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v529, 2, &v504);
  MIL::IRParameter::Make(&v504, &v498);
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v54, "bias", &v498);
  v60 = v498;
  v498 = 0;
  if (v60)
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v504.n128_u64[1];
  if (v504.n128_u64[1])
  {
    v62 = (unint64_t *)(v504.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (__p)
  {
    v521 = __p;
    operator delete(__p);
  }
  if (v510)
  {
    v511 = v510;
    operator delete(v510);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 32))(*((_QWORD *)v59 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 48))(*((_QWORD *)v59 + 5), 1);
  v64 = v509;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v503);
  MIL::IRParameter::Make(&v503, (uint64_t *)&v510);
  v65 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v64, "direction", (uint64_t *)&v510);
  v66 = v510;
  v510 = 0;
  if (v66)
    (*(void (**)(void *))(*(_QWORD *)v66 + 8))(v66);
  v67 = (std::__shared_weak_count *)v503.n128_u64[1];
  if (v503.n128_u64[1])
  {
    v68 = (unint64_t *)(v503.n128_u64[1] + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v65 + 5) + 32))(*((_QWORD *)v65 + 5), 1);
  v70 = v509;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v502);
  MIL::IRParameter::Make(&v502, (uint64_t *)&v510);
  v71 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[16],std::unique_ptr<MIL::IRParameter>>(v70, "output_sequence", (uint64_t *)&v510);
  v72 = v510;
  v510 = 0;
  if (v72)
    (*(void (**)(void *))(*(_QWORD *)v72 + 8))(v72);
  v73 = (std::__shared_weak_count *)v502.n128_u64[1];
  if (v502.n128_u64[1])
  {
    v74 = (unint64_t *)(v502.n128_u64[1] + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v71 + 5) + 32))(*((_QWORD *)v71 + 5), 1);
  v76 = v509;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v501);
  MIL::IRParameter::Make(&v501, (uint64_t *)&v510);
  v77 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v76, "activation", (uint64_t *)&v510);
  v78 = v510;
  v510 = 0;
  if (v78)
    (*(void (**)(void *))(*(_QWORD *)v78 + 8))(v78);
  v79 = (std::__shared_weak_count *)v501.n128_u64[1];
  if (v501.n128_u64[1])
  {
    v80 = (unint64_t *)(v501.n128_u64[1] + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v77 + 5) + 32))(*((_QWORD *)v77 + 5), 1);
  v500 = 0;
  v82 = operator new();
  *(_QWORD *)v82 = 0;
  *(_QWORD *)(v82 + 8) = 0;
  *(_QWORD *)(v82 + 16) = 0;
  v510 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v500, (void **)v82);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v510, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v500, 2uLL);
  v83 = v500;
  v84 = MIL::IRUnknownDimension::Make(a1, 0);
  v85 = MIL::IRUnknownDimension::Make(a1, 0);
  v86 = MIL::IRUnknownDimension::Make(a1, 0);
  v87 = operator new(0x18uLL);
  v522 = v87 + 3;
  *v87 = v84;
  v87[1] = v85;
  v87[2] = v86;
  __p = v87;
  v521 = v87 + 3;
  v532 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v88 = MIL::IRUnknownDimension::Make(a1, 0);
  v89 = MIL::IRUnknownDimension::Make(a1, 0);
  v90 = MIL::IRUnknownDimension::Make(a1, 0);
  v91 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (uint64_t)&v91->__get_deleter;
  p_on_zero_shared = &v91->__get_deleter;
  v91->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v88;
  v91->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v89;
  v91->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v90;
  v529 = v91;
  v533 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v529);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v532, 2, &v496);
  MIL::IRParameter::Make(&v496, &v497);
  v92 = v497;
  v498 = v497;
  if (v497)
  {
    v93 = (_QWORD *)operator new();
    v94 = v497;
    *v93 = &unk_1EA99F888;
    v93[1] = 0;
    v93[2] = 0;
    v93[3] = v94;
  }
  else
  {
    v93 = 0;
  }
  v499 = v93;
  v497 = 0;
  v95 = v83[2];
  v96 = v83[1];
  if (v96 >= v95)
  {
    v98 = (v96 - *v83) >> 4;
    v99 = v98 + 1;
    if ((unint64_t)(v98 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v100 = v95 - *v83;
    if (v100 >> 3 > v99)
      v99 = v100 >> 3;
    if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFF0)
      v101 = 0xFFFFFFFFFFFFFFFLL;
    else
      v101 = v99;
    v514 = v83 + 2;
    v102 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v83 + 2), v101);
    v104 = (uint64_t *)&v102[16 * v98];
    *v104 = v92;
    v104[1] = (uint64_t)v93;
    v499 = 0;
    v498 = 0;
    v106 = *v83;
    v105 = v83[1];
    if (v105 == *v83)
    {
      v109 = v83[1];
      v107 = &v102[16 * v98];
    }
    else
    {
      v107 = &v102[16 * v98];
      do
      {
        v108 = *((_OWORD *)v105 - 1);
        v105 -= 16;
        *((_OWORD *)v107 - 1) = v108;
        v107 -= 16;
        *(_QWORD *)v105 = 0;
        *((_QWORD *)v105 + 1) = 0;
      }
      while (v105 != v106);
      v109 = *v83;
      v105 = v83[1];
    }
    v97 = (char *)(v104 + 2);
    *v83 = v107;
    v511 = v109;
    v83[1] = (char *)(v104 + 2);
    v512 = v105;
    v110 = v83[2];
    v83[2] = &v102[16 * v103];
    v513 = v110;
    v510 = v109;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v510);
  }
  else
  {
    *(_QWORD *)v96 = v92;
    *((_QWORD *)v96 + 1) = v93;
    v97 = v96 + 16;
    v499 = 0;
    v498 = 0;
  }
  v83[1] = v97;
  v111 = v497;
  v497 = 0;
  if (v111)
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  v112 = (std::__shared_weak_count *)v496.n128_u64[1];
  if (v496.n128_u64[1])
  {
    v113 = (unint64_t *)(v496.n128_u64[1] + 8);
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  if (v529)
  {
    p_get_deleter = (uint64_t)v529;
    operator delete(v529);
  }
  if (__p)
  {
    v521 = __p;
    operator delete(__p);
  }
  v115 = v500;
  v116 = MIL::IRUnknownDimension::Make(a1, 0);
  v117 = MIL::IRUnknownDimension::Make(a1, 0);
  v118 = operator new(0x10uLL);
  v522 = v118 + 2;
  *v118 = v116;
  v118[1] = v117;
  __p = v118;
  v521 = v118 + 2;
  v532 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v119 = MIL::IRUnknownDimension::Make(a1, 0);
  v120 = MIL::IRUnknownDimension::Make(a1, 0);
  v121 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_get_deleter = (uint64_t)&v121->__on_zero_shared;
  p_on_zero_shared = &v121->__on_zero_shared;
  v121->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v119;
  v121->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v120;
  v529 = v121;
  v533 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v529);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v532, 2, &v495);
  MIL::IRParameter::Make(&v495, &v497);
  v122 = v497;
  v498 = v497;
  if (v497)
  {
    v123 = (_QWORD *)operator new();
    v124 = v497;
    *v123 = &unk_1EA99F888;
    v123[1] = 0;
    v123[2] = 0;
    v123[3] = v124;
  }
  else
  {
    v123 = 0;
  }
  v499 = v123;
  v497 = 0;
  v125 = v115[2];
  v126 = v115[1];
  if (v126 >= v125)
  {
    v128 = (v126 - *v115) >> 4;
    v129 = v128 + 1;
    if ((unint64_t)(v128 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v130 = v125 - *v115;
    if (v130 >> 3 > v129)
      v129 = v130 >> 3;
    if ((unint64_t)v130 >= 0x7FFFFFFFFFFFFFF0)
      v131 = 0xFFFFFFFFFFFFFFFLL;
    else
      v131 = v129;
    v514 = v115 + 2;
    v132 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v115 + 2), v131);
    v134 = (uint64_t *)&v132[16 * v128];
    *v134 = v122;
    v134[1] = (uint64_t)v123;
    v499 = 0;
    v498 = 0;
    v136 = *v115;
    v135 = v115[1];
    if (v135 == *v115)
    {
      v139 = v115[1];
      v137 = &v132[16 * v128];
    }
    else
    {
      v137 = &v132[16 * v128];
      do
      {
        v138 = *((_OWORD *)v135 - 1);
        v135 -= 16;
        *((_OWORD *)v137 - 1) = v138;
        v137 -= 16;
        *(_QWORD *)v135 = 0;
        *((_QWORD *)v135 + 1) = 0;
      }
      while (v135 != v136);
      v139 = *v115;
      v135 = v115[1];
    }
    v127 = (char *)(v134 + 2);
    *v115 = v137;
    v511 = v139;
    v115[1] = (char *)(v134 + 2);
    v512 = v135;
    v140 = v115[2];
    v115[2] = &v132[16 * v133];
    v513 = v140;
    v510 = v139;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v510);
  }
  else
  {
    *(_QWORD *)v126 = v122;
    *((_QWORD *)v126 + 1) = v123;
    v127 = v126 + 16;
    v499 = 0;
    v498 = 0;
  }
  v115[1] = v127;
  v141 = v497;
  v497 = 0;
  if (v141)
    (*(void (**)(uint64_t))(*(_QWORD *)v141 + 8))(v141);
  v142 = (std::__shared_weak_count *)v495.n128_u64[1];
  if (v495.n128_u64[1])
  {
    v143 = (unint64_t *)(v495.n128_u64[1] + 8);
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  if (v529)
  {
    p_get_deleter = (uint64_t)v529;
    operator delete(v529);
  }
  if (__p)
  {
    v521 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v493 = *(_OWORD *)a2;
  v494 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v145 = (uint64_t)v509;
  *(_QWORD *)&v492 = v509;
  if (v509)
  {
    v146 = (_QWORD *)operator new();
    *v146 = &unk_1EA99F8E8;
    v146[1] = 0;
    v146[2] = 0;
    v146[3] = v145;
  }
  else
  {
    v146 = 0;
  }
  *((_QWORD *)&v492 + 1) = v146;
  v509 = 0;
  *(_QWORD *)&v491 = v500;
  if (v500)
  {
    v147 = (_QWORD *)operator new();
    v148 = v500;
    *v147 = &unk_1EA99F948;
    v147[1] = 0;
    v147[2] = 0;
    v147[3] = v148;
  }
  else
  {
    v147 = 0;
  }
  *((_QWORD *)&v491 + 1) = v147;
  v500 = 0;
  v527[0] = &unk_1EA99FAC8;
  v527[1] = MIL::Operators::Common::ios17::CustomValidators::ValidateRNN;
  v528 = v527;
  v526 = 0;
  MIL::IROperator::Make((__int128 *)v493, &v492, &v491, (uint64_t)v527, (uint64_t)v525, a3);
  v149 = v526;
  if (v526 == v525)
  {
    v150 = 4;
    v149 = v525;
  }
  else
  {
    if (!v526)
      goto LABEL_144;
    v150 = 5;
  }
  (*(void (**)(void))(*v149 + 8 * v150))();
LABEL_144:
  v151 = v528;
  if (v528 == v527)
  {
    v152 = 4;
    v151 = v527;
    goto LABEL_148;
  }
  if (v528)
  {
    v152 = 5;
LABEL_148:
    (*(void (**)(void))(*v151 + 8 * v152))();
  }
  v153 = (std::__shared_weak_count *)*((_QWORD *)&v491 + 1);
  if (*((_QWORD *)&v491 + 1))
  {
    v154 = (unint64_t *)(*((_QWORD *)&v491 + 1) + 8);
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
      std::__shared_weak_count::__release_weak(v153);
    }
  }
  v156 = (std::__shared_weak_count *)*((_QWORD *)&v492 + 1);
  if (*((_QWORD *)&v492 + 1))
  {
    v157 = (unint64_t *)(*((_QWORD *)&v492 + 1) + 8);
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  if (SHIBYTE(v494) < 0)
    operator delete(v493[0]);
  v529 = 0;
  v159 = (_OWORD *)operator new();
  *v159 = 0u;
  v159[1] = 0u;
  *((_DWORD *)v159 + 8) = 1065353216;
  v529 = (std::__shared_weak_count_vtbl *)v159;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v490);
  MIL::IRParameter::Make(&v490, (uint64_t *)&v510);
  v160 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v159, "minimum_compute_type", (uint64_t *)&v510);
  v161 = v510;
  v510 = 0;
  if (v161)
    (*(void (**)(void *))(*(_QWORD *)v161 + 8))(v161);
  v162 = (std::__shared_weak_count *)v490.n128_u64[1];
  if (v490.n128_u64[1])
  {
    v163 = (unint64_t *)(v490.n128_u64[1] + 8);
    do
      v164 = __ldaxr(v163);
    while (__stlxr(v164 - 1, v163));
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v160 + 5) + 32))(*((_QWORD *)v160 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v160 + 5) + 48))(*((_QWORD *)v160 + 5), 1);
  v165 = *a3;
  v166 = v529;
  v488 = v529;
  if (v529)
  {
    v167 = (std::__shared_weak_count *)operator new();
    v167->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v167->__shared_owners_ = 0;
    v167->__shared_weak_owners_ = 0;
    v167[1].__vftable = v166;
  }
  else
  {
    v167 = 0;
  }
  v489 = v167;
  v529 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v165 + 184))(v165, &v488);
  v168 = v489;
  if (v489)
  {
    p_shared_owners = (unint64_t *)&v489->__shared_owners_;
    do
      v170 = __ldaxr(p_shared_owners);
    while (__stlxr(v170 - 1, p_shared_owners));
    if (!v170)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
  }
  v171 = *a3;
  v523[0] = &off_1EA99FBD8;
  v523[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceRNN;
  v524 = v523;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v171 + 200))(v171, v523);
  v172 = v524;
  if (v524 == v523)
  {
    v173 = 4;
    v172 = v523;
  }
  else
  {
    if (!v524)
      goto LABEL_181;
    v173 = 5;
  }
  (*(void (**)(void))(*v172 + 8 * v173))();
LABEL_181:
  MIL::Validation::TensorDTypeConstraints::Make(&v510);
  v174 = v510;
  std::string::basic_string[abi:ne180100]<0>(v484, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v484, 0, (uint64_t *)&__p);
  v486 = __p;
  if (__p)
  {
    v175 = (std::__shared_weak_count *)operator new();
    v176 = (std::__shared_weak_count_vtbl *)__p;
    v175->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v175->__shared_owners_ = 0;
    v175->__shared_weak_owners_ = 0;
    v175[1].__vftable = v176;
  }
  else
  {
    v175 = 0;
  }
  v487 = v175;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v482, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v174 + 24))(v174, &v486, v482);
  if (v483 < 0)
    operator delete(v482[0]);
  v177 = v487;
  if (v487)
  {
    v178 = (unint64_t *)&v487->__shared_owners_;
    do
      v179 = __ldaxr(v178);
    while (__stlxr(v179 - 1, v178));
    if (!v179)
    {
      ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
      std::__shared_weak_count::__release_weak(v177);
    }
  }
  v180 = __p;
  __p = 0;
  if (v180)
    (*(void (**)(void *))(*(_QWORD *)v180 + 8))(v180);
  if (v485 < 0)
    operator delete(v484[0]);
  v181 = v510;
  std::string::basic_string[abi:ne180100]<0>(v478, "initial_h");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v478, 0, (uint64_t *)&__p);
  v480 = __p;
  if (__p)
  {
    v182 = (std::__shared_weak_count *)operator new();
    v183 = (std::__shared_weak_count_vtbl *)__p;
    v182->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v182->__shared_owners_ = 0;
    v182->__shared_weak_owners_ = 0;
    v182[1].__vftable = v183;
  }
  else
  {
    v182 = 0;
  }
  v481 = v182;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v476, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v181 + 24))(v181, &v480, v476);
  if (v477 < 0)
    operator delete(v476[0]);
  v184 = v481;
  if (v481)
  {
    v185 = (unint64_t *)&v481->__shared_owners_;
    do
      v186 = __ldaxr(v185);
    while (__stlxr(v186 - 1, v185));
    if (!v186)
    {
      ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
      std::__shared_weak_count::__release_weak(v184);
    }
  }
  v187 = __p;
  __p = 0;
  if (v187)
    (*(void (**)(void *))(*(_QWORD *)v187 + 8))(v187);
  if (v479 < 0)
    operator delete(v478[0]);
  v188 = v510;
  std::string::basic_string[abi:ne180100]<0>(v472, "weight_ih");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v472, 0, (uint64_t *)&__p);
  v474 = __p;
  if (__p)
  {
    v189 = (std::__shared_weak_count *)operator new();
    v190 = (std::__shared_weak_count_vtbl *)__p;
    v189->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v189->__shared_owners_ = 0;
    v189->__shared_weak_owners_ = 0;
    v189[1].__vftable = v190;
  }
  else
  {
    v189 = 0;
  }
  v475 = v189;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v470, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v188 + 24))(v188, &v474, v470);
  if (v471 < 0)
    operator delete(v470[0]);
  v191 = v475;
  if (v475)
  {
    v192 = (unint64_t *)&v475->__shared_owners_;
    do
      v193 = __ldaxr(v192);
    while (__stlxr(v193 - 1, v192));
    if (!v193)
    {
      ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
      std::__shared_weak_count::__release_weak(v191);
    }
  }
  v194 = __p;
  __p = 0;
  if (v194)
    (*(void (**)(void *))(*(_QWORD *)v194 + 8))(v194);
  if (v473 < 0)
    operator delete(v472[0]);
  v195 = v510;
  std::string::basic_string[abi:ne180100]<0>(v466, "weight_hh");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v466, 0, (uint64_t *)&__p);
  v468 = __p;
  if (__p)
  {
    v196 = (std::__shared_weak_count *)operator new();
    v197 = (std::__shared_weak_count_vtbl *)__p;
    v196->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v196->__shared_owners_ = 0;
    v196->__shared_weak_owners_ = 0;
    v196[1].__vftable = v197;
  }
  else
  {
    v196 = 0;
  }
  v469 = v196;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v464, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v195 + 24))(v195, &v468, v464);
  if (v465 < 0)
    operator delete(v464[0]);
  v198 = v469;
  if (v469)
  {
    v199 = (unint64_t *)&v469->__shared_owners_;
    do
      v200 = __ldaxr(v199);
    while (__stlxr(v200 - 1, v199));
    if (!v200)
    {
      ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
      std::__shared_weak_count::__release_weak(v198);
    }
  }
  v201 = __p;
  __p = 0;
  if (v201)
    (*(void (**)(void *))(*(_QWORD *)v201 + 8))(v201);
  if (v467 < 0)
    operator delete(v466[0]);
  v202 = v510;
  std::string::basic_string[abi:ne180100]<0>(v460, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v460, 1, (uint64_t *)&__p);
  v462 = __p;
  if (__p)
  {
    v203 = (std::__shared_weak_count *)operator new();
    v204 = (std::__shared_weak_count_vtbl *)__p;
    v203->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v203->__shared_owners_ = 0;
    v203->__shared_weak_owners_ = 0;
    v203[1].__vftable = v204;
  }
  else
  {
    v203 = 0;
  }
  v463 = v203;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v458, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v202 + 24))(v202, &v462, v458);
  if (v459 < 0)
    operator delete(v458[0]);
  v205 = v463;
  if (v463)
  {
    v206 = (unint64_t *)&v463->__shared_owners_;
    do
      v207 = __ldaxr(v206);
    while (__stlxr(v207 - 1, v206));
    if (!v207)
    {
      ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
      std::__shared_weak_count::__release_weak(v205);
    }
  }
  v208 = __p;
  __p = 0;
  if (v208)
    (*(void (**)(void *))(*(_QWORD *)v208 + 8))(v208);
  if (v461 < 0)
    operator delete(v460[0]);
  v209 = v510;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v456 = __p;
  if (__p)
  {
    v210 = (std::__shared_weak_count *)operator new();
    v211 = (std::__shared_weak_count_vtbl *)__p;
    v210->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v210->__shared_owners_ = 0;
    v210->__shared_weak_owners_ = 0;
    v210[1].__vftable = v211;
  }
  else
  {
    v210 = 0;
  }
  v457 = v210;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v454, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v209 + 24))(v209, &v456, v454);
  if (v455 < 0)
    operator delete(v454[0]);
  v212 = v457;
  if (v457)
  {
    v213 = (unint64_t *)&v457->__shared_owners_;
    do
      v214 = __ldaxr(v213);
    while (__stlxr(v214 - 1, v213));
    if (!v214)
    {
      ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
      std::__shared_weak_count::__release_weak(v212);
    }
  }
  v215 = __p;
  __p = 0;
  if (v215)
    (*(void (**)(void *))(*(_QWORD *)v215 + 8))(v215);
  v216 = v510;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 0, &__p);
  v452 = __p;
  if (__p)
  {
    v217 = (std::__shared_weak_count *)operator new();
    v218 = (std::__shared_weak_count_vtbl *)__p;
    v217->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v217->__shared_owners_ = 0;
    v217->__shared_weak_owners_ = 0;
    v217[1].__vftable = v218;
  }
  else
  {
    v217 = 0;
  }
  v453 = v217;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v450, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v216 + 24))(v216, &v452, v450);
  if (v451 < 0)
    operator delete(v450[0]);
  v219 = v453;
  if (v453)
  {
    v220 = (unint64_t *)&v453->__shared_owners_;
    do
      v221 = __ldaxr(v220);
    while (__stlxr(v221 - 1, v220));
    if (!v221)
    {
      ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
      std::__shared_weak_count::__release_weak(v219);
    }
  }
  v222 = __p;
  __p = 0;
  if (v222)
    (*(void (**)(void *))(*(_QWORD *)v222 + 8))(v222);
  v223 = *a3;
  v448 = v510;
  if (v510)
  {
    v224 = (std::__shared_weak_count *)operator new();
    v225 = (std::__shared_weak_count_vtbl *)v510;
    v224->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v224->__shared_owners_ = 0;
    v224->__shared_weak_owners_ = 0;
    v224[1].__vftable = v225;
  }
  else
  {
    v224 = 0;
  }
  v449 = v224;
  v510 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v223 + 56))(v223, &v448);
  v226 = v449;
  if (v449)
  {
    v227 = (unint64_t *)&v449->__shared_owners_;
    do
      v228 = __ldaxr(v227);
    while (__stlxr(v228 - 1, v227));
    if (!v228)
    {
      ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
      std::__shared_weak_count::__release_weak(v226);
    }
  }
  v229 = v510;
  v510 = 0;
  if (v229)
    (*(void (**)(void *))(*(_QWORD *)v229 + 8))(v229);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v510);
  v230 = v510;
  std::string::basic_string[abi:ne180100]<0>(v444, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v444, 0, (uint64_t *)&__p);
  v446 = __p;
  if (__p)
  {
    v231 = (std::__shared_weak_count *)operator new();
    v232 = (std::__shared_weak_count_vtbl *)__p;
    v231->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v231->__shared_owners_ = 0;
    v231->__shared_weak_owners_ = 0;
    v231[1].__vftable = v232;
  }
  else
  {
    v231 = 0;
  }
  v447 = v231;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v442, "S");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v230 + 24))(v230, &v446, 0, v442);
  if (v443 < 0)
    operator delete(v442[0]);
  v233 = v447;
  if (v447)
  {
    v234 = (unint64_t *)&v447->__shared_owners_;
    do
      v235 = __ldaxr(v234);
    while (__stlxr(v235 - 1, v234));
    if (!v235)
    {
      ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
      std::__shared_weak_count::__release_weak(v233);
    }
  }
  v236 = __p;
  __p = 0;
  if (v236)
    (*(void (**)(void *))(*(_QWORD *)v236 + 8))(v236);
  if (v445 < 0)
    operator delete(v444[0]);
  v237 = v510;
  std::string::basic_string[abi:ne180100]<0>(v438, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v438, 0, (uint64_t *)&__p);
  v440 = __p;
  if (__p)
  {
    v238 = (std::__shared_weak_count *)operator new();
    v239 = (std::__shared_weak_count_vtbl *)__p;
    v238->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v238->__shared_owners_ = 0;
    v238->__shared_weak_owners_ = 0;
    v238[1].__vftable = v239;
  }
  else
  {
    v238 = 0;
  }
  v441 = v238;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v436, "B");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v237 + 24))(v237, &v440, 1, v436);
  if (v437 < 0)
    operator delete(v436[0]);
  v240 = v441;
  if (v441)
  {
    v241 = (unint64_t *)&v441->__shared_owners_;
    do
      v242 = __ldaxr(v241);
    while (__stlxr(v242 - 1, v241));
    if (!v242)
    {
      ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
      std::__shared_weak_count::__release_weak(v240);
    }
  }
  v243 = __p;
  __p = 0;
  if (v243)
    (*(void (**)(void *))(*(_QWORD *)v243 + 8))(v243);
  if (v439 < 0)
    operator delete(v438[0]);
  v244 = v510;
  std::string::basic_string[abi:ne180100]<0>(v432, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v432, 0, (uint64_t *)&__p);
  v434 = __p;
  if (__p)
  {
    v245 = (std::__shared_weak_count *)operator new();
    v246 = (std::__shared_weak_count_vtbl *)__p;
    v245->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v245->__shared_owners_ = 0;
    v245->__shared_weak_owners_ = 0;
    v245[1].__vftable = v246;
  }
  else
  {
    v245 = 0;
  }
  v435 = v245;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v430, "I");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v244 + 24))(v244, &v434, 2, v430);
  if (v431 < 0)
    operator delete(v430[0]);
  v247 = v435;
  if (v435)
  {
    v248 = (unint64_t *)&v435->__shared_owners_;
    do
      v249 = __ldaxr(v248);
    while (__stlxr(v249 - 1, v248));
    if (!v249)
    {
      ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
      std::__shared_weak_count::__release_weak(v247);
    }
  }
  v250 = __p;
  __p = 0;
  if (v250)
    (*(void (**)(void *))(*(_QWORD *)v250 + 8))(v250);
  if (v433 < 0)
    operator delete(v432[0]);
  v251 = v510;
  std::string::basic_string[abi:ne180100]<0>(v426, "initial_h");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v426, 0, (uint64_t *)&__p);
  v428 = __p;
  if (__p)
  {
    v252 = (std::__shared_weak_count *)operator new();
    v253 = (std::__shared_weak_count_vtbl *)__p;
    v252->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v252->__shared_owners_ = 0;
    v252->__shared_weak_owners_ = 0;
    v252[1].__vftable = v253;
  }
  else
  {
    v252 = 0;
  }
  v429 = v252;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v424, "B");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v251 + 24))(v251, &v428, 0, v424);
  if (v425 < 0)
    operator delete(v424[0]);
  v254 = v429;
  if (v429)
  {
    v255 = (unint64_t *)&v429->__shared_owners_;
    do
      v256 = __ldaxr(v255);
    while (__stlxr(v256 - 1, v255));
    if (!v256)
    {
      ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
      std::__shared_weak_count::__release_weak(v254);
    }
  }
  v257 = __p;
  __p = 0;
  if (v257)
    (*(void (**)(void *))(*(_QWORD *)v257 + 8))(v257);
  if (v427 < 0)
    operator delete(v426[0]);
  v258 = v510;
  std::string::basic_string[abi:ne180100]<0>(v420, "initial_h");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v420, 0, (uint64_t *)&__p);
  v422 = __p;
  if (__p)
  {
    v259 = (std::__shared_weak_count *)operator new();
    v260 = (std::__shared_weak_count_vtbl *)__p;
    v259->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v259->__shared_owners_ = 0;
    v259->__shared_weak_owners_ = 0;
    v259[1].__vftable = v260;
  }
  else
  {
    v259 = 0;
  }
  v423 = v259;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v418, "H");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v258 + 24))(v258, &v422, 1, v418);
  if (v419 < 0)
    operator delete(v418[0]);
  v261 = v423;
  if (v423)
  {
    v262 = (unint64_t *)&v423->__shared_owners_;
    do
      v263 = __ldaxr(v262);
    while (__stlxr(v263 - 1, v262));
    if (!v263)
    {
      ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
      std::__shared_weak_count::__release_weak(v261);
    }
  }
  v264 = __p;
  __p = 0;
  if (v264)
    (*(void (**)(void *))(*(_QWORD *)v264 + 8))(v264);
  if (v421 < 0)
    operator delete(v420[0]);
  v265 = v510;
  std::string::basic_string[abi:ne180100]<0>(v414, "weight_ih");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v414, 0, (uint64_t *)&__p);
  v416 = __p;
  if (__p)
  {
    v266 = (std::__shared_weak_count *)operator new();
    v267 = (std::__shared_weak_count_vtbl *)__p;
    v266->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v266->__shared_owners_ = 0;
    v266->__shared_weak_owners_ = 0;
    v266[1].__vftable = v267;
  }
  else
  {
    v266 = 0;
  }
  v417 = v266;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v412, "H");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v265 + 24))(v265, &v416, 0, v412);
  if (v413 < 0)
    operator delete(v412[0]);
  v268 = v417;
  if (v417)
  {
    v269 = (unint64_t *)&v417->__shared_owners_;
    do
      v270 = __ldaxr(v269);
    while (__stlxr(v270 - 1, v269));
    if (!v270)
    {
      ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
      std::__shared_weak_count::__release_weak(v268);
    }
  }
  v271 = __p;
  __p = 0;
  if (v271)
    (*(void (**)(void *))(*(_QWORD *)v271 + 8))(v271);
  if (v415 < 0)
    operator delete(v414[0]);
  v272 = v510;
  std::string::basic_string[abi:ne180100]<0>(v408, "weight_ih");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v408, 0, (uint64_t *)&__p);
  v410 = __p;
  if (__p)
  {
    v273 = (std::__shared_weak_count *)operator new();
    v274 = (std::__shared_weak_count_vtbl *)__p;
    v273->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v273->__shared_owners_ = 0;
    v273->__shared_weak_owners_ = 0;
    v273[1].__vftable = v274;
  }
  else
  {
    v273 = 0;
  }
  v411 = v273;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v406, "I");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v272 + 24))(v272, &v410, 1, v406);
  if (v407 < 0)
    operator delete(v406[0]);
  v275 = v411;
  if (v411)
  {
    v276 = (unint64_t *)&v411->__shared_owners_;
    do
      v277 = __ldaxr(v276);
    while (__stlxr(v277 - 1, v276));
    if (!v277)
    {
      ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
      std::__shared_weak_count::__release_weak(v275);
    }
  }
  v278 = __p;
  __p = 0;
  if (v278)
    (*(void (**)(void *))(*(_QWORD *)v278 + 8))(v278);
  if (v409 < 0)
    operator delete(v408[0]);
  v279 = v510;
  std::string::basic_string[abi:ne180100]<0>(v402, "weight_hh");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v402, 0, (uint64_t *)&__p);
  v404 = __p;
  if (__p)
  {
    v280 = (std::__shared_weak_count *)operator new();
    v281 = (std::__shared_weak_count_vtbl *)__p;
    v280->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v280->__shared_owners_ = 0;
    v280->__shared_weak_owners_ = 0;
    v280[1].__vftable = v281;
  }
  else
  {
    v280 = 0;
  }
  v405 = v280;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v400, "H");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v279 + 24))(v279, &v404, 1, v400);
  if (v401 < 0)
    operator delete(v400[0]);
  v282 = v405;
  if (v405)
  {
    v283 = (unint64_t *)&v405->__shared_owners_;
    do
      v284 = __ldaxr(v283);
    while (__stlxr(v284 - 1, v283));
    if (!v284)
    {
      ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
      std::__shared_weak_count::__release_weak(v282);
    }
  }
  v285 = __p;
  __p = 0;
  if (v285)
    (*(void (**)(void *))(*(_QWORD *)v285 + 8))(v285);
  if (v403 < 0)
    operator delete(v402[0]);
  v286 = v510;
  std::string::basic_string[abi:ne180100]<0>(v396, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v396, 1, (uint64_t *)&__p);
  v398 = __p;
  if (__p)
  {
    v287 = (std::__shared_weak_count *)operator new();
    v288 = (std::__shared_weak_count_vtbl *)__p;
    v287->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v287->__shared_owners_ = 0;
    v287->__shared_weak_owners_ = 0;
    v287[1].__vftable = v288;
  }
  else
  {
    v287 = 0;
  }
  v399 = v287;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v394, "H");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v286 + 24))(v286, &v398, 0, v394);
  if (v395 < 0)
    operator delete(v394[0]);
  v289 = v399;
  if (v399)
  {
    v290 = (unint64_t *)&v399->__shared_owners_;
    do
      v291 = __ldaxr(v290);
    while (__stlxr(v291 - 1, v290));
    if (!v291)
    {
      ((void (*)(std::__shared_weak_count *))v289->__on_zero_shared)(v289);
      std::__shared_weak_count::__release_weak(v289);
    }
  }
  v292 = __p;
  __p = 0;
  if (v292)
    (*(void (**)(void *))(*(_QWORD *)v292 + 8))(v292);
  if (v397 < 0)
    operator delete(v396[0]);
  v293 = v510;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v392 = __p;
  if (__p)
  {
    v294 = (std::__shared_weak_count *)operator new();
    v295 = (std::__shared_weak_count_vtbl *)__p;
    v294->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v294->__shared_owners_ = 0;
    v294->__shared_weak_owners_ = 0;
    v294[1].__vftable = v295;
  }
  else
  {
    v294 = 0;
  }
  v393 = v294;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v390, "B");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v293 + 24))(v293, &v392, 1, v390);
  if (v391 < 0)
    operator delete(v390[0]);
  v296 = v393;
  if (v393)
  {
    v297 = (unint64_t *)&v393->__shared_owners_;
    do
      v298 = __ldaxr(v297);
    while (__stlxr(v298 - 1, v297));
    if (!v298)
    {
      ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
      std::__shared_weak_count::__release_weak(v296);
    }
  }
  v299 = __p;
  __p = 0;
  if (v299)
    (*(void (**)(void *))(*(_QWORD *)v299 + 8))(v299);
  v300 = v510;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v388 = __p;
  if (__p)
  {
    v301 = (std::__shared_weak_count *)operator new();
    v302 = (std::__shared_weak_count_vtbl *)__p;
    v301->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v301->__shared_owners_ = 0;
    v301->__shared_weak_owners_ = 0;
    v301[1].__vftable = v302;
  }
  else
  {
    v301 = 0;
  }
  v389 = v301;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v386, "H");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v300 + 24))(v300, &v388, 2, v386);
  if (v387 < 0)
    operator delete(v386[0]);
  v303 = v389;
  if (v389)
  {
    v304 = (unint64_t *)&v389->__shared_owners_;
    do
      v305 = __ldaxr(v304);
    while (__stlxr(v305 - 1, v304));
    if (!v305)
    {
      ((void (*)(std::__shared_weak_count *))v303->__on_zero_shared)(v303);
      std::__shared_weak_count::__release_weak(v303);
    }
  }
  v306 = __p;
  __p = 0;
  if (v306)
    (*(void (**)(void *))(*(_QWORD *)v306 + 8))(v306);
  v307 = v510;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 0, &__p);
  v384 = __p;
  if (__p)
  {
    v308 = (std::__shared_weak_count *)operator new();
    v309 = (std::__shared_weak_count_vtbl *)__p;
    v308->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v308->__shared_owners_ = 0;
    v308->__shared_weak_owners_ = 0;
    v308[1].__vftable = v309;
  }
  else
  {
    v308 = 0;
  }
  v385 = v308;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v382, "B");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v307 + 24))(v307, &v384, 0, v382);
  if (v383 < 0)
    operator delete(v382[0]);
  v310 = v385;
  if (v385)
  {
    v311 = (unint64_t *)&v385->__shared_owners_;
    do
      v312 = __ldaxr(v311);
    while (__stlxr(v312 - 1, v311));
    if (!v312)
    {
      ((void (*)(std::__shared_weak_count *))v310->__on_zero_shared)(v310);
      std::__shared_weak_count::__release_weak(v310);
    }
  }
  v313 = __p;
  __p = 0;
  if (v313)
    (*(void (**)(void *))(*(_QWORD *)v313 + 8))(v313);
  v314 = v510;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 0, &__p);
  v380 = __p;
  if (__p)
  {
    v315 = (std::__shared_weak_count *)operator new();
    v316 = (std::__shared_weak_count_vtbl *)__p;
    v315->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v315->__shared_owners_ = 0;
    v315->__shared_weak_owners_ = 0;
    v315[1].__vftable = v316;
  }
  else
  {
    v315 = 0;
  }
  v381 = v315;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v378, "H");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v314 + 24))(v314, &v380, 1, v378);
  if (v379 < 0)
    operator delete(v378[0]);
  v317 = v381;
  if (v381)
  {
    v318 = (unint64_t *)&v381->__shared_owners_;
    do
      v319 = __ldaxr(v318);
    while (__stlxr(v319 - 1, v318));
    if (!v319)
    {
      ((void (*)(std::__shared_weak_count *))v317->__on_zero_shared)(v317);
      std::__shared_weak_count::__release_weak(v317);
    }
  }
  v320 = __p;
  __p = 0;
  if (v320)
    (*(void (**)(void *))(*(_QWORD *)v320 + 8))(v320);
  v321 = *a3;
  v376 = v510;
  if (v510)
  {
    v322 = (std::__shared_weak_count *)operator new();
    v323 = (std::__shared_weak_count_vtbl *)v510;
    v322->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v322->__shared_owners_ = 0;
    v322->__shared_weak_owners_ = 0;
    v322[1].__vftable = v323;
  }
  else
  {
    v322 = 0;
  }
  v377 = v322;
  v510 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v321 + 56))(v321, &v376);
  v324 = v377;
  if (v377)
  {
    v325 = (unint64_t *)&v377->__shared_owners_;
    do
      v326 = __ldaxr(v325);
    while (__stlxr(v326 - 1, v325));
    if (!v326)
    {
      ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
      std::__shared_weak_count::__release_weak(v324);
    }
  }
  v327 = v510;
  v510 = 0;
  if (v327)
    (*(void (**)(void *))(*(_QWORD *)v327 + 8))(v327);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v498);
  v328 = v498;
  std::string::basic_string[abi:ne180100]<0>(v372, "direction");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v372, 0, &v532);
  v374 = v532;
  if (v532)
  {
    v329 = (std::__shared_weak_count *)operator new();
    v330 = v532;
    v329->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v329->__shared_owners_ = 0;
    v329->__shared_weak_owners_ = 0;
    v329[1].__vftable = (std::__shared_weak_count_vtbl *)v330;
  }
  else
  {
    v329 = 0;
  }
  v375 = v329;
  v532 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v510, "forward");
  std::string::basic_string[abi:ne180100]<0>(&v513, "reverse");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v510, 2);
  (*(void (**)(uint64_t, uint64_t *, void **, _QWORD))(*(_QWORD *)v328 + 24))(v328, &v374, &__p, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -6; i -= 3)
  {
    if (*(&v515 + i * 8) < 0)
      operator delete((&v513)[i]);
  }
  v332 = v375;
  if (v375)
  {
    v333 = (unint64_t *)&v375->__shared_owners_;
    do
      v334 = __ldaxr(v333);
    while (__stlxr(v334 - 1, v333));
    if (!v334)
    {
      ((void (*)(std::__shared_weak_count *))v332->__on_zero_shared)(v332);
      std::__shared_weak_count::__release_weak(v332);
    }
  }
  v335 = v532;
  v532 = 0;
  if (v335)
    (*(void (**)(uint64_t))(*(_QWORD *)v335 + 8))(v335);
  if (v373 < 0)
    operator delete(v372[0]);
  v336 = v498;
  std::string::basic_string[abi:ne180100]<0>(v368, "activation");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v368, 0, &v532);
  v370 = v532;
  if (v532)
  {
    v337 = (std::__shared_weak_count *)operator new();
    v338 = v532;
    v337->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v337->__shared_owners_ = 0;
    v337->__shared_weak_owners_ = 0;
    v337[1].__vftable = (std::__shared_weak_count_vtbl *)v338;
  }
  else
  {
    v337 = 0;
  }
  v371 = v337;
  v532 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v510, "hard_sigmoid");
  std::string::basic_string[abi:ne180100]<0>(&v513, "linear");
  std::string::basic_string[abi:ne180100]<0>(v516, "relu");
  std::string::basic_string[abi:ne180100]<0>(v517, "scaled_tanh");
  std::string::basic_string[abi:ne180100]<0>(v518, "sigmoid");
  std::string::basic_string[abi:ne180100]<0>(v519, "tanh");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v510, 6);
  (*(void (**)(uint64_t, uint64_t *, void **, _QWORD))(*(_QWORD *)v336 + 24))(v336, &v370, &__p, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (j = 0; j != -18; j -= 3)
  {
    if (SHIBYTE(v519[j + 2]) < 0)
      operator delete(v519[j]);
  }
  v340 = v371;
  if (v371)
  {
    v341 = (unint64_t *)&v371->__shared_owners_;
    do
      v342 = __ldaxr(v341);
    while (__stlxr(v342 - 1, v341));
    if (!v342)
    {
      ((void (*)(std::__shared_weak_count *))v340->__on_zero_shared)(v340);
      std::__shared_weak_count::__release_weak(v340);
    }
  }
  v343 = v532;
  v532 = 0;
  if (v343)
    (*(void (**)(uint64_t))(*(_QWORD *)v343 + 8))(v343);
  if (v369 < 0)
    operator delete(v368[0]);
  v344 = v498;
  std::string::basic_string[abi:ne180100]<0>(v364, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v364, 1, &v532);
  v366 = v532;
  if (v532)
  {
    v345 = (std::__shared_weak_count *)operator new();
    v346 = v532;
    v345->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v345->__shared_owners_ = 0;
    v345->__shared_weak_owners_ = 0;
    v345[1].__vftable = (std::__shared_weak_count_vtbl *)v346;
  }
  else
  {
    v345 = 0;
  }
  v367 = v345;
  v532 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v510, "fp16");
  std::string::basic_string[abi:ne180100]<0>(&v513, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v516, "int32");
  std::string::basic_string[abi:ne180100]<0>(v517, "int8");
  std::string::basic_string[abi:ne180100]<0>(v518, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v510, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v344 + 24))(v344, &v366, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (k = 0; k != -15; k -= 3)
  {
    if (SHIBYTE(v518[k + 2]) < 0)
      operator delete((void *)v518[k]);
  }
  v348 = v367;
  if (v367)
  {
    v349 = (unint64_t *)&v367->__shared_owners_;
    do
      v350 = __ldaxr(v349);
    while (__stlxr(v350 - 1, v349));
    if (!v350)
    {
      ((void (*)(std::__shared_weak_count *))v348->__on_zero_shared)(v348);
      std::__shared_weak_count::__release_weak(v348);
    }
  }
  v351 = v532;
  v532 = 0;
  if (v351)
    (*(void (**)(uint64_t))(*(_QWORD *)v351 + 8))(v351);
  if (v365 < 0)
    operator delete(v364[0]);
  v352 = *a3;
  v362 = v498;
  if (v498)
  {
    v353 = (std::__shared_weak_count *)operator new();
    v354 = v498;
    v353->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v353->__shared_owners_ = 0;
    v353->__shared_weak_owners_ = 0;
    v353[1].__vftable = (std::__shared_weak_count_vtbl *)v354;
  }
  else
  {
    v353 = 0;
  }
  v363 = v353;
  v498 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v352 + 56))(v352, &v362);
  v355 = v363;
  if (v363)
  {
    v356 = (unint64_t *)&v363->__shared_owners_;
    do
      v357 = __ldaxr(v356);
    while (__stlxr(v357 - 1, v356));
    if (!v357)
    {
      ((void (*)(std::__shared_weak_count *))v355->__on_zero_shared)(v355);
      std::__shared_weak_count::__release_weak(v355);
    }
  }
  v358 = v498;
  v498 = 0;
  if (v358)
    (*(void (**)(uint64_t))(*(_QWORD *)v358 + 8))(v358);
  if (v529)
  {
    v359 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v529);
    MEMORY[0x1E0C023A0](v359, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v500, 0);
  result = (uint64_t)v509;
  if (v509)
  {
    v361 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v509);
    return MEMORY[0x1E0C023A0](v361, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E091CC6C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;

  v4 = STACK[0x5A8];
  STACK[0x5A8] = 0;
  if (v4)
    (*(void (**)(unint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 128), 0);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x5B8], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x640], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceBaseArgReduction(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  MIL::IRValue *SingleValue;
  const void *v11;
  int v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  void *exception;
  std::__shared_weak_count *v22;
  std::string v23[2];
  int v24;
  std::string v25;
  _QWORD v26[2];
  void *__p[2];
  char v28;
  int v29;
  std::string v30;
  std::string v31;

  std::string::basic_string[abi:ne180100]<0>(__p, "output_dtype");
  v8 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  v9 = v8;
  if (v28 < 0)
  {
    operator delete(__p[0]);
    if (v9)
      goto LABEL_3;
LABEL_9:
    v12 = 11;
    goto LABEL_10;
  }
  if (!v8)
    goto LABEL_9;
LABEL_3:
  std::string::basic_string[abi:ne180100]<0>(__p, "output_dtype");
  SingleValue = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)__p);
  v11 = (const void *)MIL::IRValue::AsTensor(SingleValue);
  MIL::IRValue::GetScalar<std::string>(v11, &v31);
  if (v28 < 0)
    operator delete(__p[0]);
  v12 = MIL::StringToIRDataType((const void **)&v31.__r_.__value_.__l.__data_, 0);
  if ((v12 & 0xFFFFFFFB) != 0xB)
  {
    std::string::basic_string[abi:ne180100]<0>(&v30, "output_dtype must be either int32 or uint16");
    v18 = a2[1];
    v26[0] = *a2;
    v26[1] = v18;
    if (v18)
    {
      v19 = (unint64_t *)(v18 + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v25, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
    else
      v25 = v30;
    MIL::ValidationResult::ValidationResult(__p, v26, 315, &v25);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v26);
    exception = __cxa_allocate_exception(0x48uLL);
    MIL::MILResult::MILResult(v23, (uint64_t)__p);
    v23[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA99F170;
    v24 = v29;
    MIL::ValidationError::ValidationError(exception, v23);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
LABEL_10:
  v13 = (std::__shared_weak_count *)a2[1];
  v22 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  MIL::ValueTypeInferenceUtils::ValueTypeInferenceBaseArgReductionCommon(a1, a3, v12, a4);
  if (v22)
  {
    v16 = (unint64_t *)&v22->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_1E091DBE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a12);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a27);
  if (*(char *)(v32 - 89) < 0)
    operator delete(*(void **)(v32 - 112));
  if (*(char *)(v32 - 65) < 0)
    operator delete(*(void **)(v32 - 88));
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::BaseArgReduction::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count_vtbl *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  unsigned __int8 *v23;
  void **v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unsigned __int8 *v29;
  void **v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  unsigned __int8 *v35;
  void **v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  char **v41;
  uint64_t v42;
  std::__shared_weak_count_vtbl *v43;
  uint64_t v44;
  _QWORD *v45;
  void *v46;
  _QWORD *v47;
  void *v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  __int128 v62;
  void **v63;
  char *v64;
  void *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  char **v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  _OWORD *v83;
  unsigned __int8 *v84;
  void **v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  std::__shared_weak_count_vtbl *v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count *v92;
  unint64_t *p_shared_owners;
  unint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  void **v98;
  std::__shared_weak_count *v99;
  std::__shared_weak_count_vtbl *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count_vtbl *v104;
  void **v105;
  std::__shared_weak_count *v106;
  std::__shared_weak_count_vtbl *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count_vtbl *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  void **v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  void **v118;
  void **v119;
  std::__shared_weak_count *v120;
  std::__shared_weak_count_vtbl *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count_vtbl *v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  void **v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  void **v132;
  void *v133;
  std::__shared_weak_count *v134;
  uint64_t v135;
  uint64_t i;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  uint64_t v140;
  void *v141;
  std::__shared_weak_count *v142;
  uint64_t v143;
  uint64_t j;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  std::__shared_weak_count_vtbl *v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t result;
  uint64_t v158;
  void *v159;
  std::__shared_weak_count *v160;
  void *v161[2];
  char v162;
  uint64_t v163;
  std::__shared_weak_count *v164;
  void *v165[2];
  char v166;
  uint64_t v167;
  std::__shared_weak_count *v168;
  void **v169;
  std::__shared_weak_count *v170;
  void *v171[2];
  char v172;
  void *v173[2];
  char v174;
  std::__shared_weak_count_vtbl *v175;
  std::__shared_weak_count *v176;
  void **v177;
  std::__shared_weak_count *v178;
  void *v179[2];
  char v180;
  std::__shared_weak_count_vtbl *v181;
  std::__shared_weak_count *v182;
  void *v183[2];
  char v184;
  void *v185[2];
  char v186;
  std::__shared_weak_count_vtbl *v187;
  std::__shared_weak_count *v188;
  void *v189;
  std::__shared_weak_count *v190;
  __n128 v191;
  __int128 v192;
  __int128 v193;
  void *v194[2];
  uint64_t v195;
  __n128 v196;
  void *v197;
  char **v198;
  __n128 v199;
  __n128 v200;
  __n128 v201;
  void *__p;
  void *v203;
  _QWORD *v204;
  void *v205;
  void *v206;
  _QWORD *v207;
  __n128 v208;
  _QWORD *v209;
  void **v210;
  uint64_t v211;
  uint64_t v212;
  _QWORD v213[3];
  uint64_t v214[3];
  uint64_t v215[3];
  uint64_t v216[3];
  _QWORD v217[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *p_on_zero_shared;
  _QWORD *v220;
  _QWORD v221[3];
  _QWORD *v222;
  _BYTE v223[24];
  _BYTE *v224;
  _QWORD v225[3];
  _QWORD *v226;
  uint64_t v227[3];

  v227[2] = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v209 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v11 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (std::__shared_weak_count_vtbl *)&v11->__on_zero_shared;
  v220 = &v11->__on_zero_shared;
  v11->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v11->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v10;
  Scalar = v11;
  v210 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&Scalar);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(0x10uLL);
  v206 = v14 + 2;
  v207 = v14 + 2;
  *v14 = v12;
  v14[1] = v13;
  v205 = v14;
  v211 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v205);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v17 = operator new(0x10uLL);
  v203 = v17 + 2;
  v204 = v17 + 2;
  *v17 = v15;
  v17[1] = v16;
  __p = v17;
  v212 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v210, 3, &v208);
  MIL::IRParameter::Make(&v208, v227);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", v227);
  v18 = v227[0];
  v227[0] = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = (std::__shared_weak_count *)v208.n128_u64[1];
  if (v208.n128_u64[1])
  {
    v20 = (unint64_t *)(v208.n128_u64[1] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (__p)
  {
    v203 = __p;
    operator delete(__p);
  }
  if (v205)
  {
    v206 = v205;
    operator delete(v205);
  }
  if (Scalar)
  {
    p_on_zero_shared = Scalar;
    operator delete(Scalar);
  }
  v22 = v209;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v201);
  MIL::IRParameter::Make(&v201, (uint64_t *)&v210);
  v23 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v22, "axis", (uint64_t *)&v210);
  v24 = v210;
  v210 = 0;
  if (v24)
    (*((void (**)(void **))*v24 + 1))(v24);
  v25 = (std::__shared_weak_count *)v201.n128_u64[1];
  if (v201.n128_u64[1])
  {
    v26 = (unint64_t *)(v201.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v23 + 5) + 32))(*((_QWORD *)v23 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v23 + 5) + 48))(*((_QWORD *)v23 + 5), 1);
  v28 = v209;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v200);
  MIL::IRParameter::Make(&v200, (uint64_t *)&v210);
  v29 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v28, "keep_dims", (uint64_t *)&v210);
  v30 = v210;
  v210 = 0;
  if (v30)
    (*((void (**)(void **))*v30 + 1))(v30);
  v31 = (std::__shared_weak_count *)v200.n128_u64[1];
  if (v200.n128_u64[1])
  {
    v32 = (unint64_t *)(v200.n128_u64[1] + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v29 + 5) + 32))(*((_QWORD *)v29 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v29 + 5) + 48))(*((_QWORD *)v29 + 5), 1);
  v34 = v209;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v199);
  MIL::IRParameter::Make(&v199, (uint64_t *)&v210);
  v35 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v34, "output_dtype", (uint64_t *)&v210);
  v36 = v210;
  v210 = 0;
  if (v36)
    (*((void (**)(void **))*v36 + 1))(v36);
  v37 = (std::__shared_weak_count *)v199.n128_u64[1];
  if (v199.n128_u64[1])
  {
    v38 = (unint64_t *)(v199.n128_u64[1] + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v35 + 5) + 32))(*((_QWORD *)v35 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v35 + 5) + 48))(*((_QWORD *)v35 + 5), 1);
  v198 = 0;
  v40 = operator new();
  *(_QWORD *)v40 = 0;
  *(_QWORD *)(v40 + 8) = 0;
  *(_QWORD *)(v40 + 16) = 0;
  v210 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v198, (void **)v40);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v210, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v198, 1uLL);
  v41 = v198;
  v42 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v43 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v43;
  v43->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v42;
  p_on_zero_shared = (std::__shared_weak_count_vtbl *)&v43->~__shared_weak_count_0;
  v220 = &v43->~__shared_weak_count_0;
  v227[0] = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&Scalar);
  v44 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v45 = operator new(8uLL);
  v205 = v45;
  *v45 = v44;
  v206 = v45 + 1;
  v207 = v45 + 1;
  v227[1] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v205);
  MIL::IRParameter::MakeTypeSet((uint64_t)v227, 2, &v196);
  MIL::IRParameter::Make(&v196, (uint64_t *)&v197);
  v46 = v197;
  __p = v197;
  if (v197)
  {
    v47 = (_QWORD *)operator new();
    v48 = v197;
    *v47 = &unk_1EA99F888;
    v47[1] = 0;
    v47[2] = 0;
    v47[3] = v48;
  }
  else
  {
    v47 = 0;
  }
  v203 = v47;
  v197 = 0;
  v49 = v41[2];
  v50 = v41[1];
  if (v50 >= v49)
  {
    v52 = (v50 - *v41) >> 4;
    v53 = v52 + 1;
    if ((unint64_t)(v52 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v54 = v49 - *v41;
    if (v54 >> 3 > v53)
      v53 = v54 >> 3;
    if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF0)
      v55 = 0xFFFFFFFFFFFFFFFLL;
    else
      v55 = v53;
    v213[1] = v41 + 2;
    v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v41 + 2), v55);
    v58 = &v56[16 * v52];
    *(_QWORD *)v58 = v46;
    *((_QWORD *)v58 + 1) = v47;
    __p = 0;
    v203 = 0;
    v60 = *v41;
    v59 = v41[1];
    if (v59 == *v41)
    {
      v63 = (void **)v41[1];
      v61 = &v56[16 * v52];
    }
    else
    {
      v61 = &v56[16 * v52];
      do
      {
        v62 = *((_OWORD *)v59 - 1);
        v59 -= 16;
        *((_OWORD *)v61 - 1) = v62;
        v61 -= 16;
        *(_QWORD *)v59 = 0;
        *((_QWORD *)v59 + 1) = 0;
      }
      while (v59 != v60);
      v63 = (void **)*v41;
      v59 = v41[1];
    }
    v51 = v58 + 16;
    *v41 = v61;
    v211 = (uint64_t)v63;
    v41[1] = v58 + 16;
    v212 = (uint64_t)v59;
    v64 = v41[2];
    v41[2] = &v56[16 * v57];
    v213[0] = v64;
    v210 = v63;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v210);
  }
  else
  {
    *(_QWORD *)v50 = v46;
    *((_QWORD *)v50 + 1) = v47;
    v51 = v50 + 16;
    __p = 0;
    v203 = 0;
  }
  v41[1] = v51;
  v65 = v197;
  v197 = 0;
  if (v65)
    (*(void (**)(void *))(*(_QWORD *)v65 + 8))(v65);
  v66 = (std::__shared_weak_count *)v196.n128_u64[1];
  if (v196.n128_u64[1])
  {
    v67 = (unint64_t *)(v196.n128_u64[1] + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if (v205)
  {
    v206 = v205;
    operator delete(v205);
  }
  if (Scalar)
  {
    p_on_zero_shared = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v194 = *(_OWORD *)a2;
  v195 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v69 = (uint64_t)v209;
  *(_QWORD *)&v193 = v209;
  if (v209)
  {
    v70 = (_QWORD *)operator new();
    *v70 = &unk_1EA99F8E8;
    v70[1] = 0;
    v70[2] = 0;
    v70[3] = v69;
  }
  else
  {
    v70 = 0;
  }
  *((_QWORD *)&v193 + 1) = v70;
  v209 = 0;
  *(_QWORD *)&v192 = v198;
  if (v198)
  {
    v71 = (_QWORD *)operator new();
    v72 = v198;
    *v71 = &unk_1EA99F948;
    v71[1] = 0;
    v71[2] = 0;
    v71[3] = v72;
  }
  else
  {
    v71 = 0;
  }
  *((_QWORD *)&v192 + 1) = v71;
  v198 = 0;
  if (*(_QWORD *)(a3 + 24))
  {
    std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v225, a3);
  }
  else
  {
    v225[0] = &unk_1EA99FAC8;
    v225[1] = MIL::Operators::Common::ios17::CustomValidators::ValidateBaseArgReduction;
    v226 = v225;
  }
  v224 = 0;
  MIL::IROperator::Make((__int128 *)v194, &v193, &v192, (uint64_t)v225, (uint64_t)v223, a4);
  v73 = v224;
  if (v224 == v223)
  {
    v74 = 4;
    v73 = v223;
  }
  else
  {
    if (!v224)
      goto LABEL_77;
    v74 = 5;
  }
  (*(void (**)(void))(*v73 + 8 * v74))();
LABEL_77:
  v75 = v226;
  if (v226 == v225)
  {
    v76 = 4;
    v75 = v225;
    goto LABEL_81;
  }
  if (v226)
  {
    v76 = 5;
LABEL_81:
    (*(void (**)(void))(*v75 + 8 * v76))();
  }
  v77 = (std::__shared_weak_count *)*((_QWORD *)&v192 + 1);
  if (*((_QWORD *)&v192 + 1))
  {
    v78 = (unint64_t *)(*((_QWORD *)&v192 + 1) + 8);
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v80 = (std::__shared_weak_count *)*((_QWORD *)&v193 + 1);
  if (*((_QWORD *)&v193 + 1))
  {
    v81 = (unint64_t *)(*((_QWORD *)&v193 + 1) + 8);
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  if (SHIBYTE(v195) < 0)
    operator delete(v194[0]);
  v205 = 0;
  v83 = (_OWORD *)operator new();
  *v83 = 0u;
  v83[1] = 0u;
  *((_DWORD *)v83 + 8) = 1065353216;
  v205 = v83;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v191);
  MIL::IRParameter::Make(&v191, (uint64_t *)&v210);
  v84 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v83, "minimum_compute_type", (uint64_t *)&v210);
  v85 = v210;
  v210 = 0;
  if (v85)
    (*((void (**)(void **))*v85 + 1))(v85);
  v86 = (std::__shared_weak_count *)v191.n128_u64[1];
  if (v191.n128_u64[1])
  {
    v87 = (unint64_t *)(v191.n128_u64[1] + 8);
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v84 + 5) + 32))(*((_QWORD *)v84 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v84 + 5) + 48))(*((_QWORD *)v84 + 5), 1);
  v89 = *a4;
  v90 = (std::__shared_weak_count_vtbl *)v205;
  v189 = v205;
  if (v205)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v90;
  }
  else
  {
    v91 = 0;
  }
  v190 = v91;
  v205 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v89 + 184))(v89, &v189);
  v92 = v190;
  if (v190)
  {
    p_shared_owners = (unint64_t *)&v190->__shared_owners_;
    do
      v94 = __ldaxr(p_shared_owners);
    while (__stlxr(v94 - 1, p_shared_owners));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = *a4;
  v221[0] = &off_1EA99FBD8;
  v221[1] = MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceBaseArgReduction;
  v222 = v221;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v95 + 200))(v95, v221);
  v96 = v222;
  if (v222 == v221)
  {
    v97 = 4;
    v96 = v221;
  }
  else
  {
    if (!v222)
      goto LABEL_114;
    v97 = 5;
  }
  (*(void (**)(void))(*v96 + 8 * v97))();
LABEL_114:
  MIL::Validation::TensorDTypeConstraints::Make(&v210);
  v98 = v210;
  std::string::basic_string[abi:ne180100]<0>(v185, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v185, 0, (uint64_t *)&Scalar);
  v187 = Scalar;
  if (Scalar)
  {
    v99 = (std::__shared_weak_count *)operator new();
    v100 = Scalar;
    v99->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v99->__shared_owners_ = 0;
    v99->__shared_weak_owners_ = 0;
    v99[1].__vftable = v100;
  }
  else
  {
    v99 = 0;
  }
  v188 = v99;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v183, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v98 + 3))(v98, &v187, v183);
  if (v184 < 0)
    operator delete(v183[0]);
  v101 = v188;
  if (v188)
  {
    v102 = (unint64_t *)&v188->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = Scalar;
  Scalar = 0;
  if (v104)
    (*((void (**)(std::__shared_weak_count_vtbl *))v104->~__shared_weak_count + 1))(v104);
  if (v186 < 0)
    operator delete(v185[0]);
  v105 = v210;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v181 = Scalar;
  if (Scalar)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = Scalar;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = v107;
  }
  else
  {
    v106 = 0;
  }
  v182 = v106;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v179, "OUT_T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v105 + 3))(v105, &v181, v179);
  if (v180 < 0)
    operator delete(v179[0]);
  v108 = v182;
  if (v182)
  {
    v109 = (unint64_t *)&v182->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = Scalar;
  Scalar = 0;
  if (v111)
    (*((void (**)(std::__shared_weak_count_vtbl *))v111->~__shared_weak_count + 1))(v111);
  v112 = *a4;
  v177 = v210;
  if (v210)
  {
    v113 = (std::__shared_weak_count *)operator new();
    v114 = v210;
    v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v113->__shared_owners_ = 0;
    v113->__shared_weak_owners_ = 0;
    v113[1].__vftable = (std::__shared_weak_count_vtbl *)v114;
  }
  else
  {
    v113 = 0;
  }
  v178 = v113;
  v210 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v112 + 56))(v112, &v177);
  v115 = v178;
  if (v178)
  {
    v116 = (unint64_t *)&v178->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = v210;
  v210 = 0;
  if (v118)
    (*((void (**)(void **))*v118 + 1))(v118);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v210);
  v119 = v210;
  std::string::basic_string[abi:ne180100]<0>(v173, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v173, 0, (uint64_t *)&Scalar);
  v175 = Scalar;
  if (Scalar)
  {
    v120 = (std::__shared_weak_count *)operator new();
    v121 = Scalar;
    v120->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v120->__shared_owners_ = 0;
    v120->__shared_weak_owners_ = 0;
    v120[1].__vftable = v121;
  }
  else
  {
    v120 = 0;
  }
  v176 = v120;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v171, "D");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v119 + 3))(v119, &v175, 0, v171);
  if (v172 < 0)
    operator delete(v171[0]);
  v122 = v176;
  if (v176)
  {
    v123 = (unint64_t *)&v176->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v125 = Scalar;
  Scalar = 0;
  if (v125)
    (*((void (**)(std::__shared_weak_count_vtbl *))v125->~__shared_weak_count + 1))(v125);
  if (v174 < 0)
    operator delete(v173[0]);
  v126 = *a4;
  v169 = v210;
  if (v210)
  {
    v127 = (std::__shared_weak_count *)operator new();
    v128 = v210;
    v127->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v127->__shared_owners_ = 0;
    v127->__shared_weak_owners_ = 0;
    v127[1].__vftable = (std::__shared_weak_count_vtbl *)v128;
  }
  else
  {
    v127 = 0;
  }
  v170 = v127;
  v210 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v126 + 56))(v126, &v169);
  v129 = v170;
  if (v170)
  {
    v130 = (unint64_t *)&v170->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v132 = v210;
  v210 = 0;
  if (v132)
    (*((void (**)(void **))*v132 + 1))(v132);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v133 = __p;
  std::string::basic_string[abi:ne180100]<0>(v165, "output_dtype");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v165, 1, v227);
  v167 = v227[0];
  if (v227[0])
  {
    v134 = (std::__shared_weak_count *)operator new();
    v135 = v227[0];
    v134->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v134->__shared_owners_ = 0;
    v134->__shared_weak_owners_ = 0;
    v134[1].__vftable = (std::__shared_weak_count_vtbl *)v135;
  }
  else
  {
    v134 = 0;
  }
  v168 = v134;
  v227[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v210, "int32");
  std::string::basic_string[abi:ne180100]<0>(v213, "uint16");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v210, 2);
  (*(void (**)(void *, uint64_t *, std::__shared_weak_count_vtbl **, _QWORD))(*(_QWORD *)v133 + 24))(v133, &v167, &Scalar, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v213[i + 2]) < 0)
      operator delete((void *)v213[i]);
  }
  v137 = v168;
  if (v168)
  {
    v138 = (unint64_t *)&v168->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v140 = v227[0];
  v227[0] = 0;
  if (v140)
    (*(void (**)(uint64_t))(*(_QWORD *)v140 + 8))(v140);
  if (v166 < 0)
    operator delete(v165[0]);
  v141 = __p;
  std::string::basic_string[abi:ne180100]<0>(v161, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v161, 1, v227);
  v163 = v227[0];
  if (v227[0])
  {
    v142 = (std::__shared_weak_count *)operator new();
    v143 = v227[0];
    v142->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v142->__shared_owners_ = 0;
    v142->__shared_weak_owners_ = 0;
    v142[1].__vftable = (std::__shared_weak_count_vtbl *)v143;
  }
  else
  {
    v142 = 0;
  }
  v164 = v142;
  v227[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v210, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v213, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v214, "int32");
  std::string::basic_string[abi:ne180100]<0>(v215, "int8");
  std::string::basic_string[abi:ne180100]<0>(v216, "uint16");
  std::string::basic_string[abi:ne180100]<0>(v217, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v210, 6);
  (*(void (**)(void *, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v141 + 24))(v141, &v163, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -18; j -= 3)
  {
    if (SHIBYTE(v217[j + 2]) < 0)
      operator delete((void *)v217[j]);
  }
  v145 = v164;
  if (v164)
  {
    v146 = (unint64_t *)&v164->__shared_owners_;
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  v148 = v227[0];
  v227[0] = 0;
  if (v148)
    (*(void (**)(uint64_t))(*(_QWORD *)v148 + 8))(v148);
  if (v162 < 0)
    operator delete(v161[0]);
  v149 = *a4;
  v159 = __p;
  if (__p)
  {
    v150 = (std::__shared_weak_count *)operator new();
    v151 = (std::__shared_weak_count_vtbl *)__p;
    v150->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v150->__shared_owners_ = 0;
    v150->__shared_weak_owners_ = 0;
    v150[1].__vftable = v151;
  }
  else
  {
    v150 = 0;
  }
  v160 = v150;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v149 + 56))(v149, &v159);
  v152 = v160;
  if (v160)
  {
    v153 = (unint64_t *)&v160->__shared_owners_;
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
    }
  }
  v155 = __p;
  __p = 0;
  if (v155)
    (*(void (**)(void *))(*(_QWORD *)v155 + 8))(v155);
  if (v205)
  {
    v156 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v205);
    MEMORY[0x1E0C023A0](v156, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v198, 0);
  result = (uint64_t)v209;
  if (v209)
  {
    v158 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v209);
    return MEMORY[0x1E0C023A0](v158, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E091EFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void **a61,uint64_t a62,uint64_t a63)
{
  void *a68;
  void *a71;
  uint64_t *v71;
  void *v73;
  uint64_t v74;

  v73 = a68;
  a68 = 0;
  if (v73)
    (*(void (**)(void *))(*(_QWORD *)v73 + 8))(v73);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a71, 0);
  v74 = *v71;
  *v71 = 0;
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a61, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x218], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::ReduceArgmax::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios17::BaseArgReduction::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E091F64C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::Builder::OperationBuilder::AddInput((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::ReduceArgmin::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios17::BaseArgReduction::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E091F74C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::Builder::OperationBuilder::AddInput((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::BaseScatter::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  void *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  unsigned __int8 *v55;
  void *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  _QWORD *v86;
  unsigned __int8 *v87;
  void *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  char **v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t *v120;
  char *v121;
  char *v122;
  char *v123;
  __int128 v124;
  char *v125;
  char *v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  char **v134;
  _QWORD *v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  _OWORD *v145;
  unsigned __int8 *v146;
  void *v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  uint64_t v151;
  std::__shared_weak_count_vtbl *v152;
  std::__shared_weak_count *v153;
  std::__shared_weak_count *v154;
  unint64_t *p_shared_owners;
  unint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  void *v160;
  std::__shared_weak_count *v161;
  std::__shared_weak_count_vtbl *v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  char *v166;
  void *v167;
  std::__shared_weak_count *v168;
  std::__shared_weak_count_vtbl *v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  char *v173;
  void *v174;
  std::__shared_weak_count *v175;
  std::__shared_weak_count_vtbl *v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  char *v180;
  void *v181;
  std::__shared_weak_count *v182;
  std::__shared_weak_count_vtbl *v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  char *v187;
  uint64_t v188;
  std::__shared_weak_count *v189;
  std::__shared_weak_count_vtbl *v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  void *v194;
  void *v195;
  std::__shared_weak_count *v196;
  std::__shared_weak_count_vtbl *v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  char *v201;
  void *v202;
  std::__shared_weak_count *v203;
  std::__shared_weak_count_vtbl *v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  char *v208;
  void *v209;
  std::__shared_weak_count *v210;
  std::__shared_weak_count_vtbl *v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  char *v215;
  uint64_t v216;
  std::__shared_weak_count *v217;
  std::__shared_weak_count_vtbl *v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  void *v222;
  void *v223;
  std::__shared_weak_count *v224;
  std::__shared_weak_count_vtbl *v225;
  uint64_t i;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  void *v230;
  void *v231;
  std::__shared_weak_count *v232;
  std::__shared_weak_count_vtbl *v233;
  uint64_t j;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  void *v238;
  uint64_t v239;
  std::__shared_weak_count *v240;
  std::__shared_weak_count_vtbl *v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  void *v245;
  uint64_t v246;
  uint64_t result;
  uint64_t v248;
  void *v249;
  std::__shared_weak_count *v250;
  void *v251[2];
  char v252;
  void *v253;
  std::__shared_weak_count *v254;
  void *v255[2];
  char v256;
  void *v257;
  std::__shared_weak_count *v258;
  void *v259;
  std::__shared_weak_count *v260;
  void *v261[2];
  char v262;
  void *v263[2];
  char v264;
  char *v265;
  std::__shared_weak_count *v266;
  void *v267[2];
  char v268;
  void *v269[2];
  char v270;
  char *v271;
  std::__shared_weak_count *v272;
  void *v273[2];
  char v274;
  void *v275[2];
  char v276;
  char *v277;
  std::__shared_weak_count *v278;
  void *v279;
  std::__shared_weak_count *v280;
  void *v281[2];
  char v282;
  char *v283;
  std::__shared_weak_count *v284;
  void *v285[2];
  char v286;
  void *v287[2];
  char v288;
  char *v289;
  std::__shared_weak_count *v290;
  void *v291[2];
  char v292;
  void *v293[2];
  char v294;
  char *v295;
  std::__shared_weak_count *v296;
  void *v297[2];
  char v298;
  void *v299[2];
  char v300;
  char *v301;
  std::__shared_weak_count *v302;
  void *v303;
  std::__shared_weak_count *v304;
  __n128 v305;
  __int128 v306;
  __int128 v307;
  void *v308[2];
  uint64_t v309;
  void *v310;
  void *v311;
  _QWORD *v312;
  __n128 v313;
  uint64_t v314;
  uint64_t v315;
  _QWORD *v316;
  char **v317;
  __n128 v318;
  __n128 v319;
  __n128 v320;
  __n128 v321;
  void *__p;
  void *v323;
  _QWORD *v324;
  void *v325;
  void *v326;
  _QWORD *v327;
  void *v328;
  void *v329;
  _QWORD *v330;
  void *v331;
  void *v332;
  _QWORD *v333;
  void *v334;
  void *v335;
  _QWORD *v336;
  void *v337;
  void *v338;
  _QWORD *v339;
  __n128 v340;
  _QWORD *v341;
  void *v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  _QWORD v348[3];
  _QWORD v349[3];
  _QWORD v350[3];
  uint64_t v351[3];
  _QWORD v352[3];
  _BYTE v353[24];
  _BYTE *v354;
  _BYTE v355[24];
  _BYTE *v356;
  _BYTE v357[24];
  _BYTE *v358;
  char *Scalar;
  char *v360;
  char *v361;
  char *v362;
  char **v363;
  uint64_t v364;

  v364 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v341 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v11 = (char *)operator new(0x10uLL);
  v360 = v11 + 16;
  v361 = v11 + 16;
  *(_QWORD *)v11 = v9;
  *((_QWORD *)v11 + 1) = v10;
  Scalar = v11;
  v342 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(0x10uLL);
  v339 = v14 + 2;
  *v14 = v12;
  v14[1] = v13;
  v337 = v14;
  v338 = v14 + 2;
  v343 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v337);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v17 = operator new(0x10uLL);
  v336 = v17 + 2;
  *v17 = v15;
  v17[1] = v16;
  v334 = v17;
  v335 = v17 + 2;
  v344 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v334);
  v18 = MIL::IRUnknownDimension::Make(a1, 0);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(0x10uLL);
  v333 = v20 + 2;
  *v20 = v18;
  v20[1] = v19;
  v331 = v20;
  v332 = v20 + 2;
  v345 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v331);
  v21 = MIL::IRUnknownDimension::Make(a1, 0);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(0x10uLL);
  v330 = v23 + 2;
  *v23 = v21;
  v23[1] = v22;
  v328 = v23;
  v329 = v23 + 2;
  v346 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v328);
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = operator new(0x10uLL);
  v327 = v26 + 2;
  *v26 = v24;
  v26[1] = v25;
  v325 = v26;
  v326 = v26 + 2;
  v347 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v325);
  v27 = MIL::IRUnknownDimension::Make(a1, 0);
  v28 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v29 = operator new(0x10uLL);
  v324 = v29 + 2;
  *v29 = v27;
  v29[1] = v28;
  __p = v29;
  v323 = v29 + 2;
  v348[0] = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v342, 7, &v340);
  MIL::IRParameter::Make(&v340, (uint64_t *)&v310);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "data", (uint64_t *)&v310);
  v30 = v310;
  v310 = 0;
  if (v30)
    (*(void (**)(void *))(*(_QWORD *)v30 + 8))(v30);
  v31 = (std::__shared_weak_count *)v340.n128_u64[1];
  if (v340.n128_u64[1])
  {
    v32 = (unint64_t *)(v340.n128_u64[1] + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (__p)
  {
    v323 = __p;
    operator delete(__p);
  }
  if (v325)
  {
    v326 = v325;
    operator delete(v325);
  }
  if (v328)
  {
    v329 = v328;
    operator delete(v328);
  }
  if (v331)
  {
    v332 = v331;
    operator delete(v331);
  }
  if (v334)
  {
    v335 = v334;
    operator delete(v334);
  }
  if (v337)
  {
    v338 = v337;
    operator delete(v337);
  }
  if (Scalar)
  {
    v360 = Scalar;
    operator delete(Scalar);
  }
  v34 = v341;
  v35 = MIL::IRUnknownDimension::Make(a1, 0);
  v36 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v37 = (char *)operator new(0x10uLL);
  v360 = v37 + 16;
  v361 = v37 + 16;
  *(_QWORD *)v37 = v35;
  *((_QWORD *)v37 + 1) = v36;
  Scalar = v37;
  v342 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&Scalar);
  v38 = MIL::IRUnknownDimension::Make(a1, 0);
  v39 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v40 = operator new(0x10uLL);
  v339 = v40 + 2;
  *v40 = v38;
  v40[1] = v39;
  v337 = v40;
  v338 = v40 + 2;
  v343 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v337);
  v41 = MIL::IRUnknownDimension::Make(a1, 0);
  v42 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v43 = operator new(0x10uLL);
  v336 = v43 + 2;
  *v43 = v41;
  v43[1] = v42;
  v334 = v43;
  v335 = v43 + 2;
  v344 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v334);
  v44 = MIL::IRUnknownDimension::Make(a1, 0);
  v45 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v46 = operator new(0x10uLL);
  v333 = v46 + 2;
  *v46 = v44;
  v46[1] = v45;
  v331 = v46;
  v332 = v46 + 2;
  v345 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v331);
  v47 = MIL::IRUnknownDimension::Make(a1, 0);
  v48 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v49 = operator new(0x10uLL);
  v330 = v49 + 2;
  *v49 = v47;
  v49[1] = v48;
  v328 = v49;
  v329 = v49 + 2;
  v346 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v328);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v342, 5, &v321);
  MIL::IRParameter::Make(&v321, (uint64_t *)&v325);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v34, "indices", (uint64_t *)&v325);
  v50 = v325;
  v325 = 0;
  if (v50)
    (*(void (**)(void *))(*(_QWORD *)v50 + 8))(v50);
  v51 = (std::__shared_weak_count *)v321.n128_u64[1];
  if (v321.n128_u64[1])
  {
    v52 = (unint64_t *)(v321.n128_u64[1] + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  if (v328)
  {
    v329 = v328;
    operator delete(v328);
  }
  if (v331)
  {
    v332 = v331;
    operator delete(v331);
  }
  if (v334)
  {
    v335 = v334;
    operator delete(v334);
  }
  if (v337)
  {
    v338 = v337;
    operator delete(v337);
  }
  if (Scalar)
  {
    v360 = Scalar;
    operator delete(Scalar);
  }
  v54 = v341;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v320);
  MIL::IRParameter::Make(&v320, (uint64_t *)&v342);
  v55 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v54, "validate_indices", (uint64_t *)&v342);
  v56 = v342;
  v342 = 0;
  if (v56)
    (*(void (**)(void *))(*(_QWORD *)v56 + 8))(v56);
  v57 = (std::__shared_weak_count *)v320.n128_u64[1];
  if (v320.n128_u64[1])
  {
    v58 = (unint64_t *)(v320.n128_u64[1] + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v55 + 5) + 32))(*((_QWORD *)v55 + 5), 1);
  v60 = v341;
  v61 = MIL::IRUnknownDimension::Make(a1, 0);
  v62 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v63 = (char *)operator new(0x10uLL);
  v360 = v63 + 16;
  v361 = v63 + 16;
  *(_QWORD *)v63 = v61;
  *((_QWORD *)v63 + 1) = v62;
  Scalar = v63;
  v342 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v64 = MIL::IRUnknownDimension::Make(a1, 0);
  v65 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v66 = operator new(0x10uLL);
  v339 = v66 + 2;
  *v66 = v64;
  v66[1] = v65;
  v337 = v66;
  v338 = v66 + 2;
  v343 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v337);
  v67 = MIL::IRUnknownDimension::Make(a1, 0);
  v68 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v69 = operator new(0x10uLL);
  v336 = v69 + 2;
  *v69 = v67;
  v69[1] = v68;
  v334 = v69;
  v335 = v69 + 2;
  v344 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v334);
  v70 = MIL::IRUnknownDimension::Make(a1, 0);
  v71 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v72 = operator new(0x10uLL);
  v333 = v72 + 2;
  *v72 = v70;
  v72[1] = v71;
  v331 = v72;
  v332 = v72 + 2;
  v345 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v331);
  v73 = MIL::IRUnknownDimension::Make(a1, 0);
  v74 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v75 = operator new(0x10uLL);
  v330 = v75 + 2;
  *v75 = v73;
  v75[1] = v74;
  v328 = v75;
  v329 = v75 + 2;
  v346 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v328);
  v76 = MIL::IRUnknownDimension::Make(a1, 0);
  v77 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v78 = operator new(0x10uLL);
  v327 = v78 + 2;
  *v78 = v76;
  v78[1] = v77;
  v325 = v78;
  v326 = v78 + 2;
  v347 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v325);
  v79 = MIL::IRUnknownDimension::Make(a1, 0);
  v80 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v81 = operator new(0x10uLL);
  v324 = v81 + 2;
  *v81 = v79;
  v81[1] = v80;
  __p = v81;
  v323 = v81 + 2;
  v348[0] = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v342, 7, &v319);
  MIL::IRParameter::Make(&v319, (uint64_t *)&v310);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v60, "updates", (uint64_t *)&v310);
  v82 = v310;
  v310 = 0;
  if (v82)
    (*(void (**)(void *))(*(_QWORD *)v82 + 8))(v82);
  v83 = (std::__shared_weak_count *)v319.n128_u64[1];
  if (v319.n128_u64[1])
  {
    v84 = (unint64_t *)(v319.n128_u64[1] + 8);
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  if (__p)
  {
    v323 = __p;
    operator delete(__p);
  }
  if (v325)
  {
    v326 = v325;
    operator delete(v325);
  }
  if (v328)
  {
    v329 = v328;
    operator delete(v328);
  }
  if (v331)
  {
    v332 = v331;
    operator delete(v331);
  }
  if (v334)
  {
    v335 = v334;
    operator delete(v334);
  }
  if (v337)
  {
    v338 = v337;
    operator delete(v337);
  }
  if (Scalar)
  {
    v360 = Scalar;
    operator delete(Scalar);
  }
  v86 = v341;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v318);
  MIL::IRParameter::Make(&v318, (uint64_t *)&v342);
  v87 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v86, "mode", (uint64_t *)&v342);
  v88 = v342;
  v342 = 0;
  if (v88)
    (*(void (**)(void *))(*(_QWORD *)v88 + 8))(v88);
  v89 = (std::__shared_weak_count *)v318.n128_u64[1];
  if (v318.n128_u64[1])
  {
    v90 = (unint64_t *)(v318.n128_u64[1] + 8);
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v87 + 5) + 32))(*((_QWORD *)v87 + 5), 1);
  v317 = 0;
  v92 = operator new();
  *(_QWORD *)v92 = 0;
  *(_QWORD *)(v92 + 8) = 0;
  *(_QWORD *)(v92 + 16) = 0;
  v342 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v317, (void **)v92);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v342, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v317, 1uLL);
  v93 = v317;
  v94 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v95 = operator new(8uLL);
  v337 = v95;
  *v95 = v94;
  v339 = v95 + 1;
  v338 = v95 + 1;
  v342 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v337);
  v96 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v97 = operator new(8uLL);
  v334 = v97;
  *v97 = v96;
  v336 = v97 + 1;
  v335 = v97 + 1;
  v343 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v334);
  v98 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v99 = operator new(8uLL);
  v331 = v99;
  *v99 = v98;
  v333 = v99 + 1;
  v332 = v99 + 1;
  v344 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v331);
  v100 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v101 = operator new(8uLL);
  v328 = v101;
  *v101 = v100;
  v330 = v101 + 1;
  v329 = v101 + 1;
  v345 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v328);
  v102 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v103 = operator new(8uLL);
  v325 = v103;
  *v103 = v102;
  v327 = v103 + 1;
  v326 = v103 + 1;
  v346 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v325);
  v104 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v105 = operator new(8uLL);
  __p = v105;
  *v105 = v104;
  v324 = v105 + 1;
  v323 = v105 + 1;
  v347 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&__p);
  v106 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v107 = operator new(8uLL);
  v310 = v107;
  *v107 = v106;
  v312 = v107 + 1;
  v311 = v107 + 1;
  v348[0] = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v310);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v342, 7, &v313);
  MIL::IRParameter::Make(&v313, &v314);
  v108 = v314;
  v315 = v314;
  if (v314)
  {
    v109 = (_QWORD *)operator new();
    v110 = v314;
    *v109 = &unk_1EA99F888;
    v109[1] = 0;
    v109[2] = 0;
    v109[3] = v110;
  }
  else
  {
    v109 = 0;
  }
  v316 = v109;
  v314 = 0;
  v111 = v93[2];
  v112 = v93[1];
  if (v112 >= v111)
  {
    v114 = (v112 - *v93) >> 4;
    v115 = v114 + 1;
    if ((unint64_t)(v114 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v116 = v111 - *v93;
    if (v116 >> 3 > v115)
      v115 = v116 >> 3;
    if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFF0)
      v117 = 0xFFFFFFFFFFFFFFFLL;
    else
      v117 = v115;
    v363 = v93 + 2;
    v118 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v93 + 2), v117);
    v120 = (uint64_t *)&v118[16 * v114];
    *v120 = v108;
    v120[1] = (uint64_t)v109;
    v316 = 0;
    v315 = 0;
    v122 = *v93;
    v121 = v93[1];
    if (v121 == *v93)
    {
      v125 = v93[1];
      v123 = &v118[16 * v114];
    }
    else
    {
      v123 = &v118[16 * v114];
      do
      {
        v124 = *((_OWORD *)v121 - 1);
        v121 -= 16;
        *((_OWORD *)v123 - 1) = v124;
        v123 -= 16;
        *(_QWORD *)v121 = 0;
        *((_QWORD *)v121 + 1) = 0;
      }
      while (v121 != v122);
      v125 = *v93;
      v121 = v93[1];
    }
    v113 = (char *)(v120 + 2);
    *v93 = v123;
    Scalar = v125;
    v360 = v125;
    v93[1] = (char *)(v120 + 2);
    v361 = v121;
    v126 = v93[2];
    v93[2] = &v118[16 * v119];
    v362 = v126;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v112 = v108;
    *((_QWORD *)v112 + 1) = v109;
    v113 = v112 + 16;
    v316 = 0;
    v315 = 0;
  }
  v93[1] = v113;
  v127 = v314;
  v314 = 0;
  if (v127)
    (*(void (**)(uint64_t))(*(_QWORD *)v127 + 8))(v127);
  v128 = (std::__shared_weak_count *)v313.n128_u64[1];
  if (v313.n128_u64[1])
  {
    v129 = (unint64_t *)(v313.n128_u64[1] + 8);
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  if (v310)
  {
    v311 = v310;
    operator delete(v310);
  }
  if (__p)
  {
    v323 = __p;
    operator delete(__p);
  }
  if (v325)
  {
    v326 = v325;
    operator delete(v325);
  }
  if (v328)
  {
    v329 = v328;
    operator delete(v328);
  }
  if (v331)
  {
    v332 = v331;
    operator delete(v331);
  }
  if (v334)
  {
    v335 = v334;
    operator delete(v334);
  }
  if (v337)
  {
    v338 = v337;
    operator delete(v337);
  }
  *(_OWORD *)v308 = *(_OWORD *)a2;
  v309 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v131 = (uint64_t)v341;
  *(_QWORD *)&v307 = v341;
  if (v341)
  {
    v132 = (_QWORD *)operator new();
    *v132 = &unk_1EA99F8E8;
    v132[1] = 0;
    v132[2] = 0;
    v132[3] = v131;
  }
  else
  {
    v132 = 0;
  }
  *((_QWORD *)&v307 + 1) = v132;
  v341 = 0;
  *(_QWORD *)&v306 = v317;
  if (v317)
  {
    v133 = (_QWORD *)operator new();
    v134 = v317;
    *v133 = &unk_1EA99F948;
    v133[1] = 0;
    v133[2] = 0;
    v133[3] = v134;
  }
  else
  {
    v133 = 0;
  }
  *((_QWORD *)&v306 + 1) = v133;
  v317 = 0;
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v357, a3);
  v356 = 0;
  MIL::IROperator::Make((__int128 *)v308, &v307, &v306, (uint64_t)v357, (uint64_t)v355, a4);
  v135 = v356;
  if (v356 == v355)
  {
    v136 = 4;
    v135 = v355;
  }
  else
  {
    if (!v356)
      goto LABEL_123;
    v136 = 5;
  }
  (*(void (**)(void))(*v135 + 8 * v136))();
LABEL_123:
  v137 = v358;
  if (v358 == v357)
  {
    v138 = 4;
    v137 = v357;
    goto LABEL_127;
  }
  if (v358)
  {
    v138 = 5;
LABEL_127:
    (*(void (**)(void))(*v137 + 8 * v138))();
  }
  v139 = (std::__shared_weak_count *)*((_QWORD *)&v306 + 1);
  if (*((_QWORD *)&v306 + 1))
  {
    v140 = (unint64_t *)(*((_QWORD *)&v306 + 1) + 8);
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  v142 = (std::__shared_weak_count *)*((_QWORD *)&v307 + 1);
  if (*((_QWORD *)&v307 + 1))
  {
    v143 = (unint64_t *)(*((_QWORD *)&v307 + 1) + 8);
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  if (SHIBYTE(v309) < 0)
    operator delete(v308[0]);
  v337 = 0;
  v145 = (_OWORD *)operator new();
  *v145 = 0u;
  v145[1] = 0u;
  *((_DWORD *)v145 + 8) = 1065353216;
  v337 = v145;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v305);
  MIL::IRParameter::Make(&v305, (uint64_t *)&v342);
  v146 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v145, "minimum_compute_type", (uint64_t *)&v342);
  v147 = v342;
  v342 = 0;
  if (v147)
    (*(void (**)(void *))(*(_QWORD *)v147 + 8))(v147);
  v148 = (std::__shared_weak_count *)v305.n128_u64[1];
  if (v305.n128_u64[1])
  {
    v149 = (unint64_t *)(v305.n128_u64[1] + 8);
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v146 + 5) + 32))(*((_QWORD *)v146 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v146 + 5) + 48))(*((_QWORD *)v146 + 5), 1);
  v151 = *a4;
  v152 = (std::__shared_weak_count_vtbl *)v337;
  v303 = v337;
  if (v337)
  {
    v153 = (std::__shared_weak_count *)operator new();
    v153->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v153->__shared_owners_ = 0;
    v153->__shared_weak_owners_ = 0;
    v153[1].__vftable = v152;
  }
  else
  {
    v153 = 0;
  }
  v304 = v153;
  v337 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v151 + 184))(v151, &v303);
  v154 = v304;
  if (v304)
  {
    p_shared_owners = (unint64_t *)&v304->__shared_owners_;
    do
      v156 = __ldaxr(p_shared_owners);
    while (__stlxr(v156 - 1, p_shared_owners));
    if (!v156)
    {
      ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
      std::__shared_weak_count::__release_weak(v154);
    }
  }
  v157 = *a4;
  std::string::basic_string[abi:ne180100]<0>(&v342, "data");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v342, (uint64_t)v353);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v157 + 200))(v157, v353);
  v158 = v354;
  if (v354 == v353)
  {
    v159 = 4;
    v158 = v353;
  }
  else
  {
    if (!v354)
      goto LABEL_160;
    v159 = 5;
  }
  (*(void (**)(void))(*v158 + 8 * v159))();
LABEL_160:
  if (SHIBYTE(v344) < 0)
    operator delete(v342);
  MIL::Validation::TensorDTypeConstraints::Make(&v342);
  v160 = v342;
  std::string::basic_string[abi:ne180100]<0>(v299, "data");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v299, 0, (uint64_t *)&Scalar);
  v301 = Scalar;
  if (Scalar)
  {
    v161 = (std::__shared_weak_count *)operator new();
    v162 = (std::__shared_weak_count_vtbl *)Scalar;
    v161->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v161->__shared_owners_ = 0;
    v161->__shared_weak_owners_ = 0;
    v161[1].__vftable = v162;
  }
  else
  {
    v161 = 0;
  }
  v302 = v161;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v297, "T");
  (*(void (**)(void *, char **, void **))(*(_QWORD *)v160 + 24))(v160, &v301, v297);
  if (v298 < 0)
    operator delete(v297[0]);
  v163 = v302;
  if (v302)
  {
    v164 = (unint64_t *)&v302->__shared_owners_;
    do
      v165 = __ldaxr(v164);
    while (__stlxr(v165 - 1, v164));
    if (!v165)
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v163);
    }
  }
  v166 = Scalar;
  Scalar = 0;
  if (v166)
    (*(void (**)(char *))(*(_QWORD *)v166 + 8))(v166);
  if (v300 < 0)
    operator delete(v299[0]);
  v167 = v342;
  std::string::basic_string[abi:ne180100]<0>(v293, "indices");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v293, 0, (uint64_t *)&Scalar);
  v295 = Scalar;
  if (Scalar)
  {
    v168 = (std::__shared_weak_count *)operator new();
    v169 = (std::__shared_weak_count_vtbl *)Scalar;
    v168->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v168->__shared_owners_ = 0;
    v168->__shared_weak_owners_ = 0;
    v168[1].__vftable = v169;
  }
  else
  {
    v168 = 0;
  }
  v296 = v168;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v291, "J");
  (*(void (**)(void *, char **, void **))(*(_QWORD *)v167 + 24))(v167, &v295, v291);
  if (v292 < 0)
    operator delete(v291[0]);
  v170 = v296;
  if (v296)
  {
    v171 = (unint64_t *)&v296->__shared_owners_;
    do
      v172 = __ldaxr(v171);
    while (__stlxr(v172 - 1, v171));
    if (!v172)
    {
      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
      std::__shared_weak_count::__release_weak(v170);
    }
  }
  v173 = Scalar;
  Scalar = 0;
  if (v173)
    (*(void (**)(char *))(*(_QWORD *)v173 + 8))(v173);
  if (v294 < 0)
    operator delete(v293[0]);
  v174 = v342;
  std::string::basic_string[abi:ne180100]<0>(v287, "updates");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v287, 0, (uint64_t *)&Scalar);
  v289 = Scalar;
  if (Scalar)
  {
    v175 = (std::__shared_weak_count *)operator new();
    v176 = (std::__shared_weak_count_vtbl *)Scalar;
    v175->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v175->__shared_owners_ = 0;
    v175->__shared_weak_owners_ = 0;
    v175[1].__vftable = v176;
  }
  else
  {
    v175 = 0;
  }
  v290 = v175;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v285, "T");
  (*(void (**)(void *, char **, void **))(*(_QWORD *)v174 + 24))(v174, &v289, v285);
  if (v286 < 0)
    operator delete(v285[0]);
  v177 = v290;
  if (v290)
  {
    v178 = (unint64_t *)&v290->__shared_owners_;
    do
      v179 = __ldaxr(v178);
    while (__stlxr(v179 - 1, v178));
    if (!v179)
    {
      ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
      std::__shared_weak_count::__release_weak(v177);
    }
  }
  v180 = Scalar;
  Scalar = 0;
  if (v180)
    (*(void (**)(char *))(*(_QWORD *)v180 + 8))(v180);
  if (v288 < 0)
    operator delete(v287[0]);
  v181 = v342;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v283 = Scalar;
  if (Scalar)
  {
    v182 = (std::__shared_weak_count *)operator new();
    v183 = (std::__shared_weak_count_vtbl *)Scalar;
    v182->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v182->__shared_owners_ = 0;
    v182->__shared_weak_owners_ = 0;
    v182[1].__vftable = v183;
  }
  else
  {
    v182 = 0;
  }
  v284 = v182;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v281, "T");
  (*(void (**)(void *, char **, void **))(*(_QWORD *)v181 + 24))(v181, &v283, v281);
  if (v282 < 0)
    operator delete(v281[0]);
  v184 = v284;
  if (v284)
  {
    v185 = (unint64_t *)&v284->__shared_owners_;
    do
      v186 = __ldaxr(v185);
    while (__stlxr(v186 - 1, v185));
    if (!v186)
    {
      ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
      std::__shared_weak_count::__release_weak(v184);
    }
  }
  v187 = Scalar;
  Scalar = 0;
  if (v187)
    (*(void (**)(char *))(*(_QWORD *)v187 + 8))(v187);
  v188 = *a4;
  v279 = v342;
  if (v342)
  {
    v189 = (std::__shared_weak_count *)operator new();
    v190 = (std::__shared_weak_count_vtbl *)v342;
    v189->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v189->__shared_owners_ = 0;
    v189->__shared_weak_owners_ = 0;
    v189[1].__vftable = v190;
  }
  else
  {
    v189 = 0;
  }
  v280 = v189;
  v342 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v188 + 56))(v188, &v279);
  v191 = v280;
  if (v280)
  {
    v192 = (unint64_t *)&v280->__shared_owners_;
    do
      v193 = __ldaxr(v192);
    while (__stlxr(v193 - 1, v192));
    if (!v193)
    {
      ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
      std::__shared_weak_count::__release_weak(v191);
    }
  }
  v194 = v342;
  v342 = 0;
  if (v194)
    (*(void (**)(void *))(*(_QWORD *)v194 + 8))(v194);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v342);
  v195 = v342;
  std::string::basic_string[abi:ne180100]<0>(v275, "data");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v275, 0, (uint64_t *)&Scalar);
  v277 = Scalar;
  if (Scalar)
  {
    v196 = (std::__shared_weak_count *)operator new();
    v197 = (std::__shared_weak_count_vtbl *)Scalar;
    v196->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v196->__shared_owners_ = 0;
    v196->__shared_weak_owners_ = 0;
    v196[1].__vftable = v197;
  }
  else
  {
    v196 = 0;
  }
  v278 = v196;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v273, "D");
  (*(void (**)(void *, char **, _QWORD, void **))(*(_QWORD *)v195 + 24))(v195, &v277, 0, v273);
  if (v274 < 0)
    operator delete(v273[0]);
  v198 = v278;
  if (v278)
  {
    v199 = (unint64_t *)&v278->__shared_owners_;
    do
      v200 = __ldaxr(v199);
    while (__stlxr(v200 - 1, v199));
    if (!v200)
    {
      ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
      std::__shared_weak_count::__release_weak(v198);
    }
  }
  v201 = Scalar;
  Scalar = 0;
  if (v201)
    (*(void (**)(char *))(*(_QWORD *)v201 + 8))(v201);
  if (v276 < 0)
    operator delete(v275[0]);
  v202 = v342;
  std::string::basic_string[abi:ne180100]<0>(v269, "indices");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v269, 0, (uint64_t *)&Scalar);
  v271 = Scalar;
  if (Scalar)
  {
    v203 = (std::__shared_weak_count *)operator new();
    v204 = (std::__shared_weak_count_vtbl *)Scalar;
    v203->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v203->__shared_owners_ = 0;
    v203->__shared_weak_owners_ = 0;
    v203[1].__vftable = v204;
  }
  else
  {
    v203 = 0;
  }
  v272 = v203;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v267, "I");
  (*(void (**)(void *, char **, _QWORD, void **))(*(_QWORD *)v202 + 24))(v202, &v271, 0, v267);
  if (v268 < 0)
    operator delete(v267[0]);
  v205 = v272;
  if (v272)
  {
    v206 = (unint64_t *)&v272->__shared_owners_;
    do
      v207 = __ldaxr(v206);
    while (__stlxr(v207 - 1, v206));
    if (!v207)
    {
      ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
      std::__shared_weak_count::__release_weak(v205);
    }
  }
  v208 = Scalar;
  Scalar = 0;
  if (v208)
    (*(void (**)(char *))(*(_QWORD *)v208 + 8))(v208);
  if (v270 < 0)
    operator delete(v269[0]);
  v209 = v342;
  std::string::basic_string[abi:ne180100]<0>(v263, "updates");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v263, 0, (uint64_t *)&Scalar);
  v265 = Scalar;
  if (Scalar)
  {
    v210 = (std::__shared_weak_count *)operator new();
    v211 = (std::__shared_weak_count_vtbl *)Scalar;
    v210->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v210->__shared_owners_ = 0;
    v210->__shared_weak_owners_ = 0;
    v210[1].__vftable = v211;
  }
  else
  {
    v210 = 0;
  }
  v266 = v210;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v261, "U");
  (*(void (**)(void *, char **, _QWORD, void **))(*(_QWORD *)v209 + 24))(v209, &v265, 0, v261);
  if (v262 < 0)
    operator delete(v261[0]);
  v212 = v266;
  if (v266)
  {
    v213 = (unint64_t *)&v266->__shared_owners_;
    do
      v214 = __ldaxr(v213);
    while (__stlxr(v214 - 1, v213));
    if (!v214)
    {
      ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
      std::__shared_weak_count::__release_weak(v212);
    }
  }
  v215 = Scalar;
  Scalar = 0;
  if (v215)
    (*(void (**)(char *))(*(_QWORD *)v215 + 8))(v215);
  if (v264 < 0)
    operator delete(v263[0]);
  v216 = *a4;
  v259 = v342;
  if (v342)
  {
    v217 = (std::__shared_weak_count *)operator new();
    v218 = (std::__shared_weak_count_vtbl *)v342;
    v217->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v217->__shared_owners_ = 0;
    v217->__shared_weak_owners_ = 0;
    v217[1].__vftable = v218;
  }
  else
  {
    v217 = 0;
  }
  v260 = v217;
  v342 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v216 + 56))(v216, &v259);
  v219 = v260;
  if (v260)
  {
    v220 = (unint64_t *)&v260->__shared_owners_;
    do
      v221 = __ldaxr(v220);
    while (__stlxr(v221 - 1, v220));
    if (!v221)
    {
      ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
      std::__shared_weak_count::__release_weak(v219);
    }
  }
  v222 = v342;
  v342 = 0;
  if (v222)
    (*(void (**)(void *))(*(_QWORD *)v222 + 8))(v222);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v334);
  v223 = v334;
  std::string::basic_string[abi:ne180100]<0>(v255, "mode");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v255, 0, (uint64_t *)&v331);
  v257 = v331;
  if (v331)
  {
    v224 = (std::__shared_weak_count *)operator new();
    v225 = (std::__shared_weak_count_vtbl *)v331;
    v224->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v224->__shared_owners_ = 0;
    v224->__shared_weak_owners_ = 0;
    v224[1].__vftable = v225;
  }
  else
  {
    v224 = 0;
  }
  v258 = v224;
  v331 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v342, "add");
  std::string::basic_string[abi:ne180100]<0>(&v345, "div");
  std::string::basic_string[abi:ne180100]<0>(v348, "max");
  std::string::basic_string[abi:ne180100]<0>(v349, "min");
  std::string::basic_string[abi:ne180100]<0>(v350, "mul");
  std::string::basic_string[abi:ne180100]<0>(v351, "sub");
  std::string::basic_string[abi:ne180100]<0>(v352, "update");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v342, 7);
  (*(void (**)(void *, void **, char **, _QWORD))(*(_QWORD *)v223 + 24))(v223, &v257, &Scalar, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -21; i -= 3)
  {
    if (SHIBYTE(v352[i + 2]) < 0)
      operator delete((void *)v352[i]);
  }
  v227 = v258;
  if (v258)
  {
    v228 = (unint64_t *)&v258->__shared_owners_;
    do
      v229 = __ldaxr(v228);
    while (__stlxr(v229 - 1, v228));
    if (!v229)
    {
      ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
      std::__shared_weak_count::__release_weak(v227);
    }
  }
  v230 = v331;
  v331 = 0;
  if (v230)
    (*(void (**)(void *))(*(_QWORD *)v230 + 8))(v230);
  if (v256 < 0)
    operator delete(v255[0]);
  v231 = v334;
  std::string::basic_string[abi:ne180100]<0>(v251, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v251, 1, (uint64_t *)&v331);
  v253 = v331;
  if (v331)
  {
    v232 = (std::__shared_weak_count *)operator new();
    v233 = (std::__shared_weak_count_vtbl *)v331;
    v232->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v232->__shared_owners_ = 0;
    v232->__shared_weak_owners_ = 0;
    v232[1].__vftable = v233;
  }
  else
  {
    v232 = 0;
  }
  v254 = v232;
  v331 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v342, "fp16");
  std::string::basic_string[abi:ne180100]<0>(&v345, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v348, "int32");
  std::string::basic_string[abi:ne180100]<0>(v349, "int8");
  std::string::basic_string[abi:ne180100]<0>(v350, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v342, 5);
  (*(void (**)(void *, void **, char **, uint64_t))(*(_QWORD *)v231 + 24))(v231, &v253, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -15; j -= 3)
  {
    if (SHIBYTE(v350[j + 2]) < 0)
      operator delete((void *)v350[j]);
  }
  v235 = v254;
  if (v254)
  {
    v236 = (unint64_t *)&v254->__shared_owners_;
    do
      v237 = __ldaxr(v236);
    while (__stlxr(v237 - 1, v236));
    if (!v237)
    {
      ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
      std::__shared_weak_count::__release_weak(v235);
    }
  }
  v238 = v331;
  v331 = 0;
  if (v238)
    (*(void (**)(void *))(*(_QWORD *)v238 + 8))(v238);
  if (v252 < 0)
    operator delete(v251[0]);
  v239 = *a4;
  v249 = v334;
  if (v334)
  {
    v240 = (std::__shared_weak_count *)operator new();
    v241 = (std::__shared_weak_count_vtbl *)v334;
    v240->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v240->__shared_owners_ = 0;
    v240->__shared_weak_owners_ = 0;
    v240[1].__vftable = v241;
  }
  else
  {
    v240 = 0;
  }
  v250 = v240;
  v334 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v239 + 56))(v239, &v249);
  v242 = v250;
  if (v250)
  {
    v243 = (unint64_t *)&v250->__shared_owners_;
    do
      v244 = __ldaxr(v243);
    while (__stlxr(v244 - 1, v243));
    if (!v244)
    {
      ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
      std::__shared_weak_count::__release_weak(v242);
    }
  }
  v245 = v334;
  v334 = 0;
  if (v245)
    (*(void (**)(void *))(*(_QWORD *)v245 + 8))(v245);
  if (v337)
  {
    v246 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v337);
    MEMORY[0x1E0C023A0](v246, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v317, 0);
  result = (uint64_t)v341;
  if (v341)
  {
    v248 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v341);
    return MEMORY[0x1E0C023A0](v248, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09216C4(_Unwind_Exception *a1)
{
  uint64_t *v1;
  unint64_t v3;
  uint64_t v4;

  v3 = STACK[0x370];
  STACK[0x370] = 0;
  if (v3)
    (*(void (**)(unint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x388], 0);
  v4 = *v1;
  *v1 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x2C8], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x3B0], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::BaseScatterWithAxis::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  void *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  unsigned __int8 *v55;
  void *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  _QWORD *v86;
  unsigned __int8 *v87;
  void *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  _QWORD *v92;
  unsigned __int8 *v93;
  void *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  char **v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  char *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t *v126;
  char *v127;
  char *v128;
  char *v129;
  __int128 v130;
  char *v131;
  char *v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  char **v140;
  _QWORD *v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  _OWORD *v151;
  unsigned __int8 *v152;
  void *v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  uint64_t v157;
  std::__shared_weak_count_vtbl *v158;
  std::__shared_weak_count *v159;
  std::__shared_weak_count *v160;
  unint64_t *p_shared_owners;
  unint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  void *v166;
  std::__shared_weak_count *v167;
  std::__shared_weak_count_vtbl *v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  char *v172;
  void *v173;
  std::__shared_weak_count *v174;
  std::__shared_weak_count_vtbl *v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  char *v179;
  void *v180;
  std::__shared_weak_count *v181;
  std::__shared_weak_count_vtbl *v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  char *v186;
  void *v187;
  std::__shared_weak_count *v188;
  std::__shared_weak_count_vtbl *v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  char *v193;
  uint64_t v194;
  std::__shared_weak_count *v195;
  std::__shared_weak_count_vtbl *v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  void *v200;
  void *v201;
  std::__shared_weak_count *v202;
  std::__shared_weak_count_vtbl *v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  char *v207;
  void *v208;
  std::__shared_weak_count *v209;
  std::__shared_weak_count_vtbl *v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  char *v214;
  void *v215;
  std::__shared_weak_count *v216;
  std::__shared_weak_count_vtbl *v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  char *v221;
  uint64_t v222;
  std::__shared_weak_count *v223;
  std::__shared_weak_count_vtbl *v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  void *v228;
  void *v229;
  std::__shared_weak_count *v230;
  std::__shared_weak_count_vtbl *v231;
  uint64_t i;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  void *v236;
  void *v237;
  std::__shared_weak_count *v238;
  std::__shared_weak_count_vtbl *v239;
  uint64_t j;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  void *v244;
  uint64_t v245;
  std::__shared_weak_count *v246;
  std::__shared_weak_count_vtbl *v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  void *v251;
  uint64_t v252;
  uint64_t result;
  uint64_t v254;
  void *v255;
  std::__shared_weak_count *v256;
  void *v257[2];
  char v258;
  void *v259;
  std::__shared_weak_count *v260;
  void *v261[2];
  char v262;
  void *v263;
  std::__shared_weak_count *v264;
  void *v265;
  std::__shared_weak_count *v266;
  void *v267[2];
  char v268;
  void *v269[2];
  char v270;
  char *v271;
  std::__shared_weak_count *v272;
  void *v273[2];
  char v274;
  void *v275[2];
  char v276;
  char *v277;
  std::__shared_weak_count *v278;
  void *v279[2];
  char v280;
  void *v281[2];
  char v282;
  char *v283;
  std::__shared_weak_count *v284;
  void *v285;
  std::__shared_weak_count *v286;
  void *v287[2];
  char v288;
  char *v289;
  std::__shared_weak_count *v290;
  void *v291[2];
  char v292;
  void *v293[2];
  char v294;
  char *v295;
  std::__shared_weak_count *v296;
  void *v297[2];
  char v298;
  void *v299[2];
  char v300;
  char *v301;
  std::__shared_weak_count *v302;
  void *v303[2];
  char v304;
  void *v305[2];
  char v306;
  char *v307;
  std::__shared_weak_count *v308;
  void *v309;
  std::__shared_weak_count *v310;
  __n128 v311;
  __int128 v312;
  __int128 v313;
  void *v314[2];
  uint64_t v315;
  void *v316;
  void *v317;
  _QWORD *v318;
  __n128 v319;
  uint64_t v320;
  uint64_t v321;
  _QWORD *v322;
  char **v323;
  __n128 v324;
  __n128 v325;
  __n128 v326;
  __n128 v327;
  __n128 v328;
  void *__p;
  void *v330;
  _QWORD *v331;
  void *v332;
  void *v333;
  _QWORD *v334;
  void *v335;
  void *v336;
  _QWORD *v337;
  void *v338;
  void *v339;
  _QWORD *v340;
  void *v341;
  void *v342;
  _QWORD *v343;
  void *v344;
  void *v345;
  _QWORD *v346;
  __n128 v347;
  _QWORD *v348;
  void *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  _QWORD v355[3];
  _QWORD v356[3];
  _QWORD v357[3];
  uint64_t v358[3];
  _QWORD v359[3];
  _BYTE v360[24];
  _BYTE *v361;
  _BYTE v362[24];
  _BYTE *v363;
  _QWORD v364[3];
  _QWORD *v365;
  char *Scalar;
  char *v367;
  char *v368;
  char *v369;
  char **v370;
  uint64_t v371;

  v371 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v348 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v11 = (char *)operator new(0x10uLL);
  v367 = v11 + 16;
  v368 = v11 + 16;
  *(_QWORD *)v11 = v9;
  *((_QWORD *)v11 + 1) = v10;
  Scalar = v11;
  v349 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(0x10uLL);
  v346 = v14 + 2;
  *v14 = v12;
  v14[1] = v13;
  v344 = v14;
  v345 = v14 + 2;
  v350 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v344);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v17 = operator new(0x10uLL);
  v343 = v17 + 2;
  *v17 = v15;
  v17[1] = v16;
  v341 = v17;
  v342 = v17 + 2;
  v351 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v341);
  v18 = MIL::IRUnknownDimension::Make(a1, 0);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(0x10uLL);
  v340 = v20 + 2;
  *v20 = v18;
  v20[1] = v19;
  v338 = v20;
  v339 = v20 + 2;
  v352 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v338);
  v21 = MIL::IRUnknownDimension::Make(a1, 0);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(0x10uLL);
  v337 = v23 + 2;
  *v23 = v21;
  v23[1] = v22;
  v335 = v23;
  v336 = v23 + 2;
  v353 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v335);
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = operator new(0x10uLL);
  v334 = v26 + 2;
  *v26 = v24;
  v26[1] = v25;
  v332 = v26;
  v333 = v26 + 2;
  v354 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v332);
  v27 = MIL::IRUnknownDimension::Make(a1, 0);
  v28 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v29 = operator new(0x10uLL);
  v331 = v29 + 2;
  *v29 = v27;
  v29[1] = v28;
  __p = v29;
  v330 = v29 + 2;
  v355[0] = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v349, 7, &v347);
  MIL::IRParameter::Make(&v347, (uint64_t *)&v316);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "data", (uint64_t *)&v316);
  v30 = v316;
  v316 = 0;
  if (v30)
    (*(void (**)(void *))(*(_QWORD *)v30 + 8))(v30);
  v31 = (std::__shared_weak_count *)v347.n128_u64[1];
  if (v347.n128_u64[1])
  {
    v32 = (unint64_t *)(v347.n128_u64[1] + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (__p)
  {
    v330 = __p;
    operator delete(__p);
  }
  if (v332)
  {
    v333 = v332;
    operator delete(v332);
  }
  if (v335)
  {
    v336 = v335;
    operator delete(v335);
  }
  if (v338)
  {
    v339 = v338;
    operator delete(v338);
  }
  if (v341)
  {
    v342 = v341;
    operator delete(v341);
  }
  if (v344)
  {
    v345 = v344;
    operator delete(v344);
  }
  if (Scalar)
  {
    v367 = Scalar;
    operator delete(Scalar);
  }
  v34 = v348;
  v35 = MIL::IRUnknownDimension::Make(a1, 0);
  v36 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v37 = (char *)operator new(0x10uLL);
  v367 = v37 + 16;
  v368 = v37 + 16;
  *(_QWORD *)v37 = v35;
  *((_QWORD *)v37 + 1) = v36;
  Scalar = v37;
  v349 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&Scalar);
  v38 = MIL::IRUnknownDimension::Make(a1, 0);
  v39 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v40 = operator new(0x10uLL);
  v346 = v40 + 2;
  *v40 = v38;
  v40[1] = v39;
  v344 = v40;
  v345 = v40 + 2;
  v350 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v344);
  v41 = MIL::IRUnknownDimension::Make(a1, 0);
  v42 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v43 = operator new(0x10uLL);
  v343 = v43 + 2;
  *v43 = v41;
  v43[1] = v42;
  v341 = v43;
  v342 = v43 + 2;
  v351 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v341);
  v44 = MIL::IRUnknownDimension::Make(a1, 0);
  v45 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v46 = operator new(0x10uLL);
  v340 = v46 + 2;
  *v46 = v44;
  v46[1] = v45;
  v338 = v46;
  v339 = v46 + 2;
  v352 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v338);
  v47 = MIL::IRUnknownDimension::Make(a1, 0);
  v48 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v49 = operator new(0x10uLL);
  v337 = v49 + 2;
  *v49 = v47;
  v49[1] = v48;
  v335 = v49;
  v336 = v49 + 2;
  v353 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v335);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v349, 5, &v328);
  MIL::IRParameter::Make(&v328, (uint64_t *)&v332);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v34, "indices", (uint64_t *)&v332);
  v50 = v332;
  v332 = 0;
  if (v50)
    (*(void (**)(void *))(*(_QWORD *)v50 + 8))(v50);
  v51 = (std::__shared_weak_count *)v328.n128_u64[1];
  if (v328.n128_u64[1])
  {
    v52 = (unint64_t *)(v328.n128_u64[1] + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  if (v335)
  {
    v336 = v335;
    operator delete(v335);
  }
  if (v338)
  {
    v339 = v338;
    operator delete(v338);
  }
  if (v341)
  {
    v342 = v341;
    operator delete(v341);
  }
  if (v344)
  {
    v345 = v344;
    operator delete(v344);
  }
  if (Scalar)
  {
    v367 = Scalar;
    operator delete(Scalar);
  }
  v54 = v348;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v327);
  MIL::IRParameter::Make(&v327, (uint64_t *)&v349);
  v55 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v54, "validate_indices", (uint64_t *)&v349);
  v56 = v349;
  v349 = 0;
  if (v56)
    (*(void (**)(void *))(*(_QWORD *)v56 + 8))(v56);
  v57 = (std::__shared_weak_count *)v327.n128_u64[1];
  if (v327.n128_u64[1])
  {
    v58 = (unint64_t *)(v327.n128_u64[1] + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v55 + 5) + 32))(*((_QWORD *)v55 + 5), 1);
  v60 = v348;
  v61 = MIL::IRUnknownDimension::Make(a1, 0);
  v62 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v63 = (char *)operator new(0x10uLL);
  v367 = v63 + 16;
  v368 = v63 + 16;
  *(_QWORD *)v63 = v61;
  *((_QWORD *)v63 + 1) = v62;
  Scalar = v63;
  v349 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v64 = MIL::IRUnknownDimension::Make(a1, 0);
  v65 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v66 = operator new(0x10uLL);
  v346 = v66 + 2;
  *v66 = v64;
  v66[1] = v65;
  v344 = v66;
  v345 = v66 + 2;
  v350 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v344);
  v67 = MIL::IRUnknownDimension::Make(a1, 0);
  v68 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v69 = operator new(0x10uLL);
  v343 = v69 + 2;
  *v69 = v67;
  v69[1] = v68;
  v341 = v69;
  v342 = v69 + 2;
  v351 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v341);
  v70 = MIL::IRUnknownDimension::Make(a1, 0);
  v71 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v72 = operator new(0x10uLL);
  v340 = v72 + 2;
  *v72 = v70;
  v72[1] = v71;
  v338 = v72;
  v339 = v72 + 2;
  v352 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v338);
  v73 = MIL::IRUnknownDimension::Make(a1, 0);
  v74 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v75 = operator new(0x10uLL);
  v337 = v75 + 2;
  *v75 = v73;
  v75[1] = v74;
  v335 = v75;
  v336 = v75 + 2;
  v353 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v335);
  v76 = MIL::IRUnknownDimension::Make(a1, 0);
  v77 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v78 = operator new(0x10uLL);
  v334 = v78 + 2;
  *v78 = v76;
  v78[1] = v77;
  v332 = v78;
  v333 = v78 + 2;
  v354 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v332);
  v79 = MIL::IRUnknownDimension::Make(a1, 0);
  v80 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v81 = operator new(0x10uLL);
  v331 = v81 + 2;
  *v81 = v79;
  v81[1] = v80;
  __p = v81;
  v330 = v81 + 2;
  v355[0] = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v349, 7, &v326);
  MIL::IRParameter::Make(&v326, (uint64_t *)&v316);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v60, "updates", (uint64_t *)&v316);
  v82 = v316;
  v316 = 0;
  if (v82)
    (*(void (**)(void *))(*(_QWORD *)v82 + 8))(v82);
  v83 = (std::__shared_weak_count *)v326.n128_u64[1];
  if (v326.n128_u64[1])
  {
    v84 = (unint64_t *)(v326.n128_u64[1] + 8);
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  if (__p)
  {
    v330 = __p;
    operator delete(__p);
  }
  if (v332)
  {
    v333 = v332;
    operator delete(v332);
  }
  if (v335)
  {
    v336 = v335;
    operator delete(v335);
  }
  if (v338)
  {
    v339 = v338;
    operator delete(v338);
  }
  if (v341)
  {
    v342 = v341;
    operator delete(v341);
  }
  if (v344)
  {
    v345 = v344;
    operator delete(v344);
  }
  if (Scalar)
  {
    v367 = Scalar;
    operator delete(Scalar);
  }
  v86 = v348;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v325);
  MIL::IRParameter::Make(&v325, (uint64_t *)&v349);
  v87 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v86, "mode", (uint64_t *)&v349);
  v88 = v349;
  v349 = 0;
  if (v88)
    (*(void (**)(void *))(*(_QWORD *)v88 + 8))(v88);
  v89 = (std::__shared_weak_count *)v325.n128_u64[1];
  if (v325.n128_u64[1])
  {
    v90 = (unint64_t *)(v325.n128_u64[1] + 8);
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v87 + 5) + 32))(*((_QWORD *)v87 + 5), 1);
  v92 = v348;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v324);
  MIL::IRParameter::Make(&v324, (uint64_t *)&v349);
  v93 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v92, "axis", (uint64_t *)&v349);
  v94 = v349;
  v349 = 0;
  if (v94)
    (*(void (**)(void *))(*(_QWORD *)v94 + 8))(v94);
  v95 = (std::__shared_weak_count *)v324.n128_u64[1];
  if (v324.n128_u64[1])
  {
    v96 = (unint64_t *)(v324.n128_u64[1] + 8);
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v93 + 5) + 32))(*((_QWORD *)v93 + 5), 1);
  v323 = 0;
  v98 = operator new();
  *(_QWORD *)v98 = 0;
  *(_QWORD *)(v98 + 8) = 0;
  *(_QWORD *)(v98 + 16) = 0;
  v349 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v323, (void **)v98);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v349, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v323, 1uLL);
  v99 = v323;
  v100 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v101 = operator new(8uLL);
  v344 = v101;
  *v101 = v100;
  v346 = v101 + 1;
  v345 = v101 + 1;
  v349 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v344);
  v102 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v103 = operator new(8uLL);
  v341 = v103;
  *v103 = v102;
  v343 = v103 + 1;
  v342 = v103 + 1;
  v350 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v341);
  v104 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v105 = operator new(8uLL);
  v338 = v105;
  *v105 = v104;
  v340 = v105 + 1;
  v339 = v105 + 1;
  v351 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v338);
  v106 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v107 = operator new(8uLL);
  v335 = v107;
  *v107 = v106;
  v337 = v107 + 1;
  v336 = v107 + 1;
  v352 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v335);
  v108 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v109 = operator new(8uLL);
  v332 = v109;
  *v109 = v108;
  v334 = v109 + 1;
  v333 = v109 + 1;
  v353 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v332);
  v110 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v111 = operator new(8uLL);
  __p = v111;
  *v111 = v110;
  v331 = v111 + 1;
  v330 = v111 + 1;
  v354 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&__p);
  v112 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v113 = operator new(8uLL);
  v316 = v113;
  *v113 = v112;
  v318 = v113 + 1;
  v317 = v113 + 1;
  v355[0] = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v316);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v349, 7, &v319);
  MIL::IRParameter::Make(&v319, &v320);
  v114 = v320;
  v321 = v320;
  if (v320)
  {
    v115 = (_QWORD *)operator new();
    v116 = v320;
    *v115 = &unk_1EA99F888;
    v115[1] = 0;
    v115[2] = 0;
    v115[3] = v116;
  }
  else
  {
    v115 = 0;
  }
  v322 = v115;
  v320 = 0;
  v117 = v99[2];
  v118 = v99[1];
  if (v118 >= v117)
  {
    v120 = (v118 - *v99) >> 4;
    v121 = v120 + 1;
    if ((unint64_t)(v120 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v122 = v117 - *v99;
    if (v122 >> 3 > v121)
      v121 = v122 >> 3;
    if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFF0)
      v123 = 0xFFFFFFFFFFFFFFFLL;
    else
      v123 = v121;
    v370 = v99 + 2;
    v124 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v99 + 2), v123);
    v126 = (uint64_t *)&v124[16 * v120];
    *v126 = v114;
    v126[1] = (uint64_t)v115;
    v322 = 0;
    v321 = 0;
    v128 = *v99;
    v127 = v99[1];
    if (v127 == *v99)
    {
      v131 = v99[1];
      v129 = &v124[16 * v120];
    }
    else
    {
      v129 = &v124[16 * v120];
      do
      {
        v130 = *((_OWORD *)v127 - 1);
        v127 -= 16;
        *((_OWORD *)v129 - 1) = v130;
        v129 -= 16;
        *(_QWORD *)v127 = 0;
        *((_QWORD *)v127 + 1) = 0;
      }
      while (v127 != v128);
      v131 = *v99;
      v127 = v99[1];
    }
    v119 = (char *)(v126 + 2);
    *v99 = v129;
    Scalar = v131;
    v367 = v131;
    v99[1] = (char *)(v126 + 2);
    v368 = v127;
    v132 = v99[2];
    v99[2] = &v124[16 * v125];
    v369 = v132;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v118 = v114;
    *((_QWORD *)v118 + 1) = v115;
    v119 = v118 + 16;
    v322 = 0;
    v321 = 0;
  }
  v99[1] = v119;
  v133 = v320;
  v320 = 0;
  if (v133)
    (*(void (**)(uint64_t))(*(_QWORD *)v133 + 8))(v133);
  v134 = (std::__shared_weak_count *)v319.n128_u64[1];
  if (v319.n128_u64[1])
  {
    v135 = (unint64_t *)(v319.n128_u64[1] + 8);
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  if (v316)
  {
    v317 = v316;
    operator delete(v316);
  }
  if (__p)
  {
    v330 = __p;
    operator delete(__p);
  }
  if (v332)
  {
    v333 = v332;
    operator delete(v332);
  }
  if (v335)
  {
    v336 = v335;
    operator delete(v335);
  }
  if (v338)
  {
    v339 = v338;
    operator delete(v338);
  }
  if (v341)
  {
    v342 = v341;
    operator delete(v341);
  }
  if (v344)
  {
    v345 = v344;
    operator delete(v344);
  }
  *(_OWORD *)v314 = *(_OWORD *)a2;
  v315 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v137 = (uint64_t)v348;
  *(_QWORD *)&v313 = v348;
  if (v348)
  {
    v138 = (_QWORD *)operator new();
    *v138 = &unk_1EA99F8E8;
    v138[1] = 0;
    v138[2] = 0;
    v138[3] = v137;
  }
  else
  {
    v138 = 0;
  }
  *((_QWORD *)&v313 + 1) = v138;
  v348 = 0;
  *(_QWORD *)&v312 = v323;
  if (v323)
  {
    v139 = (_QWORD *)operator new();
    v140 = v323;
    *v139 = &unk_1EA99F948;
    v139[1] = 0;
    v139[2] = 0;
    v139[3] = v140;
  }
  else
  {
    v139 = 0;
  }
  *((_QWORD *)&v312 + 1) = v139;
  v323 = 0;
  if (*(_QWORD *)(a3 + 24))
  {
    std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v364, a3);
  }
  else
  {
    v364[0] = &unk_1EA99FAC8;
    v364[1] = MIL::Operators::Common::ios17::CustomValidators::ValidateBaseScatterWithAxis;
    v365 = v364;
  }
  v363 = 0;
  MIL::IROperator::Make((__int128 *)v314, &v313, &v312, (uint64_t)v364, (uint64_t)v362, a4);
  v141 = v363;
  if (v363 == v362)
  {
    v142 = 4;
    v141 = v362;
  }
  else
  {
    if (!v363)
      goto LABEL_133;
    v142 = 5;
  }
  (*(void (**)(void))(*v141 + 8 * v142))();
LABEL_133:
  v143 = v365;
  if (v365 == v364)
  {
    v144 = 4;
    v143 = v364;
    goto LABEL_137;
  }
  if (v365)
  {
    v144 = 5;
LABEL_137:
    (*(void (**)(void))(*v143 + 8 * v144))();
  }
  v145 = (std::__shared_weak_count *)*((_QWORD *)&v312 + 1);
  if (*((_QWORD *)&v312 + 1))
  {
    v146 = (unint64_t *)(*((_QWORD *)&v312 + 1) + 8);
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  v148 = (std::__shared_weak_count *)*((_QWORD *)&v313 + 1);
  if (*((_QWORD *)&v313 + 1))
  {
    v149 = (unint64_t *)(*((_QWORD *)&v313 + 1) + 8);
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
    }
  }
  if (SHIBYTE(v315) < 0)
    operator delete(v314[0]);
  v344 = 0;
  v151 = (_OWORD *)operator new();
  *v151 = 0u;
  v151[1] = 0u;
  *((_DWORD *)v151 + 8) = 1065353216;
  v344 = v151;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v311);
  MIL::IRParameter::Make(&v311, (uint64_t *)&v349);
  v152 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v151, "minimum_compute_type", (uint64_t *)&v349);
  v153 = v349;
  v349 = 0;
  if (v153)
    (*(void (**)(void *))(*(_QWORD *)v153 + 8))(v153);
  v154 = (std::__shared_weak_count *)v311.n128_u64[1];
  if (v311.n128_u64[1])
  {
    v155 = (unint64_t *)(v311.n128_u64[1] + 8);
    do
      v156 = __ldaxr(v155);
    while (__stlxr(v156 - 1, v155));
    if (!v156)
    {
      ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
      std::__shared_weak_count::__release_weak(v154);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v152 + 5) + 32))(*((_QWORD *)v152 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v152 + 5) + 48))(*((_QWORD *)v152 + 5), 1);
  v157 = *a4;
  v158 = (std::__shared_weak_count_vtbl *)v344;
  v309 = v344;
  if (v344)
  {
    v159 = (std::__shared_weak_count *)operator new();
    v159->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v159->__shared_owners_ = 0;
    v159->__shared_weak_owners_ = 0;
    v159[1].__vftable = v158;
  }
  else
  {
    v159 = 0;
  }
  v310 = v159;
  v344 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v157 + 184))(v157, &v309);
  v160 = v310;
  if (v310)
  {
    p_shared_owners = (unint64_t *)&v310->__shared_owners_;
    do
      v162 = __ldaxr(p_shared_owners);
    while (__stlxr(v162 - 1, p_shared_owners));
    if (!v162)
    {
      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
      std::__shared_weak_count::__release_weak(v160);
    }
  }
  v163 = *a4;
  std::string::basic_string[abi:ne180100]<0>(&v349, "data");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v349, (uint64_t)v360);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v163 + 200))(v163, v360);
  v164 = v361;
  if (v361 == v360)
  {
    v165 = 4;
    v164 = v360;
  }
  else
  {
    if (!v361)
      goto LABEL_170;
    v165 = 5;
  }
  (*(void (**)(void))(*v164 + 8 * v165))();
LABEL_170:
  if (SHIBYTE(v351) < 0)
    operator delete(v349);
  MIL::Validation::TensorDTypeConstraints::Make(&v349);
  v166 = v349;
  std::string::basic_string[abi:ne180100]<0>(v305, "data");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v305, 0, (uint64_t *)&Scalar);
  v307 = Scalar;
  if (Scalar)
  {
    v167 = (std::__shared_weak_count *)operator new();
    v168 = (std::__shared_weak_count_vtbl *)Scalar;
    v167->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v167->__shared_owners_ = 0;
    v167->__shared_weak_owners_ = 0;
    v167[1].__vftable = v168;
  }
  else
  {
    v167 = 0;
  }
  v308 = v167;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v303, "T");
  (*(void (**)(void *, char **, void **))(*(_QWORD *)v166 + 24))(v166, &v307, v303);
  if (v304 < 0)
    operator delete(v303[0]);
  v169 = v308;
  if (v308)
  {
    v170 = (unint64_t *)&v308->__shared_owners_;
    do
      v171 = __ldaxr(v170);
    while (__stlxr(v171 - 1, v170));
    if (!v171)
    {
      ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
      std::__shared_weak_count::__release_weak(v169);
    }
  }
  v172 = Scalar;
  Scalar = 0;
  if (v172)
    (*(void (**)(char *))(*(_QWORD *)v172 + 8))(v172);
  if (v306 < 0)
    operator delete(v305[0]);
  v173 = v349;
  std::string::basic_string[abi:ne180100]<0>(v299, "indices");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v299, 0, (uint64_t *)&Scalar);
  v301 = Scalar;
  if (Scalar)
  {
    v174 = (std::__shared_weak_count *)operator new();
    v175 = (std::__shared_weak_count_vtbl *)Scalar;
    v174->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v174->__shared_owners_ = 0;
    v174->__shared_weak_owners_ = 0;
    v174[1].__vftable = v175;
  }
  else
  {
    v174 = 0;
  }
  v302 = v174;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v297, "J");
  (*(void (**)(void *, char **, void **))(*(_QWORD *)v173 + 24))(v173, &v301, v297);
  if (v298 < 0)
    operator delete(v297[0]);
  v176 = v302;
  if (v302)
  {
    v177 = (unint64_t *)&v302->__shared_owners_;
    do
      v178 = __ldaxr(v177);
    while (__stlxr(v178 - 1, v177));
    if (!v178)
    {
      ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
      std::__shared_weak_count::__release_weak(v176);
    }
  }
  v179 = Scalar;
  Scalar = 0;
  if (v179)
    (*(void (**)(char *))(*(_QWORD *)v179 + 8))(v179);
  if (v300 < 0)
    operator delete(v299[0]);
  v180 = v349;
  std::string::basic_string[abi:ne180100]<0>(v293, "updates");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v293, 0, (uint64_t *)&Scalar);
  v295 = Scalar;
  if (Scalar)
  {
    v181 = (std::__shared_weak_count *)operator new();
    v182 = (std::__shared_weak_count_vtbl *)Scalar;
    v181->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v181->__shared_owners_ = 0;
    v181->__shared_weak_owners_ = 0;
    v181[1].__vftable = v182;
  }
  else
  {
    v181 = 0;
  }
  v296 = v181;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v291, "T");
  (*(void (**)(void *, char **, void **))(*(_QWORD *)v180 + 24))(v180, &v295, v291);
  if (v292 < 0)
    operator delete(v291[0]);
  v183 = v296;
  if (v296)
  {
    v184 = (unint64_t *)&v296->__shared_owners_;
    do
      v185 = __ldaxr(v184);
    while (__stlxr(v185 - 1, v184));
    if (!v185)
    {
      ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
      std::__shared_weak_count::__release_weak(v183);
    }
  }
  v186 = Scalar;
  Scalar = 0;
  if (v186)
    (*(void (**)(char *))(*(_QWORD *)v186 + 8))(v186);
  if (v294 < 0)
    operator delete(v293[0]);
  v187 = v349;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v289 = Scalar;
  if (Scalar)
  {
    v188 = (std::__shared_weak_count *)operator new();
    v189 = (std::__shared_weak_count_vtbl *)Scalar;
    v188->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v188->__shared_owners_ = 0;
    v188->__shared_weak_owners_ = 0;
    v188[1].__vftable = v189;
  }
  else
  {
    v188 = 0;
  }
  v290 = v188;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v287, "T");
  (*(void (**)(void *, char **, void **))(*(_QWORD *)v187 + 24))(v187, &v289, v287);
  if (v288 < 0)
    operator delete(v287[0]);
  v190 = v290;
  if (v290)
  {
    v191 = (unint64_t *)&v290->__shared_owners_;
    do
      v192 = __ldaxr(v191);
    while (__stlxr(v192 - 1, v191));
    if (!v192)
    {
      ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
      std::__shared_weak_count::__release_weak(v190);
    }
  }
  v193 = Scalar;
  Scalar = 0;
  if (v193)
    (*(void (**)(char *))(*(_QWORD *)v193 + 8))(v193);
  v194 = *a4;
  v285 = v349;
  if (v349)
  {
    v195 = (std::__shared_weak_count *)operator new();
    v196 = (std::__shared_weak_count_vtbl *)v349;
    v195->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v195->__shared_owners_ = 0;
    v195->__shared_weak_owners_ = 0;
    v195[1].__vftable = v196;
  }
  else
  {
    v195 = 0;
  }
  v286 = v195;
  v349 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v194 + 56))(v194, &v285);
  v197 = v286;
  if (v286)
  {
    v198 = (unint64_t *)&v286->__shared_owners_;
    do
      v199 = __ldaxr(v198);
    while (__stlxr(v199 - 1, v198));
    if (!v199)
    {
      ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
      std::__shared_weak_count::__release_weak(v197);
    }
  }
  v200 = v349;
  v349 = 0;
  if (v200)
    (*(void (**)(void *))(*(_QWORD *)v200 + 8))(v200);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v349);
  v201 = v349;
  std::string::basic_string[abi:ne180100]<0>(v281, "data");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v281, 0, (uint64_t *)&Scalar);
  v283 = Scalar;
  if (Scalar)
  {
    v202 = (std::__shared_weak_count *)operator new();
    v203 = (std::__shared_weak_count_vtbl *)Scalar;
    v202->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v202->__shared_owners_ = 0;
    v202->__shared_weak_owners_ = 0;
    v202[1].__vftable = v203;
  }
  else
  {
    v202 = 0;
  }
  v284 = v202;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v279, "D");
  (*(void (**)(void *, char **, _QWORD, void **))(*(_QWORD *)v201 + 24))(v201, &v283, 0, v279);
  if (v280 < 0)
    operator delete(v279[0]);
  v204 = v284;
  if (v284)
  {
    v205 = (unint64_t *)&v284->__shared_owners_;
    do
      v206 = __ldaxr(v205);
    while (__stlxr(v206 - 1, v205));
    if (!v206)
    {
      ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
      std::__shared_weak_count::__release_weak(v204);
    }
  }
  v207 = Scalar;
  Scalar = 0;
  if (v207)
    (*(void (**)(char *))(*(_QWORD *)v207 + 8))(v207);
  if (v282 < 0)
    operator delete(v281[0]);
  v208 = v349;
  std::string::basic_string[abi:ne180100]<0>(v275, "indices");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v275, 0, (uint64_t *)&Scalar);
  v277 = Scalar;
  if (Scalar)
  {
    v209 = (std::__shared_weak_count *)operator new();
    v210 = (std::__shared_weak_count_vtbl *)Scalar;
    v209->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v209->__shared_owners_ = 0;
    v209->__shared_weak_owners_ = 0;
    v209[1].__vftable = v210;
  }
  else
  {
    v209 = 0;
  }
  v278 = v209;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v273, "I");
  (*(void (**)(void *, char **, _QWORD, void **))(*(_QWORD *)v208 + 24))(v208, &v277, 0, v273);
  if (v274 < 0)
    operator delete(v273[0]);
  v211 = v278;
  if (v278)
  {
    v212 = (unint64_t *)&v278->__shared_owners_;
    do
      v213 = __ldaxr(v212);
    while (__stlxr(v213 - 1, v212));
    if (!v213)
    {
      ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
      std::__shared_weak_count::__release_weak(v211);
    }
  }
  v214 = Scalar;
  Scalar = 0;
  if (v214)
    (*(void (**)(char *))(*(_QWORD *)v214 + 8))(v214);
  if (v276 < 0)
    operator delete(v275[0]);
  v215 = v349;
  std::string::basic_string[abi:ne180100]<0>(v269, "updates");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v269, 0, (uint64_t *)&Scalar);
  v271 = Scalar;
  if (Scalar)
  {
    v216 = (std::__shared_weak_count *)operator new();
    v217 = (std::__shared_weak_count_vtbl *)Scalar;
    v216->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v216->__shared_owners_ = 0;
    v216->__shared_weak_owners_ = 0;
    v216[1].__vftable = v217;
  }
  else
  {
    v216 = 0;
  }
  v272 = v216;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v267, "U");
  (*(void (**)(void *, char **, _QWORD, void **))(*(_QWORD *)v215 + 24))(v215, &v271, 0, v267);
  if (v268 < 0)
    operator delete(v267[0]);
  v218 = v272;
  if (v272)
  {
    v219 = (unint64_t *)&v272->__shared_owners_;
    do
      v220 = __ldaxr(v219);
    while (__stlxr(v220 - 1, v219));
    if (!v220)
    {
      ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
      std::__shared_weak_count::__release_weak(v218);
    }
  }
  v221 = Scalar;
  Scalar = 0;
  if (v221)
    (*(void (**)(char *))(*(_QWORD *)v221 + 8))(v221);
  if (v270 < 0)
    operator delete(v269[0]);
  v222 = *a4;
  v265 = v349;
  if (v349)
  {
    v223 = (std::__shared_weak_count *)operator new();
    v224 = (std::__shared_weak_count_vtbl *)v349;
    v223->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v223->__shared_owners_ = 0;
    v223->__shared_weak_owners_ = 0;
    v223[1].__vftable = v224;
  }
  else
  {
    v223 = 0;
  }
  v266 = v223;
  v349 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v222 + 56))(v222, &v265);
  v225 = v266;
  if (v266)
  {
    v226 = (unint64_t *)&v266->__shared_owners_;
    do
      v227 = __ldaxr(v226);
    while (__stlxr(v227 - 1, v226));
    if (!v227)
    {
      ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
      std::__shared_weak_count::__release_weak(v225);
    }
  }
  v228 = v349;
  v349 = 0;
  if (v228)
    (*(void (**)(void *))(*(_QWORD *)v228 + 8))(v228);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v341);
  v229 = v341;
  std::string::basic_string[abi:ne180100]<0>(v261, "mode");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v261, 0, (uint64_t *)&v338);
  v263 = v338;
  if (v338)
  {
    v230 = (std::__shared_weak_count *)operator new();
    v231 = (std::__shared_weak_count_vtbl *)v338;
    v230->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v230->__shared_owners_ = 0;
    v230->__shared_weak_owners_ = 0;
    v230[1].__vftable = v231;
  }
  else
  {
    v230 = 0;
  }
  v264 = v230;
  v338 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v349, "add");
  std::string::basic_string[abi:ne180100]<0>(&v352, "div");
  std::string::basic_string[abi:ne180100]<0>(v355, "max");
  std::string::basic_string[abi:ne180100]<0>(v356, "min");
  std::string::basic_string[abi:ne180100]<0>(v357, "mul");
  std::string::basic_string[abi:ne180100]<0>(v358, "sub");
  std::string::basic_string[abi:ne180100]<0>(v359, "update");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v349, 7);
  (*(void (**)(void *, void **, char **, _QWORD))(*(_QWORD *)v229 + 24))(v229, &v263, &Scalar, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -21; i -= 3)
  {
    if (SHIBYTE(v359[i + 2]) < 0)
      operator delete((void *)v359[i]);
  }
  v233 = v264;
  if (v264)
  {
    v234 = (unint64_t *)&v264->__shared_owners_;
    do
      v235 = __ldaxr(v234);
    while (__stlxr(v235 - 1, v234));
    if (!v235)
    {
      ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
      std::__shared_weak_count::__release_weak(v233);
    }
  }
  v236 = v338;
  v338 = 0;
  if (v236)
    (*(void (**)(void *))(*(_QWORD *)v236 + 8))(v236);
  if (v262 < 0)
    operator delete(v261[0]);
  v237 = v341;
  std::string::basic_string[abi:ne180100]<0>(v257, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v257, 1, (uint64_t *)&v338);
  v259 = v338;
  if (v338)
  {
    v238 = (std::__shared_weak_count *)operator new();
    v239 = (std::__shared_weak_count_vtbl *)v338;
    v238->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v238->__shared_owners_ = 0;
    v238->__shared_weak_owners_ = 0;
    v238[1].__vftable = v239;
  }
  else
  {
    v238 = 0;
  }
  v260 = v238;
  v338 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v349, "fp16");
  std::string::basic_string[abi:ne180100]<0>(&v352, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v355, "int32");
  std::string::basic_string[abi:ne180100]<0>(v356, "int8");
  std::string::basic_string[abi:ne180100]<0>(v357, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v349, 5);
  (*(void (**)(void *, void **, char **, uint64_t))(*(_QWORD *)v237 + 24))(v237, &v259, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -15; j -= 3)
  {
    if (SHIBYTE(v357[j + 2]) < 0)
      operator delete((void *)v357[j]);
  }
  v241 = v260;
  if (v260)
  {
    v242 = (unint64_t *)&v260->__shared_owners_;
    do
      v243 = __ldaxr(v242);
    while (__stlxr(v243 - 1, v242));
    if (!v243)
    {
      ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
      std::__shared_weak_count::__release_weak(v241);
    }
  }
  v244 = v338;
  v338 = 0;
  if (v244)
    (*(void (**)(void *))(*(_QWORD *)v244 + 8))(v244);
  if (v258 < 0)
    operator delete(v257[0]);
  v245 = *a4;
  v255 = v341;
  if (v341)
  {
    v246 = (std::__shared_weak_count *)operator new();
    v247 = (std::__shared_weak_count_vtbl *)v341;
    v246->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v246->__shared_owners_ = 0;
    v246->__shared_weak_owners_ = 0;
    v246[1].__vftable = v247;
  }
  else
  {
    v246 = 0;
  }
  v256 = v246;
  v341 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v245 + 56))(v245, &v255);
  v248 = v256;
  if (v256)
  {
    v249 = (unint64_t *)&v256->__shared_owners_;
    do
      v250 = __ldaxr(v249);
    while (__stlxr(v250 - 1, v249));
    if (!v250)
    {
      ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
      std::__shared_weak_count::__release_weak(v248);
    }
  }
  v251 = v341;
  v341 = 0;
  if (v251)
    (*(void (**)(void *))(*(_QWORD *)v251 + 8))(v251);
  if (v344)
  {
    v252 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v344);
    MEMORY[0x1E0C023A0](v252, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v323, 0);
  result = (uint64_t)v348;
  if (v348)
  {
    v254 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v348);
    return MEMORY[0x1E0C023A0](v254, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0924014(_Unwind_Exception *a1)
{
  uint64_t *v1;
  unint64_t v3;
  uint64_t v4;

  v3 = STACK[0x380];
  STACK[0x380] = 0;
  if (v3)
    (*(void (**)(unint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x398], 0);
  v4 = *v1;
  *v1 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x2C8], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x3C0], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::Scatter::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios17::BaseScatterWithAxis::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E0924A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::ScatterAlongAxis::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios17::BaseScatterWithAxis::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E0924B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::ScatterNd::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios17::BaseScatter::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E0924C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::CustomValidators::ValidateNonMaximumSuppression(MIL::Operators::Common::ios17::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  MIL::IRValueType *ParameterType;
  uint64_t v6;
  MIL::IRValueType *v7;
  uint64_t v8;
  const void *ParameterValue;
  int v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  void *v23[2];
  char v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  void *__p[2];
  char v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  void *v31[2];
  char v32;

  std::string::basic_string[abi:ne180100]<0>(v31, "boxes");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v6 = MIL::IRValueType::AsTensorType(ParameterType);
  if (v32 < 0)
    operator delete(v31[0]);
  std::string::basic_string[abi:ne180100]<0>(v31, "scores");
  v7 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v8 = MIL::IRValueType::AsTensorType(v7);
  if (v32 < 0)
    operator delete(v31[0]);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 104))(v6)
    && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 104))(v8) & 1) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v31, "max_boxes");
    ParameterValue = (const void *)MIL::IROperation::GetParameterValue(this);
    v10 = MIL::IRValue::GetScalar<int>(ParameterValue);
    if (v32 < 0)
      operator delete(v31[0]);
    if (v10 > 0)
    {
      MIL::ValidationResult::ValidationResult(a2);
      return;
    }
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v19 = (std::__shared_weak_count *)LocationPtr[1];
    v25 = *LocationPtr;
    v26 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(v23, "Max boxes must be positive");
    MIL::ValidationResult::ValidationResult(a2, &v25, 315, v23);
    if (v24 < 0)
      operator delete(v23[0]);
    v15 = v26;
    if (v26)
    {
      v22 = (unint64_t *)&v26->__shared_owners_;
      do
        v17 = __ldaxr(v22);
      while (__stlxr(v17 - 1, v22));
LABEL_19:
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  else
  {
    v11 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v12 = (std::__shared_weak_count *)v11[1];
    v29 = *v11;
    v30 = v12;
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Non-fixed rank not supported");
    MIL::ValidationResult::ValidationResult(a2, &v29, 315, __p);
    if (v28 < 0)
      operator delete(__p[0]);
    v15 = v30;
    if (v30)
    {
      v16 = (unint64_t *)&v30->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      goto LABEL_19;
    }
  }
}

void sub_1E0924EC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceNonMaximumSuppression(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  const void *SingleValue;
  int v7;
  uint64_t v8;
  MIL::IRValueType *SingleValueType;
  uint64_t v10;
  MIL::IRValueType *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t *v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  void (***v41)(MIL::MILContextImpl *__hidden);
  int v42;
  uint64_t v43;
  void (***v44)(MIL::MILContextImpl *__hidden);
  int v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  void *v49;
  void *v50;
  _QWORD *v51;
  void *v52;
  uint64_t *v53;
  unint64_t v54;
  void *__p;
  uint64_t *v56;
  unint64_t v57;

  std::string::basic_string[abi:ne180100]<0>(&__p, "max_boxes");
  SingleValue = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a2, (uint64_t)&__p);
  v7 = MIL::IRValue::GetScalar<int>(SingleValue);
  if (SHIBYTE(v57) < 0)
    operator delete(__p);
  v8 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)v7);
  std::string::basic_string[abi:ne180100]<0>(&__p, "boxes");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)&__p);
  v10 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(v57) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "scores");
  v11 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)&__p);
  v12 = MIL::IRValueType::AsTensorType(v11);
  if (SHIBYTE(v57) < 0)
    operator delete(__p);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 96))(v10);
  v56 = 0;
  v57 = 0;
  __p = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v13, *(_QWORD *)(v13 + 8), (uint64_t)(*(_QWORD *)(v13 + 8) - *(_QWORD *)v13) >> 3);
  v14 = v56;
  v15 = v56 - 1;
  v56 = v15;
  if ((unint64_t)v15 >= v57)
  {
    v16 = ((char *)v15 - (_BYTE *)__p) >> 3;
    v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v18 = v57 - (_QWORD)__p;
    if ((uint64_t)(v57 - (_QWORD)__p) >> 2 > v17)
      v17 = v18 >> 2;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
      v19 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
      v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v57, v19);
    else
      v20 = 0;
    v21 = (uint64_t *)&v20[8 * v16];
    v22 = &v20[8 * v19];
    *v21 = v8;
    v14 = v21 + 1;
    v24 = (char *)__p;
    v23 = (char *)v56;
    if (v56 != __p)
    {
      do
      {
        v25 = *((_QWORD *)v23 - 1);
        v23 -= 8;
        *--v21 = v25;
      }
      while (v23 != v24);
      v23 = (char *)__p;
    }
    __p = v21;
    v56 = v14;
    v57 = (unint64_t)v22;
    if (v23)
      operator delete(v23);
  }
  else
  {
    *v15 = v8;
  }
  v56 = v14;
  v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 96))(v12);
  v52 = 0;
  v53 = 0;
  v54 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v52, *(const void **)v26, *(_QWORD *)(v26 + 8), (uint64_t)(*(_QWORD *)(v26 + 8) - *(_QWORD *)v26) >> 3);
  v27 = v53;
  v28 = v53 - 1;
  v53 = v28;
  if ((unint64_t)v28 >= v54)
  {
    v29 = ((char *)v28 - (_BYTE *)v52) >> 3;
    v30 = v29 + 1;
    if ((unint64_t)(v29 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v31 = v54 - (_QWORD)v52;
    if ((uint64_t)(v54 - (_QWORD)v52) >> 2 > v30)
      v30 = v31 >> 2;
    if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
      v32 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v32 = v30;
    if (v32)
      v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v54, v32);
    else
      v33 = 0;
    v34 = (uint64_t *)&v33[8 * v29];
    v35 = &v33[8 * v32];
    *v34 = v8;
    v27 = v34 + 1;
    v37 = (char *)v52;
    v36 = (char *)v53;
    if (v53 != v52)
    {
      do
      {
        v38 = *((_QWORD *)v36 - 1);
        v36 -= 8;
        *--v34 = v38;
      }
      while (v36 != v37);
      v36 = (char *)v52;
    }
    v52 = v34;
    v53 = v27;
    v54 = (unint64_t)v35;
    if (v36)
      operator delete(v36);
  }
  else
  {
    *v28 = v8;
  }
  v53 = v27;
  if (v56 == __p)
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  v39 = *(_QWORD *)__p;
  v40 = operator new(0x10uLL);
  v50 = v40 + 2;
  v51 = v40 + 2;
  *v40 = v39;
  v40[1] = v8;
  v49 = v40;
  v41 = *a1;
  v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 88))(v10);
  v43 = MIL::IRTensorValueType::MakeWithShape(v41, v42, (uint64_t)&__p);
  v44 = *a1;
  v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 88))(v12);
  v46 = MIL::IRTensorValueType::MakeWithShape(v44, v45, (uint64_t)&v52);
  v47 = MIL::IRTensorValueType::MakeWithShape(*a1, 11, (uint64_t)&v49);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v48 = operator new(0x18uLL);
  a3[1] = v48 + 3;
  a3[2] = v48 + 3;
  *v48 = v43;
  v48[1] = v46;
  v48[2] = v47;
  *a3 = v48;
  if (v49)
  {
    v50 = v49;
    operator delete(v49);
  }
  if (v52)
  {
    v53 = (uint64_t *)v52;
    operator delete(v52);
  }
  if (__p)
  {
    v56 = (uint64_t *)__p;
    operator delete(__p);
  }
}

void sub_1E09252E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios17::CustomValueInference::ValueInferenceNonMaximumSuppression(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  unsigned __int8 *v6;
  int v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unsigned __int8 *v16;
  uint64_t *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned __int8 *v26;
  float v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  _OWORD *v38;
  uint64_t v39;
  __int128 v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t j;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unsigned __int8 *v53;
  float Float;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  _OWORD *v65;
  uint64_t v66;
  __int128 v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t i;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::logic_error *exception;
  uint64_t v87;
  std::__shared_weak_count *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  _QWORD v94[8];
  _QWORD v95[8];
  _QWORD v96[8];
  uint64_t v97;
  std::__shared_weak_count *v98;
  _QWORD v99[8];
  uint64_t v100;
  std::__shared_weak_count *v101;
  void *__p[2];
  char v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  _QWORD *v108;
  char v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;

  v113 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(__p, "max_boxes");
  v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)__p);
  if (!v6)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v7 = MIL::IRValue::GetScalar<int>(**((const void ***)v6 + 5));
  if (v103 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "per_class_suppression");
  v8 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)__p);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v9 = MIL::IRValue::GetScalar<BOOL>(**((const void ***)v8 + 5));
  if (v103 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "boxes");
  v10 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)__p);
  if (!v10)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v11 = (uint64_t *)*((_QWORD *)v10 + 5);
  v13 = *v11;
  v12 = (std::__shared_weak_count *)v11[1];
  v106 = *v11;
  v107 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  if (v103 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "scores");
  v16 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)__p);
  if (!v16)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v17 = (uint64_t *)*((_QWORD *)v16 + 5);
  v19 = *v17;
  v18 = (std::__shared_weak_count *)v17[1];
  v104 = v19;
  v105 = v18;
  if (v18)
  {
    v20 = (unint64_t *)&v18->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  if (v103 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "boxes");
  v22 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)__p);
  if (!v22)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v23 = MIL::IRValue::AsTensor(**((MIL::IRValue ***)v22 + 5));
  v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 32))(v23);
  if (v103 < 0)
    operator delete(__p[0]);
  v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 88))(v24);
  if (v25 == 4)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "iou_threshold");
    v53 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)__p);
    if (!v53)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    LOWORD(v99[0]) = MIL::IRValue::GetScalar<MIL::Fp16>(**((const void ***)v53 + 5));
    Float = MIL::Fp16::GetFloat((MIL::Fp16 *)v99);
    if (v103 < 0)
      operator delete(__p[0]);
    v89 = v13;
    v90 = v12;
    if (v12)
    {
      v55 = (unint64_t *)&v12->__shared_owners_;
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
    }
    MIL::ValueInferenceUtils::GetCastedTensor<float>(&v89, __p);
    v57 = v90;
    if (v90)
    {
      v58 = (unint64_t *)&v90->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    v87 = v104;
    v88 = v105;
    if (v105)
    {
      v60 = (unint64_t *)&v105->__shared_owners_;
      do
        v61 = __ldxr(v60);
      while (__stxr(v61 + 1, v60));
    }
    MIL::ValueInferenceUtils::GetCastedTensor<float>(&v87, v99);
    v62 = v88;
    if (v88)
    {
      v63 = (unint64_t *)&v88->__shared_owners_;
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
    MIL::ValueInference::Tensor<float>::Cast<MIL::Fp16>(v94, (uint64_t)v95);
    MIL::ValueInference::Tensor<float>::~Tensor(v94);
    MIL::ValueInference::Tensor<float>::Cast<MIL::Fp16>(&v110, (uint64_t)v94);
    MIL::ValueInference::Tensor<float>::~Tensor(&v110);
    MIL::ValueInference::Tensor<MIL::Fp16>::ToIRTensorValue((uint64_t)v95, *a1, &v93);
    v110 = v93;
    v93 = 0uLL;
    MIL::ValueInference::Tensor<MIL::Fp16>::ToIRTensorValue((uint64_t)v94, *a1, &v92);
    v111 = v92;
    v92 = 0uLL;
    MIL::ValueInference::Tensor<int>::ToIRTensorValue((uint64_t)v96, *a1, &v91);
    v112 = v91;
    v91 = 0uLL;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    v108 = a3;
    v109 = 0;
    v65 = operator new(0x30uLL);
    v66 = 0;
    *a3 = v65;
    a3[1] = v65;
    a3[2] = v65 + 3;
    do
    {
      v67 = *(&v110 + v66);
      *v65 = v67;
      if (*((_QWORD *)&v67 + 1))
      {
        v68 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
        do
          v69 = __ldxr(v68);
        while (__stxr(v69 + 1, v68));
      }
      ++v66;
      ++v65;
    }
    while (v66 != 3);
    a3[1] = v65;
    for (i = 32; i != -16; i -= 16)
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v110 + i);
    v71 = (std::__shared_weak_count *)*((_QWORD *)&v91 + 1);
    if (*((_QWORD *)&v91 + 1))
    {
      v72 = (unint64_t *)(*((_QWORD *)&v91 + 1) + 8);
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
    v74 = (std::__shared_weak_count *)*((_QWORD *)&v92 + 1);
    if (*((_QWORD *)&v92 + 1))
    {
      v75 = (unint64_t *)(*((_QWORD *)&v92 + 1) + 8);
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }
    v77 = (std::__shared_weak_count *)*((_QWORD *)&v93 + 1);
    if (*((_QWORD *)&v93 + 1))
    {
      v78 = (unint64_t *)(*((_QWORD *)&v93 + 1) + 8);
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
    MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(v94);
    MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(v95);
  }
  else
  {
    if (v25 != 5)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Unsupported Datatype for the input boxes IRTensor - must be fp16, fp32.");
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "iou_threshold");
    v26 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)__p);
    if (!v26)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v27 = MIL::IRValue::GetScalar<float>(**((const void ***)v26 + 5));
    if (v103 < 0)
      operator delete(__p[0]);
    v100 = v13;
    v101 = v12;
    if (v12)
    {
      v28 = (unint64_t *)&v12->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    MIL::ValueInference::Tensor<float>::FromIRTensorValue(&v100, (uint64_t)__p);
    v30 = v101;
    if (v101)
    {
      v31 = (unint64_t *)&v101->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v97 = v104;
    v98 = v105;
    if (v105)
    {
      v33 = (unint64_t *)&v105->__shared_owners_;
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    MIL::ValueInference::Tensor<float>::FromIRTensorValue(&v97, (uint64_t)v99);
    v35 = v98;
    if (v98)
    {
      v36 = (unint64_t *)&v98->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    MIL::ValueInference::Tensor<float>::ToIRTensorValue((uint64_t)v95, *a1, &v93);
    v110 = v93;
    v93 = 0uLL;
    MIL::ValueInference::Tensor<float>::ToIRTensorValue((uint64_t)v94, *a1, &v92);
    v111 = v92;
    v92 = 0uLL;
    MIL::ValueInference::Tensor<int>::ToIRTensorValue((uint64_t)v96, *a1, &v91);
    v112 = v91;
    v91 = 0uLL;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    v108 = a3;
    v109 = 0;
    v38 = operator new(0x30uLL);
    v39 = 0;
    *a3 = v38;
    a3[1] = v38;
    a3[2] = v38 + 3;
    do
    {
      v40 = *(&v110 + v39);
      *v38 = v40;
      if (*((_QWORD *)&v40 + 1))
      {
        v41 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
      }
      ++v39;
      ++v38;
    }
    while (v39 != 3);
    a3[1] = v38;
    for (j = 32; j != -16; j -= 16)
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v110 + j);
    v44 = (std::__shared_weak_count *)*((_QWORD *)&v91 + 1);
    if (*((_QWORD *)&v91 + 1))
    {
      v45 = (unint64_t *)(*((_QWORD *)&v91 + 1) + 8);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v47 = (std::__shared_weak_count *)*((_QWORD *)&v92 + 1);
    if (*((_QWORD *)&v92 + 1))
    {
      v48 = (unint64_t *)(*((_QWORD *)&v92 + 1) + 8);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    v50 = (std::__shared_weak_count *)*((_QWORD *)&v93 + 1);
    if (*((_QWORD *)&v93 + 1))
    {
      v51 = (unint64_t *)(*((_QWORD *)&v93 + 1) + 8);
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    MIL::ValueInference::Tensor<float>::~Tensor(v94);
    MIL::ValueInference::Tensor<float>::~Tensor(v95);
  }
  MIL::ValueInference::Tensor<int>::~Tensor(v96);
  MIL::ValueInference::Tensor<float>::~Tensor(v99);
  MIL::ValueInference::Tensor<float>::~Tensor(__p);
  v80 = v105;
  if (v105)
  {
    v81 = (unint64_t *)&v105->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v83 = v107;
  if (v107)
  {
    v84 = (unint64_t *)&v107->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
}

void sub_1E0925C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  void *v60;
  uint64_t v61;

  __cxa_free_exception(v60);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v61 - 224);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v61 - 208);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::SelectBoxIndices(MIL::ParserContext *a1@<X0>, MIL::ParserContext *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>, float a6@<S0>)
{
  uint64_t **ProgramFirstSet;
  unint64_t v10;
  unint64_t v11;
  unint64_t **v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t i;
  uint64_t j;
  _QWORD *v18;
  float v19;
  uint64_t v20;
  uint64_t k;
  _QWORD *v22;
  float v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t m;
  uint64_t v29;
  uint64_t *v30;
  int v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t n;
  _QWORD *v47;
  _DWORD *v48;
  unint64_t v49;
  void *v50;
  unint64_t v51;
  uint64_t ii;
  _QWORD *v53;
  _DWORD *v54;
  void *v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  uint64_t v68;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  void *v75[2];
  _QWORD *v76;
  void *v77[2];
  _QWORD *v78;
  void *v79[2];
  _QWORD *v80;
  void *v81[3];
  void *v82;
  uint64_t *v83;
  _QWORD *v84;
  __n128 v85;
  _QWORD *v86;
  void *__p;
  _BYTE *v88;
  _QWORD *v89;
  _QWORD v90[3];
  _QWORD v91[3];
  _QWORD *v92;
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  ProgramFirstSet = (uint64_t **)MIL::ParserContext::GetProgramFirstSet(a1);
  v10 = (*ProgramFirstSet)[1];
  v68 = **ProgramFirstSet;
  v11 = (*ProgramFirstSet)[2];
  v12 = (unint64_t **)MIL::ParserContext::GetProgramFirstSet(a2);
  v14 = **v12;
  v13 = (*v12)[1];
  v15 = (*v12)[2];
  std::vector<unsigned long>::vector(&__p, v15);
  std::vector<std::vector<unsigned long>>::vector(v90, v14, (uint64_t)&__p);
  v73 = v11;
  if (__p)
  {
    v88 = __p;
    operator delete(__p);
  }
  if (v14)
  {
    for (i = 0; i != v14; ++i)
    {
      if (v15)
      {
        for (j = 0; j != v15; ++j)
        {
          v18 = operator new(0x18uLL);
          v88 = v18 + 3;
          v89 = v18 + 3;
          *v18 = i;
          v18[1] = 0;
          v18[2] = j;
          __p = v18;
          v19 = *(float *)MIL::ValueInference::Tensor<float>::operator[]((uint64_t)a2, (uint64_t *)&__p);
          if (__p)
          {
            v88 = __p;
            operator delete(__p);
          }
          if (v13 < 2)
          {
            v20 = 0;
          }
          else
          {
            v20 = 0;
            for (k = 1; k != v13; ++k)
            {
              v22 = operator new(0x18uLL);
              v88 = v22 + 3;
              v89 = v22 + 3;
              *v22 = i;
              v22[1] = k;
              v22[2] = j;
              __p = v22;
              v23 = *(float *)MIL::ValueInference::Tensor<float>::operator[]((uint64_t)a2, (uint64_t *)&__p);
              if (__p)
              {
                v88 = __p;
                operator delete(__p);
              }
              if (v23 > v19)
              {
                v19 = v23;
                v20 = k;
              }
            }
          }
          *(_QWORD *)(*(_QWORD *)(v90[0] + 24 * i) + 8 * j) = v20;
        }
      }
    }
  }
  v24 = operator new(0x10uLL);
  v85.n128_u64[1] = (unint64_t)(v24 + 2);
  v86 = v24 + 2;
  *v24 = v68;
  v24[1] = a3;
  v85.n128_u64[0] = (unint64_t)v24;
  MIL::ValueInference::Tensor<int>::Zeros(&v85, (uint64_t)&__p);
  v91[0] = &off_1EA9A17A8;
  v92 = v91;
  MIL::ValueInference::Tensor<int>::ForEach((uint64_t)&__p, (uint64_t)v91, a5);
  v25 = v92;
  if (v92 == v91)
  {
    v26 = 4;
    v25 = v91;
  }
  else
  {
    if (!v92)
      goto LABEL_25;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_25:
  MIL::ValueInference::Tensor<int>::~Tensor(&__p);
  if (v85.n128_u64[0])
  {
    v85.n128_u64[1] = v85.n128_u64[0];
    operator delete((void *)v85.n128_u64[0]);
  }
  if (v68)
  {
    v27 = 0;
    while (1)
    {
      std::vector<float>::vector(&__p, v73);
      if (v73)
      {
        for (m = 0; m != v73; ++m)
        {
          v29 = *(_QWORD *)(*(_QWORD *)(v90[0] + 24 * v27) + 8 * m);
          v30 = (uint64_t *)operator new(0x18uLL);
          v83 = v30 + 3;
          v84 = v30 + 3;
          *v30 = v27;
          v30[1] = v29;
          v30[2] = m;
          v82 = v30;
          v31 = *(_DWORD *)MIL::ValueInference::Tensor<float>::operator[]((uint64_t)a2, (uint64_t *)&v82);
          if (v82)
          {
            v83 = (uint64_t *)v82;
            operator delete(v82);
          }
          *((_DWORD *)__p + m) = v31;
        }
      }
      std::vector<unsigned long>::vector(&v82, (v88 - (_BYTE *)__p) >> 2);
      v32 = (uint64_t *)v82;
      v33 = v83;
      if (v82 != v83)
      {
        v34 = 0;
        v35 = (uint64_t *)v82;
        do
          *v35++ = v34++;
        while (v35 != v33);
      }
      v81[0] = &__p;
      if ((char *)v33 - (char *)v32 < 1025)
      {
        v36 = 0;
        v38 = 0;
      }
      else
      {
        v36 = (uint64_t *)std::get_temporary_buffer[abi:ne180100]<unsigned long>(v33 - v32);
        v38 = v37;
      }
      if (v36)
        operator delete(v36);
      LOBYTE(v79[0]) = 0;
      std::vector<BOOL>::vector(v81, v73, (unsigned __int8 *)v79);
      v40 = v82;
      v39 = v83;
      if (v83 != v82)
      {
        v41 = 0;
        v42 = 0;
        while (1)
        {
          v43 = v40[v41];
          if (((*(_QWORD *)((char *)v81[0] + ((v43 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v43) & 1) == 0)
            break;
          ++v41;
LABEL_93:
          if (v41 >= v39 - v40)
            goto LABEL_94;
        }
        v44 = operator new(0x10uLL);
        v79[1] = v44 + 2;
        v80 = v44 + 2;
        *v44 = v27;
        v44[1] = v42;
        v79[0] = v44;
        *(_DWORD *)MIL::ValueInference::Tensor<float>::operator[](a5, (uint64_t *)v79) = v43;
        if (v79[0])
        {
          v79[1] = v79[0];
          operator delete(v79[0]);
        }
        v45 = v42 + 1;
        if (v45 != a3)
          break;
      }
LABEL_94:
      if (v81[0])
        operator delete(v81[0]);
      if (v82)
      {
        v83 = (uint64_t *)v82;
        operator delete(v82);
      }
      if (__p)
      {
        v88 = __p;
        operator delete(__p);
      }
      if (++v27 == v68)
        goto LABEL_101;
    }
    std::vector<float>::vector(v79, v10);
    if (v10)
    {
      for (n = 0; n != v10; ++n)
      {
        v47 = operator new(0x18uLL);
        v77[1] = v47 + 3;
        v78 = v47 + 3;
        *v47 = v27;
        v47[1] = n;
        v47[2] = v43;
        v77[0] = v47;
        v48 = (_DWORD *)MIL::ValueInference::Tensor<float>::operator[]((uint64_t)a1, (uint64_t *)v77);
        *((_DWORD *)v79[0] + n) = *v48;
        if (v77[0])
        {
          v77[1] = v77[0];
          operator delete(v77[0]);
        }
      }
    }
    v71 = v45;
    if (v79[0])
    {
      v79[1] = v79[0];
      operator delete(v79[0]);
    }
    *(_OWORD *)v79 = *(_OWORD *)v77;
    v80 = v78;
    v49 = v41 + 1;
    v40 = v82;
    v39 = v83;
    v50 = v77[0];
    v72 = v49;
    if (v49 >= ((char *)v83 - (_BYTE *)v82) >> 3)
    {
LABEL_90:
      if (v50)
      {
        v79[1] = v50;
        operator delete(v50);
        v40 = v82;
        v39 = v83;
      }
      v42 = v71;
      v41 = v72;
      goto LABEL_93;
    }
    while (1)
    {
      v51 = v40[v49];
      if (((1 << v51) & *((_QWORD *)v81[0] + (v51 >> 6))) == 0)
        break;
LABEL_88:
      if (++v49 >= v39 - v40)
      {
        v50 = v79[0];
        goto LABEL_90;
      }
    }
    std::vector<float>::vector(v77, v10);
    if (v10)
    {
      for (ii = 0; ii != v10; ++ii)
      {
        v53 = operator new(0x18uLL);
        v75[1] = v53 + 3;
        v76 = v53 + 3;
        *v53 = v27;
        v53[1] = ii;
        v53[2] = v51;
        v75[0] = v53;
        v54 = (_DWORD *)MIL::ValueInference::Tensor<float>::operator[]((uint64_t)a1, (uint64_t *)v75);
        *((_DWORD *)v77[0] + ii) = *v54;
        if (v75[0])
        {
          v75[1] = v75[0];
          operator delete(v75[0]);
        }
      }
    }
    if (v77[0])
    {
      v77[1] = v77[0];
      operator delete(v77[0]);
    }
    v55 = v75[0];
    *(_OWORD *)v77 = *(_OWORD *)v75;
    v78 = v76;
    if (a4
      && *(_QWORD *)(*(_QWORD *)(v90[0] + 24 * v27) + 8 * v43) != *(_QWORD *)(*(_QWORD *)(v90[0] + 24 * v27) + 8 * v51))
    {
      if (!v75[0])
      {
LABEL_87:
        v40 = v82;
        v39 = v83;
        goto LABEL_88;
      }
    }
    else
    {
      v56 = *((float *)v75[0] + 2);
      v57 = *((float *)v75[0] + 3);
      v58 = *((float *)v79[0] + 2);
      v59 = *((float *)v79[0] + 3);
      if (v56 >= v58)
        v60 = *((float *)v79[0] + 2);
      else
        v60 = *((float *)v75[0] + 2);
      v61 = *((float *)v79[0] + 1);
      v62 = *((float *)v75[0] + 1);
      if (*(float *)v79[0] >= *(float *)v75[0])
        v63 = *(float *)v79[0];
      else
        v63 = *(float *)v75[0];
      v64 = v60 - v63;
      if (v57 >= v59)
        v65 = *((float *)v79[0] + 3);
      else
        v65 = *((float *)v75[0] + 3);
      if (v61 >= v62)
        v66 = *((float *)v79[0] + 1);
      else
        v66 = *((float *)v75[0] + 1);
      v67 = v65 - v66;
      if (v64 < 0.0)
        v64 = 0.0;
      if (v67 < 0.0)
        v67 = 0.0;
      if ((float)((float)(v64 * v67)
                 / (float)((float)((float)((float)((float)(v58 - *(float *)v79[0]) * (float)(v59 - v61))
                                         + (float)((float)(v56 - *(float *)v75[0]) * (float)(v57 - v62)))
                                 - (float)(v64 * v67))
                         + 0.0000001)) > a6)
        *((_QWORD *)v81[0] + (v51 >> 6)) |= 1 << v51;
    }
    v77[1] = v55;
    operator delete(v55);
    goto LABEL_87;
  }
LABEL_101:
  __p = v90;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1E09265DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,void *a38,uint64_t a39)
{
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v42;
  uint64_t v43;

  v42 = *(_QWORD **)(v40 - 136);
  if (v42 == v39)
  {
    v43 = 4;
    v42 = (_QWORD *)(v40 - 160);
  }
  else
  {
    if (!v42)
      goto LABEL_6;
    v43 = 5;
  }
  (*(void (**)(void))(*v42 + 8 * v43))();
LABEL_6:
  MIL::ValueInference::Tensor<int>::~Tensor(&a38);
  if (__p)
    operator delete(__p);
  a38 = (void *)(v40 - 184);
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a38);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::SelectByIndices(MIL::ParserContext *a1@<X0>, MIL::ParserContext *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t **ProgramFirstSet;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t i;
  uint64_t j;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  int v17;
  _QWORD *v18;
  void *v19;
  void *v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  _QWORD *v24;
  __n128 __p;
  _QWORD *v26;

  ProgramFirstSet = (uint64_t **)MIL::ParserContext::GetProgramFirstSet(a1);
  v7 = *(_QWORD *)(*(_QWORD *)MIL::ParserContext::GetProgramFirstSet(a2) + 8);
  v8 = **ProgramFirstSet;
  v9 = (*ProgramFirstSet)[1];
  v10 = operator new(0x18uLL);
  __p.n128_u64[1] = (unint64_t)(v10 + 3);
  v26 = v10 + 3;
  *v10 = v8;
  v10[1] = v9;
  v10[2] = v7;
  __p.n128_u64[0] = (unint64_t)v10;
  MIL::ValueInference::Tensor<float>::Zeros(&__p, a3);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v8)
  {
    for (i = 0; i != v8; ++i)
    {
      if (v7)
      {
        for (j = 0; j != v7; ++j)
        {
          v13 = operator new(0x10uLL);
          v23 = v13 + 2;
          v24 = v13 + 2;
          *v13 = i;
          v13[1] = j;
          v22 = v13;
          v14 = *(int *)MIL::ValueInference::Tensor<float>::operator[]((uint64_t)a2, (uint64_t *)&v22);
          if (v22)
          {
            v23 = v22;
            operator delete(v22);
          }
          if ((_DWORD)v14 == -1)
            break;
          if ((*ProgramFirstSet)[1])
          {
            v15 = 0;
            do
            {
              v16 = operator new(0x18uLL);
              v23 = v16 + 3;
              v24 = v16 + 3;
              *v16 = i;
              v16[1] = v15;
              v16[2] = v14;
              v22 = v16;
              v17 = *(_DWORD *)MIL::ValueInference::Tensor<float>::operator[]((uint64_t)a1, (uint64_t *)&v22);
              v18 = operator new(0x18uLL);
              v20 = v18 + 3;
              v21 = v18 + 3;
              *v18 = i;
              v18[1] = v15;
              v18[2] = j;
              v19 = v18;
              *(_DWORD *)MIL::ValueInference::Tensor<float>::operator[](a3, (uint64_t *)&v19) = v17;
              if (v19)
              {
                v20 = v19;
                operator delete(v19);
              }
              if (v22)
              {
                v23 = v22;
                operator delete(v22);
              }
              ++v15;
            }
            while (v15 < (*ProgramFirstSet)[1]);
          }
        }
      }
    }
  }
}

void sub_1E0926908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios17::CustomValidators::ValidateTopk(MIL::Operators::Common::ios17::CustomValidators *this@<X0>, const MIL::IROperation *a2@<X1>, MIL::ValidationResult *a3@<X8>)
{
  _QWORD *v5;
  _BOOL4 IsParameterSet;
  MIL::IRValueType *Type;
  uint64_t v8;
  int v9;
  int v10;
  MIL::IRValue *v11;
  const void *v12;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  MIL::IRValueType *ParameterType;
  MIL::IRTensorValueType *v21;
  const void *ParameterValue;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  int v27;
  uint64_t *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  __int16 *v35;
  uint64_t *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  void *v51[2];
  char v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  void *v55[2];
  char v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  void *__p;
  char v60;
  void *v61[2];
  char v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  std::string v65;

  v5 = (_QWORD *)(*(uint64_t (**)(MIL::Operators::Common::ios17::CustomValidators *, const MIL::IROperation *))(*(_QWORD *)this + 176))(this, a2);
  std::string::basic_string[abi:ne180100]<0>(&v65, "output_indices_dtype");
  IsParameterSet = MIL::IROperation::IsParameterSet((uint64_t)this, (const void **)&v65.__r_.__value_.__l.__data_);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v65.__r_.__value_.__l.__data_);
  if (v5[1] - *v5 < 0x11uLL)
  {
    if (IsParameterSet)
    {
      LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
      v14 = (std::__shared_weak_count *)LocationPtr[1];
      v53 = *LocationPtr;
      v54 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      std::string::basic_string[abi:ne180100]<0>(v51, "output_indices_dtype is set but op only has one output");
      MIL::ValidationResult::ValidationResult(a3, &v53, 315, v51);
      if (v52 < 0)
        operator delete(v51[0]);
      v17 = v54;
      if (v54)
      {
        v18 = (unint64_t *)&v54->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        goto LABEL_62;
      }
      return;
    }
LABEL_21:
    std::string::basic_string[abi:ne180100]<0>(&v65, "x");
    ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
    v21 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v65.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v65, "axis");
    ParameterValue = (const void *)MIL::IROperation::GetParameterValue(this);
    v23 = MIL::IRValue::GetScalar<int>(ParameterValue);
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v65.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v65, "k");
    v24 = MIL::IROperation::GetParameterValue(this);
    v25 = MIL::IRValue::TryGetScalar<int>(v24);
    v26 = (int *)v25;
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v65.__r_.__value_.__l.__data_);
      if (v26)
        goto LABEL_27;
    }
    else if (v25)
    {
LABEL_27:
      v27 = *v26;
      goto LABEL_56;
    }
    std::string::basic_string[abi:ne180100]<0>(&v65, "k");
    v33 = MIL::IROperation::GetParameterValue(this);
    v34 = MIL::IRValue::TryGetScalar<short>(v33);
    v35 = (__int16 *)v34;
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v65.__r_.__value_.__l.__data_);
      if (v35)
        goto LABEL_40;
    }
    else if (v34)
    {
LABEL_40:
      v27 = *v35;
      goto LABEL_56;
    }
    std::string::basic_string[abi:ne180100]<0>(&v65, "k");
    v43 = MIL::IROperation::GetParameterValue(this);
    v27 = *(char *)MIL::IRValue::TryGetScalar<signed char>(v43);
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v65.__r_.__value_.__l.__data_);
LABEL_56:
    v44 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v45 = v44[1];
    v49 = *v44;
    v50 = (std::__shared_weak_count *)v45;
    if (v45)
    {
      v46 = (unint64_t *)(v45 + 8);
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
    }
    MIL::Operators::Common::Shared::ValidateTopkInputs(v21, v23, v27, &v49, a3);
    v17 = v50;
    if (v50)
    {
      v48 = (unint64_t *)&v50->__shared_owners_;
      do
        v19 = __ldaxr(v48);
      while (__stlxr(v19 - 1, v48));
LABEL_62:
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
      return;
    }
    return;
  }
  Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(*(MIL::IRNamedValueType **)(*v5 + 16));
  v8 = MIL::IRValueType::AsTensorType(Type);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 88))(v8);
  if ((v9 & 0xFFFFFFFB) == 0xB)
  {
    if (IsParameterSet)
    {
      v10 = v9;
      std::string::basic_string[abi:ne180100]<0>(&__p, "output_indices_dtype");
      v11 = (MIL::IRValue *)MIL::IROperation::GetParameterValue(this);
      v12 = (const void *)MIL::IRValue::AsTensor(v11);
      MIL::IRValue::GetScalar<std::string>(v12, &v65);
      if (v60 < 0)
        operator delete(__p);
      if (MIL::StringToIRDataType((const void **)&v65.__r_.__value_.__l.__data_, 0) != v10)
      {
        v36 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
        v37 = (std::__shared_weak_count *)v36[1];
        v57 = *v36;
        v58 = v37;
        if (v37)
        {
          v38 = (unint64_t *)&v37->__shared_owners_;
          do
            v39 = __ldxr(v38);
          while (__stxr(v39 + 1, v38));
        }
        std::string::basic_string[abi:ne180100]<0>(v55, "output_indices_dtype, if set, must match the datatype of the indices output");
        MIL::ValidationResult::ValidationResult(a3, &v57, 315, v55);
        if (v56 < 0)
          operator delete(v55[0]);
        v40 = v58;
        if (v58)
        {
          v41 = (unint64_t *)&v58->__shared_owners_;
          do
            v42 = __ldaxr(v41);
          while (__stlxr(v42 - 1, v41));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
        if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v65.__r_.__value_.__l.__data_);
        return;
      }
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v65.__r_.__value_.__l.__data_);
    }
    goto LABEL_21;
  }
  v28 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v29 = (std::__shared_weak_count *)v28[1];
  v63 = *v28;
  v64 = v29;
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  std::string::basic_string[abi:ne180100]<0>(v61, "Unsupported dtype for indices output");
  MIL::ValidationResult::ValidationResult(a3, &v63, 315, v61);
  if (v62 < 0)
    operator delete(v61[0]);
  v17 = v64;
  if (v64)
  {
    v32 = (unint64_t *)&v64->__shared_owners_;
    do
      v19 = __ldaxr(v32);
    while (__stlxr(v19 - 1, v32));
    goto LABEL_62;
  }
}

void sub_1E0926DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (a25 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  if (*(char *)(v33 - 49) < 0)
    operator delete(*(void **)(v33 - 72));
  _Unwind_Resume(a1);
}

_OWORD *`anonymous namespace'::StandardizeCoordinates@<X0>(uint64_t **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  float32x4_t v4;
  float32x2_t v5;
  _OWORD *v6;
  float32x4_t v7;
  __int128 v8;
  _OWORD *result;
  float32x4_t v10;

  v3 = *a1;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v4.i64[0] = *v3;
  v5 = (float32x2_t)v3[1];
  v4.i64[1] = *v3;
  v10 = v4;
  v6 = operator new(0x10uLL);
  *(int8x8_t *)v7.f32 = vbic_s8((int8x8_t)vmul_f32(v5, (float32x2_t)0x3F0000003F000000), (int8x8_t)vcltz_f32(v5));
  v7.i64[1] = v7.i64[0];
  *(_QWORD *)&v8 = vsubq_f32(v10, v7).u64[0];
  *((_QWORD *)&v8 + 1) = vaddq_f32(v10, v7).i64[1];
  *a2 = v6;
  *v6 = v8;
  result = v6 + 1;
  a2[1] = result;
  a2[2] = result;
  return result;
}

_QWORD *std::vector<std::vector<unsigned long>>::vector(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = 3 * a2;
    v8 = &v6[3 * a2];
    v9 = 8 * v7;
    do
    {
      *v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v6, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_1E0926FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::__function::__func<`anonymous namespace'::SelectBoxIndices(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,float,unsigned long long,BOOL)::$_0,std::allocator<`anonymous namespace'::SelectBoxIndices(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,float,unsigned long long,BOOL)::$_0>,int ()(int)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<`anonymous namespace'::SelectBoxIndices(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,float,unsigned long long,BOOL)::$_0,std::allocator<`anonymous namespace'::SelectBoxIndices(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,float,unsigned long long,BOOL)::$_0>,int ()(int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1EA9A17A8;
  return result;
}

void std::__function::__func<`anonymous namespace'::SelectBoxIndices(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,float,unsigned long long,BOOL)::$_0,std::allocator<`anonymous namespace'::SelectBoxIndices(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,float,unsigned long long,BOOL)::$_0>,int ()(int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1EA9A17A8;
}

uint64_t std::__function::__func<`anonymous namespace'::SelectBoxIndices(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,float,unsigned long long,BOOL)::$_0,std::allocator<`anonymous namespace'::SelectBoxIndices(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,float,unsigned long long,BOOL)::$_0>,int ()(int)>::operator()(uint64_t a1, _DWORD *a2)
{
  return (*a2 - 1);
}

uint64_t std::__function::__func<`anonymous namespace'::SelectBoxIndices(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,float,unsigned long long,BOOL)::$_0,std::allocator<`anonymous namespace'::SelectBoxIndices(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,float,unsigned long long,BOOL)::$_0>,int ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<`anonymous namespace'::SelectBoxIndices(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,float,unsigned long long,BOOL)::$_0,std::allocator<`anonymous namespace'::SelectBoxIndices(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,float,unsigned long long,BOOL)::$_0>,int ()(int)>::target_type()
{
}

void *std::get_temporary_buffer[abi:ne180100]<unsigned long>(uint64_t a1)
{
  unint64_t v1;
  const std::nothrow_t *v2;
  void *result;
  BOOL v4;

  if (a1 < 1)
    return 0;
  if (a1 >= 0xFFFFFFFFFFFFFFFLL)
    v1 = 0xFFFFFFFFFFFFFFFLL;
  else
    v1 = a1;
  v2 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  while (1)
  {
    result = operator new(8 * v1, v2);
    if (result)
      break;
    v4 = v1 > 1;
    v1 >>= 1;
    if (!v4)
      return 0;
  }
  return result;
}

uint64_t *std::__stable_sort<std::_ClassicAlgPolicy,`anonymous namespace'::ArgsortDesc(std::vector<float> const&)::$_0 &,std::__wrap_iter<unsigned long *>>(uint64_t *result, uint64_t *a2, uint64_t **a3, unint64_t a4, uint64_t *a5, uint64_t a6)
{
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  uint64_t *v20;
  char *v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  char *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  char v36;
  uint64_t *v37;
  uint64_t v38;

  if (a4 >= 2)
  {
    v8 = (char *)result;
    if (a4 == 2)
    {
      v9 = *(a2 - 1);
      v10 = *result;
      if (*(float *)(**a3 + 4 * v9) > *(float *)(**a3 + 4 * *result))
      {
        *result = v9;
        *(a2 - 1) = v10;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v22 = (char *)a5;
      v23 = a4 >> 1;
      v24 = &result[a4 >> 1];
      v25 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        v26 = (uint64_t *)&v22[8 * v23];
        v27 = &v22[8 * a4];
        v28 = *a3;
        v29 = v26;
        while (v29 != (uint64_t *)v27)
        {
          v30 = v29;
          v31 = *v29;
          v32 = *(float *)(*v28 + 4 * v31);
          v33 = *(_QWORD *)v22;
          v34 = *(float *)(*v28 + 4 * *(_QWORD *)v22);
          if (v32 > v34)
            v33 = v31;
          v22 += 8 * (v32 <= v34);
          v29 = &v30[v32 > v34];
          *(_QWORD *)v8 = v33;
          v8 += 8;
          if (v22 == (char *)v26)
          {
            if (v29 != (uint64_t *)v27)
            {
              v35 = 0;
              if (v32 > v34)
                v36 = 1;
              else
                v36 = 2;
              v37 = &v30[v36 & 1];
              do
              {
                *(_QWORD *)&v8[v35 * 8] = v37[v35];
                ++v35;
              }
              while (&v37[v35] != (uint64_t *)v27);
            }
            return result;
          }
        }
        if (v22 != (char *)v26)
        {
          v38 = 0;
          do
          {
            *(_QWORD *)&v8[v38] = *(_QWORD *)&v22[v38];
            v38 += 8;
          }
          while (&v22[v38] != (char *)v26);
        }
      }
      else
      {
      }
    }
    else if (result != a2)
    {
      v12 = result + 1;
      if (result + 1 != a2)
      {
        v13 = 0;
        v14 = **a3;
        v15 = result;
        do
        {
          v16 = *v15;
          v15 = v12;
          v17 = *v12;
          v18 = *(float *)(v14 + 4 * v17);
          if (v18 > *(float *)(v14 + 4 * v16))
          {
            v19 = v13;
            while (1)
            {
              *(uint64_t *)((char *)result + v19 + 8) = v16;
              if (!v19)
                break;
              v16 = *(uint64_t *)((char *)result + v19 - 8);
              v19 -= 8;
              if (v18 <= *(float *)(v14 + 4 * v16))
              {
                v20 = (uint64_t *)((char *)result + v19 + 8);
                goto LABEL_15;
              }
            }
            v20 = result;
LABEL_15:
            *v20 = v17;
          }
          v12 = v15 + 1;
          v13 += 8;
        }
        while (v15 + 1 != a2);
      }
    }
  }
  return result;
}

uint64_t *std::__stable_sort_move<std::_ClassicAlgPolicy,`anonymous namespace'::ArgsortDesc(std::vector<float> const&)::$_0 &,std::__wrap_iter<unsigned long *>>(uint64_t *result, uint64_t *a2, uint64_t **a3, unint64_t a4, uint64_t *a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;

  if (a4)
  {
    v5 = a5;
    v7 = result;
    if (a4 == 1)
    {
LABEL_8:
      *v5 = *v7;
      return result;
    }
    if (a4 == 2)
    {
      v10 = *(a2 - 1);
      v11 = **a3;
      v12 = *(float *)(v11 + 4 * v10);
      v13 = *(float *)(v11 + 4 * *result);
      if (v12 <= v13)
        v10 = *result;
      *a5 = v10;
      v5 = a5 + 1;
      if (v12 <= v13)
        v7 = a2 - 1;
      goto LABEL_8;
    }
    if ((uint64_t)a4 > 8)
    {
      v24 = &result[a4 >> 1];
      v25 = *a3;
      v26 = &v7[a4 >> 1];
      while (v26 != a2)
      {
        v27 = v26;
        v28 = *v26;
        v29 = *(float *)(*v25 + 4 * v28);
        v30 = *v7;
        v31 = *(float *)(*v25 + 4 * *v7);
        if (v29 > v31)
          v30 = v28;
        v26 = &v27[v29 > v31];
        v7 += v29 <= v31;
        *v5++ = v30;
        if (v7 == v24)
        {
          if (v26 != a2)
          {
            v32 = 0;
            v33 = &v27[v29 > v31];
            do
            {
              v5[v32] = v33[v32];
              ++v32;
            }
            while (&v33[v32] != a2);
          }
          return result;
        }
      }
      if (v7 != v24)
      {
        v34 = 0;
        do
        {
          v5[v34] = v7[v34];
          ++v34;
        }
        while (&v7[v34] != v24);
      }
    }
    else if (result != a2)
    {
      v14 = result + 1;
      *a5 = *result;
      if (result + 1 != a2)
      {
        v15 = 0;
        v16 = **a3;
        v17 = a5;
        v18 = a5;
        do
        {
          v20 = *v18++;
          v19 = v20;
          if (*(float *)(v16 + 4 * *v14) <= *(float *)(v16 + 4 * v20))
          {
            *v18 = *v14;
          }
          else
          {
            v17[1] = v19;
            v21 = a5;
            if (v17 != a5)
            {
              v22 = v15;
              while (1)
              {
                v21 = (uint64_t *)((char *)a5 + v22);
                v23 = *(uint64_t *)((char *)a5 + v22 - 8);
                if (*(float *)(v16 + 4 * *v14) <= *(float *)(v16 + 4 * v23))
                  break;
                *v21 = v23;
                v22 -= 8;
                if (!v22)
                {
                  v21 = a5;
                  break;
                }
              }
            }
            *v21 = *v14;
          }
          ++v14;
          v15 += 8;
          v17 = v18;
        }
        while (v14 != a2);
      }
    }
  }
  return result;
}

char *std::__inplace_merge<std::_ClassicAlgPolicy,`anonymous namespace'::ArgsortDesc(std::vector<float> const&)::$_0 &,std::__wrap_iter<unsigned long *>>(char *result, char *a2, char *a3, uint64_t **a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  uint64_t v10;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  char *v50;
  uint64_t v51;
  float v52;
  float v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t **v58;
  char *__src;

  if (a6)
  {
    v10 = a6;
    v13 = result;
    while (v10 > a8 && a5 > a8)
    {
      if (!a5)
        return result;
      v14 = 0;
      v15 = **a4;
      v16 = -a5;
      while (1)
      {
        v17 = *(_QWORD *)&v13[v14];
        if (*(float *)(v15 + 4 * *(_QWORD *)a2) > *(float *)(v15 + 4 * v17))
          break;
        v14 += 8;
        if (__CFADD__(v16++, 1))
          return result;
      }
      v58 = a4;
      __src = a7;
      v56 = a8;
      v57 = a3;
      v55 = &v13[v14];
      if (-v16 >= v10)
      {
        if (v16 == -1)
        {
          *(_QWORD *)&v13[v14] = *(_QWORD *)a2;
          *(_QWORD *)a2 = v17;
          return result;
        }
        if (v16 <= 0)
          v29 = -v16;
        else
          v29 = 1 - v16;
        v28 = v29 >> 1;
        v22 = &v13[8 * (v29 >> 1) + v14];
        v21 = a2;
        if (a2 != a3)
        {
          v30 = (a3 - a2) >> 3;
          v21 = a2;
          do
          {
            v31 = v30 >> 1;
            v32 = &v21[8 * (v30 >> 1)];
            v34 = *(_QWORD *)v32;
            v33 = v32 + 8;
            v30 += ~(v30 >> 1);
            if (*(float *)(v15 + 4 * v34) > *(float *)(v15 + 4 * *(_QWORD *)v22))
              v21 = v33;
            else
              v30 = v31;
          }
          while (v30);
        }
        v20 = (v21 - a2) >> 3;
      }
      else
      {
        if (v10 >= 0)
          v19 = v10;
        else
          v19 = v10 + 1;
        v20 = v19 >> 1;
        v21 = &a2[8 * (v19 >> 1)];
        v22 = a2;
        if (a2 - v13 != v14)
        {
          v23 = (a2 - v13 - v14) >> 3;
          v22 = &v13[v14];
          do
          {
            v24 = v23 >> 1;
            v25 = &v22[8 * (v23 >> 1)];
            v27 = *(_QWORD *)v25;
            v26 = v25 + 8;
            v23 += ~(v23 >> 1);
            if (*(float *)(v15 + 4 * *(_QWORD *)v21) > *(float *)(v15 + 4 * v27))
              v23 = v24;
            else
              v22 = v26;
          }
          while (v23);
        }
        v28 = (v22 - v13 - v14) >> 3;
      }
      a5 = -(v28 + v16);
      v35 = v10 - v20;
      v36 = v28;
      v37 = std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(v22, a2, v21);
      v38 = v36;
      v39 = v37;
      if (v38 + v20 >= v10 - (v38 + v20) - v16)
      {
        v42 = v21;
        v43 = v38;
        a8 = v56;
        a2 = v22;
        a4 = v58;
        v35 = v20;
        a7 = __src;
        a5 = v43;
        a3 = v39;
        v13 = v55;
      }
      else
      {
        v40 = v22;
        a4 = v58;
        v41 = v20;
        a7 = __src;
        v13 = v39;
        a2 = v21;
        a8 = v56;
        a3 = v57;
      }
      v10 = v35;
      if (!v35)
        return result;
    }
    if (a5 <= v10)
    {
      if (v13 != a2)
      {
        v48 = 0;
        do
        {
          *(_QWORD *)&a7[v48] = *(_QWORD *)&v13[v48];
          v48 += 8;
        }
        while (&v13[v48] != a2);
        if (v48)
        {
          v49 = *a4;
          v50 = a7;
          while (a2 != a3)
          {
            v51 = *(_QWORD *)a2;
            v52 = *(float *)(*v49 + 4 * *(_QWORD *)a2);
            v53 = *(float *)(*v49 + 4 * *(_QWORD *)v50);
            if (v52 <= v53)
              v51 = *(_QWORD *)v50;
            a2 += 8 * (v52 > v53);
            v50 += 8 * (v52 <= v53);
            *(_QWORD *)v13 = v51;
            v13 += 8;
            if (&a7[v48] == v50)
              return result;
          }
          return (char *)memmove(v13, v50, a7 - v50 + v48);
        }
      }
    }
    else if (a3 != a2)
    {
      v44 = 0;
      do
      {
        *(_QWORD *)&a7[v44] = *(_QWORD *)&a2[v44];
        v44 += 8;
      }
      while (&a2[v44] != a3);
      if (v44)
      {
        v45 = &a7[v44];
        v46 = a3 - 8;
        while (a2 != v13)
        {
          v47 = *((_QWORD *)v45 - 1);
          if (*(float *)(**a4 + 4 * v47) <= *(float *)(**a4 + 4 * *((_QWORD *)a2 - 1)))
          {
            v45 -= 8;
          }
          else
          {
            v47 = *((_QWORD *)a2 - 1);
            a2 -= 8;
          }
          *(_QWORD *)v46 = v47;
          v46 -= 8;
          if (v45 == a7)
            return result;
        }
        v54 = 0;
        do
        {
          *(_QWORD *)&v46[v54] = *(_QWORD *)&v45[v54 - 8];
          v54 -= 8;
        }
        while (&v45[v54] != a7);
      }
    }
  }
  return result;
}

char *std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(char *__src, char *a2, char *a3)
{
  char *v4;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  size_t v9;

  v4 = a3;
  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }
    else if (__src + 8 == a2)
    {
      v6 = *(_QWORD *)__src;
      v7 = a3 - a2;
      memmove(__src, a2, a3 - a2);
      v4 = &__src[v7];
      *(_QWORD *)v4 = v6;
    }
    else if (a2 + 8 == a3)
    {
      v8 = *((_QWORD *)a3 - 1);
      v4 = __src + 8;
      v9 = a3 - 8 - __src;
      if (a3 - 8 != __src)
        memmove(__src + 8, __src, v9);
      *(_QWORD *)__src = v8;
    }
    else
    {
      return (char *)std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned long *>>(__src, a2, a3);
    }
  }
  return v4;
}

_QWORD *std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned long *>>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  char v19;
  uint64_t v20;

  v3 = a2 - a1;
  if (v3 == a3 - a2)
  {
    if (a1 != a2 && a2 != a3)
    {
      v4 = a1 + 1;
      v5 = a2 + 1;
      do
      {
        v6 = *(v4 - 1);
        *(v4 - 1) = *(v5 - 1);
        *(v5 - 1) = v6;
        if (v4 == a2)
          break;
        ++v4;
      }
      while (v5++ != a3);
    }
  }
  else
  {
    v8 = a3 - a2;
    v9 = a2 - a1;
    do
    {
      v10 = v9;
      v9 = v8;
      v8 = v10 % v8;
    }
    while (v8);
    if (v9)
    {
      v11 = &a1[v9];
      do
      {
        v13 = *--v11;
        v12 = v13;
        v14 = &v11[v3];
        v15 = v11;
        do
        {
          v16 = v14;
          *v15 = *v14;
          v17 = &v14[v3];
          v18 = __OFSUB__(v3, a3 - v14);
          v20 = v3 - (a3 - v14);
          v19 = (v20 < 0) ^ v18;
          v14 = &a1[v20];
          if (v19)
            v14 = v17;
          v15 = v16;
        }
        while (v14 != v11);
        *v16 = v12;
      }
      while (v11 != a1);
    }
    return &a1[a3 - a2];
  }
  return a2;
}

uint64_t MIL::Operators::Common::ios17::NonMaximumSuppression::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  unsigned __int8 *v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  unsigned __int8 *v39;
  void *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  unsigned __int8 *v45;
  void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  char **v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  std::__shared_weak_count_vtbl *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t *v72;
  char *v73;
  char *v74;
  char *v75;
  __int128 v76;
  char *v77;
  char *v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  char **v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  std::__shared_weak_count_vtbl *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t *v104;
  char *v105;
  char *v106;
  char *v107;
  __int128 v108;
  char *v109;
  char *v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  char **v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  std::__shared_weak_count_vtbl *v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  char *v125;
  char *v126;
  char *v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t *v134;
  char *v135;
  char *v136;
  char *v137;
  __int128 v138;
  char *v139;
  char *v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  _QWORD *v147;
  char **v148;
  _QWORD *v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  _OWORD *v159;
  unsigned __int8 *v160;
  void *v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  uint64_t v165;
  std::__shared_weak_count_vtbl *v166;
  std::__shared_weak_count *v167;
  std::__shared_weak_count *v168;
  unint64_t *p_shared_owners;
  unint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  void *v177;
  std::__shared_weak_count *v178;
  std::__shared_weak_count_vtbl *v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  void *v183;
  void *v184;
  std::__shared_weak_count *v185;
  std::__shared_weak_count_vtbl *v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  void *v190;
  void *v191;
  std::__shared_weak_count *v192;
  std::__shared_weak_count_vtbl *v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  void *v197;
  void *v198;
  std::__shared_weak_count *v199;
  std::__shared_weak_count_vtbl *v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  void *v204;
  void *v205;
  std::__shared_weak_count *v206;
  std::__shared_weak_count_vtbl *v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  void *v211;
  void *v212;
  std::__shared_weak_count *v213;
  std::__shared_weak_count_vtbl *v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  void *v218;
  uint64_t v219;
  std::__shared_weak_count *v220;
  std::__shared_weak_count_vtbl *v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  void *v225;
  void *v226;
  std::__shared_weak_count *v227;
  std::__shared_weak_count_vtbl *v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  void *v232;
  void *v233;
  std::__shared_weak_count *v234;
  std::__shared_weak_count_vtbl *v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  void *v239;
  void *v240;
  std::__shared_weak_count *v241;
  std::__shared_weak_count_vtbl *v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  void *v246;
  void *v247;
  std::__shared_weak_count *v248;
  std::__shared_weak_count_vtbl *v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  void *v253;
  void *v254;
  std::__shared_weak_count *v255;
  std::__shared_weak_count_vtbl *v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  void *v260;
  void *v261;
  std::__shared_weak_count *v262;
  std::__shared_weak_count_vtbl *v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  void *v267;
  void *v268;
  std::__shared_weak_count *v269;
  std::__shared_weak_count_vtbl *v270;
  std::__shared_weak_count *v271;
  unint64_t *v272;
  unint64_t v273;
  void *v274;
  void *v275;
  std::__shared_weak_count *v276;
  std::__shared_weak_count_vtbl *v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  void *v281;
  void *v282;
  std::__shared_weak_count *v283;
  std::__shared_weak_count_vtbl *v284;
  std::__shared_weak_count *v285;
  unint64_t *v286;
  unint64_t v287;
  void *v288;
  void *v289;
  std::__shared_weak_count *v290;
  std::__shared_weak_count_vtbl *v291;
  std::__shared_weak_count *v292;
  unint64_t *v293;
  unint64_t v294;
  void *v295;
  void *v296;
  std::__shared_weak_count *v297;
  std::__shared_weak_count_vtbl *v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  void *v302;
  void *v303;
  std::__shared_weak_count *v304;
  std::__shared_weak_count_vtbl *v305;
  std::__shared_weak_count *v306;
  unint64_t *v307;
  unint64_t v308;
  void *v309;
  uint64_t v310;
  std::__shared_weak_count *v311;
  std::__shared_weak_count_vtbl *v312;
  std::__shared_weak_count *v313;
  unint64_t *v314;
  unint64_t v315;
  void *v316;
  uint64_t v317;
  std::__shared_weak_count *v318;
  uint64_t v319;
  uint64_t i;
  std::__shared_weak_count *v321;
  unint64_t *v322;
  unint64_t v323;
  uint64_t v324;
  uint64_t v325;
  std::__shared_weak_count *v326;
  uint64_t v327;
  std::__shared_weak_count *v328;
  unint64_t *v329;
  unint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t result;
  uint64_t v334;
  uint64_t v335;
  std::__shared_weak_count *v336;
  void *v337[2];
  char v338;
  uint64_t v339;
  std::__shared_weak_count *v340;
  void *v341;
  std::__shared_weak_count *v342;
  void *v343[2];
  char v344;
  void *v345;
  std::__shared_weak_count *v346;
  void *v347[2];
  char v348;
  void *v349;
  std::__shared_weak_count *v350;
  void *v351[2];
  char v352;
  void *v353;
  std::__shared_weak_count *v354;
  void *v355[2];
  char v356;
  void *v357;
  std::__shared_weak_count *v358;
  void *v359[2];
  char v360;
  void *v361;
  std::__shared_weak_count *v362;
  void *v363[2];
  char v364;
  void *v365;
  std::__shared_weak_count *v366;
  void *v367[2];
  char v368;
  void *v369;
  std::__shared_weak_count *v370;
  void *v371[2];
  char v372;
  void *v373[2];
  char v374;
  void *v375;
  std::__shared_weak_count *v376;
  void *v377[2];
  char v378;
  void *v379[2];
  char v380;
  void *v381;
  std::__shared_weak_count *v382;
  void *v383[2];
  char v384;
  void *v385[2];
  char v386;
  void *v387;
  std::__shared_weak_count *v388;
  void *v389[2];
  char v390;
  void *v391[2];
  char v392;
  void *v393;
  std::__shared_weak_count *v394;
  void *v395[2];
  char v396;
  void *v397[2];
  char v398;
  void *v399;
  std::__shared_weak_count *v400;
  void *v401;
  std::__shared_weak_count *v402;
  void *v403[2];
  char v404;
  void *v405;
  std::__shared_weak_count *v406;
  void *v407[2];
  char v408;
  void *v409;
  std::__shared_weak_count *v410;
  void *v411[2];
  char v412;
  void *v413;
  std::__shared_weak_count *v414;
  void *v415[2];
  char v416;
  void *v417[2];
  char v418;
  void *v419;
  std::__shared_weak_count *v420;
  void *v421[2];
  char v422;
  void *v423[2];
  char v424;
  void *v425;
  std::__shared_weak_count *v426;
  void *v427[2];
  char v428;
  void *v429[2];
  char v430;
  void *v431;
  std::__shared_weak_count *v432;
  std::__shared_weak_count_vtbl *v433;
  std::__shared_weak_count *v434;
  __n128 v435;
  __int128 v436;
  __int128 v437;
  void *v438[2];
  uint64_t v439;
  __n128 v440;
  __n128 v441;
  __n128 v442;
  uint64_t v443;
  uint64_t v444;
  _QWORD *v445;
  char **v446;
  __n128 v447;
  __n128 v448;
  __n128 v449;
  __n128 v450;
  __n128 v451;
  _QWORD *v452;
  void *Scalar;
  uint64_t v454;
  char *v455;
  char *v456;
  char **v457;
  uint64_t v458[3];
  uint64_t v459[3];
  void *v460[3];
  void *__p;
  void *v462;
  _QWORD *v463;
  _QWORD v464[3];
  _QWORD *v465;
  _QWORD v466[3];
  _QWORD *v467;
  _BYTE v468[24];
  _BYTE *v469;
  _QWORD v470[3];
  _QWORD *v471;
  std::__shared_weak_count_vtbl *v472;
  uint64_t p_get_deleter;
  _QWORD *p_on_zero_shared;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;

  v477 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v452 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)4);
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = (char *)operator new(0x18uLL);
  v455 = v10 + 24;
  *(_QWORD *)v10 = v7;
  *((_QWORD *)v10 + 1) = v8;
  *((_QWORD *)v10 + 2) = v9;
  Scalar = v10;
  v454 = (uint64_t)(v10 + 24);
  v472 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)4);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = operator new(0x18uLL);
  v463 = v14 + 3;
  *v14 = v11;
  v14[1] = v12;
  v14[2] = v13;
  __p = v14;
  v462 = v14 + 3;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v472, 2, &v451);
  MIL::IRParameter::Make(&v451, &v444);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "boxes", &v444);
  v15 = v444;
  v444 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v451.n128_u64[1];
  if (v451.n128_u64[1])
  {
    v17 = (unint64_t *)(v451.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v462 = __p;
    operator delete(__p);
  }
  if (Scalar)
  {
    v454 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v19 = v452;
  v20 = MIL::IRUnknownDimension::Make(a1, 0);
  v21 = MIL::IRUnknownDimension::Make(a1, 0);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = (char *)operator new(0x18uLL);
  v455 = v23 + 24;
  *(_QWORD *)v23 = v20;
  *((_QWORD *)v23 + 1) = v21;
  *((_QWORD *)v23 + 2) = v22;
  Scalar = v23;
  v454 = (uint64_t)(v23 + 24);
  v472 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = MIL::IRUnknownDimension::Make(a1, 0);
  v27 = operator new(0x18uLL);
  v463 = v27 + 3;
  *v27 = v24;
  v27[1] = v25;
  v27[2] = v26;
  __p = v27;
  v462 = v27 + 3;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v472, 2, &v450);
  MIL::IRParameter::Make(&v450, &v444);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(v19, "scores", &v444);
  v28 = v444;
  v444 = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  v29 = (std::__shared_weak_count *)v450.n128_u64[1];
  if (v450.n128_u64[1])
  {
    v30 = (unint64_t *)(v450.n128_u64[1] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (__p)
  {
    v462 = __p;
    operator delete(__p);
  }
  if (Scalar)
  {
    v454 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v32 = v452;
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v454 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v449);
  MIL::IRParameter::Make(&v449, (uint64_t *)&__p);
  v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v32, "iou_threshold", (uint64_t *)&__p);
  v34 = __p;
  __p = 0;
  if (v34)
    (*(void (**)(void *))(*(_QWORD *)v34 + 8))(v34);
  v35 = (std::__shared_weak_count *)v449.n128_u64[1];
  if (v449.n128_u64[1])
  {
    v36 = (unint64_t *)(v449.n128_u64[1] + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v33 + 5) + 32))(*((_QWORD *)v33 + 5), 1);
  v38 = v452;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v448);
  MIL::IRParameter::Make(&v448, (uint64_t *)&Scalar);
  v39 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v38, "max_boxes", (uint64_t *)&Scalar);
  v40 = Scalar;
  Scalar = 0;
  if (v40)
    (*(void (**)(void *))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v448.n128_u64[1];
  if (v448.n128_u64[1])
  {
    v42 = (unint64_t *)(v448.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v39 + 5) + 32))(*((_QWORD *)v39 + 5), 1);
  v44 = v452;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v447);
  MIL::IRParameter::Make(&v447, (uint64_t *)&Scalar);
  v45 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[22],std::unique_ptr<MIL::IRParameter>>(v44, "per_class_suppression", (uint64_t *)&Scalar);
  v46 = Scalar;
  Scalar = 0;
  if (v46)
    (*(void (**)(void *))(*(_QWORD *)v46 + 8))(v46);
  v47 = (std::__shared_weak_count *)v447.n128_u64[1];
  if (v447.n128_u64[1])
  {
    v48 = (unint64_t *)(v447.n128_u64[1] + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v45 + 5) + 32))(*((_QWORD *)v45 + 5), 1);
  v446 = 0;
  v50 = operator new();
  *(_QWORD *)v50 = 0;
  *(_QWORD *)(v50 + 8) = 0;
  *(_QWORD *)(v50 + 16) = 0;
  Scalar = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v446, (void **)v50);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&Scalar, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v446, 3uLL);
  v51 = v446;
  v52 = MIL::IRUnknownDimension::Make(a1, 0);
  v53 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)4);
  v54 = MIL::IRUnknownDimension::Make(a1, 0);
  v55 = operator new(0x18uLL);
  v463 = v55 + 3;
  *v55 = v52;
  v55[1] = v53;
  v55[2] = v54;
  __p = v55;
  v462 = v55 + 3;
  v475 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v56 = MIL::IRUnknownDimension::Make(a1, 0);
  v57 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)4);
  v58 = MIL::IRUnknownDimension::Make(a1, 0);
  v59 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (uint64_t)&v59->__get_deleter;
  p_on_zero_shared = &v59->__get_deleter;
  v59->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v56;
  v59->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v57;
  v59->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v58;
  v472 = v59;
  v476 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v472);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v475, 2, &v442);
  MIL::IRParameter::Make(&v442, &v443);
  v60 = v443;
  v444 = v443;
  if (v443)
  {
    v61 = (_QWORD *)operator new();
    v62 = v443;
    *v61 = &unk_1EA99F888;
    v61[1] = 0;
    v61[2] = 0;
    v61[3] = v62;
  }
  else
  {
    v61 = 0;
  }
  v445 = v61;
  v443 = 0;
  v63 = v51[2];
  v64 = v51[1];
  if (v64 >= v63)
  {
    v66 = (v64 - *v51) >> 4;
    v67 = v66 + 1;
    if ((unint64_t)(v66 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v68 = v63 - *v51;
    if (v68 >> 3 > v67)
      v67 = v68 >> 3;
    if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF0)
      v69 = 0xFFFFFFFFFFFFFFFLL;
    else
      v69 = v67;
    v457 = v51 + 2;
    v70 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v51 + 2), v69);
    v72 = (uint64_t *)&v70[16 * v66];
    *v72 = v60;
    v72[1] = (uint64_t)v61;
    v445 = 0;
    v444 = 0;
    v74 = *v51;
    v73 = v51[1];
    if (v73 == *v51)
    {
      v77 = v51[1];
      v75 = &v70[16 * v66];
    }
    else
    {
      v75 = &v70[16 * v66];
      do
      {
        v76 = *((_OWORD *)v73 - 1);
        v73 -= 16;
        *((_OWORD *)v75 - 1) = v76;
        v75 -= 16;
        *(_QWORD *)v73 = 0;
        *((_QWORD *)v73 + 1) = 0;
      }
      while (v73 != v74);
      v77 = *v51;
      v73 = v51[1];
    }
    v65 = (char *)(v72 + 2);
    *v51 = v75;
    v454 = (uint64_t)v77;
    v51[1] = (char *)(v72 + 2);
    v455 = v73;
    v78 = v51[2];
    v51[2] = &v70[16 * v71];
    v456 = v78;
    Scalar = v77;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v64 = v60;
    *((_QWORD *)v64 + 1) = v61;
    v65 = v64 + 16;
    v445 = 0;
    v444 = 0;
  }
  v51[1] = v65;
  v79 = v443;
  v443 = 0;
  if (v79)
    (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
  v80 = (std::__shared_weak_count *)v442.n128_u64[1];
  if (v442.n128_u64[1])
  {
    v81 = (unint64_t *)(v442.n128_u64[1] + 8);
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  if (v472)
  {
    p_get_deleter = (uint64_t)v472;
    operator delete(v472);
  }
  if (__p)
  {
    v462 = __p;
    operator delete(__p);
  }
  v83 = v446;
  v84 = MIL::IRUnknownDimension::Make(a1, 0);
  v85 = MIL::IRUnknownDimension::Make(a1, 0);
  v86 = MIL::IRUnknownDimension::Make(a1, 0);
  v87 = operator new(0x18uLL);
  v463 = v87 + 3;
  *v87 = v84;
  v87[1] = v85;
  v87[2] = v86;
  __p = v87;
  v462 = v87 + 3;
  v475 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v88 = MIL::IRUnknownDimension::Make(a1, 0);
  v89 = MIL::IRUnknownDimension::Make(a1, 0);
  v90 = MIL::IRUnknownDimension::Make(a1, 0);
  v91 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (uint64_t)&v91->__get_deleter;
  p_on_zero_shared = &v91->__get_deleter;
  v91->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v88;
  v91->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v89;
  v91->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v90;
  v472 = v91;
  v476 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v472);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v475, 2, &v441);
  MIL::IRParameter::Make(&v441, &v443);
  v92 = v443;
  v444 = v443;
  if (v443)
  {
    v93 = (_QWORD *)operator new();
    v94 = v443;
    *v93 = &unk_1EA99F888;
    v93[1] = 0;
    v93[2] = 0;
    v93[3] = v94;
  }
  else
  {
    v93 = 0;
  }
  v445 = v93;
  v443 = 0;
  v95 = v83[2];
  v96 = v83[1];
  if (v96 >= v95)
  {
    v98 = (v96 - *v83) >> 4;
    v99 = v98 + 1;
    if ((unint64_t)(v98 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v100 = v95 - *v83;
    if (v100 >> 3 > v99)
      v99 = v100 >> 3;
    if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFF0)
      v101 = 0xFFFFFFFFFFFFFFFLL;
    else
      v101 = v99;
    v457 = v83 + 2;
    v102 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v83 + 2), v101);
    v104 = (uint64_t *)&v102[16 * v98];
    *v104 = v92;
    v104[1] = (uint64_t)v93;
    v445 = 0;
    v444 = 0;
    v106 = *v83;
    v105 = v83[1];
    if (v105 == *v83)
    {
      v109 = v83[1];
      v107 = &v102[16 * v98];
    }
    else
    {
      v107 = &v102[16 * v98];
      do
      {
        v108 = *((_OWORD *)v105 - 1);
        v105 -= 16;
        *((_OWORD *)v107 - 1) = v108;
        v107 -= 16;
        *(_QWORD *)v105 = 0;
        *((_QWORD *)v105 + 1) = 0;
      }
      while (v105 != v106);
      v109 = *v83;
      v105 = v83[1];
    }
    v97 = (char *)(v104 + 2);
    *v83 = v107;
    v454 = (uint64_t)v109;
    v83[1] = (char *)(v104 + 2);
    v455 = v105;
    v110 = v83[2];
    v83[2] = &v102[16 * v103];
    v456 = v110;
    Scalar = v109;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v96 = v92;
    *((_QWORD *)v96 + 1) = v93;
    v97 = v96 + 16;
    v445 = 0;
    v444 = 0;
  }
  v83[1] = v97;
  v111 = v443;
  v443 = 0;
  if (v111)
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  v112 = (std::__shared_weak_count *)v441.n128_u64[1];
  if (v441.n128_u64[1])
  {
    v113 = (unint64_t *)(v441.n128_u64[1] + 8);
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  if (v472)
  {
    p_get_deleter = (uint64_t)v472;
    operator delete(v472);
  }
  if (__p)
  {
    v462 = __p;
    operator delete(__p);
  }
  v115 = v446;
  v116 = MIL::IRUnknownDimension::Make(a1, 0);
  v117 = MIL::IRUnknownDimension::Make(a1, 0);
  v118 = operator new(0x10uLL);
  v463 = v118 + 2;
  *v118 = v116;
  v118[1] = v117;
  __p = v118;
  v462 = v118 + 2;
  v475 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  v119 = MIL::IRUnknownDimension::Make(a1, 0);
  v120 = MIL::IRUnknownDimension::Make(a1, 0);
  v121 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_get_deleter = (uint64_t)&v121->__on_zero_shared;
  p_on_zero_shared = &v121->__on_zero_shared;
  v121->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v119;
  v121->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v120;
  v472 = v121;
  v476 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v472);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v475, 2, &v440);
  MIL::IRParameter::Make(&v440, &v443);
  v122 = v443;
  v444 = v443;
  if (v443)
  {
    v123 = (_QWORD *)operator new();
    v124 = v443;
    *v123 = &unk_1EA99F888;
    v123[1] = 0;
    v123[2] = 0;
    v123[3] = v124;
  }
  else
  {
    v123 = 0;
  }
  v445 = v123;
  v443 = 0;
  v125 = v115[2];
  v126 = v115[1];
  if (v126 >= v125)
  {
    v128 = (v126 - *v115) >> 4;
    v129 = v128 + 1;
    if ((unint64_t)(v128 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v130 = v125 - *v115;
    if (v130 >> 3 > v129)
      v129 = v130 >> 3;
    if ((unint64_t)v130 >= 0x7FFFFFFFFFFFFFF0)
      v131 = 0xFFFFFFFFFFFFFFFLL;
    else
      v131 = v129;
    v457 = v115 + 2;
    v132 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v115 + 2), v131);
    v134 = (uint64_t *)&v132[16 * v128];
    *v134 = v122;
    v134[1] = (uint64_t)v123;
    v445 = 0;
    v444 = 0;
    v136 = *v115;
    v135 = v115[1];
    if (v135 == *v115)
    {
      v139 = v115[1];
      v137 = &v132[16 * v128];
    }
    else
    {
      v137 = &v132[16 * v128];
      do
      {
        v138 = *((_OWORD *)v135 - 1);
        v135 -= 16;
        *((_OWORD *)v137 - 1) = v138;
        v137 -= 16;
        *(_QWORD *)v135 = 0;
        *((_QWORD *)v135 + 1) = 0;
      }
      while (v135 != v136);
      v139 = *v115;
      v135 = v115[1];
    }
    v127 = (char *)(v134 + 2);
    *v115 = v137;
    v454 = (uint64_t)v139;
    v115[1] = (char *)(v134 + 2);
    v455 = v135;
    v140 = v115[2];
    v115[2] = &v132[16 * v133];
    v456 = v140;
    Scalar = v139;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v126 = v122;
    *((_QWORD *)v126 + 1) = v123;
    v127 = v126 + 16;
    v445 = 0;
    v444 = 0;
  }
  v115[1] = v127;
  v141 = v443;
  v443 = 0;
  if (v141)
    (*(void (**)(uint64_t))(*(_QWORD *)v141 + 8))(v141);
  v142 = (std::__shared_weak_count *)v440.n128_u64[1];
  if (v440.n128_u64[1])
  {
    v143 = (unint64_t *)(v440.n128_u64[1] + 8);
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  if (v472)
  {
    p_get_deleter = (uint64_t)v472;
    operator delete(v472);
  }
  if (__p)
  {
    v462 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v438 = *(_OWORD *)a2;
  v439 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v145 = (uint64_t)v452;
  *(_QWORD *)&v437 = v452;
  if (v452)
  {
    v146 = (_QWORD *)operator new();
    *v146 = &unk_1EA99F8E8;
    v146[1] = 0;
    v146[2] = 0;
    v146[3] = v145;
  }
  else
  {
    v146 = 0;
  }
  *((_QWORD *)&v437 + 1) = v146;
  v452 = 0;
  *(_QWORD *)&v436 = v446;
  if (v446)
  {
    v147 = (_QWORD *)operator new();
    v148 = v446;
    *v147 = &unk_1EA99F948;
    v147[1] = 0;
    v147[2] = 0;
    v147[3] = v148;
  }
  else
  {
    v147 = 0;
  }
  *((_QWORD *)&v436 + 1) = v147;
  v446 = 0;
  v470[0] = &unk_1EA99FAC8;
  v470[1] = MIL::Operators::Common::ios17::CustomValidators::ValidateNonMaximumSuppression;
  v471 = v470;
  v469 = 0;
  MIL::IROperator::Make((__int128 *)v438, &v437, &v436, (uint64_t)v470, (uint64_t)v468, a3);
  v149 = v469;
  if (v469 == v468)
  {
    v150 = 4;
    v149 = v468;
  }
  else
  {
    if (!v469)
      goto LABEL_139;
    v150 = 5;
  }
  (*(void (**)(void))(*v149 + 8 * v150))();
LABEL_139:
  v151 = v471;
  if (v471 == v470)
  {
    v152 = 4;
    v151 = v470;
    goto LABEL_143;
  }
  if (v471)
  {
    v152 = 5;
LABEL_143:
    (*(void (**)(void))(*v151 + 8 * v152))();
  }
  v153 = (std::__shared_weak_count *)*((_QWORD *)&v436 + 1);
  if (*((_QWORD *)&v436 + 1))
  {
    v154 = (unint64_t *)(*((_QWORD *)&v436 + 1) + 8);
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
      std::__shared_weak_count::__release_weak(v153);
    }
  }
  v156 = (std::__shared_weak_count *)*((_QWORD *)&v437 + 1);
  if (*((_QWORD *)&v437 + 1))
  {
    v157 = (unint64_t *)(*((_QWORD *)&v437 + 1) + 8);
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  if (SHIBYTE(v439) < 0)
    operator delete(v438[0]);
  v472 = 0;
  v159 = (_OWORD *)operator new();
  *v159 = 0u;
  v159[1] = 0u;
  *((_DWORD *)v159 + 8) = 1065353216;
  v472 = (std::__shared_weak_count_vtbl *)v159;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v435);
  MIL::IRParameter::Make(&v435, (uint64_t *)&Scalar);
  v160 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v159, "minimum_compute_type", (uint64_t *)&Scalar);
  v161 = Scalar;
  Scalar = 0;
  if (v161)
    (*(void (**)(void *))(*(_QWORD *)v161 + 8))(v161);
  v162 = (std::__shared_weak_count *)v435.n128_u64[1];
  if (v435.n128_u64[1])
  {
    v163 = (unint64_t *)(v435.n128_u64[1] + 8);
    do
      v164 = __ldaxr(v163);
    while (__stlxr(v164 - 1, v163));
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v160 + 5) + 32))(*((_QWORD *)v160 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v160 + 5) + 48))(*((_QWORD *)v160 + 5), 1);
  v165 = *a3;
  v166 = v472;
  v433 = v472;
  if (v472)
  {
    v167 = (std::__shared_weak_count *)operator new();
    v167->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v167->__shared_owners_ = 0;
    v167->__shared_weak_owners_ = 0;
    v167[1].__vftable = v166;
  }
  else
  {
    v167 = 0;
  }
  v434 = v167;
  v472 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v165 + 184))(v165, &v433);
  v168 = v434;
  if (v434)
  {
    p_shared_owners = (unint64_t *)&v434->__shared_owners_;
    do
      v170 = __ldaxr(p_shared_owners);
    while (__stlxr(v170 - 1, p_shared_owners));
    if (!v170)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
  }
  v171 = *a3;
  v466[0] = &off_1EA99FBD8;
  v466[1] = MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceNonMaximumSuppression;
  v467 = v466;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v171 + 200))(v171, v466);
  v172 = v467;
  if (v467 == v466)
  {
    v173 = 4;
    v172 = v466;
  }
  else
  {
    if (!v467)
      goto LABEL_176;
    v173 = 5;
  }
  (*(void (**)(void))(*v172 + 8 * v173))();
LABEL_176:
  v174 = *a3;
  v464[0] = &off_1EA9A00F8;
  v464[1] = MIL::Operators::Common::ios17::CustomValueInference::ValueInferenceNonMaximumSuppression;
  v465 = v464;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v174 + 216))(v174, v464);
  v175 = v465;
  if (v465 == v464)
  {
    v176 = 4;
    v175 = v464;
  }
  else
  {
    if (!v465)
      goto LABEL_181;
    v176 = 5;
  }
  (*(void (**)(void))(*v175 + 8 * v176))();
LABEL_181:
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v177 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v429, "boxes");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v429, 0, (uint64_t *)&__p);
  v431 = __p;
  if (__p)
  {
    v178 = (std::__shared_weak_count *)operator new();
    v179 = (std::__shared_weak_count_vtbl *)__p;
    v178->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v178->__shared_owners_ = 0;
    v178->__shared_weak_owners_ = 0;
    v178[1].__vftable = v179;
  }
  else
  {
    v178 = 0;
  }
  v432 = v178;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v427, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v177 + 24))(v177, &v431, v427);
  if (v428 < 0)
    operator delete(v427[0]);
  v180 = v432;
  if (v432)
  {
    v181 = (unint64_t *)&v432->__shared_owners_;
    do
      v182 = __ldaxr(v181);
    while (__stlxr(v182 - 1, v181));
    if (!v182)
    {
      ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
      std::__shared_weak_count::__release_weak(v180);
    }
  }
  v183 = __p;
  __p = 0;
  if (v183)
    (*(void (**)(void *))(*(_QWORD *)v183 + 8))(v183);
  if (v430 < 0)
    operator delete(v429[0]);
  v184 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v423, "scores");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v423, 0, (uint64_t *)&__p);
  v425 = __p;
  if (__p)
  {
    v185 = (std::__shared_weak_count *)operator new();
    v186 = (std::__shared_weak_count_vtbl *)__p;
    v185->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v185->__shared_owners_ = 0;
    v185->__shared_weak_owners_ = 0;
    v185[1].__vftable = v186;
  }
  else
  {
    v185 = 0;
  }
  v426 = v185;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v421, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v184 + 24))(v184, &v425, v421);
  if (v422 < 0)
    operator delete(v421[0]);
  v187 = v426;
  if (v426)
  {
    v188 = (unint64_t *)&v426->__shared_owners_;
    do
      v189 = __ldaxr(v188);
    while (__stlxr(v189 - 1, v188));
    if (!v189)
    {
      ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
      std::__shared_weak_count::__release_weak(v187);
    }
  }
  v190 = __p;
  __p = 0;
  if (v190)
    (*(void (**)(void *))(*(_QWORD *)v190 + 8))(v190);
  if (v424 < 0)
    operator delete(v423[0]);
  v191 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v417, "iou_threshold");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v417, 0, (uint64_t *)&__p);
  v419 = __p;
  if (__p)
  {
    v192 = (std::__shared_weak_count *)operator new();
    v193 = (std::__shared_weak_count_vtbl *)__p;
    v192->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v192->__shared_owners_ = 0;
    v192->__shared_weak_owners_ = 0;
    v192[1].__vftable = v193;
  }
  else
  {
    v192 = 0;
  }
  v420 = v192;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v415, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v191 + 24))(v191, &v419, v415);
  if (v416 < 0)
    operator delete(v415[0]);
  v194 = v420;
  if (v420)
  {
    v195 = (unint64_t *)&v420->__shared_owners_;
    do
      v196 = __ldaxr(v195);
    while (__stlxr(v196 - 1, v195));
    if (!v196)
    {
      ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
      std::__shared_weak_count::__release_weak(v194);
    }
  }
  v197 = __p;
  __p = 0;
  if (v197)
    (*(void (**)(void *))(*(_QWORD *)v197 + 8))(v197);
  if (v418 < 0)
    operator delete(v417[0]);
  v198 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v413 = __p;
  if (__p)
  {
    v199 = (std::__shared_weak_count *)operator new();
    v200 = (std::__shared_weak_count_vtbl *)__p;
    v199->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v199->__shared_owners_ = 0;
    v199->__shared_weak_owners_ = 0;
    v199[1].__vftable = v200;
  }
  else
  {
    v199 = 0;
  }
  v414 = v199;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v411, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v198 + 24))(v198, &v413, v411);
  if (v412 < 0)
    operator delete(v411[0]);
  v201 = v414;
  if (v414)
  {
    v202 = (unint64_t *)&v414->__shared_owners_;
    do
      v203 = __ldaxr(v202);
    while (__stlxr(v203 - 1, v202));
    if (!v203)
    {
      ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
      std::__shared_weak_count::__release_weak(v201);
    }
  }
  v204 = __p;
  __p = 0;
  if (v204)
    (*(void (**)(void *))(*(_QWORD *)v204 + 8))(v204);
  v205 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 0, &__p);
  v409 = __p;
  if (__p)
  {
    v206 = (std::__shared_weak_count *)operator new();
    v207 = (std::__shared_weak_count_vtbl *)__p;
    v206->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v206->__shared_owners_ = 0;
    v206->__shared_weak_owners_ = 0;
    v206[1].__vftable = v207;
  }
  else
  {
    v206 = 0;
  }
  v410 = v206;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v407, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v205 + 24))(v205, &v409, v407);
  if (v408 < 0)
    operator delete(v407[0]);
  v208 = v410;
  if (v410)
  {
    v209 = (unint64_t *)&v410->__shared_owners_;
    do
      v210 = __ldaxr(v209);
    while (__stlxr(v210 - 1, v209));
    if (!v210)
    {
      ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
      std::__shared_weak_count::__release_weak(v208);
    }
  }
  v211 = __p;
  __p = 0;
  if (v211)
    (*(void (**)(void *))(*(_QWORD *)v211 + 8))(v211);
  v212 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)2, 0, &__p);
  v405 = __p;
  if (__p)
  {
    v213 = (std::__shared_weak_count *)operator new();
    v214 = (std::__shared_weak_count_vtbl *)__p;
    v213->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v213->__shared_owners_ = 0;
    v213->__shared_weak_owners_ = 0;
    v213[1].__vftable = v214;
  }
  else
  {
    v213 = 0;
  }
  v406 = v213;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v403, "U");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v212 + 24))(v212, &v405, v403);
  if (v404 < 0)
    operator delete(v403[0]);
  v215 = v406;
  if (v406)
  {
    v216 = (unint64_t *)&v406->__shared_owners_;
    do
      v217 = __ldaxr(v216);
    while (__stlxr(v217 - 1, v216));
    if (!v217)
    {
      ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
      std::__shared_weak_count::__release_weak(v215);
    }
  }
  v218 = __p;
  __p = 0;
  if (v218)
    (*(void (**)(void *))(*(_QWORD *)v218 + 8))(v218);
  v219 = *a3;
  v401 = Scalar;
  if (Scalar)
  {
    v220 = (std::__shared_weak_count *)operator new();
    v221 = (std::__shared_weak_count_vtbl *)Scalar;
    v220->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v220->__shared_owners_ = 0;
    v220->__shared_weak_owners_ = 0;
    v220[1].__vftable = v221;
  }
  else
  {
    v220 = 0;
  }
  v402 = v220;
  Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v219 + 56))(v219, &v401);
  v222 = v402;
  if (v402)
  {
    v223 = (unint64_t *)&v402->__shared_owners_;
    do
      v224 = __ldaxr(v223);
    while (__stlxr(v224 - 1, v223));
    if (!v224)
    {
      ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
      std::__shared_weak_count::__release_weak(v222);
    }
  }
  v225 = Scalar;
  Scalar = 0;
  if (v225)
    (*(void (**)(void *))(*(_QWORD *)v225 + 8))(v225);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&Scalar);
  v226 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v397, "boxes");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v397, 0, (uint64_t *)&__p);
  v399 = __p;
  if (__p)
  {
    v227 = (std::__shared_weak_count *)operator new();
    v228 = (std::__shared_weak_count_vtbl *)__p;
    v227->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v227->__shared_owners_ = 0;
    v227->__shared_weak_owners_ = 0;
    v227[1].__vftable = v228;
  }
  else
  {
    v227 = 0;
  }
  v400 = v227;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v395, "B");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v226 + 24))(v226, &v399, 0, v395);
  if (v396 < 0)
    operator delete(v395[0]);
  v229 = v400;
  if (v400)
  {
    v230 = (unint64_t *)&v400->__shared_owners_;
    do
      v231 = __ldaxr(v230);
    while (__stlxr(v231 - 1, v230));
    if (!v231)
    {
      ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
      std::__shared_weak_count::__release_weak(v229);
    }
  }
  v232 = __p;
  __p = 0;
  if (v232)
    (*(void (**)(void *))(*(_QWORD *)v232 + 8))(v232);
  if (v398 < 0)
    operator delete(v397[0]);
  v233 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v391, "boxes");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v391, 0, (uint64_t *)&__p);
  v393 = __p;
  if (__p)
  {
    v234 = (std::__shared_weak_count *)operator new();
    v235 = (std::__shared_weak_count_vtbl *)__p;
    v234->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v234->__shared_owners_ = 0;
    v234->__shared_weak_owners_ = 0;
    v234[1].__vftable = v235;
  }
  else
  {
    v234 = 0;
  }
  v394 = v234;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v389, "N");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v233 + 24))(v233, &v393, 2, v389);
  if (v390 < 0)
    operator delete(v389[0]);
  v236 = v394;
  if (v394)
  {
    v237 = (unint64_t *)&v394->__shared_owners_;
    do
      v238 = __ldaxr(v237);
    while (__stlxr(v238 - 1, v237));
    if (!v238)
    {
      ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
      std::__shared_weak_count::__release_weak(v236);
    }
  }
  v239 = __p;
  __p = 0;
  if (v239)
    (*(void (**)(void *))(*(_QWORD *)v239 + 8))(v239);
  if (v392 < 0)
    operator delete(v391[0]);
  v240 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v385, "scores");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v385, 0, (uint64_t *)&__p);
  v387 = __p;
  if (__p)
  {
    v241 = (std::__shared_weak_count *)operator new();
    v242 = (std::__shared_weak_count_vtbl *)__p;
    v241->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v241->__shared_owners_ = 0;
    v241->__shared_weak_owners_ = 0;
    v241[1].__vftable = v242;
  }
  else
  {
    v241 = 0;
  }
  v388 = v241;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v383, "B");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v240 + 24))(v240, &v387, 0, v383);
  if (v384 < 0)
    operator delete(v383[0]);
  v243 = v388;
  if (v388)
  {
    v244 = (unint64_t *)&v388->__shared_owners_;
    do
      v245 = __ldaxr(v244);
    while (__stlxr(v245 - 1, v244));
    if (!v245)
    {
      ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
      std::__shared_weak_count::__release_weak(v243);
    }
  }
  v246 = __p;
  __p = 0;
  if (v246)
    (*(void (**)(void *))(*(_QWORD *)v246 + 8))(v246);
  if (v386 < 0)
    operator delete(v385[0]);
  v247 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v379, "scores");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v379, 0, (uint64_t *)&__p);
  v381 = __p;
  if (__p)
  {
    v248 = (std::__shared_weak_count *)operator new();
    v249 = (std::__shared_weak_count_vtbl *)__p;
    v248->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v248->__shared_owners_ = 0;
    v248->__shared_weak_owners_ = 0;
    v248[1].__vftable = v249;
  }
  else
  {
    v248 = 0;
  }
  v382 = v248;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v377, "K");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v247 + 24))(v247, &v381, 1, v377);
  if (v378 < 0)
    operator delete(v377[0]);
  v250 = v382;
  if (v382)
  {
    v251 = (unint64_t *)&v382->__shared_owners_;
    do
      v252 = __ldaxr(v251);
    while (__stlxr(v252 - 1, v251));
    if (!v252)
    {
      ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
      std::__shared_weak_count::__release_weak(v250);
    }
  }
  v253 = __p;
  __p = 0;
  if (v253)
    (*(void (**)(void *))(*(_QWORD *)v253 + 8))(v253);
  if (v380 < 0)
    operator delete(v379[0]);
  v254 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v373, "scores");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v373, 0, (uint64_t *)&__p);
  v375 = __p;
  if (__p)
  {
    v255 = (std::__shared_weak_count *)operator new();
    v256 = (std::__shared_weak_count_vtbl *)__p;
    v255->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v255->__shared_owners_ = 0;
    v255->__shared_weak_owners_ = 0;
    v255[1].__vftable = v256;
  }
  else
  {
    v255 = 0;
  }
  v376 = v255;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v371, "N");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v254 + 24))(v254, &v375, 2, v371);
  if (v372 < 0)
    operator delete(v371[0]);
  v257 = v376;
  if (v376)
  {
    v258 = (unint64_t *)&v376->__shared_owners_;
    do
      v259 = __ldaxr(v258);
    while (__stlxr(v259 - 1, v258));
    if (!v259)
    {
      ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
      std::__shared_weak_count::__release_weak(v257);
    }
  }
  v260 = __p;
  __p = 0;
  if (v260)
    (*(void (**)(void *))(*(_QWORD *)v260 + 8))(v260);
  if (v374 < 0)
    operator delete(v373[0]);
  v261 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v369 = __p;
  if (__p)
  {
    v262 = (std::__shared_weak_count *)operator new();
    v263 = (std::__shared_weak_count_vtbl *)__p;
    v262->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v262->__shared_owners_ = 0;
    v262->__shared_weak_owners_ = 0;
    v262[1].__vftable = v263;
  }
  else
  {
    v262 = 0;
  }
  v370 = v262;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v367, "B");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v261 + 24))(v261, &v369, 0, v367);
  if (v368 < 0)
    operator delete(v367[0]);
  v264 = v370;
  if (v370)
  {
    v265 = (unint64_t *)&v370->__shared_owners_;
    do
      v266 = __ldaxr(v265);
    while (__stlxr(v266 - 1, v265));
    if (!v266)
    {
      ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
      std::__shared_weak_count::__release_weak(v264);
    }
  }
  v267 = __p;
  __p = 0;
  if (v267)
    (*(void (**)(void *))(*(_QWORD *)v267 + 8))(v267);
  v268 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v365 = __p;
  if (__p)
  {
    v269 = (std::__shared_weak_count *)operator new();
    v270 = (std::__shared_weak_count_vtbl *)__p;
    v269->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v269->__shared_owners_ = 0;
    v269->__shared_weak_owners_ = 0;
    v269[1].__vftable = v270;
  }
  else
  {
    v269 = 0;
  }
  v366 = v269;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v363, "M");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v268 + 24))(v268, &v365, 2, v363);
  if (v364 < 0)
    operator delete(v363[0]);
  v271 = v366;
  if (v366)
  {
    v272 = (unint64_t *)&v366->__shared_owners_;
    do
      v273 = __ldaxr(v272);
    while (__stlxr(v273 - 1, v272));
    if (!v273)
    {
      ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
      std::__shared_weak_count::__release_weak(v271);
    }
  }
  v274 = __p;
  __p = 0;
  if (v274)
    (*(void (**)(void *))(*(_QWORD *)v274 + 8))(v274);
  v275 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 0, &__p);
  v361 = __p;
  if (__p)
  {
    v276 = (std::__shared_weak_count *)operator new();
    v277 = (std::__shared_weak_count_vtbl *)__p;
    v276->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v276->__shared_owners_ = 0;
    v276->__shared_weak_owners_ = 0;
    v276[1].__vftable = v277;
  }
  else
  {
    v276 = 0;
  }
  v362 = v276;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v359, "B");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v275 + 24))(v275, &v361, 0, v359);
  if (v360 < 0)
    operator delete(v359[0]);
  v278 = v362;
  if (v362)
  {
    v279 = (unint64_t *)&v362->__shared_owners_;
    do
      v280 = __ldaxr(v279);
    while (__stlxr(v280 - 1, v279));
    if (!v280)
    {
      ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
      std::__shared_weak_count::__release_weak(v278);
    }
  }
  v281 = __p;
  __p = 0;
  if (v281)
    (*(void (**)(void *))(*(_QWORD *)v281 + 8))(v281);
  v282 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 0, &__p);
  v357 = __p;
  if (__p)
  {
    v283 = (std::__shared_weak_count *)operator new();
    v284 = (std::__shared_weak_count_vtbl *)__p;
    v283->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v283->__shared_owners_ = 0;
    v283->__shared_weak_owners_ = 0;
    v283[1].__vftable = v284;
  }
  else
  {
    v283 = 0;
  }
  v358 = v283;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v355, "K");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v282 + 24))(v282, &v357, 1, v355);
  if (v356 < 0)
    operator delete(v355[0]);
  v285 = v358;
  if (v358)
  {
    v286 = (unint64_t *)&v358->__shared_owners_;
    do
      v287 = __ldaxr(v286);
    while (__stlxr(v287 - 1, v286));
    if (!v287)
    {
      ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
      std::__shared_weak_count::__release_weak(v285);
    }
  }
  v288 = __p;
  __p = 0;
  if (v288)
    (*(void (**)(void *))(*(_QWORD *)v288 + 8))(v288);
  v289 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 0, &__p);
  v353 = __p;
  if (__p)
  {
    v290 = (std::__shared_weak_count *)operator new();
    v291 = (std::__shared_weak_count_vtbl *)__p;
    v290->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v290->__shared_owners_ = 0;
    v290->__shared_weak_owners_ = 0;
    v290[1].__vftable = v291;
  }
  else
  {
    v290 = 0;
  }
  v354 = v290;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v351, "M");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v289 + 24))(v289, &v353, 2, v351);
  if (v352 < 0)
    operator delete(v351[0]);
  v292 = v354;
  if (v354)
  {
    v293 = (unint64_t *)&v354->__shared_owners_;
    do
      v294 = __ldaxr(v293);
    while (__stlxr(v294 - 1, v293));
    if (!v294)
    {
      ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
      std::__shared_weak_count::__release_weak(v292);
    }
  }
  v295 = __p;
  __p = 0;
  if (v295)
    (*(void (**)(void *))(*(_QWORD *)v295 + 8))(v295);
  v296 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)2, 0, &__p);
  v349 = __p;
  if (__p)
  {
    v297 = (std::__shared_weak_count *)operator new();
    v298 = (std::__shared_weak_count_vtbl *)__p;
    v297->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v297->__shared_owners_ = 0;
    v297->__shared_weak_owners_ = 0;
    v297[1].__vftable = v298;
  }
  else
  {
    v297 = 0;
  }
  v350 = v297;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v347, "B");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v296 + 24))(v296, &v349, 0, v347);
  if (v348 < 0)
    operator delete(v347[0]);
  v299 = v350;
  if (v350)
  {
    v300 = (unint64_t *)&v350->__shared_owners_;
    do
      v301 = __ldaxr(v300);
    while (__stlxr(v301 - 1, v300));
    if (!v301)
    {
      ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
      std::__shared_weak_count::__release_weak(v299);
    }
  }
  v302 = __p;
  __p = 0;
  if (v302)
    (*(void (**)(void *))(*(_QWORD *)v302 + 8))(v302);
  v303 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)2, 0, &__p);
  v345 = __p;
  if (__p)
  {
    v304 = (std::__shared_weak_count *)operator new();
    v305 = (std::__shared_weak_count_vtbl *)__p;
    v304->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v304->__shared_owners_ = 0;
    v304->__shared_weak_owners_ = 0;
    v304[1].__vftable = v305;
  }
  else
  {
    v304 = 0;
  }
  v346 = v304;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v343, "M");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v303 + 24))(v303, &v345, 1, v343);
  if (v344 < 0)
    operator delete(v343[0]);
  v306 = v346;
  if (v346)
  {
    v307 = (unint64_t *)&v346->__shared_owners_;
    do
      v308 = __ldaxr(v307);
    while (__stlxr(v308 - 1, v307));
    if (!v308)
    {
      ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
      std::__shared_weak_count::__release_weak(v306);
    }
  }
  v309 = __p;
  __p = 0;
  if (v309)
    (*(void (**)(void *))(*(_QWORD *)v309 + 8))(v309);
  v310 = *a3;
  v341 = Scalar;
  if (Scalar)
  {
    v311 = (std::__shared_weak_count *)operator new();
    v312 = (std::__shared_weak_count_vtbl *)Scalar;
    v311->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v311->__shared_owners_ = 0;
    v311->__shared_weak_owners_ = 0;
    v311[1].__vftable = v312;
  }
  else
  {
    v311 = 0;
  }
  v342 = v311;
  Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v310 + 56))(v310, &v341);
  v313 = v342;
  if (v342)
  {
    v314 = (unint64_t *)&v342->__shared_owners_;
    do
      v315 = __ldaxr(v314);
    while (__stlxr(v315 - 1, v314));
    if (!v315)
    {
      ((void (*)(std::__shared_weak_count *))v313->__on_zero_shared)(v313);
      std::__shared_weak_count::__release_weak(v313);
    }
  }
  v316 = Scalar;
  Scalar = 0;
  if (v316)
    (*(void (**)(void *))(*(_QWORD *)v316 + 8))(v316);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v444);
  v317 = v444;
  std::string::basic_string[abi:ne180100]<0>(v337, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v337, 1, &v475);
  v339 = v475;
  if (v475)
  {
    v318 = (std::__shared_weak_count *)operator new();
    v319 = v475;
    v318->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v318->__shared_owners_ = 0;
    v318->__shared_weak_owners_ = 0;
    v318[1].__vftable = (std::__shared_weak_count_vtbl *)v319;
  }
  else
  {
    v318 = 0;
  }
  v340 = v318;
  v475 = 0;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "fp16");
  std::string::basic_string[abi:ne180100]<0>(&v456, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v458, "int32");
  std::string::basic_string[abi:ne180100]<0>(v459, "int8");
  std::string::basic_string[abi:ne180100]<0>(v460, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&Scalar, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v317 + 24))(v317, &v339, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v460[i + 2]) < 0)
      operator delete(v460[i]);
  }
  v321 = v340;
  if (v340)
  {
    v322 = (unint64_t *)&v340->__shared_owners_;
    do
      v323 = __ldaxr(v322);
    while (__stlxr(v323 - 1, v322));
    if (!v323)
    {
      ((void (*)(std::__shared_weak_count *))v321->__on_zero_shared)(v321);
      std::__shared_weak_count::__release_weak(v321);
    }
  }
  v324 = v475;
  v475 = 0;
  if (v324)
    (*(void (**)(uint64_t))(*(_QWORD *)v324 + 8))(v324);
  if (v338 < 0)
    operator delete(v337[0]);
  v325 = *a3;
  v335 = v444;
  if (v444)
  {
    v326 = (std::__shared_weak_count *)operator new();
    v327 = v444;
    v326->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v326->__shared_owners_ = 0;
    v326->__shared_weak_owners_ = 0;
    v326[1].__vftable = (std::__shared_weak_count_vtbl *)v327;
  }
  else
  {
    v326 = 0;
  }
  v336 = v326;
  v444 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v325 + 56))(v325, &v335);
  v328 = v336;
  if (v336)
  {
    v329 = (unint64_t *)&v336->__shared_owners_;
    do
      v330 = __ldaxr(v329);
    while (__stlxr(v330 - 1, v329));
    if (!v330)
    {
      ((void (*)(std::__shared_weak_count *))v328->__on_zero_shared)(v328);
      std::__shared_weak_count::__release_weak(v328);
    }
  }
  v331 = v444;
  v444 = 0;
  if (v331)
    (*(void (**)(uint64_t))(*(_QWORD *)v331 + 8))(v331);
  if (v472)
  {
    v332 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v472);
    MEMORY[0x1E0C023A0](v332, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v446, 0);
  result = (uint64_t)v452;
  if (v452)
  {
    v334 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v452);
    return MEMORY[0x1E0C023A0](v334, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E092A144(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v5 = STACK[0x480];
  STACK[0x480] = 0;
  if (v5)
    (*(void (**)(unint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 128), 0);
  v4 = *v1;
  *v1 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x490], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x4E8], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::Topk::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  std::__shared_weak_count_vtbl *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  unsigned __int8 *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  unsigned __int8 *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  unsigned __int8 *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  _QWORD *v48;
  unsigned __int8 *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  unsigned __int8 *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  std::__shared_weak_count *v62;
  std::__shared_weak_count_vtbl *v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *p_shared_owners;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  std::__shared_weak_count_vtbl *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count_vtbl *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  std::__shared_weak_count_vtbl *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count_vtbl *v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  void *v98;
  std::__shared_weak_count *v99;
  std::__shared_weak_count_vtbl *v100;
  uint64_t i;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  std::__shared_weak_count_vtbl *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  void *v112;
  uint64_t result;
  uint64_t v114;
  void *v115;
  std::__shared_weak_count *v116;
  void *v117[2];
  char v118;
  void *v119;
  std::__shared_weak_count *v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  void *v123[2];
  char v124;
  void *v125[2];
  char v126;
  std::__shared_weak_count_vtbl *v127;
  std::__shared_weak_count *v128;
  void *v129[2];
  char v130;
  void *v131[2];
  char v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  void *v135;
  std::__shared_weak_count *v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  void *v139[2];
  uint64_t v140;
  __n128 v141;
  __n128 v142;
  __n128 v143;
  __n128 v144;
  __n128 v145;
  __n128 v146;
  void *__p;
  void *v148;
  _QWORD *v149;
  void *v150;
  void *v151;
  _QWORD *v152;
  void *v153;
  void *v154;
  _QWORD *v155;
  void *v156;
  void *v157;
  _QWORD *v158;
  void *v159;
  void *v160;
  _QWORD *v161;
  void *v162;
  void *v163;
  _QWORD *v164;
  __n128 v165;
  uint64_t v166;
  _QWORD *v167;
  std::__shared_weak_count_vtbl *v168;
  std::__shared_weak_count_vtbl *v169;
  void (__cdecl **v170)(std::__shared_weak_count *__hidden);
  _QWORD v171[3];
  _QWORD *v172;
  _BYTE v173[24];
  _BYTE *v174;
  _QWORD v175[3];
  _QWORD *v176;
  uint64_t Scalar;
  uint64_t v178;
  uint64_t v179;
  _QWORD v180[2];
  _QWORD v181[3];

  v181[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v167 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v168 = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v169 = (std::__shared_weak_count_vtbl *)&v8->~__shared_weak_count_0;
  v170 = &v8->~__shared_weak_count_0;
  Scalar = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v168);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v162 = v10;
  *v10 = v9;
  v163 = v10 + 1;
  v164 = v10 + 1;
  v178 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v162);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v159 = v12;
  *v12 = v11;
  v160 = v12 + 1;
  v161 = v12 + 1;
  v179 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v159);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  v156 = v14;
  *v14 = v13;
  v157 = v14 + 1;
  v158 = v14 + 1;
  v180[0] = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v156);
  v15 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v16 = operator new(8uLL);
  v153 = v16;
  *v16 = v15;
  v154 = v16 + 1;
  v155 = v16 + 1;
  v180[1] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v153);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  v150 = v18;
  *v18 = v17;
  v151 = v18 + 1;
  v152 = v18 + 1;
  v181[0] = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v150);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  __p = v20;
  *v20 = v19;
  v148 = v20 + 1;
  v149 = v20 + 1;
  v181[1] = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 7, &v165);
  MIL::IRParameter::Make(&v165, &v166);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v166);
  v21 = v166;
  v166 = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = (std::__shared_weak_count *)v165.n128_u64[1];
  if (v165.n128_u64[1])
  {
    v23 = (unint64_t *)(v165.n128_u64[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (__p)
  {
    v148 = __p;
    operator delete(__p);
  }
  if (v150)
  {
    v151 = v150;
    operator delete(v150);
  }
  if (v153)
  {
    v154 = v153;
    operator delete(v153);
  }
  if (v156)
  {
    v157 = v156;
    operator delete(v156);
  }
  if (v159)
  {
    v160 = v159;
    operator delete(v159);
  }
  if (v162)
  {
    v163 = v162;
    operator delete(v162);
  }
  if (v168)
  {
    v169 = v168;
    operator delete(v168);
  }
  v25 = v167;
  Scalar = MIL::IRTensorValueType::MakeScalar(a1, 9);
  v178 = MIL::IRTensorValueType::MakeScalar(a1, 10);
  v179 = MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v146);
  MIL::IRParameter::Make(&v146, (uint64_t *)&v168);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v25, "k", (uint64_t *)&v168);
  v26 = v168;
  v168 = 0;
  if (v26)
    (*((void (**)(std::__shared_weak_count_vtbl *))v26->~__shared_weak_count + 1))(v26);
  v27 = (std::__shared_weak_count *)v146.n128_u64[1];
  if (v146.n128_u64[1])
  {
    v28 = (unint64_t *)(v146.n128_u64[1] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = v167;
  v168 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v168, 1, &v145);
  MIL::IRParameter::Make(&v145, &Scalar);
  v31 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v30, "axis", &Scalar);
  v32 = Scalar;
  Scalar = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  v33 = (std::__shared_weak_count *)v145.n128_u64[1];
  if (v145.n128_u64[1])
  {
    v34 = (unint64_t *)(v145.n128_u64[1] + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v31 + 5) + 32))(*((_QWORD *)v31 + 5), 1);
  v36 = v167;
  v168 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v168, 1, &v144);
  MIL::IRParameter::Make(&v144, &Scalar);
  v37 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v36, "ascending", &Scalar);
  v38 = Scalar;
  Scalar = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  v39 = (std::__shared_weak_count *)v144.n128_u64[1];
  if (v144.n128_u64[1])
  {
    v40 = (unint64_t *)(v144.n128_u64[1] + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v37 + 5) + 32))(*((_QWORD *)v37 + 5), 1);
  v42 = v167;
  v168 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v168, 1, &v143);
  MIL::IRParameter::Make(&v143, &Scalar);
  v43 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v42, "sort", &Scalar);
  v44 = Scalar;
  Scalar = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = (std::__shared_weak_count *)v143.n128_u64[1];
  if (v143.n128_u64[1])
  {
    v46 = (unint64_t *)(v143.n128_u64[1] + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v43 + 5) + 32))(*((_QWORD *)v43 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v43 + 5) + 48))(*((_QWORD *)v43 + 5), 1);
  v48 = v167;
  v168 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v168, 1, &v142);
  MIL::IRParameter::Make(&v142, &Scalar);
  v49 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v48, "return_indices", &Scalar);
  v50 = Scalar;
  Scalar = 0;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  v51 = (std::__shared_weak_count *)v142.n128_u64[1];
  if (v142.n128_u64[1])
  {
    v52 = (unint64_t *)(v142.n128_u64[1] + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v49 + 5) + 32))(*((_QWORD *)v49 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v49 + 5) + 48))(*((_QWORD *)v49 + 5), 1);
  v54 = v167;
  v168 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v168, 1, &v141);
  MIL::IRParameter::Make(&v141, &Scalar);
  v55 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v54, "output_indices_dtype", &Scalar);
  v56 = Scalar;
  Scalar = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  v57 = (std::__shared_weak_count *)v141.n128_u64[1];
  if (v141.n128_u64[1])
  {
    v58 = (unint64_t *)(v141.n128_u64[1] + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v55 + 5) + 32))(*((_QWORD *)v55 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v55 + 5) + 48))(*((_QWORD *)v55 + 5), 1);
  v162 = 0;
  *(_OWORD *)v139 = *(_OWORD *)a2;
  v140 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v60 = (uint64_t)v167;
  v137 = (uint64_t)v167;
  if (v167)
  {
    v61 = (std::__shared_weak_count *)operator new();
    v61->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v61->__shared_owners_ = 0;
    v61->__shared_weak_owners_ = 0;
    v61[1].__vftable = (std::__shared_weak_count_vtbl *)v60;
    v138 = v61;
    v167 = 0;
    v135 = v162;
    if (v162)
    {
      v62 = (std::__shared_weak_count *)operator new();
      v63 = (std::__shared_weak_count_vtbl *)v162;
      v62->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F948;
      v62->__shared_owners_ = 0;
      v62->__shared_weak_owners_ = 0;
      v62[1].__vftable = v63;
    }
    else
    {
      v62 = 0;
    }
  }
  else
  {
    v62 = 0;
    v138 = 0;
    v167 = 0;
    v135 = 0;
  }
  v136 = v62;
  v162 = 0;
  v175[0] = &unk_1EA99FAC8;
  v175[1] = MIL::Operators::Common::ios17::CustomValidators::ValidateTopk;
  v176 = v175;
  v174 = 0;
  MIL::IROperator::Make((__int128 *)v139, 4, 7, 1, 2, (uint64_t)&v137, (uint64_t)&v135, (uint64_t)v175, a3, (uint64_t)v173);
  v64 = v174;
  if (v174 == v173)
  {
    v65 = 4;
    v64 = v173;
  }
  else
  {
    if (!v174)
      goto LABEL_74;
    v65 = 5;
  }
  (*(void (**)(void))(*v64 + 8 * v65))();
LABEL_74:
  v66 = v176;
  if (v176 == v175)
  {
    v67 = 4;
    v66 = v175;
    goto LABEL_78;
  }
  if (v176)
  {
    v67 = 5;
LABEL_78:
    (*(void (**)(void))(*v66 + 8 * v67))();
  }
  v68 = v136;
  if (v136)
  {
    p_shared_owners = (unint64_t *)&v136->__shared_owners_;
    do
      v70 = __ldaxr(p_shared_owners);
    while (__stlxr(v70 - 1, p_shared_owners));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v71 = v138;
  if (v138)
  {
    v72 = (unint64_t *)&v138->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  if (SHIBYTE(v140) < 0)
    operator delete(v139[0]);
  v74 = *a3;
  v171[0] = &off_1EA99FBD8;
  v171[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceTopk;
  v172 = v171;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v74 + 200))(v74, v171);
  v75 = v172;
  if (v172 == v171)
  {
    v76 = 4;
    v75 = v171;
  }
  else
  {
    if (!v172)
      goto LABEL_96;
    v76 = 5;
  }
  (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_96:
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v77 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v131, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v131, 0, (uint64_t *)&v168);
  v133 = v168;
  if (v168)
  {
    v78 = (std::__shared_weak_count *)operator new();
    v79 = v168;
    v78->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v78->__shared_owners_ = 0;
    v78->__shared_weak_owners_ = 0;
    v78[1].__vftable = v79;
  }
  else
  {
    v78 = 0;
  }
  v134 = v78;
  v168 = 0;
  std::string::basic_string[abi:ne180100]<0>(v129, "T");
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v77 + 24))(v77, &v133, v129);
  if (v130 < 0)
    operator delete(v129[0]);
  v80 = v134;
  if (v134)
  {
    v81 = (unint64_t *)&v134->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v83 = v168;
  v168 = 0;
  if (v83)
    (*((void (**)(std::__shared_weak_count_vtbl *))v83->~__shared_weak_count + 1))(v83);
  if (v132 < 0)
    operator delete(v131[0]);
  v84 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v125, "k");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v125, 0, (uint64_t *)&v168);
  v127 = v168;
  if (v168)
  {
    v85 = (std::__shared_weak_count *)operator new();
    v86 = v168;
    v85->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v85->__shared_owners_ = 0;
    v85->__shared_weak_owners_ = 0;
    v85[1].__vftable = v86;
  }
  else
  {
    v85 = 0;
  }
  v128 = v85;
  v168 = 0;
  std::string::basic_string[abi:ne180100]<0>(v123, "K_TYPE");
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v84 + 24))(v84, &v127, v123);
  if (v124 < 0)
    operator delete(v123[0]);
  v87 = v128;
  if (v128)
  {
    v88 = (unint64_t *)&v128->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v90 = v168;
  v168 = 0;
  if (v90)
    (*((void (**)(std::__shared_weak_count_vtbl *))v90->~__shared_weak_count + 1))(v90);
  if (v126 < 0)
    operator delete(v125[0]);
  v91 = *a3;
  v121 = Scalar;
  if (Scalar)
  {
    v92 = (std::__shared_weak_count *)operator new();
    v93 = Scalar;
    v92->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v92->__shared_owners_ = 0;
    v92->__shared_weak_owners_ = 0;
    v92[1].__vftable = (std::__shared_weak_count_vtbl *)v93;
  }
  else
  {
    v92 = 0;
  }
  v122 = v92;
  Scalar = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v91 + 56))(v91, &v121);
  v94 = v122;
  if (v122)
  {
    v95 = (unint64_t *)&v122->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v97 = Scalar;
  Scalar = 0;
  if (v97)
    (*(void (**)(uint64_t))(*(_QWORD *)v97 + 8))(v97);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v159);
  v98 = v159;
  std::string::basic_string[abi:ne180100]<0>(v117, "output_indices_dtype");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v117, 1, (uint64_t *)&v156);
  v119 = v156;
  if (v156)
  {
    v99 = (std::__shared_weak_count *)operator new();
    v100 = (std::__shared_weak_count_vtbl *)v156;
    v99->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v99->__shared_owners_ = 0;
    v99->__shared_weak_owners_ = 0;
    v99[1].__vftable = v100;
  }
  else
  {
    v99 = 0;
  }
  v120 = v99;
  v156 = 0;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "int32");
  std::string::basic_string[abi:ne180100]<0>(v180, "uint16");
  std::unordered_set<std::string>::unordered_set((uint64_t)&v168, (unsigned __int8 *)&Scalar, 2);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, _QWORD))(*(_QWORD *)v98 + 24))(v98, &v119, &v168, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v168);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v181[i]) < 0)
      operator delete((void *)v180[i]);
  }
  v102 = v120;
  if (v120)
  {
    v103 = (unint64_t *)&v120->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = v156;
  v156 = 0;
  if (v105)
    (*(void (**)(void *))(*(_QWORD *)v105 + 8))(v105);
  if (v118 < 0)
    operator delete(v117[0]);
  v106 = *a3;
  v115 = v159;
  if (v159)
  {
    v107 = (std::__shared_weak_count *)operator new();
    v108 = (std::__shared_weak_count_vtbl *)v159;
    v107->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v107->__shared_owners_ = 0;
    v107->__shared_weak_owners_ = 0;
    v107[1].__vftable = v108;
  }
  else
  {
    v107 = 0;
  }
  v116 = v107;
  v159 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v106 + 56))(v106, &v115);
  v109 = v116;
  if (v116)
  {
    v110 = (unint64_t *)&v116->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = v159;
  v159 = 0;
  if (v112)
    (*(void (**)(void *))(*(_QWORD *)v112 + 8))(v112);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v162, 0);
  result = (uint64_t)v167;
  if (v167)
  {
    v114 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v167);
    return MEMORY[0x1E0C023A0](v114, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E092B9C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,void *a63)
{
  void *a72;
  uint64_t v72;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  if (a44 < 0)
    operator delete(__p);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a72, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v72 - 256), 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::CustomValidators::ValidateReshape(MIL::Operators::Common::ios17::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  MIL::IRValueType *ParameterType;
  uint64_t v6;
  MIL::IRValueType *v7;
  uint64_t v8;
  uint64_t ParameterValue;
  MIL::IRValue *v10;
  MIL::Validation *v11;
  const MIL::IRTensorValue *v12;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  int v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  MIL::IRValueType *v33;
  uint64_t v34;
  MIL::IRValue *v35;
  unint64_t *v36;
  unint64_t v37;
  void *v38[2];
  char v39;
  void *v40;
  char v41;
  uint64_t v42[2];
  void *v43[3];
  void *__p[2];
  char v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  void *v48[2];
  char v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  char *v52;
  char *v53;
  char v54;

  std::string::basic_string[abi:ne180100]<0>(&v52, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v6 = MIL::IRValueType::AsTensorType(ParameterType);
  if (v54 < 0)
    operator delete(v52);
  std::string::basic_string[abi:ne180100]<0>(&v52, "shape");
  v7 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v8 = MIL::IRValueType::AsTensorType(v7);
  if (v54 < 0)
    operator delete(v52);
  std::string::basic_string[abi:ne180100]<0>(&v52, "shape");
  ParameterValue = MIL::IROperation::TryGetParameterValue(this, (uint64_t)&v52, 0);
  v10 = (MIL::IRValue *)ParameterValue;
  if ((v54 & 0x80000000) == 0)
  {
    if (ParameterValue)
      goto LABEL_7;
LABEL_18:
    MIL::ValidationResult::ValidationResult(a2);
    return;
  }
  operator delete(v52);
  if (!v10)
    goto LABEL_18;
LABEL_7:
  v11 = (MIL::Validation *)MIL::IRValue::AsTensor(v10);
  MIL::Validation::GetIntTensorValueCasted(v11, v12, &v52);
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) >= 6)
  {
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v14 = (std::__shared_weak_count *)LocationPtr[1];
    v50 = *LocationPtr;
    v51 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(v48, "Rank of the shape parameter must be between 0 and 5 (inclusive) in reshape");
    MIL::ValidationResult::ValidationResult(a2, &v50, 315, v48);
    if (v49 < 0)
      operator delete(v48[0]);
    v17 = v51;
    if (!v51)
      goto LABEL_38;
    v18 = (unint64_t *)&v51->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    goto LABEL_33;
  }
  v20 = v52;
  if (v52 == v53)
    goto LABEL_57;
  v21 = 0;
  do
  {
    v22 = *(_DWORD *)v20;
    v20 += 4;
    if (v22 == -1)
      ++v21;
  }
  while (v20 != v53);
  if (v21 < 2)
  {
LABEL_57:
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 104))(v6)
      && (v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 96))(v6),
          !MIL::ValueTypeInferenceUtils::ShapeHasUnknownDims(v28)))
    {
      memset(v43, 0, sizeof(v43));
      v29 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
      v30 = (std::__shared_weak_count *)v29[1];
      v42[0] = *v29;
      v42[1] = (uint64_t)v30;
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
      }
      std::string::basic_string[abi:ne180100]<0>(&v40, "x");
      v33 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
      v34 = MIL::IRValueType::AsTensorType(v33);
      std::string::basic_string[abi:ne180100]<0>(v38, "shape");
      v35 = (MIL::IRValue *)MIL::IROperation::TryGetParameterValue(this, (uint64_t)v38, 0);
      MIL::Operators::Common::ios17::ComputeTargetShapeForReshape(v35, v42, v34, (uint64_t)v43, a2);
      if (v39 < 0)
        operator delete(v38[0]);
      if (v41 < 0)
        operator delete(v40);
      if (v30)
      {
        v36 = (unint64_t *)&v30->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      if (v43[0])
        operator delete(v43[0]);
    }
    else
    {
      MIL::ValidationResult::ValidationResult(a2);
    }
    goto LABEL_38;
  }
  v23 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v24 = (std::__shared_weak_count *)v23[1];
  v46 = *v23;
  v47 = v24;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Only 1 dimension can be set to -1 (infer size from other dims based off of the # of elements in the input tensor).");
  MIL::ValidationResult::ValidationResult(a2, &v46, 315, __p);
  if (v45 < 0)
    operator delete(__p[0]);
  v17 = v47;
  if (v47)
  {
    v27 = (unint64_t *)&v47->__shared_owners_;
    do
      v19 = __ldaxr(v27);
    while (__stlxr(v19 - 1, v27));
LABEL_33:
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_38:
  if (v52)
  {
    v53 = v52;
    operator delete(v52);
  }
}

void sub_1E092C240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32)
{
  uint64_t v32;
  void *v34;

  if (a20 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  if (a23)
    operator delete(a23);
  v34 = *(void **)(v32 - 72);
  if (v34)
  {
    *(_QWORD *)(v32 - 64) = v34;
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

MIL::MILResult *MIL::Operators::Common::ios17::ComputeTargetShapeForReshape@<X0>(MIL::IRValue *this@<X2>, uint64_t *a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X3>, MIL::ValidationResult *a5@<X8>)
{
  MIL::Validation *v10;
  const MIL::IRTensorValue *v11;
  int *v12;
  _DWORD *v13;
  _BYTE *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  _QWORD *v47;
  _QWORD *v48;
  void *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  void *v56;
  char v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  void *v60;
  char v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  void *v64;
  uint64_t v65;
  unsigned __int8 v66;
  void *v67;
  char v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  void *__p;
  __int128 v72;
  void *v73;
  char v74;
  uint64_t v75;

  v10 = (MIL::Validation *)MIL::IRValue::AsTensor(this);
  MIL::Validation::GetIntTensorValueCasted(v10, v11, (char **)&__p);
  v12 = *(int **)a4;
  if (*(_QWORD *)a4)
  {
    *(_QWORD *)(a4 + 8) = v12;
    operator delete(v12);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
  }
  v13 = __p;
  *(_QWORD *)a4 = __p;
  v14 = (_BYTE *)v72;
  *(_OWORD *)(a4 + 8) = v72;
  if (v14 == (_BYTE *)v13)
  {
    v17 = 0;
    v16 = 0;
LABEL_12:
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 104))(a3))
    {
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 96))(a3);
      v72 = 0uLL;
      __p = 0;
      std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v19, *(_QWORD *)(v19 + 8), (uint64_t)(*(_QWORD *)(v19 + 8) - *(_QWORD *)v19) >> 3);
      v20 = *(int **)a4;
      v21 = *(_QWORD *)(a4 + 8);
      if (v21 != *(_QWORD *)a4)
      {
        v22 = 0;
        v23 = 0;
        v24 = (v21 - *(_QWORD *)a4) >> 2;
        do
        {
          if (!v20[v23])
          {
            if (v24 + v22 <= (uint64_t)(v72 - (_QWORD)__p) >> 3)
            {
              v25 = *((_QWORD *)__p + v23 + ((uint64_t)(v72 - (_QWORD)__p) >> 3) - v24);
              v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25);
              if (v26)
                LODWORD(v26) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 48))(v26);
              v20 = *(int **)a4;
              *(_DWORD *)(*(_QWORD *)a4 + 4 * v23) = v26;
              v21 = *(_QWORD *)(a4 + 8);
            }
            else
            {
              v20[v23] = 1;
            }
          }
          ++v23;
          v24 = (v21 - (uint64_t)v20) >> 2;
          --v22;
        }
        while (v23 < v24);
      }
      if (__p)
      {
        *(_QWORD *)&v72 = __p;
        operator delete(__p);
      }
    }
    v27 = *(int **)a4;
    v28 = 1;
    while (v27 != *(int **)(a4 + 8))
    {
      v29 = *v27++;
      v28 *= v29;
    }
    v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 96))(a3);
    if (MIL::ValueTypeInferenceUtils::ShapeHasUnknownDims(v30))
    {
      if (v16)
      {
        v31 = 0;
LABEL_82:
        *(_DWORD *)(*(_QWORD *)a4 + 4 * v17) = v31;
      }
      return MIL::ValidationResult::ValidationResult(a5);
    }
    v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
    if (v16)
    {
      if (!((int)v32 % v28))
      {
        v31 = (*(int (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3) / v28;
        if (v31 < 0)
          v31 = -v31;
        goto LABEL_82;
      }
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"cannot reshape tensor of size ", 30);
      (*(void (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
      v33 = (_QWORD *)std::ostream::operator<<();
      v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" into shape ", 12);
      (*(void (**)(void **__return_ptr, MIL::IRValue *))(*(_QWORD *)this + 72))(&v64, this);
      if ((v66 & 0x80u) == 0)
        v35 = &v64;
      else
        v35 = v64;
      if ((v66 & 0x80u) == 0)
        v36 = v66;
      else
        v36 = v65;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v35, v36);
      if ((char)v66 < 0)
        operator delete(v64);
      v37 = (std::__shared_weak_count *)a2[1];
      v62 = *a2;
      v63 = v37;
      if (v37)
      {
        p_shared_owners = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldxr(p_shared_owners);
        while (__stxr(v39 + 1, p_shared_owners));
      }
      std::stringbuf::str();
      MIL::ValidationResult::ValidationResult(a5, &v62, 315, &v60);
      if (v61 < 0)
        operator delete(v60);
      v40 = v63;
      if (!v63)
        goto LABEL_77;
      v41 = (unint64_t *)&v63->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
    }
    else
    {
      if (v32 == v28)
        return MIL::ValidationResult::ValidationResult(a5);
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"cannot reshape tensor of size ", 30);
      (*(void (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
      v47 = (_QWORD *)std::ostream::operator<<();
      v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)" into shape ", 12);
      (*(void (**)(void **__return_ptr, MIL::IRValue *))(*(_QWORD *)this + 72))(&v64, this);
      if ((v66 & 0x80u) == 0)
        v49 = &v64;
      else
        v49 = v64;
      if ((v66 & 0x80u) == 0)
        v50 = v66;
      else
        v50 = v65;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)v49, v50);
      if ((char)v66 < 0)
        operator delete(v64);
      v51 = (std::__shared_weak_count *)a2[1];
      v58 = *a2;
      v59 = v51;
      if (v51)
      {
        v52 = (unint64_t *)&v51->__shared_owners_;
        do
          v53 = __ldxr(v52);
        while (__stxr(v53 + 1, v52));
      }
      std::stringbuf::str();
      MIL::ValidationResult::ValidationResult(a5, &v58, 315, &v56);
      if (v57 < 0)
        operator delete(v56);
      v40 = v59;
      if (!v59)
        goto LABEL_77;
      v54 = (unint64_t *)&v59->__shared_owners_;
      do
        v42 = __ldaxr(v54);
      while (__stlxr(v42 - 1, v54));
    }
LABEL_75:
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
    goto LABEL_77;
  }
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = (v14 - (_BYTE *)v13) >> 2;
  if (v18 <= 1)
    v18 = 1;
  while (v13[v15] != -1)
  {
LABEL_9:
    if (v18 == ++v15)
      goto LABEL_12;
  }
  if (!v16)
  {
    v16 = 1;
    v17 = v15;
    goto LABEL_9;
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Only 1 dimension can be set to -1", 33);
  v43 = (std::__shared_weak_count *)a2[1];
  v69 = *a2;
  v70 = v43;
  if (v43)
  {
    v44 = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  std::stringbuf::str();
  MIL::ValidationResult::ValidationResult(a5, &v69, 315, &v67);
  if (v68 < 0)
    operator delete(v67);
  v40 = v70;
  if (v70)
  {
    v46 = (unint64_t *)&v70->__shared_owners_;
    do
      v42 = __ldaxr(v46);
    while (__stlxr(v42 - 1, v46));
    goto LABEL_75;
  }
LABEL_77:
  __p = (void *)*MEMORY[0x1E0DE4F60];
  *(void **)((char *)&__p + *((_QWORD *)__p - 3)) = *(void **)(MEMORY[0x1E0DE4F60] + 24);
  *(_QWORD *)&v72 = MEMORY[0x1E0DE4FB8] + 16;
  if (v74 < 0)
    operator delete(v73);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (MIL::MILResult *)MEMORY[0x1E0C022F8](&v75);
}

void sub_1E092C898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40)
{
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::ostringstream::~ostringstream((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::CustomValidators::ValidateConcat(MIL::Operators::Common::ios17::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  BOOL v5;
  BOOL v6;
  unsigned int v7;
  const void *ParameterValue;
  MIL::Validation *v9;
  unsigned int v10;
  MIL::IRValueType *ParameterType;
  MIL::IRTensorValueType *v12;
  uint64_t v13;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  MIL::IRValueType *v55;
  MIL::IRTensorValueType *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t);
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  _QWORD *v77;
  uint64_t *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  MIL::ValidationResult *v91;
  void *v92;
  char v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  void *v96;
  char v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  void *v100;
  char v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  void *v104;
  char v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  void *__p[2];
  char v109;
  void *v110;
  char v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t *v114;
  uint64_t *v115;
  void *v116[2];
  char v117;
  uint64_t v118;
  std::__shared_weak_count *v119;

  std::string::basic_string[abi:ne180100]<0>(__p, "values");
  v5 = MIL::Validation::VariadicTensorsDTypesMatch(this, (uint64_t)__p);
  v6 = v5;
  if ((v109 & 0x80000000) == 0)
  {
    if (v5)
      goto LABEL_3;
LABEL_14:
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v15 = (std::__shared_weak_count *)LocationPtr[1];
    v118 = *LocationPtr;
    v119 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(v116, "Inputs must have the same datatype");
    MIL::ValidationResult::ValidationResult(a2, &v118, 319, v116);
    if (v117 < 0)
      operator delete(v116[0]);
    v18 = v119;
    if (v119)
    {
      v19 = (unint64_t *)&v119->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    return;
  }
  operator delete(__p[0]);
  if (!v6)
    goto LABEL_14;
LABEL_3:
  std::string::basic_string[abi:ne180100]<0>(__p, "values");
  v7 = (*(uint64_t (**)(MIL::Operators::Common::ios17::CustomValidators *, void **))(*(_QWORD *)this + 152))(this, __p);
  if (v109 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "axis");
  ParameterValue = (const void *)MIL::IROperation::GetParameterValue(this);
  v9 = (MIL::Validation *)MIL::IRValue::GetScalar<int>(ParameterValue);
  if (v109 < 0)
    operator delete(__p[0]);
  v113 = 0;
  v114 = 0;
  v115 = 0;
  v10 = 0;
  if (!v7)
  {
    v13 = -1;
    goto LABEL_78;
  }
  do
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "values");
    ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
    v12 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
    if (v109 < 0)
      operator delete(__p[0]);
    if ((*(unsigned int (**)(MIL::IRTensorValueType *))(*(_QWORD *)v12 + 104))(v12))
    {
      v91 = a2;
      v13 = MIL::IRTensorValueType::Rank(v12);
      if (v13 < 1)
      {
LABEL_60:
        if (!v13 && (_DWORD)v9)
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Axis (", 6);
          v42 = (_QWORD *)std::ostream::operator<<();
          v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)") must be 0 when inputs are scalars for ", 40);
          v44 = (*(uint64_t (**)(MIL::Operators::Common::ios17::CustomValidators *))(*(_QWORD *)this + 56))(this);
          v45 = *(char *)(v44 + 23);
          if (v45 >= 0)
            v46 = v44;
          else
            v46 = *(_QWORD *)v44;
          if (v45 >= 0)
            v47 = *(unsigned __int8 *)(v44 + 23);
          else
            v47 = *(_QWORD *)(v44 + 8);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, v46, v47);
          v48 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
          v49 = (std::__shared_weak_count *)v48[1];
          v106 = *v48;
          v107 = v49;
          if (v49)
          {
            v50 = (unint64_t *)&v49->__shared_owners_;
            do
              v51 = __ldxr(v50);
            while (__stxr(v51 + 1, v50));
          }
          std::stringbuf::str();
          MIL::ValidationResult::ValidationResult(v91, &v106, 315, &v104);
          if (v105 < 0)
            operator delete(v104);
          v52 = v107;
          if (v107)
          {
            v53 = (unint64_t *)&v107->__shared_owners_;
            do
              v54 = __ldaxr(v53);
            while (__stlxr(v54 - 1, v53));
            goto LABEL_127;
          }
          goto LABEL_129;
        }
        a2 = v91;
        if (v13)
          goto LABEL_78;
        goto LABEL_79;
      }
      v21 = 0;
      while (1)
      {
        v22 = (_QWORD *)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v12 + 96))(v12);
        v23 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v22 + 8 * v21) + 16))(*(_QWORD *)(*v22 + 8 * v21));
        if (v23)
        {
          v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 48))(v23);
          v25 = v24;
          v26 = v114;
          if (v114 >= v115)
          {
            v30 = v113;
            v31 = v114 - v113;
            v32 = v31 + 1;
            if ((unint64_t)(v31 + 1) >> 61)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v33 = (char *)v115 - (char *)v113;
            if (((char *)v115 - (char *)v113) >> 2 > v32)
              v32 = v33 >> 2;
            if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
              v34 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v34 = v32;
            if (v34)
            {
              v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v115, v34);
              v30 = v113;
              v26 = v114;
            }
            else
            {
              v35 = 0;
            }
            v39 = &v35[8 * v31];
            *(_QWORD *)v39 = v25;
            v29 = (uint64_t *)(v39 + 8);
            while (v26 != v30)
            {
              v40 = *--v26;
              *((_QWORD *)v39 - 1) = v40;
              v39 -= 8;
            }
LABEL_57:
            v113 = (uint64_t *)v39;
            v114 = v29;
            v115 = (uint64_t *)&v35[8 * v34];
            if (v30)
              operator delete(v30);
            goto LABEL_59;
          }
          *v114 = v24;
          v27 = v26 + 1;
        }
        else
        {
          v28 = v114;
          if (v114 >= v115)
          {
            v30 = v113;
            v36 = v114 - v113;
            v37 = v36 + 1;
            if ((unint64_t)(v36 + 1) >> 61)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v38 = (char *)v115 - (char *)v113;
            if (((char *)v115 - (char *)v113) >> 2 > v37)
              v37 = v38 >> 2;
            if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
              v34 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v34 = v37;
            if (v34)
            {
              v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v115, v34);
              v30 = v113;
              v28 = v114;
            }
            else
            {
              v35 = 0;
            }
            v39 = &v35[8 * v36];
            *(_QWORD *)v39 = -1;
            v29 = (uint64_t *)(v39 + 8);
            while (v28 != v30)
            {
              v41 = *--v28;
              *((_QWORD *)v39 - 1) = v41;
              v39 -= 8;
            }
            goto LABEL_57;
          }
          *v114 = -1;
          v27 = v28 + 1;
        }
        v29 = v27;
LABEL_59:
        v114 = v29;
        if (++v21 == v13)
          goto LABEL_60;
      }
    }
    ++v10;
  }
  while (v7 != v10);
  v13 = -1;
  v10 = v7;
LABEL_78:
  if (!MIL::Validation::IsAxisValidForRank(v9, v13))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Axis (", 6);
    v64 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)") must be within range [-", 25);
    v65 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)", ", 2);
    v66 = (_QWORD *)std::ostream::operator<<();
    v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)") for ", 6);
    v68 = (*(uint64_t (**)(MIL::Operators::Common::ios17::CustomValidators *))(*(_QWORD *)this + 56))(this);
    v69 = *(char *)(v68 + 23);
    if (v69 >= 0)
      v70 = v68;
    else
      v70 = *(_QWORD *)v68;
    if (v69 >= 0)
      v71 = *(unsigned __int8 *)(v68 + 23);
    else
      v71 = *(_QWORD *)(v68 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, v70, v71);
    v72 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v73 = (std::__shared_weak_count *)v72[1];
    v102 = *v72;
    v103 = v73;
    if (v73)
    {
      v74 = (unint64_t *)&v73->__shared_owners_;
      do
        v75 = __ldxr(v74);
      while (__stxr(v75 + 1, v74));
    }
    std::stringbuf::str();
    MIL::ValidationResult::ValidationResult(a2, &v102, 315, &v100);
    if (v101 < 0)
      operator delete(v100);
    v52 = v103;
    if (v103)
    {
      v76 = (unint64_t *)&v103->__shared_owners_;
      do
        v54 = __ldaxr(v76);
      while (__stlxr(v54 - 1, v76));
      goto LABEL_127;
    }
    goto LABEL_129;
  }
LABEL_79:
  if (v10 >= v7)
  {
LABEL_94:
    MIL::ValidationResult::ValidationResult(a2);
    goto LABEL_132;
  }
  while (2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "values");
    v55 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
    v56 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v55);
    if (v109 < 0)
      operator delete(__p[0]);
    if (!(*(unsigned int (**)(MIL::IRTensorValueType *))(*(_QWORD *)v56 + 104))(v56))
    {
LABEL_93:
      if (++v10 == v7)
        goto LABEL_94;
      continue;
    }
    break;
  }
  if (MIL::IRTensorValueType::Rank(v56) == v13)
  {
    if (v13 >= 1)
    {
      v57 = 0;
      while (1)
      {
        if ((v13 & ((int)v9 >> 31)) + (_DWORD)v9 != v57)
        {
          v58 = (_QWORD *)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v56 + 96))(v56);
          v59 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v58 + 8 * v57) + 16))(*(_QWORD *)(*v58 + 8 * v57));
          v60 = v59;
          if (v59)
          {
            v61 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 48);
            if (v113[v57] == -1)
            {
              v63 = v61(v59);
              v113[v57] = v63;
            }
            else
            {
              v62 = v61(v59);
              if (v62 != v113[v57])
              {
                std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Shape of tensor has a mismatch with the expected shape. Dimension is ", 69);
                (*(void (**)(uint64_t))(*(_QWORD *)v60 + 48))(v60);
                v77 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"while expecting ", 16);
                std::ostream::operator<<();
                v78 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
                v79 = (std::__shared_weak_count *)v78[1];
                v94 = *v78;
                v95 = v79;
                if (v79)
                {
                  v80 = (unint64_t *)&v79->__shared_owners_;
                  do
                    v81 = __ldxr(v80);
                  while (__stxr(v81 + 1, v80));
                }
                std::stringbuf::str();
                MIL::ValidationResult::ValidationResult(a2, &v94, 315, &v92);
                if (v93 < 0)
                  operator delete(v92);
                v52 = v95;
                if (v95)
                {
                  v82 = (unint64_t *)&v95->__shared_owners_;
                  do
                    v54 = __ldaxr(v82);
                  while (__stlxr(v54 - 1, v82));
LABEL_127:
                  if (!v54)
                  {
                    ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                    std::__shared_weak_count::__release_weak(v52);
                  }
                }
                goto LABEL_129;
              }
            }
          }
        }
        if (v13 == ++v57)
          goto LABEL_93;
      }
    }
    goto LABEL_93;
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Rank of tensor ", 15);
  MIL::IRTensorValueType::Rank(v56);
  v83 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)" has a mismatch with the expected rank ", 39);
  v84 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)" in the ", 8);
  v85 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)"th tensor.", 10);
  v86 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v87 = (std::__shared_weak_count *)v86[1];
  v98 = *v86;
  v99 = v87;
  if (v87)
  {
    v88 = (unint64_t *)&v87->__shared_owners_;
    do
      v89 = __ldxr(v88);
    while (__stxr(v89 + 1, v88));
  }
  std::stringbuf::str();
  MIL::ValidationResult::ValidationResult(a2, &v98, 315, &v96);
  if (v97 < 0)
    operator delete(v96);
  v52 = v99;
  if (v99)
  {
    v90 = (unint64_t *)&v99->__shared_owners_;
    do
      v54 = __ldaxr(v90);
    while (__stlxr(v54 - 1, v90));
    goto LABEL_127;
  }
LABEL_129:
  __p[0] = *(void **)MEMORY[0x1E0DE4F60];
  *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F60] + 24);
  __p[1] = (void *)(MEMORY[0x1E0DE4FB8] + 16);
  if (v111 < 0)
    operator delete(v110);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1E0C022F8](&v112);
LABEL_132:
  if (v113)
  {
    v114 = v113;
    operator delete(v113);
  }
}

void sub_1E092D2A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  uint64_t v48;
  void *v50;

  if (a24 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::ostringstream::~ostringstream((uint64_t)&a43);
  v50 = *(void **)(v48 - 152);
  if (v50)
  {
    *(_QWORD *)(v48 - 144) = v50;
    operator delete(v50);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceReshape(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  MIL::IRValueType *SingleValueType;
  uint64_t v9;
  MIL::IRValue *SingleValue;
  int v11;
  unsigned __int8 *v12;
  BOOL IsValue;
  BOOL v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  int *v20;
  int *v21;
  MIL::MILContext *v22;
  void (***v23)(MIL::MILContextImpl *__hidden);
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  void (***v42)(MIL::MILContextImpl *__hidden);
  MIL::IRValueType *v43;
  MIL::MILContext *v44;
  uint64_t v45;
  uint64_t *v46;
  void *exception;
  std::string v48[2];
  int v49;
  uint64_t v50[2];
  void *__p[2];
  char v52;
  int v53;
  void *v54;
  int *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  _QWORD v59[2];

  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  v9 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (v52 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "shape");
  SingleValue = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::TryGetSingleValue(a3, (uint64_t)__p);
  if (v52 < 0)
    operator delete(__p[0]);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 88))(v9);
  std::string::basic_string[abi:ne180100]<0>(__p, "shape");
  v12 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v12)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  IsValue = MIL::IRTypedArgument::IsValue(**((MIL::IRTypedArgument ***)v12 + 5));
  v14 = IsValue;
  if (v52 < 0)
  {
    operator delete(__p[0]);
    if (v14)
    {
LABEL_8:
      v57 = 0;
      v58 = 0;
      v59[0] = 0;
      v54 = 0;
      v55 = 0;
      v56 = 0;
      v15 = (std::__shared_weak_count *)a2[1];
      v50[0] = *a2;
      v50[1] = (uint64_t)v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
      }
      MIL::Operators::Common::ios17::ComputeTargetShapeForReshape(SingleValue, v50, v9, (uint64_t)&v54, (MIL::ValidationResult *)__p);
      if (v15)
      {
        v18 = (unint64_t *)&v15->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)__p))
      {
        exception = __cxa_allocate_exception(0x48uLL);
        MIL::MILResult::MILResult(v48, (uint64_t)__p);
        v48[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA99F170;
        v49 = v53;
        MIL::ValidationError::ValidationError(exception, v48);
      }
      v20 = (int *)v54;
      v21 = v55;
      if (v54 != v55)
      {
        do
        {
          v22 = (MIL::MILContext *)*v20;
          v23 = *a1;
          if ((_DWORD)v22)
          {
            v24 = MIL::IRConstantDimension::Make(v23, v22);
            v25 = v58;
            if ((unint64_t)v58 >= v59[0])
            {
              v26 = v58 - v57;
              if ((unint64_t)(v26 + 1) >> 61)
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              v27 = (uint64_t)(v59[0] - (_QWORD)v57) >> 2;
              if (v27 <= v26 + 1)
                v27 = v26 + 1;
              if (v59[0] - (_QWORD)v57 >= 0x7FFFFFFFFFFFFFF8uLL)
                v28 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v28 = v27;
              if (v28)
                v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v59, v28);
              else
                v29 = 0;
              v33 = (uint64_t *)&v29[8 * v26];
              *v33 = v24;
              v30 = v33 + 1;
              v35 = (char *)v57;
              v34 = (char *)v58;
              if (v58 != v57)
              {
                do
                {
                  v36 = *((_QWORD *)v34 - 1);
                  v34 -= 8;
                  *--v33 = v36;
                }
                while (v34 != v35);
                goto LABEL_45;
              }
              goto LABEL_46;
            }
          }
          else
          {
            v24 = MIL::IRUnknownDimension::Make(v23, v22);
            v25 = v58;
            if ((unint64_t)v58 >= v59[0])
            {
              v31 = v58 - v57;
              if ((unint64_t)(v31 + 1) >> 61)
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              v32 = (uint64_t)(v59[0] - (_QWORD)v57) >> 2;
              if (v32 <= v31 + 1)
                v32 = v31 + 1;
              if (v59[0] - (_QWORD)v57 >= 0x7FFFFFFFFFFFFFF8uLL)
                v28 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v28 = v32;
              if (v28)
                v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v59, v28);
              else
                v29 = 0;
              v33 = (uint64_t *)&v29[8 * v31];
              *v33 = v24;
              v30 = v33 + 1;
              v37 = (char *)v57;
              v34 = (char *)v58;
              if (v58 != v57)
              {
                do
                {
                  v38 = *((_QWORD *)v34 - 1);
                  v34 -= 8;
                  *--v33 = v38;
                }
                while (v34 != v37);
LABEL_45:
                v34 = (char *)v57;
              }
LABEL_46:
              v57 = v33;
              v58 = v30;
              v59[0] = &v29[8 * v28];
              if (v34)
                operator delete(v34);
              goto LABEL_48;
            }
          }
          *v25 = v24;
          v30 = v25 + 1;
LABEL_48:
          v58 = v30;
          ++v20;
        }
        while (v20 != v21);
      }
      v39 = MIL::IRTensorValueType::MakeWithShape(*a1, v11, (uint64_t)&v57);
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v40 = (uint64_t *)operator new(8uLL);
      *a4 = v40;
      *v40++ = v39;
      a4[1] = v40;
      a4[2] = v40;
      MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)__p);
      if (v54)
        operator delete(v54);
      v41 = v57;
      if (v57)
      {
        v58 = v57;
LABEL_58:
        operator delete(v41);
        return;
      }
      return;
    }
  }
  else if (IsValue)
  {
    goto LABEL_8;
  }
  v42 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&v57, "shape");
  v43 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&v57);
  v44 = (MIL::MILContext *)MIL::IRValueType::AsTensorType(v43);
  MIL::ValueTypeInferenceUtils::InferShapeForDynamicReshape(v42, v44, (char **)__p);
  if (SHIBYTE(v59[0]) < 0)
    operator delete(v57);
  v45 = MIL::IRTensorValueType::MakeWithShape(*a1, v11, (uint64_t)__p);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v46 = (uint64_t *)operator new(8uLL);
  *a4 = v46;
  *v46++ = v45;
  a4[1] = v46;
  a4[2] = v46;
  v41 = (uint64_t *)__p[0];
  if (__p[0])
  {
    __p[1] = __p[0];
    goto LABEL_58;
  }
}

void sub_1E092D860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p)
{
  uint64_t v29;
  void *v31;

  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a10);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a19);
  if (__p)
    operator delete(__p);
  v31 = *(void **)(v29 - 112);
  if (v31)
  {
    *(_QWORD *)(v29 - 104) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceConcat(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;

  v4 = *(std::__shared_weak_count **)(a2 + 8);
  v9 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceConcat(a1, a3, a4);
  if (v9)
  {
    v7 = (unint64_t *)&v9->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1E092D9B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::Concat::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned __int8 *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  unsigned __int8 *v21;
  void **v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  unsigned __int8 *v27;
  void **v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  char **v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t *v54;
  char *v55;
  char *v56;
  char *v57;
  __int128 v58;
  void **v59;
  char *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  char **v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  void **v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count_vtbl *v84;
  std::__shared_weak_count *v85;
  unint64_t *p_shared_owners;
  unint64_t v87;
  std::__shared_weak_count_vtbl *v88;
  void **v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count_vtbl *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count_vtbl *v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  void **v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  void **v102;
  uint64_t result;
  uint64_t v104;
  void **v105;
  std::__shared_weak_count *v106;
  void *v107[2];
  char v108;
  std::__shared_weak_count_vtbl *v109;
  std::__shared_weak_count *v110;
  void *v111[2];
  char v112;
  void *v113[2];
  char v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  __int128 v117;
  __int128 v118;
  void *v119[2];
  uint64_t v120;
  void *v121;
  void *v122;
  _QWORD *v123;
  __n128 v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  char **v128;
  __n128 v129;
  __n128 v130;
  void *__p;
  void *v132;
  _QWORD *v133;
  void *v134;
  void *v135;
  _QWORD *v136;
  void *v137;
  void *v138;
  _QWORD *v139;
  __n128 v140;
  _QWORD *v141;
  _QWORD v142[3];
  _QWORD *v143;
  _BYTE v144[24];
  _BYTE *v145;
  _QWORD v146[3];
  _QWORD *v147;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void **v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char **v156;
  uint64_t v157;

  v157 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v141 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v149 = (uint64_t)&v8->~__shared_weak_count_0;
  v150 = (uint64_t)&v8->~__shared_weak_count_0;
  v152 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v137 = v10;
  *v10 = v9;
  v138 = v10 + 1;
  v139 = v10 + 1;
  v153 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v137);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v134 = v12;
  *v12 = v11;
  v135 = v12 + 1;
  v136 = v12 + 1;
  v154 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v134);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v132 = v14 + 1;
  v133 = v14 + 1;
  v155 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v152, 4, &v140);
  MIL::IRParameter::Make(&v140, (uint64_t *)&v121);
  v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "values", (uint64_t *)&v121);
  v16 = v121;
  v121 = 0;
  if (v16)
    (*(void (**)(void *))(*(_QWORD *)v16 + 8))(v16);
  v17 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v18 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v132 = __p;
    operator delete(__p);
  }
  if (v134)
  {
    v135 = v134;
    operator delete(v134);
  }
  if (v137)
  {
    v138 = v137;
    operator delete(v137);
  }
  if (Scalar)
  {
    v149 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v15 + 5) + 64))(*((_QWORD *)v15 + 5), 1);
  v20 = v141;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v130);
  MIL::IRParameter::Make(&v130, (uint64_t *)&v152);
  v21 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v20, "axis", (uint64_t *)&v152);
  v22 = v152;
  v152 = 0;
  if (v22)
    (*((void (**)(void **))*v22 + 1))(v22);
  v23 = (std::__shared_weak_count *)v130.n128_u64[1];
  if (v130.n128_u64[1])
  {
    v24 = (unint64_t *)(v130.n128_u64[1] + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v21 + 5) + 32))(*((_QWORD *)v21 + 5), 1);
  v26 = v141;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v129);
  MIL::IRParameter::Make(&v129, (uint64_t *)&v152);
  v27 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v26, "interleave", (uint64_t *)&v152);
  v28 = v152;
  v152 = 0;
  if (v28)
    (*((void (**)(void **))*v28 + 1))(v28);
  v29 = (std::__shared_weak_count *)v129.n128_u64[1];
  if (v129.n128_u64[1])
  {
    v30 = (unint64_t *)(v129.n128_u64[1] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v27 + 5) + 32))(*((_QWORD *)v27 + 5), 1);
  v128 = 0;
  v32 = operator new();
  *(_QWORD *)v32 = 0;
  *(_QWORD *)(v32 + 8) = 0;
  *(_QWORD *)(v32 + 16) = 0;
  v152 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v128, (void **)v32);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v152, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v128, 1uLL);
  v33 = v128;
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = operator new(8uLL);
  v137 = v35;
  *v35 = v34;
  v138 = v35 + 1;
  v139 = v35 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v137);
  v36 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v37 = operator new(8uLL);
  v134 = v37;
  *v37 = v36;
  v135 = v37 + 1;
  v136 = v37 + 1;
  v149 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v134);
  v38 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v39 = operator new(8uLL);
  __p = v39;
  *v39 = v38;
  v132 = v39 + 1;
  v133 = v39 + 1;
  v150 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  v40 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v41 = operator new(8uLL);
  v121 = v41;
  *v41 = v40;
  v122 = v41 + 1;
  v123 = v41 + 1;
  v151 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v121);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 4, &v124);
  MIL::IRParameter::Make(&v124, &v125);
  v42 = v125;
  v126 = v125;
  if (v125)
  {
    v43 = (_QWORD *)operator new();
    v44 = v125;
    *v43 = &unk_1EA99F888;
    v43[1] = 0;
    v43[2] = 0;
    v43[3] = v44;
  }
  else
  {
    v43 = 0;
  }
  v127 = v43;
  v125 = 0;
  v45 = v33[2];
  v46 = v33[1];
  if (v46 >= v45)
  {
    v48 = (v46 - *v33) >> 4;
    v49 = v48 + 1;
    if ((unint64_t)(v48 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v50 = v45 - *v33;
    if (v50 >> 3 > v49)
      v49 = v50 >> 3;
    if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF0)
      v51 = 0xFFFFFFFFFFFFFFFLL;
    else
      v51 = v49;
    v156 = v33 + 2;
    v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v33 + 2), v51);
    v54 = (uint64_t *)&v52[16 * v48];
    *v54 = v42;
    v54[1] = (uint64_t)v43;
    v126 = 0;
    v127 = 0;
    v56 = *v33;
    v55 = v33[1];
    if (v55 == *v33)
    {
      v59 = (void **)v33[1];
      v57 = &v52[16 * v48];
    }
    else
    {
      v57 = &v52[16 * v48];
      do
      {
        v58 = *((_OWORD *)v55 - 1);
        v55 -= 16;
        *((_OWORD *)v57 - 1) = v58;
        v57 -= 16;
        *(_QWORD *)v55 = 0;
        *((_QWORD *)v55 + 1) = 0;
      }
      while (v55 != v56);
      v59 = (void **)*v33;
      v55 = v33[1];
    }
    v47 = (char *)(v54 + 2);
    *v33 = v57;
    v152 = v59;
    v153 = (uint64_t)v59;
    v33[1] = (char *)(v54 + 2);
    v154 = (uint64_t)v55;
    v60 = v33[2];
    v33[2] = &v52[16 * v53];
    v155 = (uint64_t)v60;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v152);
  }
  else
  {
    *(_QWORD *)v46 = v42;
    *((_QWORD *)v46 + 1) = v43;
    v47 = v46 + 16;
    v126 = 0;
    v127 = 0;
  }
  v33[1] = v47;
  v61 = v125;
  v125 = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  v62 = (std::__shared_weak_count *)v124.n128_u64[1];
  if (v124.n128_u64[1])
  {
    v63 = (unint64_t *)(v124.n128_u64[1] + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  if (v121)
  {
    v122 = v121;
    operator delete(v121);
  }
  if (__p)
  {
    v132 = __p;
    operator delete(__p);
  }
  if (v134)
  {
    v135 = v134;
    operator delete(v134);
  }
  if (v137)
  {
    v138 = v137;
    operator delete(v137);
  }
  *(_OWORD *)v119 = *(_OWORD *)a2;
  v120 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v65 = (uint64_t)v141;
  *(_QWORD *)&v118 = v141;
  if (v141)
  {
    v66 = (_QWORD *)operator new();
    *v66 = &unk_1EA99F8E8;
    v66[1] = 0;
    v66[2] = 0;
    v66[3] = v65;
  }
  else
  {
    v66 = 0;
  }
  *((_QWORD *)&v118 + 1) = v66;
  v141 = 0;
  *(_QWORD *)&v117 = v128;
  if (v128)
  {
    v67 = (_QWORD *)operator new();
    v68 = v128;
    *v67 = &unk_1EA99F948;
    v67[1] = 0;
    v67[2] = 0;
    v67[3] = v68;
  }
  else
  {
    v67 = 0;
  }
  *((_QWORD *)&v117 + 1) = v67;
  v128 = 0;
  v146[0] = &unk_1EA99FAC8;
  v146[1] = MIL::Operators::Common::ios17::CustomValidators::ValidateConcat;
  v147 = v146;
  v145 = 0;
  MIL::IROperator::Make((__int128 *)v119, &v118, &v117, (uint64_t)v146, (uint64_t)v144, a3);
  v69 = v145;
  if (v145 == v144)
  {
    v70 = 4;
    v69 = v144;
  }
  else
  {
    if (!v145)
      goto LABEL_73;
    v70 = 5;
  }
  (*(void (**)(void))(*v69 + 8 * v70))();
LABEL_73:
  v71 = v147;
  if (v147 == v146)
  {
    v72 = 4;
    v71 = v146;
    goto LABEL_77;
  }
  if (v147)
  {
    v72 = 5;
LABEL_77:
    (*(void (**)(void))(*v71 + 8 * v72))();
  }
  v73 = (std::__shared_weak_count *)*((_QWORD *)&v117 + 1);
  if (*((_QWORD *)&v117 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v117 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = (std::__shared_weak_count *)*((_QWORD *)&v118 + 1);
  if (*((_QWORD *)&v118 + 1))
  {
    v77 = (unint64_t *)(*((_QWORD *)&v118 + 1) + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  if (SHIBYTE(v120) < 0)
    operator delete(v119[0]);
  v79 = *a3;
  v142[0] = &off_1EA99FBD8;
  v142[1] = MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceConcat;
  v143 = v142;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v79 + 200))(v79, v142);
  v80 = v143;
  if (v143 == v142)
  {
    v81 = 4;
    v80 = v142;
  }
  else
  {
    if (!v143)
      goto LABEL_95;
    v81 = 5;
  }
  (*(void (**)(void))(*v80 + 8 * v81))();
LABEL_95:
  MIL::Validation::TensorDTypeConstraints::Make(&v152);
  v82 = v152;
  std::string::basic_string[abi:ne180100]<0>(v113, "values");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v113, 0, (uint64_t *)&Scalar);
  v115 = Scalar;
  if (Scalar)
  {
    v83 = (std::__shared_weak_count *)operator new();
    v84 = Scalar;
    v83->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v83->__shared_owners_ = 0;
    v83->__shared_weak_owners_ = 0;
    v83[1].__vftable = v84;
  }
  else
  {
    v83 = 0;
  }
  v116 = v83;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v111, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v82 + 3))(v82, &v115, v111);
  if (v112 < 0)
    operator delete(v111[0]);
  v85 = v116;
  if (v116)
  {
    p_shared_owners = (unint64_t *)&v116->__shared_owners_;
    do
      v87 = __ldaxr(p_shared_owners);
    while (__stlxr(v87 - 1, p_shared_owners));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = Scalar;
  Scalar = 0;
  if (v88)
    (*((void (**)(std::__shared_weak_count_vtbl *))v88->~__shared_weak_count + 1))(v88);
  if (v114 < 0)
    operator delete(v113[0]);
  v89 = v152;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v109 = Scalar;
  if (Scalar)
  {
    v90 = (std::__shared_weak_count *)operator new();
    v91 = Scalar;
    v90->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v90->__shared_owners_ = 0;
    v90->__shared_weak_owners_ = 0;
    v90[1].__vftable = v91;
  }
  else
  {
    v90 = 0;
  }
  v110 = v90;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v107, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v89 + 3))(v89, &v109, v107);
  if (v108 < 0)
    operator delete(v107[0]);
  v92 = v110;
  if (v110)
  {
    v93 = (unint64_t *)&v110->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = Scalar;
  Scalar = 0;
  if (v95)
    (*((void (**)(std::__shared_weak_count_vtbl *))v95->~__shared_weak_count + 1))(v95);
  v96 = *a3;
  v105 = v152;
  if (v152)
  {
    v97 = (std::__shared_weak_count *)operator new();
    v98 = v152;
    v97->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v97->__shared_owners_ = 0;
    v97->__shared_weak_owners_ = 0;
    v97[1].__vftable = (std::__shared_weak_count_vtbl *)v98;
  }
  else
  {
    v97 = 0;
  }
  v106 = v97;
  v152 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v96 + 56))(v96, &v105);
  v99 = v106;
  if (v106)
  {
    v100 = (unint64_t *)&v106->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v102 = v152;
  v152 = 0;
  if (v102)
    (*((void (**)(void **))*v102 + 1))(v102);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v128, 0);
  result = (uint64_t)v141;
  if (v141)
  {
    v104 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v141);
    return MEMORY[0x1E0C023A0](v104, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E092E588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void **a40)
{
  uint64_t *v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;

  v43 = *(_QWORD *)(v41 - 112);
  *(_QWORD *)(v41 - 112) = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v44 = *v40;
  *v40 = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a40, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v41 - 248), 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::ExpandDims::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void **v29;
  unsigned __int8 *v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  char **v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t *v65;
  char *v66;
  char *v67;
  char *v68;
  __int128 v69;
  char *v70;
  char *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  char **v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  void **v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count_vtbl *v95;
  std::__shared_weak_count *v96;
  unint64_t *p_shared_owners;
  unint64_t v98;
  void *v99;
  void **v100;
  std::__shared_weak_count *v101;
  std::__shared_weak_count_vtbl *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  void **v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  void **v113;
  void **v114;
  std::__shared_weak_count *v115;
  std::__shared_weak_count_vtbl *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  void **v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  void **v127;
  uint64_t result;
  uint64_t v129;
  void **v130;
  std::__shared_weak_count *v131;
  void *v132[2];
  char v133;
  void *v134[2];
  char v135;
  void *v136;
  std::__shared_weak_count *v137;
  void **v138;
  std::__shared_weak_count *v139;
  void *v140[2];
  char v141;
  void *v142;
  std::__shared_weak_count *v143;
  void *v144[2];
  char v145;
  void *v146[2];
  char v147;
  void *v148;
  std::__shared_weak_count *v149;
  __int128 v150;
  __int128 v151;
  void *v152[2];
  uint64_t v153;
  void *v154;
  void *v155;
  _QWORD *v156;
  __n128 v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  char **v161;
  __n128 v162;
  void *__p;
  void *v164;
  _QWORD *v165;
  void *v166;
  void *v167;
  _QWORD *v168;
  void *v169;
  void *v170;
  _QWORD *v171;
  void *v172;
  void *v173;
  _QWORD *v174;
  void *v175;
  void *v176;
  _QWORD *v177;
  void *v178;
  void *v179;
  _QWORD *v180;
  __n128 v181;
  _QWORD *v182;
  void *v183;
  void *v184;
  char *v185;
  char *v186;
  char **v187;
  _QWORD v188[3];
  _QWORD *v189;
  _BYTE v190[24];
  _BYTE *v191;
  _QWORD v192[3];
  _QWORD *v193;
  void *v194;
  void *v195;
  _QWORD *v196;
  void **v197;
  void **v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;

  v205 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v182 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (char *)operator new(8uLL);
  v183 = v8;
  *(_QWORD *)v8 = v7;
  v185 = v8 + 8;
  v184 = v8 + 8;
  v197 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v183);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v194 = v10;
  *v10 = v9;
  v195 = v10 + 1;
  v196 = v10 + 1;
  v198 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v194);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v178 = v12;
  *v12 = v11;
  v179 = v12 + 1;
  v180 = v12 + 1;
  v199 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v178);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  v175 = v14;
  *v14 = v13;
  v176 = v14 + 1;
  v177 = v14 + 1;
  v200 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v175);
  v15 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v16 = operator new(8uLL);
  v172 = v16;
  *v16 = v15;
  v173 = v16 + 1;
  v174 = v16 + 1;
  v201 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v172);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  v169 = v18;
  *v18 = v17;
  v170 = v18 + 1;
  v171 = v18 + 1;
  v202 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v169);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v166 = v20;
  *v20 = v19;
  v167 = v20 + 1;
  v168 = v20 + 1;
  v203 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v166);
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  __p = v22;
  *v22 = v21;
  v164 = v22 + 1;
  v165 = v22 + 1;
  v204 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v197, 8, &v181);
  MIL::IRParameter::Make(&v181, (uint64_t *)&v154);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v154);
  v23 = v154;
  v154 = 0;
  if (v23)
    (*(void (**)(void *))(*(_QWORD *)v23 + 8))(v23);
  v24 = (std::__shared_weak_count *)v181.n128_u64[1];
  if (v181.n128_u64[1])
  {
    v25 = (unint64_t *)(v181.n128_u64[1] + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (__p)
  {
    v164 = __p;
    operator delete(__p);
  }
  if (v166)
  {
    v167 = v166;
    operator delete(v166);
  }
  if (v169)
  {
    v170 = v169;
    operator delete(v169);
  }
  if (v172)
  {
    v173 = v172;
    operator delete(v172);
  }
  if (v175)
  {
    v176 = v175;
    operator delete(v175);
  }
  if (v178)
  {
    v179 = v178;
    operator delete(v178);
  }
  if (v194)
  {
    v195 = v194;
    operator delete(v194);
  }
  if (v183)
  {
    v184 = v183;
    operator delete(v183);
  }
  v27 = v182;
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = (void **)operator new(8uLL);
  v197 = v29;
  *v29 = (void *)v28;
  v198 = v29 + 1;
  v199 = (uint64_t)(v29 + 1);
  v194 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v197);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v194, 1, &v162);
  MIL::IRParameter::Make(&v162, (uint64_t *)&v183);
  v30 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v27, "axes", (uint64_t *)&v183);
  v31 = v183;
  v183 = 0;
  if (v31)
    (*(void (**)(void *))(*(_QWORD *)v31 + 8))(v31);
  v32 = (std::__shared_weak_count *)v162.n128_u64[1];
  if (v162.n128_u64[1])
  {
    v33 = (unint64_t *)(v162.n128_u64[1] + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (v197)
  {
    v198 = v197;
    operator delete(v197);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v30 + 5) + 32))(*((_QWORD *)v30 + 5), 1);
  v161 = 0;
  v35 = operator new();
  *(_QWORD *)v35 = 0;
  *(_QWORD *)(v35 + 8) = 0;
  *(_QWORD *)(v35 + 16) = 0;
  v197 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v161, (void **)v35);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v197, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v161, 1uLL);
  v36 = v161;
  v37 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v38 = operator new(8uLL);
  v194 = v38;
  *v38 = v37;
  v195 = v38 + 1;
  v196 = v38 + 1;
  v197 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v194);
  v39 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v40 = operator new(8uLL);
  v178 = v40;
  *v40 = v39;
  v179 = v40 + 1;
  v180 = v40 + 1;
  v198 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v178);
  v41 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v42 = operator new(8uLL);
  v175 = v42;
  *v42 = v41;
  v176 = v42 + 1;
  v177 = v42 + 1;
  v199 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v175);
  v43 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v44 = operator new(8uLL);
  v172 = v44;
  *v44 = v43;
  v173 = v44 + 1;
  v174 = v44 + 1;
  v200 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v172);
  v45 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v46 = operator new(8uLL);
  v169 = v46;
  *v46 = v45;
  v170 = v46 + 1;
  v171 = v46 + 1;
  v201 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v169);
  v47 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v48 = operator new(8uLL);
  v166 = v48;
  *v48 = v47;
  v167 = v48 + 1;
  v168 = v48 + 1;
  v202 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v166);
  v49 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v50 = operator new(8uLL);
  __p = v50;
  *v50 = v49;
  v164 = v50 + 1;
  v165 = v50 + 1;
  v203 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&__p);
  v51 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v52 = operator new(8uLL);
  v154 = v52;
  *v52 = v51;
  v155 = v52 + 1;
  v156 = v52 + 1;
  v204 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v154);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v197, 8, &v157);
  MIL::IRParameter::Make(&v157, &v158);
  v53 = v158;
  v159 = v158;
  if (v158)
  {
    v54 = (_QWORD *)operator new();
    v55 = v158;
    *v54 = &unk_1EA99F888;
    v54[1] = 0;
    v54[2] = 0;
    v54[3] = v55;
  }
  else
  {
    v54 = 0;
  }
  v160 = v54;
  v158 = 0;
  v56 = v36[2];
  v57 = v36[1];
  if (v57 >= v56)
  {
    v59 = (v57 - *v36) >> 4;
    v60 = v59 + 1;
    if ((unint64_t)(v59 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v61 = v56 - *v36;
    if (v61 >> 3 > v60)
      v60 = v61 >> 3;
    if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF0)
      v62 = 0xFFFFFFFFFFFFFFFLL;
    else
      v62 = v60;
    v187 = v36 + 2;
    v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v36 + 2), v62);
    v65 = (uint64_t *)&v63[16 * v59];
    *v65 = v53;
    v65[1] = (uint64_t)v54;
    v159 = 0;
    v160 = 0;
    v67 = *v36;
    v66 = v36[1];
    if (v66 == *v36)
    {
      v70 = v36[1];
      v68 = &v63[16 * v59];
    }
    else
    {
      v68 = &v63[16 * v59];
      do
      {
        v69 = *((_OWORD *)v66 - 1);
        v66 -= 16;
        *((_OWORD *)v68 - 1) = v69;
        v68 -= 16;
        *(_QWORD *)v66 = 0;
        *((_QWORD *)v66 + 1) = 0;
      }
      while (v66 != v67);
      v70 = *v36;
      v66 = v36[1];
    }
    v58 = (char *)(v65 + 2);
    *v36 = v68;
    v184 = v70;
    v36[1] = (char *)(v65 + 2);
    v185 = v66;
    v71 = v36[2];
    v36[2] = &v63[16 * v64];
    v186 = v71;
    v183 = v70;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v183);
  }
  else
  {
    *(_QWORD *)v57 = v53;
    *((_QWORD *)v57 + 1) = v54;
    v58 = v57 + 16;
    v159 = 0;
    v160 = 0;
  }
  v36[1] = v58;
  v72 = v158;
  v158 = 0;
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  v73 = (std::__shared_weak_count *)v157.n128_u64[1];
  if (v157.n128_u64[1])
  {
    v74 = (unint64_t *)(v157.n128_u64[1] + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  if (v154)
  {
    v155 = v154;
    operator delete(v154);
  }
  if (__p)
  {
    v164 = __p;
    operator delete(__p);
  }
  if (v166)
  {
    v167 = v166;
    operator delete(v166);
  }
  if (v169)
  {
    v170 = v169;
    operator delete(v169);
  }
  if (v172)
  {
    v173 = v172;
    operator delete(v172);
  }
  if (v175)
  {
    v176 = v175;
    operator delete(v175);
  }
  if (v178)
  {
    v179 = v178;
    operator delete(v178);
  }
  if (v194)
  {
    v195 = v194;
    operator delete(v194);
  }
  *(_OWORD *)v152 = *(_OWORD *)a2;
  v153 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v76 = (uint64_t)v182;
  *(_QWORD *)&v151 = v182;
  if (v182)
  {
    v77 = (_QWORD *)operator new();
    *v77 = &unk_1EA99F8E8;
    v77[1] = 0;
    v77[2] = 0;
    v77[3] = v76;
  }
  else
  {
    v77 = 0;
  }
  *((_QWORD *)&v151 + 1) = v77;
  v182 = 0;
  *(_QWORD *)&v150 = v161;
  if (v161)
  {
    v78 = (_QWORD *)operator new();
    v79 = v161;
    *v78 = &unk_1EA99F948;
    v78[1] = 0;
    v78[2] = 0;
    v78[3] = v79;
  }
  else
  {
    v78 = 0;
  }
  *((_QWORD *)&v150 + 1) = v78;
  v161 = 0;
  v192[0] = &unk_1EA99FAC8;
  v192[1] = MIL::Operators::Common::ios17::CustomValidators::ValidateExpandDims;
  v193 = v192;
  v191 = 0;
  MIL::IROperator::Make((__int128 *)v152, &v151, &v150, (uint64_t)v192, (uint64_t)v190, a3);
  v80 = v191;
  if (v191 == v190)
  {
    v81 = 4;
    v80 = v190;
  }
  else
  {
    if (!v191)
      goto LABEL_84;
    v81 = 5;
  }
  (*(void (**)(void))(*v80 + 8 * v81))();
LABEL_84:
  v82 = v193;
  if (v193 == v192)
  {
    v83 = 4;
    v82 = v192;
    goto LABEL_88;
  }
  if (v193)
  {
    v83 = 5;
LABEL_88:
    (*(void (**)(void))(*v82 + 8 * v83))();
  }
  v84 = (std::__shared_weak_count *)*((_QWORD *)&v150 + 1);
  if (*((_QWORD *)&v150 + 1))
  {
    v85 = (unint64_t *)(*((_QWORD *)&v150 + 1) + 8);
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = (std::__shared_weak_count *)*((_QWORD *)&v151 + 1);
  if (*((_QWORD *)&v151 + 1))
  {
    v88 = (unint64_t *)(*((_QWORD *)&v151 + 1) + 8);
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  if (SHIBYTE(v153) < 0)
    operator delete(v152[0]);
  v90 = *a3;
  v188[0] = &off_1EA99FBD8;
  v188[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceExpandDims;
  v189 = v188;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v90 + 200))(v90, v188);
  v91 = v189;
  if (v189 == v188)
  {
    v92 = 4;
    v91 = v188;
  }
  else
  {
    if (!v189)
      goto LABEL_106;
    v92 = 5;
  }
  (*(void (**)(void))(*v91 + 8 * v92))();
LABEL_106:
  MIL::Validation::TensorDTypeConstraints::Make(&v197);
  v93 = v197;
  std::string::basic_string[abi:ne180100]<0>(v146, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v146, 0, (uint64_t *)&v183);
  v148 = v183;
  if (v183)
  {
    v94 = (std::__shared_weak_count *)operator new();
    v95 = (std::__shared_weak_count_vtbl *)v183;
    v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v94->__shared_owners_ = 0;
    v94->__shared_weak_owners_ = 0;
    v94[1].__vftable = v95;
  }
  else
  {
    v94 = 0;
  }
  v149 = v94;
  v183 = 0;
  std::string::basic_string[abi:ne180100]<0>(v144, "T");
  (*((void (**)(void **, void **, void **))*v93 + 3))(v93, &v148, v144);
  if (v145 < 0)
    operator delete(v144[0]);
  v96 = v149;
  if (v149)
  {
    p_shared_owners = (unint64_t *)&v149->__shared_owners_;
    do
      v98 = __ldaxr(p_shared_owners);
    while (__stlxr(v98 - 1, p_shared_owners));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = v183;
  v183 = 0;
  if (v99)
    (*(void (**)(void *))(*(_QWORD *)v99 + 8))(v99);
  if (v147 < 0)
    operator delete(v146[0]);
  v100 = v197;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v183);
  v142 = v183;
  if (v183)
  {
    v101 = (std::__shared_weak_count *)operator new();
    v102 = (std::__shared_weak_count_vtbl *)v183;
    v101->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v101->__shared_owners_ = 0;
    v101->__shared_weak_owners_ = 0;
    v101[1].__vftable = v102;
  }
  else
  {
    v101 = 0;
  }
  v143 = v101;
  v183 = 0;
  std::string::basic_string[abi:ne180100]<0>(v140, "T");
  (*((void (**)(void **, void **, void **))*v100 + 3))(v100, &v142, v140);
  if (v141 < 0)
    operator delete(v140[0]);
  v103 = v143;
  if (v143)
  {
    v104 = (unint64_t *)&v143->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v106 = v183;
  v183 = 0;
  if (v106)
    (*(void (**)(void *))(*(_QWORD *)v106 + 8))(v106);
  v107 = *a3;
  v138 = v197;
  if (v197)
  {
    v108 = (std::__shared_weak_count *)operator new();
    v109 = v197;
    v108->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v108->__shared_owners_ = 0;
    v108->__shared_weak_owners_ = 0;
    v108[1].__vftable = (std::__shared_weak_count_vtbl *)v109;
  }
  else
  {
    v108 = 0;
  }
  v139 = v108;
  v197 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v107 + 56))(v107, &v138);
  v110 = v139;
  if (v139)
  {
    v111 = (unint64_t *)&v139->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  v113 = v197;
  v197 = 0;
  if (v113)
    (*((void (**)(void **))*v113 + 1))(v113);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v197);
  v114 = v197;
  std::string::basic_string[abi:ne180100]<0>(v134, "axes");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v134, 0, (uint64_t *)&v183);
  v136 = v183;
  if (v183)
  {
    v115 = (std::__shared_weak_count *)operator new();
    v116 = (std::__shared_weak_count_vtbl *)v183;
    v115->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v115->__shared_owners_ = 0;
    v115->__shared_weak_owners_ = 0;
    v115[1].__vftable = v116;
  }
  else
  {
    v115 = 0;
  }
  v137 = v115;
  v183 = 0;
  std::string::basic_string[abi:ne180100]<0>(v132, "K");
  (*((void (**)(void **, void **, _QWORD, void **))*v114 + 3))(v114, &v136, 0, v132);
  if (v133 < 0)
    operator delete(v132[0]);
  v117 = v137;
  if (v137)
  {
    v118 = (unint64_t *)&v137->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = v183;
  v183 = 0;
  if (v120)
    (*(void (**)(void *))(*(_QWORD *)v120 + 8))(v120);
  if (v135 < 0)
    operator delete(v134[0]);
  v121 = *a3;
  v130 = v197;
  if (v197)
  {
    v122 = (std::__shared_weak_count *)operator new();
    v123 = v197;
    v122->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v122->__shared_owners_ = 0;
    v122->__shared_weak_owners_ = 0;
    v122[1].__vftable = (std::__shared_weak_count_vtbl *)v123;
  }
  else
  {
    v122 = 0;
  }
  v131 = v122;
  v197 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v121 + 56))(v121, &v130);
  v124 = v131;
  if (v131)
  {
    v125 = (unint64_t *)&v131->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = v197;
  v197 = 0;
  if (v127)
    (*((void (**)(void **))*v127 + 1))(v127);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v161, 0);
  result = (uint64_t)v182;
  if (v182)
  {
    v129 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v182);
    return MEMORY[0x1E0C023A0](v129, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E092F878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void **a50)
{
  uint64_t *v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;

  v53 = *(_QWORD *)(v51 - 136);
  *(_QWORD *)(v51 - 136) = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  v54 = *v50;
  *v50 = 0;
  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x200], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::Reshape::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  char **v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t *v68;
  char *v69;
  char *v70;
  char *v71;
  __int128 v72;
  char *v73;
  char *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  char **v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  void **v96;
  std::__shared_weak_count *v97;
  std::__shared_weak_count_vtbl *v98;
  std::__shared_weak_count *v99;
  unint64_t *p_shared_owners;
  unint64_t v101;
  void *v102;
  void **v103;
  std::__shared_weak_count *v104;
  std::__shared_weak_count_vtbl *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  void *v109;
  void **v110;
  std::__shared_weak_count *v111;
  std::__shared_weak_count_vtbl *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  void *v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  void **v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  void **v123;
  void **v124;
  std::__shared_weak_count *v125;
  std::__shared_weak_count_vtbl *v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  void **v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  void **v137;
  uint64_t result;
  uint64_t v139;
  void **v140;
  std::__shared_weak_count *v141;
  void *v142[2];
  char v143;
  void *v144[2];
  char v145;
  void *v146;
  std::__shared_weak_count *v147;
  void **v148;
  std::__shared_weak_count *v149;
  void *v150[2];
  char v151;
  void *v152;
  std::__shared_weak_count *v153;
  void *v154[2];
  char v155;
  void *v156[2];
  char v157;
  void *v158;
  std::__shared_weak_count *v159;
  void *v160[2];
  char v161;
  void *v162[2];
  char v163;
  void *v164;
  std::__shared_weak_count *v165;
  __int128 v166;
  __int128 v167;
  void *v168[2];
  uint64_t v169;
  void *v170;
  void *v171;
  _QWORD *v172;
  __n128 v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  char **v177;
  __n128 v178;
  void *__p;
  void *v180;
  _QWORD *v181;
  void *v182;
  void *v183;
  _QWORD *v184;
  void *v185;
  void *v186;
  _QWORD *v187;
  void *v188;
  void *v189;
  _QWORD *v190;
  void *v191;
  void *v192;
  _QWORD *v193;
  void *v194;
  void *v195;
  _QWORD *v196;
  void *v197;
  void *v198;
  _QWORD *v199;
  __n128 v200;
  _QWORD *v201;
  void *v202;
  void *v203;
  char *v204;
  char *v205;
  char **v206;
  _QWORD v207[3];
  _QWORD *v208;
  _BYTE v209[24];
  _BYTE *v210;
  _QWORD v211[3];
  _QWORD *v212;
  void **v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;

  v221 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v201 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (char *)operator new(8uLL);
  v202 = v8;
  *(_QWORD *)v8 = v7;
  v204 = v8 + 8;
  v203 = v8 + 8;
  v213 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v202);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v197 = v10;
  *v10 = v9;
  v199 = v10 + 1;
  v198 = v10 + 1;
  v214 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v197);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v194 = v12;
  *v12 = v11;
  v196 = v12 + 1;
  v195 = v12 + 1;
  v215 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v194);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  v191 = v14;
  *v14 = v13;
  v193 = v14 + 1;
  v192 = v14 + 1;
  v216 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v191);
  v15 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v16 = operator new(8uLL);
  v188 = v16;
  *v16 = v15;
  v189 = v16 + 1;
  v190 = v16 + 1;
  v217 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v188);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  v185 = v18;
  *v18 = v17;
  v186 = v18 + 1;
  v187 = v18 + 1;
  v218 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v185);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v182 = v20;
  *v20 = v19;
  v183 = v20 + 1;
  v184 = v20 + 1;
  v219 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v182);
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  __p = v22;
  *v22 = v21;
  v180 = v22 + 1;
  v181 = v22 + 1;
  v220 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v213, 8, &v200);
  MIL::IRParameter::Make(&v200, (uint64_t *)&v170);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v170);
  v23 = v170;
  v170 = 0;
  if (v23)
    (*(void (**)(void *))(*(_QWORD *)v23 + 8))(v23);
  v24 = (std::__shared_weak_count *)v200.n128_u64[1];
  if (v200.n128_u64[1])
  {
    v25 = (unint64_t *)(v200.n128_u64[1] + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (__p)
  {
    v180 = __p;
    operator delete(__p);
  }
  if (v182)
  {
    v183 = v182;
    operator delete(v182);
  }
  if (v185)
  {
    v186 = v185;
    operator delete(v185);
  }
  if (v188)
  {
    v189 = v188;
    operator delete(v188);
  }
  if (v191)
  {
    v192 = v191;
    operator delete(v191);
  }
  if (v194)
  {
    v195 = v194;
    operator delete(v194);
  }
  if (v197)
  {
    v198 = v197;
    operator delete(v197);
  }
  if (v202)
  {
    v203 = v202;
    operator delete(v202);
  }
  v27 = v201;
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = (char *)operator new(8uLL);
  v202 = v29;
  *(_QWORD *)v29 = v28;
  v204 = v29 + 8;
  v203 = v29 + 8;
  v213 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v202);
  v30 = MIL::IRUnknownDimension::Make(a1, 0);
  v31 = operator new(8uLL);
  v197 = v31;
  *v31 = v30;
  v199 = v31 + 1;
  v198 = v31 + 1;
  v214 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v197);
  v32 = MIL::IRUnknownDimension::Make(a1, 0);
  v33 = operator new(8uLL);
  v194 = v33;
  *v33 = v32;
  v196 = v33 + 1;
  v195 = v33 + 1;
  v215 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v194);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v213, 3, &v178);
  MIL::IRParameter::Make(&v178, (uint64_t *)&v191);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v27, "shape", (uint64_t *)&v191);
  v34 = v191;
  v191 = 0;
  if (v34)
    (*(void (**)(void *))(*(_QWORD *)v34 + 8))(v34);
  v35 = (std::__shared_weak_count *)v178.n128_u64[1];
  if (v178.n128_u64[1])
  {
    v36 = (unint64_t *)(v178.n128_u64[1] + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (v194)
  {
    v195 = v194;
    operator delete(v194);
  }
  if (v197)
  {
    v198 = v197;
    operator delete(v197);
  }
  if (v202)
  {
    v203 = v202;
    operator delete(v202);
  }
  v177 = 0;
  v38 = operator new();
  *(_QWORD *)v38 = 0;
  *(_QWORD *)(v38 + 8) = 0;
  *(_QWORD *)(v38 + 16) = 0;
  v213 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v177, (void **)v38);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v213, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v177, 1uLL);
  v39 = v177;
  v40 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v41 = operator new(8uLL);
  v197 = v41;
  *v41 = v40;
  v199 = v41 + 1;
  v198 = v41 + 1;
  v213 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v197);
  v42 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v43 = operator new(8uLL);
  v194 = v43;
  *v43 = v42;
  v196 = v43 + 1;
  v195 = v43 + 1;
  v214 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v194);
  v44 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v45 = operator new(8uLL);
  v191 = v45;
  *v45 = v44;
  v193 = v45 + 1;
  v192 = v45 + 1;
  v215 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v191);
  v46 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v47 = operator new(8uLL);
  v188 = v47;
  *v47 = v46;
  v189 = v47 + 1;
  v190 = v47 + 1;
  v216 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v188);
  v48 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v49 = operator new(8uLL);
  v185 = v49;
  *v49 = v48;
  v186 = v49 + 1;
  v187 = v49 + 1;
  v217 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v185);
  v50 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v51 = operator new(8uLL);
  v182 = v51;
  *v51 = v50;
  v183 = v51 + 1;
  v184 = v51 + 1;
  v218 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v182);
  v52 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v53 = operator new(8uLL);
  __p = v53;
  *v53 = v52;
  v180 = v53 + 1;
  v181 = v53 + 1;
  v219 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&__p);
  v54 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v55 = operator new(8uLL);
  v170 = v55;
  *v55 = v54;
  v171 = v55 + 1;
  v172 = v55 + 1;
  v220 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v170);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v213, 8, &v173);
  MIL::IRParameter::Make(&v173, &v174);
  v56 = v174;
  v175 = v174;
  if (v174)
  {
    v57 = (_QWORD *)operator new();
    v58 = v174;
    *v57 = &unk_1EA99F888;
    v57[1] = 0;
    v57[2] = 0;
    v57[3] = v58;
  }
  else
  {
    v57 = 0;
  }
  v176 = v57;
  v174 = 0;
  v59 = v39[2];
  v60 = v39[1];
  if (v60 >= v59)
  {
    v62 = (v60 - *v39) >> 4;
    v63 = v62 + 1;
    if ((unint64_t)(v62 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v64 = v59 - *v39;
    if (v64 >> 3 > v63)
      v63 = v64 >> 3;
    if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF0)
      v65 = 0xFFFFFFFFFFFFFFFLL;
    else
      v65 = v63;
    v206 = v39 + 2;
    v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v39 + 2), v65);
    v68 = (uint64_t *)&v66[16 * v62];
    *v68 = v56;
    v68[1] = (uint64_t)v57;
    v175 = 0;
    v176 = 0;
    v70 = *v39;
    v69 = v39[1];
    if (v69 == *v39)
    {
      v73 = v39[1];
      v71 = &v66[16 * v62];
    }
    else
    {
      v71 = &v66[16 * v62];
      do
      {
        v72 = *((_OWORD *)v69 - 1);
        v69 -= 16;
        *((_OWORD *)v71 - 1) = v72;
        v71 -= 16;
        *(_QWORD *)v69 = 0;
        *((_QWORD *)v69 + 1) = 0;
      }
      while (v69 != v70);
      v73 = *v39;
      v69 = v39[1];
    }
    v61 = (char *)(v68 + 2);
    *v39 = v71;
    v203 = v73;
    v39[1] = (char *)(v68 + 2);
    v204 = v69;
    v74 = v39[2];
    v39[2] = &v66[16 * v67];
    v205 = v74;
    v202 = v73;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v202);
  }
  else
  {
    *(_QWORD *)v60 = v56;
    *((_QWORD *)v60 + 1) = v57;
    v61 = v60 + 16;
    v175 = 0;
    v176 = 0;
  }
  v39[1] = v61;
  v75 = v174;
  v174 = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  v76 = (std::__shared_weak_count *)v173.n128_u64[1];
  if (v173.n128_u64[1])
  {
    v77 = (unint64_t *)(v173.n128_u64[1] + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  if (v170)
  {
    v171 = v170;
    operator delete(v170);
  }
  if (__p)
  {
    v180 = __p;
    operator delete(__p);
  }
  if (v182)
  {
    v183 = v182;
    operator delete(v182);
  }
  if (v185)
  {
    v186 = v185;
    operator delete(v185);
  }
  if (v188)
  {
    v189 = v188;
    operator delete(v188);
  }
  if (v191)
  {
    v192 = v191;
    operator delete(v191);
  }
  if (v194)
  {
    v195 = v194;
    operator delete(v194);
  }
  if (v197)
  {
    v198 = v197;
    operator delete(v197);
  }
  *(_OWORD *)v168 = *(_OWORD *)a2;
  v169 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v79 = (uint64_t)v201;
  *(_QWORD *)&v167 = v201;
  if (v201)
  {
    v80 = (_QWORD *)operator new();
    *v80 = &unk_1EA99F8E8;
    v80[1] = 0;
    v80[2] = 0;
    v80[3] = v79;
  }
  else
  {
    v80 = 0;
  }
  *((_QWORD *)&v167 + 1) = v80;
  v201 = 0;
  *(_QWORD *)&v166 = v177;
  if (v177)
  {
    v81 = (_QWORD *)operator new();
    v82 = v177;
    *v81 = &unk_1EA99F948;
    v81[1] = 0;
    v81[2] = 0;
    v81[3] = v82;
  }
  else
  {
    v81 = 0;
  }
  *((_QWORD *)&v166 + 1) = v81;
  v177 = 0;
  v211[0] = &unk_1EA99FAC8;
  v211[1] = MIL::Operators::Common::ios17::CustomValidators::ValidateReshape;
  v212 = v211;
  v210 = 0;
  MIL::IROperator::Make((__int128 *)v168, &v167, &v166, (uint64_t)v211, (uint64_t)v209, a3);
  v83 = v210;
  if (v210 == v209)
  {
    v84 = 4;
    v83 = v209;
  }
  else
  {
    if (!v210)
      goto LABEL_88;
    v84 = 5;
  }
  (*(void (**)(void))(*v83 + 8 * v84))();
LABEL_88:
  v85 = v212;
  if (v212 == v211)
  {
    v86 = 4;
    v85 = v211;
    goto LABEL_92;
  }
  if (v212)
  {
    v86 = 5;
LABEL_92:
    (*(void (**)(void))(*v85 + 8 * v86))();
  }
  v87 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
  if (*((_QWORD *)&v166 + 1))
  {
    v88 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v90 = (std::__shared_weak_count *)*((_QWORD *)&v167 + 1);
  if (*((_QWORD *)&v167 + 1))
  {
    v91 = (unint64_t *)(*((_QWORD *)&v167 + 1) + 8);
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  if (SHIBYTE(v169) < 0)
    operator delete(v168[0]);
  v93 = *a3;
  v207[0] = &off_1EA99FBD8;
  v207[1] = MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceReshape;
  v208 = v207;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v93 + 200))(v93, v207);
  v94 = v208;
  if (v208 == v207)
  {
    v95 = 4;
    v94 = v207;
  }
  else
  {
    if (!v208)
      goto LABEL_110;
    v95 = 5;
  }
  (*(void (**)(void))(*v94 + 8 * v95))();
LABEL_110:
  MIL::Validation::TensorDTypeConstraints::Make(&v213);
  v96 = v213;
  std::string::basic_string[abi:ne180100]<0>(v162, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v162, 0, (uint64_t *)&v202);
  v164 = v202;
  if (v202)
  {
    v97 = (std::__shared_weak_count *)operator new();
    v98 = (std::__shared_weak_count_vtbl *)v202;
    v97->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v97->__shared_owners_ = 0;
    v97->__shared_weak_owners_ = 0;
    v97[1].__vftable = v98;
  }
  else
  {
    v97 = 0;
  }
  v165 = v97;
  v202 = 0;
  std::string::basic_string[abi:ne180100]<0>(v160, "T");
  (*((void (**)(void **, void **, void **))*v96 + 3))(v96, &v164, v160);
  if (v161 < 0)
    operator delete(v160[0]);
  v99 = v165;
  if (v165)
  {
    p_shared_owners = (unint64_t *)&v165->__shared_owners_;
    do
      v101 = __ldaxr(p_shared_owners);
    while (__stlxr(v101 - 1, p_shared_owners));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v102 = v202;
  v202 = 0;
  if (v102)
    (*(void (**)(void *))(*(_QWORD *)v102 + 8))(v102);
  if (v163 < 0)
    operator delete(v162[0]);
  v103 = v213;
  std::string::basic_string[abi:ne180100]<0>(v156, "shape");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v156, 0, (uint64_t *)&v202);
  v158 = v202;
  if (v202)
  {
    v104 = (std::__shared_weak_count *)operator new();
    v105 = (std::__shared_weak_count_vtbl *)v202;
    v104->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v104->__shared_owners_ = 0;
    v104->__shared_weak_owners_ = 0;
    v104[1].__vftable = v105;
  }
  else
  {
    v104 = 0;
  }
  v159 = v104;
  v202 = 0;
  std::string::basic_string[abi:ne180100]<0>(v154, "SHAPE_T");
  (*((void (**)(void **, void **, void **))*v103 + 3))(v103, &v158, v154);
  if (v155 < 0)
    operator delete(v154[0]);
  v106 = v159;
  if (v159)
  {
    v107 = (unint64_t *)&v159->__shared_owners_;
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  v109 = v202;
  v202 = 0;
  if (v109)
    (*(void (**)(void *))(*(_QWORD *)v109 + 8))(v109);
  if (v157 < 0)
    operator delete(v156[0]);
  v110 = v213;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v202);
  v152 = v202;
  if (v202)
  {
    v111 = (std::__shared_weak_count *)operator new();
    v112 = (std::__shared_weak_count_vtbl *)v202;
    v111->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v111->__shared_owners_ = 0;
    v111->__shared_weak_owners_ = 0;
    v111[1].__vftable = v112;
  }
  else
  {
    v111 = 0;
  }
  v153 = v111;
  v202 = 0;
  std::string::basic_string[abi:ne180100]<0>(v150, "T");
  (*((void (**)(void **, void **, void **))*v110 + 3))(v110, &v152, v150);
  if (v151 < 0)
    operator delete(v150[0]);
  v113 = v153;
  if (v153)
  {
    v114 = (unint64_t *)&v153->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  v116 = v202;
  v202 = 0;
  if (v116)
    (*(void (**)(void *))(*(_QWORD *)v116 + 8))(v116);
  v117 = *a3;
  v148 = v213;
  if (v213)
  {
    v118 = (std::__shared_weak_count *)operator new();
    v119 = v213;
    v118->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v118->__shared_owners_ = 0;
    v118->__shared_weak_owners_ = 0;
    v118[1].__vftable = (std::__shared_weak_count_vtbl *)v119;
  }
  else
  {
    v118 = 0;
  }
  v149 = v118;
  v213 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v117 + 56))(v117, &v148);
  v120 = v149;
  if (v149)
  {
    v121 = (unint64_t *)&v149->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v123 = v213;
  v213 = 0;
  if (v123)
    (*((void (**)(void **))*v123 + 1))(v123);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v213);
  v124 = v213;
  std::string::basic_string[abi:ne180100]<0>(v144, "shape");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v144, 0, (uint64_t *)&v202);
  v146 = v202;
  if (v202)
  {
    v125 = (std::__shared_weak_count *)operator new();
    v126 = (std::__shared_weak_count_vtbl *)v202;
    v125->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v125->__shared_owners_ = 0;
    v125->__shared_weak_owners_ = 0;
    v125[1].__vftable = v126;
  }
  else
  {
    v125 = 0;
  }
  v147 = v125;
  v202 = 0;
  std::string::basic_string[abi:ne180100]<0>(v142, "K");
  (*((void (**)(void **, void **, _QWORD, void **))*v124 + 3))(v124, &v146, 0, v142);
  if (v143 < 0)
    operator delete(v142[0]);
  v127 = v147;
  if (v147)
  {
    v128 = (unint64_t *)&v147->__shared_owners_;
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  v130 = v202;
  v202 = 0;
  if (v130)
    (*(void (**)(void *))(*(_QWORD *)v130 + 8))(v130);
  if (v145 < 0)
    operator delete(v144[0]);
  v131 = *a3;
  v140 = v213;
  if (v213)
  {
    v132 = (std::__shared_weak_count *)operator new();
    v133 = v213;
    v132->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v132->__shared_owners_ = 0;
    v132->__shared_weak_owners_ = 0;
    v132[1].__vftable = (std::__shared_weak_count_vtbl *)v133;
  }
  else
  {
    v132 = 0;
  }
  v141 = v132;
  v213 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v131 + 56))(v131, &v140);
  v134 = v141;
  if (v141)
  {
    v135 = (unint64_t *)&v141->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  v137 = v213;
  v213 = 0;
  if (v137)
    (*((void (**)(void **))*v137 + 1))(v137);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v177, 0);
  result = (uint64_t)v201;
  if (v201)
  {
    v139 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v201);
    return MEMORY[0x1E0C023A0](v139, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0930E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58)
{
  uint64_t *v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;

  v61 = *(_QWORD *)(v59 - 136);
  *(_QWORD *)(v59 - 136) = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  v62 = *v58;
  *v58 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x258], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::ReshapeLike::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  unsigned __int8 *v44;
  void *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  unsigned __int8 *v50;
  void **v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  unsigned __int8 *v56;
  void **v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  _QWORD *v61;
  unsigned __int8 *v62;
  void **v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  char **v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t *v97;
  char *v98;
  char *v99;
  char *v100;
  __int128 v101;
  char *v102;
  char *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  char **v111;
  _QWORD *v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  void **v125;
  std::__shared_weak_count *v126;
  std::__shared_weak_count_vtbl *v127;
  std::__shared_weak_count *v128;
  unint64_t *p_shared_owners;
  unint64_t v130;
  char *v131;
  void **v132;
  std::__shared_weak_count *v133;
  std::__shared_weak_count_vtbl *v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  char *v138;
  void **v139;
  std::__shared_weak_count *v140;
  std::__shared_weak_count_vtbl *v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  char *v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  void **v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  void **v152;
  uint64_t result;
  uint64_t v154;
  void **v155;
  std::__shared_weak_count *v156;
  void *v157[2];
  char v158;
  char *v159;
  std::__shared_weak_count *v160;
  void *v161[2];
  char v162;
  void *v163[2];
  char v164;
  char *v165;
  std::__shared_weak_count *v166;
  void *v167[2];
  char v168;
  void *v169[2];
  char v170;
  char *v171;
  std::__shared_weak_count *v172;
  __int128 v173;
  __int128 v174;
  void *v175[2];
  uint64_t v176;
  void *v177;
  void *v178;
  _QWORD *v179;
  __n128 v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  char **v184;
  __n128 v185;
  __n128 v186;
  __n128 v187;
  __n128 v188;
  void *__p;
  void *v190;
  _QWORD *v191;
  void *v192;
  void *v193;
  _QWORD *v194;
  void *v195;
  void *v196;
  _QWORD *v197;
  void *v198;
  void *v199;
  _QWORD *v200;
  void *v201;
  void *v202;
  _QWORD *v203;
  void *v204;
  void *v205;
  _QWORD *v206;
  void *v207;
  void *v208;
  _QWORD *v209;
  __n128 v210;
  _QWORD *v211;
  _QWORD v212[3];
  _QWORD *v213;
  _BYTE v214[24];
  _BYTE *v215;
  _QWORD v216[3];
  _QWORD *v217;
  void **v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  char *Scalar;
  char *v227;
  char *v228;
  char *v229;
  char **v230;
  uint64_t v231;

  v231 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v211 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (char *)operator new(8uLL);
  Scalar = v8;
  *(_QWORD *)v8 = v7;
  v227 = v8 + 8;
  v228 = v8 + 8;
  v218 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v207 = v10;
  *v10 = v9;
  v209 = v10 + 1;
  v208 = v10 + 1;
  v219 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v207);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v204 = v12;
  *v12 = v11;
  v206 = v12 + 1;
  v205 = v12 + 1;
  v220 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v204);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  v201 = v14;
  *v14 = v13;
  v202 = v14 + 1;
  v203 = v14 + 1;
  v221 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v201);
  v15 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v16 = operator new(8uLL);
  v198 = v16;
  *v16 = v15;
  v199 = v16 + 1;
  v200 = v16 + 1;
  v222 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v198);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  v195 = v18;
  *v18 = v17;
  v196 = v18 + 1;
  v197 = v18 + 1;
  v223 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v195);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v192 = v20;
  *v20 = v19;
  v193 = v20 + 1;
  v194 = v20 + 1;
  v224 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v192);
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  __p = v22;
  *v22 = v21;
  v190 = v22 + 1;
  v191 = v22 + 1;
  v225 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v218, 8, &v210);
  MIL::IRParameter::Make(&v210, (uint64_t *)&v177);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v177);
  v23 = v177;
  v177 = 0;
  if (v23)
    (*(void (**)(void *))(*(_QWORD *)v23 + 8))(v23);
  v24 = (std::__shared_weak_count *)v210.n128_u64[1];
  if (v210.n128_u64[1])
  {
    v25 = (unint64_t *)(v210.n128_u64[1] + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (__p)
  {
    v190 = __p;
    operator delete(__p);
  }
  if (v192)
  {
    v193 = v192;
    operator delete(v192);
  }
  if (v195)
  {
    v196 = v195;
    operator delete(v195);
  }
  if (v198)
  {
    v199 = v198;
    operator delete(v198);
  }
  if (v201)
  {
    v202 = v201;
    operator delete(v201);
  }
  if (v204)
  {
    v205 = v204;
    operator delete(v204);
  }
  if (v207)
  {
    v208 = v207;
    operator delete(v207);
  }
  if (Scalar)
  {
    v227 = Scalar;
    operator delete(Scalar);
  }
  v27 = v211;
  v28 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v29 = (char *)operator new(8uLL);
  Scalar = v29;
  *(_QWORD *)v29 = v28;
  v227 = v29 + 8;
  v228 = v29 + 8;
  v218 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = operator new(8uLL);
  v207 = v31;
  *v31 = v30;
  v209 = v31 + 1;
  v208 = v31 + 1;
  v219 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v207);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(8uLL);
  v204 = v33;
  *v33 = v32;
  v206 = v33 + 1;
  v205 = v33 + 1;
  v220 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v204);
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = operator new(8uLL);
  v201 = v35;
  *v35 = v34;
  v202 = v35 + 1;
  v203 = v35 + 1;
  v221 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v201);
  v36 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v37 = operator new(8uLL);
  v198 = v37;
  *v37 = v36;
  v199 = v37 + 1;
  v200 = v37 + 1;
  v222 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v198);
  v38 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v39 = operator new(8uLL);
  v195 = v39;
  *v39 = v38;
  v196 = v39 + 1;
  v197 = v39 + 1;
  v223 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v195);
  v40 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v41 = operator new(8uLL);
  v192 = v41;
  *v41 = v40;
  v193 = v41 + 1;
  v194 = v41 + 1;
  v224 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v192);
  v42 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v43 = operator new(8uLL);
  __p = v43;
  *v43 = v42;
  v190 = v43 + 1;
  v191 = v43 + 1;
  v225 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v218, 8, &v188);
  MIL::IRParameter::Make(&v188, (uint64_t *)&v177);
  v44 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v27, "ref_tensors", (uint64_t *)&v177);
  v45 = v177;
  v177 = 0;
  if (v45)
    (*(void (**)(void *))(*(_QWORD *)v45 + 8))(v45);
  v46 = (std::__shared_weak_count *)v188.n128_u64[1];
  if (v188.n128_u64[1])
  {
    v47 = (unint64_t *)(v188.n128_u64[1] + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  if (__p)
  {
    v190 = __p;
    operator delete(__p);
  }
  if (v192)
  {
    v193 = v192;
    operator delete(v192);
  }
  if (v195)
  {
    v196 = v195;
    operator delete(v195);
  }
  if (v198)
  {
    v199 = v198;
    operator delete(v198);
  }
  if (v201)
  {
    v202 = v201;
    operator delete(v201);
  }
  if (v204)
  {
    v205 = v204;
    operator delete(v204);
  }
  if (v207)
  {
    v208 = v207;
    operator delete(v207);
  }
  if (Scalar)
  {
    v227 = Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v44 + 5) + 64))(*((_QWORD *)v44 + 5), 1);
  v49 = v211;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v187);
  MIL::IRParameter::Make(&v187, (uint64_t *)&v218);
  v50 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(v49, "begins", (uint64_t *)&v218);
  v51 = v218;
  v218 = 0;
  if (v51)
    (*((void (**)(void **))*v51 + 1))(v51);
  v52 = (std::__shared_weak_count *)v187.n128_u64[1];
  if (v187.n128_u64[1])
  {
    v53 = (unint64_t *)(v187.n128_u64[1] + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v50 + 5) + 32))(*((_QWORD *)v50 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v50 + 5) + 64))(*((_QWORD *)v50 + 5), 1);
  v55 = v211;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v186);
  MIL::IRParameter::Make(&v186, (uint64_t *)&v218);
  v56 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v55, "ends", (uint64_t *)&v218);
  v57 = v218;
  v218 = 0;
  if (v57)
    (*((void (**)(void **))*v57 + 1))(v57);
  v58 = (std::__shared_weak_count *)v186.n128_u64[1];
  if (v186.n128_u64[1])
  {
    v59 = (unint64_t *)(v186.n128_u64[1] + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v56 + 5) + 32))(*((_QWORD *)v56 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v56 + 5) + 64))(*((_QWORD *)v56 + 5), 1);
  v61 = v211;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v185);
  MIL::IRParameter::Make(&v185, (uint64_t *)&v218);
  v62 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v61, "end_masks", (uint64_t *)&v218);
  v63 = v218;
  v218 = 0;
  if (v63)
    (*((void (**)(void **))*v63 + 1))(v63);
  v64 = (std::__shared_weak_count *)v185.n128_u64[1];
  if (v185.n128_u64[1])
  {
    v65 = (unint64_t *)(v185.n128_u64[1] + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v62 + 5) + 32))(*((_QWORD *)v62 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v62 + 5) + 48))(*((_QWORD *)v62 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v62 + 5) + 64))(*((_QWORD *)v62 + 5), 1);
  v184 = 0;
  v67 = operator new();
  *(_QWORD *)v67 = 0;
  *(_QWORD *)(v67 + 8) = 0;
  *(_QWORD *)(v67 + 16) = 0;
  v218 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v184, (void **)v67);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v218, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v184, 1uLL);
  v68 = v184;
  v69 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v70 = operator new(8uLL);
  v207 = v70;
  *v70 = v69;
  v209 = v70 + 1;
  v208 = v70 + 1;
  v218 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v207);
  v71 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v72 = operator new(8uLL);
  v204 = v72;
  *v72 = v71;
  v206 = v72 + 1;
  v205 = v72 + 1;
  v219 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v204);
  v73 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v74 = operator new(8uLL);
  v201 = v74;
  *v74 = v73;
  v202 = v74 + 1;
  v203 = v74 + 1;
  v220 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v201);
  v75 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v76 = operator new(8uLL);
  v198 = v76;
  *v76 = v75;
  v199 = v76 + 1;
  v200 = v76 + 1;
  v221 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v198);
  v77 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v78 = operator new(8uLL);
  v195 = v78;
  *v78 = v77;
  v196 = v78 + 1;
  v197 = v78 + 1;
  v222 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v195);
  v79 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v80 = operator new(8uLL);
  v192 = v80;
  *v80 = v79;
  v193 = v80 + 1;
  v194 = v80 + 1;
  v223 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v192);
  v81 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v82 = operator new(8uLL);
  __p = v82;
  *v82 = v81;
  v190 = v82 + 1;
  v191 = v82 + 1;
  v224 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&__p);
  v83 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v84 = operator new(8uLL);
  v177 = v84;
  *v84 = v83;
  v178 = v84 + 1;
  v179 = v84 + 1;
  v225 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v177);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v218, 8, &v180);
  MIL::IRParameter::Make(&v180, &v181);
  v85 = v181;
  v182 = v181;
  if (v181)
  {
    v86 = (_QWORD *)operator new();
    v87 = v181;
    *v86 = &unk_1EA99F888;
    v86[1] = 0;
    v86[2] = 0;
    v86[3] = v87;
  }
  else
  {
    v86 = 0;
  }
  v183 = v86;
  v181 = 0;
  v88 = v68[2];
  v89 = v68[1];
  if (v89 >= v88)
  {
    v91 = (v89 - *v68) >> 4;
    v92 = v91 + 1;
    if ((unint64_t)(v91 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v93 = v88 - *v68;
    if (v93 >> 3 > v92)
      v92 = v93 >> 3;
    if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF0)
      v94 = 0xFFFFFFFFFFFFFFFLL;
    else
      v94 = v92;
    v230 = v68 + 2;
    v95 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v68 + 2), v94);
    v97 = (uint64_t *)&v95[16 * v91];
    *v97 = v85;
    v97[1] = (uint64_t)v86;
    v182 = 0;
    v183 = 0;
    v99 = *v68;
    v98 = v68[1];
    if (v98 == *v68)
    {
      v102 = v68[1];
      v100 = &v95[16 * v91];
    }
    else
    {
      v100 = &v95[16 * v91];
      do
      {
        v101 = *((_OWORD *)v98 - 1);
        v98 -= 16;
        *((_OWORD *)v100 - 1) = v101;
        v100 -= 16;
        *(_QWORD *)v98 = 0;
        *((_QWORD *)v98 + 1) = 0;
      }
      while (v98 != v99);
      v102 = *v68;
      v98 = v68[1];
    }
    v90 = (char *)(v97 + 2);
    *v68 = v100;
    Scalar = v102;
    v227 = v102;
    v68[1] = (char *)(v97 + 2);
    v228 = v98;
    v103 = v68[2];
    v68[2] = &v95[16 * v96];
    v229 = v103;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v89 = v85;
    *((_QWORD *)v89 + 1) = v86;
    v90 = v89 + 16;
    v182 = 0;
    v183 = 0;
  }
  v68[1] = v90;
  v104 = v181;
  v181 = 0;
  if (v104)
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  v105 = (std::__shared_weak_count *)v180.n128_u64[1];
  if (v180.n128_u64[1])
  {
    v106 = (unint64_t *)(v180.n128_u64[1] + 8);
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  if (v177)
  {
    v178 = v177;
    operator delete(v177);
  }
  if (__p)
  {
    v190 = __p;
    operator delete(__p);
  }
  if (v192)
  {
    v193 = v192;
    operator delete(v192);
  }
  if (v195)
  {
    v196 = v195;
    operator delete(v195);
  }
  if (v198)
  {
    v199 = v198;
    operator delete(v198);
  }
  if (v201)
  {
    v202 = v201;
    operator delete(v201);
  }
  if (v204)
  {
    v205 = v204;
    operator delete(v204);
  }
  if (v207)
  {
    v208 = v207;
    operator delete(v207);
  }
  *(_OWORD *)v175 = *(_OWORD *)a2;
  v176 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v108 = (uint64_t)v211;
  *(_QWORD *)&v174 = v211;
  if (v211)
  {
    v109 = (_QWORD *)operator new();
    *v109 = &unk_1EA99F8E8;
    v109[1] = 0;
    v109[2] = 0;
    v109[3] = v108;
  }
  else
  {
    v109 = 0;
  }
  *((_QWORD *)&v174 + 1) = v109;
  v211 = 0;
  *(_QWORD *)&v173 = v184;
  if (v184)
  {
    v110 = (_QWORD *)operator new();
    v111 = v184;
    *v110 = &unk_1EA99F948;
    v110[1] = 0;
    v110[2] = 0;
    v110[3] = v111;
  }
  else
  {
    v110 = 0;
  }
  *((_QWORD *)&v173 + 1) = v110;
  v184 = 0;
  v216[0] = &unk_1EA99FAC8;
  v216[1] = MIL::Operators::Common::ios17::CustomValidators::ValidateReshapeLike;
  v217 = v216;
  v215 = 0;
  MIL::IROperator::Make((__int128 *)v175, &v174, &v173, (uint64_t)v216, (uint64_t)v214, a3);
  v112 = v215;
  if (v215 == v214)
  {
    v113 = 4;
    v112 = v214;
  }
  else
  {
    if (!v215)
      goto LABEL_119;
    v113 = 5;
  }
  (*(void (**)(void))(*v112 + 8 * v113))();
LABEL_119:
  v114 = v217;
  if (v217 == v216)
  {
    v115 = 4;
    v114 = v216;
    goto LABEL_123;
  }
  if (v217)
  {
    v115 = 5;
LABEL_123:
    (*(void (**)(void))(*v114 + 8 * v115))();
  }
  v116 = (std::__shared_weak_count *)*((_QWORD *)&v173 + 1);
  if (*((_QWORD *)&v173 + 1))
  {
    v117 = (unint64_t *)(*((_QWORD *)&v173 + 1) + 8);
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = (std::__shared_weak_count *)*((_QWORD *)&v174 + 1);
  if (*((_QWORD *)&v174 + 1))
  {
    v120 = (unint64_t *)(*((_QWORD *)&v174 + 1) + 8);
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  if (SHIBYTE(v176) < 0)
    operator delete(v175[0]);
  v122 = *a3;
  v212[0] = &off_1EA99FBD8;
  v212[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceReshapeLike;
  v213 = v212;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v122 + 200))(v122, v212);
  v123 = v213;
  if (v213 == v212)
  {
    v124 = 4;
    v123 = v212;
  }
  else
  {
    if (!v213)
      goto LABEL_141;
    v124 = 5;
  }
  (*(void (**)(void))(*v123 + 8 * v124))();
LABEL_141:
  MIL::Validation::TensorDTypeConstraints::Make(&v218);
  v125 = v218;
  std::string::basic_string[abi:ne180100]<0>(v169, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v169, 0, (uint64_t *)&Scalar);
  v171 = Scalar;
  if (Scalar)
  {
    v126 = (std::__shared_weak_count *)operator new();
    v127 = (std::__shared_weak_count_vtbl *)Scalar;
    v126->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v126->__shared_owners_ = 0;
    v126->__shared_weak_owners_ = 0;
    v126[1].__vftable = v127;
  }
  else
  {
    v126 = 0;
  }
  v172 = v126;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v167, "T");
  (*((void (**)(void **, char **, void **))*v125 + 3))(v125, &v171, v167);
  if (v168 < 0)
    operator delete(v167[0]);
  v128 = v172;
  if (v172)
  {
    p_shared_owners = (unint64_t *)&v172->__shared_owners_;
    do
      v130 = __ldaxr(p_shared_owners);
    while (__stlxr(v130 - 1, p_shared_owners));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v131 = Scalar;
  Scalar = 0;
  if (v131)
    (*(void (**)(char *))(*(_QWORD *)v131 + 8))(v131);
  if (v170 < 0)
    operator delete(v169[0]);
  v132 = v218;
  std::string::basic_string[abi:ne180100]<0>(v163, "ref_tensors");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v163, 0, (uint64_t *)&Scalar);
  v165 = Scalar;
  if (Scalar)
  {
    v133 = (std::__shared_weak_count *)operator new();
    v134 = (std::__shared_weak_count_vtbl *)Scalar;
    v133->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v133->__shared_owners_ = 0;
    v133->__shared_weak_owners_ = 0;
    v133[1].__vftable = v134;
  }
  else
  {
    v133 = 0;
  }
  v166 = v133;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v161, "R");
  (*((void (**)(void **, char **, void **))*v132 + 3))(v132, &v165, v161);
  if (v162 < 0)
    operator delete(v161[0]);
  v135 = v166;
  if (v166)
  {
    v136 = (unint64_t *)&v166->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = Scalar;
  Scalar = 0;
  if (v138)
    (*(void (**)(char *))(*(_QWORD *)v138 + 8))(v138);
  if (v164 < 0)
    operator delete(v163[0]);
  v139 = v218;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v159 = Scalar;
  if (Scalar)
  {
    v140 = (std::__shared_weak_count *)operator new();
    v141 = (std::__shared_weak_count_vtbl *)Scalar;
    v140->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v140->__shared_owners_ = 0;
    v140->__shared_weak_owners_ = 0;
    v140[1].__vftable = v141;
  }
  else
  {
    v140 = 0;
  }
  v160 = v140;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v157, "T");
  (*((void (**)(void **, char **, void **))*v139 + 3))(v139, &v159, v157);
  if (v158 < 0)
    operator delete(v157[0]);
  v142 = v160;
  if (v160)
  {
    v143 = (unint64_t *)&v160->__shared_owners_;
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  v145 = Scalar;
  Scalar = 0;
  if (v145)
    (*(void (**)(char *))(*(_QWORD *)v145 + 8))(v145);
  v146 = *a3;
  v155 = v218;
  if (v218)
  {
    v147 = (std::__shared_weak_count *)operator new();
    v148 = v218;
    v147->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v147->__shared_owners_ = 0;
    v147->__shared_weak_owners_ = 0;
    v147[1].__vftable = (std::__shared_weak_count_vtbl *)v148;
  }
  else
  {
    v147 = 0;
  }
  v156 = v147;
  v218 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v146 + 56))(v146, &v155);
  v149 = v156;
  if (v156)
  {
    v150 = (unint64_t *)&v156->__shared_owners_;
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  v152 = v218;
  v218 = 0;
  if (v152)
    (*((void (**)(void **))*v152 + 1))(v152);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v184, 0);
  result = (uint64_t)v211;
  if (v211)
  {
    v154 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v211);
    return MEMORY[0x1E0C023A0](v154, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09326A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void **a48)
{
  uint64_t *v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;

  v51 = *(_QWORD *)(v49 - 176);
  *(_QWORD *)(v49 - 176) = 0;
  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  v52 = *v48;
  *v48 = 0;
  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x238], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::Reverse::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  void **v37;
  unsigned __int8 *v38;
  void *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  char **v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t *v81;
  char *v82;
  char *v83;
  char *v84;
  __int128 v85;
  char *v86;
  char *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  char **v95;
  _QWORD *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t v109;
  void **v110;
  std::__shared_weak_count *v111;
  std::__shared_weak_count_vtbl *v112;
  std::__shared_weak_count *v113;
  unint64_t *p_shared_owners;
  unint64_t v115;
  void *v116;
  void **v117;
  std::__shared_weak_count *v118;
  std::__shared_weak_count_vtbl *v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  void *v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  void **v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  void **v130;
  void **v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  void *v137;
  void **v138;
  std::__shared_weak_count *v139;
  std::__shared_weak_count_vtbl *v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  void *v144;
  void **v145;
  std::__shared_weak_count *v146;
  std::__shared_weak_count_vtbl *v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  void *v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  void **v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  void **v158;
  uint64_t result;
  uint64_t v160;
  void **v161;
  std::__shared_weak_count *v162;
  void *v163[2];
  char v164;
  void *v165;
  std::__shared_weak_count *v166;
  void *v167[2];
  char v168;
  void *v169[2];
  char v170;
  void *v171;
  std::__shared_weak_count *v172;
  void *v173[2];
  char v174;
  void *v175[2];
  char v176;
  void *v177;
  std::__shared_weak_count *v178;
  void **v179;
  std::__shared_weak_count *v180;
  void *v181[2];
  char v182;
  void *v183;
  std::__shared_weak_count *v184;
  void *v185[2];
  char v186;
  void *v187[2];
  char v188;
  void *v189;
  std::__shared_weak_count *v190;
  __int128 v191;
  __int128 v192;
  void *v193[2];
  uint64_t v194;
  void *v195;
  void *v196;
  _QWORD *v197;
  __n128 v198;
  uint64_t v199;
  uint64_t v200;
  _QWORD *v201;
  char **v202;
  __n128 v203;
  void *__p;
  void *v205;
  _QWORD *v206;
  void *v207;
  void *v208;
  _QWORD *v209;
  void *v210;
  void *v211;
  _QWORD *v212;
  void *v213;
  void *v214;
  _QWORD *v215;
  void *v216;
  void *v217;
  _QWORD *v218;
  void *v219;
  void *v220;
  _QWORD *v221;
  __n128 v222;
  _QWORD *v223;
  void *v224;
  void *v225;
  char *v226;
  char *v227;
  char **v228;
  _BYTE v229[24];
  _BYTE *v230;
  _BYTE v231[24];
  _BYTE *v232;
  _QWORD v233[3];
  _QWORD *v234;
  void *v235;
  void *v236;
  _QWORD *v237;
  void **v238;
  void **v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;

  v246 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v223 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (char *)operator new(0x10uLL);
  v226 = v9 + 16;
  *(_QWORD *)v9 = v7;
  *((_QWORD *)v9 + 1) = v8;
  v224 = v9;
  v225 = v9 + 16;
  v238 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v224);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v236 = v12 + 2;
  v237 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v235 = v12;
  v239 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v235);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v221 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  v219 = v15;
  v220 = v15 + 2;
  v240 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v219);
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(0x10uLL);
  v218 = v18 + 2;
  *v18 = v16;
  v18[1] = v17;
  v216 = v18;
  v217 = v18 + 2;
  v241 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v216);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(0x10uLL);
  v215 = v21 + 2;
  *v21 = v19;
  v21[1] = v20;
  v213 = v21;
  v214 = v21 + 2;
  v242 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v213);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(0x10uLL);
  v211 = v24 + 2;
  v212 = v24 + 2;
  *v24 = v22;
  v24[1] = v23;
  v210 = v24;
  v243 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v210);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(0x10uLL);
  v208 = v27 + 2;
  v209 = v27 + 2;
  *v27 = v25;
  v27[1] = v26;
  v207 = v27;
  v244 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v207);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = operator new(0x10uLL);
  v205 = v30 + 2;
  v206 = v30 + 2;
  *v30 = v28;
  v30[1] = v29;
  __p = v30;
  v245 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v238, 8, &v222);
  MIL::IRParameter::Make(&v222, (uint64_t *)&v195);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v195);
  v31 = v195;
  v195 = 0;
  if (v31)
    (*(void (**)(void *))(*(_QWORD *)v31 + 8))(v31);
  v32 = (std::__shared_weak_count *)v222.n128_u64[1];
  if (v222.n128_u64[1])
  {
    v33 = (unint64_t *)(v222.n128_u64[1] + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (__p)
  {
    v205 = __p;
    operator delete(__p);
  }
  if (v207)
  {
    v208 = v207;
    operator delete(v207);
  }
  if (v210)
  {
    v211 = v210;
    operator delete(v210);
  }
  if (v213)
  {
    v214 = v213;
    operator delete(v213);
  }
  if (v216)
  {
    v217 = v216;
    operator delete(v216);
  }
  if (v219)
  {
    v220 = v219;
    operator delete(v219);
  }
  if (v235)
  {
    v236 = v235;
    operator delete(v235);
  }
  if (v224)
  {
    v225 = v224;
    operator delete(v224);
  }
  v35 = v223;
  v36 = MIL::IRUnknownDimension::Make(a1, 0);
  v37 = (void **)operator new(8uLL);
  v238 = v37;
  *v37 = (void *)v36;
  v239 = v37 + 1;
  v240 = (uint64_t)(v37 + 1);
  v235 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v238);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v235, 1, &v203);
  MIL::IRParameter::Make(&v203, (uint64_t *)&v224);
  v38 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v35, "axes", (uint64_t *)&v224);
  v39 = v224;
  v224 = 0;
  if (v39)
    (*(void (**)(void *))(*(_QWORD *)v39 + 8))(v39);
  v40 = (std::__shared_weak_count *)v203.n128_u64[1];
  if (v203.n128_u64[1])
  {
    v41 = (unint64_t *)(v203.n128_u64[1] + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  if (v238)
  {
    v239 = v238;
    operator delete(v238);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v38 + 5) + 32))(*((_QWORD *)v38 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v38 + 5) + 48))(*((_QWORD *)v38 + 5), 1);
  v202 = 0;
  v43 = operator new();
  *(_QWORD *)v43 = 0;
  *(_QWORD *)(v43 + 8) = 0;
  *(_QWORD *)(v43 + 16) = 0;
  v238 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v202, (void **)v43);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v238, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v202, 1uLL);
  v44 = v202;
  v45 = MIL::IRUnknownDimension::Make(a1, 0);
  v46 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v47 = operator new(0x10uLL);
  v236 = v47 + 2;
  v237 = v47 + 2;
  *v47 = v45;
  v47[1] = v46;
  v235 = v47;
  v238 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v235);
  v48 = MIL::IRUnknownDimension::Make(a1, 0);
  v49 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v50 = operator new(0x10uLL);
  v221 = v50 + 2;
  *v50 = v48;
  v50[1] = v49;
  v219 = v50;
  v220 = v50 + 2;
  v239 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v219);
  v51 = MIL::IRUnknownDimension::Make(a1, 0);
  v52 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v53 = operator new(0x10uLL);
  v218 = v53 + 2;
  *v53 = v51;
  v53[1] = v52;
  v216 = v53;
  v217 = v53 + 2;
  v240 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v216);
  v54 = MIL::IRUnknownDimension::Make(a1, 0);
  v55 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v56 = operator new(0x10uLL);
  v215 = v56 + 2;
  *v56 = v54;
  v56[1] = v55;
  v213 = v56;
  v214 = v56 + 2;
  v241 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v213);
  v57 = MIL::IRUnknownDimension::Make(a1, 0);
  v58 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v59 = operator new(0x10uLL);
  v211 = v59 + 2;
  v212 = v59 + 2;
  *v59 = v57;
  v59[1] = v58;
  v210 = v59;
  v242 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v210);
  v60 = MIL::IRUnknownDimension::Make(a1, 0);
  v61 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v62 = operator new(0x10uLL);
  v208 = v62 + 2;
  v209 = v62 + 2;
  *v62 = v60;
  v62[1] = v61;
  v207 = v62;
  v243 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v207);
  v63 = MIL::IRUnknownDimension::Make(a1, 0);
  v64 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v65 = operator new(0x10uLL);
  v205 = v65 + 2;
  v206 = v65 + 2;
  *v65 = v63;
  v65[1] = v64;
  __p = v65;
  v244 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&__p);
  v66 = MIL::IRUnknownDimension::Make(a1, 0);
  v67 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v68 = operator new(0x10uLL);
  v196 = v68 + 2;
  v197 = v68 + 2;
  *v68 = v66;
  v68[1] = v67;
  v195 = v68;
  v245 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v195);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v238, 8, &v198);
  MIL::IRParameter::Make(&v198, &v199);
  v69 = v199;
  v200 = v199;
  if (v199)
  {
    v70 = (_QWORD *)operator new();
    v71 = v199;
    *v70 = &unk_1EA99F888;
    v70[1] = 0;
    v70[2] = 0;
    v70[3] = v71;
  }
  else
  {
    v70 = 0;
  }
  v201 = v70;
  v199 = 0;
  v72 = v44[2];
  v73 = v44[1];
  if (v73 >= v72)
  {
    v75 = (v73 - *v44) >> 4;
    v76 = v75 + 1;
    if ((unint64_t)(v75 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v77 = v72 - *v44;
    if (v77 >> 3 > v76)
      v76 = v77 >> 3;
    if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF0)
      v78 = 0xFFFFFFFFFFFFFFFLL;
    else
      v78 = v76;
    v228 = v44 + 2;
    v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v44 + 2), v78);
    v81 = (uint64_t *)&v79[16 * v75];
    *v81 = v69;
    v81[1] = (uint64_t)v70;
    v200 = 0;
    v201 = 0;
    v83 = *v44;
    v82 = v44[1];
    if (v82 == *v44)
    {
      v86 = v44[1];
      v84 = &v79[16 * v75];
    }
    else
    {
      v84 = &v79[16 * v75];
      do
      {
        v85 = *((_OWORD *)v82 - 1);
        v82 -= 16;
        *((_OWORD *)v84 - 1) = v85;
        v84 -= 16;
        *(_QWORD *)v82 = 0;
        *((_QWORD *)v82 + 1) = 0;
      }
      while (v82 != v83);
      v86 = *v44;
      v82 = v44[1];
    }
    v74 = (char *)(v81 + 2);
    *v44 = v84;
    v225 = v86;
    v44[1] = (char *)(v81 + 2);
    v226 = v82;
    v87 = v44[2];
    v44[2] = &v79[16 * v80];
    v227 = v87;
    v224 = v86;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v224);
  }
  else
  {
    *(_QWORD *)v73 = v69;
    *((_QWORD *)v73 + 1) = v70;
    v74 = v73 + 16;
    v200 = 0;
    v201 = 0;
  }
  v44[1] = v74;
  v88 = v199;
  v199 = 0;
  if (v88)
    (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
  v89 = (std::__shared_weak_count *)v198.n128_u64[1];
  if (v198.n128_u64[1])
  {
    v90 = (unint64_t *)(v198.n128_u64[1] + 8);
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  if (v195)
  {
    v196 = v195;
    operator delete(v195);
  }
  if (__p)
  {
    v205 = __p;
    operator delete(__p);
  }
  if (v207)
  {
    v208 = v207;
    operator delete(v207);
  }
  if (v210)
  {
    v211 = v210;
    operator delete(v210);
  }
  if (v213)
  {
    v214 = v213;
    operator delete(v213);
  }
  if (v216)
  {
    v217 = v216;
    operator delete(v216);
  }
  if (v219)
  {
    v220 = v219;
    operator delete(v219);
  }
  if (v235)
  {
    v236 = v235;
    operator delete(v235);
  }
  *(_OWORD *)v193 = *(_OWORD *)a2;
  v194 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v92 = (uint64_t)v223;
  *(_QWORD *)&v192 = v223;
  if (v223)
  {
    v93 = (_QWORD *)operator new();
    *v93 = &unk_1EA99F8E8;
    v93[1] = 0;
    v93[2] = 0;
    v93[3] = v92;
  }
  else
  {
    v93 = 0;
  }
  *((_QWORD *)&v192 + 1) = v93;
  v223 = 0;
  *(_QWORD *)&v191 = v202;
  if (v202)
  {
    v94 = (_QWORD *)operator new();
    v95 = v202;
    *v94 = &unk_1EA99F948;
    v94[1] = 0;
    v94[2] = 0;
    v94[3] = v95;
  }
  else
  {
    v94 = 0;
  }
  *((_QWORD *)&v191 + 1) = v94;
  v202 = 0;
  v233[0] = &unk_1EA99FAC8;
  v233[1] = MIL::Operators::Common::ios17::CustomValidators::ValidateReverse;
  v234 = v233;
  v232 = 0;
  MIL::IROperator::Make((__int128 *)v193, &v192, &v191, (uint64_t)v233, (uint64_t)v231, a3);
  v96 = v232;
  if (v232 == v231)
  {
    v97 = 4;
    v96 = v231;
  }
  else
  {
    if (!v232)
      goto LABEL_84;
    v97 = 5;
  }
  (*(void (**)(void))(*v96 + 8 * v97))();
LABEL_84:
  v98 = v234;
  if (v234 == v233)
  {
    v99 = 4;
    v98 = v233;
    goto LABEL_88;
  }
  if (v234)
  {
    v99 = 5;
LABEL_88:
    (*(void (**)(void))(*v98 + 8 * v99))();
  }
  v100 = (std::__shared_weak_count *)*((_QWORD *)&v191 + 1);
  if (*((_QWORD *)&v191 + 1))
  {
    v101 = (unint64_t *)(*((_QWORD *)&v191 + 1) + 8);
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = (std::__shared_weak_count *)*((_QWORD *)&v192 + 1);
  if (*((_QWORD *)&v192 + 1))
  {
    v104 = (unint64_t *)(*((_QWORD *)&v192 + 1) + 8);
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  if (SHIBYTE(v194) < 0)
    operator delete(v193[0]);
  v106 = *a3;
  v107 = std::string::basic_string[abi:ne180100]<0>(&v238, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)v107, (uint64_t)v229);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v106 + 200))(v106, v229);
  v108 = v230;
  if (v230 == v229)
  {
    v109 = 4;
    v108 = v229;
  }
  else
  {
    if (!v230)
      goto LABEL_106;
    v109 = 5;
  }
  (*(void (**)(void))(*v108 + 8 * v109))();
LABEL_106:
  if (SHIBYTE(v240) < 0)
    operator delete(v238);
  MIL::Validation::TensorDTypeConstraints::Make(&v238);
  v110 = v238;
  std::string::basic_string[abi:ne180100]<0>(v187, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v187, 0, (uint64_t *)&v224);
  v189 = v224;
  if (v224)
  {
    v111 = (std::__shared_weak_count *)operator new();
    v112 = (std::__shared_weak_count_vtbl *)v224;
    v111->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v111->__shared_owners_ = 0;
    v111->__shared_weak_owners_ = 0;
    v111[1].__vftable = v112;
  }
  else
  {
    v111 = 0;
  }
  v190 = v111;
  v224 = 0;
  std::string::basic_string[abi:ne180100]<0>(v185, "T");
  (*((void (**)(void **, void **, void **))*v110 + 3))(v110, &v189, v185);
  if (v186 < 0)
    operator delete(v185[0]);
  v113 = v190;
  if (v190)
  {
    p_shared_owners = (unint64_t *)&v190->__shared_owners_;
    do
      v115 = __ldaxr(p_shared_owners);
    while (__stlxr(v115 - 1, p_shared_owners));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  v116 = v224;
  v224 = 0;
  if (v116)
    (*(void (**)(void *))(*(_QWORD *)v116 + 8))(v116);
  if (v188 < 0)
    operator delete(v187[0]);
  v117 = v238;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v224);
  v183 = v224;
  if (v224)
  {
    v118 = (std::__shared_weak_count *)operator new();
    v119 = (std::__shared_weak_count_vtbl *)v224;
    v118->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v118->__shared_owners_ = 0;
    v118->__shared_weak_owners_ = 0;
    v118[1].__vftable = v119;
  }
  else
  {
    v118 = 0;
  }
  v184 = v118;
  v224 = 0;
  std::string::basic_string[abi:ne180100]<0>(v181, "T");
  (*((void (**)(void **, void **, void **))*v117 + 3))(v117, &v183, v181);
  if (v182 < 0)
    operator delete(v181[0]);
  v120 = v184;
  if (v184)
  {
    v121 = (unint64_t *)&v184->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v123 = v224;
  v224 = 0;
  if (v123)
    (*(void (**)(void *))(*(_QWORD *)v123 + 8))(v123);
  v124 = *a3;
  v179 = v238;
  if (v238)
  {
    v125 = (std::__shared_weak_count *)operator new();
    v126 = v238;
    v125->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v125->__shared_owners_ = 0;
    v125->__shared_weak_owners_ = 0;
    v125[1].__vftable = (std::__shared_weak_count_vtbl *)v126;
  }
  else
  {
    v125 = 0;
  }
  v180 = v125;
  v238 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v124 + 56))(v124, &v179);
  v127 = v180;
  if (v180)
  {
    v128 = (unint64_t *)&v180->__shared_owners_;
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  v130 = v238;
  v238 = 0;
  if (v130)
    (*((void (**)(void **))*v130 + 1))(v130);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v238);
  v131 = v238;
  std::string::basic_string[abi:ne180100]<0>(v175, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v175, 0, (uint64_t *)&v224);
  v177 = v224;
  if (v224)
  {
    v132 = (std::__shared_weak_count *)operator new();
    v133 = (std::__shared_weak_count_vtbl *)v224;
    v132->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v132->__shared_owners_ = 0;
    v132->__shared_weak_owners_ = 0;
    v132[1].__vftable = v133;
  }
  else
  {
    v132 = 0;
  }
  v178 = v132;
  v224 = 0;
  std::string::basic_string[abi:ne180100]<0>(v173, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v131 + 3))(v131, &v177, 0, v173);
  if (v174 < 0)
    operator delete(v173[0]);
  v134 = v178;
  if (v178)
  {
    v135 = (unint64_t *)&v178->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  v137 = v224;
  v224 = 0;
  if (v137)
    (*(void (**)(void *))(*(_QWORD *)v137 + 8))(v137);
  if (v176 < 0)
    operator delete(v175[0]);
  v138 = v238;
  std::string::basic_string[abi:ne180100]<0>(v169, "axes");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v169, 1, (uint64_t *)&v224);
  v171 = v224;
  if (v224)
  {
    v139 = (std::__shared_weak_count *)operator new();
    v140 = (std::__shared_weak_count_vtbl *)v224;
    v139->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v139->__shared_owners_ = 0;
    v139->__shared_weak_owners_ = 0;
    v139[1].__vftable = v140;
  }
  else
  {
    v139 = 0;
  }
  v172 = v139;
  v224 = 0;
  std::string::basic_string[abi:ne180100]<0>(v167, "K");
  (*((void (**)(void **, void **, _QWORD, void **))*v138 + 3))(v138, &v171, 0, v167);
  if (v168 < 0)
    operator delete(v167[0]);
  v141 = v172;
  if (v172)
  {
    v142 = (unint64_t *)&v172->__shared_owners_;
    do
      v143 = __ldaxr(v142);
    while (__stlxr(v143 - 1, v142));
    if (!v143)
    {
      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
      std::__shared_weak_count::__release_weak(v141);
    }
  }
  v144 = v224;
  v224 = 0;
  if (v144)
    (*(void (**)(void *))(*(_QWORD *)v144 + 8))(v144);
  if (v170 < 0)
    operator delete(v169[0]);
  v145 = v238;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v224);
  v165 = v224;
  if (v224)
  {
    v146 = (std::__shared_weak_count *)operator new();
    v147 = (std::__shared_weak_count_vtbl *)v224;
    v146->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v146->__shared_owners_ = 0;
    v146->__shared_weak_owners_ = 0;
    v146[1].__vftable = v147;
  }
  else
  {
    v146 = 0;
  }
  v166 = v146;
  v224 = 0;
  std::string::basic_string[abi:ne180100]<0>(v163, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v145 + 3))(v145, &v165, 0, v163);
  if (v164 < 0)
    operator delete(v163[0]);
  v148 = v166;
  if (v166)
  {
    v149 = (unint64_t *)&v166->__shared_owners_;
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
    }
  }
  v151 = v224;
  v224 = 0;
  if (v151)
    (*(void (**)(void *))(*(_QWORD *)v151 + 8))(v151);
  v152 = *a3;
  v161 = v238;
  if (v238)
  {
    v153 = (std::__shared_weak_count *)operator new();
    v154 = v238;
    v153->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v153->__shared_owners_ = 0;
    v153->__shared_weak_owners_ = 0;
    v153[1].__vftable = (std::__shared_weak_count_vtbl *)v154;
  }
  else
  {
    v153 = 0;
  }
  v162 = v153;
  v238 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v152 + 56))(v152, &v161);
  v155 = v162;
  if (v162)
  {
    v156 = (unint64_t *)&v162->__shared_owners_;
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
  v158 = v238;
  v238 = 0;
  if (v158)
    (*((void (**)(void **))*v158 + 1))(v158);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v202, 0);
  result = (uint64_t)v223;
  if (v223)
  {
    v160 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v223);
    return MEMORY[0x1E0C023A0](v160, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0933F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void **a62)
{
  uint64_t *v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;

  v65 = *(_QWORD *)(v63 - 136);
  *(_QWORD *)(v63 - 136) = 0;
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  v66 = *v62;
  *v62 = 0;
  if (v66)
    (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a62, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x260], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::ReverseSequence::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  void *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  unsigned __int8 *v47;
  void **v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _QWORD *v52;
  unsigned __int8 *v53;
  void **v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  char **v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t *v96;
  char *v97;
  char *v98;
  char *v99;
  __int128 v100;
  char *v101;
  char *v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  char **v110;
  _QWORD *v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  uint64_t v124;
  void **v125;
  std::__shared_weak_count *v126;
  std::__shared_weak_count_vtbl *v127;
  std::__shared_weak_count *v128;
  unint64_t *p_shared_owners;
  unint64_t v130;
  char *v131;
  void **v132;
  std::__shared_weak_count *v133;
  std::__shared_weak_count_vtbl *v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  char *v138;
  void **v139;
  std::__shared_weak_count *v140;
  std::__shared_weak_count_vtbl *v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  char *v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  void **v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  void **v152;
  void **v153;
  std::__shared_weak_count *v154;
  std::__shared_weak_count_vtbl *v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  char *v159;
  void **v160;
  std::__shared_weak_count *v161;
  std::__shared_weak_count_vtbl *v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  char *v166;
  void **v167;
  std::__shared_weak_count *v168;
  std::__shared_weak_count_vtbl *v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  char *v173;
  uint64_t v174;
  std::__shared_weak_count *v175;
  void **v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  void **v180;
  uint64_t result;
  uint64_t v182;
  void **v183;
  std::__shared_weak_count *v184;
  void *v185[2];
  char v186;
  char *v187;
  std::__shared_weak_count *v188;
  void *v189[2];
  char v190;
  void *v191[2];
  char v192;
  char *v193;
  std::__shared_weak_count *v194;
  void *v195[2];
  char v196;
  void *v197[2];
  char v198;
  char *v199;
  std::__shared_weak_count *v200;
  void **v201;
  std::__shared_weak_count *v202;
  void *v203[2];
  char v204;
  char *v205;
  std::__shared_weak_count *v206;
  void *v207[2];
  char v208;
  void *v209[2];
  char v210;
  char *v211;
  std::__shared_weak_count *v212;
  void *v213[2];
  char v214;
  void *v215[2];
  char v216;
  char *v217;
  std::__shared_weak_count *v218;
  __int128 v219;
  __int128 v220;
  void *v221[2];
  uint64_t v222;
  void *v223;
  void *v224;
  _QWORD *v225;
  __n128 v226;
  uint64_t v227;
  uint64_t v228;
  _QWORD *v229;
  char **v230;
  __n128 v231;
  __n128 v232;
  __n128 v233;
  void *__p;
  void *v235;
  _QWORD *v236;
  void *v237;
  void *v238;
  _QWORD *v239;
  void *v240;
  void *v241;
  _QWORD *v242;
  void *v243;
  void *v244;
  _QWORD *v245;
  void *v246;
  void *v247;
  _QWORD *v248;
  void *v249;
  void *v250;
  _QWORD *v251;
  void *v252;
  void *v253;
  _QWORD *v254;
  __n128 v255;
  _QWORD *v256;
  _BYTE v257[24];
  _BYTE *v258;
  _BYTE v259[24];
  _BYTE *v260;
  _BYTE v261[24];
  _BYTE *v262;
  void **v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  char *Scalar;
  char *v272;
  char *v273;
  char *v274;
  char **v275;
  uint64_t v276;

  v276 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v256 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (char *)operator new(0x10uLL);
  v272 = v9 + 16;
  v273 = v9 + 16;
  *(_QWORD *)v9 = v7;
  *((_QWORD *)v9 + 1) = v8;
  Scalar = v9;
  v263 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v254 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v252 = v12;
  v253 = v12 + 2;
  v264 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v252);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v251 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  v249 = v15;
  v250 = v15 + 2;
  v265 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v249);
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(0x10uLL);
  v248 = v18 + 2;
  *v18 = v16;
  v18[1] = v17;
  v246 = v18;
  v247 = v18 + 2;
  v266 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v246);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(0x10uLL);
  v245 = v21 + 2;
  *v21 = v19;
  v21[1] = v20;
  v243 = v21;
  v244 = v21 + 2;
  v267 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v243);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(0x10uLL);
  v242 = v24 + 2;
  *v24 = v22;
  v24[1] = v23;
  v240 = v24;
  v241 = v24 + 2;
  v268 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v240);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(0x10uLL);
  v239 = v27 + 2;
  *v27 = v25;
  v27[1] = v26;
  v237 = v27;
  v238 = v27 + 2;
  v269 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v237);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = operator new(0x10uLL);
  v236 = v30 + 2;
  *v30 = v28;
  v30[1] = v29;
  __p = v30;
  v235 = v30 + 2;
  v270 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v263, 8, &v255);
  MIL::IRParameter::Make(&v255, (uint64_t *)&v223);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v223);
  v31 = v223;
  v223 = 0;
  if (v31)
    (*(void (**)(void *))(*(_QWORD *)v31 + 8))(v31);
  v32 = (std::__shared_weak_count *)v255.n128_u64[1];
  if (v255.n128_u64[1])
  {
    v33 = (unint64_t *)(v255.n128_u64[1] + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (__p)
  {
    v235 = __p;
    operator delete(__p);
  }
  if (v237)
  {
    v238 = v237;
    operator delete(v237);
  }
  if (v240)
  {
    v241 = v240;
    operator delete(v240);
  }
  if (v243)
  {
    v244 = v243;
    operator delete(v243);
  }
  if (v246)
  {
    v247 = v246;
    operator delete(v246);
  }
  if (v249)
  {
    v250 = v249;
    operator delete(v249);
  }
  if (v252)
  {
    v253 = v252;
    operator delete(v252);
  }
  if (Scalar)
  {
    v272 = Scalar;
    operator delete(Scalar);
  }
  v35 = v256;
  v36 = MIL::IRUnknownDimension::Make(a1, 0);
  v37 = (char *)operator new(8uLL);
  Scalar = v37;
  *(_QWORD *)v37 = v36;
  v272 = v37 + 8;
  v273 = v37 + 8;
  v263 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&Scalar);
  v38 = MIL::IRUnknownDimension::Make(a1, 0);
  v39 = operator new(8uLL);
  v252 = v39;
  *v39 = v38;
  v254 = v39 + 1;
  v253 = v39 + 1;
  v264 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v252);
  v40 = MIL::IRUnknownDimension::Make(a1, 0);
  v41 = operator new(8uLL);
  v249 = v41;
  *v41 = v40;
  v251 = v41 + 1;
  v250 = v41 + 1;
  v265 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v249);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v263, 3, &v233);
  MIL::IRParameter::Make(&v233, (uint64_t *)&v246);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v35, "lengths", (uint64_t *)&v246);
  v42 = v246;
  v246 = 0;
  if (v42)
    (*(void (**)(void *))(*(_QWORD *)v42 + 8))(v42);
  v43 = (std::__shared_weak_count *)v233.n128_u64[1];
  if (v233.n128_u64[1])
  {
    v44 = (unint64_t *)(v233.n128_u64[1] + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  if (v249)
  {
    v250 = v249;
    operator delete(v249);
  }
  if (v252)
  {
    v253 = v252;
    operator delete(v252);
  }
  if (Scalar)
  {
    v272 = Scalar;
    operator delete(Scalar);
  }
  v46 = v256;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v232);
  MIL::IRParameter::Make(&v232, (uint64_t *)&v263);
  v47 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v46, "seq_axis", (uint64_t *)&v263);
  v48 = v263;
  v263 = 0;
  if (v48)
    (*((void (**)(void **))*v48 + 1))(v48);
  v49 = (std::__shared_weak_count *)v232.n128_u64[1];
  if (v232.n128_u64[1])
  {
    v50 = (unint64_t *)(v232.n128_u64[1] + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v47 + 5) + 32))(*((_QWORD *)v47 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v47 + 5) + 48))(*((_QWORD *)v47 + 5), 1);
  v52 = v256;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v231);
  MIL::IRParameter::Make(&v231, (uint64_t *)&v263);
  v53 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v52, "batch_axis", (uint64_t *)&v263);
  v54 = v263;
  v263 = 0;
  if (v54)
    (*((void (**)(void **))*v54 + 1))(v54);
  v55 = (std::__shared_weak_count *)v231.n128_u64[1];
  if (v231.n128_u64[1])
  {
    v56 = (unint64_t *)(v231.n128_u64[1] + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v53 + 5) + 32))(*((_QWORD *)v53 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v53 + 5) + 48))(*((_QWORD *)v53 + 5), 1);
  v230 = 0;
  v58 = operator new();
  *(_QWORD *)v58 = 0;
  *(_QWORD *)(v58 + 8) = 0;
  *(_QWORD *)(v58 + 16) = 0;
  v263 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v230, (void **)v58);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v263, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v230, 1uLL);
  v59 = v230;
  v60 = MIL::IRUnknownDimension::Make(a1, 0);
  v61 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v62 = operator new(0x10uLL);
  v254 = v62 + 2;
  *v62 = v60;
  v62[1] = v61;
  v252 = v62;
  v253 = v62 + 2;
  v263 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v252);
  v63 = MIL::IRUnknownDimension::Make(a1, 0);
  v64 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v65 = operator new(0x10uLL);
  v251 = v65 + 2;
  *v65 = v63;
  v65[1] = v64;
  v249 = v65;
  v250 = v65 + 2;
  v264 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v249);
  v66 = MIL::IRUnknownDimension::Make(a1, 0);
  v67 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v68 = operator new(0x10uLL);
  v248 = v68 + 2;
  *v68 = v66;
  v68[1] = v67;
  v246 = v68;
  v247 = v68 + 2;
  v265 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v246);
  v69 = MIL::IRUnknownDimension::Make(a1, 0);
  v70 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v71 = operator new(0x10uLL);
  v245 = v71 + 2;
  *v71 = v69;
  v71[1] = v70;
  v243 = v71;
  v244 = v71 + 2;
  v266 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v243);
  v72 = MIL::IRUnknownDimension::Make(a1, 0);
  v73 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v74 = operator new(0x10uLL);
  v242 = v74 + 2;
  *v74 = v72;
  v74[1] = v73;
  v240 = v74;
  v241 = v74 + 2;
  v267 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v240);
  v75 = MIL::IRUnknownDimension::Make(a1, 0);
  v76 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v77 = operator new(0x10uLL);
  v239 = v77 + 2;
  *v77 = v75;
  v77[1] = v76;
  v237 = v77;
  v238 = v77 + 2;
  v268 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v237);
  v78 = MIL::IRUnknownDimension::Make(a1, 0);
  v79 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v80 = operator new(0x10uLL);
  v236 = v80 + 2;
  *v80 = v78;
  v80[1] = v79;
  __p = v80;
  v235 = v80 + 2;
  v269 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&__p);
  v81 = MIL::IRUnknownDimension::Make(a1, 0);
  v82 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v83 = operator new(0x10uLL);
  v224 = v83 + 2;
  v225 = v83 + 2;
  *v83 = v81;
  v83[1] = v82;
  v223 = v83;
  v270 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v223);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v263, 8, &v226);
  MIL::IRParameter::Make(&v226, &v227);
  v84 = v227;
  v228 = v227;
  if (v227)
  {
    v85 = (_QWORD *)operator new();
    v86 = v227;
    *v85 = &unk_1EA99F888;
    v85[1] = 0;
    v85[2] = 0;
    v85[3] = v86;
  }
  else
  {
    v85 = 0;
  }
  v229 = v85;
  v227 = 0;
  v87 = v59[2];
  v88 = v59[1];
  if (v88 >= v87)
  {
    v90 = (v88 - *v59) >> 4;
    v91 = v90 + 1;
    if ((unint64_t)(v90 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v92 = v87 - *v59;
    if (v92 >> 3 > v91)
      v91 = v92 >> 3;
    if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF0)
      v93 = 0xFFFFFFFFFFFFFFFLL;
    else
      v93 = v91;
    v275 = v59 + 2;
    v94 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v59 + 2), v93);
    v96 = (uint64_t *)&v94[16 * v90];
    *v96 = v84;
    v96[1] = (uint64_t)v85;
    v228 = 0;
    v229 = 0;
    v98 = *v59;
    v97 = v59[1];
    if (v97 == *v59)
    {
      v101 = v59[1];
      v99 = &v94[16 * v90];
    }
    else
    {
      v99 = &v94[16 * v90];
      do
      {
        v100 = *((_OWORD *)v97 - 1);
        v97 -= 16;
        *((_OWORD *)v99 - 1) = v100;
        v99 -= 16;
        *(_QWORD *)v97 = 0;
        *((_QWORD *)v97 + 1) = 0;
      }
      while (v97 != v98);
      v101 = *v59;
      v97 = v59[1];
    }
    v89 = (char *)(v96 + 2);
    *v59 = v99;
    Scalar = v101;
    v272 = v101;
    v59[1] = (char *)(v96 + 2);
    v273 = v97;
    v102 = v59[2];
    v59[2] = &v94[16 * v95];
    v274 = v102;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v88 = v84;
    *((_QWORD *)v88 + 1) = v85;
    v89 = v88 + 16;
    v228 = 0;
    v229 = 0;
  }
  v59[1] = v89;
  v103 = v227;
  v227 = 0;
  if (v103)
    (*(void (**)(uint64_t))(*(_QWORD *)v103 + 8))(v103);
  v104 = (std::__shared_weak_count *)v226.n128_u64[1];
  if (v226.n128_u64[1])
  {
    v105 = (unint64_t *)(v226.n128_u64[1] + 8);
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  if (v223)
  {
    v224 = v223;
    operator delete(v223);
  }
  if (__p)
  {
    v235 = __p;
    operator delete(__p);
  }
  if (v237)
  {
    v238 = v237;
    operator delete(v237);
  }
  if (v240)
  {
    v241 = v240;
    operator delete(v240);
  }
  if (v243)
  {
    v244 = v243;
    operator delete(v243);
  }
  if (v246)
  {
    v247 = v246;
    operator delete(v246);
  }
  if (v249)
  {
    v250 = v249;
    operator delete(v249);
  }
  if (v252)
  {
    v253 = v252;
    operator delete(v252);
  }
  *(_OWORD *)v221 = *(_OWORD *)a2;
  v222 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v107 = (uint64_t)v256;
  *(_QWORD *)&v220 = v256;
  if (v256)
  {
    v108 = (_QWORD *)operator new();
    *v108 = &unk_1EA99F8E8;
    v108[1] = 0;
    v108[2] = 0;
    v108[3] = v107;
  }
  else
  {
    v108 = 0;
  }
  *((_QWORD *)&v220 + 1) = v108;
  v256 = 0;
  *(_QWORD *)&v219 = v230;
  if (v230)
  {
    v109 = (_QWORD *)operator new();
    v110 = v230;
    *v109 = &unk_1EA99F948;
    v109[1] = 0;
    v109[2] = 0;
    v109[3] = v110;
  }
  else
  {
    v109 = 0;
  }
  *((_QWORD *)&v219 + 1) = v109;
  v230 = 0;
  v262 = 0;
  v260 = 0;
  MIL::IROperator::Make((__int128 *)v221, &v220, &v219, (uint64_t)v261, (uint64_t)v259, a3);
  v111 = v260;
  if (v260 == v259)
  {
    v112 = 4;
    v111 = v259;
  }
  else
  {
    if (!v260)
      goto LABEL_102;
    v112 = 5;
  }
  (*(void (**)(void))(*v111 + 8 * v112))();
LABEL_102:
  v113 = v262;
  if (v262 == v261)
  {
    v114 = 4;
    v113 = v261;
    goto LABEL_106;
  }
  if (v262)
  {
    v114 = 5;
LABEL_106:
    (*(void (**)(void))(*v113 + 8 * v114))();
  }
  v115 = (std::__shared_weak_count *)*((_QWORD *)&v219 + 1);
  if (*((_QWORD *)&v219 + 1))
  {
    v116 = (unint64_t *)(*((_QWORD *)&v219 + 1) + 8);
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = (std::__shared_weak_count *)*((_QWORD *)&v220 + 1);
  if (*((_QWORD *)&v220 + 1))
  {
    v119 = (unint64_t *)(*((_QWORD *)&v220 + 1) + 8);
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  if (SHIBYTE(v222) < 0)
    operator delete(v221[0]);
  v121 = *a3;
  v122 = std::string::basic_string[abi:ne180100]<0>(&v263, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)v122, (uint64_t)v257);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v121 + 200))(v121, v257);
  v123 = v258;
  if (v258 == v257)
  {
    v124 = 4;
    v123 = v257;
  }
  else
  {
    if (!v258)
      goto LABEL_124;
    v124 = 5;
  }
  (*(void (**)(void))(*v123 + 8 * v124))();
LABEL_124:
  if (SHIBYTE(v265) < 0)
    operator delete(v263);
  MIL::Validation::TensorDTypeConstraints::Make(&v263);
  v125 = v263;
  std::string::basic_string[abi:ne180100]<0>(v215, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v215, 0, (uint64_t *)&Scalar);
  v217 = Scalar;
  if (Scalar)
  {
    v126 = (std::__shared_weak_count *)operator new();
    v127 = (std::__shared_weak_count_vtbl *)Scalar;
    v126->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v126->__shared_owners_ = 0;
    v126->__shared_weak_owners_ = 0;
    v126[1].__vftable = v127;
  }
  else
  {
    v126 = 0;
  }
  v218 = v126;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v213, "T");
  (*((void (**)(void **, char **, void **))*v125 + 3))(v125, &v217, v213);
  if (v214 < 0)
    operator delete(v213[0]);
  v128 = v218;
  if (v218)
  {
    p_shared_owners = (unint64_t *)&v218->__shared_owners_;
    do
      v130 = __ldaxr(p_shared_owners);
    while (__stlxr(v130 - 1, p_shared_owners));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v131 = Scalar;
  Scalar = 0;
  if (v131)
    (*(void (**)(char *))(*(_QWORD *)v131 + 8))(v131);
  if (v216 < 0)
    operator delete(v215[0]);
  v132 = v263;
  std::string::basic_string[abi:ne180100]<0>(v209, "lengths");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v209, 0, (uint64_t *)&Scalar);
  v211 = Scalar;
  if (Scalar)
  {
    v133 = (std::__shared_weak_count *)operator new();
    v134 = (std::__shared_weak_count_vtbl *)Scalar;
    v133->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v133->__shared_owners_ = 0;
    v133->__shared_weak_owners_ = 0;
    v133[1].__vftable = v134;
  }
  else
  {
    v133 = 0;
  }
  v212 = v133;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v207, "LENGTHS_T");
  (*((void (**)(void **, char **, void **))*v132 + 3))(v132, &v211, v207);
  if (v208 < 0)
    operator delete(v207[0]);
  v135 = v212;
  if (v212)
  {
    v136 = (unint64_t *)&v212->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = Scalar;
  Scalar = 0;
  if (v138)
    (*(void (**)(char *))(*(_QWORD *)v138 + 8))(v138);
  if (v210 < 0)
    operator delete(v209[0]);
  v139 = v263;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v205 = Scalar;
  if (Scalar)
  {
    v140 = (std::__shared_weak_count *)operator new();
    v141 = (std::__shared_weak_count_vtbl *)Scalar;
    v140->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v140->__shared_owners_ = 0;
    v140->__shared_weak_owners_ = 0;
    v140[1].__vftable = v141;
  }
  else
  {
    v140 = 0;
  }
  v206 = v140;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v203, "T");
  (*((void (**)(void **, char **, void **))*v139 + 3))(v139, &v205, v203);
  if (v204 < 0)
    operator delete(v203[0]);
  v142 = v206;
  if (v206)
  {
    v143 = (unint64_t *)&v206->__shared_owners_;
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  v145 = Scalar;
  Scalar = 0;
  if (v145)
    (*(void (**)(char *))(*(_QWORD *)v145 + 8))(v145);
  v146 = *a3;
  v201 = v263;
  if (v263)
  {
    v147 = (std::__shared_weak_count *)operator new();
    v148 = v263;
    v147->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v147->__shared_owners_ = 0;
    v147->__shared_weak_owners_ = 0;
    v147[1].__vftable = (std::__shared_weak_count_vtbl *)v148;
  }
  else
  {
    v147 = 0;
  }
  v202 = v147;
  v263 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v146 + 56))(v146, &v201);
  v149 = v202;
  if (v202)
  {
    v150 = (unint64_t *)&v202->__shared_owners_;
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  v152 = v263;
  v263 = 0;
  if (v152)
    (*((void (**)(void **))*v152 + 1))(v152);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v263);
  v153 = v263;
  std::string::basic_string[abi:ne180100]<0>(v197, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v197, 0, (uint64_t *)&Scalar);
  v199 = Scalar;
  if (Scalar)
  {
    v154 = (std::__shared_weak_count *)operator new();
    v155 = (std::__shared_weak_count_vtbl *)Scalar;
    v154->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v154->__shared_owners_ = 0;
    v154->__shared_weak_owners_ = 0;
    v154[1].__vftable = v155;
  }
  else
  {
    v154 = 0;
  }
  v200 = v154;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v195, "D");
  (*((void (**)(void **, char **, _QWORD, void **))*v153 + 3))(v153, &v199, 0, v195);
  if (v196 < 0)
    operator delete(v195[0]);
  v156 = v200;
  if (v200)
  {
    v157 = (unint64_t *)&v200->__shared_owners_;
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  v159 = Scalar;
  Scalar = 0;
  if (v159)
    (*(void (**)(char *))(*(_QWORD *)v159 + 8))(v159);
  if (v198 < 0)
    operator delete(v197[0]);
  v160 = v263;
  std::string::basic_string[abi:ne180100]<0>(v191, "lengths");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v191, 0, (uint64_t *)&Scalar);
  v193 = Scalar;
  if (Scalar)
  {
    v161 = (std::__shared_weak_count *)operator new();
    v162 = (std::__shared_weak_count_vtbl *)Scalar;
    v161->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v161->__shared_owners_ = 0;
    v161->__shared_weak_owners_ = 0;
    v161[1].__vftable = v162;
  }
  else
  {
    v161 = 0;
  }
  v194 = v161;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v189, "K");
  (*((void (**)(void **, char **, _QWORD, void **))*v160 + 3))(v160, &v193, 0, v189);
  if (v190 < 0)
    operator delete(v189[0]);
  v163 = v194;
  if (v194)
  {
    v164 = (unint64_t *)&v194->__shared_owners_;
    do
      v165 = __ldaxr(v164);
    while (__stlxr(v165 - 1, v164));
    if (!v165)
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v163);
    }
  }
  v166 = Scalar;
  Scalar = 0;
  if (v166)
    (*(void (**)(char *))(*(_QWORD *)v166 + 8))(v166);
  if (v192 < 0)
    operator delete(v191[0]);
  v167 = v263;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v187 = Scalar;
  if (Scalar)
  {
    v168 = (std::__shared_weak_count *)operator new();
    v169 = (std::__shared_weak_count_vtbl *)Scalar;
    v168->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v168->__shared_owners_ = 0;
    v168->__shared_weak_owners_ = 0;
    v168[1].__vftable = v169;
  }
  else
  {
    v168 = 0;
  }
  v188 = v168;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v185, "D");
  (*((void (**)(void **, char **, _QWORD, void **))*v167 + 3))(v167, &v187, 0, v185);
  if (v186 < 0)
    operator delete(v185[0]);
  v170 = v188;
  if (v188)
  {
    v171 = (unint64_t *)&v188->__shared_owners_;
    do
      v172 = __ldaxr(v171);
    while (__stlxr(v172 - 1, v171));
    if (!v172)
    {
      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
      std::__shared_weak_count::__release_weak(v170);
    }
  }
  v173 = Scalar;
  Scalar = 0;
  if (v173)
    (*(void (**)(char *))(*(_QWORD *)v173 + 8))(v173);
  v174 = *a3;
  v183 = v263;
  if (v263)
  {
    v175 = (std::__shared_weak_count *)operator new();
    v176 = v263;
    v175->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v175->__shared_owners_ = 0;
    v175->__shared_weak_owners_ = 0;
    v175[1].__vftable = (std::__shared_weak_count_vtbl *)v176;
  }
  else
  {
    v175 = 0;
  }
  v184 = v175;
  v263 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v174 + 56))(v174, &v183);
  v177 = v184;
  if (v184)
  {
    v178 = (unint64_t *)&v184->__shared_owners_;
    do
      v179 = __ldaxr(v178);
    while (__stlxr(v179 - 1, v178));
    if (!v179)
    {
      ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
      std::__shared_weak_count::__release_weak(v177);
    }
  }
  v180 = v263;
  v263 = 0;
  if (v180)
    (*((void (**)(void **))*v180 + 1))(v180);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v230, 0);
  result = (uint64_t)v256;
  if (v256)
  {
    v182 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v256);
    return MEMORY[0x1E0C023A0](v182, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0935A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  void **a70;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;

  v73 = *(_QWORD *)(v71 - 176);
  *(_QWORD *)(v71 - 176) = 0;
  if (v73)
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  v74 = *v70;
  *v70 = 0;
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a70, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x2D8], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::SliceByIndex::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  void *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  void *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  unsigned __int8 *v64;
  void *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  void **v71;
  unsigned __int8 *v72;
  void *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  void **v79;
  unsigned __int8 *v80;
  void *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  void **v87;
  unsigned __int8 *v88;
  void *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  char **v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  char *v114;
  char *v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t *v123;
  char *v124;
  char *v125;
  char *v126;
  __int128 v127;
  char *v128;
  char *v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  char **v137;
  _QWORD *v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  void **v151;
  std::__shared_weak_count *v152;
  std::__shared_weak_count_vtbl *v153;
  std::__shared_weak_count *v154;
  unint64_t *p_shared_owners;
  unint64_t v156;
  void *v157;
  void **v158;
  std::__shared_weak_count *v159;
  std::__shared_weak_count_vtbl *v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  void *v164;
  void **v165;
  std::__shared_weak_count *v166;
  std::__shared_weak_count_vtbl *v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  void *v171;
  void **v172;
  std::__shared_weak_count *v173;
  std::__shared_weak_count_vtbl *v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  void *v178;
  void **v179;
  std::__shared_weak_count *v180;
  std::__shared_weak_count_vtbl *v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  void *v185;
  uint64_t v186;
  std::__shared_weak_count *v187;
  void **v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  void **v192;
  void **v193;
  std::__shared_weak_count *v194;
  std::__shared_weak_count_vtbl *v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  void *v199;
  void **v200;
  std::__shared_weak_count *v201;
  std::__shared_weak_count_vtbl *v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  void *v206;
  void **v207;
  std::__shared_weak_count *v208;
  std::__shared_weak_count_vtbl *v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  void *v213;
  void **v214;
  std::__shared_weak_count *v215;
  std::__shared_weak_count_vtbl *v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  void *v220;
  void **v221;
  std::__shared_weak_count *v222;
  std::__shared_weak_count_vtbl *v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  void *v227;
  void **v228;
  std::__shared_weak_count *v229;
  std::__shared_weak_count_vtbl *v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  void *v234;
  void **v235;
  std::__shared_weak_count *v236;
  std::__shared_weak_count_vtbl *v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  void *v241;
  uint64_t v242;
  std::__shared_weak_count *v243;
  void **v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  void **v248;
  uint64_t result;
  uint64_t v250;
  void **v251;
  std::__shared_weak_count *v252;
  void *v253[2];
  char v254;
  void *v255[2];
  char v256;
  void *v257;
  std::__shared_weak_count *v258;
  void *v259[2];
  char v260;
  void *v261[2];
  char v262;
  void *v263;
  std::__shared_weak_count *v264;
  void *v265[2];
  char v266;
  void *v267[2];
  char v268;
  void *v269;
  std::__shared_weak_count *v270;
  void *v271[2];
  char v272;
  void *v273[2];
  char v274;
  void *v275;
  std::__shared_weak_count *v276;
  void *v277[2];
  char v278;
  void *v279[2];
  char v280;
  void *v281;
  std::__shared_weak_count *v282;
  void *v283[2];
  char v284;
  void *v285[2];
  char v286;
  void *v287;
  std::__shared_weak_count *v288;
  void *v289[2];
  char v290;
  void *v291[2];
  char v292;
  void *v293;
  std::__shared_weak_count *v294;
  void **v295;
  std::__shared_weak_count *v296;
  void *v297[2];
  char v298;
  void *v299;
  std::__shared_weak_count *v300;
  void *v301[2];
  char v302;
  void *v303[2];
  char v304;
  void *v305;
  std::__shared_weak_count *v306;
  void *v307[2];
  char v308;
  void *v309[2];
  char v310;
  void *v311;
  std::__shared_weak_count *v312;
  void *v313[2];
  char v314;
  void *v315[2];
  char v316;
  void *v317;
  std::__shared_weak_count *v318;
  void *v319[2];
  char v320;
  void *v321[2];
  char v322;
  void *v323;
  std::__shared_weak_count *v324;
  __int128 v325;
  __int128 v326;
  void *v327[2];
  uint64_t v328;
  void *v329;
  void *v330;
  _QWORD *v331;
  __n128 v332;
  uint64_t v333;
  uint64_t v334;
  _QWORD *v335;
  char **v336;
  __n128 v337;
  __n128 v338;
  __n128 v339;
  __n128 v340;
  __n128 v341;
  __n128 v342;
  void *__p;
  void *v344;
  _QWORD *v345;
  void *v346;
  void *v347;
  _QWORD *v348;
  void *v349;
  void *v350;
  _QWORD *v351;
  void *v352;
  void *v353;
  _QWORD *v354;
  void *v355;
  void *v356;
  _QWORD *v357;
  void *v358;
  void *v359;
  _QWORD *v360;
  __n128 v361;
  _QWORD *v362;
  void *v363;
  void *v364;
  char *v365;
  char *v366;
  char **v367;
  _QWORD v368[3];
  _QWORD *v369;
  _BYTE v370[24];
  _BYTE *v371;
  _BYTE v372[24];
  _BYTE *v373;
  void *v374;
  void *v375;
  _QWORD *v376;
  void **v377;
  void **v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;

  v385 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v362 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (char *)operator new(0x10uLL);
  v365 = v9 + 16;
  *(_QWORD *)v9 = v7;
  *((_QWORD *)v9 + 1) = v8;
  v363 = v9;
  v364 = v9 + 16;
  v377 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v363);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v375 = v12 + 2;
  v376 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v374 = v12;
  v378 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v374);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v360 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  v358 = v15;
  v359 = v15 + 2;
  v379 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v358);
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(0x10uLL);
  v357 = v18 + 2;
  *v18 = v16;
  v18[1] = v17;
  v355 = v18;
  v356 = v18 + 2;
  v380 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v355);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(0x10uLL);
  v354 = v21 + 2;
  *v21 = v19;
  v21[1] = v20;
  v352 = v21;
  v353 = v21 + 2;
  v381 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v352);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(0x10uLL);
  v351 = v24 + 2;
  *v24 = v22;
  v24[1] = v23;
  v349 = v24;
  v350 = v24 + 2;
  v382 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v349);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(0x10uLL);
  v348 = v27 + 2;
  *v27 = v25;
  v27[1] = v26;
  v346 = v27;
  v347 = v27 + 2;
  v383 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v346);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = operator new(0x10uLL);
  v345 = v30 + 2;
  *v30 = v28;
  v30[1] = v29;
  __p = v30;
  v344 = v30 + 2;
  v384 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v377, 8, &v361);
  MIL::IRParameter::Make(&v361, (uint64_t *)&v329);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v329);
  v31 = v329;
  v329 = 0;
  if (v31)
    (*(void (**)(void *))(*(_QWORD *)v31 + 8))(v31);
  v32 = (std::__shared_weak_count *)v361.n128_u64[1];
  if (v361.n128_u64[1])
  {
    v33 = (unint64_t *)(v361.n128_u64[1] + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (__p)
  {
    v344 = __p;
    operator delete(__p);
  }
  if (v346)
  {
    v347 = v346;
    operator delete(v346);
  }
  if (v349)
  {
    v350 = v349;
    operator delete(v349);
  }
  if (v352)
  {
    v353 = v352;
    operator delete(v352);
  }
  if (v355)
  {
    v356 = v355;
    operator delete(v355);
  }
  if (v358)
  {
    v359 = v358;
    operator delete(v358);
  }
  if (v374)
  {
    v375 = v374;
    operator delete(v374);
  }
  if (v363)
  {
    v364 = v363;
    operator delete(v363);
  }
  v35 = v362;
  v36 = MIL::IRUnknownDimension::Make(a1, 0);
  v37 = (char *)operator new(8uLL);
  v363 = v37;
  *(_QWORD *)v37 = v36;
  v365 = v37 + 8;
  v364 = v37 + 8;
  v377 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v363);
  v38 = MIL::IRUnknownDimension::Make(a1, 0);
  v39 = operator new(8uLL);
  v374 = v39;
  *v39 = v38;
  v375 = v39 + 1;
  v376 = v39 + 1;
  v378 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v374);
  v40 = MIL::IRUnknownDimension::Make(a1, 0);
  v41 = operator new(8uLL);
  v358 = v41;
  *v41 = v40;
  v360 = v41 + 1;
  v359 = v41 + 1;
  v379 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v358);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v377, 3, &v342);
  MIL::IRParameter::Make(&v342, (uint64_t *)&v355);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v35, "begin", (uint64_t *)&v355);
  v42 = v355;
  v355 = 0;
  if (v42)
    (*(void (**)(void *))(*(_QWORD *)v42 + 8))(v42);
  v43 = (std::__shared_weak_count *)v342.n128_u64[1];
  if (v342.n128_u64[1])
  {
    v44 = (unint64_t *)(v342.n128_u64[1] + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  if (v358)
  {
    v359 = v358;
    operator delete(v358);
  }
  if (v374)
  {
    v375 = v374;
    operator delete(v374);
  }
  if (v363)
  {
    v364 = v363;
    operator delete(v363);
  }
  v46 = v362;
  v47 = MIL::IRUnknownDimension::Make(a1, 0);
  v48 = (char *)operator new(8uLL);
  v363 = v48;
  *(_QWORD *)v48 = v47;
  v365 = v48 + 8;
  v364 = v48 + 8;
  v377 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v363);
  v49 = MIL::IRUnknownDimension::Make(a1, 0);
  v50 = operator new(8uLL);
  v374 = v50;
  *v50 = v49;
  v375 = v50 + 1;
  v376 = v50 + 1;
  v378 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v374);
  v51 = MIL::IRUnknownDimension::Make(a1, 0);
  v52 = operator new(8uLL);
  v358 = v52;
  *v52 = v51;
  v360 = v52 + 1;
  v359 = v52 + 1;
  v379 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v358);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v377, 3, &v341);
  MIL::IRParameter::Make(&v341, (uint64_t *)&v355);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[4],std::unique_ptr<MIL::IRParameter>>(v46, "end", (uint64_t *)&v355);
  v53 = v355;
  v355 = 0;
  if (v53)
    (*(void (**)(void *))(*(_QWORD *)v53 + 8))(v53);
  v54 = (std::__shared_weak_count *)v341.n128_u64[1];
  if (v341.n128_u64[1])
  {
    v55 = (unint64_t *)(v341.n128_u64[1] + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  if (v358)
  {
    v359 = v358;
    operator delete(v358);
  }
  if (v374)
  {
    v375 = v374;
    operator delete(v374);
  }
  if (v363)
  {
    v364 = v363;
    operator delete(v363);
  }
  v57 = v362;
  v58 = MIL::IRUnknownDimension::Make(a1, 0);
  v59 = (char *)operator new(8uLL);
  v363 = v59;
  *(_QWORD *)v59 = v58;
  v365 = v59 + 8;
  v364 = v59 + 8;
  v377 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v363);
  v60 = MIL::IRUnknownDimension::Make(a1, 0);
  v61 = operator new(8uLL);
  v374 = v61;
  *v61 = v60;
  v375 = v61 + 1;
  v376 = v61 + 1;
  v378 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v374);
  v62 = MIL::IRUnknownDimension::Make(a1, 0);
  v63 = operator new(8uLL);
  v358 = v63;
  *v63 = v62;
  v360 = v63 + 1;
  v359 = v63 + 1;
  v379 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v358);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v377, 3, &v340);
  MIL::IRParameter::Make(&v340, (uint64_t *)&v355);
  v64 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(v57, "stride", (uint64_t *)&v355);
  v65 = v355;
  v355 = 0;
  if (v65)
    (*(void (**)(void *))(*(_QWORD *)v65 + 8))(v65);
  v66 = (std::__shared_weak_count *)v340.n128_u64[1];
  if (v340.n128_u64[1])
  {
    v67 = (unint64_t *)(v340.n128_u64[1] + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if (v358)
  {
    v359 = v358;
    operator delete(v358);
  }
  if (v374)
  {
    v375 = v374;
    operator delete(v374);
  }
  if (v363)
  {
    v364 = v363;
    operator delete(v363);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v64 + 5) + 48))(*((_QWORD *)v64 + 5), 1);
  v69 = v362;
  v70 = MIL::IRUnknownDimension::Make(a1, 0);
  v71 = (void **)operator new(8uLL);
  v377 = v71;
  *v71 = (void *)v70;
  v378 = v71 + 1;
  v379 = (uint64_t)(v71 + 1);
  v374 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v377);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v374, 1, &v339);
  MIL::IRParameter::Make(&v339, (uint64_t *)&v363);
  v72 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v69, "begin_mask", (uint64_t *)&v363);
  v73 = v363;
  v363 = 0;
  if (v73)
    (*(void (**)(void *))(*(_QWORD *)v73 + 8))(v73);
  v74 = (std::__shared_weak_count *)v339.n128_u64[1];
  if (v339.n128_u64[1])
  {
    v75 = (unint64_t *)(v339.n128_u64[1] + 8);
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  if (v377)
  {
    v378 = v377;
    operator delete(v377);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v72 + 5) + 48))(*((_QWORD *)v72 + 5), 1);
  v77 = v362;
  v78 = MIL::IRUnknownDimension::Make(a1, 0);
  v79 = (void **)operator new(8uLL);
  v377 = v79;
  *v79 = (void *)v78;
  v378 = v79 + 1;
  v379 = (uint64_t)(v79 + 1);
  v374 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v377);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v374, 1, &v338);
  MIL::IRParameter::Make(&v338, (uint64_t *)&v363);
  v80 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v77, "end_mask", (uint64_t *)&v363);
  v81 = v363;
  v363 = 0;
  if (v81)
    (*(void (**)(void *))(*(_QWORD *)v81 + 8))(v81);
  v82 = (std::__shared_weak_count *)v338.n128_u64[1];
  if (v338.n128_u64[1])
  {
    v83 = (unint64_t *)(v338.n128_u64[1] + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  if (v377)
  {
    v378 = v377;
    operator delete(v377);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v80 + 5) + 48))(*((_QWORD *)v80 + 5), 1);
  v85 = v362;
  v86 = MIL::IRUnknownDimension::Make(a1, 0);
  v87 = (void **)operator new(8uLL);
  v377 = v87;
  *v87 = (void *)v86;
  v378 = v87 + 1;
  v379 = (uint64_t)(v87 + 1);
  v374 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v377);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v374, 1, &v337);
  MIL::IRParameter::Make(&v337, (uint64_t *)&v363);
  v88 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v85, "squeeze_mask", (uint64_t *)&v363);
  v89 = v363;
  v363 = 0;
  if (v89)
    (*(void (**)(void *))(*(_QWORD *)v89 + 8))(v89);
  v90 = (std::__shared_weak_count *)v337.n128_u64[1];
  if (v337.n128_u64[1])
  {
    v91 = (unint64_t *)(v337.n128_u64[1] + 8);
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  if (v377)
  {
    v378 = v377;
    operator delete(v377);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v88 + 5) + 48))(*((_QWORD *)v88 + 5), 1);
  v336 = 0;
  v93 = operator new();
  *(_QWORD *)v93 = 0;
  *(_QWORD *)(v93 + 8) = 0;
  *(_QWORD *)(v93 + 16) = 0;
  v377 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v336, (void **)v93);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v377, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v336, 1uLL);
  v94 = v336;
  v95 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v96 = operator new(8uLL);
  v374 = v96;
  *v96 = v95;
  v375 = v96 + 1;
  v376 = v96 + 1;
  v377 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v374);
  v97 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v98 = operator new(8uLL);
  v358 = v98;
  *v98 = v97;
  v360 = v98 + 1;
  v359 = v98 + 1;
  v378 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v358);
  v99 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v100 = operator new(8uLL);
  v355 = v100;
  *v100 = v99;
  v357 = v100 + 1;
  v356 = v100 + 1;
  v379 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v355);
  v101 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v102 = operator new(8uLL);
  v352 = v102;
  *v102 = v101;
  v354 = v102 + 1;
  v353 = v102 + 1;
  v380 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v352);
  v103 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v104 = operator new(8uLL);
  v349 = v104;
  *v104 = v103;
  v351 = v104 + 1;
  v350 = v104 + 1;
  v381 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v349);
  v105 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v106 = operator new(8uLL);
  v346 = v106;
  *v106 = v105;
  v348 = v106 + 1;
  v347 = v106 + 1;
  v382 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v346);
  v107 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v108 = operator new(8uLL);
  __p = v108;
  *v108 = v107;
  v345 = v108 + 1;
  v344 = v108 + 1;
  v383 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&__p);
  v109 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v110 = operator new(8uLL);
  v329 = v110;
  *v110 = v109;
  v331 = v110 + 1;
  v330 = v110 + 1;
  v384 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v329);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v377, 8, &v332);
  MIL::IRParameter::Make(&v332, &v333);
  v111 = v333;
  v334 = v333;
  if (v333)
  {
    v112 = (_QWORD *)operator new();
    v113 = v333;
    *v112 = &unk_1EA99F888;
    v112[1] = 0;
    v112[2] = 0;
    v112[3] = v113;
  }
  else
  {
    v112 = 0;
  }
  v335 = v112;
  v333 = 0;
  v114 = v94[2];
  v115 = v94[1];
  if (v115 >= v114)
  {
    v117 = (v115 - *v94) >> 4;
    v118 = v117 + 1;
    if ((unint64_t)(v117 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v119 = v114 - *v94;
    if (v119 >> 3 > v118)
      v118 = v119 >> 3;
    if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFF0)
      v120 = 0xFFFFFFFFFFFFFFFLL;
    else
      v120 = v118;
    v367 = v94 + 2;
    v121 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v94 + 2), v120);
    v123 = (uint64_t *)&v121[16 * v117];
    *v123 = v111;
    v123[1] = (uint64_t)v112;
    v335 = 0;
    v334 = 0;
    v125 = *v94;
    v124 = v94[1];
    if (v124 == *v94)
    {
      v128 = v94[1];
      v126 = &v121[16 * v117];
    }
    else
    {
      v126 = &v121[16 * v117];
      do
      {
        v127 = *((_OWORD *)v124 - 1);
        v124 -= 16;
        *((_OWORD *)v126 - 1) = v127;
        v126 -= 16;
        *(_QWORD *)v124 = 0;
        *((_QWORD *)v124 + 1) = 0;
      }
      while (v124 != v125);
      v128 = *v94;
      v124 = v94[1];
    }
    v116 = (char *)(v123 + 2);
    *v94 = v126;
    v364 = v128;
    v94[1] = (char *)(v123 + 2);
    v365 = v124;
    v129 = v94[2];
    v94[2] = &v121[16 * v122];
    v366 = v129;
    v363 = v128;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v363);
  }
  else
  {
    *(_QWORD *)v115 = v111;
    *((_QWORD *)v115 + 1) = v112;
    v116 = v115 + 16;
    v335 = 0;
    v334 = 0;
  }
  v94[1] = v116;
  v130 = v333;
  v333 = 0;
  if (v130)
    (*(void (**)(uint64_t))(*(_QWORD *)v130 + 8))(v130);
  v131 = (std::__shared_weak_count *)v332.n128_u64[1];
  if (v332.n128_u64[1])
  {
    v132 = (unint64_t *)(v332.n128_u64[1] + 8);
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  if (v329)
  {
    v330 = v329;
    operator delete(v329);
  }
  if (__p)
  {
    v344 = __p;
    operator delete(__p);
  }
  if (v346)
  {
    v347 = v346;
    operator delete(v346);
  }
  if (v349)
  {
    v350 = v349;
    operator delete(v349);
  }
  if (v352)
  {
    v353 = v352;
    operator delete(v352);
  }
  if (v355)
  {
    v356 = v355;
    operator delete(v355);
  }
  if (v358)
  {
    v359 = v358;
    operator delete(v358);
  }
  if (v374)
  {
    v375 = v374;
    operator delete(v374);
  }
  *(_OWORD *)v327 = *(_OWORD *)a2;
  v328 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v134 = (uint64_t)v362;
  *(_QWORD *)&v326 = v362;
  if (v362)
  {
    v135 = (_QWORD *)operator new();
    *v135 = &unk_1EA99F8E8;
    v135[1] = 0;
    v135[2] = 0;
    v135[3] = v134;
  }
  else
  {
    v135 = 0;
  }
  *((_QWORD *)&v326 + 1) = v135;
  v362 = 0;
  *(_QWORD *)&v325 = v336;
  if (v336)
  {
    v136 = (_QWORD *)operator new();
    v137 = v336;
    *v136 = &unk_1EA99F948;
    v136[1] = 0;
    v136[2] = 0;
    v136[3] = v137;
  }
  else
  {
    v136 = 0;
  }
  *((_QWORD *)&v325 + 1) = v136;
  v336 = 0;
  v373 = 0;
  v371 = 0;
  MIL::IROperator::Make((__int128 *)v327, &v326, &v325, (uint64_t)v372, (uint64_t)v370, a3);
  v138 = v371;
  if (v371 == v370)
  {
    v139 = 4;
    v138 = v370;
  }
  else
  {
    if (!v371)
      goto LABEL_141;
    v139 = 5;
  }
  (*(void (**)(void))(*v138 + 8 * v139))();
LABEL_141:
  v140 = v373;
  if (v373 == v372)
  {
    v141 = 4;
    v140 = v372;
    goto LABEL_145;
  }
  if (v373)
  {
    v141 = 5;
LABEL_145:
    (*(void (**)(void))(*v140 + 8 * v141))();
  }
  v142 = (std::__shared_weak_count *)*((_QWORD *)&v325 + 1);
  if (*((_QWORD *)&v325 + 1))
  {
    v143 = (unint64_t *)(*((_QWORD *)&v325 + 1) + 8);
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  v145 = (std::__shared_weak_count *)*((_QWORD *)&v326 + 1);
  if (*((_QWORD *)&v326 + 1))
  {
    v146 = (unint64_t *)(*((_QWORD *)&v326 + 1) + 8);
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  if (SHIBYTE(v328) < 0)
    operator delete(v327[0]);
  v148 = *a3;
  v368[0] = &off_1EA99FBD8;
  v368[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceSliceByIndex;
  v369 = v368;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v148 + 200))(v148, v368);
  v149 = v369;
  if (v369 == v368)
  {
    v150 = 4;
    v149 = v368;
  }
  else
  {
    if (!v369)
      goto LABEL_163;
    v150 = 5;
  }
  (*(void (**)(void))(*v149 + 8 * v150))();
LABEL_163:
  MIL::Validation::TensorDTypeConstraints::Make(&v377);
  v151 = v377;
  std::string::basic_string[abi:ne180100]<0>(v321, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v321, 0, (uint64_t *)&v363);
  v323 = v363;
  if (v363)
  {
    v152 = (std::__shared_weak_count *)operator new();
    v153 = (std::__shared_weak_count_vtbl *)v363;
    v152->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v152->__shared_owners_ = 0;
    v152->__shared_weak_owners_ = 0;
    v152[1].__vftable = v153;
  }
  else
  {
    v152 = 0;
  }
  v324 = v152;
  v363 = 0;
  std::string::basic_string[abi:ne180100]<0>(v319, "T");
  (*((void (**)(void **, void **, void **))*v151 + 3))(v151, &v323, v319);
  if (v320 < 0)
    operator delete(v319[0]);
  v154 = v324;
  if (v324)
  {
    p_shared_owners = (unint64_t *)&v324->__shared_owners_;
    do
      v156 = __ldaxr(p_shared_owners);
    while (__stlxr(v156 - 1, p_shared_owners));
    if (!v156)
    {
      ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
      std::__shared_weak_count::__release_weak(v154);
    }
  }
  v157 = v363;
  v363 = 0;
  if (v157)
    (*(void (**)(void *))(*(_QWORD *)v157 + 8))(v157);
  if (v322 < 0)
    operator delete(v321[0]);
  v158 = v377;
  std::string::basic_string[abi:ne180100]<0>(v315, "begin");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v315, 0, (uint64_t *)&v363);
  v317 = v363;
  if (v363)
  {
    v159 = (std::__shared_weak_count *)operator new();
    v160 = (std::__shared_weak_count_vtbl *)v363;
    v159->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v159->__shared_owners_ = 0;
    v159->__shared_weak_owners_ = 0;
    v159[1].__vftable = v160;
  }
  else
  {
    v159 = 0;
  }
  v318 = v159;
  v363 = 0;
  std::string::basic_string[abi:ne180100]<0>(v313, "U");
  (*((void (**)(void **, void **, void **))*v158 + 3))(v158, &v317, v313);
  if (v314 < 0)
    operator delete(v313[0]);
  v161 = v318;
  if (v318)
  {
    v162 = (unint64_t *)&v318->__shared_owners_;
    do
      v163 = __ldaxr(v162);
    while (__stlxr(v163 - 1, v162));
    if (!v163)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  v164 = v363;
  v363 = 0;
  if (v164)
    (*(void (**)(void *))(*(_QWORD *)v164 + 8))(v164);
  if (v316 < 0)
    operator delete(v315[0]);
  v165 = v377;
  std::string::basic_string[abi:ne180100]<0>(v309, "end");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v309, 0, (uint64_t *)&v363);
  v311 = v363;
  if (v363)
  {
    v166 = (std::__shared_weak_count *)operator new();
    v167 = (std::__shared_weak_count_vtbl *)v363;
    v166->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v166->__shared_owners_ = 0;
    v166->__shared_weak_owners_ = 0;
    v166[1].__vftable = v167;
  }
  else
  {
    v166 = 0;
  }
  v312 = v166;
  v363 = 0;
  std::string::basic_string[abi:ne180100]<0>(v307, "U");
  (*((void (**)(void **, void **, void **))*v165 + 3))(v165, &v311, v307);
  if (v308 < 0)
    operator delete(v307[0]);
  v168 = v312;
  if (v312)
  {
    v169 = (unint64_t *)&v312->__shared_owners_;
    do
      v170 = __ldaxr(v169);
    while (__stlxr(v170 - 1, v169));
    if (!v170)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
  }
  v171 = v363;
  v363 = 0;
  if (v171)
    (*(void (**)(void *))(*(_QWORD *)v171 + 8))(v171);
  if (v310 < 0)
    operator delete(v309[0]);
  v172 = v377;
  std::string::basic_string[abi:ne180100]<0>(v303, "stride");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v303, 1, (uint64_t *)&v363);
  v305 = v363;
  if (v363)
  {
    v173 = (std::__shared_weak_count *)operator new();
    v174 = (std::__shared_weak_count_vtbl *)v363;
    v173->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v173->__shared_owners_ = 0;
    v173->__shared_weak_owners_ = 0;
    v173[1].__vftable = v174;
  }
  else
  {
    v173 = 0;
  }
  v306 = v173;
  v363 = 0;
  std::string::basic_string[abi:ne180100]<0>(v301, "U");
  (*((void (**)(void **, void **, void **))*v172 + 3))(v172, &v305, v301);
  if (v302 < 0)
    operator delete(v301[0]);
  v175 = v306;
  if (v306)
  {
    v176 = (unint64_t *)&v306->__shared_owners_;
    do
      v177 = __ldaxr(v176);
    while (__stlxr(v177 - 1, v176));
    if (!v177)
    {
      ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
      std::__shared_weak_count::__release_weak(v175);
    }
  }
  v178 = v363;
  v363 = 0;
  if (v178)
    (*(void (**)(void *))(*(_QWORD *)v178 + 8))(v178);
  if (v304 < 0)
    operator delete(v303[0]);
  v179 = v377;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v363);
  v299 = v363;
  if (v363)
  {
    v180 = (std::__shared_weak_count *)operator new();
    v181 = (std::__shared_weak_count_vtbl *)v363;
    v180->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v180->__shared_owners_ = 0;
    v180->__shared_weak_owners_ = 0;
    v180[1].__vftable = v181;
  }
  else
  {
    v180 = 0;
  }
  v300 = v180;
  v363 = 0;
  std::string::basic_string[abi:ne180100]<0>(v297, "T");
  (*((void (**)(void **, void **, void **))*v179 + 3))(v179, &v299, v297);
  if (v298 < 0)
    operator delete(v297[0]);
  v182 = v300;
  if (v300)
  {
    v183 = (unint64_t *)&v300->__shared_owners_;
    do
      v184 = __ldaxr(v183);
    while (__stlxr(v184 - 1, v183));
    if (!v184)
    {
      ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
      std::__shared_weak_count::__release_weak(v182);
    }
  }
  v185 = v363;
  v363 = 0;
  if (v185)
    (*(void (**)(void *))(*(_QWORD *)v185 + 8))(v185);
  v186 = *a3;
  v295 = v377;
  if (v377)
  {
    v187 = (std::__shared_weak_count *)operator new();
    v188 = v377;
    v187->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v187->__shared_owners_ = 0;
    v187->__shared_weak_owners_ = 0;
    v187[1].__vftable = (std::__shared_weak_count_vtbl *)v188;
  }
  else
  {
    v187 = 0;
  }
  v296 = v187;
  v377 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v186 + 56))(v186, &v295);
  v189 = v296;
  if (v296)
  {
    v190 = (unint64_t *)&v296->__shared_owners_;
    do
      v191 = __ldaxr(v190);
    while (__stlxr(v191 - 1, v190));
    if (!v191)
    {
      ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
      std::__shared_weak_count::__release_weak(v189);
    }
  }
  v192 = v377;
  v377 = 0;
  if (v192)
    (*((void (**)(void **))*v192 + 1))(v192);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v377);
  v193 = v377;
  std::string::basic_string[abi:ne180100]<0>(v291, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v291, 0, (uint64_t *)&v363);
  v293 = v363;
  if (v363)
  {
    v194 = (std::__shared_weak_count *)operator new();
    v195 = (std::__shared_weak_count_vtbl *)v363;
    v194->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v194->__shared_owners_ = 0;
    v194->__shared_weak_owners_ = 0;
    v194[1].__vftable = v195;
  }
  else
  {
    v194 = 0;
  }
  v294 = v194;
  v363 = 0;
  std::string::basic_string[abi:ne180100]<0>(v289, "D");
  (*((void (**)(void **, void **, void **))*v193 + 5))(v193, &v293, v289);
  if (v290 < 0)
    operator delete(v289[0]);
  v196 = v294;
  if (v294)
  {
    v197 = (unint64_t *)&v294->__shared_owners_;
    do
      v198 = __ldaxr(v197);
    while (__stlxr(v198 - 1, v197));
    if (!v198)
    {
      ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
      std::__shared_weak_count::__release_weak(v196);
    }
  }
  v199 = v363;
  v363 = 0;
  if (v199)
    (*(void (**)(void *))(*(_QWORD *)v199 + 8))(v199);
  if (v292 < 0)
    operator delete(v291[0]);
  v200 = v377;
  std::string::basic_string[abi:ne180100]<0>(v285, "begin");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v285, 0, (uint64_t *)&v363);
  v287 = v363;
  if (v363)
  {
    v201 = (std::__shared_weak_count *)operator new();
    v202 = (std::__shared_weak_count_vtbl *)v363;
    v201->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v201->__shared_owners_ = 0;
    v201->__shared_weak_owners_ = 0;
    v201[1].__vftable = v202;
  }
  else
  {
    v201 = 0;
  }
  v288 = v201;
  v363 = 0;
  std::string::basic_string[abi:ne180100]<0>(v283, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v200 + 3))(v200, &v287, 0, v283);
  if (v284 < 0)
    operator delete(v283[0]);
  v203 = v288;
  if (v288)
  {
    v204 = (unint64_t *)&v288->__shared_owners_;
    do
      v205 = __ldaxr(v204);
    while (__stlxr(v205 - 1, v204));
    if (!v205)
    {
      ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
      std::__shared_weak_count::__release_weak(v203);
    }
  }
  v206 = v363;
  v363 = 0;
  if (v206)
    (*(void (**)(void *))(*(_QWORD *)v206 + 8))(v206);
  if (v286 < 0)
    operator delete(v285[0]);
  v207 = v377;
  std::string::basic_string[abi:ne180100]<0>(v279, "end");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v279, 0, (uint64_t *)&v363);
  v281 = v363;
  if (v363)
  {
    v208 = (std::__shared_weak_count *)operator new();
    v209 = (std::__shared_weak_count_vtbl *)v363;
    v208->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v208->__shared_owners_ = 0;
    v208->__shared_weak_owners_ = 0;
    v208[1].__vftable = v209;
  }
  else
  {
    v208 = 0;
  }
  v282 = v208;
  v363 = 0;
  std::string::basic_string[abi:ne180100]<0>(v277, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v207 + 3))(v207, &v281, 0, v277);
  if (v278 < 0)
    operator delete(v277[0]);
  v210 = v282;
  if (v282)
  {
    v211 = (unint64_t *)&v282->__shared_owners_;
    do
      v212 = __ldaxr(v211);
    while (__stlxr(v212 - 1, v211));
    if (!v212)
    {
      ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
      std::__shared_weak_count::__release_weak(v210);
    }
  }
  v213 = v363;
  v363 = 0;
  if (v213)
    (*(void (**)(void *))(*(_QWORD *)v213 + 8))(v213);
  if (v280 < 0)
    operator delete(v279[0]);
  v214 = v377;
  std::string::basic_string[abi:ne180100]<0>(v273, "stride");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v273, 1, (uint64_t *)&v363);
  v275 = v363;
  if (v363)
  {
    v215 = (std::__shared_weak_count *)operator new();
    v216 = (std::__shared_weak_count_vtbl *)v363;
    v215->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v215->__shared_owners_ = 0;
    v215->__shared_weak_owners_ = 0;
    v215[1].__vftable = v216;
  }
  else
  {
    v215 = 0;
  }
  v276 = v215;
  v363 = 0;
  std::string::basic_string[abi:ne180100]<0>(v271, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v214 + 3))(v214, &v275, 0, v271);
  if (v272 < 0)
    operator delete(v271[0]);
  v217 = v276;
  if (v276)
  {
    v218 = (unint64_t *)&v276->__shared_owners_;
    do
      v219 = __ldaxr(v218);
    while (__stlxr(v219 - 1, v218));
    if (!v219)
    {
      ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
      std::__shared_weak_count::__release_weak(v217);
    }
  }
  v220 = v363;
  v363 = 0;
  if (v220)
    (*(void (**)(void *))(*(_QWORD *)v220 + 8))(v220);
  if (v274 < 0)
    operator delete(v273[0]);
  v221 = v377;
  std::string::basic_string[abi:ne180100]<0>(v267, "begin_mask");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v267, 1, (uint64_t *)&v363);
  v269 = v363;
  if (v363)
  {
    v222 = (std::__shared_weak_count *)operator new();
    v223 = (std::__shared_weak_count_vtbl *)v363;
    v222->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v222->__shared_owners_ = 0;
    v222->__shared_weak_owners_ = 0;
    v222[1].__vftable = v223;
  }
  else
  {
    v222 = 0;
  }
  v270 = v222;
  v363 = 0;
  std::string::basic_string[abi:ne180100]<0>(v265, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v221 + 3))(v221, &v269, 0, v265);
  if (v266 < 0)
    operator delete(v265[0]);
  v224 = v270;
  if (v270)
  {
    v225 = (unint64_t *)&v270->__shared_owners_;
    do
      v226 = __ldaxr(v225);
    while (__stlxr(v226 - 1, v225));
    if (!v226)
    {
      ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
      std::__shared_weak_count::__release_weak(v224);
    }
  }
  v227 = v363;
  v363 = 0;
  if (v227)
    (*(void (**)(void *))(*(_QWORD *)v227 + 8))(v227);
  if (v268 < 0)
    operator delete(v267[0]);
  v228 = v377;
  std::string::basic_string[abi:ne180100]<0>(v261, "end_mask");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v261, 1, (uint64_t *)&v363);
  v263 = v363;
  if (v363)
  {
    v229 = (std::__shared_weak_count *)operator new();
    v230 = (std::__shared_weak_count_vtbl *)v363;
    v229->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v229->__shared_owners_ = 0;
    v229->__shared_weak_owners_ = 0;
    v229[1].__vftable = v230;
  }
  else
  {
    v229 = 0;
  }
  v264 = v229;
  v363 = 0;
  std::string::basic_string[abi:ne180100]<0>(v259, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v228 + 3))(v228, &v263, 0, v259);
  if (v260 < 0)
    operator delete(v259[0]);
  v231 = v264;
  if (v264)
  {
    v232 = (unint64_t *)&v264->__shared_owners_;
    do
      v233 = __ldaxr(v232);
    while (__stlxr(v233 - 1, v232));
    if (!v233)
    {
      ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
      std::__shared_weak_count::__release_weak(v231);
    }
  }
  v234 = v363;
  v363 = 0;
  if (v234)
    (*(void (**)(void *))(*(_QWORD *)v234 + 8))(v234);
  if (v262 < 0)
    operator delete(v261[0]);
  v235 = v377;
  std::string::basic_string[abi:ne180100]<0>(v255, "squeeze_mask");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v255, 1, (uint64_t *)&v363);
  v257 = v363;
  if (v363)
  {
    v236 = (std::__shared_weak_count *)operator new();
    v237 = (std::__shared_weak_count_vtbl *)v363;
    v236->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v236->__shared_owners_ = 0;
    v236->__shared_weak_owners_ = 0;
    v236[1].__vftable = v237;
  }
  else
  {
    v236 = 0;
  }
  v258 = v236;
  v363 = 0;
  std::string::basic_string[abi:ne180100]<0>(v253, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v235 + 3))(v235, &v257, 0, v253);
  if (v254 < 0)
    operator delete(v253[0]);
  v238 = v258;
  if (v258)
  {
    v239 = (unint64_t *)&v258->__shared_owners_;
    do
      v240 = __ldaxr(v239);
    while (__stlxr(v240 - 1, v239));
    if (!v240)
    {
      ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
      std::__shared_weak_count::__release_weak(v238);
    }
  }
  v241 = v363;
  v363 = 0;
  if (v241)
    (*(void (**)(void *))(*(_QWORD *)v241 + 8))(v241);
  if (v256 < 0)
    operator delete(v255[0]);
  v242 = *a3;
  v251 = v377;
  if (v377)
  {
    v243 = (std::__shared_weak_count *)operator new();
    v244 = v377;
    v243->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v243->__shared_owners_ = 0;
    v243->__shared_weak_owners_ = 0;
    v243[1].__vftable = (std::__shared_weak_count_vtbl *)v244;
  }
  else
  {
    v243 = 0;
  }
  v252 = v243;
  v377 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v242 + 56))(v242, &v251);
  v245 = v252;
  if (v252)
  {
    v246 = (unint64_t *)&v252->__shared_owners_;
    do
      v247 = __ldaxr(v246);
    while (__stlxr(v247 - 1, v246));
    if (!v247)
    {
      ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
      std::__shared_weak_count::__release_weak(v245);
    }
  }
  v248 = v377;
  v377 = 0;
  if (v248)
    (*((void (**)(void **))*v248 + 1))(v248);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v336, 0);
  result = (uint64_t)v362;
  if (v362)
  {
    v250 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v362);
    return MEMORY[0x1E0C023A0](v250, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E093800C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 136);
  *(_QWORD *)(v2 - 136) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x388], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x490], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::SliceBySize::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  void *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  void *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  char **v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t *v87;
  char *v88;
  char *v89;
  char *v90;
  __int128 v91;
  char *v92;
  char *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  char **v101;
  _QWORD *v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  void **v115;
  std::__shared_weak_count *v116;
  std::__shared_weak_count_vtbl *v117;
  std::__shared_weak_count *v118;
  unint64_t *p_shared_owners;
  unint64_t v120;
  void *v121;
  void **v122;
  std::__shared_weak_count *v123;
  std::__shared_weak_count_vtbl *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  void *v128;
  void **v129;
  std::__shared_weak_count *v130;
  std::__shared_weak_count_vtbl *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  void *v135;
  void **v136;
  std::__shared_weak_count *v137;
  std::__shared_weak_count_vtbl *v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  void *v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  void **v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  void **v149;
  void **v150;
  std::__shared_weak_count *v151;
  std::__shared_weak_count_vtbl *v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  void *v156;
  void **v157;
  std::__shared_weak_count *v158;
  std::__shared_weak_count_vtbl *v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  void *v163;
  void **v164;
  std::__shared_weak_count *v165;
  std::__shared_weak_count_vtbl *v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  void *v170;
  uint64_t v171;
  std::__shared_weak_count *v172;
  void **v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  void **v177;
  uint64_t result;
  uint64_t v179;
  void **v180;
  std::__shared_weak_count *v181;
  void *v182[2];
  char v183;
  void *v184[2];
  char v185;
  void *v186;
  std::__shared_weak_count *v187;
  void *v188[2];
  char v189;
  void *v190[2];
  char v191;
  void *v192;
  std::__shared_weak_count *v193;
  void *v194[2];
  char v195;
  void *v196[2];
  char v197;
  void *v198;
  std::__shared_weak_count *v199;
  void **v200;
  std::__shared_weak_count *v201;
  void *v202[2];
  char v203;
  void *v204;
  std::__shared_weak_count *v205;
  void *v206[2];
  char v207;
  void *v208[2];
  char v209;
  void *v210;
  std::__shared_weak_count *v211;
  void *v212[2];
  char v213;
  void *v214[2];
  char v215;
  void *v216;
  std::__shared_weak_count *v217;
  void *v218[2];
  char v219;
  void *v220[2];
  char v221;
  void *v222;
  std::__shared_weak_count *v223;
  __int128 v224;
  __int128 v225;
  void *v226[2];
  uint64_t v227;
  void *v228;
  void *v229;
  _QWORD *v230;
  __n128 v231;
  uint64_t v232;
  uint64_t v233;
  _QWORD *v234;
  char **v235;
  __n128 v236;
  __n128 v237;
  void *__p;
  void *v239;
  _QWORD *v240;
  void *v241;
  void *v242;
  _QWORD *v243;
  void *v244;
  void *v245;
  _QWORD *v246;
  void *v247;
  void *v248;
  _QWORD *v249;
  void *v250;
  void *v251;
  _QWORD *v252;
  void *v253;
  void *v254;
  _QWORD *v255;
  void *v256;
  void *v257;
  _QWORD *v258;
  __n128 v259;
  _QWORD *v260;
  void *v261;
  void *v262;
  char *v263;
  char *v264;
  char **v265;
  _QWORD v266[3];
  _QWORD *v267;
  _BYTE v268[24];
  _BYTE *v269;
  _BYTE v270[24];
  _BYTE *v271;
  void **v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;

  v280 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v260 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (char *)operator new(0x10uLL);
  v263 = v9 + 16;
  *(_QWORD *)v9 = v7;
  *((_QWORD *)v9 + 1) = v8;
  v261 = v9;
  v262 = v9 + 16;
  v272 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v261);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v258 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v256 = v12;
  v257 = v12 + 2;
  v273 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v256);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v255 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  v253 = v15;
  v254 = v15 + 2;
  v274 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v253);
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(0x10uLL);
  v252 = v18 + 2;
  *v18 = v16;
  v18[1] = v17;
  v250 = v18;
  v251 = v18 + 2;
  v275 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v250);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(0x10uLL);
  v249 = v21 + 2;
  *v21 = v19;
  v21[1] = v20;
  v247 = v21;
  v248 = v21 + 2;
  v276 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v247);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(0x10uLL);
  v246 = v24 + 2;
  *v24 = v22;
  v24[1] = v23;
  v244 = v24;
  v245 = v24 + 2;
  v277 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v244);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(0x10uLL);
  v243 = v27 + 2;
  *v27 = v25;
  v27[1] = v26;
  v241 = v27;
  v242 = v27 + 2;
  v278 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v241);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = operator new(0x10uLL);
  v240 = v30 + 2;
  *v30 = v28;
  v30[1] = v29;
  __p = v30;
  v239 = v30 + 2;
  v279 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v272, 8, &v259);
  MIL::IRParameter::Make(&v259, (uint64_t *)&v228);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v228);
  v31 = v228;
  v228 = 0;
  if (v31)
    (*(void (**)(void *))(*(_QWORD *)v31 + 8))(v31);
  v32 = (std::__shared_weak_count *)v259.n128_u64[1];
  if (v259.n128_u64[1])
  {
    v33 = (unint64_t *)(v259.n128_u64[1] + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (__p)
  {
    v239 = __p;
    operator delete(__p);
  }
  if (v241)
  {
    v242 = v241;
    operator delete(v241);
  }
  if (v244)
  {
    v245 = v244;
    operator delete(v244);
  }
  if (v247)
  {
    v248 = v247;
    operator delete(v247);
  }
  if (v250)
  {
    v251 = v250;
    operator delete(v250);
  }
  if (v253)
  {
    v254 = v253;
    operator delete(v253);
  }
  if (v256)
  {
    v257 = v256;
    operator delete(v256);
  }
  if (v261)
  {
    v262 = v261;
    operator delete(v261);
  }
  v35 = v260;
  v36 = MIL::IRUnknownDimension::Make(a1, 0);
  v37 = (char *)operator new(8uLL);
  v261 = v37;
  *(_QWORD *)v37 = v36;
  v263 = v37 + 8;
  v262 = v37 + 8;
  v272 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v261);
  v38 = MIL::IRUnknownDimension::Make(a1, 0);
  v39 = operator new(8uLL);
  v256 = v39;
  *v39 = v38;
  v258 = v39 + 1;
  v257 = v39 + 1;
  v273 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v256);
  v40 = MIL::IRUnknownDimension::Make(a1, 0);
  v41 = operator new(8uLL);
  v253 = v41;
  *v41 = v40;
  v255 = v41 + 1;
  v254 = v41 + 1;
  v274 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v253);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v272, 3, &v237);
  MIL::IRParameter::Make(&v237, (uint64_t *)&v250);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v35, "begin", (uint64_t *)&v250);
  v42 = v250;
  v250 = 0;
  if (v42)
    (*(void (**)(void *))(*(_QWORD *)v42 + 8))(v42);
  v43 = (std::__shared_weak_count *)v237.n128_u64[1];
  if (v237.n128_u64[1])
  {
    v44 = (unint64_t *)(v237.n128_u64[1] + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  if (v253)
  {
    v254 = v253;
    operator delete(v253);
  }
  if (v256)
  {
    v257 = v256;
    operator delete(v256);
  }
  if (v261)
  {
    v262 = v261;
    operator delete(v261);
  }
  v46 = v260;
  v47 = MIL::IRUnknownDimension::Make(a1, 0);
  v48 = (char *)operator new(8uLL);
  v261 = v48;
  *(_QWORD *)v48 = v47;
  v263 = v48 + 8;
  v262 = v48 + 8;
  v272 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v261);
  v49 = MIL::IRUnknownDimension::Make(a1, 0);
  v50 = operator new(8uLL);
  v256 = v50;
  *v50 = v49;
  v258 = v50 + 1;
  v257 = v50 + 1;
  v273 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v256);
  v51 = MIL::IRUnknownDimension::Make(a1, 0);
  v52 = operator new(8uLL);
  v253 = v52;
  *v52 = v51;
  v255 = v52 + 1;
  v254 = v52 + 1;
  v274 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v253);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v272, 3, &v236);
  MIL::IRParameter::Make(&v236, (uint64_t *)&v250);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v46, "size", (uint64_t *)&v250);
  v53 = v250;
  v250 = 0;
  if (v53)
    (*(void (**)(void *))(*(_QWORD *)v53 + 8))(v53);
  v54 = (std::__shared_weak_count *)v236.n128_u64[1];
  if (v236.n128_u64[1])
  {
    v55 = (unint64_t *)(v236.n128_u64[1] + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  if (v253)
  {
    v254 = v253;
    operator delete(v253);
  }
  if (v256)
  {
    v257 = v256;
    operator delete(v256);
  }
  if (v261)
  {
    v262 = v261;
    operator delete(v261);
  }
  v235 = 0;
  v57 = operator new();
  *(_QWORD *)v57 = 0;
  *(_QWORD *)(v57 + 8) = 0;
  *(_QWORD *)(v57 + 16) = 0;
  v272 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v235, (void **)v57);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v272, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v235, 1uLL);
  v58 = v235;
  v59 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v60 = operator new(8uLL);
  v256 = v60;
  *v60 = v59;
  v258 = v60 + 1;
  v257 = v60 + 1;
  v272 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v256);
  v61 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v62 = operator new(8uLL);
  v253 = v62;
  *v62 = v61;
  v255 = v62 + 1;
  v254 = v62 + 1;
  v273 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v253);
  v63 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v64 = operator new(8uLL);
  v250 = v64;
  *v64 = v63;
  v252 = v64 + 1;
  v251 = v64 + 1;
  v274 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v250);
  v65 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v66 = operator new(8uLL);
  v247 = v66;
  *v66 = v65;
  v249 = v66 + 1;
  v248 = v66 + 1;
  v275 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v247);
  v67 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v68 = operator new(8uLL);
  v244 = v68;
  *v68 = v67;
  v246 = v68 + 1;
  v245 = v68 + 1;
  v276 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v244);
  v69 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v70 = operator new(8uLL);
  v241 = v70;
  *v70 = v69;
  v243 = v70 + 1;
  v242 = v70 + 1;
  v277 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v241);
  v71 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v72 = operator new(8uLL);
  __p = v72;
  *v72 = v71;
  v240 = v72 + 1;
  v239 = v72 + 1;
  v278 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&__p);
  v73 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v74 = operator new(8uLL);
  v228 = v74;
  *v74 = v73;
  v230 = v74 + 1;
  v229 = v74 + 1;
  v279 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v228);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v272, 8, &v231);
  MIL::IRParameter::Make(&v231, &v232);
  v75 = v232;
  v233 = v232;
  if (v232)
  {
    v76 = (_QWORD *)operator new();
    v77 = v232;
    *v76 = &unk_1EA99F888;
    v76[1] = 0;
    v76[2] = 0;
    v76[3] = v77;
  }
  else
  {
    v76 = 0;
  }
  v234 = v76;
  v232 = 0;
  v78 = v58[2];
  v79 = v58[1];
  if (v79 >= v78)
  {
    v81 = (v79 - *v58) >> 4;
    v82 = v81 + 1;
    if ((unint64_t)(v81 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v83 = v78 - *v58;
    if (v83 >> 3 > v82)
      v82 = v83 >> 3;
    if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFF0)
      v84 = 0xFFFFFFFFFFFFFFFLL;
    else
      v84 = v82;
    v265 = v58 + 2;
    v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v58 + 2), v84);
    v87 = (uint64_t *)&v85[16 * v81];
    *v87 = v75;
    v87[1] = (uint64_t)v76;
    v234 = 0;
    v233 = 0;
    v89 = *v58;
    v88 = v58[1];
    if (v88 == *v58)
    {
      v92 = v58[1];
      v90 = &v85[16 * v81];
    }
    else
    {
      v90 = &v85[16 * v81];
      do
      {
        v91 = *((_OWORD *)v88 - 1);
        v88 -= 16;
        *((_OWORD *)v90 - 1) = v91;
        v90 -= 16;
        *(_QWORD *)v88 = 0;
        *((_QWORD *)v88 + 1) = 0;
      }
      while (v88 != v89);
      v92 = *v58;
      v88 = v58[1];
    }
    v80 = (char *)(v87 + 2);
    *v58 = v90;
    v262 = v92;
    v58[1] = (char *)(v87 + 2);
    v263 = v88;
    v93 = v58[2];
    v58[2] = &v85[16 * v86];
    v264 = v93;
    v261 = v92;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v261);
  }
  else
  {
    *(_QWORD *)v79 = v75;
    *((_QWORD *)v79 + 1) = v76;
    v80 = v79 + 16;
    v234 = 0;
    v233 = 0;
  }
  v58[1] = v80;
  v94 = v232;
  v232 = 0;
  if (v94)
    (*(void (**)(uint64_t))(*(_QWORD *)v94 + 8))(v94);
  v95 = (std::__shared_weak_count *)v231.n128_u64[1];
  if (v231.n128_u64[1])
  {
    v96 = (unint64_t *)(v231.n128_u64[1] + 8);
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  if (v228)
  {
    v229 = v228;
    operator delete(v228);
  }
  if (__p)
  {
    v239 = __p;
    operator delete(__p);
  }
  if (v241)
  {
    v242 = v241;
    operator delete(v241);
  }
  if (v244)
  {
    v245 = v244;
    operator delete(v244);
  }
  if (v247)
  {
    v248 = v247;
    operator delete(v247);
  }
  if (v250)
  {
    v251 = v250;
    operator delete(v250);
  }
  if (v253)
  {
    v254 = v253;
    operator delete(v253);
  }
  if (v256)
  {
    v257 = v256;
    operator delete(v256);
  }
  *(_OWORD *)v226 = *(_OWORD *)a2;
  v227 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v98 = (uint64_t)v260;
  *(_QWORD *)&v225 = v260;
  if (v260)
  {
    v99 = (_QWORD *)operator new();
    *v99 = &unk_1EA99F8E8;
    v99[1] = 0;
    v99[2] = 0;
    v99[3] = v98;
  }
  else
  {
    v99 = 0;
  }
  *((_QWORD *)&v225 + 1) = v99;
  v260 = 0;
  *(_QWORD *)&v224 = v235;
  if (v235)
  {
    v100 = (_QWORD *)operator new();
    v101 = v235;
    *v100 = &unk_1EA99F948;
    v100[1] = 0;
    v100[2] = 0;
    v100[3] = v101;
  }
  else
  {
    v100 = 0;
  }
  *((_QWORD *)&v224 + 1) = v100;
  v235 = 0;
  v271 = 0;
  v269 = 0;
  MIL::IROperator::Make((__int128 *)v226, &v225, &v224, (uint64_t)v270, (uint64_t)v268, a3);
  v102 = v269;
  if (v269 == v268)
  {
    v103 = 4;
    v102 = v268;
  }
  else
  {
    if (!v269)
      goto LABEL_101;
    v103 = 5;
  }
  (*(void (**)(void))(*v102 + 8 * v103))();
LABEL_101:
  v104 = v271;
  if (v271 == v270)
  {
    v105 = 4;
    v104 = v270;
    goto LABEL_105;
  }
  if (v271)
  {
    v105 = 5;
LABEL_105:
    (*(void (**)(void))(*v104 + 8 * v105))();
  }
  v106 = (std::__shared_weak_count *)*((_QWORD *)&v224 + 1);
  if (*((_QWORD *)&v224 + 1))
  {
    v107 = (unint64_t *)(*((_QWORD *)&v224 + 1) + 8);
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  v109 = (std::__shared_weak_count *)*((_QWORD *)&v225 + 1);
  if (*((_QWORD *)&v225 + 1))
  {
    v110 = (unint64_t *)(*((_QWORD *)&v225 + 1) + 8);
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  if (SHIBYTE(v227) < 0)
    operator delete(v226[0]);
  v112 = *a3;
  v266[0] = &off_1EA99FBD8;
  v266[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceSliceBySize;
  v267 = v266;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v112 + 200))(v112, v266);
  v113 = v267;
  if (v267 == v266)
  {
    v114 = 4;
    v113 = v266;
  }
  else
  {
    if (!v267)
      goto LABEL_123;
    v114 = 5;
  }
  (*(void (**)(void))(*v113 + 8 * v114))();
LABEL_123:
  MIL::Validation::TensorDTypeConstraints::Make(&v272);
  v115 = v272;
  std::string::basic_string[abi:ne180100]<0>(v220, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v220, 0, (uint64_t *)&v261);
  v222 = v261;
  if (v261)
  {
    v116 = (std::__shared_weak_count *)operator new();
    v117 = (std::__shared_weak_count_vtbl *)v261;
    v116->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v116->__shared_owners_ = 0;
    v116->__shared_weak_owners_ = 0;
    v116[1].__vftable = v117;
  }
  else
  {
    v116 = 0;
  }
  v223 = v116;
  v261 = 0;
  std::string::basic_string[abi:ne180100]<0>(v218, "T");
  (*((void (**)(void **, void **, void **))*v115 + 3))(v115, &v222, v218);
  if (v219 < 0)
    operator delete(v218[0]);
  v118 = v223;
  if (v223)
  {
    p_shared_owners = (unint64_t *)&v223->__shared_owners_;
    do
      v120 = __ldaxr(p_shared_owners);
    while (__stlxr(v120 - 1, p_shared_owners));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  v121 = v261;
  v261 = 0;
  if (v121)
    (*(void (**)(void *))(*(_QWORD *)v121 + 8))(v121);
  if (v221 < 0)
    operator delete(v220[0]);
  v122 = v272;
  std::string::basic_string[abi:ne180100]<0>(v214, "begin");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v214, 0, (uint64_t *)&v261);
  v216 = v261;
  if (v261)
  {
    v123 = (std::__shared_weak_count *)operator new();
    v124 = (std::__shared_weak_count_vtbl *)v261;
    v123->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v123->__shared_owners_ = 0;
    v123->__shared_weak_owners_ = 0;
    v123[1].__vftable = v124;
  }
  else
  {
    v123 = 0;
  }
  v217 = v123;
  v261 = 0;
  std::string::basic_string[abi:ne180100]<0>(v212, "U");
  (*((void (**)(void **, void **, void **))*v122 + 3))(v122, &v216, v212);
  if (v213 < 0)
    operator delete(v212[0]);
  v125 = v217;
  if (v217)
  {
    v126 = (unint64_t *)&v217->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  v128 = v261;
  v261 = 0;
  if (v128)
    (*(void (**)(void *))(*(_QWORD *)v128 + 8))(v128);
  if (v215 < 0)
    operator delete(v214[0]);
  v129 = v272;
  std::string::basic_string[abi:ne180100]<0>(v208, "size");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v208, 0, (uint64_t *)&v261);
  v210 = v261;
  if (v261)
  {
    v130 = (std::__shared_weak_count *)operator new();
    v131 = (std::__shared_weak_count_vtbl *)v261;
    v130->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v130->__shared_owners_ = 0;
    v130->__shared_weak_owners_ = 0;
    v130[1].__vftable = v131;
  }
  else
  {
    v130 = 0;
  }
  v211 = v130;
  v261 = 0;
  std::string::basic_string[abi:ne180100]<0>(v206, "U");
  (*((void (**)(void **, void **, void **))*v129 + 3))(v129, &v210, v206);
  if (v207 < 0)
    operator delete(v206[0]);
  v132 = v211;
  if (v211)
  {
    v133 = (unint64_t *)&v211->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  v135 = v261;
  v261 = 0;
  if (v135)
    (*(void (**)(void *))(*(_QWORD *)v135 + 8))(v135);
  if (v209 < 0)
    operator delete(v208[0]);
  v136 = v272;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v261);
  v204 = v261;
  if (v261)
  {
    v137 = (std::__shared_weak_count *)operator new();
    v138 = (std::__shared_weak_count_vtbl *)v261;
    v137->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v137->__shared_owners_ = 0;
    v137->__shared_weak_owners_ = 0;
    v137[1].__vftable = v138;
  }
  else
  {
    v137 = 0;
  }
  v205 = v137;
  v261 = 0;
  std::string::basic_string[abi:ne180100]<0>(v202, "T");
  (*((void (**)(void **, void **, void **))*v136 + 3))(v136, &v204, v202);
  if (v203 < 0)
    operator delete(v202[0]);
  v139 = v205;
  if (v205)
  {
    v140 = (unint64_t *)&v205->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  v142 = v261;
  v261 = 0;
  if (v142)
    (*(void (**)(void *))(*(_QWORD *)v142 + 8))(v142);
  v143 = *a3;
  v200 = v272;
  if (v272)
  {
    v144 = (std::__shared_weak_count *)operator new();
    v145 = v272;
    v144->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v144->__shared_owners_ = 0;
    v144->__shared_weak_owners_ = 0;
    v144[1].__vftable = (std::__shared_weak_count_vtbl *)v145;
  }
  else
  {
    v144 = 0;
  }
  v201 = v144;
  v272 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v143 + 56))(v143, &v200);
  v146 = v201;
  if (v201)
  {
    v147 = (unint64_t *)&v201->__shared_owners_;
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  v149 = v272;
  v272 = 0;
  if (v149)
    (*((void (**)(void **))*v149 + 1))(v149);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v272);
  v150 = v272;
  std::string::basic_string[abi:ne180100]<0>(v196, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v196, 0, (uint64_t *)&v261);
  v198 = v261;
  if (v261)
  {
    v151 = (std::__shared_weak_count *)operator new();
    v152 = (std::__shared_weak_count_vtbl *)v261;
    v151->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v151->__shared_owners_ = 0;
    v151->__shared_weak_owners_ = 0;
    v151[1].__vftable = v152;
  }
  else
  {
    v151 = 0;
  }
  v199 = v151;
  v261 = 0;
  std::string::basic_string[abi:ne180100]<0>(v194, "D");
  (*((void (**)(void **, void **, void **))*v150 + 5))(v150, &v198, v194);
  if (v195 < 0)
    operator delete(v194[0]);
  v153 = v199;
  if (v199)
  {
    v154 = (unint64_t *)&v199->__shared_owners_;
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
      std::__shared_weak_count::__release_weak(v153);
    }
  }
  v156 = v261;
  v261 = 0;
  if (v156)
    (*(void (**)(void *))(*(_QWORD *)v156 + 8))(v156);
  if (v197 < 0)
    operator delete(v196[0]);
  v157 = v272;
  std::string::basic_string[abi:ne180100]<0>(v190, "begin");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v190, 0, (uint64_t *)&v261);
  v192 = v261;
  if (v261)
  {
    v158 = (std::__shared_weak_count *)operator new();
    v159 = (std::__shared_weak_count_vtbl *)v261;
    v158->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v158->__shared_owners_ = 0;
    v158->__shared_weak_owners_ = 0;
    v158[1].__vftable = v159;
  }
  else
  {
    v158 = 0;
  }
  v193 = v158;
  v261 = 0;
  std::string::basic_string[abi:ne180100]<0>(v188, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v157 + 3))(v157, &v192, 0, v188);
  if (v189 < 0)
    operator delete(v188[0]);
  v160 = v193;
  if (v193)
  {
    v161 = (unint64_t *)&v193->__shared_owners_;
    do
      v162 = __ldaxr(v161);
    while (__stlxr(v162 - 1, v161));
    if (!v162)
    {
      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
      std::__shared_weak_count::__release_weak(v160);
    }
  }
  v163 = v261;
  v261 = 0;
  if (v163)
    (*(void (**)(void *))(*(_QWORD *)v163 + 8))(v163);
  if (v191 < 0)
    operator delete(v190[0]);
  v164 = v272;
  std::string::basic_string[abi:ne180100]<0>(v184, "size");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v184, 0, (uint64_t *)&v261);
  v186 = v261;
  if (v261)
  {
    v165 = (std::__shared_weak_count *)operator new();
    v166 = (std::__shared_weak_count_vtbl *)v261;
    v165->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v165->__shared_owners_ = 0;
    v165->__shared_weak_owners_ = 0;
    v165[1].__vftable = v166;
  }
  else
  {
    v165 = 0;
  }
  v187 = v165;
  v261 = 0;
  std::string::basic_string[abi:ne180100]<0>(v182, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v164 + 3))(v164, &v186, 0, v182);
  if (v183 < 0)
    operator delete(v182[0]);
  v167 = v187;
  if (v187)
  {
    v168 = (unint64_t *)&v187->__shared_owners_;
    do
      v169 = __ldaxr(v168);
    while (__stlxr(v169 - 1, v168));
    if (!v169)
    {
      ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
      std::__shared_weak_count::__release_weak(v167);
    }
  }
  v170 = v261;
  v261 = 0;
  if (v170)
    (*(void (**)(void *))(*(_QWORD *)v170 + 8))(v170);
  if (v185 < 0)
    operator delete(v184[0]);
  v171 = *a3;
  v180 = v272;
  if (v272)
  {
    v172 = (std::__shared_weak_count *)operator new();
    v173 = v272;
    v172->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v172->__shared_owners_ = 0;
    v172->__shared_weak_owners_ = 0;
    v172[1].__vftable = (std::__shared_weak_count_vtbl *)v173;
  }
  else
  {
    v172 = 0;
  }
  v181 = v172;
  v272 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v171 + 56))(v171, &v180);
  v174 = v181;
  if (v181)
  {
    v175 = (unint64_t *)&v181->__shared_owners_;
    do
      v176 = __ldaxr(v175);
    while (__stlxr(v176 - 1, v175));
    if (!v176)
    {
      ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
      std::__shared_weak_count::__release_weak(v174);
    }
  }
  v177 = v272;
  v272 = 0;
  if (v177)
    (*((void (**)(void **))*v177 + 1))(v177);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v235, 0);
  result = (uint64_t)v260;
  if (v260)
  {
    v179 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v260);
    return MEMORY[0x1E0C023A0](v179, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0939FDC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 136);
  *(_QWORD *)(v2 - 136) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x248], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x328], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::SlidingWindows::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  unsigned __int8 *v36;
  void **v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  unsigned __int8 *v42;
  void **v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  unsigned __int8 *v48;
  void **v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  char **v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t *v83;
  char *v84;
  char *v85;
  char *v86;
  __int128 v87;
  char *v88;
  char *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  char **v97;
  _QWORD *v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  void **v111;
  std::__shared_weak_count *v112;
  std::__shared_weak_count_vtbl *v113;
  std::__shared_weak_count *v114;
  unint64_t *p_shared_owners;
  unint64_t v116;
  char *v117;
  void **v118;
  std::__shared_weak_count *v119;
  std::__shared_weak_count_vtbl *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  char *v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  void **v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  void **v131;
  void **v132;
  std::__shared_weak_count *v133;
  std::__shared_weak_count_vtbl *v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  char *v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  void **v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  void **v145;
  uint64_t result;
  uint64_t v147;
  void **v148;
  std::__shared_weak_count *v149;
  void *v150[2];
  char v151;
  void *v152[2];
  char v153;
  char *v154;
  std::__shared_weak_count *v155;
  void **v156;
  std::__shared_weak_count *v157;
  void *v158[2];
  char v159;
  char *v160;
  std::__shared_weak_count *v161;
  void *v162[2];
  char v163;
  void *v164[2];
  char v165;
  char *v166;
  std::__shared_weak_count *v167;
  __int128 v168;
  __int128 v169;
  void *v170[2];
  uint64_t v171;
  void *v172;
  void *v173;
  _QWORD *v174;
  __n128 v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  char **v179;
  __n128 v180;
  __n128 v181;
  __n128 v182;
  void *__p;
  void *v184;
  _QWORD *v185;
  void *v186;
  void *v187;
  _QWORD *v188;
  void *v189;
  void *v190;
  _QWORD *v191;
  void *v192;
  void *v193;
  _QWORD *v194;
  void *v195;
  void *v196;
  _QWORD *v197;
  void *v198;
  void *v199;
  _QWORD *v200;
  void *v201;
  void *v202;
  _QWORD *v203;
  __n128 v204;
  _QWORD *v205;
  _QWORD v206[3];
  _QWORD *v207;
  _BYTE v208[24];
  _BYTE *v209;
  _QWORD v210[3];
  _QWORD *v211;
  void **v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  char *Scalar;
  char *v221;
  char *v222;
  char *v223;
  char **v224;
  uint64_t v225;

  v225 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v205 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (char *)operator new(0x10uLL);
  v221 = v9 + 16;
  v222 = v9 + 16;
  *(_QWORD *)v9 = v7;
  *((_QWORD *)v9 + 1) = v8;
  Scalar = v9;
  v212 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v203 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v201 = v12;
  v202 = v12 + 2;
  v213 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v201);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v200 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  v198 = v15;
  v199 = v15 + 2;
  v214 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v198);
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(0x10uLL);
  v196 = v18 + 2;
  v197 = v18 + 2;
  *v18 = v16;
  v18[1] = v17;
  v195 = v18;
  v215 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v195);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(0x10uLL);
  v193 = v21 + 2;
  v194 = v21 + 2;
  *v21 = v19;
  v21[1] = v20;
  v192 = v21;
  v216 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v192);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(0x10uLL);
  v190 = v24 + 2;
  v191 = v24 + 2;
  *v24 = v22;
  v24[1] = v23;
  v189 = v24;
  v217 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v189);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(0x10uLL);
  v187 = v27 + 2;
  v188 = v27 + 2;
  *v27 = v25;
  v27[1] = v26;
  v186 = v27;
  v218 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v186);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = operator new(0x10uLL);
  v184 = v30 + 2;
  v185 = v30 + 2;
  *v30 = v28;
  v30[1] = v29;
  __p = v30;
  v219 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v212, 8, &v204);
  MIL::IRParameter::Make(&v204, (uint64_t *)&v172);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v172);
  v31 = v172;
  v172 = 0;
  if (v31)
    (*(void (**)(void *))(*(_QWORD *)v31 + 8))(v31);
  v32 = (std::__shared_weak_count *)v204.n128_u64[1];
  if (v204.n128_u64[1])
  {
    v33 = (unint64_t *)(v204.n128_u64[1] + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (__p)
  {
    v184 = __p;
    operator delete(__p);
  }
  if (v186)
  {
    v187 = v186;
    operator delete(v186);
  }
  if (v189)
  {
    v190 = v189;
    operator delete(v189);
  }
  if (v192)
  {
    v193 = v192;
    operator delete(v192);
  }
  if (v195)
  {
    v196 = v195;
    operator delete(v195);
  }
  if (v198)
  {
    v199 = v198;
    operator delete(v198);
  }
  if (v201)
  {
    v202 = v201;
    operator delete(v201);
  }
  if (Scalar)
  {
    v221 = Scalar;
    operator delete(Scalar);
  }
  v35 = v205;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v182);
  MIL::IRParameter::Make(&v182, (uint64_t *)&v212);
  v36 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v35, "axis", (uint64_t *)&v212);
  v37 = v212;
  v212 = 0;
  if (v37)
    (*((void (**)(void **))*v37 + 1))(v37);
  v38 = (std::__shared_weak_count *)v182.n128_u64[1];
  if (v182.n128_u64[1])
  {
    v39 = (unint64_t *)(v182.n128_u64[1] + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v36 + 5) + 32))(*((_QWORD *)v36 + 5), 1);
  v41 = v205;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v181);
  MIL::IRParameter::Make(&v181, (uint64_t *)&v212);
  v42 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v41, "size", (uint64_t *)&v212);
  v43 = v212;
  v212 = 0;
  if (v43)
    (*((void (**)(void **))*v43 + 1))(v43);
  v44 = (std::__shared_weak_count *)v181.n128_u64[1];
  if (v181.n128_u64[1])
  {
    v45 = (unint64_t *)(v181.n128_u64[1] + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v42 + 5) + 32))(*((_QWORD *)v42 + 5), 1);
  v47 = v205;
  Scalar = (char *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v180);
  MIL::IRParameter::Make(&v180, (uint64_t *)&v212);
  v48 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(v47, "stride", (uint64_t *)&v212);
  v49 = v212;
  v212 = 0;
  if (v49)
    (*((void (**)(void **))*v49 + 1))(v49);
  v50 = (std::__shared_weak_count *)v180.n128_u64[1];
  if (v180.n128_u64[1])
  {
    v51 = (unint64_t *)(v180.n128_u64[1] + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v48 + 5) + 32))(*((_QWORD *)v48 + 5), 1);
  v179 = 0;
  v53 = operator new();
  *(_QWORD *)v53 = 0;
  *(_QWORD *)(v53 + 8) = 0;
  *(_QWORD *)(v53 + 16) = 0;
  v212 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v179, (void **)v53);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v212, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v179, 1uLL);
  v54 = v179;
  v55 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v56 = operator new(8uLL);
  v201 = v56;
  *v56 = v55;
  v203 = v56 + 1;
  v202 = v56 + 1;
  v212 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v201);
  v57 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v58 = operator new(8uLL);
  v198 = v58;
  *v58 = v57;
  v200 = v58 + 1;
  v199 = v58 + 1;
  v213 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v198);
  v59 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v60 = operator new(8uLL);
  v195 = v60;
  *v60 = v59;
  v196 = v60 + 1;
  v197 = v60 + 1;
  v214 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v195);
  v61 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v62 = operator new(8uLL);
  v192 = v62;
  *v62 = v61;
  v193 = v62 + 1;
  v194 = v62 + 1;
  v215 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v192);
  v63 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v64 = operator new(8uLL);
  v189 = v64;
  *v64 = v63;
  v190 = v64 + 1;
  v191 = v64 + 1;
  v216 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v189);
  v65 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v66 = operator new(8uLL);
  v186 = v66;
  *v66 = v65;
  v187 = v66 + 1;
  v188 = v66 + 1;
  v217 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v186);
  v67 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v68 = operator new(8uLL);
  __p = v68;
  *v68 = v67;
  v184 = v68 + 1;
  v185 = v68 + 1;
  v218 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&__p);
  v69 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v70 = operator new(8uLL);
  v172 = v70;
  *v70 = v69;
  v173 = v70 + 1;
  v174 = v70 + 1;
  v219 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v172);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v212, 8, &v175);
  MIL::IRParameter::Make(&v175, &v176);
  v71 = v176;
  v177 = v176;
  if (v176)
  {
    v72 = (_QWORD *)operator new();
    v73 = v176;
    *v72 = &unk_1EA99F888;
    v72[1] = 0;
    v72[2] = 0;
    v72[3] = v73;
  }
  else
  {
    v72 = 0;
  }
  v178 = v72;
  v176 = 0;
  v74 = v54[2];
  v75 = v54[1];
  if (v75 >= v74)
  {
    v77 = (v75 - *v54) >> 4;
    v78 = v77 + 1;
    if ((unint64_t)(v77 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v79 = v74 - *v54;
    if (v79 >> 3 > v78)
      v78 = v79 >> 3;
    if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF0)
      v80 = 0xFFFFFFFFFFFFFFFLL;
    else
      v80 = v78;
    v224 = v54 + 2;
    v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v54 + 2), v80);
    v83 = (uint64_t *)&v81[16 * v77];
    *v83 = v71;
    v83[1] = (uint64_t)v72;
    v177 = 0;
    v178 = 0;
    v85 = *v54;
    v84 = v54[1];
    if (v84 == *v54)
    {
      v88 = v54[1];
      v86 = &v81[16 * v77];
    }
    else
    {
      v86 = &v81[16 * v77];
      do
      {
        v87 = *((_OWORD *)v84 - 1);
        v84 -= 16;
        *((_OWORD *)v86 - 1) = v87;
        v86 -= 16;
        *(_QWORD *)v84 = 0;
        *((_QWORD *)v84 + 1) = 0;
      }
      while (v84 != v85);
      v88 = *v54;
      v84 = v54[1];
    }
    v76 = (char *)(v83 + 2);
    *v54 = v86;
    Scalar = v88;
    v221 = v88;
    v54[1] = (char *)(v83 + 2);
    v222 = v84;
    v89 = v54[2];
    v54[2] = &v81[16 * v82];
    v223 = v89;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v75 = v71;
    *((_QWORD *)v75 + 1) = v72;
    v76 = v75 + 16;
    v177 = 0;
    v178 = 0;
  }
  v54[1] = v76;
  v90 = v176;
  v176 = 0;
  if (v90)
    (*(void (**)(uint64_t))(*(_QWORD *)v90 + 8))(v90);
  v91 = (std::__shared_weak_count *)v175.n128_u64[1];
  if (v175.n128_u64[1])
  {
    v92 = (unint64_t *)(v175.n128_u64[1] + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  if (v172)
  {
    v173 = v172;
    operator delete(v172);
  }
  if (__p)
  {
    v184 = __p;
    operator delete(__p);
  }
  if (v186)
  {
    v187 = v186;
    operator delete(v186);
  }
  if (v189)
  {
    v190 = v189;
    operator delete(v189);
  }
  if (v192)
  {
    v193 = v192;
    operator delete(v192);
  }
  if (v195)
  {
    v196 = v195;
    operator delete(v195);
  }
  if (v198)
  {
    v199 = v198;
    operator delete(v198);
  }
  if (v201)
  {
    v202 = v201;
    operator delete(v201);
  }
  *(_OWORD *)v170 = *(_OWORD *)a2;
  v171 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v94 = (uint64_t)v205;
  *(_QWORD *)&v169 = v205;
  if (v205)
  {
    v95 = (_QWORD *)operator new();
    *v95 = &unk_1EA99F8E8;
    v95[1] = 0;
    v95[2] = 0;
    v95[3] = v94;
  }
  else
  {
    v95 = 0;
  }
  *((_QWORD *)&v169 + 1) = v95;
  v205 = 0;
  *(_QWORD *)&v168 = v179;
  if (v179)
  {
    v96 = (_QWORD *)operator new();
    v97 = v179;
    *v96 = &unk_1EA99F948;
    v96[1] = 0;
    v96[2] = 0;
    v96[3] = v97;
  }
  else
  {
    v96 = 0;
  }
  *((_QWORD *)&v168 + 1) = v96;
  v179 = 0;
  v210[0] = &unk_1EA99FAC8;
  v210[1] = MIL::Operators::Common::ios17::CustomValidators::ValidateSlidingWindows;
  v211 = v210;
  v209 = 0;
  MIL::IROperator::Make((__int128 *)v170, &v169, &v168, (uint64_t)v210, (uint64_t)v208, a3);
  v98 = v209;
  if (v209 == v208)
  {
    v99 = 4;
    v98 = v208;
  }
  else
  {
    if (!v209)
      goto LABEL_96;
    v99 = 5;
  }
  (*(void (**)(void))(*v98 + 8 * v99))();
LABEL_96:
  v100 = v211;
  if (v211 == v210)
  {
    v101 = 4;
    v100 = v210;
    goto LABEL_100;
  }
  if (v211)
  {
    v101 = 5;
LABEL_100:
    (*(void (**)(void))(*v100 + 8 * v101))();
  }
  v102 = (std::__shared_weak_count *)*((_QWORD *)&v168 + 1);
  if (*((_QWORD *)&v168 + 1))
  {
    v103 = (unint64_t *)(*((_QWORD *)&v168 + 1) + 8);
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = (std::__shared_weak_count *)*((_QWORD *)&v169 + 1);
  if (*((_QWORD *)&v169 + 1))
  {
    v106 = (unint64_t *)(*((_QWORD *)&v169 + 1) + 8);
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  if (SHIBYTE(v171) < 0)
    operator delete(v170[0]);
  v108 = *a3;
  v206[0] = &off_1EA99FBD8;
  v206[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceSlidingWindows;
  v207 = v206;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v108 + 200))(v108, v206);
  v109 = v207;
  if (v207 == v206)
  {
    v110 = 4;
    v109 = v206;
  }
  else
  {
    if (!v207)
      goto LABEL_118;
    v110 = 5;
  }
  (*(void (**)(void))(*v109 + 8 * v110))();
LABEL_118:
  MIL::Validation::TensorDTypeConstraints::Make(&v212);
  v111 = v212;
  std::string::basic_string[abi:ne180100]<0>(v164, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v164, 0, (uint64_t *)&Scalar);
  v166 = Scalar;
  if (Scalar)
  {
    v112 = (std::__shared_weak_count *)operator new();
    v113 = (std::__shared_weak_count_vtbl *)Scalar;
    v112->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v112->__shared_owners_ = 0;
    v112->__shared_weak_owners_ = 0;
    v112[1].__vftable = v113;
  }
  else
  {
    v112 = 0;
  }
  v167 = v112;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v162, "T");
  (*((void (**)(void **, char **, void **))*v111 + 3))(v111, &v166, v162);
  if (v163 < 0)
    operator delete(v162[0]);
  v114 = v167;
  if (v167)
  {
    p_shared_owners = (unint64_t *)&v167->__shared_owners_;
    do
      v116 = __ldaxr(p_shared_owners);
    while (__stlxr(v116 - 1, p_shared_owners));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = Scalar;
  Scalar = 0;
  if (v117)
    (*(void (**)(char *))(*(_QWORD *)v117 + 8))(v117);
  if (v165 < 0)
    operator delete(v164[0]);
  v118 = v212;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v160 = Scalar;
  if (Scalar)
  {
    v119 = (std::__shared_weak_count *)operator new();
    v120 = (std::__shared_weak_count_vtbl *)Scalar;
    v119->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v119->__shared_owners_ = 0;
    v119->__shared_weak_owners_ = 0;
    v119[1].__vftable = v120;
  }
  else
  {
    v119 = 0;
  }
  v161 = v119;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v158, "T");
  (*((void (**)(void **, char **, void **))*v118 + 3))(v118, &v160, v158);
  if (v159 < 0)
    operator delete(v158[0]);
  v121 = v161;
  if (v161)
  {
    v122 = (unint64_t *)&v161->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = Scalar;
  Scalar = 0;
  if (v124)
    (*(void (**)(char *))(*(_QWORD *)v124 + 8))(v124);
  v125 = *a3;
  v156 = v212;
  if (v212)
  {
    v126 = (std::__shared_weak_count *)operator new();
    v127 = v212;
    v126->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v126->__shared_owners_ = 0;
    v126->__shared_weak_owners_ = 0;
    v126[1].__vftable = (std::__shared_weak_count_vtbl *)v127;
  }
  else
  {
    v126 = 0;
  }
  v157 = v126;
  v212 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v125 + 56))(v125, &v156);
  v128 = v157;
  if (v157)
  {
    v129 = (unint64_t *)&v157->__shared_owners_;
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v131 = v212;
  v212 = 0;
  if (v131)
    (*((void (**)(void **))*v131 + 1))(v131);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v212);
  v132 = v212;
  std::string::basic_string[abi:ne180100]<0>(v152, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v152, 0, (uint64_t *)&Scalar);
  v154 = Scalar;
  if (Scalar)
  {
    v133 = (std::__shared_weak_count *)operator new();
    v134 = (std::__shared_weak_count_vtbl *)Scalar;
    v133->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v133->__shared_owners_ = 0;
    v133->__shared_weak_owners_ = 0;
    v133[1].__vftable = v134;
  }
  else
  {
    v133 = 0;
  }
  v155 = v133;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v150, "D");
  (*((void (**)(void **, char **, _QWORD, void **))*v132 + 3))(v132, &v154, 0, v150);
  if (v151 < 0)
    operator delete(v150[0]);
  v135 = v155;
  if (v155)
  {
    v136 = (unint64_t *)&v155->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = Scalar;
  Scalar = 0;
  if (v138)
    (*(void (**)(char *))(*(_QWORD *)v138 + 8))(v138);
  if (v153 < 0)
    operator delete(v152[0]);
  v139 = *a3;
  v148 = v212;
  if (v212)
  {
    v140 = (std::__shared_weak_count *)operator new();
    v141 = v212;
    v140->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v140->__shared_owners_ = 0;
    v140->__shared_weak_owners_ = 0;
    v140[1].__vftable = (std::__shared_weak_count_vtbl *)v141;
  }
  else
  {
    v140 = 0;
  }
  v149 = v140;
  v212 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v139 + 56))(v139, &v148);
  v142 = v149;
  if (v149)
  {
    v143 = (unint64_t *)&v149->__shared_owners_;
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  v145 = v212;
  v212 = 0;
  if (v145)
    (*((void (**)(void **))*v145 + 1))(v145);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v179, 0);
  result = (uint64_t)v205;
  if (v205)
  {
    v147 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v205);
    return MEMORY[0x1E0C023A0](v147, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E093B7BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void **a50)
{
  uint64_t *v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;

  v53 = *(_QWORD *)(v51 - 176);
  *(_QWORD *)(v51 - 176) = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  v54 = *v50;
  *v50 = 0;
  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x238], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::Squeeze::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  void **v37;
  unsigned __int8 *v38;
  void *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  char **v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t *v73;
  char *v74;
  char *v75;
  char *v76;
  __int128 v77;
  char *v78;
  char *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  char **v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  void **v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  std::__shared_weak_count *v104;
  unint64_t *p_shared_owners;
  unint64_t v106;
  void *v107;
  void **v108;
  std::__shared_weak_count *v109;
  std::__shared_weak_count_vtbl *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  void **v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  void **v121;
  void **v122;
  std::__shared_weak_count *v123;
  std::__shared_weak_count_vtbl *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  void *v128;
  void **v129;
  std::__shared_weak_count *v130;
  std::__shared_weak_count_vtbl *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  void *v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  void **v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  void **v142;
  uint64_t result;
  uint64_t v144;
  void **v145;
  std::__shared_weak_count *v146;
  void *v147[2];
  char v148;
  void *v149[2];
  char v150;
  void *v151;
  std::__shared_weak_count *v152;
  void *v153[2];
  char v154;
  void *v155[2];
  char v156;
  void *v157;
  std::__shared_weak_count *v158;
  void **v159;
  std::__shared_weak_count *v160;
  void *v161[2];
  char v162;
  void *v163;
  std::__shared_weak_count *v164;
  void *v165[2];
  char v166;
  void *v167[2];
  char v168;
  void *v169;
  std::__shared_weak_count *v170;
  __int128 v171;
  __int128 v172;
  void *v173[2];
  uint64_t v174;
  void *v175;
  void *v176;
  _QWORD *v177;
  __n128 v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  char **v182;
  __n128 v183;
  void *__p;
  void *v185;
  _QWORD *v186;
  void *v187;
  void *v188;
  _QWORD *v189;
  void *v190;
  void *v191;
  _QWORD *v192;
  void *v193;
  void *v194;
  _QWORD *v195;
  void *v196;
  void *v197;
  _QWORD *v198;
  void *v199;
  void *v200;
  _QWORD *v201;
  __n128 v202;
  _QWORD *v203;
  void *v204;
  void *v205;
  char *v206;
  char *v207;
  char **v208;
  _QWORD v209[3];
  _QWORD *v210;
  _BYTE v211[24];
  _BYTE *v212;
  _QWORD v213[3];
  _QWORD *v214;
  void *v215;
  void *v216;
  _QWORD *v217;
  void **v218;
  void **v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;

  v226 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v203 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (char *)operator new(0x10uLL);
  v206 = v9 + 16;
  *(_QWORD *)v9 = v7;
  *((_QWORD *)v9 + 1) = v8;
  v204 = v9;
  v205 = v9 + 16;
  v218 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v204);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v216 = v12 + 2;
  v217 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v215 = v12;
  v219 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v215);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v201 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  v199 = v15;
  v200 = v15 + 2;
  v220 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v199);
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(0x10uLL);
  v198 = v18 + 2;
  *v18 = v16;
  v18[1] = v17;
  v196 = v18;
  v197 = v18 + 2;
  v221 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v196);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(0x10uLL);
  v194 = v21 + 2;
  v195 = v21 + 2;
  *v21 = v19;
  v21[1] = v20;
  v193 = v21;
  v222 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v193);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(0x10uLL);
  v191 = v24 + 2;
  v192 = v24 + 2;
  *v24 = v22;
  v24[1] = v23;
  v190 = v24;
  v223 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v190);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(0x10uLL);
  v188 = v27 + 2;
  v189 = v27 + 2;
  *v27 = v25;
  v27[1] = v26;
  v187 = v27;
  v224 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v187);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = operator new(0x10uLL);
  v185 = v30 + 2;
  v186 = v30 + 2;
  *v30 = v28;
  v30[1] = v29;
  __p = v30;
  v225 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v218, 8, &v202);
  MIL::IRParameter::Make(&v202, (uint64_t *)&v175);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v175);
  v31 = v175;
  v175 = 0;
  if (v31)
    (*(void (**)(void *))(*(_QWORD *)v31 + 8))(v31);
  v32 = (std::__shared_weak_count *)v202.n128_u64[1];
  if (v202.n128_u64[1])
  {
    v33 = (unint64_t *)(v202.n128_u64[1] + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (__p)
  {
    v185 = __p;
    operator delete(__p);
  }
  if (v187)
  {
    v188 = v187;
    operator delete(v187);
  }
  if (v190)
  {
    v191 = v190;
    operator delete(v190);
  }
  if (v193)
  {
    v194 = v193;
    operator delete(v193);
  }
  if (v196)
  {
    v197 = v196;
    operator delete(v196);
  }
  if (v199)
  {
    v200 = v199;
    operator delete(v199);
  }
  if (v215)
  {
    v216 = v215;
    operator delete(v215);
  }
  if (v204)
  {
    v205 = v204;
    operator delete(v204);
  }
  v35 = v203;
  v36 = MIL::IRUnknownDimension::Make(a1, 0);
  v37 = (void **)operator new(8uLL);
  v218 = v37;
  *v37 = (void *)v36;
  v219 = v37 + 1;
  v220 = (uint64_t)(v37 + 1);
  v215 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v218);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v215, 1, &v183);
  MIL::IRParameter::Make(&v183, (uint64_t *)&v204);
  v38 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v35, "axes", (uint64_t *)&v204);
  v39 = v204;
  v204 = 0;
  if (v39)
    (*(void (**)(void *))(*(_QWORD *)v39 + 8))(v39);
  v40 = (std::__shared_weak_count *)v183.n128_u64[1];
  if (v183.n128_u64[1])
  {
    v41 = (unint64_t *)(v183.n128_u64[1] + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  if (v218)
  {
    v219 = v218;
    operator delete(v218);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v38 + 5) + 32))(*((_QWORD *)v38 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v38 + 5) + 48))(*((_QWORD *)v38 + 5), 1);
  v182 = 0;
  v43 = operator new();
  *(_QWORD *)v43 = 0;
  *(_QWORD *)(v43 + 8) = 0;
  *(_QWORD *)(v43 + 16) = 0;
  v218 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v182, (void **)v43);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v218, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v182, 1uLL);
  v44 = v182;
  v45 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v46 = operator new(8uLL);
  v215 = v46;
  *v46 = v45;
  v216 = v46 + 1;
  v217 = v46 + 1;
  v218 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v215);
  v47 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v48 = operator new(8uLL);
  v199 = v48;
  *v48 = v47;
  v201 = v48 + 1;
  v200 = v48 + 1;
  v219 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v199);
  v49 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v50 = operator new(8uLL);
  v196 = v50;
  *v50 = v49;
  v198 = v50 + 1;
  v197 = v50 + 1;
  v220 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v196);
  v51 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v52 = operator new(8uLL);
  v193 = v52;
  *v52 = v51;
  v194 = v52 + 1;
  v195 = v52 + 1;
  v221 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v193);
  v53 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v54 = operator new(8uLL);
  v190 = v54;
  *v54 = v53;
  v191 = v54 + 1;
  v192 = v54 + 1;
  v222 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v190);
  v55 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v56 = operator new(8uLL);
  v187 = v56;
  *v56 = v55;
  v188 = v56 + 1;
  v189 = v56 + 1;
  v223 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v187);
  v57 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v58 = operator new(8uLL);
  __p = v58;
  *v58 = v57;
  v185 = v58 + 1;
  v186 = v58 + 1;
  v224 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&__p);
  v59 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v60 = operator new(8uLL);
  v175 = v60;
  *v60 = v59;
  v176 = v60 + 1;
  v177 = v60 + 1;
  v225 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v175);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v218, 8, &v178);
  MIL::IRParameter::Make(&v178, &v179);
  v61 = v179;
  v180 = v179;
  if (v179)
  {
    v62 = (_QWORD *)operator new();
    v63 = v179;
    *v62 = &unk_1EA99F888;
    v62[1] = 0;
    v62[2] = 0;
    v62[3] = v63;
  }
  else
  {
    v62 = 0;
  }
  v181 = v62;
  v179 = 0;
  v64 = v44[2];
  v65 = v44[1];
  if (v65 >= v64)
  {
    v67 = (v65 - *v44) >> 4;
    v68 = v67 + 1;
    if ((unint64_t)(v67 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v69 = v64 - *v44;
    if (v69 >> 3 > v68)
      v68 = v69 >> 3;
    if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF0)
      v70 = 0xFFFFFFFFFFFFFFFLL;
    else
      v70 = v68;
    v208 = v44 + 2;
    v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v44 + 2), v70);
    v73 = (uint64_t *)&v71[16 * v67];
    *v73 = v61;
    v73[1] = (uint64_t)v62;
    v180 = 0;
    v181 = 0;
    v75 = *v44;
    v74 = v44[1];
    if (v74 == *v44)
    {
      v78 = v44[1];
      v76 = &v71[16 * v67];
    }
    else
    {
      v76 = &v71[16 * v67];
      do
      {
        v77 = *((_OWORD *)v74 - 1);
        v74 -= 16;
        *((_OWORD *)v76 - 1) = v77;
        v76 -= 16;
        *(_QWORD *)v74 = 0;
        *((_QWORD *)v74 + 1) = 0;
      }
      while (v74 != v75);
      v78 = *v44;
      v74 = v44[1];
    }
    v66 = (char *)(v73 + 2);
    *v44 = v76;
    v205 = v78;
    v44[1] = (char *)(v73 + 2);
    v206 = v74;
    v79 = v44[2];
    v44[2] = &v71[16 * v72];
    v207 = v79;
    v204 = v78;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v204);
  }
  else
  {
    *(_QWORD *)v65 = v61;
    *((_QWORD *)v65 + 1) = v62;
    v66 = v65 + 16;
    v180 = 0;
    v181 = 0;
  }
  v44[1] = v66;
  v80 = v179;
  v179 = 0;
  if (v80)
    (*(void (**)(uint64_t))(*(_QWORD *)v80 + 8))(v80);
  v81 = (std::__shared_weak_count *)v178.n128_u64[1];
  if (v178.n128_u64[1])
  {
    v82 = (unint64_t *)(v178.n128_u64[1] + 8);
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  if (v175)
  {
    v176 = v175;
    operator delete(v175);
  }
  if (__p)
  {
    v185 = __p;
    operator delete(__p);
  }
  if (v187)
  {
    v188 = v187;
    operator delete(v187);
  }
  if (v190)
  {
    v191 = v190;
    operator delete(v190);
  }
  if (v193)
  {
    v194 = v193;
    operator delete(v193);
  }
  if (v196)
  {
    v197 = v196;
    operator delete(v196);
  }
  if (v199)
  {
    v200 = v199;
    operator delete(v199);
  }
  if (v215)
  {
    v216 = v215;
    operator delete(v215);
  }
  *(_OWORD *)v173 = *(_OWORD *)a2;
  v174 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v84 = (uint64_t)v203;
  *(_QWORD *)&v172 = v203;
  if (v203)
  {
    v85 = (_QWORD *)operator new();
    *v85 = &unk_1EA99F8E8;
    v85[1] = 0;
    v85[2] = 0;
    v85[3] = v84;
  }
  else
  {
    v85 = 0;
  }
  *((_QWORD *)&v172 + 1) = v85;
  v203 = 0;
  *(_QWORD *)&v171 = v182;
  if (v182)
  {
    v86 = (_QWORD *)operator new();
    v87 = v182;
    *v86 = &unk_1EA99F948;
    v86[1] = 0;
    v86[2] = 0;
    v86[3] = v87;
  }
  else
  {
    v86 = 0;
  }
  *((_QWORD *)&v171 + 1) = v86;
  v182 = 0;
  v213[0] = &unk_1EA99FAC8;
  v213[1] = MIL::Operators::Common::ios17::CustomValidators::ValidateSqueeze;
  v214 = v213;
  v212 = 0;
  MIL::IROperator::Make((__int128 *)v173, &v172, &v171, (uint64_t)v213, (uint64_t)v211, a3);
  v88 = v212;
  if (v212 == v211)
  {
    v89 = 4;
    v88 = v211;
  }
  else
  {
    if (!v212)
      goto LABEL_84;
    v89 = 5;
  }
  (*(void (**)(void))(*v88 + 8 * v89))();
LABEL_84:
  v90 = v214;
  if (v214 == v213)
  {
    v91 = 4;
    v90 = v213;
    goto LABEL_88;
  }
  if (v214)
  {
    v91 = 5;
LABEL_88:
    (*(void (**)(void))(*v90 + 8 * v91))();
  }
  v92 = (std::__shared_weak_count *)*((_QWORD *)&v171 + 1);
  if (*((_QWORD *)&v171 + 1))
  {
    v93 = (unint64_t *)(*((_QWORD *)&v171 + 1) + 8);
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = (std::__shared_weak_count *)*((_QWORD *)&v172 + 1);
  if (*((_QWORD *)&v172 + 1))
  {
    v96 = (unint64_t *)(*((_QWORD *)&v172 + 1) + 8);
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  if (SHIBYTE(v174) < 0)
    operator delete(v173[0]);
  v98 = *a3;
  v209[0] = &off_1EA99FBD8;
  v209[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceSqueeze;
  v210 = v209;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v98 + 200))(v98, v209);
  v99 = v210;
  if (v210 == v209)
  {
    v100 = 4;
    v99 = v209;
  }
  else
  {
    if (!v210)
      goto LABEL_106;
    v100 = 5;
  }
  (*(void (**)(void))(*v99 + 8 * v100))();
LABEL_106:
  MIL::Validation::TensorDTypeConstraints::Make(&v218);
  v101 = v218;
  std::string::basic_string[abi:ne180100]<0>(v167, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v167, 0, (uint64_t *)&v204);
  v169 = v204;
  if (v204)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = (std::__shared_weak_count_vtbl *)v204;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v170 = v102;
  v204 = 0;
  std::string::basic_string[abi:ne180100]<0>(v165, "T");
  (*((void (**)(void **, void **, void **))*v101 + 3))(v101, &v169, v165);
  if (v166 < 0)
    operator delete(v165[0]);
  v104 = v170;
  if (v170)
  {
    p_shared_owners = (unint64_t *)&v170->__shared_owners_;
    do
      v106 = __ldaxr(p_shared_owners);
    while (__stlxr(v106 - 1, p_shared_owners));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = v204;
  v204 = 0;
  if (v107)
    (*(void (**)(void *))(*(_QWORD *)v107 + 8))(v107);
  if (v168 < 0)
    operator delete(v167[0]);
  v108 = v218;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v204);
  v163 = v204;
  if (v204)
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = (std::__shared_weak_count_vtbl *)v204;
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = v110;
  }
  else
  {
    v109 = 0;
  }
  v164 = v109;
  v204 = 0;
  std::string::basic_string[abi:ne180100]<0>(v161, "T");
  (*((void (**)(void **, void **, void **))*v108 + 3))(v108, &v163, v161);
  if (v162 < 0)
    operator delete(v161[0]);
  v111 = v164;
  if (v164)
  {
    v112 = (unint64_t *)&v164->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = v204;
  v204 = 0;
  if (v114)
    (*(void (**)(void *))(*(_QWORD *)v114 + 8))(v114);
  v115 = *a3;
  v159 = v218;
  if (v218)
  {
    v116 = (std::__shared_weak_count *)operator new();
    v117 = v218;
    v116->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v116->__shared_owners_ = 0;
    v116->__shared_weak_owners_ = 0;
    v116[1].__vftable = (std::__shared_weak_count_vtbl *)v117;
  }
  else
  {
    v116 = 0;
  }
  v160 = v116;
  v218 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v115 + 56))(v115, &v159);
  v118 = v160;
  if (v160)
  {
    v119 = (unint64_t *)&v160->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  v121 = v218;
  v218 = 0;
  if (v121)
    (*((void (**)(void **))*v121 + 1))(v121);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v218);
  v122 = v218;
  std::string::basic_string[abi:ne180100]<0>(v155, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v155, 0, (uint64_t *)&v204);
  v157 = v204;
  if (v204)
  {
    v123 = (std::__shared_weak_count *)operator new();
    v124 = (std::__shared_weak_count_vtbl *)v204;
    v123->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v123->__shared_owners_ = 0;
    v123->__shared_weak_owners_ = 0;
    v123[1].__vftable = v124;
  }
  else
  {
    v123 = 0;
  }
  v158 = v123;
  v204 = 0;
  std::string::basic_string[abi:ne180100]<0>(v153, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v122 + 3))(v122, &v157, 0, v153);
  if (v154 < 0)
    operator delete(v153[0]);
  v125 = v158;
  if (v158)
  {
    v126 = (unint64_t *)&v158->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  v128 = v204;
  v204 = 0;
  if (v128)
    (*(void (**)(void *))(*(_QWORD *)v128 + 8))(v128);
  if (v156 < 0)
    operator delete(v155[0]);
  v129 = v218;
  std::string::basic_string[abi:ne180100]<0>(v149, "axes");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v149, 1, (uint64_t *)&v204);
  v151 = v204;
  if (v204)
  {
    v130 = (std::__shared_weak_count *)operator new();
    v131 = (std::__shared_weak_count_vtbl *)v204;
    v130->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v130->__shared_owners_ = 0;
    v130->__shared_weak_owners_ = 0;
    v130[1].__vftable = v131;
  }
  else
  {
    v130 = 0;
  }
  v152 = v130;
  v204 = 0;
  std::string::basic_string[abi:ne180100]<0>(v147, "K");
  (*((void (**)(void **, void **, _QWORD, void **))*v129 + 3))(v129, &v151, 0, v147);
  if (v148 < 0)
    operator delete(v147[0]);
  v132 = v152;
  if (v152)
  {
    v133 = (unint64_t *)&v152->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  v135 = v204;
  v204 = 0;
  if (v135)
    (*(void (**)(void *))(*(_QWORD *)v135 + 8))(v135);
  if (v150 < 0)
    operator delete(v149[0]);
  v136 = *a3;
  v145 = v218;
  if (v218)
  {
    v137 = (std::__shared_weak_count *)operator new();
    v138 = v218;
    v137->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v137->__shared_owners_ = 0;
    v137->__shared_weak_owners_ = 0;
    v137[1].__vftable = (std::__shared_weak_count_vtbl *)v138;
  }
  else
  {
    v137 = 0;
  }
  v146 = v137;
  v218 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v136 + 56))(v136, &v145);
  v139 = v146;
  if (v146)
  {
    v140 = (unint64_t *)&v146->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  v142 = v218;
  v218 = 0;
  if (v142)
    (*((void (**)(void **))*v142 + 1))(v142);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v182, 0);
  result = (uint64_t)v203;
  if (v203)
  {
    v144 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v203);
    return MEMORY[0x1E0C023A0](v144, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E093CE1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58)
{
  uint64_t *v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;

  v61 = *(_QWORD *)(v59 - 136);
  *(_QWORD *)(v59 - 136) = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  v62 = *v58;
  *v58 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x240], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios17::Transpose::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  void **v37;
  unsigned __int8 *v38;
  void *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  char **v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t *v73;
  char *v74;
  char *v75;
  char *v76;
  __int128 v77;
  char *v78;
  char *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  char **v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  void **v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  std::__shared_weak_count *v104;
  unint64_t *p_shared_owners;
  unint64_t v106;
  void *v107;
  void **v108;
  std::__shared_weak_count *v109;
  std::__shared_weak_count_vtbl *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  void **v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  void **v121;
  void **v122;
  std::__shared_weak_count *v123;
  std::__shared_weak_count_vtbl *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  void *v128;
  void **v129;
  std::__shared_weak_count *v130;
  std::__shared_weak_count_vtbl *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  void *v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  void **v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  void **v142;
  uint64_t result;
  uint64_t v144;
  void **v145;
  std::__shared_weak_count *v146;
  void *v147[2];
  char v148;
  void *v149[2];
  char v150;
  void *v151;
  std::__shared_weak_count *v152;
  void *v153[2];
  char v154;
  void *v155[2];
  char v156;
  void *v157;
  std::__shared_weak_count *v158;
  void **v159;
  std::__shared_weak_count *v160;
  void *v161[2];
  char v162;
  void *v163;
  std::__shared_weak_count *v164;
  void *v165[2];
  char v166;
  void *v167[2];
  char v168;
  void *v169;
  std::__shared_weak_count *v170;
  __int128 v171;
  __int128 v172;
  void *v173[2];
  uint64_t v174;
  void *v175;
  void *v176;
  _QWORD *v177;
  __n128 v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  char **v182;
  __n128 v183;
  void *__p;
  void *v185;
  _QWORD *v186;
  void *v187;
  void *v188;
  _QWORD *v189;
  void *v190;
  void *v191;
  _QWORD *v192;
  void *v193;
  void *v194;
  _QWORD *v195;
  void *v196;
  void *v197;
  _QWORD *v198;
  void *v199;
  void *v200;
  _QWORD *v201;
  __n128 v202;
  _QWORD *v203;
  void *v204;
  void *v205;
  char *v206;
  char *v207;
  char **v208;
  _QWORD v209[3];
  _QWORD *v210;
  _BYTE v211[24];
  _BYTE *v212;
  _QWORD v213[3];
  _QWORD *v214;
  void *v215;
  void *v216;
  _QWORD *v217;
  void **v218;
  void **v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;

  v226 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v203 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (char *)operator new(0x10uLL);
  v206 = v9 + 16;
  *(_QWORD *)v9 = v7;
  *((_QWORD *)v9 + 1) = v8;
  v204 = v9;
  v205 = v9 + 16;
  v218 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v204);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v216 = v12 + 2;
  v217 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v215 = v12;
  v219 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v215);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v201 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  v199 = v15;
  v200 = v15 + 2;
  v220 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v199);
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(0x10uLL);
  v198 = v18 + 2;
  *v18 = v16;
  v18[1] = v17;
  v196 = v18;
  v197 = v18 + 2;
  v221 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v196);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(0x10uLL);
  v194 = v21 + 2;
  v195 = v21 + 2;
  *v21 = v19;
  v21[1] = v20;
  v193 = v21;
  v222 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v193);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(0x10uLL);
  v191 = v24 + 2;
  v192 = v24 + 2;
  *v24 = v22;
  v24[1] = v23;
  v190 = v24;
  v223 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v190);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(0x10uLL);
  v188 = v27 + 2;
  v189 = v27 + 2;
  *v27 = v25;
  v27[1] = v26;
  v187 = v27;
  v224 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v187);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = operator new(0x10uLL);
  v185 = v30 + 2;
  v186 = v30 + 2;
  *v30 = v28;
  v30[1] = v29;
  __p = v30;
  v225 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v218, 8, &v202);
  MIL::IRParameter::Make(&v202, (uint64_t *)&v175);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v175);
  v31 = v175;
  v175 = 0;
  if (v31)
    (*(void (**)(void *))(*(_QWORD *)v31 + 8))(v31);
  v32 = (std::__shared_weak_count *)v202.n128_u64[1];
  if (v202.n128_u64[1])
  {
    v33 = (unint64_t *)(v202.n128_u64[1] + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (__p)
  {
    v185 = __p;
    operator delete(__p);
  }
  if (v187)
  {
    v188 = v187;
    operator delete(v187);
  }
  if (v190)
  {
    v191 = v190;
    operator delete(v190);
  }
  if (v193)
  {
    v194 = v193;
    operator delete(v193);
  }
  if (v196)
  {
    v197 = v196;
    operator delete(v196);
  }
  if (v199)
  {
    v200 = v199;
    operator delete(v199);
  }
  if (v215)
  {
    v216 = v215;
    operator delete(v215);
  }
  if (v204)
  {
    v205 = v204;
    operator delete(v204);
  }
  v35 = v203;
  v36 = MIL::IRUnknownDimension::Make(a1, 0);
  v37 = (void **)operator new(8uLL);
  v218 = v37;
  *v37 = (void *)v36;
  v219 = v37 + 1;
  v220 = (uint64_t)(v37 + 1);
  v215 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v218);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v215, 1, &v183);
  MIL::IRParameter::Make(&v183, (uint64_t *)&v204);
  v38 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v35, "perm", (uint64_t *)&v204);
  v39 = v204;
  v204 = 0;
  if (v39)
    (*(void (**)(void *))(*(_QWORD *)v39 + 8))(v39);
  v40 = (std::__shared_weak_count *)v183.n128_u64[1];
  if (v183.n128_u64[1])
  {
    v41 = (unint64_t *)(v183.n128_u64[1] + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  if (v218)
  {
    v219 = v218;
    operator delete(v218);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v38 + 5) + 32))(*((_QWORD *)v38 + 5), 1);
  v182 = 0;
  v43 = operator new();
  *(_QWORD *)v43 = 0;
  *(_QWORD *)(v43 + 8) = 0;
  *(_QWORD *)(v43 + 16) = 0;
  v218 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v182, (void **)v43);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v218, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v182, 1uLL);
  v44 = v182;
  v45 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v46 = operator new(8uLL);
  v215 = v46;
  *v46 = v45;
  v216 = v46 + 1;
  v217 = v46 + 1;
  v218 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v215);
  v47 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v48 = operator new(8uLL);
  v199 = v48;
  *v48 = v47;
  v201 = v48 + 1;
  v200 = v48 + 1;
  v219 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v199);
  v49 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v50 = operator new(8uLL);
  v196 = v50;
  *v50 = v49;
  v198 = v50 + 1;
  v197 = v50 + 1;
  v220 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v196);
  v51 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v52 = operator new(8uLL);
  v193 = v52;
  *v52 = v51;
  v194 = v52 + 1;
  v195 = v52 + 1;
  v221 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&v193);
  v53 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v54 = operator new(8uLL);
  v190 = v54;
  *v54 = v53;
  v191 = v54 + 1;
  v192 = v54 + 1;
  v222 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v190);
  v55 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v56 = operator new(8uLL);
  v187 = v56;
  *v56 = v55;
  v188 = v56 + 1;
  v189 = v56 + 1;
  v223 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v187);
  v57 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v58 = operator new(8uLL);
  __p = v58;
  *v58 = v57;
  v185 = v58 + 1;
  v186 = v58 + 1;
  v224 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&__p);
  v59 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v60 = operator new(8uLL);
  v175 = v60;
  *v60 = v59;
  v176 = v60 + 1;
  v177 = v60 + 1;
  v225 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v175);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v218, 8, &v178);
  MIL::IRParameter::Make(&v178, &v179);
  v61 = v179;
  v180 = v179;
  if (v179)
  {
    v62 = (_QWORD *)operator new();
    v63 = v179;
    *v62 = &unk_1EA99F888;
    v62[1] = 0;
    v62[2] = 0;
    v62[3] = v63;
  }
  else
  {
    v62 = 0;
  }
  v181 = v62;
  v179 = 0;
  v64 = v44[2];
  v65 = v44[1];
  if (v65 >= v64)
  {
    v67 = (v65 - *v44) >> 4;
    v68 = v67 + 1;
    if ((unint64_t)(v67 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v69 = v64 - *v44;
    if (v69 >> 3 > v68)
      v68 = v69 >> 3;
    if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF0)
      v70 = 0xFFFFFFFFFFFFFFFLL;
    else
      v70 = v68;
    v208 = v44 + 2;
    v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v44 + 2), v70);
    v73 = (uint64_t *)&v71[16 * v67];
    *v73 = v61;
    v73[1] = (uint64_t)v62;
    v180 = 0;
    v181 = 0;
    v75 = *v44;
    v74 = v44[1];
    if (v74 == *v44)
    {
      v78 = v44[1];
      v76 = &v71[16 * v67];
    }
    else
    {
      v76 = &v71[16 * v67];
      do
      {
        v77 = *((_OWORD *)v74 - 1);
        v74 -= 16;
        *((_OWORD *)v76 - 1) = v77;
        v76 -= 16;
        *(_QWORD *)v74 = 0;
        *((_QWORD *)v74 + 1) = 0;
      }
      while (v74 != v75);
      v78 = *v44;
      v74 = v44[1];
    }
    v66 = (char *)(v73 + 2);
    *v44 = v76;
    v205 = v78;
    v44[1] = (char *)(v73 + 2);
    v206 = v74;
    v79 = v44[2];
    v44[2] = &v71[16 * v72];
    v207 = v79;
    v204 = v78;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v204);
  }
  else
  {
    *(_QWORD *)v65 = v61;
    *((_QWORD *)v65 + 1) = v62;
    v66 = v65 + 16;
    v180 = 0;
    v181 = 0;
  }
  v44[1] = v66;
  v80 = v179;
  v179 = 0;
  if (v80)
    (*(void (**)(uint64_t))(*(_QWORD *)v80 + 8))(v80);
  v81 = (std::__shared_weak_count *)v178.n128_u64[1];
  if (v178.n128_u64[1])
  {
    v82 = (unint64_t *)(v178.n128_u64[1] + 8);
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  if (v175)
  {
    v176 = v175;
    operator delete(v175);
  }
  if (__p)
  {
    v185 = __p;
    operator delete(__p);
  }
  if (v187)
  {
    v188 = v187;
    operator delete(v187);
  }
  if (v190)
  {
    v191 = v190;
    operator delete(v190);
  }
  if (v193)
  {
    v194 = v193;
    operator delete(v193);
  }
  if (v196)
  {
    v197 = v196;
    operator delete(v196);
  }
  if (v199)
  {
    v200 = v199;
    operator delete(v199);
  }
  if (v215)
  {
    v216 = v215;
    operator delete(v215);
  }
  *(_OWORD *)v173 = *(_OWORD *)a2;
  v174 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v84 = (uint64_t)v203;
  *(_QWORD *)&v172 = v203;
  if (v203)
  {
    v85 = (_QWORD *)operator new();
    *v85 = &unk_1EA99F8E8;
    v85[1] = 0;
    v85[2] = 0;
    v85[3] = v84;
  }
  else
  {
    v85 = 0;
  }
  *((_QWORD *)&v172 + 1) = v85;
  v203 = 0;
  *(_QWORD *)&v171 = v182;
  if (v182)
  {
    v86 = (_QWORD *)operator new();
    v87 = v182;
    *v86 = &unk_1EA99F948;
    v86[1] = 0;
    v86[2] = 0;
    v86[3] = v87;
  }
  else
  {
    v86 = 0;
  }
  *((_QWORD *)&v171 + 1) = v86;
  v182 = 0;
  v213[0] = &unk_1EA99FAC8;
  v213[1] = MIL::Operators::Common::ios17::CustomValidators::ValidateTranspose;
  v214 = v213;
  v212 = 0;
  MIL::IROperator::Make((__int128 *)v173, &v172, &v171, (uint64_t)v213, (uint64_t)v211, a3);
  v88 = v212;
  if (v212 == v211)
  {
    v89 = 4;
    v88 = v211;
  }
  else
  {
    if (!v212)
      goto LABEL_84;
    v89 = 5;
  }
  (*(void (**)(void))(*v88 + 8 * v89))();
LABEL_84:
  v90 = v214;
  if (v214 == v213)
  {
    v91 = 4;
    v90 = v213;
    goto LABEL_88;
  }
  if (v214)
  {
    v91 = 5;
LABEL_88:
    (*(void (**)(void))(*v90 + 8 * v91))();
  }
  v92 = (std::__shared_weak_count *)*((_QWORD *)&v171 + 1);
  if (*((_QWORD *)&v171 + 1))
  {
    v93 = (unint64_t *)(*((_QWORD *)&v171 + 1) + 8);
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = (std::__shared_weak_count *)*((_QWORD *)&v172 + 1);
  if (*((_QWORD *)&v172 + 1))
  {
    v96 = (unint64_t *)(*((_QWORD *)&v172 + 1) + 8);
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  if (SHIBYTE(v174) < 0)
    operator delete(v173[0]);
  v98 = *a3;
  v209[0] = &off_1EA99FBD8;
  v209[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceTranspose;
  v210 = v209;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v98 + 200))(v98, v209);
  v99 = v210;
  if (v210 == v209)
  {
    v100 = 4;
    v99 = v209;
  }
  else
  {
    if (!v210)
      goto LABEL_106;
    v100 = 5;
  }
  (*(void (**)(void))(*v99 + 8 * v100))();
LABEL_106:
  MIL::Validation::TensorDTypeConstraints::Make(&v218);
  v101 = v218;
  std::string::basic_string[abi:ne180100]<0>(v167, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v167, 0, (uint64_t *)&v204);
  v169 = v204;
  if (v204)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = (std::__shared_weak_count_vtbl *)v204;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v170 = v102;
  v204 = 0;
  std::string::basic_string[abi:ne180100]<0>(v165, "T");
  (*((void (**)(void **, void **, void **))*v101 + 3))(v101, &v169, v165);
  if (v166 < 0)
    operator delete(v165[0]);
  v104 = v170;
  if (v170)
  {
    p_shared_owners = (unint64_t *)&v170->__shared_owners_;
    do
      v106 = __ldaxr(p_shared_owners);
    while (__stlxr(v106 - 1, p_shared_owners));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = v204;
  v204 = 0;
  if (v107)
    (*(void (**)(void *))(*(_QWORD *)v107 + 8))(v107);
  if (v168 < 0)
    operator delete(v167[0]);
  v108 = v218;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v204);
  v163 = v204;
  if (v204)
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = (std::__shared_weak_count_vtbl *)v204;
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = v110;
  }
  else
  {
    v109 = 0;
  }
  v164 = v109;
  v204 = 0;
  std::string::basic_string[abi:ne180100]<0>(v161, "T");
  (*((void (**)(void **, void **, void **))*v108 + 3))(v108, &v163, v161);
  if (v162 < 0)
    operator delete(v161[0]);
  v111 = v164;
  if (v164)
  {
    v112 = (unint64_t *)&v164->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = v204;
  v204 = 0;
  if (v114)
    (*(void (**)(void *))(*(_QWORD *)v114 + 8))(v114);
  v115 = *a3;
  v159 = v218;
  if (v218)
  {
    v116 = (std::__shared_weak_count *)operator new();
    v117 = v218;
    v116->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v116->__shared_owners_ = 0;
    v116->__shared_weak_owners_ = 0;
    v116[1].__vftable = (std::__shared_weak_count_vtbl *)v117;
  }
  else
  {
    v116 = 0;
  }
  v160 = v116;
  v218 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v115 + 56))(v115, &v159);
  v118 = v160;
  if (v160)
  {
    v119 = (unint64_t *)&v160->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  v121 = v218;
  v218 = 0;
  if (v121)
    (*((void (**)(void **))*v121 + 1))(v121);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v218);
  v122 = v218;
  std::string::basic_string[abi:ne180100]<0>(v155, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v155, 0, (uint64_t *)&v204);
  v157 = v204;
  if (v204)
  {
    v123 = (std::__shared_weak_count *)operator new();
    v124 = (std::__shared_weak_count_vtbl *)v204;
    v123->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v123->__shared_owners_ = 0;
    v123->__shared_weak_owners_ = 0;
    v123[1].__vftable = v124;
  }
  else
  {
    v123 = 0;
  }
  v158 = v123;
  v204 = 0;
  std::string::basic_string[abi:ne180100]<0>(v153, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v122 + 3))(v122, &v157, 0, v153);
  if (v154 < 0)
    operator delete(v153[0]);
  v125 = v158;
  if (v158)
  {
    v126 = (unint64_t *)&v158->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  v128 = v204;
  v204 = 0;
  if (v128)
    (*(void (**)(void *))(*(_QWORD *)v128 + 8))(v128);
  if (v156 < 0)
    operator delete(v155[0]);
  v129 = v218;
  std::string::basic_string[abi:ne180100]<0>(v149, "perm");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v149, 0, (uint64_t *)&v204);
  v151 = v204;
  if (v204)
  {
    v130 = (std::__shared_weak_count *)operator new();
    v131 = (std::__shared_weak_count_vtbl *)v204;
    v130->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v130->__shared_owners_ = 0;
    v130->__shared_weak_owners_ = 0;
    v130[1].__vftable = v131;
  }
  else
  {
    v130 = 0;
  }
  v152 = v130;
  v204 = 0;
  std::string::basic_string[abi:ne180100]<0>(v147, "D_In");
  (*((void (**)(void **, void **, _QWORD, void **))*v129 + 3))(v129, &v151, 0, v147);
  if (v148 < 0)
    operator delete(v147[0]);
  v132 = v152;
  if (v152)
  {
    v133 = (unint64_t *)&v152->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  v135 = v204;
  v204 = 0;
  if (v135)
    (*(void (**)(void *))(*(_QWORD *)v135 + 8))(v135);
  if (v150 < 0)
    operator delete(v149[0]);
  v136 = *a3;
  v145 = v218;
  if (v218)
  {
    v137 = (std::__shared_weak_count *)operator new();
    v138 = v218;
    v137->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v137->__shared_owners_ = 0;
    v137->__shared_weak_owners_ = 0;
    v137[1].__vftable = (std::__shared_weak_count_vtbl *)v138;
  }
  else
  {
    v137 = 0;
  }
  v146 = v137;
  v218 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v136 + 56))(v136, &v145);
  v139 = v146;
  if (v146)
  {
    v140 = (unint64_t *)&v146->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  v142 = v218;
  v218 = 0;
  if (v142)
    (*((void (**)(void **))*v142 + 1))(v142);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v182, 0);
  result = (uint64_t)v203;
  if (v203)
  {
    v144 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v203);
    return MEMORY[0x1E0C023A0](v144, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E093E478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58)
{
  uint64_t *v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;

  v61 = *(_QWORD *)(v59 - 136);
  *(_QWORD *)(v59 - 136) = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  v62 = *v58;
  *v58 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x240], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::BaseActivation::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  char **v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  char *v44;
  char *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  char **v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  _OWORD *v64;
  unsigned __int8 *v65;
  void *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  std::__shared_weak_count_vtbl *v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count *v73;
  unint64_t *p_shared_owners;
  unint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  void *v79;
  std::__shared_weak_count *v80;
  std::__shared_weak_count_vtbl *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count_vtbl *v85;
  void *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count_vtbl *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count_vtbl *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count_vtbl *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  void *v99;
  void *v100;
  std::__shared_weak_count *v101;
  std::__shared_weak_count_vtbl *v102;
  uint64_t i;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  std::__shared_weak_count_vtbl *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t result;
  uint64_t v117;
  void *v118;
  std::__shared_weak_count *v119;
  void *v120[2];
  char v121;
  void *v122;
  std::__shared_weak_count *v123;
  void *v124;
  std::__shared_weak_count *v125;
  void *v126[2];
  char v127;
  std::__shared_weak_count_vtbl *v128;
  std::__shared_weak_count *v129;
  void *v130[2];
  char v131;
  void *v132[2];
  char v133;
  std::__shared_weak_count_vtbl *v134;
  std::__shared_weak_count *v135;
  void *v136;
  std::__shared_weak_count *v137;
  __n128 v138;
  __int128 v139;
  __int128 v140;
  void *v141[2];
  uint64_t v142;
  void *v143;
  void *v144;
  _QWORD *v145;
  __n128 v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  char **v150;
  void *__p;
  void *v152;
  _QWORD *v153;
  void *v154;
  void *v155;
  _QWORD *v156;
  __n128 v157;
  uint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD v162[3];
  uint64_t v163[3];
  uint64_t v164[3];
  uint64_t v165[3];
  _QWORD v166[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v168;
  uint64_t v169;
  _BYTE v170[24];
  _BYTE *v171;
  _BYTE v172[24];
  _BYTE *v173;
  _BYTE v174[24];
  _BYTE *v175;
  uint64_t v176;

  v176 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v158 = v8;
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v10;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v168 = (uint64_t)&v10->~__shared_weak_count_0;
  v169 = (uint64_t)&v10->~__shared_weak_count_0;
  v159 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v154 = v12;
  *v12 = v11;
  v155 = v12 + 1;
  v156 = v12 + 1;
  v160 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v154);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v152 = v14 + 1;
  v153 = v14 + 1;
  v161 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v159, 3, &v157);
  MIL::IRParameter::Make(&v157, (uint64_t *)&v143);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", (uint64_t *)&v143);
  v15 = v143;
  v143 = 0;
  if (v15)
    (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v157.n128_u64[1];
  if (v157.n128_u64[1])
  {
    v17 = (unint64_t *)(v157.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v152 = __p;
    operator delete(__p);
  }
  if (v154)
  {
    v155 = v154;
    operator delete(v154);
  }
  if (Scalar)
  {
    v168 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v150 = 0;
  v19 = operator new();
  *(_QWORD *)v19 = 0;
  *(_QWORD *)(v19 + 8) = 0;
  *(_QWORD *)(v19 + 16) = 0;
  v159 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v150, (void **)v19);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v159, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v150, 1uLL);
  v20 = v150;
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  v154 = v22;
  *v22 = v21;
  v155 = v22 + 1;
  v156 = v22 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v154);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  __p = v24;
  *v24 = v23;
  v152 = v24 + 1;
  v153 = v24 + 1;
  v168 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = operator new(8uLL);
  v143 = v26;
  *v26 = v25;
  v144 = v26 + 1;
  v145 = v26 + 1;
  v169 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v143);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v146);
  MIL::IRParameter::Make(&v146, &v147);
  v27 = v147;
  v148 = v147;
  if (v147)
  {
    v28 = (_QWORD *)operator new();
    v29 = v147;
    *v28 = &unk_1EA99F888;
    v28[1] = 0;
    v28[2] = 0;
    v28[3] = v29;
  }
  else
  {
    v28 = 0;
  }
  v149 = v28;
  v147 = 0;
  v30 = v20[2];
  v31 = v20[1];
  if (v31 >= v30)
  {
    v33 = (v31 - *v20) >> 4;
    v34 = v33 + 1;
    if ((unint64_t)(v33 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v35 = v30 - *v20;
    if (v35 >> 3 > v34)
      v34 = v35 >> 3;
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0)
      v36 = 0xFFFFFFFFFFFFFFFLL;
    else
      v36 = v34;
    v162[1] = v20 + 2;
    v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v20 + 2), v36);
    v39 = (uint64_t *)&v37[16 * v33];
    *v39 = v27;
    v39[1] = (uint64_t)v28;
    v148 = 0;
    v149 = 0;
    v41 = *v20;
    v40 = v20[1];
    if (v40 == *v20)
    {
      v44 = v20[1];
      v42 = &v37[16 * v33];
    }
    else
    {
      v42 = &v37[16 * v33];
      do
      {
        v43 = *((_OWORD *)v40 - 1);
        v40 -= 16;
        *((_OWORD *)v42 - 1) = v43;
        v42 -= 16;
        *(_QWORD *)v40 = 0;
        *((_QWORD *)v40 + 1) = 0;
      }
      while (v40 != v41);
      v44 = *v20;
      v40 = v20[1];
    }
    v32 = (char *)(v39 + 2);
    *v20 = v42;
    v159 = v44;
    v160 = (uint64_t)v44;
    v20[1] = (char *)(v39 + 2);
    v161 = (uint64_t)v40;
    v45 = v20[2];
    v20[2] = &v37[16 * v38];
    v162[0] = v45;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v159);
  }
  else
  {
    *(_QWORD *)v31 = v27;
    *((_QWORD *)v31 + 1) = v28;
    v32 = v31 + 16;
    v148 = 0;
    v149 = 0;
  }
  v20[1] = v32;
  v46 = v147;
  v147 = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  v47 = (std::__shared_weak_count *)v146.n128_u64[1];
  if (v146.n128_u64[1])
  {
    v48 = (unint64_t *)(v146.n128_u64[1] + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  if (v143)
  {
    v144 = v143;
    operator delete(v143);
  }
  if (__p)
  {
    v152 = __p;
    operator delete(__p);
  }
  if (v154)
  {
    v155 = v154;
    operator delete(v154);
  }
  *(_OWORD *)v141 = *(_OWORD *)a2;
  v142 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v50 = v158;
  *(_QWORD *)&v140 = v158;
  if (v158)
  {
    v51 = (_QWORD *)operator new();
    *v51 = &unk_1EA99F8E8;
    v51[1] = 0;
    v51[2] = 0;
    v51[3] = v50;
  }
  else
  {
    v51 = 0;
  }
  *((_QWORD *)&v140 + 1) = v51;
  v158 = 0;
  *(_QWORD *)&v139 = v150;
  if (v150)
  {
    v52 = (_QWORD *)operator new();
    v53 = v150;
    *v52 = &unk_1EA99F948;
    v52[1] = 0;
    v52[2] = 0;
    v52[3] = v53;
  }
  else
  {
    v52 = 0;
  }
  *((_QWORD *)&v139 + 1) = v52;
  v150 = 0;
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v174, a3);
  v173 = 0;
  MIL::IROperator::Make((__int128 *)v141, &v140, &v139, (uint64_t)v174, (uint64_t)v172, a4);
  v54 = v173;
  if (v173 == v172)
  {
    v55 = 4;
    v54 = v172;
  }
  else
  {
    if (!v173)
      goto LABEL_55;
    v55 = 5;
  }
  (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_55:
  v56 = v175;
  if (v175 == v174)
  {
    v57 = 4;
    v56 = v174;
    goto LABEL_59;
  }
  if (v175)
  {
    v57 = 5;
LABEL_59:
    (*(void (**)(void))(*v56 + 8 * v57))();
  }
  v58 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
  if (*((_QWORD *)&v139 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v139 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v61 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
  if (*((_QWORD *)&v140 + 1))
  {
    v62 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (SHIBYTE(v142) < 0)
    operator delete(v141[0]);
  v154 = 0;
  v64 = (_OWORD *)operator new();
  *v64 = 0u;
  v64[1] = 0u;
  *((_DWORD *)v64 + 8) = 1065353216;
  v154 = v64;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v138);
  MIL::IRParameter::Make(&v138, (uint64_t *)&v159);
  v65 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v64, "minimum_compute_type", (uint64_t *)&v159);
  v66 = v159;
  v159 = 0;
  if (v66)
    (*(void (**)(void *))(*(_QWORD *)v66 + 8))(v66);
  v67 = (std::__shared_weak_count *)v138.n128_u64[1];
  if (v138.n128_u64[1])
  {
    v68 = (unint64_t *)(v138.n128_u64[1] + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v65 + 5) + 32))(*((_QWORD *)v65 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v65 + 5) + 48))(*((_QWORD *)v65 + 5), 1);
  v70 = *a4;
  v71 = (std::__shared_weak_count_vtbl *)v154;
  v136 = v154;
  if (v154)
  {
    v72 = (std::__shared_weak_count *)operator new();
    v72->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v72->__shared_owners_ = 0;
    v72->__shared_weak_owners_ = 0;
    v72[1].__vftable = v71;
  }
  else
  {
    v72 = 0;
  }
  v137 = v72;
  v154 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v70 + 184))(v70, &v136);
  v73 = v137;
  if (v137)
  {
    p_shared_owners = (unint64_t *)&v137->__shared_owners_;
    do
      v75 = __ldaxr(p_shared_owners);
    while (__stlxr(v75 - 1, p_shared_owners));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = *a4;
  std::string::basic_string[abi:ne180100]<0>(&v159, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v159, (uint64_t)v170);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v76 + 200))(v76, v170);
  v77 = v171;
  if (v171 == v170)
  {
    v78 = 4;
    v77 = v170;
  }
  else
  {
    if (!v171)
      goto LABEL_92;
    v78 = 5;
  }
  (*(void (**)(void))(*v77 + 8 * v78))();
LABEL_92:
  if (SHIBYTE(v161) < 0)
    operator delete(v159);
  MIL::Validation::TensorDTypeConstraints::Make(&v159);
  v79 = v159;
  std::string::basic_string[abi:ne180100]<0>(v132, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v132, 0, (uint64_t *)&Scalar);
  v134 = Scalar;
  if (Scalar)
  {
    v80 = (std::__shared_weak_count *)operator new();
    v81 = Scalar;
    v80->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v80->__shared_owners_ = 0;
    v80->__shared_weak_owners_ = 0;
    v80[1].__vftable = v81;
  }
  else
  {
    v80 = 0;
  }
  v135 = v80;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v130, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v79 + 24))(v79, &v134, v130);
  if (v131 < 0)
    operator delete(v130[0]);
  v82 = v135;
  if (v135)
  {
    v83 = (unint64_t *)&v135->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = Scalar;
  Scalar = 0;
  if (v85)
    (*((void (**)(std::__shared_weak_count_vtbl *))v85->~__shared_weak_count + 1))(v85);
  if (v133 < 0)
    operator delete(v132[0]);
  v86 = v159;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v128 = Scalar;
  if (Scalar)
  {
    v87 = (std::__shared_weak_count *)operator new();
    v88 = Scalar;
    v87->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v87->__shared_owners_ = 0;
    v87->__shared_weak_owners_ = 0;
    v87[1].__vftable = v88;
  }
  else
  {
    v87 = 0;
  }
  v129 = v87;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v126, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v86 + 24))(v86, &v128, v126);
  if (v127 < 0)
    operator delete(v126[0]);
  v89 = v129;
  if (v129)
  {
    v90 = (unint64_t *)&v129->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = Scalar;
  Scalar = 0;
  if (v92)
    (*((void (**)(std::__shared_weak_count_vtbl *))v92->~__shared_weak_count + 1))(v92);
  v93 = *a4;
  v124 = v159;
  if (v159)
  {
    v94 = (std::__shared_weak_count *)operator new();
    v95 = (std::__shared_weak_count_vtbl *)v159;
    v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v94->__shared_owners_ = 0;
    v94->__shared_weak_owners_ = 0;
    v94[1].__vftable = v95;
  }
  else
  {
    v94 = 0;
  }
  v125 = v94;
  v159 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v93 + 56))(v93, &v124);
  v96 = v125;
  if (v125)
  {
    v97 = (unint64_t *)&v125->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = v159;
  v159 = 0;
  if (v99)
    (*(void (**)(void *))(*(_QWORD *)v99 + 8))(v99);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v100 = __p;
  std::string::basic_string[abi:ne180100]<0>(v120, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v120, 1, (uint64_t *)&v143);
  v122 = v143;
  if (v143)
  {
    v101 = (std::__shared_weak_count *)operator new();
    v102 = (std::__shared_weak_count_vtbl *)v143;
    v101->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v101->__shared_owners_ = 0;
    v101->__shared_weak_owners_ = 0;
    v101[1].__vftable = v102;
  }
  else
  {
    v101 = 0;
  }
  v123 = v101;
  v143 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v159, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v162, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v163, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v164, "int32");
  std::string::basic_string[abi:ne180100]<0>(v165, "int8");
  std::string::basic_string[abi:ne180100]<0>(v166, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v159, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v100 + 24))(v100, &v122, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v166[i + 2]) < 0)
      operator delete((void *)v166[i]);
  }
  v104 = v123;
  if (v123)
  {
    v105 = (unint64_t *)&v123->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = v143;
  v143 = 0;
  if (v107)
    (*(void (**)(void *))(*(_QWORD *)v107 + 8))(v107);
  if (v121 < 0)
    operator delete(v120[0]);
  v108 = *a4;
  v118 = __p;
  if (__p)
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = (std::__shared_weak_count_vtbl *)__p;
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = v110;
  }
  else
  {
    v109 = 0;
  }
  v119 = v109;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v108 + 56))(v108, &v118);
  v111 = v119;
  if (v119)
  {
    v112 = (unint64_t *)&v119->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = __p;
  __p = 0;
  if (v114)
    (*(void (**)(void *))(*(_QWORD *)v114 + 8))(v114);
  if (v154)
  {
    v115 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v154);
    MEMORY[0x1E0C023A0](v115, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v150, 0);
  result = v158;
  if (v158)
  {
    v117 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v158);
    return MEMORY[0x1E0C023A0](v117, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E093F7B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void **a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  void *v62;
  uint64_t v63;

  v62 = a52;
  a52 = 0;
  if (v62)
    (*(void (**)(void *))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a55, 0);
  v63 = *v60;
  *v60 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a51, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::BaseActivationWithAlpha::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  unsigned __int8 *v20;
  std::__shared_weak_count_vtbl *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  char **v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t *v45;
  char *v46;
  char *v47;
  char *v48;
  __int128 v49;
  char *v50;
  char *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  char **v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  _OWORD *v70;
  unsigned __int8 *v71;
  void *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  std::__shared_weak_count_vtbl *v77;
  std::__shared_weak_count *v78;
  std::__shared_weak_count *v79;
  unint64_t *p_shared_owners;
  unint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  void *v85;
  std::__shared_weak_count *v86;
  std::__shared_weak_count_vtbl *v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count_vtbl *v91;
  void *v92;
  std::__shared_weak_count *v93;
  std::__shared_weak_count_vtbl *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count_vtbl *v98;
  void *v99;
  std::__shared_weak_count *v100;
  std::__shared_weak_count_vtbl *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count_vtbl *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  std::__shared_weak_count_vtbl *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  void *v112;
  void *v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count_vtbl *v115;
  uint64_t i;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  std::__shared_weak_count_vtbl *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t result;
  uint64_t v130;
  void *v131;
  std::__shared_weak_count *v132;
  void *v133[2];
  char v134;
  void *v135;
  std::__shared_weak_count *v136;
  void *v137;
  std::__shared_weak_count *v138;
  void *v139[2];
  char v140;
  std::__shared_weak_count_vtbl *v141;
  std::__shared_weak_count *v142;
  void *v143[2];
  char v144;
  void *v145[2];
  char v146;
  std::__shared_weak_count_vtbl *v147;
  std::__shared_weak_count *v148;
  void *v149[2];
  char v150;
  void *v151[2];
  char v152;
  std::__shared_weak_count_vtbl *v153;
  std::__shared_weak_count *v154;
  void *v155;
  std::__shared_weak_count *v156;
  __n128 v157;
  __int128 v158;
  __int128 v159;
  void *v160[2];
  uint64_t v161;
  void *v162;
  void *v163;
  _QWORD *v164;
  __n128 v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  char **v169;
  __n128 v170;
  void *__p;
  void *v172;
  _QWORD *v173;
  void *v174;
  void *v175;
  _QWORD *v176;
  __n128 v177;
  _QWORD *v178;
  void *Scalar;
  uint64_t v180;
  uint64_t v181;
  _QWORD v182[3];
  uint64_t v183[3];
  uint64_t v184[3];
  uint64_t v185[3];
  _QWORD v186[3];
  std::__shared_weak_count_vtbl *v187;
  uint64_t v188;
  uint64_t v189;
  _BYTE v190[24];
  _BYTE *v191;
  _BYTE v192[24];
  _BYTE *v193;
  _BYTE v194[24];
  _BYTE *v195;
  uint64_t v196;

  v196 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v178 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v187 = v10;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v188 = (uint64_t)&v10->~__shared_weak_count_0;
  v189 = (uint64_t)&v10->~__shared_weak_count_0;
  Scalar = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v187);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v174 = v12;
  *v12 = v11;
  v175 = v12 + 1;
  v176 = v12 + 1;
  v180 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v174);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v172 = v14 + 1;
  v173 = v14 + 1;
  v181 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v177);
  MIL::IRParameter::Make(&v177, (uint64_t *)&v162);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", (uint64_t *)&v162);
  v15 = v162;
  v162 = 0;
  if (v15)
    (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v177.n128_u64[1];
  if (v177.n128_u64[1])
  {
    v17 = (unint64_t *)(v177.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v172 = __p;
    operator delete(__p);
  }
  if (v174)
  {
    v175 = v174;
    operator delete(v174);
  }
  if (v187)
  {
    v188 = (uint64_t)v187;
    operator delete(v187);
  }
  v19 = v178;
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar(a1, 7);
  v180 = MIL::IRTensorValueType::MakeScalar(a1, 4);
  v181 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v170);
  MIL::IRParameter::Make(&v170, (uint64_t *)&v187);
  v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v19, "alpha", (uint64_t *)&v187);
  v21 = v187;
  v187 = 0;
  if (v21)
    (*((void (**)(std::__shared_weak_count_vtbl *))v21->~__shared_weak_count + 1))(v21);
  v22 = (std::__shared_weak_count *)v170.n128_u64[1];
  if (v170.n128_u64[1])
  {
    v23 = (unint64_t *)(v170.n128_u64[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v20 + 5) + 32))(*((_QWORD *)v20 + 5), 1);
  v169 = 0;
  v25 = operator new();
  *(_QWORD *)v25 = 0;
  *(_QWORD *)(v25 + 8) = 0;
  *(_QWORD *)(v25 + 16) = 0;
  Scalar = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v169, (void **)v25);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&Scalar, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v169, 1uLL);
  v26 = v169;
  v27 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v28 = operator new(8uLL);
  v174 = v28;
  *v28 = v27;
  v175 = v28 + 1;
  v176 = v28 + 1;
  v187 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v174);
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = operator new(8uLL);
  __p = v30;
  *v30 = v29;
  v172 = v30 + 1;
  v173 = v30 + 1;
  v188 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v31 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v32 = operator new(8uLL);
  v162 = v32;
  *v32 = v31;
  v163 = v32 + 1;
  v164 = v32 + 1;
  v189 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v162);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v187, 3, &v165);
  MIL::IRParameter::Make(&v165, &v166);
  v33 = v166;
  v167 = v166;
  if (v166)
  {
    v34 = (_QWORD *)operator new();
    v35 = v166;
    *v34 = &unk_1EA99F888;
    v34[1] = 0;
    v34[2] = 0;
    v34[3] = v35;
  }
  else
  {
    v34 = 0;
  }
  v168 = v34;
  v166 = 0;
  v36 = v26[2];
  v37 = v26[1];
  if (v37 >= v36)
  {
    v39 = (v37 - *v26) >> 4;
    v40 = v39 + 1;
    if ((unint64_t)(v39 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v41 = v36 - *v26;
    if (v41 >> 3 > v40)
      v40 = v41 >> 3;
    if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0)
      v42 = 0xFFFFFFFFFFFFFFFLL;
    else
      v42 = v40;
    v182[1] = v26 + 2;
    v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v26 + 2), v42);
    v45 = (uint64_t *)&v43[16 * v39];
    *v45 = v33;
    v45[1] = (uint64_t)v34;
    v167 = 0;
    v168 = 0;
    v47 = *v26;
    v46 = v26[1];
    if (v46 == *v26)
    {
      v50 = v26[1];
      v48 = &v43[16 * v39];
    }
    else
    {
      v48 = &v43[16 * v39];
      do
      {
        v49 = *((_OWORD *)v46 - 1);
        v46 -= 16;
        *((_OWORD *)v48 - 1) = v49;
        v48 -= 16;
        *(_QWORD *)v46 = 0;
        *((_QWORD *)v46 + 1) = 0;
      }
      while (v46 != v47);
      v50 = *v26;
      v46 = v26[1];
    }
    v38 = (char *)(v45 + 2);
    *v26 = v48;
    Scalar = v50;
    v180 = (uint64_t)v50;
    v26[1] = (char *)(v45 + 2);
    v181 = (uint64_t)v46;
    v51 = v26[2];
    v26[2] = &v43[16 * v44];
    v182[0] = v51;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v37 = v33;
    *((_QWORD *)v37 + 1) = v34;
    v38 = v37 + 16;
    v167 = 0;
    v168 = 0;
  }
  v26[1] = v38;
  v52 = v166;
  v166 = 0;
  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  v53 = (std::__shared_weak_count *)v165.n128_u64[1];
  if (v165.n128_u64[1])
  {
    v54 = (unint64_t *)(v165.n128_u64[1] + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  if (v162)
  {
    v163 = v162;
    operator delete(v162);
  }
  if (__p)
  {
    v172 = __p;
    operator delete(__p);
  }
  if (v174)
  {
    v175 = v174;
    operator delete(v174);
  }
  *(_OWORD *)v160 = *(_OWORD *)a2;
  v161 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v56 = (uint64_t)v178;
  *(_QWORD *)&v159 = v178;
  if (v178)
  {
    v57 = (_QWORD *)operator new();
    *v57 = &unk_1EA99F8E8;
    v57[1] = 0;
    v57[2] = 0;
    v57[3] = v56;
  }
  else
  {
    v57 = 0;
  }
  *((_QWORD *)&v159 + 1) = v57;
  v178 = 0;
  *(_QWORD *)&v158 = v169;
  if (v169)
  {
    v58 = (_QWORD *)operator new();
    v59 = v169;
    *v58 = &unk_1EA99F948;
    v58[1] = 0;
    v58[2] = 0;
    v58[3] = v59;
  }
  else
  {
    v58 = 0;
  }
  *((_QWORD *)&v158 + 1) = v58;
  v169 = 0;
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v194, a3);
  v193 = 0;
  MIL::IROperator::Make((__int128 *)v160, &v159, &v158, (uint64_t)v194, (uint64_t)v192, a4);
  v60 = v193;
  if (v193 == v192)
  {
    v61 = 4;
    v60 = v192;
  }
  else
  {
    if (!v193)
      goto LABEL_62;
    v61 = 5;
  }
  (*(void (**)(void))(*v60 + 8 * v61))();
LABEL_62:
  v62 = v195;
  if (v195 == v194)
  {
    v63 = 4;
    v62 = v194;
    goto LABEL_66;
  }
  if (v195)
  {
    v63 = 5;
LABEL_66:
    (*(void (**)(void))(*v62 + 8 * v63))();
  }
  v64 = (std::__shared_weak_count *)*((_QWORD *)&v158 + 1);
  if (*((_QWORD *)&v158 + 1))
  {
    v65 = (unint64_t *)(*((_QWORD *)&v158 + 1) + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v159 + 1);
  if (*((_QWORD *)&v159 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v159 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  if (SHIBYTE(v161) < 0)
    operator delete(v160[0]);
  v174 = 0;
  v70 = (_OWORD *)operator new();
  *v70 = 0u;
  v70[1] = 0u;
  *((_DWORD *)v70 + 8) = 1065353216;
  v174 = v70;
  v187 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v187, 1, &v157);
  MIL::IRParameter::Make(&v157, (uint64_t *)&Scalar);
  v71 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v70, "minimum_compute_type", (uint64_t *)&Scalar);
  v72 = Scalar;
  Scalar = 0;
  if (v72)
    (*(void (**)(void *))(*(_QWORD *)v72 + 8))(v72);
  v73 = (std::__shared_weak_count *)v157.n128_u64[1];
  if (v157.n128_u64[1])
  {
    v74 = (unint64_t *)(v157.n128_u64[1] + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v71 + 5) + 32))(*((_QWORD *)v71 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v71 + 5) + 48))(*((_QWORD *)v71 + 5), 1);
  v76 = *a4;
  v77 = (std::__shared_weak_count_vtbl *)v174;
  v155 = v174;
  if (v174)
  {
    v78 = (std::__shared_weak_count *)operator new();
    v78->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v78->__shared_owners_ = 0;
    v78->__shared_weak_owners_ = 0;
    v78[1].__vftable = v77;
  }
  else
  {
    v78 = 0;
  }
  v156 = v78;
  v174 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v76 + 184))(v76, &v155);
  v79 = v156;
  if (v156)
  {
    p_shared_owners = (unint64_t *)&v156->__shared_owners_;
    do
      v81 = __ldaxr(p_shared_owners);
    while (__stlxr(v81 - 1, p_shared_owners));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = *a4;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&Scalar, (uint64_t)v190);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v82 + 200))(v82, v190);
  v83 = v191;
  if (v191 == v190)
  {
    v84 = 4;
    v83 = v190;
  }
  else
  {
    if (!v191)
      goto LABEL_99;
    v84 = 5;
  }
  (*(void (**)(void))(*v83 + 8 * v84))();
LABEL_99:
  if (SHIBYTE(v181) < 0)
    operator delete(Scalar);
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v85 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v151, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v151, 0, (uint64_t *)&v187);
  v153 = v187;
  if (v187)
  {
    v86 = (std::__shared_weak_count *)operator new();
    v87 = v187;
    v86->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v86->__shared_owners_ = 0;
    v86->__shared_weak_owners_ = 0;
    v86[1].__vftable = v87;
  }
  else
  {
    v86 = 0;
  }
  v154 = v86;
  v187 = 0;
  std::string::basic_string[abi:ne180100]<0>(v149, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v85 + 24))(v85, &v153, v149);
  if (v150 < 0)
    operator delete(v149[0]);
  v88 = v154;
  if (v154)
  {
    v89 = (unint64_t *)&v154->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = v187;
  v187 = 0;
  if (v91)
    (*((void (**)(std::__shared_weak_count_vtbl *))v91->~__shared_weak_count + 1))(v91);
  if (v152 < 0)
    operator delete(v151[0]);
  v92 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v145, "alpha");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v145, 0, (uint64_t *)&v187);
  v147 = v187;
  if (v187)
  {
    v93 = (std::__shared_weak_count *)operator new();
    v94 = v187;
    v93->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v93->__shared_owners_ = 0;
    v93->__shared_weak_owners_ = 0;
    v93[1].__vftable = v94;
  }
  else
  {
    v93 = 0;
  }
  v148 = v93;
  v187 = 0;
  std::string::basic_string[abi:ne180100]<0>(v143, "U");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v92 + 24))(v92, &v147, v143);
  if (v144 < 0)
    operator delete(v143[0]);
  v95 = v148;
  if (v148)
  {
    v96 = (unint64_t *)&v148->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = v187;
  v187 = 0;
  if (v98)
    (*((void (**)(std::__shared_weak_count_vtbl *))v98->~__shared_weak_count + 1))(v98);
  if (v146 < 0)
    operator delete(v145[0]);
  v99 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v187);
  v141 = v187;
  if (v187)
  {
    v100 = (std::__shared_weak_count *)operator new();
    v101 = v187;
    v100->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v100->__shared_owners_ = 0;
    v100->__shared_weak_owners_ = 0;
    v100[1].__vftable = v101;
  }
  else
  {
    v100 = 0;
  }
  v142 = v100;
  v187 = 0;
  std::string::basic_string[abi:ne180100]<0>(v139, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v99 + 24))(v99, &v141, v139);
  if (v140 < 0)
    operator delete(v139[0]);
  v102 = v142;
  if (v142)
  {
    v103 = (unint64_t *)&v142->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = v187;
  v187 = 0;
  if (v105)
    (*((void (**)(std::__shared_weak_count_vtbl *))v105->~__shared_weak_count + 1))(v105);
  v106 = *a4;
  v137 = Scalar;
  if (Scalar)
  {
    v107 = (std::__shared_weak_count *)operator new();
    v108 = (std::__shared_weak_count_vtbl *)Scalar;
    v107->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v107->__shared_owners_ = 0;
    v107->__shared_weak_owners_ = 0;
    v107[1].__vftable = v108;
  }
  else
  {
    v107 = 0;
  }
  v138 = v107;
  Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v106 + 56))(v106, &v137);
  v109 = v138;
  if (v138)
  {
    v110 = (unint64_t *)&v138->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = Scalar;
  Scalar = 0;
  if (v112)
    (*(void (**)(void *))(*(_QWORD *)v112 + 8))(v112);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v113 = __p;
  std::string::basic_string[abi:ne180100]<0>(v133, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v133, 1, (uint64_t *)&v162);
  v135 = v162;
  if (v162)
  {
    v114 = (std::__shared_weak_count *)operator new();
    v115 = (std::__shared_weak_count_vtbl *)v162;
    v114->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v114->__shared_owners_ = 0;
    v114->__shared_weak_owners_ = 0;
    v114[1].__vftable = v115;
  }
  else
  {
    v114 = 0;
  }
  v136 = v114;
  v162 = 0;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v182, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v183, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v184, "int32");
  std::string::basic_string[abi:ne180100]<0>(v185, "int8");
  std::string::basic_string[abi:ne180100]<0>(v186, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&v187, (unsigned __int8 *)&Scalar, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v113 + 24))(v113, &v135, &v187, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v187);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v186[i + 2]) < 0)
      operator delete((void *)v186[i]);
  }
  v117 = v136;
  if (v136)
  {
    v118 = (unint64_t *)&v136->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = v162;
  v162 = 0;
  if (v120)
    (*(void (**)(void *))(*(_QWORD *)v120 + 8))(v120);
  if (v134 < 0)
    operator delete(v133[0]);
  v121 = *a4;
  v131 = __p;
  if (__p)
  {
    v122 = (std::__shared_weak_count *)operator new();
    v123 = (std::__shared_weak_count_vtbl *)__p;
    v122->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v122->__shared_owners_ = 0;
    v122->__shared_weak_owners_ = 0;
    v122[1].__vftable = v123;
  }
  else
  {
    v122 = 0;
  }
  v132 = v122;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v121 + 56))(v121, &v131);
  v124 = v132;
  if (v132)
  {
    v125 = (unint64_t *)&v132->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = __p;
  __p = 0;
  if (v127)
    (*(void (**)(void *))(*(_QWORD *)v127 + 8))(v127);
  if (v174)
  {
    v128 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v174);
    MEMORY[0x1E0C023A0](v128, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v169, 0);
  result = (uint64_t)v178;
  if (v178)
  {
    v130 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v178);
    return MEMORY[0x1E0C023A0](v130, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0940BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void **a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  void *a65;
  uint64_t a70;
  uint64_t *v70;
  void *v72;
  uint64_t v73;

  v72 = a62;
  a62 = 0;
  if (v72)
    (*(void (**)(void *))(*(_QWORD *)v72 + 8))(v72);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a65, 0);
  v73 = *v70;
  *v70 = 0;
  if (v73)
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a59, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a70, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::BaseActivationWithAlphaBeta::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  unsigned __int8 *v20;
  std::__shared_weak_count_vtbl *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unsigned __int8 *v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  char **v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  char *v52;
  char *v53;
  char *v54;
  __int128 v55;
  char *v56;
  char *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  char **v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  _OWORD *v76;
  unsigned __int8 *v77;
  void *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  std::__shared_weak_count_vtbl *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count *v85;
  unint64_t *p_shared_owners;
  unint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  void *v91;
  std::__shared_weak_count *v92;
  std::__shared_weak_count_vtbl *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count_vtbl *v97;
  void *v98;
  std::__shared_weak_count *v99;
  std::__shared_weak_count_vtbl *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count_vtbl *v104;
  void *v105;
  std::__shared_weak_count *v106;
  std::__shared_weak_count_vtbl *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count_vtbl *v111;
  void *v112;
  std::__shared_weak_count *v113;
  std::__shared_weak_count_vtbl *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count_vtbl *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  std::__shared_weak_count_vtbl *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  void *v125;
  void *v126;
  std::__shared_weak_count *v127;
  std::__shared_weak_count_vtbl *v128;
  uint64_t i;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  void *v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  std::__shared_weak_count_vtbl *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t result;
  uint64_t v143;
  void *v144;
  std::__shared_weak_count *v145;
  void *v146[2];
  char v147;
  void *v148;
  std::__shared_weak_count *v149;
  void *v150;
  std::__shared_weak_count *v151;
  void *v152[2];
  char v153;
  std::__shared_weak_count_vtbl *v154;
  std::__shared_weak_count *v155;
  void *v156[2];
  char v157;
  void *v158[2];
  char v159;
  std::__shared_weak_count_vtbl *v160;
  std::__shared_weak_count *v161;
  void *v162[2];
  char v163;
  void *v164[2];
  char v165;
  std::__shared_weak_count_vtbl *v166;
  std::__shared_weak_count *v167;
  void *v168[2];
  char v169;
  void *v170[2];
  char v171;
  std::__shared_weak_count_vtbl *v172;
  std::__shared_weak_count *v173;
  void *v174;
  std::__shared_weak_count *v175;
  __n128 v176;
  __int128 v177;
  __int128 v178;
  void *v179[2];
  uint64_t v180;
  void *v181;
  void *v182;
  _QWORD *v183;
  __n128 v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  char **v188;
  __n128 v189;
  __n128 v190;
  void *__p;
  void *v192;
  _QWORD *v193;
  void *v194;
  void *v195;
  _QWORD *v196;
  __n128 v197;
  _QWORD *v198;
  void *Scalar;
  uint64_t v200;
  uint64_t v201;
  _QWORD v202[3];
  uint64_t v203[3];
  uint64_t v204[3];
  uint64_t v205[3];
  _QWORD v206[3];
  std::__shared_weak_count_vtbl *v207;
  uint64_t v208;
  uint64_t v209;
  _BYTE v210[24];
  _BYTE *v211;
  _BYTE v212[24];
  _BYTE *v213;
  _BYTE v214[24];
  _BYTE *v215;
  uint64_t v216;

  v216 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v198 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v207 = v10;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v208 = (uint64_t)&v10->~__shared_weak_count_0;
  v209 = (uint64_t)&v10->~__shared_weak_count_0;
  Scalar = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v207);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v194 = v12;
  *v12 = v11;
  v196 = v12 + 1;
  v195 = v12 + 1;
  v200 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v194);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v193 = v14 + 1;
  v192 = v14 + 1;
  v201 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v197);
  MIL::IRParameter::Make(&v197, (uint64_t *)&v181);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", (uint64_t *)&v181);
  v15 = v181;
  v181 = 0;
  if (v15)
    (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v197.n128_u64[1];
  if (v197.n128_u64[1])
  {
    v17 = (unint64_t *)(v197.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v192 = __p;
    operator delete(__p);
  }
  if (v194)
  {
    v195 = v194;
    operator delete(v194);
  }
  if (v207)
  {
    v208 = (uint64_t)v207;
    operator delete(v207);
  }
  v19 = v198;
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar(a1, 7);
  v200 = MIL::IRTensorValueType::MakeScalar(a1, 4);
  v201 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v190);
  MIL::IRParameter::Make(&v190, (uint64_t *)&v207);
  v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v19, "alpha", (uint64_t *)&v207);
  v21 = v207;
  v207 = 0;
  if (v21)
    (*((void (**)(std::__shared_weak_count_vtbl *))v21->~__shared_weak_count + 1))(v21);
  v22 = (std::__shared_weak_count *)v190.n128_u64[1];
  if (v190.n128_u64[1])
  {
    v23 = (unint64_t *)(v190.n128_u64[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v20 + 5) + 32))(*((_QWORD *)v20 + 5), 1);
  v25 = v198;
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar(a1, 7);
  v200 = MIL::IRTensorValueType::MakeScalar(a1, 4);
  v201 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v189);
  MIL::IRParameter::Make(&v189, (uint64_t *)&v207);
  v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v25, "beta", (uint64_t *)&v207);
  v27 = v207;
  v207 = 0;
  if (v27)
    (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  v28 = (std::__shared_weak_count *)v189.n128_u64[1];
  if (v189.n128_u64[1])
  {
    v29 = (unint64_t *)(v189.n128_u64[1] + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v26 + 5) + 32))(*((_QWORD *)v26 + 5), 1);
  v188 = 0;
  v31 = operator new();
  *(_QWORD *)v31 = 0;
  *(_QWORD *)(v31 + 8) = 0;
  *(_QWORD *)(v31 + 16) = 0;
  Scalar = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v188, (void **)v31);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&Scalar, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v188, 1uLL);
  v32 = v188;
  v33 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v34 = operator new(8uLL);
  v194 = v34;
  *v34 = v33;
  v196 = v34 + 1;
  v195 = v34 + 1;
  v207 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v194);
  v35 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v36 = operator new(8uLL);
  __p = v36;
  *v36 = v35;
  v193 = v36 + 1;
  v192 = v36 + 1;
  v208 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v37 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v38 = operator new(8uLL);
  v181 = v38;
  *v38 = v37;
  v182 = v38 + 1;
  v183 = v38 + 1;
  v209 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v181);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v207, 3, &v184);
  MIL::IRParameter::Make(&v184, &v185);
  v39 = v185;
  v186 = v185;
  if (v185)
  {
    v40 = (_QWORD *)operator new();
    v41 = v185;
    *v40 = &unk_1EA99F888;
    v40[1] = 0;
    v40[2] = 0;
    v40[3] = v41;
  }
  else
  {
    v40 = 0;
  }
  v187 = v40;
  v185 = 0;
  v42 = v32[2];
  v43 = v32[1];
  if (v43 >= v42)
  {
    v45 = (v43 - *v32) >> 4;
    v46 = v45 + 1;
    if ((unint64_t)(v45 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v47 = v42 - *v32;
    if (v47 >> 3 > v46)
      v46 = v47 >> 3;
    if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF0)
      v48 = 0xFFFFFFFFFFFFFFFLL;
    else
      v48 = v46;
    v202[1] = v32 + 2;
    v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v32 + 2), v48);
    v51 = (uint64_t *)&v49[16 * v45];
    *v51 = v39;
    v51[1] = (uint64_t)v40;
    v186 = 0;
    v187 = 0;
    v53 = *v32;
    v52 = v32[1];
    if (v52 == *v32)
    {
      v56 = v32[1];
      v54 = &v49[16 * v45];
    }
    else
    {
      v54 = &v49[16 * v45];
      do
      {
        v55 = *((_OWORD *)v52 - 1);
        v52 -= 16;
        *((_OWORD *)v54 - 1) = v55;
        v54 -= 16;
        *(_QWORD *)v52 = 0;
        *((_QWORD *)v52 + 1) = 0;
      }
      while (v52 != v53);
      v56 = *v32;
      v52 = v32[1];
    }
    v44 = (char *)(v51 + 2);
    *v32 = v54;
    v200 = (uint64_t)v56;
    v32[1] = (char *)(v51 + 2);
    v201 = (uint64_t)v52;
    v57 = v32[2];
    v32[2] = &v49[16 * v50];
    v202[0] = v57;
    Scalar = v56;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v43 = v39;
    *((_QWORD *)v43 + 1) = v40;
    v44 = v43 + 16;
    v186 = 0;
    v187 = 0;
  }
  v32[1] = v44;
  v58 = v185;
  v185 = 0;
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  v59 = (std::__shared_weak_count *)v184.n128_u64[1];
  if (v184.n128_u64[1])
  {
    v60 = (unint64_t *)(v184.n128_u64[1] + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (v181)
  {
    v182 = v181;
    operator delete(v181);
  }
  if (__p)
  {
    v192 = __p;
    operator delete(__p);
  }
  if (v194)
  {
    v195 = v194;
    operator delete(v194);
  }
  *(_OWORD *)v179 = *(_OWORD *)a2;
  v180 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v62 = (uint64_t)v198;
  *(_QWORD *)&v178 = v198;
  if (v198)
  {
    v63 = (_QWORD *)operator new();
    *v63 = &unk_1EA99F8E8;
    v63[1] = 0;
    v63[2] = 0;
    v63[3] = v62;
  }
  else
  {
    v63 = 0;
  }
  *((_QWORD *)&v178 + 1) = v63;
  v198 = 0;
  *(_QWORD *)&v177 = v188;
  if (v188)
  {
    v64 = (_QWORD *)operator new();
    v65 = v188;
    *v64 = &unk_1EA99F948;
    v64[1] = 0;
    v64[2] = 0;
    v64[3] = v65;
  }
  else
  {
    v64 = 0;
  }
  *((_QWORD *)&v177 + 1) = v64;
  v188 = 0;
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v214, a3);
  v213 = 0;
  MIL::IROperator::Make((__int128 *)v179, &v178, &v177, (uint64_t)v214, (uint64_t)v212, a4);
  v66 = v213;
  if (v213 == v212)
  {
    v67 = 4;
    v66 = v212;
  }
  else
  {
    if (!v213)
      goto LABEL_69;
    v67 = 5;
  }
  (*(void (**)(void))(*v66 + 8 * v67))();
LABEL_69:
  v68 = v215;
  if (v215 == v214)
  {
    v69 = 4;
    v68 = v214;
    goto LABEL_73;
  }
  if (v215)
  {
    v69 = 5;
LABEL_73:
    (*(void (**)(void))(*v68 + 8 * v69))();
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v177 + 1);
  if (*((_QWORD *)&v177 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v177 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = (std::__shared_weak_count *)*((_QWORD *)&v178 + 1);
  if (*((_QWORD *)&v178 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v178 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  if (SHIBYTE(v180) < 0)
    operator delete(v179[0]);
  v194 = 0;
  v76 = (_OWORD *)operator new();
  *v76 = 0u;
  v76[1] = 0u;
  *((_DWORD *)v76 + 8) = 1065353216;
  v194 = v76;
  v207 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v207, 1, &v176);
  MIL::IRParameter::Make(&v176, (uint64_t *)&Scalar);
  v77 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v76, "minimum_compute_type", (uint64_t *)&Scalar);
  v78 = Scalar;
  Scalar = 0;
  if (v78)
    (*(void (**)(void *))(*(_QWORD *)v78 + 8))(v78);
  v79 = (std::__shared_weak_count *)v176.n128_u64[1];
  if (v176.n128_u64[1])
  {
    v80 = (unint64_t *)(v176.n128_u64[1] + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v77 + 5) + 32))(*((_QWORD *)v77 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v77 + 5) + 48))(*((_QWORD *)v77 + 5), 1);
  v82 = *a4;
  v83 = (std::__shared_weak_count_vtbl *)v194;
  v174 = v194;
  if (v194)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v83;
  }
  else
  {
    v84 = 0;
  }
  v175 = v84;
  v194 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v82 + 184))(v82, &v174);
  v85 = v175;
  if (v175)
  {
    p_shared_owners = (unint64_t *)&v175->__shared_owners_;
    do
      v87 = __ldaxr(p_shared_owners);
    while (__stlxr(v87 - 1, p_shared_owners));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = *a4;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&Scalar, (uint64_t)v210);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v88 + 200))(v88, v210);
  v89 = v211;
  if (v211 == v210)
  {
    v90 = 4;
    v89 = v210;
  }
  else
  {
    if (!v211)
      goto LABEL_106;
    v90 = 5;
  }
  (*(void (**)(void))(*v89 + 8 * v90))();
LABEL_106:
  if (SHIBYTE(v201) < 0)
    operator delete(Scalar);
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v91 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v170, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v170, 0, (uint64_t *)&v207);
  v172 = v207;
  if (v207)
  {
    v92 = (std::__shared_weak_count *)operator new();
    v93 = v207;
    v92->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v92->__shared_owners_ = 0;
    v92->__shared_weak_owners_ = 0;
    v92[1].__vftable = v93;
  }
  else
  {
    v92 = 0;
  }
  v173 = v92;
  v207 = 0;
  std::string::basic_string[abi:ne180100]<0>(v168, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v91 + 24))(v91, &v172, v168);
  if (v169 < 0)
    operator delete(v168[0]);
  v94 = v173;
  if (v173)
  {
    v95 = (unint64_t *)&v173->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v97 = v207;
  v207 = 0;
  if (v97)
    (*((void (**)(std::__shared_weak_count_vtbl *))v97->~__shared_weak_count + 1))(v97);
  if (v171 < 0)
    operator delete(v170[0]);
  v98 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v164, "alpha");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v164, 0, (uint64_t *)&v207);
  v166 = v207;
  if (v207)
  {
    v99 = (std::__shared_weak_count *)operator new();
    v100 = v207;
    v99->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v99->__shared_owners_ = 0;
    v99->__shared_weak_owners_ = 0;
    v99[1].__vftable = v100;
  }
  else
  {
    v99 = 0;
  }
  v167 = v99;
  v207 = 0;
  std::string::basic_string[abi:ne180100]<0>(v162, "U");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v98 + 24))(v98, &v166, v162);
  if (v163 < 0)
    operator delete(v162[0]);
  v101 = v167;
  if (v167)
  {
    v102 = (unint64_t *)&v167->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = v207;
  v207 = 0;
  if (v104)
    (*((void (**)(std::__shared_weak_count_vtbl *))v104->~__shared_weak_count + 1))(v104);
  if (v165 < 0)
    operator delete(v164[0]);
  v105 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v158, "beta");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v158, 0, (uint64_t *)&v207);
  v160 = v207;
  if (v207)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = v207;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = v107;
  }
  else
  {
    v106 = 0;
  }
  v161 = v106;
  v207 = 0;
  std::string::basic_string[abi:ne180100]<0>(v156, "U");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v105 + 24))(v105, &v160, v156);
  if (v157 < 0)
    operator delete(v156[0]);
  v108 = v161;
  if (v161)
  {
    v109 = (unint64_t *)&v161->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v207;
  v207 = 0;
  if (v111)
    (*((void (**)(std::__shared_weak_count_vtbl *))v111->~__shared_weak_count + 1))(v111);
  if (v159 < 0)
    operator delete(v158[0]);
  v112 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v207);
  v154 = v207;
  if (v207)
  {
    v113 = (std::__shared_weak_count *)operator new();
    v114 = v207;
    v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v113->__shared_owners_ = 0;
    v113->__shared_weak_owners_ = 0;
    v113[1].__vftable = v114;
  }
  else
  {
    v113 = 0;
  }
  v155 = v113;
  v207 = 0;
  std::string::basic_string[abi:ne180100]<0>(v152, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v112 + 24))(v112, &v154, v152);
  if (v153 < 0)
    operator delete(v152[0]);
  v115 = v155;
  if (v155)
  {
    v116 = (unint64_t *)&v155->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = v207;
  v207 = 0;
  if (v118)
    (*((void (**)(std::__shared_weak_count_vtbl *))v118->~__shared_weak_count + 1))(v118);
  v119 = *a4;
  v150 = Scalar;
  if (Scalar)
  {
    v120 = (std::__shared_weak_count *)operator new();
    v121 = (std::__shared_weak_count_vtbl *)Scalar;
    v120->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v120->__shared_owners_ = 0;
    v120->__shared_weak_owners_ = 0;
    v120[1].__vftable = v121;
  }
  else
  {
    v120 = 0;
  }
  v151 = v120;
  Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v119 + 56))(v119, &v150);
  v122 = v151;
  if (v151)
  {
    v123 = (unint64_t *)&v151->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v125 = Scalar;
  Scalar = 0;
  if (v125)
    (*(void (**)(void *))(*(_QWORD *)v125 + 8))(v125);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v126 = __p;
  std::string::basic_string[abi:ne180100]<0>(v146, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v146, 1, (uint64_t *)&v181);
  v148 = v181;
  if (v181)
  {
    v127 = (std::__shared_weak_count *)operator new();
    v128 = (std::__shared_weak_count_vtbl *)v181;
    v127->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v127->__shared_owners_ = 0;
    v127->__shared_weak_owners_ = 0;
    v127[1].__vftable = v128;
  }
  else
  {
    v127 = 0;
  }
  v149 = v127;
  v181 = 0;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v202, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v203, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v204, "int32");
  std::string::basic_string[abi:ne180100]<0>(v205, "int8");
  std::string::basic_string[abi:ne180100]<0>(v206, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&v207, (unsigned __int8 *)&Scalar, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v126 + 24))(v126, &v148, &v207, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v207);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v206[i + 2]) < 0)
      operator delete((void *)v206[i]);
  }
  v130 = v149;
  if (v149)
  {
    v131 = (unint64_t *)&v149->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = v181;
  v181 = 0;
  if (v133)
    (*(void (**)(void *))(*(_QWORD *)v133 + 8))(v133);
  if (v147 < 0)
    operator delete(v146[0]);
  v134 = *a4;
  v144 = __p;
  if (__p)
  {
    v135 = (std::__shared_weak_count *)operator new();
    v136 = (std::__shared_weak_count_vtbl *)__p;
    v135->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v135->__shared_owners_ = 0;
    v135->__shared_weak_owners_ = 0;
    v135[1].__vftable = v136;
  }
  else
  {
    v135 = 0;
  }
  v145 = v135;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v134 + 56))(v134, &v144);
  v137 = v145;
  if (v145)
  {
    v138 = (unint64_t *)&v145->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v140 = __p;
  __p = 0;
  if (v140)
    (*(void (**)(void *))(*(_QWORD *)v140 + 8))(v140);
  if (v194)
  {
    v141 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v194);
    MEMORY[0x1E0C023A0](v141, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v188, 0);
  result = (uint64_t)v198;
  if (v198)
  {
    v143 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v198);
    return MEMORY[0x1E0C023A0](v143, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0942220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void **a67;
  void *a72;
  uint64_t *v72;
  void *v74;
  uint64_t v75;

  v74 = a72;
  a72 = 0;
  if (v74)
    (*(void (**)(void *))(*(_QWORD *)v74 + 8))(v74);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x210], 0);
  v75 = *v72;
  *v72 = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a67, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x238], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::ClampedReLU::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios18::BaseActivationWithAlphaBeta::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E0942854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::LinearActivation::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios18::BaseActivationWithAlphaBeta::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E0942954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::ScaledTanh::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios18::BaseActivationWithAlphaBeta::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E0942A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::SigmoidHard::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios18::BaseActivationWithAlphaBeta::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E0942B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::ELU::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios18::BaseActivationWithAlpha::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E0942C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::LeakyReLU::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios18::BaseActivationWithAlpha::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E0942D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::ThresholdedReLU::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios18::BaseActivationWithAlpha::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E0942E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::ERF::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios18::BaseActivation::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E0942F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::GeLU::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  unsigned __int8 *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t *v43;
  char *v44;
  char *v45;
  char *v46;
  __int128 v47;
  char *v48;
  char *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  char **v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  _OWORD *v68;
  unsigned __int8 *v69;
  void *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  std::__shared_weak_count_vtbl *v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  unint64_t *p_shared_owners;
  unint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  void *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count_vtbl *v89;
  void *v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count_vtbl *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count_vtbl *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  void *v103;
  void *v104;
  std::__shared_weak_count *v105;
  std::__shared_weak_count_vtbl *v106;
  uint64_t i;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  void *v111;
  void *v112;
  std::__shared_weak_count *v113;
  std::__shared_weak_count_vtbl *v114;
  uint64_t j;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count_vtbl *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t result;
  uint64_t v129;
  void *v130;
  std::__shared_weak_count *v131;
  void *v132[2];
  char v133;
  void *v134;
  std::__shared_weak_count *v135;
  void *v136[2];
  char v137;
  void *v138;
  std::__shared_weak_count *v139;
  void *v140;
  std::__shared_weak_count *v141;
  void *v142[2];
  char v143;
  std::__shared_weak_count_vtbl *v144;
  std::__shared_weak_count *v145;
  void *v146[2];
  char v147;
  void *v148[2];
  char v149;
  std::__shared_weak_count_vtbl *v150;
  std::__shared_weak_count *v151;
  void *v152;
  std::__shared_weak_count *v153;
  __n128 v154;
  __int128 v155;
  __int128 v156;
  void *v157[2];
  uint64_t v158;
  void *v159;
  void *v160;
  _QWORD *v161;
  __n128 v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  char **v166;
  __n128 v167;
  void *__p;
  void *v169;
  _QWORD *v170;
  void *v171;
  void *v172;
  _QWORD *v173;
  __n128 v174;
  _QWORD *v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD v179[3];
  _QWORD v180[3];
  uint64_t v181[3];
  uint64_t v182[3];
  _QWORD v183[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v185;
  uint64_t v186;
  _BYTE v187[24];
  _BYTE *v188;
  _BYTE v189[24];
  _BYTE *v190;
  _BYTE v191[24];
  _BYTE *v192;
  uint64_t v193;

  v193 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v175 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v185 = (uint64_t)&v8->~__shared_weak_count_0;
  v186 = (uint64_t)&v8->~__shared_weak_count_0;
  v176 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v171 = v10;
  *v10 = v9;
  v172 = v10 + 1;
  v173 = v10 + 1;
  v177 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v171);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v169 = v12 + 1;
  v170 = v12 + 1;
  v178 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v176, 3, &v174);
  MIL::IRParameter::Make(&v174, (uint64_t *)&v159);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v159);
  v13 = v159;
  v159 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v174.n128_u64[1];
  if (v174.n128_u64[1])
  {
    v15 = (unint64_t *)(v174.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v169 = __p;
    operator delete(__p);
  }
  if (v171)
  {
    v172 = v171;
    operator delete(v171);
  }
  if (Scalar)
  {
    v185 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v17 = v175;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v167);
  MIL::IRParameter::Make(&v167, (uint64_t *)&v176);
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v17, "mode", (uint64_t *)&v176);
  v19 = v176;
  v176 = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = (std::__shared_weak_count *)v167.n128_u64[1];
  if (v167.n128_u64[1])
  {
    v21 = (unint64_t *)(v167.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 32))(*((_QWORD *)v18 + 5), 1);
  v166 = 0;
  v23 = operator new();
  *(_QWORD *)v23 = 0;
  *(_QWORD *)(v23 + 8) = 0;
  *(_QWORD *)(v23 + 16) = 0;
  v176 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v166, (void **)v23);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v176, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v166, 1uLL);
  v24 = v166;
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = operator new(8uLL);
  v171 = v26;
  *v26 = v25;
  v172 = v26 + 1;
  v173 = v26 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v171);
  v27 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v28 = operator new(8uLL);
  __p = v28;
  *v28 = v27;
  v169 = v28 + 1;
  v170 = v28 + 1;
  v185 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = operator new(8uLL);
  v159 = v30;
  *v30 = v29;
  v160 = v30 + 1;
  v161 = v30 + 1;
  v186 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v159);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v162);
  MIL::IRParameter::Make(&v162, &v163);
  v31 = v163;
  v164 = v163;
  if (v163)
  {
    v32 = (_QWORD *)operator new();
    v33 = v163;
    *v32 = &unk_1EA99F888;
    v32[1] = 0;
    v32[2] = 0;
    v32[3] = v33;
  }
  else
  {
    v32 = 0;
  }
  v165 = v32;
  v163 = 0;
  v34 = v24[2];
  v35 = v24[1];
  if (v35 >= v34)
  {
    v37 = (v35 - *v24) >> 4;
    v38 = v37 + 1;
    if ((unint64_t)(v37 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v39 = v34 - *v24;
    if (v39 >> 3 > v38)
      v38 = v39 >> 3;
    if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0)
      v40 = 0xFFFFFFFFFFFFFFFLL;
    else
      v40 = v38;
    v179[1] = v24 + 2;
    v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v24 + 2), v40);
    v43 = (uint64_t *)&v41[16 * v37];
    *v43 = v31;
    v43[1] = (uint64_t)v32;
    v164 = 0;
    v165 = 0;
    v45 = *v24;
    v44 = v24[1];
    if (v44 == *v24)
    {
      v48 = v24[1];
      v46 = &v41[16 * v37];
    }
    else
    {
      v46 = &v41[16 * v37];
      do
      {
        v47 = *((_OWORD *)v44 - 1);
        v44 -= 16;
        *((_OWORD *)v46 - 1) = v47;
        v46 -= 16;
        *(_QWORD *)v44 = 0;
        *((_QWORD *)v44 + 1) = 0;
      }
      while (v44 != v45);
      v48 = *v24;
      v44 = v24[1];
    }
    v36 = (char *)(v43 + 2);
    *v24 = v46;
    v176 = v48;
    v177 = (uint64_t)v48;
    v24[1] = (char *)(v43 + 2);
    v178 = (uint64_t)v44;
    v49 = v24[2];
    v24[2] = &v41[16 * v42];
    v179[0] = v49;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v176);
  }
  else
  {
    *(_QWORD *)v35 = v31;
    *((_QWORD *)v35 + 1) = v32;
    v36 = v35 + 16;
    v164 = 0;
    v165 = 0;
  }
  v24[1] = v36;
  v50 = v163;
  v163 = 0;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  v51 = (std::__shared_weak_count *)v162.n128_u64[1];
  if (v162.n128_u64[1])
  {
    v52 = (unint64_t *)(v162.n128_u64[1] + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  if (v159)
  {
    v160 = v159;
    operator delete(v159);
  }
  if (__p)
  {
    v169 = __p;
    operator delete(__p);
  }
  if (v171)
  {
    v172 = v171;
    operator delete(v171);
  }
  *(_OWORD *)v157 = *(_OWORD *)a2;
  v158 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v54 = (uint64_t)v175;
  *(_QWORD *)&v156 = v175;
  if (v175)
  {
    v55 = (_QWORD *)operator new();
    *v55 = &unk_1EA99F8E8;
    v55[1] = 0;
    v55[2] = 0;
    v55[3] = v54;
  }
  else
  {
    v55 = 0;
  }
  *((_QWORD *)&v156 + 1) = v55;
  v175 = 0;
  *(_QWORD *)&v155 = v166;
  if (v166)
  {
    v56 = (_QWORD *)operator new();
    v57 = v166;
    *v56 = &unk_1EA99F948;
    v56[1] = 0;
    v56[2] = 0;
    v56[3] = v57;
  }
  else
  {
    v56 = 0;
  }
  *((_QWORD *)&v155 + 1) = v56;
  v166 = 0;
  v192 = 0;
  v190 = 0;
  MIL::IROperator::Make((__int128 *)v157, &v156, &v155, (uint64_t)v191, (uint64_t)v189, a3);
  v58 = v190;
  if (v190 == v189)
  {
    v59 = 4;
    v58 = v189;
  }
  else
  {
    if (!v190)
      goto LABEL_62;
    v59 = 5;
  }
  (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_62:
  v60 = v192;
  if (v192 == v191)
  {
    v61 = 4;
    v60 = v191;
    goto LABEL_66;
  }
  if (v192)
  {
    v61 = 5;
LABEL_66:
    (*(void (**)(void))(*v60 + 8 * v61))();
  }
  v62 = (std::__shared_weak_count *)*((_QWORD *)&v155 + 1);
  if (*((_QWORD *)&v155 + 1))
  {
    v63 = (unint64_t *)(*((_QWORD *)&v155 + 1) + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v65 = (std::__shared_weak_count *)*((_QWORD *)&v156 + 1);
  if (*((_QWORD *)&v156 + 1))
  {
    v66 = (unint64_t *)(*((_QWORD *)&v156 + 1) + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  if (SHIBYTE(v158) < 0)
    operator delete(v157[0]);
  v171 = 0;
  v68 = (_OWORD *)operator new();
  *v68 = 0u;
  v68[1] = 0u;
  *((_DWORD *)v68 + 8) = 1065353216;
  v171 = v68;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v154);
  MIL::IRParameter::Make(&v154, (uint64_t *)&v176);
  v69 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v68, "minimum_compute_type", (uint64_t *)&v176);
  v70 = v176;
  v176 = 0;
  if (v70)
    (*(void (**)(void *))(*(_QWORD *)v70 + 8))(v70);
  v71 = (std::__shared_weak_count *)v154.n128_u64[1];
  if (v154.n128_u64[1])
  {
    v72 = (unint64_t *)(v154.n128_u64[1] + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v69 + 5) + 32))(*((_QWORD *)v69 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v69 + 5) + 48))(*((_QWORD *)v69 + 5), 1);
  v74 = *a3;
  v75 = (std::__shared_weak_count_vtbl *)v171;
  v152 = v171;
  if (v171)
  {
    v76 = (std::__shared_weak_count *)operator new();
    v76->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v76->__shared_owners_ = 0;
    v76->__shared_weak_owners_ = 0;
    v76[1].__vftable = v75;
  }
  else
  {
    v76 = 0;
  }
  v153 = v76;
  v171 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v74 + 184))(v74, &v152);
  v77 = v153;
  if (v153)
  {
    p_shared_owners = (unint64_t *)&v153->__shared_owners_;
    do
      v79 = __ldaxr(p_shared_owners);
    while (__stlxr(v79 - 1, p_shared_owners));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v80 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v176, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v176, (uint64_t)v187);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v80 + 200))(v80, v187);
  v81 = v188;
  if (v188 == v187)
  {
    v82 = 4;
    v81 = v187;
  }
  else
  {
    if (!v188)
      goto LABEL_99;
    v82 = 5;
  }
  (*(void (**)(void))(*v81 + 8 * v82))();
LABEL_99:
  if (SHIBYTE(v178) < 0)
    operator delete(v176);
  MIL::Validation::TensorDTypeConstraints::Make(&v176);
  v83 = v176;
  std::string::basic_string[abi:ne180100]<0>(v148, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v148, 0, (uint64_t *)&Scalar);
  v150 = Scalar;
  if (Scalar)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = Scalar;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v151 = v84;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v146, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v83 + 24))(v83, &v150, v146);
  if (v147 < 0)
    operator delete(v146[0]);
  v86 = v151;
  if (v151)
  {
    v87 = (unint64_t *)&v151->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = Scalar;
  Scalar = 0;
  if (v89)
    (*((void (**)(std::__shared_weak_count_vtbl *))v89->~__shared_weak_count + 1))(v89);
  if (v149 < 0)
    operator delete(v148[0]);
  v90 = v176;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v144 = Scalar;
  if (Scalar)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = Scalar;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v145 = v91;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v142, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v90 + 24))(v90, &v144, v142);
  if (v143 < 0)
    operator delete(v142[0]);
  v93 = v145;
  if (v145)
  {
    v94 = (unint64_t *)&v145->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = Scalar;
  Scalar = 0;
  if (v96)
    (*((void (**)(std::__shared_weak_count_vtbl *))v96->~__shared_weak_count + 1))(v96);
  v97 = *a3;
  v140 = v176;
  if (v176)
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = (std::__shared_weak_count_vtbl *)v176;
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = v99;
  }
  else
  {
    v98 = 0;
  }
  v141 = v98;
  v176 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v97 + 56))(v97, &v140);
  v100 = v141;
  if (v141)
  {
    v101 = (unint64_t *)&v141->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = v176;
  v176 = 0;
  if (v103)
    (*(void (**)(void *))(*(_QWORD *)v103 + 8))(v103);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v104 = __p;
  std::string::basic_string[abi:ne180100]<0>(v136, "mode");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v136, 0, (uint64_t *)&v159);
  v138 = v159;
  if (v159)
  {
    v105 = (std::__shared_weak_count *)operator new();
    v106 = (std::__shared_weak_count_vtbl *)v159;
    v105->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v105->__shared_owners_ = 0;
    v105->__shared_weak_owners_ = 0;
    v105[1].__vftable = v106;
  }
  else
  {
    v105 = 0;
  }
  v139 = v105;
  v159 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v176, "EXACT");
  std::string::basic_string[abi:ne180100]<0>(v179, "SIGMOID_APPROXIMATION");
  std::string::basic_string[abi:ne180100]<0>(v180, "TANH_APPROXIMATION");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v176, 3);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v104 + 24))(v104, &v138, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -9; i -= 3)
  {
    if (SHIBYTE(v180[i + 2]) < 0)
      operator delete((void *)v180[i]);
  }
  v108 = v139;
  if (v139)
  {
    v109 = (unint64_t *)&v139->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v159;
  v159 = 0;
  if (v111)
    (*(void (**)(void *))(*(_QWORD *)v111 + 8))(v111);
  if (v137 < 0)
    operator delete(v136[0]);
  v112 = __p;
  std::string::basic_string[abi:ne180100]<0>(v132, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v132, 1, (uint64_t *)&v159);
  v134 = v159;
  if (v159)
  {
    v113 = (std::__shared_weak_count *)operator new();
    v114 = (std::__shared_weak_count_vtbl *)v159;
    v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v113->__shared_owners_ = 0;
    v113->__shared_weak_owners_ = 0;
    v113[1].__vftable = v114;
  }
  else
  {
    v113 = 0;
  }
  v135 = v113;
  v159 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v176, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v179, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v180, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v181, "int32");
  std::string::basic_string[abi:ne180100]<0>(v182, "int8");
  std::string::basic_string[abi:ne180100]<0>(v183, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v176, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v112 + 24))(v112, &v134, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -18; j -= 3)
  {
    if (SHIBYTE(v183[j + 2]) < 0)
      operator delete((void *)v183[j]);
  }
  v116 = v135;
  if (v135)
  {
    v117 = (unint64_t *)&v135->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = v159;
  v159 = 0;
  if (v119)
    (*(void (**)(void *))(*(_QWORD *)v119 + 8))(v119);
  if (v133 < 0)
    operator delete(v132[0]);
  v120 = *a3;
  v130 = __p;
  if (__p)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v122 = (std::__shared_weak_count_vtbl *)__p;
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = v122;
  }
  else
  {
    v121 = 0;
  }
  v131 = v121;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v120 + 56))(v120, &v130);
  v123 = v131;
  if (v131)
  {
    v124 = (unint64_t *)&v131->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = __p;
  __p = 0;
  if (v126)
    (*(void (**)(void *))(*(_QWORD *)v126 + 8))(v126);
  if (v171)
  {
    v127 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v171);
    MEMORY[0x1E0C023A0](v127, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v166, 0);
  result = (uint64_t)v175;
  if (v175)
  {
    v129 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v175);
    return MEMORY[0x1E0C023A0](v129, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0943F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void **a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,void *a63)
{
  uint64_t a68;
  uint64_t *v68;
  void *v70;
  uint64_t v71;

  v70 = a60;
  a60 = 0;
  if (v70)
    (*(void (**)(void *))(*(_QWORD *)v70 + 8))(v70);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a63, 0);
  v71 = *v68;
  *v68 = 0;
  if (v71)
    (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a57, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a68, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::ReLU::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios18::BaseActivation::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E0944570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::ReLU6::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios18::BaseActivation::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E0944670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::Sigmoid::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios18::BaseActivation::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E0944770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::SiLU::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios18::BaseActivation::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E0944870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::Softplus::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios18::BaseActivation::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E0944970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::Softsign::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios18::BaseActivation::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E0944A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::PReLU::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  std::__shared_weak_count_vtbl *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  unsigned __int8 *v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  char **v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t *v61;
  char *v62;
  char *v63;
  char *v64;
  __int128 v65;
  char *v66;
  char *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  char **v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  _OWORD *v86;
  unsigned __int8 *v87;
  void *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  std::__shared_weak_count_vtbl *v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count *v95;
  unint64_t *p_shared_owners;
  unint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  void *v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count_vtbl *v107;
  void *v108;
  std::__shared_weak_count *v109;
  std::__shared_weak_count_vtbl *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count_vtbl *v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  std::__shared_weak_count_vtbl *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  void *v121;
  void *v122;
  std::__shared_weak_count *v123;
  std::__shared_weak_count_vtbl *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count_vtbl *v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  std::__shared_weak_count_vtbl *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  void *v135;
  void *v136;
  std::__shared_weak_count *v137;
  std::__shared_weak_count_vtbl *v138;
  uint64_t i;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  void *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  std::__shared_weak_count_vtbl *v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t result;
  uint64_t v153;
  void *v154;
  std::__shared_weak_count *v155;
  void *v156[2];
  char v157;
  void *v158;
  std::__shared_weak_count *v159;
  void *v160;
  std::__shared_weak_count *v161;
  void *v162[2];
  char v163;
  void *v164[2];
  char v165;
  std::__shared_weak_count_vtbl *v166;
  std::__shared_weak_count *v167;
  void *v168;
  std::__shared_weak_count *v169;
  void *v170[2];
  char v171;
  void *v172[2];
  char v173;
  std::__shared_weak_count_vtbl *v174;
  std::__shared_weak_count *v175;
  void *v176[2];
  char v177;
  void *v178[2];
  char v179;
  std::__shared_weak_count_vtbl *v180;
  std::__shared_weak_count *v181;
  void *v182;
  std::__shared_weak_count *v183;
  __n128 v184;
  __int128 v185;
  __int128 v186;
  void *v187[2];
  uint64_t v188;
  void *v189;
  void *v190;
  _QWORD *v191;
  __n128 v192;
  uint64_t v193;
  uint64_t v194;
  _QWORD *v195;
  char **v196;
  __n128 v197;
  void *__p;
  void *v199;
  _QWORD *v200;
  void *v201;
  void *v202;
  _QWORD *v203;
  __n128 v204;
  _QWORD *v205;
  void *v206;
  uint64_t v207;
  uint64_t v208;
  _QWORD v209[3];
  uint64_t v210[3];
  uint64_t v211[3];
  uint64_t v212[3];
  _QWORD v213[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_get_deleter;
  uint64_t v216;
  _BYTE v217[24];
  _BYTE *v218;
  _BYTE v219[24];
  _BYTE *v220;
  _QWORD v221[3];
  _QWORD *v222;
  uint64_t v223;

  v223 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v205 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (uint64_t)&v10->__get_deleter;
  v216 = (uint64_t)&v10->__get_deleter;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v10->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  v10->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v9;
  Scalar = v10;
  v206 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(0x18uLL);
  v202 = v14 + 3;
  v203 = v14 + 3;
  *v14 = v11;
  v14[1] = v12;
  v14[2] = v13;
  v201 = v14;
  v207 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v201);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(0x18uLL);
  v199 = v18 + 3;
  v200 = v18 + 3;
  *v18 = v15;
  v18[1] = v16;
  v18[2] = v17;
  __p = v18;
  v208 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v206, 3, &v204);
  MIL::IRParameter::Make(&v204, (uint64_t *)&v189);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v189);
  v19 = v189;
  v189 = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = (std::__shared_weak_count *)v204.n128_u64[1];
  if (v204.n128_u64[1])
  {
    v21 = (unint64_t *)(v204.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (__p)
  {
    v199 = __p;
    operator delete(__p);
  }
  if (v201)
  {
    v202 = v201;
    operator delete(v201);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v23 = v205;
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v25;
  v25->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v24;
  p_get_deleter = (uint64_t)&v25->~__shared_weak_count_0;
  v216 = (uint64_t)&v25->~__shared_weak_count_0;
  v206 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v26 = MIL::IRUnknownDimension::Make(a1, 0);
  v27 = operator new(8uLL);
  v201 = v27;
  *v27 = v26;
  v202 = v27 + 1;
  v203 = v27 + 1;
  v207 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v201);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = operator new(8uLL);
  __p = v29;
  *v29 = v28;
  v199 = v29 + 1;
  v200 = v29 + 1;
  v208 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v206, 3, &v197);
  MIL::IRParameter::Make(&v197, (uint64_t *)&v189);
  v30 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v23, "alpha", (uint64_t *)&v189);
  v31 = v189;
  v189 = 0;
  if (v31)
    (*(void (**)(void *))(*(_QWORD *)v31 + 8))(v31);
  v32 = (std::__shared_weak_count *)v197.n128_u64[1];
  if (v197.n128_u64[1])
  {
    v33 = (unint64_t *)(v197.n128_u64[1] + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (__p)
  {
    v199 = __p;
    operator delete(__p);
  }
  if (v201)
  {
    v202 = v201;
    operator delete(v201);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v30 + 5) + 32))(*((_QWORD *)v30 + 5), 1);
  v196 = 0;
  v35 = operator new();
  *(_QWORD *)v35 = 0;
  *(_QWORD *)(v35 + 8) = 0;
  *(_QWORD *)(v35 + 16) = 0;
  v206 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v196, (void **)v35);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v206, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v196, 1uLL);
  v36 = v196;
  v37 = MIL::IRUnknownDimension::Make(a1, 0);
  v38 = MIL::IRUnknownDimension::Make(a1, 0);
  v39 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v40 = operator new(0x18uLL);
  v202 = v40 + 3;
  v203 = v40 + 3;
  *v40 = v37;
  v40[1] = v38;
  v40[2] = v39;
  v201 = v40;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v201);
  v41 = MIL::IRUnknownDimension::Make(a1, 0);
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v44 = operator new(0x18uLL);
  v199 = v44 + 3;
  v200 = v44 + 3;
  *v44 = v41;
  v44[1] = v42;
  v44[2] = v43;
  __p = v44;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v45 = MIL::IRUnknownDimension::Make(a1, 0);
  v46 = MIL::IRUnknownDimension::Make(a1, 0);
  v47 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v48 = operator new(0x18uLL);
  v190 = v48 + 3;
  v191 = v48 + 3;
  *v48 = v45;
  v48[1] = v46;
  v48[2] = v47;
  v189 = v48;
  v216 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v189);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v192);
  MIL::IRParameter::Make(&v192, &v193);
  v49 = v193;
  v194 = v193;
  if (v193)
  {
    v50 = (_QWORD *)operator new();
    v51 = v193;
    *v50 = &unk_1EA99F888;
    v50[1] = 0;
    v50[2] = 0;
    v50[3] = v51;
  }
  else
  {
    v50 = 0;
  }
  v195 = v50;
  v193 = 0;
  v52 = v36[2];
  v53 = v36[1];
  if (v53 >= v52)
  {
    v55 = (v53 - *v36) >> 4;
    v56 = v55 + 1;
    if ((unint64_t)(v55 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v57 = v52 - *v36;
    if (v57 >> 3 > v56)
      v56 = v57 >> 3;
    if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF0)
      v58 = 0xFFFFFFFFFFFFFFFLL;
    else
      v58 = v56;
    v209[1] = v36 + 2;
    v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v36 + 2), v58);
    v61 = (uint64_t *)&v59[16 * v55];
    *v61 = v49;
    v61[1] = (uint64_t)v50;
    v194 = 0;
    v195 = 0;
    v63 = *v36;
    v62 = v36[1];
    if (v62 == *v36)
    {
      v66 = v36[1];
      v64 = &v59[16 * v55];
    }
    else
    {
      v64 = &v59[16 * v55];
      do
      {
        v65 = *((_OWORD *)v62 - 1);
        v62 -= 16;
        *((_OWORD *)v64 - 1) = v65;
        v64 -= 16;
        *(_QWORD *)v62 = 0;
        *((_QWORD *)v62 + 1) = 0;
      }
      while (v62 != v63);
      v66 = *v36;
      v62 = v36[1];
    }
    v54 = (char *)(v61 + 2);
    *v36 = v64;
    v207 = (uint64_t)v66;
    v36[1] = (char *)(v61 + 2);
    v208 = (uint64_t)v62;
    v67 = v36[2];
    v36[2] = &v59[16 * v60];
    v209[0] = v67;
    v206 = v66;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v206);
  }
  else
  {
    *(_QWORD *)v53 = v49;
    *((_QWORD *)v53 + 1) = v50;
    v54 = v53 + 16;
    v194 = 0;
    v195 = 0;
  }
  v36[1] = v54;
  v68 = v193;
  v193 = 0;
  if (v68)
    (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
  v69 = (std::__shared_weak_count *)v192.n128_u64[1];
  if (v192.n128_u64[1])
  {
    v70 = (unint64_t *)(v192.n128_u64[1] + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  if (v189)
  {
    v190 = v189;
    operator delete(v189);
  }
  if (__p)
  {
    v199 = __p;
    operator delete(__p);
  }
  if (v201)
  {
    v202 = v201;
    operator delete(v201);
  }
  *(_OWORD *)v187 = *(_OWORD *)a2;
  v188 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v72 = (uint64_t)v205;
  *(_QWORD *)&v186 = v205;
  if (v205)
  {
    v73 = (_QWORD *)operator new();
    *v73 = &unk_1EA99F8E8;
    v73[1] = 0;
    v73[2] = 0;
    v73[3] = v72;
  }
  else
  {
    v73 = 0;
  }
  *((_QWORD *)&v186 + 1) = v73;
  v205 = 0;
  *(_QWORD *)&v185 = v196;
  if (v196)
  {
    v74 = (_QWORD *)operator new();
    v75 = v196;
    *v74 = &unk_1EA99F948;
    v74[1] = 0;
    v74[2] = 0;
    v74[3] = v75;
  }
  else
  {
    v74 = 0;
  }
  *((_QWORD *)&v185 + 1) = v74;
  v196 = 0;
  v221[0] = &unk_1EA99FAC8;
  v221[1] = MIL::Operators::Common::ios18::CustomValidators::ValidatePReLU;
  v222 = v221;
  v220 = 0;
  MIL::IROperator::Make((__int128 *)v187, &v186, &v185, (uint64_t)v221, (uint64_t)v219, a3);
  v76 = v220;
  if (v220 == v219)
  {
    v77 = 4;
    v76 = v219;
  }
  else
  {
    if (!v220)
      goto LABEL_68;
    v77 = 5;
  }
  (*(void (**)(void))(*v76 + 8 * v77))();
LABEL_68:
  v78 = v222;
  if (v222 == v221)
  {
    v79 = 4;
    v78 = v221;
    goto LABEL_72;
  }
  if (v222)
  {
    v79 = 5;
LABEL_72:
    (*(void (**)(void))(*v78 + 8 * v79))();
  }
  v80 = (std::__shared_weak_count *)*((_QWORD *)&v185 + 1);
  if (*((_QWORD *)&v185 + 1))
  {
    v81 = (unint64_t *)(*((_QWORD *)&v185 + 1) + 8);
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v83 = (std::__shared_weak_count *)*((_QWORD *)&v186 + 1);
  if (*((_QWORD *)&v186 + 1))
  {
    v84 = (unint64_t *)(*((_QWORD *)&v186 + 1) + 8);
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  if (SHIBYTE(v188) < 0)
    operator delete(v187[0]);
  v201 = 0;
  v86 = (_OWORD *)operator new();
  *v86 = 0u;
  v86[1] = 0u;
  *((_DWORD *)v86 + 8) = 1065353216;
  v201 = v86;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v184);
  MIL::IRParameter::Make(&v184, (uint64_t *)&v206);
  v87 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v86, "minimum_compute_type", (uint64_t *)&v206);
  v88 = v206;
  v206 = 0;
  if (v88)
    (*(void (**)(void *))(*(_QWORD *)v88 + 8))(v88);
  v89 = (std::__shared_weak_count *)v184.n128_u64[1];
  if (v184.n128_u64[1])
  {
    v90 = (unint64_t *)(v184.n128_u64[1] + 8);
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v87 + 5) + 32))(*((_QWORD *)v87 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v87 + 5) + 48))(*((_QWORD *)v87 + 5), 1);
  v92 = *a3;
  v93 = (std::__shared_weak_count_vtbl *)v201;
  v182 = v201;
  if (v201)
  {
    v94 = (std::__shared_weak_count *)operator new();
    v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v94->__shared_owners_ = 0;
    v94->__shared_weak_owners_ = 0;
    v94[1].__vftable = v93;
  }
  else
  {
    v94 = 0;
  }
  v183 = v94;
  v201 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v92 + 184))(v92, &v182);
  v95 = v183;
  if (v183)
  {
    p_shared_owners = (unint64_t *)&v183->__shared_owners_;
    do
      v97 = __ldaxr(p_shared_owners);
    while (__stlxr(v97 - 1, p_shared_owners));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v206, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v206, (uint64_t)v217);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v98 + 200))(v98, v217);
  v99 = v218;
  if (v218 == v217)
  {
    v100 = 4;
    v99 = v217;
  }
  else
  {
    if (!v218)
      goto LABEL_105;
    v100 = 5;
  }
  (*(void (**)(void))(*v99 + 8 * v100))();
LABEL_105:
  if (SHIBYTE(v208) < 0)
    operator delete(v206);
  MIL::Validation::TensorDTypeConstraints::Make(&v206);
  v101 = v206;
  std::string::basic_string[abi:ne180100]<0>(v178, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v178, 0, (uint64_t *)&Scalar);
  v180 = Scalar;
  if (Scalar)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = Scalar;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v181 = v102;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v176, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v101 + 24))(v101, &v180, v176);
  if (v177 < 0)
    operator delete(v176[0]);
  v104 = v181;
  if (v181)
  {
    v105 = (unint64_t *)&v181->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = Scalar;
  Scalar = 0;
  if (v107)
    (*((void (**)(std::__shared_weak_count_vtbl *))v107->~__shared_weak_count + 1))(v107);
  if (v179 < 0)
    operator delete(v178[0]);
  v108 = v206;
  std::string::basic_string[abi:ne180100]<0>(v172, "alpha");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v172, 0, (uint64_t *)&Scalar);
  v174 = Scalar;
  if (Scalar)
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = Scalar;
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = v110;
  }
  else
  {
    v109 = 0;
  }
  v175 = v109;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v170, "U");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v108 + 24))(v108, &v174, v170);
  if (v171 < 0)
    operator delete(v170[0]);
  v111 = v175;
  if (v175)
  {
    v112 = (unint64_t *)&v175->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = Scalar;
  Scalar = 0;
  if (v114)
    (*((void (**)(std::__shared_weak_count_vtbl *))v114->~__shared_weak_count + 1))(v114);
  if (v173 < 0)
    operator delete(v172[0]);
  v115 = *a3;
  v168 = v206;
  if (v206)
  {
    v116 = (std::__shared_weak_count *)operator new();
    v117 = (std::__shared_weak_count_vtbl *)v206;
    v116->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v116->__shared_owners_ = 0;
    v116->__shared_weak_owners_ = 0;
    v116[1].__vftable = v117;
  }
  else
  {
    v116 = 0;
  }
  v169 = v116;
  v206 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v115 + 56))(v115, &v168);
  v118 = v169;
  if (v169)
  {
    v119 = (unint64_t *)&v169->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  v121 = v206;
  v206 = 0;
  if (v121)
    (*(void (**)(void *))(*(_QWORD *)v121 + 8))(v121);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v206);
  v122 = v206;
  std::string::basic_string[abi:ne180100]<0>(v164, "alpha");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v164, 0, (uint64_t *)&Scalar);
  v166 = Scalar;
  if (Scalar)
  {
    v123 = (std::__shared_weak_count *)operator new();
    v124 = Scalar;
    v123->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v123->__shared_owners_ = 0;
    v123->__shared_weak_owners_ = 0;
    v123[1].__vftable = v124;
  }
  else
  {
    v123 = 0;
  }
  v167 = v123;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v162, "C");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v122 + 24))(v122, &v166, 0, v162);
  if (v163 < 0)
    operator delete(v162[0]);
  v125 = v167;
  if (v167)
  {
    v126 = (unint64_t *)&v167->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  v128 = Scalar;
  Scalar = 0;
  if (v128)
    (*((void (**)(std::__shared_weak_count_vtbl *))v128->~__shared_weak_count + 1))(v128);
  if (v165 < 0)
    operator delete(v164[0]);
  v129 = *a3;
  v160 = v206;
  if (v206)
  {
    v130 = (std::__shared_weak_count *)operator new();
    v131 = (std::__shared_weak_count_vtbl *)v206;
    v130->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v130->__shared_owners_ = 0;
    v130->__shared_weak_owners_ = 0;
    v130[1].__vftable = v131;
  }
  else
  {
    v130 = 0;
  }
  v161 = v130;
  v206 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v129 + 56))(v129, &v160);
  v132 = v161;
  if (v161)
  {
    v133 = (unint64_t *)&v161->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  v135 = v206;
  v206 = 0;
  if (v135)
    (*(void (**)(void *))(*(_QWORD *)v135 + 8))(v135);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v136 = __p;
  std::string::basic_string[abi:ne180100]<0>(v156, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v156, 1, (uint64_t *)&v189);
  v158 = v189;
  if (v189)
  {
    v137 = (std::__shared_weak_count *)operator new();
    v138 = (std::__shared_weak_count_vtbl *)v189;
    v137->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v137->__shared_owners_ = 0;
    v137->__shared_weak_owners_ = 0;
    v137[1].__vftable = v138;
  }
  else
  {
    v137 = 0;
  }
  v159 = v137;
  v189 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v206, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v209, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v210, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v211, "int32");
  std::string::basic_string[abi:ne180100]<0>(v212, "int8");
  std::string::basic_string[abi:ne180100]<0>(v213, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v206, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v136 + 24))(v136, &v158, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v213[i + 2]) < 0)
      operator delete((void *)v213[i]);
  }
  v140 = v159;
  if (v159)
  {
    v141 = (unint64_t *)&v159->__shared_owners_;
    do
      v142 = __ldaxr(v141);
    while (__stlxr(v142 - 1, v141));
    if (!v142)
    {
      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
      std::__shared_weak_count::__release_weak(v140);
    }
  }
  v143 = v189;
  v189 = 0;
  if (v143)
    (*(void (**)(void *))(*(_QWORD *)v143 + 8))(v143);
  if (v157 < 0)
    operator delete(v156[0]);
  v144 = *a3;
  v154 = __p;
  if (__p)
  {
    v145 = (std::__shared_weak_count *)operator new();
    v146 = (std::__shared_weak_count_vtbl *)__p;
    v145->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v145->__shared_owners_ = 0;
    v145->__shared_weak_owners_ = 0;
    v145[1].__vftable = v146;
  }
  else
  {
    v145 = 0;
  }
  v155 = v145;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v144 + 56))(v144, &v154);
  v147 = v155;
  if (v155)
  {
    v148 = (unint64_t *)&v155->__shared_owners_;
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
  v150 = __p;
  __p = 0;
  if (v150)
    (*(void (**)(void *))(*(_QWORD *)v150 + 8))(v150);
  if (v201)
  {
    v151 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v201);
    MEMORY[0x1E0C023A0](v151, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v196, 0);
  result = (uint64_t)v205;
  if (v205)
  {
    v153 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v205);
    return MEMORY[0x1E0C023A0](v153, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0945CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void **a65;
  void *a68;
  void *a71;
  uint64_t *v71;
  void *v73;
  uint64_t v74;

  v73 = a68;
  a68 = 0;
  if (v73)
    (*(void (**)(void *))(*(_QWORD *)v73 + 8))(v73);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a71, 0);
  v74 = *v71;
  *v71 = 0;
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a65, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x218], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::Softmax::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count_vtbl *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  unsigned __int8 *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  char **v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t *v46;
  char *v47;
  char *v48;
  char *v49;
  __int128 v50;
  char *v51;
  char *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  char **v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  _OWORD *v71;
  unsigned __int8 *v72;
  void *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count *v80;
  unint64_t *p_shared_owners;
  unint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  void *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count_vtbl *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count_vtbl *v92;
  void *v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count_vtbl *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count_vtbl *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  std::__shared_weak_count_vtbl *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  void *v106;
  void *v107;
  std::__shared_weak_count *v108;
  std::__shared_weak_count_vtbl *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count_vtbl *v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  std::__shared_weak_count_vtbl *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  void *v120;
  void *v121;
  std::__shared_weak_count *v122;
  std::__shared_weak_count_vtbl *v123;
  uint64_t i;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  std::__shared_weak_count_vtbl *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t result;
  uint64_t v138;
  void *v139;
  std::__shared_weak_count *v140;
  void *v141[2];
  char v142;
  void *v143;
  std::__shared_weak_count *v144;
  void *v145;
  std::__shared_weak_count *v146;
  void *v147[2];
  char v148;
  void *v149[2];
  char v150;
  std::__shared_weak_count_vtbl *v151;
  std::__shared_weak_count *v152;
  void *v153;
  std::__shared_weak_count *v154;
  void *v155[2];
  char v156;
  std::__shared_weak_count_vtbl *v157;
  std::__shared_weak_count *v158;
  void *v159[2];
  char v160;
  void *v161[2];
  char v162;
  std::__shared_weak_count_vtbl *v163;
  std::__shared_weak_count *v164;
  void *v165;
  std::__shared_weak_count *v166;
  __n128 v167;
  __int128 v168;
  __int128 v169;
  void *v170[2];
  uint64_t v171;
  void *v172;
  void *v173;
  _QWORD *v174;
  __n128 v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  char **v179;
  __n128 v180;
  void *__p;
  void *v182;
  _QWORD *v183;
  void *v184;
  void *v185;
  _QWORD *v186;
  __n128 v187;
  _QWORD *v188;
  void *v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD v192[3];
  uint64_t v193[3];
  uint64_t v194[3];
  uint64_t v195[3];
  _QWORD v196[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_on_zero_shared;
  uint64_t v199;
  _BYTE v200[24];
  _BYTE *v201;
  _BYTE v202[24];
  _BYTE *v203;
  _BYTE v204[24];
  _BYTE *v205;
  uint64_t v206;

  v206 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v188 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v9->__on_zero_shared;
  v199 = (uint64_t)&v9->__on_zero_shared;
  v9->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v9->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  Scalar = v9;
  v189 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v185 = v12 + 2;
  v186 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v184 = v12;
  v190 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v184);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v182 = v15 + 2;
  v183 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  __p = v15;
  v191 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v189, 3, &v187);
  MIL::IRParameter::Make(&v187, (uint64_t *)&v172);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v172);
  v16 = v172;
  v172 = 0;
  if (v16)
    (*(void (**)(void *))(*(_QWORD *)v16 + 8))(v16);
  v17 = (std::__shared_weak_count *)v187.n128_u64[1];
  if (v187.n128_u64[1])
  {
    v18 = (unint64_t *)(v187.n128_u64[1] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v182 = __p;
    operator delete(__p);
  }
  if (v184)
  {
    v185 = v184;
    operator delete(v184);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v20 = v188;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v180);
  MIL::IRParameter::Make(&v180, (uint64_t *)&v189);
  v21 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v20, "axis", (uint64_t *)&v189);
  v22 = v189;
  v189 = 0;
  if (v22)
    (*(void (**)(void *))(*(_QWORD *)v22 + 8))(v22);
  v23 = (std::__shared_weak_count *)v180.n128_u64[1];
  if (v180.n128_u64[1])
  {
    v24 = (unint64_t *)(v180.n128_u64[1] + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v21 + 5) + 32))(*((_QWORD *)v21 + 5), 1);
  v179 = 0;
  v26 = operator new();
  *(_QWORD *)v26 = 0;
  *(_QWORD *)(v26 + 8) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  v189 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v179, (void **)v26);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v189, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v179, 1uLL);
  v27 = v179;
  v28 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v29 = operator new(8uLL);
  v184 = v29;
  *v29 = v28;
  v185 = v29 + 1;
  v186 = v29 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v184);
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = operator new(8uLL);
  __p = v31;
  *v31 = v30;
  v182 = v31 + 1;
  v183 = v31 + 1;
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(8uLL);
  v172 = v33;
  *v33 = v32;
  v173 = v33 + 1;
  v174 = v33 + 1;
  v199 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v172);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v175);
  MIL::IRParameter::Make(&v175, &v176);
  v34 = v176;
  v177 = v176;
  if (v176)
  {
    v35 = (_QWORD *)operator new();
    v36 = v176;
    *v35 = &unk_1EA99F888;
    v35[1] = 0;
    v35[2] = 0;
    v35[3] = v36;
  }
  else
  {
    v35 = 0;
  }
  v178 = v35;
  v176 = 0;
  v37 = v27[2];
  v38 = v27[1];
  if (v38 >= v37)
  {
    v40 = (v38 - *v27) >> 4;
    v41 = v40 + 1;
    if ((unint64_t)(v40 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v42 = v37 - *v27;
    if (v42 >> 3 > v41)
      v41 = v42 >> 3;
    if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF0)
      v43 = 0xFFFFFFFFFFFFFFFLL;
    else
      v43 = v41;
    v192[1] = v27 + 2;
    v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v27 + 2), v43);
    v46 = (uint64_t *)&v44[16 * v40];
    *v46 = v34;
    v46[1] = (uint64_t)v35;
    v177 = 0;
    v178 = 0;
    v48 = *v27;
    v47 = v27[1];
    if (v47 == *v27)
    {
      v51 = v27[1];
      v49 = &v44[16 * v40];
    }
    else
    {
      v49 = &v44[16 * v40];
      do
      {
        v50 = *((_OWORD *)v47 - 1);
        v47 -= 16;
        *((_OWORD *)v49 - 1) = v50;
        v49 -= 16;
        *(_QWORD *)v47 = 0;
        *((_QWORD *)v47 + 1) = 0;
      }
      while (v47 != v48);
      v51 = *v27;
      v47 = v27[1];
    }
    v39 = (char *)(v46 + 2);
    *v27 = v49;
    v190 = (uint64_t)v51;
    v27[1] = (char *)(v46 + 2);
    v191 = (uint64_t)v47;
    v52 = v27[2];
    v27[2] = &v44[16 * v45];
    v192[0] = v52;
    v189 = v51;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v189);
  }
  else
  {
    *(_QWORD *)v38 = v34;
    *((_QWORD *)v38 + 1) = v35;
    v39 = v38 + 16;
    v177 = 0;
    v178 = 0;
  }
  v27[1] = v39;
  v53 = v176;
  v176 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  v54 = (std::__shared_weak_count *)v175.n128_u64[1];
  if (v175.n128_u64[1])
  {
    v55 = (unint64_t *)(v175.n128_u64[1] + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  if (v172)
  {
    v173 = v172;
    operator delete(v172);
  }
  if (__p)
  {
    v182 = __p;
    operator delete(__p);
  }
  if (v184)
  {
    v185 = v184;
    operator delete(v184);
  }
  *(_OWORD *)v170 = *(_OWORD *)a2;
  v171 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v57 = (uint64_t)v188;
  *(_QWORD *)&v169 = v188;
  if (v188)
  {
    v58 = (_QWORD *)operator new();
    *v58 = &unk_1EA99F8E8;
    v58[1] = 0;
    v58[2] = 0;
    v58[3] = v57;
  }
  else
  {
    v58 = 0;
  }
  *((_QWORD *)&v169 + 1) = v58;
  v188 = 0;
  *(_QWORD *)&v168 = v179;
  if (v179)
  {
    v59 = (_QWORD *)operator new();
    v60 = v179;
    *v59 = &unk_1EA99F948;
    v59[1] = 0;
    v59[2] = 0;
    v59[3] = v60;
  }
  else
  {
    v59 = 0;
  }
  *((_QWORD *)&v168 + 1) = v59;
  v179 = 0;
  v205 = 0;
  v203 = 0;
  MIL::IROperator::Make((__int128 *)v170, &v169, &v168, (uint64_t)v204, (uint64_t)v202, a3);
  v61 = v203;
  if (v203 == v202)
  {
    v62 = 4;
    v61 = v202;
  }
  else
  {
    if (!v203)
      goto LABEL_62;
    v62 = 5;
  }
  (*(void (**)(void))(*v61 + 8 * v62))();
LABEL_62:
  v63 = v205;
  if (v205 == v204)
  {
    v64 = 4;
    v63 = v204;
    goto LABEL_66;
  }
  if (v205)
  {
    v64 = 5;
LABEL_66:
    (*(void (**)(void))(*v63 + 8 * v64))();
  }
  v65 = (std::__shared_weak_count *)*((_QWORD *)&v168 + 1);
  if (*((_QWORD *)&v168 + 1))
  {
    v66 = (unint64_t *)(*((_QWORD *)&v168 + 1) + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v68 = (std::__shared_weak_count *)*((_QWORD *)&v169 + 1);
  if (*((_QWORD *)&v169 + 1))
  {
    v69 = (unint64_t *)(*((_QWORD *)&v169 + 1) + 8);
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  if (SHIBYTE(v171) < 0)
    operator delete(v170[0]);
  v184 = 0;
  v71 = (_OWORD *)operator new();
  *v71 = 0u;
  v71[1] = 0u;
  *((_DWORD *)v71 + 8) = 1065353216;
  v184 = v71;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v167);
  MIL::IRParameter::Make(&v167, (uint64_t *)&v189);
  v72 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v71, "minimum_compute_type", (uint64_t *)&v189);
  v73 = v189;
  v189 = 0;
  if (v73)
    (*(void (**)(void *))(*(_QWORD *)v73 + 8))(v73);
  v74 = (std::__shared_weak_count *)v167.n128_u64[1];
  if (v167.n128_u64[1])
  {
    v75 = (unint64_t *)(v167.n128_u64[1] + 8);
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v72 + 5) + 32))(*((_QWORD *)v72 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v72 + 5) + 48))(*((_QWORD *)v72 + 5), 1);
  v77 = *a3;
  v78 = (std::__shared_weak_count_vtbl *)v184;
  v165 = v184;
  if (v184)
  {
    v79 = (std::__shared_weak_count *)operator new();
    v79->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v79->__shared_owners_ = 0;
    v79->__shared_weak_owners_ = 0;
    v79[1].__vftable = v78;
  }
  else
  {
    v79 = 0;
  }
  v166 = v79;
  v184 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v77 + 184))(v77, &v165);
  v80 = v166;
  if (v166)
  {
    p_shared_owners = (unint64_t *)&v166->__shared_owners_;
    do
      v82 = __ldaxr(p_shared_owners);
    while (__stlxr(v82 - 1, p_shared_owners));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v83 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v189, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v189, (uint64_t)v200);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v83 + 200))(v83, v200);
  v84 = v201;
  if (v201 == v200)
  {
    v85 = 4;
    v84 = v200;
  }
  else
  {
    if (!v201)
      goto LABEL_99;
    v85 = 5;
  }
  (*(void (**)(void))(*v84 + 8 * v85))();
LABEL_99:
  if (SHIBYTE(v191) < 0)
    operator delete(v189);
  MIL::Validation::TensorDTypeConstraints::Make(&v189);
  v86 = v189;
  std::string::basic_string[abi:ne180100]<0>(v161, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v161, 0, (uint64_t *)&Scalar);
  v163 = Scalar;
  if (Scalar)
  {
    v87 = (std::__shared_weak_count *)operator new();
    v88 = Scalar;
    v87->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v87->__shared_owners_ = 0;
    v87->__shared_weak_owners_ = 0;
    v87[1].__vftable = v88;
  }
  else
  {
    v87 = 0;
  }
  v164 = v87;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v159, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v86 + 24))(v86, &v163, v159);
  if (v160 < 0)
    operator delete(v159[0]);
  v89 = v164;
  if (v164)
  {
    v90 = (unint64_t *)&v164->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = Scalar;
  Scalar = 0;
  if (v92)
    (*((void (**)(std::__shared_weak_count_vtbl *))v92->~__shared_weak_count + 1))(v92);
  if (v162 < 0)
    operator delete(v161[0]);
  v93 = v189;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v157 = Scalar;
  if (Scalar)
  {
    v94 = (std::__shared_weak_count *)operator new();
    v95 = Scalar;
    v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v94->__shared_owners_ = 0;
    v94->__shared_weak_owners_ = 0;
    v94[1].__vftable = v95;
  }
  else
  {
    v94 = 0;
  }
  v158 = v94;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v155, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v93 + 24))(v93, &v157, v155);
  if (v156 < 0)
    operator delete(v155[0]);
  v96 = v158;
  if (v158)
  {
    v97 = (unint64_t *)&v158->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = Scalar;
  Scalar = 0;
  if (v99)
    (*((void (**)(std::__shared_weak_count_vtbl *))v99->~__shared_weak_count + 1))(v99);
  v100 = *a3;
  v153 = v189;
  if (v189)
  {
    v101 = (std::__shared_weak_count *)operator new();
    v102 = (std::__shared_weak_count_vtbl *)v189;
    v101->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v101->__shared_owners_ = 0;
    v101->__shared_weak_owners_ = 0;
    v101[1].__vftable = v102;
  }
  else
  {
    v101 = 0;
  }
  v154 = v101;
  v189 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v100 + 56))(v100, &v153);
  v103 = v154;
  if (v154)
  {
    v104 = (unint64_t *)&v154->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v106 = v189;
  v189 = 0;
  if (v106)
    (*(void (**)(void *))(*(_QWORD *)v106 + 8))(v106);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v189);
  v107 = v189;
  std::string::basic_string[abi:ne180100]<0>(v149, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v149, 0, (uint64_t *)&Scalar);
  v151 = Scalar;
  if (Scalar)
  {
    v108 = (std::__shared_weak_count *)operator new();
    v109 = Scalar;
    v108->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v108->__shared_owners_ = 0;
    v108->__shared_weak_owners_ = 0;
    v108[1].__vftable = v109;
  }
  else
  {
    v108 = 0;
  }
  v152 = v108;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v147, "D");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v107 + 24))(v107, &v151, 0, v147);
  if (v148 < 0)
    operator delete(v147[0]);
  v110 = v152;
  if (v152)
  {
    v111 = (unint64_t *)&v152->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  v113 = Scalar;
  Scalar = 0;
  if (v113)
    (*((void (**)(std::__shared_weak_count_vtbl *))v113->~__shared_weak_count + 1))(v113);
  if (v150 < 0)
    operator delete(v149[0]);
  v114 = *a3;
  v145 = v189;
  if (v189)
  {
    v115 = (std::__shared_weak_count *)operator new();
    v116 = (std::__shared_weak_count_vtbl *)v189;
    v115->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v115->__shared_owners_ = 0;
    v115->__shared_weak_owners_ = 0;
    v115[1].__vftable = v116;
  }
  else
  {
    v115 = 0;
  }
  v146 = v115;
  v189 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v114 + 56))(v114, &v145);
  v117 = v146;
  if (v146)
  {
    v118 = (unint64_t *)&v146->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = v189;
  v189 = 0;
  if (v120)
    (*(void (**)(void *))(*(_QWORD *)v120 + 8))(v120);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v121 = __p;
  std::string::basic_string[abi:ne180100]<0>(v141, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v141, 1, (uint64_t *)&v172);
  v143 = v172;
  if (v172)
  {
    v122 = (std::__shared_weak_count *)operator new();
    v123 = (std::__shared_weak_count_vtbl *)v172;
    v122->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v122->__shared_owners_ = 0;
    v122->__shared_weak_owners_ = 0;
    v122[1].__vftable = v123;
  }
  else
  {
    v122 = 0;
  }
  v144 = v122;
  v172 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v189, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v192, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v193, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v194, "int32");
  std::string::basic_string[abi:ne180100]<0>(v195, "int8");
  std::string::basic_string[abi:ne180100]<0>(v196, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v189, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v121 + 24))(v121, &v143, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v196[i + 2]) < 0)
      operator delete((void *)v196[i]);
  }
  v125 = v144;
  if (v144)
  {
    v126 = (unint64_t *)&v144->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  v128 = v172;
  v172 = 0;
  if (v128)
    (*(void (**)(void *))(*(_QWORD *)v128 + 8))(v128);
  if (v142 < 0)
    operator delete(v141[0]);
  v129 = *a3;
  v139 = __p;
  if (__p)
  {
    v130 = (std::__shared_weak_count *)operator new();
    v131 = (std::__shared_weak_count_vtbl *)__p;
    v130->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v130->__shared_owners_ = 0;
    v130->__shared_weak_owners_ = 0;
    v130[1].__vftable = v131;
  }
  else
  {
    v130 = 0;
  }
  v140 = v130;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v129 + 56))(v129, &v139);
  v132 = v140;
  if (v140)
  {
    v133 = (unint64_t *)&v140->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  v135 = __p;
  __p = 0;
  if (v135)
    (*(void (**)(void *))(*(_QWORD *)v135 + 8))(v135);
  if (v184)
  {
    v136 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v184);
    MEMORY[0x1E0C023A0](v136, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v179, 0);
  result = (uint64_t)v188;
  if (v188)
  {
    v138 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v188);
    return MEMORY[0x1E0C023A0](v138, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0947290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void **a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  void *a67;
  uint64_t a72;
  uint64_t *v72;
  void *v74;
  uint64_t v75;

  v74 = a64;
  a64 = 0;
  if (v74)
    (*(void (**)(void *))(*(_QWORD *)v74 + 8))(v74);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a67, 0);
  v75 = *v72;
  *v72 = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a61, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a72, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::SoftplusParametric::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  std::__shared_weak_count_vtbl *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  unsigned __int8 *v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  std::__shared_weak_count_vtbl *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  unsigned __int8 *v42;
  void *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  char **v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t *v73;
  char *v74;
  char *v75;
  char *v76;
  __int128 v77;
  char *v78;
  char *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  char **v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  _OWORD *v98;
  unsigned __int8 *v99;
  void *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  std::__shared_weak_count_vtbl *v105;
  std::__shared_weak_count *v106;
  std::__shared_weak_count *v107;
  unint64_t *p_shared_owners;
  unint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  void *v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count_vtbl *v119;
  void *v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count_vtbl *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count_vtbl *v126;
  void *v127;
  std::__shared_weak_count *v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count_vtbl *v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  std::__shared_weak_count_vtbl *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  void *v140;
  void *v141;
  std::__shared_weak_count *v142;
  std::__shared_weak_count_vtbl *v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count_vtbl *v147;
  void *v148;
  std::__shared_weak_count *v149;
  std::__shared_weak_count_vtbl *v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count_vtbl *v154;
  uint64_t v155;
  std::__shared_weak_count *v156;
  std::__shared_weak_count_vtbl *v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  void *v161;
  void *v162;
  std::__shared_weak_count *v163;
  std::__shared_weak_count_vtbl *v164;
  uint64_t i;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  void *v169;
  uint64_t v170;
  std::__shared_weak_count *v171;
  std::__shared_weak_count_vtbl *v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  void *v176;
  uint64_t v177;
  uint64_t result;
  uint64_t v179;
  void *v180;
  std::__shared_weak_count *v181;
  void *v182[2];
  char v183;
  void *v184;
  std::__shared_weak_count *v185;
  void *v186;
  std::__shared_weak_count *v187;
  void *v188[2];
  char v189;
  void *v190[2];
  char v191;
  std::__shared_weak_count_vtbl *v192;
  std::__shared_weak_count *v193;
  void *v194[2];
  char v195;
  void *v196[2];
  char v197;
  std::__shared_weak_count_vtbl *v198;
  std::__shared_weak_count *v199;
  void *v200;
  std::__shared_weak_count *v201;
  void *v202[2];
  char v203;
  void *v204[2];
  char v205;
  std::__shared_weak_count_vtbl *v206;
  std::__shared_weak_count *v207;
  void *v208[2];
  char v209;
  void *v210[2];
  char v211;
  std::__shared_weak_count_vtbl *v212;
  std::__shared_weak_count *v213;
  void *v214[2];
  char v215;
  void *v216[2];
  char v217;
  std::__shared_weak_count_vtbl *v218;
  std::__shared_weak_count *v219;
  void *v220;
  std::__shared_weak_count *v221;
  __n128 v222;
  __int128 v223;
  __int128 v224;
  void *v225[2];
  uint64_t v226;
  void *v227;
  void *v228;
  _QWORD *v229;
  __n128 v230;
  uint64_t v231;
  uint64_t v232;
  _QWORD *v233;
  char **v234;
  __n128 v235;
  __n128 v236;
  void *__p;
  void *v238;
  _QWORD *v239;
  void *v240;
  void *v241;
  _QWORD *v242;
  __n128 v243;
  _QWORD *v244;
  void *v245;
  uint64_t v246;
  uint64_t v247;
  _QWORD v248[3];
  uint64_t v249[3];
  uint64_t v250[3];
  uint64_t v251[3];
  _QWORD v252[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_get_deleter;
  uint64_t v255;
  _BYTE v256[24];
  _BYTE *v257;
  _BYTE v258[24];
  _BYTE *v259;
  _QWORD v260[3];
  _QWORD *v261;
  uint64_t v262;

  v262 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v244 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (uint64_t)&v10->__get_deleter;
  v255 = (uint64_t)&v10->__get_deleter;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v10->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  v10->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v9;
  Scalar = v10;
  v245 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(0x18uLL);
  v242 = v14 + 3;
  *v14 = v11;
  v14[1] = v12;
  v14[2] = v13;
  v240 = v14;
  v241 = v14 + 3;
  v246 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v240);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(0x18uLL);
  v239 = v18 + 3;
  *v18 = v15;
  v18[1] = v16;
  v18[2] = v17;
  __p = v18;
  v238 = v18 + 3;
  v247 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v245, 3, &v243);
  MIL::IRParameter::Make(&v243, (uint64_t *)&v227);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v227);
  v19 = v227;
  v227 = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = (std::__shared_weak_count *)v243.n128_u64[1];
  if (v243.n128_u64[1])
  {
    v21 = (unint64_t *)(v243.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (__p)
  {
    v238 = __p;
    operator delete(__p);
  }
  if (v240)
  {
    v241 = v240;
    operator delete(v240);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v23 = v244;
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v25;
  v25->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v24;
  p_get_deleter = (uint64_t)&v25->~__shared_weak_count_0;
  v255 = (uint64_t)&v25->~__shared_weak_count_0;
  v245 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v26 = MIL::IRUnknownDimension::Make(a1, 0);
  v27 = operator new(8uLL);
  v240 = v27;
  *v27 = v26;
  v242 = v27 + 1;
  v241 = v27 + 1;
  v246 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v240);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = operator new(8uLL);
  __p = v29;
  *v29 = v28;
  v239 = v29 + 1;
  v238 = v29 + 1;
  v247 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v245, 3, &v236);
  MIL::IRParameter::Make(&v236, (uint64_t *)&v227);
  v30 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v23, "alpha", (uint64_t *)&v227);
  v31 = v227;
  v227 = 0;
  if (v31)
    (*(void (**)(void *))(*(_QWORD *)v31 + 8))(v31);
  v32 = (std::__shared_weak_count *)v236.n128_u64[1];
  if (v236.n128_u64[1])
  {
    v33 = (unint64_t *)(v236.n128_u64[1] + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (__p)
  {
    v238 = __p;
    operator delete(__p);
  }
  if (v240)
  {
    v241 = v240;
    operator delete(v240);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v30 + 5) + 32))(*((_QWORD *)v30 + 5), 1);
  v35 = v244;
  v36 = MIL::IRUnknownDimension::Make(a1, 0);
  v37 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v37;
  v37->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v36;
  p_get_deleter = (uint64_t)&v37->~__shared_weak_count_0;
  v255 = (uint64_t)&v37->~__shared_weak_count_0;
  v245 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&Scalar);
  v38 = MIL::IRUnknownDimension::Make(a1, 0);
  v39 = operator new(8uLL);
  v240 = v39;
  *v39 = v38;
  v242 = v39 + 1;
  v241 = v39 + 1;
  v246 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v240);
  v40 = MIL::IRUnknownDimension::Make(a1, 0);
  v41 = operator new(8uLL);
  __p = v41;
  *v41 = v40;
  v239 = v41 + 1;
  v238 = v41 + 1;
  v247 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v245, 3, &v235);
  MIL::IRParameter::Make(&v235, (uint64_t *)&v227);
  v42 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v35, "beta", (uint64_t *)&v227);
  v43 = v227;
  v227 = 0;
  if (v43)
    (*(void (**)(void *))(*(_QWORD *)v43 + 8))(v43);
  v44 = (std::__shared_weak_count *)v235.n128_u64[1];
  if (v235.n128_u64[1])
  {
    v45 = (unint64_t *)(v235.n128_u64[1] + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (__p)
  {
    v238 = __p;
    operator delete(__p);
  }
  if (v240)
  {
    v241 = v240;
    operator delete(v240);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v42 + 5) + 32))(*((_QWORD *)v42 + 5), 1);
  v234 = 0;
  v47 = operator new();
  *(_QWORD *)v47 = 0;
  *(_QWORD *)(v47 + 8) = 0;
  *(_QWORD *)(v47 + 16) = 0;
  v245 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v234, (void **)v47);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v245, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v234, 1uLL);
  v48 = v234;
  v49 = MIL::IRUnknownDimension::Make(a1, 0);
  v50 = MIL::IRUnknownDimension::Make(a1, 0);
  v51 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v52 = operator new(0x18uLL);
  v242 = v52 + 3;
  *v52 = v49;
  v52[1] = v50;
  v52[2] = v51;
  v240 = v52;
  v241 = v52 + 3;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v240);
  v53 = MIL::IRUnknownDimension::Make(a1, 0);
  v54 = MIL::IRUnknownDimension::Make(a1, 0);
  v55 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v56 = operator new(0x18uLL);
  v239 = v56 + 3;
  *v56 = v53;
  v56[1] = v54;
  v56[2] = v55;
  __p = v56;
  v238 = v56 + 3;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v57 = MIL::IRUnknownDimension::Make(a1, 0);
  v58 = MIL::IRUnknownDimension::Make(a1, 0);
  v59 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v60 = operator new(0x18uLL);
  v229 = v60 + 3;
  *v60 = v57;
  v60[1] = v58;
  v60[2] = v59;
  v227 = v60;
  v228 = v60 + 3;
  v255 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v227);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v230);
  MIL::IRParameter::Make(&v230, &v231);
  v61 = v231;
  v232 = v231;
  if (v231)
  {
    v62 = (_QWORD *)operator new();
    v63 = v231;
    *v62 = &unk_1EA99F888;
    v62[1] = 0;
    v62[2] = 0;
    v62[3] = v63;
  }
  else
  {
    v62 = 0;
  }
  v233 = v62;
  v231 = 0;
  v64 = v48[2];
  v65 = v48[1];
  if (v65 >= v64)
  {
    v67 = (v65 - *v48) >> 4;
    v68 = v67 + 1;
    if ((unint64_t)(v67 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v69 = v64 - *v48;
    if (v69 >> 3 > v68)
      v68 = v69 >> 3;
    if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF0)
      v70 = 0xFFFFFFFFFFFFFFFLL;
    else
      v70 = v68;
    v248[1] = v48 + 2;
    v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v48 + 2), v70);
    v73 = (uint64_t *)&v71[16 * v67];
    *v73 = v61;
    v73[1] = (uint64_t)v62;
    v233 = 0;
    v232 = 0;
    v75 = *v48;
    v74 = v48[1];
    if (v74 == *v48)
    {
      v78 = v48[1];
      v76 = &v71[16 * v67];
    }
    else
    {
      v76 = &v71[16 * v67];
      do
      {
        v77 = *((_OWORD *)v74 - 1);
        v74 -= 16;
        *((_OWORD *)v76 - 1) = v77;
        v76 -= 16;
        *(_QWORD *)v74 = 0;
        *((_QWORD *)v74 + 1) = 0;
      }
      while (v74 != v75);
      v78 = *v48;
      v74 = v48[1];
    }
    v66 = (char *)(v73 + 2);
    *v48 = v76;
    v246 = (uint64_t)v78;
    v48[1] = (char *)(v73 + 2);
    v247 = (uint64_t)v74;
    v79 = v48[2];
    v48[2] = &v71[16 * v72];
    v248[0] = v79;
    v245 = v78;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v245);
  }
  else
  {
    *(_QWORD *)v65 = v61;
    *((_QWORD *)v65 + 1) = v62;
    v66 = v65 + 16;
    v233 = 0;
    v232 = 0;
  }
  v48[1] = v66;
  v80 = v231;
  v231 = 0;
  if (v80)
    (*(void (**)(uint64_t))(*(_QWORD *)v80 + 8))(v80);
  v81 = (std::__shared_weak_count *)v230.n128_u64[1];
  if (v230.n128_u64[1])
  {
    v82 = (unint64_t *)(v230.n128_u64[1] + 8);
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  if (v227)
  {
    v228 = v227;
    operator delete(v227);
  }
  if (__p)
  {
    v238 = __p;
    operator delete(__p);
  }
  if (v240)
  {
    v241 = v240;
    operator delete(v240);
  }
  *(_OWORD *)v225 = *(_OWORD *)a2;
  v226 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v84 = (uint64_t)v244;
  *(_QWORD *)&v224 = v244;
  if (v244)
  {
    v85 = (_QWORD *)operator new();
    *v85 = &unk_1EA99F8E8;
    v85[1] = 0;
    v85[2] = 0;
    v85[3] = v84;
  }
  else
  {
    v85 = 0;
  }
  *((_QWORD *)&v224 + 1) = v85;
  v244 = 0;
  *(_QWORD *)&v223 = v234;
  if (v234)
  {
    v86 = (_QWORD *)operator new();
    v87 = v234;
    *v86 = &unk_1EA99F948;
    v86[1] = 0;
    v86[2] = 0;
    v86[3] = v87;
  }
  else
  {
    v86 = 0;
  }
  *((_QWORD *)&v223 + 1) = v86;
  v234 = 0;
  v260[0] = &unk_1EA99FAC8;
  v260[1] = MIL::Operators::Common::ios18::CustomValidators::ValidateSoftplusParametric;
  v261 = v260;
  v259 = 0;
  MIL::IROperator::Make((__int128 *)v225, &v224, &v223, (uint64_t)v260, (uint64_t)v258, a3);
  v88 = v259;
  if (v259 == v258)
  {
    v89 = 4;
    v88 = v258;
  }
  else
  {
    if (!v259)
      goto LABEL_81;
    v89 = 5;
  }
  (*(void (**)(void))(*v88 + 8 * v89))();
LABEL_81:
  v90 = v261;
  if (v261 == v260)
  {
    v91 = 4;
    v90 = v260;
    goto LABEL_85;
  }
  if (v261)
  {
    v91 = 5;
LABEL_85:
    (*(void (**)(void))(*v90 + 8 * v91))();
  }
  v92 = (std::__shared_weak_count *)*((_QWORD *)&v223 + 1);
  if (*((_QWORD *)&v223 + 1))
  {
    v93 = (unint64_t *)(*((_QWORD *)&v223 + 1) + 8);
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = (std::__shared_weak_count *)*((_QWORD *)&v224 + 1);
  if (*((_QWORD *)&v224 + 1))
  {
    v96 = (unint64_t *)(*((_QWORD *)&v224 + 1) + 8);
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  if (SHIBYTE(v226) < 0)
    operator delete(v225[0]);
  v240 = 0;
  v98 = (_OWORD *)operator new();
  *v98 = 0u;
  v98[1] = 0u;
  *((_DWORD *)v98 + 8) = 1065353216;
  v240 = v98;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v222);
  MIL::IRParameter::Make(&v222, (uint64_t *)&v245);
  v99 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v98, "minimum_compute_type", (uint64_t *)&v245);
  v100 = v245;
  v245 = 0;
  if (v100)
    (*(void (**)(void *))(*(_QWORD *)v100 + 8))(v100);
  v101 = (std::__shared_weak_count *)v222.n128_u64[1];
  if (v222.n128_u64[1])
  {
    v102 = (unint64_t *)(v222.n128_u64[1] + 8);
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v99 + 5) + 32))(*((_QWORD *)v99 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v99 + 5) + 48))(*((_QWORD *)v99 + 5), 1);
  v104 = *a3;
  v105 = (std::__shared_weak_count_vtbl *)v240;
  v220 = v240;
  if (v240)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = v105;
  }
  else
  {
    v106 = 0;
  }
  v221 = v106;
  v240 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v104 + 184))(v104, &v220);
  v107 = v221;
  if (v221)
  {
    p_shared_owners = (unint64_t *)&v221->__shared_owners_;
    do
      v109 = __ldaxr(p_shared_owners);
    while (__stlxr(v109 - 1, p_shared_owners));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v245, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v245, (uint64_t)v256);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v110 + 200))(v110, v256);
  v111 = v257;
  if (v257 == v256)
  {
    v112 = 4;
    v111 = v256;
  }
  else
  {
    if (!v257)
      goto LABEL_118;
    v112 = 5;
  }
  (*(void (**)(void))(*v111 + 8 * v112))();
LABEL_118:
  if (SHIBYTE(v247) < 0)
    operator delete(v245);
  MIL::Validation::TensorDTypeConstraints::Make(&v245);
  v113 = v245;
  std::string::basic_string[abi:ne180100]<0>(v216, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v216, 0, (uint64_t *)&Scalar);
  v218 = Scalar;
  if (Scalar)
  {
    v114 = (std::__shared_weak_count *)operator new();
    v115 = Scalar;
    v114->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v114->__shared_owners_ = 0;
    v114->__shared_weak_owners_ = 0;
    v114[1].__vftable = v115;
  }
  else
  {
    v114 = 0;
  }
  v219 = v114;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v214, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v113 + 24))(v113, &v218, v214);
  if (v215 < 0)
    operator delete(v214[0]);
  v116 = v219;
  if (v219)
  {
    v117 = (unint64_t *)&v219->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = Scalar;
  Scalar = 0;
  if (v119)
    (*((void (**)(std::__shared_weak_count_vtbl *))v119->~__shared_weak_count + 1))(v119);
  if (v217 < 0)
    operator delete(v216[0]);
  v120 = v245;
  std::string::basic_string[abi:ne180100]<0>(v210, "alpha");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v210, 0, (uint64_t *)&Scalar);
  v212 = Scalar;
  if (Scalar)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v122 = Scalar;
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = v122;
  }
  else
  {
    v121 = 0;
  }
  v213 = v121;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v208, "U");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v120 + 24))(v120, &v212, v208);
  if (v209 < 0)
    operator delete(v208[0]);
  v123 = v213;
  if (v213)
  {
    v124 = (unint64_t *)&v213->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = Scalar;
  Scalar = 0;
  if (v126)
    (*((void (**)(std::__shared_weak_count_vtbl *))v126->~__shared_weak_count + 1))(v126);
  if (v211 < 0)
    operator delete(v210[0]);
  v127 = v245;
  std::string::basic_string[abi:ne180100]<0>(v204, "beta");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v204, 0, (uint64_t *)&Scalar);
  v206 = Scalar;
  if (Scalar)
  {
    v128 = (std::__shared_weak_count *)operator new();
    v129 = Scalar;
    v128->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v128->__shared_owners_ = 0;
    v128->__shared_weak_owners_ = 0;
    v128[1].__vftable = v129;
  }
  else
  {
    v128 = 0;
  }
  v207 = v128;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v202, "U");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v127 + 24))(v127, &v206, v202);
  if (v203 < 0)
    operator delete(v202[0]);
  v130 = v207;
  if (v207)
  {
    v131 = (unint64_t *)&v207->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = Scalar;
  Scalar = 0;
  if (v133)
    (*((void (**)(std::__shared_weak_count_vtbl *))v133->~__shared_weak_count + 1))(v133);
  if (v205 < 0)
    operator delete(v204[0]);
  v134 = *a3;
  v200 = v245;
  if (v245)
  {
    v135 = (std::__shared_weak_count *)operator new();
    v136 = (std::__shared_weak_count_vtbl *)v245;
    v135->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v135->__shared_owners_ = 0;
    v135->__shared_weak_owners_ = 0;
    v135[1].__vftable = v136;
  }
  else
  {
    v135 = 0;
  }
  v201 = v135;
  v245 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v134 + 56))(v134, &v200);
  v137 = v201;
  if (v201)
  {
    v138 = (unint64_t *)&v201->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v140 = v245;
  v245 = 0;
  if (v140)
    (*(void (**)(void *))(*(_QWORD *)v140 + 8))(v140);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v245);
  v141 = v245;
  std::string::basic_string[abi:ne180100]<0>(v196, "alpha");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v196, 0, (uint64_t *)&Scalar);
  v198 = Scalar;
  if (Scalar)
  {
    v142 = (std::__shared_weak_count *)operator new();
    v143 = Scalar;
    v142->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v142->__shared_owners_ = 0;
    v142->__shared_weak_owners_ = 0;
    v142[1].__vftable = v143;
  }
  else
  {
    v142 = 0;
  }
  v199 = v142;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v194, "C");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v141 + 24))(v141, &v198, 0, v194);
  if (v195 < 0)
    operator delete(v194[0]);
  v144 = v199;
  if (v199)
  {
    v145 = (unint64_t *)&v199->__shared_owners_;
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
    }
  }
  v147 = Scalar;
  Scalar = 0;
  if (v147)
    (*((void (**)(std::__shared_weak_count_vtbl *))v147->~__shared_weak_count + 1))(v147);
  if (v197 < 0)
    operator delete(v196[0]);
  v148 = v245;
  std::string::basic_string[abi:ne180100]<0>(v190, "beta");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v190, 0, (uint64_t *)&Scalar);
  v192 = Scalar;
  if (Scalar)
  {
    v149 = (std::__shared_weak_count *)operator new();
    v150 = Scalar;
    v149->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v149->__shared_owners_ = 0;
    v149->__shared_weak_owners_ = 0;
    v149[1].__vftable = v150;
  }
  else
  {
    v149 = 0;
  }
  v193 = v149;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v188, "C");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v148 + 24))(v148, &v192, 0, v188);
  if (v189 < 0)
    operator delete(v188[0]);
  v151 = v193;
  if (v193)
  {
    v152 = (unint64_t *)&v193->__shared_owners_;
    do
      v153 = __ldaxr(v152);
    while (__stlxr(v153 - 1, v152));
    if (!v153)
    {
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
    }
  }
  v154 = Scalar;
  Scalar = 0;
  if (v154)
    (*((void (**)(std::__shared_weak_count_vtbl *))v154->~__shared_weak_count + 1))(v154);
  if (v191 < 0)
    operator delete(v190[0]);
  v155 = *a3;
  v186 = v245;
  if (v245)
  {
    v156 = (std::__shared_weak_count *)operator new();
    v157 = (std::__shared_weak_count_vtbl *)v245;
    v156->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v156->__shared_owners_ = 0;
    v156->__shared_weak_owners_ = 0;
    v156[1].__vftable = v157;
  }
  else
  {
    v156 = 0;
  }
  v187 = v156;
  v245 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v155 + 56))(v155, &v186);
  v158 = v187;
  if (v187)
  {
    v159 = (unint64_t *)&v187->__shared_owners_;
    do
      v160 = __ldaxr(v159);
    while (__stlxr(v160 - 1, v159));
    if (!v160)
    {
      ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
      std::__shared_weak_count::__release_weak(v158);
    }
  }
  v161 = v245;
  v245 = 0;
  if (v161)
    (*(void (**)(void *))(*(_QWORD *)v161 + 8))(v161);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v162 = __p;
  std::string::basic_string[abi:ne180100]<0>(v182, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v182, 1, (uint64_t *)&v227);
  v184 = v227;
  if (v227)
  {
    v163 = (std::__shared_weak_count *)operator new();
    v164 = (std::__shared_weak_count_vtbl *)v227;
    v163->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v163->__shared_owners_ = 0;
    v163->__shared_weak_owners_ = 0;
    v163[1].__vftable = v164;
  }
  else
  {
    v163 = 0;
  }
  v185 = v163;
  v227 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v245, "bf16");
  std::string::basic_string[abi:ne180100]<0>(v248, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v249, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v250, "int32");
  std::string::basic_string[abi:ne180100]<0>(v251, "int8");
  std::string::basic_string[abi:ne180100]<0>(v252, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v245, 6);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v162 + 24))(v162, &v184, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v252[i + 2]) < 0)
      operator delete((void *)v252[i]);
  }
  v166 = v185;
  if (v185)
  {
    v167 = (unint64_t *)&v185->__shared_owners_;
    do
      v168 = __ldaxr(v167);
    while (__stlxr(v168 - 1, v167));
    if (!v168)
    {
      ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
      std::__shared_weak_count::__release_weak(v166);
    }
  }
  v169 = v227;
  v227 = 0;
  if (v169)
    (*(void (**)(void *))(*(_QWORD *)v169 + 8))(v169);
  if (v183 < 0)
    operator delete(v182[0]);
  v170 = *a3;
  v180 = __p;
  if (__p)
  {
    v171 = (std::__shared_weak_count *)operator new();
    v172 = (std::__shared_weak_count_vtbl *)__p;
    v171->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v171->__shared_owners_ = 0;
    v171->__shared_weak_owners_ = 0;
    v171[1].__vftable = v172;
  }
  else
  {
    v171 = 0;
  }
  v181 = v171;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v170 + 56))(v170, &v180);
  v173 = v181;
  if (v181)
  {
    v174 = (unint64_t *)&v181->__shared_owners_;
    do
      v175 = __ldaxr(v174);
    while (__stlxr(v175 - 1, v174));
    if (!v175)
    {
      ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
      std::__shared_weak_count::__release_weak(v173);
    }
  }
  v176 = __p;
  __p = 0;
  if (v176)
    (*(void (**)(void *))(*(_QWORD *)v176 + 8))(v176);
  if (v240)
  {
    v177 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v240);
    MEMORY[0x1E0C023A0](v177, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v234, 0);
  result = (uint64_t)v244;
  if (v244)
  {
    v179 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v244);
    return MEMORY[0x1E0C023A0](v179, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0948D5C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  unint64_t v3;
  uint64_t v4;

  v3 = STACK[0x268];
  STACK[0x268] = 0;
  if (v3)
    (*(void (**)(unint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x280], 0);
  v4 = *v1;
  *v1 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x240], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x2A8], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::CustomValidators::ValidateConstexprLutToDense(MIL::Operators::Common::ios18::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  uint64_t ParameterValue;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  MIL::IRValueType *v9;
  uint64_t v10;
  MIL::IRValueType *v11;
  MIL::IRTensorValueType *v12;
  uint64_t v13;
  const void *v14;
  int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  MIL::IRValueType *Type;
  uint64_t v21;
  uint64_t *LocationPtr;
  int v23;
  uint64_t *v24;
  MIL::Validation *v25;
  int v26;
  _QWORD *v27;
  void *__p[2];
  char v29;

  std::string::basic_string[abi:ne180100]<0>(__p, "indices");
  ParameterValue = MIL::IROperation::GetParameterValue(this);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)ParameterValue + 40))(ParameterValue);
  if (v29 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "lut");
  v7 = MIL::IROperation::GetParameterValue(this);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  if (v29 < 0)
    operator delete(__p[0]);
  v9 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  v10 = MIL::IRValueType::AsTensorType(v9);
  v11 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
  v12 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v11);
  std::string::basic_string[abi:ne180100]<0>(__p, "vector_axis");
  v13 = MIL::IROperation::TryGetParameterValue(this, (uint64_t)__p, 0);
  v14 = (const void *)v13;
  if (v29 < 0)
  {
    operator delete(__p[0]);
    if (v14)
      goto LABEL_7;
  }
  else if (v13)
  {
LABEL_7:
    v15 = MIL::IRValue::GetScalar<int>(v14);
    v16 = v15 & 0xFFFFFF00;
    v17 = v15;
    v18 = 0x100000000;
    goto LABEL_10;
  }
  v18 = 0;
  v17 = 0;
  v16 = 0;
LABEL_10:
  v19 = (*(uint64_t (**)(MIL::Operators::Common::ios18::CustomValidators *))(*(_QWORD *)this + 176))(this);
  if (*(_QWORD *)(v19 + 8) == *(_QWORD *)v19)
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(**(MIL::IRNamedValueType ***)v19);
  v21 = MIL::IRValueType::AsTensorType(Type);
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 88))(v10);
  v24 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 96))(v10);
  v25 = (MIL::Validation *)(v18 | v16 | v17);
  v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 88))(v21);
  v27 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 96))(v21);
}

void sub_1E09495B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `anonymous namespace'::ValidateCommonConstexprFromLut(MIL::IRTensorValueType *this@<X3>, uint64_t *a2@<X0>, int a3@<W1>, uint64_t *a4@<X2>, MIL::Validation *a5@<X4>, int a6@<W5>, _QWORD *a7@<X6>, MIL::ValidationResult *a8@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  void **v34;
  std::string::size_type v35;
  std::string *v36;
  __int128 v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  unint64_t *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  _QWORD *v77;
  int v78;
  MIL::ValidationResult *v79;
  void *v82[2];
  char v83;
  _QWORD v84[2];
  void *v85[2];
  char v86;
  _QWORD v87[2];
  void *v88[2];
  char v89;
  _QWORD v90[2];
  void *v91[2];
  char v92;
  _QWORD v93[2];
  void *v94[2];
  char v95;
  _QWORD v96[2];
  void *__p[2];
  unsigned __int8 v98;
  std::string v99;
  std::string v100;
  std::string v101;
  __int128 v102;
  std::string::size_type v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  void *v106[2];
  char v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  void *v110[2];
  char v111;
  uint64_t v112;
  std::__shared_weak_count *v113;

  v15 = *a4;
  v14 = a4[1];
  v16 = v14 - *a4;
  v17 = v16 >> 3;
  if (MIL::IRTensorValueType::Rank(this) != (v16 >> 3) + 2)
  {
    v41 = (std::__shared_weak_count *)a2[1];
    v112 = *a2;
    v113 = v41;
    if (v41)
    {
      p_shared_owners = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(p_shared_owners);
      while (__stxr(v43 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(v110, "Input lut should have rank=K+2 where K is the rank of indices");
    MIL::ValidationResult::ValidationResult(a8, &v112, 315, v110);
    if (v111 < 0)
      operator delete(v110[0]);
    v38 = v113;
    if (v113)
    {
      v44 = (unint64_t *)&v113->__shared_owners_;
      do
        v40 = __ldaxr(v44);
      while (__stlxr(v40 - 1, v44));
      goto LABEL_60;
    }
    return;
  }
  v78 = a3;
  v77 = a7;
  v79 = a8;
  if (v14 != v15)
  {
    v18 = 0;
    if (v17 <= 1)
      v19 = 1;
    else
      v19 = v16 >> 3;
    while (1)
    {
      v20 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a4 + 8 * v18) + 16))(*(_QWORD *)(*a4 + 8 * v18));
      v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 48))(v20);
      v22 = (_QWORD *)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)this + 96))(this);
      v23 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v22 + 8 * v18) + 16))(*(_QWORD *)(*v22 + 8 * v18));
      if (v21 % (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 48))(v23))
        break;
      if (v19 == ++v18)
        goto LABEL_8;
    }
    v45 = (std::__shared_weak_count *)a2[1];
    v108 = *a2;
    v109 = v45;
    if (v45)
    {
      v46 = (unint64_t *)&v45->__shared_owners_;
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
    }
    std::string::basic_string[abi:ne180100]<0>(v106, "The first K dimensions of lut must be factors of indices dimensions");
    MIL::ValidationResult::ValidationResult(v79, &v108, 315, v106);
    if (v107 < 0)
      operator delete(v106[0]);
    v38 = v109;
    if (v109)
    {
      v48 = (unint64_t *)&v109->__shared_owners_;
      do
        v40 = __ldaxr(v48);
      while (__stlxr(v40 - 1, v48));
      goto LABEL_60;
    }
    return;
  }
LABEL_8:
  v24 = (_QWORD *)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)this + 96))(this);
  v25 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v24 + 8 * v17) + 16))(*(_QWORD *)(*v24 + 8 * v17));
  v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 48))(v25);
  if ((v78 != 14 || v26 == 256)
    && (v78 != 23 || v26 == 64)
    && (v78 != 20 || v26 == 16)
    && (v78 != 22 || v26 == 8)
    && (v78 != 19 || v26 == 4)
    && (v78 != 21 || v26 == 2))
  {
    v49 = *(_QWORD *)(*(_QWORD *)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)this + 96))(this)
                    + 8 * v17
                    + 8);
    v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 16))(v49);
    v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 48))(v50);
    if (v51 >= 2 && BYTE4(a5) == 0)
    {
      v55 = a2[1];
      v96[0] = *a2;
      v96[1] = v55;
      if (v55)
      {
        v56 = (unint64_t *)(v55 + 8);
        do
          v57 = __ldxr(v56);
        while (__stxr(v57 + 1, v56));
      }
      std::string::basic_string[abi:ne180100]<0>(v94, "vector_axis must be provided if vector_size specified in lut > 1");
      MIL::ValidationResult::ValidationResult(v79, v96, 315, v94);
      if (v95 < 0)
        operator delete(v94[0]);
      v58 = v96;
    }
    else
    {
      v53 = v51;
      if ((*(unsigned int (**)(MIL::IRTensorValueType *))(*(_QWORD *)this + 88))(this) == a6)
      {
        if (!BYTE4(a5))
        {
          v54 = 0;
LABEL_84:
          if (v17 == (uint64_t)(v77[1] - *v77) >> 3)
          {
            if (v14 == v15)
            {
LABEL_94:
              MIL::ValidationResult::ValidationResult(v79);
              return;
            }
            v62 = 0;
            if (v17 <= 1)
              v63 = 1;
            else
              v63 = v17;
            while (1)
            {
              v64 = v54 == v62 ? v53 : 1;
              v65 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a4 + 8 * v62) + 16))(*(_QWORD *)(*a4 + 8 * v62));
              v66 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v65 + 48))(v65) * v64;
              v67 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v77 + 8 * v62) + 16))(*(_QWORD *)(*v77 + 8 * v62));
              if (v66 != (*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 48))(v67))
                break;
              if (v63 == ++v62)
                goto LABEL_94;
            }
            v74 = a2[1];
            v84[0] = *a2;
            v84[1] = v74;
            if (v74)
            {
              v75 = (unint64_t *)(v74 + 8);
              do
                v76 = __ldxr(v75);
              while (__stxr(v76 + 1, v75));
            }
            std::string::basic_string[abi:ne180100]<0>(v82, "The output dimension does not match the indices' dimension with vector size over vector_axis");
            MIL::ValidationResult::ValidationResult(v79, v84, 315, v82);
            if (v83 < 0)
              operator delete(v82[0]);
            v58 = v84;
          }
          else
          {
            v68 = a2[1];
            v87[0] = *a2;
            v87[1] = v68;
            if (v68)
            {
              v69 = (unint64_t *)(v68 + 8);
              do
                v70 = __ldxr(v69);
              while (__stxr(v70 + 1, v69));
            }
            std::string::basic_string[abi:ne180100]<0>(v85, "output must have the same rank as the input indices");
            MIL::ValidationResult::ValidationResult(v79, v87, 315, v85);
            if (v86 < 0)
              operator delete(v85[0]);
            v58 = v87;
          }
          goto LABEL_113;
        }
        if (MIL::Validation::IsAxisValidForRank(a5, (unint64_t)v16 >> 3))
        {
          v54 = (int)((v17 & ((int)a5 >> 31)) + (_DWORD)a5);
          goto LABEL_84;
        }
        v71 = a2[1];
        v90[0] = *a2;
        v90[1] = v71;
        if (v71)
        {
          v72 = (unint64_t *)(v71 + 8);
          do
            v73 = __ldxr(v72);
          while (__stxr(v73 + 1, v72));
        }
        std::string::basic_string[abi:ne180100]<0>(v88, "'vector_axis' must be within range (-indices_rank - 1, indices_rank) (exclusive)");
        MIL::ValidationResult::ValidationResult(v79, v90, 315, v88);
        if (v89 < 0)
          operator delete(v88[0]);
        v58 = v90;
      }
      else
      {
        v59 = a2[1];
        v93[0] = *a2;
        v93[1] = v59;
        if (v59)
        {
          v60 = (unint64_t *)(v59 + 8);
          do
            v61 = __ldxr(v60);
          while (__stxr(v61 + 1, v60));
        }
        std::string::basic_string[abi:ne180100]<0>(v91, "Input lut and output should have same dtype");
        MIL::ValidationResult::ValidationResult(v79, v93, 304, v91);
        if (v92 < 0)
          operator delete(v91[0]);
        v58 = v93;
      }
    }
LABEL_113:
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v58);
    return;
  }
  v27 = (std::__shared_weak_count *)a2[1];
  v104 = *a2;
  v105 = v27;
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  std::to_string(&v99, v26);
  v30 = std::string::insert(&v99, 0, "Provided NUM_PALETTES ");
  v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v100.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  v32 = std::string::append(&v100, " does not match the indices dtype ");
  v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v101.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  MIL::IRDataTypeToString(v78, __p);
  if ((v98 & 0x80u) == 0)
    v34 = __p;
  else
    v34 = (void **)__p[0];
  if ((v98 & 0x80u) == 0)
    v35 = v98;
  else
    v35 = (std::string::size_type)__p[1];
  v36 = std::string::append(&v101, (const std::string::value_type *)v34, v35);
  v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  v103 = v36->__r_.__value_.__r.__words[2];
  v102 = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  MIL::ValidationResult::ValidationResult(v79, &v104, 315, &v102);
  if (SHIBYTE(v103) < 0)
    operator delete((void *)v102);
  if ((char)v98 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v101.__r_.__value_.__l.__data_);
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v100.__r_.__value_.__l.__data_);
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v99.__r_.__value_.__l.__data_);
  v38 = v105;
  if (v105)
  {
    v39 = (unint64_t *)&v105->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
LABEL_60:
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
}

void sub_1E0949CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *__p, uint64_t a8, int a9, __int16 a10, char a11, char a12, ...)
{
  va_list va;

  va_start(va, a12);
  if (a12 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::CustomValueTypeInference::ValueTypeInferenceConstexprLutToDense(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X2>, uint64_t **a3@<X8>)
{
  MIL::IRValueType *SingleValueType;
  uint64_t v7;
  MIL::IRValueType *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  MIL::IRValue *SingleValue;
  const void *v15;
  int v16;
  int v17;
  _QWORD *v18;
  void (***v19)(MIL::MILContextImpl *__hidden);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  void *v28[2];
  char v29;
  void *__p;
  void *v31;
  uint64_t v32;

  std::string::basic_string[abi:ne180100]<0>(&__p, "indices");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)&__p);
  v7 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(v32) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "lut");
  v8 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)&__p);
  v9 = MIL::IRValueType::AsTensorType(v8);
  if (SHIBYTE(v32) < 0)
    operator delete(__p);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 88))(v9);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7);
  v31 = 0;
  v32 = 0;
  __p = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v11, *(_QWORD *)(v11 + 8), (uint64_t)(*(_QWORD *)(v11 + 8) - *(_QWORD *)v11) >> 3);
  std::string::basic_string[abi:ne180100]<0>(v28, "vector_axis");
  v12 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)v28);
  v13 = v12;
  if (v29 < 0)
  {
    operator delete(v28[0]);
    if (!v13)
      goto LABEL_15;
LABEL_9:
    std::string::basic_string[abi:ne180100]<0>(v28, "vector_axis");
    SingleValue = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a2, (uint64_t)v28);
    v15 = (const void *)MIL::IRValue::AsTensor(SingleValue);
    v16 = MIL::IRValue::GetScalar<int>(v15);
    v17 = v16;
    if (v29 < 0)
    {
      operator delete(v28[0]);
      if (v17 < 0)
      {
LABEL_13:
        v18 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7);
        v17 += (v18[1] - *v18) >> 3;
      }
    }
    else if (v16 < 0)
    {
      goto LABEL_13;
    }
    v19 = *a1;
    v20 = MIL::IRDimension::AsConstant(*((MIL::IRDimension **)__p + v17));
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 48))(v20);
    v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 96))(v9);
    v23 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*(_QWORD *)(v22 + 8) - 8));
    v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 48))(v23);
    v25 = MIL::IRConstantDimension::Make(v19, (MIL::MILContext *)(v24 * v21));
    *((_QWORD *)__p + v17) = v25;
    goto LABEL_15;
  }
  if (v12)
    goto LABEL_9;
LABEL_15:
  v26 = MIL::IRTensorValueType::MakeWithShape(*a1, v10, (uint64_t)&__p);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v27 = (uint64_t *)operator new(8uLL);
  *a3 = v27;
  *v27++ = v26;
  a3[1] = v27;
  a3[2] = v27;
  if (__p)
  {
    v31 = __p;
    operator delete(__p);
  }
}

void sub_1E094A08C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios18::CustomGetConstant::GetConstantConstexprLutToDense(MIL::MILContext *a1@<X1>, MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense **a2@<X8>)
{
  MIL::IRNamedValueType ***v6;
  uint64_t Type;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count_vtbl *v14;
  MIL::IRNamedValueType ***v15;
  uint64_t v16;
  __int128 v17;
  unsigned int Axis;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense *v23;
  MIL::IRNamedValueType ***v24;
  uint64_t Name;
  __int128 v26;
  MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense *v27;
  MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense *v28;
  MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense *v29;
  std::__shared_weak_count_vtbl *v30;
  MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense *v35;
  MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense *v36;
  MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense *v37;
  std::__shared_weak_count_vtbl *v38;
  MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::string __p;
  std::__shared_weak_count_vtbl *v50;
  std::string v51;
  std::__shared_weak_count_vtbl *v52;
  MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense *v53;
  MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense *v54;
  std::__shared_weak_count_vtbl *v55;
  std::__shared_weak_count *v56;
  unsigned int v57;
  void *lpsrc;
  std::__shared_weak_count *v59;
  uint64_t v60;
  __int128 v61;
  std::__shared_weak_count_vtbl *v62;
  std::__shared_weak_count *v63;
  char v64;
  __int128 v65;

  std::string::basic_string[abi:ne180100]<0>(&v62, "indices");
  MIL::Operators::Common::Shared::ValidateExistenceAndGetInputSharedPtr(a1, (unsigned __int8 *)&v62, &v65);
  if (v64 < 0)
    operator delete(v62);
  std::string::basic_string[abi:ne180100]<0>(&v62, "lut");
  MIL::Operators::Common::Shared::ValidateExistenceAndGetInputSharedPtr(a1, (unsigned __int8 *)&v62, &v61);
  if (v64 < 0)
    operator delete(v62);
  v60 = 0;
  v6 = (MIL::IRNamedValueType ***)(*(uint64_t (**)(MIL::MILContext *))(*(_QWORD *)a1 + 176))(a1);
  Type = MIL::IRNamedValueType::GetType(**v6);
  v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Type + 24))(Type);
  std::string::basic_string[abi:ne180100]<0>(&v62, "vector_axis");
  MIL::IROperation::TryGetParameterValueSharedPtr(a1, (uint64_t)&v62, 0, (uint64_t *)&lpsrc);
  if (v64 < 0)
    operator delete(v62);
  if (lpsrc)
  {
    if (v8)
    {
      v9 = v59;
      v62 = v8;
      v63 = v59;
      if (v59)
      {
        p_shared_owners = (unint64_t *)&v59->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
        v57 = 0;
        v55 = v8;
        v56 = v9;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
        goto LABEL_19;
      }
    }
    else
    {
      v62 = 0;
      v63 = 0;
    }
    v57 = 0;
    v55 = v8;
    v56 = 0;
LABEL_19:
    Axis = MIL::Operators::Common::Shared::ValidateAndGetAxis(&v55);
    v19 = v56;
    if (v56)
    {
      v20 = (unint64_t *)&v56->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v57 = Axis;
    std::make_unique[abi:ne180100]<MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,int &>(&v60, &v61, &v65, &v57, (uint64_t *)&v54);
    v22 = v60;
    v23 = v54;
    v54 = 0;
    v52 = (std::__shared_weak_count_vtbl *)v23;
    v24 = (MIL::IRNamedValueType ***)(*(uint64_t (**)(MIL::MILContext *))(*(_QWORD *)a1 + 176))(a1);
    Name = MIL::IRNamedValueType::GetName(**v24);
    if (*(char *)(Name + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v51, *(const std::string::value_type **)Name, *(_QWORD *)(Name + 8));
    }
    else
    {
      v26 = *(_OWORD *)Name;
      v51.__r_.__value_.__r.__words[2] = *(_QWORD *)(Name + 16);
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v26;
    }
    MIL::IRTensorValueType::MakeValueFromConstExprEvaluation(v22, &v52, (uint64_t)&v51);
    v27 = v53;
    *a2 = v53;
    if (v27)
    {
      v28 = (MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense *)operator new();
      v29 = v53;
      *(_QWORD *)v28 = &unk_1EA992A68;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = 0;
      *((_QWORD *)v28 + 3) = v29;
    }
    else
    {
      v28 = 0;
    }
    a2[1] = v28;
    v53 = 0;
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v51.__r_.__value_.__l.__data_);
    v30 = v52;
    v52 = 0;
    if (v30)
      (*((void (**)(std::__shared_weak_count_vtbl *))v30->~__shared_weak_count + 1))(v30);
    v31 = v54;
    v54 = 0;
    if (v31)
    {
      MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense::~BlockwiseLutToDense(v31);
      MEMORY[0x1E0C023A0]();
    }
    v32 = v63;
    if (v63)
    {
      v33 = (unint64_t *)&v63->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    goto LABEL_51;
  }
  std::make_unique[abi:ne180100]<MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>>(&v60, &v61, &v65, (uint64_t *)&v62);
  v13 = v60;
  v14 = v62;
  v62 = 0;
  v50 = v14;
  v15 = (MIL::IRNamedValueType ***)(*(uint64_t (**)(MIL::MILContext *))(*(_QWORD *)a1 + 176))(a1);
  v16 = MIL::IRNamedValueType::GetName(**v15);
  if (*(char *)(v16 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v16, *(_QWORD *)(v16 + 8));
  }
  else
  {
    v17 = *(_OWORD *)v16;
    __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v16 + 16);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v17;
  }
  MIL::IRTensorValueType::MakeValueFromConstExprEvaluation(v13, &v50, (uint64_t)&__p);
  v35 = v54;
  *a2 = v54;
  if (v35)
  {
    v36 = (MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense *)operator new();
    v37 = v54;
    *(_QWORD *)v36 = &unk_1EA992A68;
    *((_QWORD *)v36 + 1) = 0;
    *((_QWORD *)v36 + 2) = 0;
    *((_QWORD *)v36 + 3) = v37;
  }
  else
  {
    v36 = 0;
  }
  a2[1] = v36;
  v54 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v38 = v50;
  v50 = 0;
  if (v38)
    (*((void (**)(std::__shared_weak_count_vtbl *))v38->~__shared_weak_count + 1))(v38);
  v39 = (MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense *)v62;
  v62 = 0;
  if (v39)
  {
    MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense::~BlockwiseLutToDense(v39);
    MEMORY[0x1E0C023A0]();
  }
LABEL_51:
  v40 = v59;
  if (v59)
  {
    v41 = (unint64_t *)&v59->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
  if (*((_QWORD *)&v61 + 1))
  {
    v44 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
  if (*((_QWORD *)&v65 + 1))
  {
    v47 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
}

void sub_1E094A5A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  if (a25)
    (*(void (**)(uint64_t))(*(_QWORD *)a25 + 8))(a25);
  if (a14 < 0)
    operator delete(__p);
  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 8))(a15);
  std::unique_ptr<MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense>::reset[abi:ne180100]((MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense **)(v29 - 72), 0);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v29 - 88);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v29 - 48);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,int &>(uint64_t *a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, unsigned int *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;

  v10 = operator new();
  v11 = *a1;
  v12 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v19 = *a3;
  v20 = v12;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense::BlockwiseLutToDense(v10, v11, &v20, &v19, *a4);
  *a5 = v10;
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_1E094A80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  MEMORY[0x1E0C023A0](v11, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>>(uint64_t *a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;

  v8 = operator new();
  v9 = *a1;
  v10 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v17 = *a3;
  v18 = v10;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense::BlockwiseLutToDense(v8, v9, &v18, &v17);
  *a4 = v8;
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
  if (*((_QWORD *)&v17 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1E094A934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  MEMORY[0x1E0C023A0](v11, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::CustomValueTypeInference::ValueTypeInferenceConstexprCast(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X2>, uint64_t **a3@<X8>)
{
  MIL::IRValueType *SingleValueType;
  uint64_t v7;
  MIL::IRValue *SingleValue;
  const void *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(&__p, "source_val");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)&__p);
  v7 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v14, "output_dtype");
  SingleValue = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a2, (uint64_t)&v14);
  v9 = (const void *)MIL::IRValue::AsTensor(SingleValue);
  MIL::IRValue::GetScalar<std::string>(v9, &__p);
  if (SHIBYTE(v16) < 0)
    operator delete(v14);
  v10 = MIL::StringToIRDataType((const void **)&__p.__r_.__value_.__l.__data_, 0);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7);
  v14 = 0;
  v15 = 0;
  v16 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v14, *(const void **)v11, *(_QWORD *)(v11 + 8), (uint64_t)(*(_QWORD *)(v11 + 8) - *(_QWORD *)v11) >> 3);
  v12 = MIL::IRTensorValueType::MakeWithShape(*a1, v10, (uint64_t)&v14);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v13 = (uint64_t *)operator new(8uLL);
  *a3 = v13;
  *v13++ = v12;
  a3[1] = v13;
  a3[2] = v13;
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1E094AA94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (__p)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios18::CustomGetConstant::GetConstantConstexprCast(void (***this)(MIL::MILContextImpl *__hidden this)@<X0>, MIL::MILContext *a2@<X1>, MIL::IRValue **a3@<X8>)
{
  MIL::IRValue *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  MIL::IRValue *ArgumentValue;
  const void *v14;
  int v15;
  MIL::IRValue *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  MIL::IRNamedValueType ***v25;
  uint64_t Name;
  __int128 v27;
  MIL::IRValue *v28;
  MIL::IRValue *v29;
  MIL::IRValue *v30;
  std::__shared_weak_count_vtbl *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::string v35;
  std::__shared_weak_count_vtbl *v36;
  std::__shared_weak_count_vtbl *v37;
  void *lpsrc;
  std::__shared_weak_count *v39;
  uint64_t v40;
  std::string __p;
  MIL::IRValue *v42;
  std::__shared_weak_count *v43;
  MIL::IRValue *v44;
  std::__shared_weak_count *v45;

  std::string::basic_string[abi:ne180100]<0>(&__p, "source_val");
  (*(void (**)(void **__return_ptr, MIL::MILContext *, std::string *, _QWORD))(*(_QWORD *)a2 + 136))(&lpsrc, a2, &__p, 0);
  if (lpsrc
  {
    v42 = v7;
    v43 = v39;
    if (v39)
    {
      p_shared_owners = (unint64_t *)&v39->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
  }
  else
  {
    v42 = 0;
    v43 = 0;
  }
  v10 = v39;
  if (v39)
  {
    v11 = (unint64_t *)&v39->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&lpsrc, "output_dtype");
  ArgumentValue = (MIL::IRValue *)MIL::IROperation::GetArgumentValue((uint64_t)a2);
  v14 = (const void *)MIL::IRValue::AsTensor(ArgumentValue);
  MIL::IRValue::GetScalar<std::string>(v14, &__p);
  if (SHIBYTE(v40) < 0)
    operator delete(lpsrc);
  v15 = MIL::StringToIRDataType((const void **)&__p.__r_.__value_.__l.__data_, 0);
  v16 = v42;
  v17 = MIL::IRValue::AsTensor(v42);
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 32))(v17);
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 96))(v18);
  lpsrc = 0;
  v39 = 0;
  v40 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&lpsrc, *(const void **)v19, *(_QWORD *)(v19 + 8), (uint64_t)(*(_QWORD *)(v19 + 8) - *(_QWORD *)v19) >> 3);
  v20 = MIL::IRTensorValueType::MakeWithShape(this, v15, (uint64_t)&lpsrc);
  v21 = operator new();
  v44 = v16;
  v45 = v43;
  v42 = 0;
  v43 = 0;
  MIL::Operators::Common::ios16::ConstExprs::Cast::Cast(v21, v20, &v44);
  v37 = (std::__shared_weak_count_vtbl *)v21;
  v22 = v45;
  if (v45)
  {
    v23 = (unint64_t *)&v45->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v36 = v37;
  v37 = 0;
  v25 = (MIL::IRNamedValueType ***)(*(uint64_t (**)(MIL::MILContext *))(*(_QWORD *)a2 + 176))(a2);
  Name = MIL::IRNamedValueType::GetName(**v25);
  if (*(char *)(Name + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)Name, *(_QWORD *)(Name + 8));
  }
  else
  {
    v27 = *(_OWORD *)Name;
    v35.__r_.__value_.__r.__words[2] = *(_QWORD *)(Name + 16);
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v27;
  }
  MIL::IRTensorValueType::MakeValueFromConstExprEvaluation(v20, &v36, (uint64_t)&v35);
  v28 = v44;
  *a3 = v44;
  if (v28)
  {
    v29 = (MIL::IRValue *)operator new();
    v30 = v44;
    *(_QWORD *)v29 = &unk_1EA992A68;
    *((_QWORD *)v29 + 1) = 0;
    *((_QWORD *)v29 + 2) = 0;
    *((_QWORD *)v29 + 3) = v30;
  }
  else
  {
    v29 = 0;
  }
  a3[1] = v29;
  v44 = 0;
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  v31 = v36;
  v36 = 0;
  if (v31)
    (*((void (**)(std::__shared_weak_count_vtbl *))v31->~__shared_weak_count + 1))(v31);
  if (lpsrc)
  {
    v39 = (std::__shared_weak_count *)lpsrc;
    operator delete(lpsrc);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v32 = v43;
  if (v43)
  {
    v33 = (unint64_t *)&v43->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
}

void sub_1E094AE20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, MIL::Operators::Common::ios16::ConstExprs::Cast *a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;
  uint64_t v31;

  v31 = *(_QWORD *)(v29 - 64);
  *(_QWORD *)(v29 - 64) = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  if (a14 < 0)
    operator delete(__p);
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 8))(a16);
  std::unique_ptr<MIL::Operators::Common::ios16::ConstExprs::Cast>::reset[abi:ne180100](&a17, 0);
  if (a18)
  {
    a19 = (uint64_t)a18;
    operator delete(a18);
  }
  if (a29 < 0)
    operator delete(a24);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v29 - 80);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::CustomValidators::ValidateConstexprSparseToDense(MIL::Operators::Common::ios18::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  uint64_t ParameterValue;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  MIL::IRValueType *Type;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  MIL::IRValueType *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  void *__p[2];
  char v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  void *v37;
  _BYTE *v38;
  uint64_t v39;
  void *v40[2];
  char v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  void *v44;
  _BYTE *v45;
  uint64_t v46;

  std::string::basic_string[abi:ne180100]<0>(&v44, "nonzero_data");
  ParameterValue = MIL::IROperation::GetParameterValue(this);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)ParameterValue + 40))(ParameterValue);
  if (SHIBYTE(v46) < 0)
    operator delete(v44);
  std::string::basic_string[abi:ne180100]<0>(&v44, "mask");
  v7 = MIL::IROperation::GetParameterValue(this);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  if (SHIBYTE(v46) < 0)
    operator delete(v44);
  v9 = (*(uint64_t (**)(MIL::Operators::Common::ios18::CustomValidators *))(*(_QWORD *)this + 176))(this);
  if (*(_QWORD *)(v9 + 8) == *(_QWORD *)v9)
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(**(MIL::IRNamedValueType ***)v9);
  v11 = MIL::IRValueType::AsTensorType(Type);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 88))(v11);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  if (v12 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 88))(v13))
  {
    v14 = MIL::IRValueType::AsTensorType(Type);
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 96))(v14);
    v45 = 0;
    v46 = 0;
    v44 = 0;
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v44, *(const void **)v15, *(_QWORD *)(v15 + 8), (uint64_t)(*(_QWORD *)(v15 + 8) - *(_QWORD *)v15) >> 3);
    v16 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
    v17 = MIL::IRValueType::AsTensorType(v16);
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 96))(v17);
    v37 = 0;
    v38 = 0;
    v39 = 0;
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v37, *(const void **)v18, *(_QWORD *)(v18 + 8), (uint64_t)(*(_QWORD *)(v18 + 8) - *(_QWORD *)v18) >> 3);
    if (v45 - (_BYTE *)v44 == v38 - (_BYTE *)v37 && !memcmp(v44, v37, v45 - (_BYTE *)v44))
    {
      MIL::ValidationResult::ValidationResult(a2);
    }
    else
    {
      LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
      v20 = (std::__shared_weak_count *)LocationPtr[1];
      v35 = *LocationPtr;
      v36 = v20;
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldxr(p_shared_owners);
        while (__stxr(v22 + 1, p_shared_owners));
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "mask'shape and output's shape should match");
      MIL::ValidationResult::ValidationResult(a2, &v35, 315, __p);
      if (v34 < 0)
        operator delete(__p[0]);
      v23 = v36;
      if (v36)
      {
        v24 = (unint64_t *)&v36->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
    }
    if (v37)
    {
      v38 = v37;
      operator delete(v37);
    }
    if (v44)
    {
      v45 = v44;
      operator delete(v44);
    }
  }
  else
  {
    v26 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v27 = (std::__shared_weak_count *)v26[1];
    v42 = *v26;
    v43 = v27;
    if (v27)
    {
      v28 = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    std::string::basic_string[abi:ne180100]<0>(v40, "Input nonZeroData and output should have same dtype");
    MIL::ValidationResult::ValidationResult(a2, &v42, 304, v40);
    if (v41 < 0)
      operator delete(v40[0]);
    v30 = v43;
    if (v43)
    {
      v31 = (unint64_t *)&v43->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
  }
}

void sub_1E094B224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  uint64_t v26;
  void *v28;

  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (a17)
  {
    a18 = (uint64_t)a17;
    operator delete(a17);
  }
  v28 = *(void **)(v26 - 72);
  if (v28)
  {
    *(_QWORD *)(v26 - 64) = v28;
    operator delete(v28);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::CustomValueTypeInference::ValueTypeInferenceConstexprSparseToDense(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X2>, uint64_t **a3@<X8>)
{
  MIL::IRValueType *SingleValueType;
  uint64_t v7;
  MIL::IRValueType *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  void *__p;
  void *v15;
  uint64_t v16;

  std::string::basic_string[abi:ne180100]<0>(&__p, "nonzero_data");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)&__p);
  v7 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(v16) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "mask");
  v8 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)&__p);
  v9 = MIL::IRValueType::AsTensorType(v8);
  if (SHIBYTE(v16) < 0)
    operator delete(__p);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 96))(v9);
  v15 = 0;
  v16 = 0;
  __p = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v10, *(_QWORD *)(v10 + 8), (uint64_t)(*(_QWORD *)(v10 + 8) - *(_QWORD *)v10) >> 3);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 88))(v7);
  v12 = MIL::IRTensorValueType::MakeWithShape(*a1, v11, (uint64_t)&__p);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v13 = (uint64_t *)operator new(8uLL);
  *a3 = v13;
  *v13++ = v12;
  a3[1] = v13;
  a3[2] = v13;
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_1E094B3D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios18::CustomGetConstant::GetConstantConstexprSparseToDense(void (***this)(MIL::MILContextImpl *__hidden this)@<X0>, MIL::MILContext *a2@<X1>, _QWORD *a3@<X8>)
{
  void *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  void *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  MIL::Operators::Common::ios16::ConstExprs::SparseToDense *v23;
  void *v24;
  MIL::IRNamedValueType ***v25;
  uint64_t Name;
  __int128 v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  std::__shared_weak_count_vtbl *v31;
  MIL::Operators::Common::ios16::ConstExprs::SparseToDense *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::string v39;
  std::__shared_weak_count_vtbl *v40;
  uint64_t v41;
  MIL::Operators::Common::ios16::ConstExprs::SparseToDense *v42;
  void *lpsrc;
  std::__shared_weak_count *v44;
  void *__p;
  void *v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;

  std::string::basic_string[abi:ne180100]<0>(&__p, "nonzero_data");
  MIL::IROperation::TryGetParameterValueSharedPtr(a2, (uint64_t)&__p, 0, (uint64_t *)&v48);
  if ((_QWORD)v48
  {
    *(_QWORD *)&v49 = v7;
    *((_QWORD *)&v49 + 1) = *((_QWORD *)&v48 + 1);
    if (*((_QWORD *)&v48 + 1))
    {
      v8 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
  }
  else
  {
    v49 = 0uLL;
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
  if (*((_QWORD *)&v48 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (SHIBYTE(v47) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "mask");
  MIL::IROperation::TryGetParameterValueSharedPtr(a2, (uint64_t)&__p, 0, (uint64_t *)&lpsrc);
  if (lpsrc
  {
    *(_QWORD *)&v48 = v13;
    *((_QWORD *)&v48 + 1) = v44;
    if (v44)
    {
      p_shared_owners = (unint64_t *)&v44->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
  }
  else
  {
    v48 = 0uLL;
  }
  v16 = v44;
  if (v44)
  {
    v17 = (unint64_t *)&v44->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (SHIBYTE(v47) < 0)
    operator delete(__p);
  v19 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v49 + 32))(v49);
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 88))(v19);
  v21 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v48 + 32))(v48);
  v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 96))(v21);
  __p = 0;
  v46 = 0;
  v47 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v22, *(_QWORD *)(v22 + 8), (uint64_t)(*(_QWORD *)(v22 + 8) - *(_QWORD *)v22) >> 3);
  lpsrc = 0;
  lpsrc = (void *)MIL::IRTensorValueType::MakeWithShape(this, v20, (uint64_t)&__p);
  std::make_unique[abi:ne180100]<MIL::Operators::Common::ios16::ConstExprs::SparseToDense,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>>((uint64_t *)&lpsrc, &v49, &v48, (uint64_t *)&v42);
  v23 = v42;
  v24 = lpsrc;
  v42 = 0;
  v40 = (std::__shared_weak_count_vtbl *)v23;
  v25 = (MIL::IRNamedValueType ***)(*(uint64_t (**)(MIL::MILContext *))(*(_QWORD *)a2 + 176))(a2);
  Name = MIL::IRNamedValueType::GetName(**v25);
  if (*(char *)(Name + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)Name, *(_QWORD *)(Name + 8));
  }
  else
  {
    v27 = *(_OWORD *)Name;
    v39.__r_.__value_.__r.__words[2] = *(_QWORD *)(Name + 16);
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v27;
  }
  MIL::IRTensorValueType::MakeValueFromConstExprEvaluation((uint64_t)v24, &v40, (uint64_t)&v39);
  v28 = v41;
  *a3 = v41;
  if (v28)
  {
    v29 = (_QWORD *)operator new();
    v30 = v41;
    *v29 = &unk_1EA992A68;
    v29[1] = 0;
    v29[2] = 0;
    v29[3] = v30;
  }
  else
  {
    v29 = 0;
  }
  a3[1] = v29;
  v41 = 0;
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  v31 = v40;
  v40 = 0;
  if (v31)
    (*((void (**)(std::__shared_weak_count_vtbl *))v31->~__shared_weak_count + 1))(v31);
  v32 = v42;
  v42 = 0;
  if (v32)
  {
    MIL::Operators::Common::ios16::ConstExprs::SparseToDense::~SparseToDense(v32);
    MEMORY[0x1E0C023A0]();
  }
  if (__p)
  {
    v46 = __p;
    operator delete(__p);
  }
  v33 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
  if (*((_QWORD *)&v48 + 1))
  {
    v34 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
  if (*((_QWORD *)&v49 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
}

void sub_1E094B7B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, MIL::Operators::Common::ios16::ConstExprs::SparseToDense *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a17)
    (*(void (**)(uint64_t))(*(_QWORD *)a17 + 8))(a17);
  if (a14 < 0)
    operator delete(__p);
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 8))(a16);
  std::unique_ptr<MIL::Operators::Common::ios16::ConstExprs::SparseToDense>::reset[abi:ne180100](&a18, 0);
  if (a21)
  {
    a22 = (uint64_t)a21;
    operator delete(a21);
  }
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v26 - 64);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v26 - 48);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::CustomValidators::ValidateConstexprBlockwiseShiftScale(MIL::Operators::Common::ios18::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  uint64_t ParameterValue;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  MIL::IRTensorValueType *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  uint64_t Type;
  uint64_t v19;
  uint64_t *LocationPtr;
  uint64_t *v21;
  int v22;
  _QWORD *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  void *__p[2];
  char v27;

  std::string::basic_string[abi:ne180100]<0>(__p, "data");
  ParameterValue = MIL::IROperation::GetParameterValue(this);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)ParameterValue + 40))(ParameterValue);
  if (v27 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "scale");
  v7 = MIL::IROperation::GetParameterValue(this);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  if (v27 < 0)
    operator delete(__p[0]);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  v10 = (MIL::IRTensorValueType *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
  std::string::basic_string[abi:ne180100]<0>(__p, "offset");
  MIL::IROperation::TryGetParameterValueSharedPtr(this, (uint64_t)__p, 0, &v24);
  if (v27 < 0)
    operator delete(__p[0]);
  if (v24)
  {
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
    v13 = 1;
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (*(uint64_t (**)(MIL::Operators::Common::ios18::CustomValidators *))(*(_QWORD *)this + 176))(this);
  if (*(_QWORD *)(v17 + 8) == *(_QWORD *)v17)
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  Type = MIL::IRNamedValueType::GetType(**(MIL::IRNamedValueType ***)v17);
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Type + 24))(Type);
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 88))(v9);
  v21 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 96))(v9);
  v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 88))(v19);
  v23 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 96))(v19);
}

void sub_1E094BAC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `anonymous namespace'::ValidateCommonConstexprBlockwiseShiftScale(MIL::IRTensorValueType *this@<X2>, uint64_t *a2@<X0>, uint64_t *a3@<X1>, uint64_t a4@<X3>, char a5@<W4>, int a6@<W5>, _QWORD *a7@<X6>, MIL::ValidationResult *a8@<X8>)
{
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  void *v57[2];
  char v58;
  _QWORD v59[2];
  void *v60[2];
  char v61;
  _QWORD v62[2];
  void *v63[2];
  char v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  void *v67[2];
  char v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  void *v71;
  void *v72;
  uint64_t v73;
  void *__p[2];
  char v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  void *v78[2];
  char v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  void *v82[2];
  char v83;
  uint64_t v84;
  std::__shared_weak_count *v85;

  v16 = a3[1] - *a3;
  if (MIL::IRTensorValueType::Rank(this) != v16 >> 3)
  {
    v26 = (std::__shared_weak_count *)a2[1];
    v84 = *a2;
    v85 = v26;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(p_shared_owners);
      while (__stxr(v28 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(v82, "data and scale should have same rank");
    MIL::ValidationResult::ValidationResult(a8, &v84, 304, v82);
    if (v83 < 0)
      operator delete(v82[0]);
    v29 = v85;
    if (!v85)
      return;
    v30 = (unint64_t *)&v85->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
LABEL_39:
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
    return;
  }
  if (!MIL::Operators::Common::Shared::IsShapeConstant(a3))
  {
    v32 = (std::__shared_weak_count *)a2[1];
    v80 = *a2;
    v81 = v32;
    if (v32)
    {
      v33 = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    std::string::basic_string[abi:ne180100]<0>(v78, "data shape should be compile-time constant");
    MIL::ValidationResult::ValidationResult(a8, &v80, 304, v78);
    if (v79 < 0)
      operator delete(v78[0]);
    v29 = v81;
    if (!v81)
      return;
    v35 = (unint64_t *)&v81->__shared_owners_;
    do
      v31 = __ldaxr(v35);
    while (__stlxr(v31 - 1, v35));
    goto LABEL_39;
  }
  v17 = (uint64_t *)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)this + 96))(this);
  if (MIL::Operators::Common::Shared::IsShapeConstant(v17))
  {
    v18 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)this + 96))(this);
    v72 = 0;
    v73 = 0;
    v71 = 0;
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v71, *(const void **)v18, *(_QWORD *)(v18 + 8), (uint64_t)(*(_QWORD *)(v18 + 8) - *(_QWORD *)v18) >> 3);
    v19 = *a3;
    if (a3[1] != *a3)
    {
      v20 = 0;
      while (1)
      {
        v21 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(v19 + 8 * v20));
        v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 48))(v21);
        v23 = MIL::IRDimension::AsConstant(*((MIL::IRDimension **)v71 + v20));
        if (v22 % (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 48))(v23))
          break;
        ++v20;
        v19 = *a3;
        if (v20 >= (a3[1] - *a3) >> 3)
          goto LABEL_8;
      }
      v46 = (std::__shared_weak_count *)a2[1];
      v69 = *a2;
      v70 = v46;
      if (v46)
      {
        v47 = (unint64_t *)&v46->__shared_owners_;
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }
      std::string::basic_string[abi:ne180100]<0>(v67, "scale size across each dimension should be a factor of corresponding size of dimension in data argument");
      MIL::ValidationResult::ValidationResult(a8, &v69, 304, v67);
      if (v68 < 0)
        operator delete(v67[0]);
      v43 = v70;
      if (!v70)
        goto LABEL_73;
      v49 = (unint64_t *)&v70->__shared_owners_;
      do
        v45 = __ldaxr(v49);
      while (__stlxr(v45 - 1, v49));
LABEL_58:
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
      goto LABEL_73;
    }
LABEL_8:
    if ((MIL::Operators::Common::Shared::HasSameConstantShape(a3, a7) & 1) == 0)
    {
      v40 = (std::__shared_weak_count *)a2[1];
      v65 = *a2;
      v66 = v40;
      if (v40)
      {
        v41 = (unint64_t *)&v40->__shared_owners_;
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
      }
      std::string::basic_string[abi:ne180100]<0>(v63, "output and data should have same shape");
      MIL::ValidationResult::ValidationResult(a8, &v65, 304, v63);
      if (v64 < 0)
        operator delete(v63[0]);
      v43 = v66;
      if (!v66)
        goto LABEL_73;
      v44 = (unint64_t *)&v66->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      goto LABEL_58;
    }
    if (a5
      && (v24 = (uint64_t *)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)this + 96))(this),
          v25 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 96))(a4),
          (MIL::Operators::Common::Shared::HasSameConstantShape(v24, v25) & 1) == 0))
    {
      v54 = a2[1];
      v62[0] = *a2;
      v62[1] = v54;
      if (v54)
      {
        v55 = (unint64_t *)(v54 + 8);
        do
          v56 = __ldxr(v55);
        while (__stxr(v56 + 1, v55));
      }
      std::string::basic_string[abi:ne180100]<0>(v60, "scale and offset should have same shape");
      MIL::ValidationResult::ValidationResult(a8, v62, 304, v60);
      if (v61 < 0)
        operator delete(v60[0]);
      v53 = v62;
    }
    else
    {
      if ((*(unsigned int (**)(MIL::IRTensorValueType *))(*(_QWORD *)this + 88))(this) == a6)
      {
        MIL::ValidationResult::ValidationResult(a8);
        goto LABEL_73;
      }
      v50 = a2[1];
      v59[0] = *a2;
      v59[1] = v50;
      if (v50)
      {
        v51 = (unint64_t *)(v50 + 8);
        do
          v52 = __ldxr(v51);
        while (__stxr(v52 + 1, v51));
      }
      std::string::basic_string[abi:ne180100]<0>(v57, "Attribute scale and output should have same dtype");
      MIL::ValidationResult::ValidationResult(a8, v59, 304, v57);
      if (v58 < 0)
        operator delete(v57[0]);
      v53 = v59;
    }
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v53);
LABEL_73:
    if (v71)
    {
      v72 = v71;
      operator delete(v71);
    }
    return;
  }
  v36 = (std::__shared_weak_count *)a2[1];
  v76 = *a2;
  v77 = v36;
  if (v36)
  {
    v37 = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "scale shape should be compile-time constant");
  MIL::ValidationResult::ValidationResult(a8, &v76, 304, __p);
  if (v75 < 0)
    operator delete(__p[0]);
  v29 = v77;
  if (v77)
  {
    v39 = (unint64_t *)&v77->__shared_owners_;
    do
      v31 = __ldaxr(v39);
    while (__stlxr(v31 - 1, v39));
    goto LABEL_39;
  }
}

void sub_1E094BFD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a23 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  if (a42)
  {
    a43 = (uint64_t)a42;
    operator delete(a42);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::CustomValueTypeInference::ValueTypeInferenceConstexprBlockwiseShiftScale(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X2>, uint64_t **a3@<X8>)
{
  MIL::IRValueType *SingleValueType;
  uint64_t v7;
  MIL::IRValueType *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  void *__p;
  void *v15;
  uint64_t v16;

  std::string::basic_string[abi:ne180100]<0>(&__p, "data");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)&__p);
  v7 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(v16) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "scale");
  v8 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)&__p);
  v9 = MIL::IRValueType::AsTensorType(v8);
  if (SHIBYTE(v16) < 0)
    operator delete(__p);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7);
  v15 = 0;
  v16 = 0;
  __p = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v10, *(_QWORD *)(v10 + 8), (uint64_t)(*(_QWORD *)(v10 + 8) - *(_QWORD *)v10) >> 3);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 88))(v9);
  v12 = MIL::IRTensorValueType::MakeWithShape(*a1, v11, (uint64_t)&__p);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v13 = (uint64_t *)operator new(8uLL);
  *a3 = v13;
  *v13++ = v12;
  a3[1] = v13;
  a3[2] = v13;
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_1E094C214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios18::CustomGetConstant::GetConstantConstexprBlockwiseShiftScale(void (***this)(MIL::MILContextImpl *__hidden this)@<X0>, MIL::MILContext *a2@<X1>, _QWORD *a3@<X8>)
{
  void *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  void *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  void *v33;
  MIL::Operators::Common::ios18::ConstExprs::BlockwiseShiftScale *v34;
  MIL::IRNamedValueType ***v35;
  uint64_t Name;
  __int128 v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  std::__shared_weak_count_vtbl *v41;
  MIL::Operators::Common::ios18::ConstExprs::BlockwiseShiftScale *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::string __p;
  std::__shared_weak_count_vtbl *v53;
  uint64_t v54;
  void *lpsrc;
  std::__shared_weak_count *v56;
  char v57;
  MIL::Operators::Common::ios18::ConstExprs::BlockwiseShiftScale *v58;
  std::__shared_weak_count *v59;
  __int128 v60;
  __int128 v61;
  void *v62;
  void *v63;
  uint64_t v64;
  __int128 v65;

  std::string::basic_string[abi:ne180100]<0>(&v62, "data");
  MIL::IROperation::TryGetParameterValueSharedPtr(a2, (uint64_t)&v62, 0, (uint64_t *)&lpsrc);
  if (lpsrc
  {
    *(_QWORD *)&v65 = v7;
    *((_QWORD *)&v65 + 1) = v56;
    if (v56)
    {
      p_shared_owners = (unint64_t *)&v56->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
  }
  else
  {
    v65 = 0uLL;
  }
  v10 = v56;
  if (v56)
  {
    v11 = (unint64_t *)&v56->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (SHIBYTE(v64) < 0)
    operator delete(v62);
  std::string::basic_string[abi:ne180100]<0>(&v62, "scale");
  MIL::IROperation::TryGetParameterValueSharedPtr(a2, (uint64_t)&v62, 0, (uint64_t *)&lpsrc);
  if (lpsrc
  {
    *(_QWORD *)&v61 = v13;
    *((_QWORD *)&v61 + 1) = v56;
    if (v56)
    {
      v14 = (unint64_t *)&v56->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
  }
  else
  {
    v61 = 0uLL;
  }
  v16 = v56;
  if (v56)
  {
    v17 = (unint64_t *)&v56->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (SHIBYTE(v64) < 0)
    operator delete(v62);
  v19 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v65 + 32))(v65);
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 96))(v19);
  v62 = 0;
  v63 = 0;
  v64 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v62, *(const void **)v20, *(_QWORD *)(v20 + 8), (uint64_t)(*(_QWORD *)(v20 + 8) - *(_QWORD *)v20) >> 3);
  v60 = 0uLL;
  std::string::basic_string[abi:ne180100]<0>(&lpsrc, "offset");
  MIL::IROperation::TryGetParameterValueSharedPtr(a2, (uint64_t)&lpsrc, 0, (uint64_t *)&v58);
  if (v57 < 0)
    operator delete(lpsrc);
  if (v58)
  {
    if (v21)
    {
      v22 = v59;
      if (v59)
      {
        v23 = (unint64_t *)&v59->__shared_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
    }
    else
    {
      v22 = 0;
    }
    v25 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
    *(_QWORD *)&v60 = v21;
    *((_QWORD *)&v60 + 1) = v22;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
  }
  v28 = v59;
  if (v59)
  {
    v29 = (unint64_t *)&v59->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v61 + 32))(v61);
  v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 88))(v31);
  lpsrc = 0;
  lpsrc = (void *)MIL::IRTensorValueType::MakeWithShape(this, v32, (uint64_t)&v62);
  std::make_unique[abi:ne180100]<MIL::Operators::Common::ios18::ConstExprs::BlockwiseShiftScale,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>>((uint64_t *)&lpsrc, &v65, &v61, &v60, (uint64_t *)&v58);
  v33 = lpsrc;
  v34 = v58;
  v58 = 0;
  v53 = (std::__shared_weak_count_vtbl *)v34;
  v35 = (MIL::IRNamedValueType ***)(*(uint64_t (**)(MIL::MILContext *))(*(_QWORD *)a2 + 176))(a2);
  Name = MIL::IRNamedValueType::GetName(**v35);
  if (*(char *)(Name + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)Name, *(_QWORD *)(Name + 8));
  }
  else
  {
    v37 = *(_OWORD *)Name;
    __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(Name + 16);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v37;
  }
  MIL::IRTensorValueType::MakeValueFromConstExprEvaluation((uint64_t)v33, &v53, (uint64_t)&__p);
  v38 = v54;
  *a3 = v54;
  if (v38)
  {
    v39 = (_QWORD *)operator new();
    v40 = v54;
    *v39 = &unk_1EA992A68;
    v39[1] = 0;
    v39[2] = 0;
    v39[3] = v40;
  }
  else
  {
    v39 = 0;
  }
  a3[1] = v39;
  v54 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v41 = v53;
  v53 = 0;
  if (v41)
    (*((void (**)(std::__shared_weak_count_vtbl *))v41->~__shared_weak_count + 1))(v41);
  v42 = v58;
  v58 = 0;
  if (v42)
  {
    MIL::Operators::Common::ios18::ConstExprs::BlockwiseShiftScale::~BlockwiseShiftScale(v42);
    MEMORY[0x1E0C023A0]();
  }
  v43 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
  if (*((_QWORD *)&v60 + 1))
  {
    v44 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  if (v62)
  {
    v63 = v62;
    operator delete(v62);
  }
  v46 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
  if (*((_QWORD *)&v61 + 1))
  {
    v47 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
  if (*((_QWORD *)&v65 + 1))
  {
    v50 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
}

void sub_1E094C724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,MIL::Operators::Common::ios18::ConstExprs::BlockwiseShiftScale *a24,uint64_t a25,char a26)
{
  uint64_t v26;
  void *v28;

  if (a17)
    (*(void (**)(uint64_t))(*(_QWORD *)a17 + 8))(a17);
  if (a14 < 0)
    operator delete(__p);
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 8))(a16);
  std::unique_ptr<MIL::Operators::Common::ios18::ConstExprs::BlockwiseShiftScale>::reset[abi:ne180100](&a24, 0);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  v28 = *(void **)(v26 - 72);
  if (v28)
  {
    *(_QWORD *)(v26 - 64) = v28;
    operator delete(v28);
  }
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v26 - 88);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v26 - 48);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<MIL::Operators::Common::ios18::ConstExprs::BlockwiseShiftScale,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>>(uint64_t *a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v10 = operator new();
  v11 = *a1;
  v12 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v23 = *a3;
  v24 = v12;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v22 = *a4;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  MIL::Operators::Common::ios18::ConstExprs::BlockwiseShiftScale::BlockwiseShiftScale(v10, v11, &v24, &v23, &v22);
  *a5 = v10;
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_1E094C960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  uint64_t v13;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  MEMORY[0x1E0C023A0](v13, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::CustomValidators::ValidateConstexprLutToSparse(MIL::Operators::Common::ios18::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  uint64_t ParameterValue;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  MIL::IRValueType *v11;
  uint64_t v12;
  MIL::IRValueType *v13;
  uint64_t v14;
  MIL::IRValueType *v15;
  MIL::IRTensorValueType *v16;
  uint64_t v17;
  const void *v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  MIL::ValidationResult *v23;
  MIL::IRValueType *Type;
  uint64_t v25;
  uint64_t v26;
  MIL::IRValueType *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *LocationPtr;
  uint64_t *v35;
  int v36;
  uint64_t *v37;
  int v38;
  _QWORD *v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  void *v48[2];
  char v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  void *__p[2];
  char v53;

  std::string::basic_string[abi:ne180100]<0>(__p, "indices_mask");
  ParameterValue = MIL::IROperation::GetParameterValue(this);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)ParameterValue + 40))(ParameterValue);
  if (v53 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "indices_nonzero_data");
  v7 = MIL::IROperation::GetParameterValue(this);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  if (v53 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "lut");
  v9 = MIL::IROperation::GetParameterValue(this);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  if (v53 < 0)
    operator delete(__p[0]);
  v11 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  v12 = MIL::IRValueType::AsTensorType(v11);
  v13 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
  v14 = MIL::IRValueType::AsTensorType(v13);
  v15 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
  v16 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v15);
  std::string::basic_string[abi:ne180100]<0>(__p, "vector_axis");
  v17 = MIL::IROperation::TryGetParameterValue(this, (uint64_t)__p, 0);
  v18 = (const void *)v17;
  if (v53 < 0)
  {
    operator delete(__p[0]);
    if (v18)
      goto LABEL_9;
LABEL_11:
    v21 = 0;
    v20 = 0;
    goto LABEL_12;
  }
  if (!v17)
    goto LABEL_11;
LABEL_9:
  v19 = MIL::IRValue::GetScalar<int>(v18);
  v20 = v19 & 0xFFFFFF00;
  LODWORD(v18) = v19;
  v21 = 0x100000000;
LABEL_12:
  v22 = (*(uint64_t (**)(MIL::Operators::Common::ios18::CustomValidators *))(*(_QWORD *)this + 176))(this);
  if (*(_QWORD *)(v22 + 8) == *(_QWORD *)v22
    || (v46 = (int)v18,
        v47 = v21,
        v23 = a2,
        Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(**(MIL::IRNamedValueType ***)v22),
        v25 = MIL::IRValueType::AsTensorType(Type),
        *(_QWORD *)(v22 + 8) - *(_QWORD *)v22 <= 0x10uLL))
  {
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  }
  v26 = v25;
  v27 = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(*(MIL::IRNamedValueType **)(*(_QWORD *)v22 + 16));
  v28 = MIL::IRValueType::AsTensorType(v27);
  v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
  v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
  v31 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v16 + 96))(v16);
  v32 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v31 + 8) - 8) + 16))(*(_QWORD *)(*(_QWORD *)(v31 + 8) - 8));
  v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 48))(v32) * v30;
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v35 = LocationPtr;
  if (v29 == v33)
  {
    v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 88))(v14);
    v37 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 96))(v12);
    v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 88))(v28);
    v39 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 96))(v26);
  }
  else
  {
    v40 = (std::__shared_weak_count *)LocationPtr[1];
    v50 = *LocationPtr;
    v51 = v40;
    if (v40)
    {
      p_shared_owners = (unint64_t *)&v40->__shared_owners_;
      do
        v42 = __ldxr(p_shared_owners);
      while (__stxr(v42 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(v48, "Size of the output nonZeroData should be vector_size times of the size of input nonZeroData.");
    MIL::ValidationResult::ValidationResult(v23, &v50, 304, v48);
    if (v49 < 0)
      operator delete(v48[0]);
    v43 = v51;
    if (v51)
    {
      v44 = (unint64_t *)&v51->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
  }
}

void sub_1E094CD28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::CustomValueTypeInference::ValueTypeInferenceConstexprLutToSparse(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  MIL::IRValueType *SingleValueType;
  uint64_t v7;
  MIL::IRValueType *v8;
  uint64_t v9;
  MIL::IRValueType *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  MIL::IRValue *SingleValue;
  const void *v17;
  int v18;
  int v19;
  _QWORD *v20;
  void (***v21)(MIL::MILContextImpl *__hidden);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (***v29)(MIL::MILContextImpl *__hidden);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  _QWORD *v40;
  void *v41[2];
  char v42;
  void *v43;
  void *v44;
  uint64_t v45;
  void *__p;
  void *v47;
  uint64_t v48;

  std::string::basic_string[abi:ne180100]<0>(&__p, "indices_nonzero_data");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)&__p);
  v7 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(v48) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "indices_mask");
  v8 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)&__p);
  v9 = MIL::IRValueType::AsTensorType(v8);
  if (SHIBYTE(v48) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "lut");
  v10 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)&__p);
  v11 = MIL::IRValueType::AsTensorType(v10);
  if (SHIBYTE(v48) < 0)
    operator delete(__p);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 96))(v9);
  v47 = 0;
  v48 = 0;
  __p = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v12, *(_QWORD *)(v12 + 8), (uint64_t)(*(_QWORD *)(v12 + 8) - *(_QWORD *)v12) >> 3);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7);
  v43 = 0;
  v44 = 0;
  v45 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v43, *(const void **)v13, *(_QWORD *)(v13 + 8), (uint64_t)(*(_QWORD *)(v13 + 8) - *(_QWORD *)v13) >> 3);
  std::string::basic_string[abi:ne180100]<0>(v41, "vector_axis");
  v14 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)v41);
  v15 = v14;
  if (v42 < 0)
  {
    operator delete(v41[0]);
    if (!v15)
      goto LABEL_17;
LABEL_11:
    std::string::basic_string[abi:ne180100]<0>(v41, "vector_axis");
    SingleValue = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a2, (uint64_t)v41);
    v17 = (const void *)MIL::IRValue::AsTensor(SingleValue);
    v18 = MIL::IRValue::GetScalar<int>(v17);
    v19 = v18;
    if (v42 < 0)
    {
      operator delete(v41[0]);
      if (v19 < 0)
      {
LABEL_15:
        v20 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 96))(v9);
        v19 += (v20[1] - *v20) >> 3;
      }
    }
    else if (v18 < 0)
    {
      goto LABEL_15;
    }
    v21 = *a1;
    v22 = MIL::IRDimension::AsConstant(*((MIL::IRDimension **)__p + v19));
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 48))(v22);
    v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 96))(v11);
    v25 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*(_QWORD *)(v24 + 8) - 8));
    v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 48))(v25);
    v27 = MIL::IRConstantDimension::Make(v21, (MIL::MILContext *)(v26 * v23));
    v28 = v19;
    *((_QWORD *)__p + v19) = v27;
    v29 = *a1;
    v30 = MIL::IRDimension::AsConstant(*((MIL::IRDimension **)v43 + v28));
    v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 48))(v30);
    v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 96))(v11);
    v33 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*(_QWORD *)(v32 + 8) - 8));
    v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 48))(v33);
    v35 = MIL::IRConstantDimension::Make(v29, (MIL::MILContext *)(v34 * v31));
    *((_QWORD *)v43 + v28) = v35;
    goto LABEL_17;
  }
  if (v14)
    goto LABEL_11;
LABEL_17:
  v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 88))(v9);
  v37 = MIL::IRTensorValueType::MakeWithShape(*a1, v36, (uint64_t)&__p);
  v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 88))(v11);
  v39 = MIL::IRTensorValueType::MakeWithShape(*a1, v38, (uint64_t)&v43);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v40 = operator new(0x10uLL);
  a3[1] = v40 + 2;
  a3[2] = v40 + 2;
  *v40 = v37;
  v40[1] = v39;
  *a3 = v40;
  if (v43)
  {
    v44 = v43;
    operator delete(v43);
  }
  if (__p)
  {
    v47 = __p;
    operator delete(__p);
  }
}

void sub_1E094D094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (__p)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios18::CustomGetConstant::GetConstantsConstexprLutToSparse(MIL::MILContext *a1@<X1>, _QWORD *a2@<X8>)
{
  MIL::IRNamedValueType ***v6;
  uint64_t Type;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  MIL::IRNamedValueType ***v19;
  uint64_t v20;
  __int128 v21;
  unsigned int Axis;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  MIL::IRNamedValueType ***v29;
  uint64_t Name;
  __int128 v31;
  _QWORD *v32;
  void *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  _QWORD *v40;
  void *v41;
  _OWORD *v42;
  uint64_t v43;
  __int128 v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t i;
  void *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  void *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _QWORD *v62;
  void *v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  _QWORD *v70;
  void *v71;
  _OWORD *v72;
  uint64_t v73;
  __int128 v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t j;
  void *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  _QWORD *v99;
  std::logic_error *exception;
  std::string v101;
  void *v102;
  std::__shared_weak_count *v103;
  std::string v104;
  void *v105;
  std::__shared_weak_count *v106;
  std::string v107;
  void *v108;
  std::__shared_weak_count *v109;
  void *v110;
  std::string v111;
  void *v112;
  std::__shared_weak_count *v113;
  void *v114;
  void *v115;
  std::__shared_weak_count *v116;
  void *v117;
  std::__shared_weak_count *v118;
  unsigned int v119;
  void *v120;
  std::__shared_weak_count *v121;
  void *lpsrc;
  std::__shared_weak_count *v123;
  uint64_t v124;
  uint64_t v125;
  std::string v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  void *__p;
  _QWORD *v131;
  void *v132;
  _QWORD *v133;
  uint64_t v134;

  v134 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&__p, "indices_mask");
  MIL::Operators::Common::Shared::ValidateExistenceAndGetInputSharedPtr(a1, (unsigned __int8 *)&__p, &v129);
  if (SHIBYTE(v132) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "indices_nonzero_data");
  MIL::Operators::Common::Shared::ValidateExistenceAndGetInputSharedPtr(a1, (unsigned __int8 *)&__p, &v128);
  if (SHIBYTE(v132) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "lut");
  MIL::Operators::Common::Shared::ValidateExistenceAndGetInputSharedPtr(a1, (unsigned __int8 *)&__p, &v127);
  if (SHIBYTE(v132) < 0)
    operator delete(__p);
  if ((*(uint64_t (**)(MIL::MILContext *))(*(_QWORD *)a1 + 192))(a1) != 2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"ConstexprLutToSparse should exactly have 2 outputs, but get ", 60);
    (*(void (**)(MIL::MILContext *))(*(_QWORD *)a1 + 192))(a1);
    v99 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)".", 1);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::logic_error::logic_error(exception, &v126);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  v125 = 0;
  v6 = (MIL::IRNamedValueType ***)(*(uint64_t (**)(MIL::MILContext *))(*(_QWORD *)a1 + 176))(a1);
  Type = MIL::IRNamedValueType::GetType(**v6);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Type + 24))(Type);
  v124 = 0;
  v125 = v8;
  v9 = (*(uint64_t (**)(MIL::MILContext *))(*(_QWORD *)a1 + 176))(a1);
  v10 = MIL::IRNamedValueType::GetType(*(MIL::IRNamedValueType **)(*(_QWORD *)v9 + 16));
  v124 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  std::string::basic_string[abi:ne180100]<0>(&__p, "vector_axis");
  MIL::IROperation::TryGetParameterValueSharedPtr(a1, (uint64_t)&__p, 0, (uint64_t *)&lpsrc);
  if (SHIBYTE(v132) < 0)
    operator delete(__p);
  if (lpsrc)
  {
    if (v11)
    {
      v12 = v123;
      v120 = v11;
      v121 = v123;
      if (v123)
      {
        p_shared_owners = (unint64_t *)&v123->__shared_owners_;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
        v119 = 0;
        v117 = v11;
        v118 = v12;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
LABEL_25:
        Axis = MIL::Operators::Common::Shared::ValidateAndGetAxis(&v117);
        v23 = v118;
        if (v118)
        {
          v24 = (unint64_t *)&v118->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v119 = Axis;
        std::allocate_shared[abi:ne180100]<MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse,std::allocator<MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse>,MIL::IRTensorValueType const*&,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,int &,void>(&v125, &v124, &v127, &v129, &v128, &v119, &v115);
        v26 = v125;
        v112 = v115;
        v113 = v116;
        if (v116)
        {
          v27 = (unint64_t *)&v116->__shared_owners_;
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
        }
        v29 = (MIL::IRNamedValueType ***)(*(uint64_t (**)(MIL::MILContext *))(*(_QWORD *)a1 + 176))(a1);
        Name = MIL::IRNamedValueType::GetName(**v29);
        if (*(char *)(Name + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v111, *(const std::string::value_type **)Name, *(_QWORD *)(Name + 8));
        }
        else
        {
          v31 = *(_OWORD *)Name;
          v111.__r_.__value_.__r.__words[2] = *(_QWORD *)(Name + 16);
          *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v31;
        }
        MIL::IRTensorValueType::MakeValueFromConstExprEvaluation(v26);
        __p = v114;
        if (v114)
        {
          v32 = (_QWORD *)operator new();
          v33 = v114;
          *v32 = &unk_1EA992A68;
          v32[1] = 0;
          v32[2] = 0;
          v32[3] = v33;
        }
        else
        {
          v32 = 0;
        }
        v131 = v32;
        v114 = 0;
        v34 = v124;
        v108 = v115;
        v109 = v116;
        if (v116)
        {
          v35 = (unint64_t *)&v116->__shared_owners_;
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
        }
        v37 = (*(uint64_t (**)(MIL::MILContext *))(*(_QWORD *)a1 + 176))(a1);
        v38 = MIL::IRNamedValueType::GetName(*(MIL::IRNamedValueType **)(*(_QWORD *)v37 + 16));
        if (*(char *)(v38 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v107, *(const std::string::value_type **)v38, *(_QWORD *)(v38 + 8));
        }
        else
        {
          v39 = *(_OWORD *)v38;
          v107.__r_.__value_.__r.__words[2] = *(_QWORD *)(v38 + 16);
          *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v39;
        }
        MIL::IRTensorValueType::MakeValueFromConstExprEvaluation(v34);
        v132 = v110;
        if (v110)
        {
          v40 = (_QWORD *)operator new();
          v41 = v110;
          *v40 = &unk_1EA992A68;
          v40[1] = 0;
          v40[2] = 0;
          v40[3] = v41;
        }
        else
        {
          v40 = 0;
        }
        v133 = v40;
        v110 = 0;
        a2[1] = 0;
        a2[2] = 0;
        *a2 = 0;
        v126.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
        v126.__r_.__value_.__s.__data_[8] = 0;
        v42 = operator new(0x20uLL);
        v43 = 0;
        *a2 = v42;
        a2[1] = v42;
        a2[2] = v42 + 2;
        do
        {
          v44 = *((_OWORD *)&__p + v43);
          *v42 = v44;
          if (*((_QWORD *)&v44 + 1))
          {
            v45 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
            do
              v46 = __ldxr(v45);
            while (__stxr(v46 + 1, v45));
          }
          ++v43;
          ++v42;
        }
        while (v43 != 2);
        a2[1] = v42;
        for (i = 16; i != -16; i -= 16)
          std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&__p + i);
        v48 = v110;
        v110 = 0;
        if (v48)
          (*(void (**)(void *))(*(_QWORD *)v48 + 8))(v48);
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v107.__r_.__value_.__l.__data_);
        v49 = v109;
        if (v109)
        {
          v50 = (unint64_t *)&v109->__shared_owners_;
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
        v52 = v114;
        v114 = 0;
        if (v52)
          (*(void (**)(void *))(*(_QWORD *)v52 + 8))(v52);
        if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v111.__r_.__value_.__l.__data_);
        v53 = v113;
        if (v113)
        {
          v54 = (unint64_t *)&v113->__shared_owners_;
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
          }
        }
        v56 = v116;
        if (v116)
        {
          v57 = (unint64_t *)&v116->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        v59 = v121;
        if (v121)
        {
          v60 = (unint64_t *)&v121->__shared_owners_;
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 - 1, v60));
          goto LABEL_123;
        }
        goto LABEL_125;
      }
    }
    else
    {
      v120 = 0;
      v121 = 0;
    }
    v119 = 0;
    v117 = v11;
    v118 = 0;
    goto LABEL_25;
  }
  std::allocate_shared[abi:ne180100]<MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse,std::allocator<MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse>,MIL::IRTensorValueType const*&,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,void>(&v125, &v124, &v127, &v129, &v128, &v120);
  v16 = v125;
  v105 = v120;
  v106 = v121;
  if (v121)
  {
    v17 = (unint64_t *)&v121->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = (MIL::IRNamedValueType ***)(*(uint64_t (**)(MIL::MILContext *))(*(_QWORD *)a1 + 176))(a1);
  v20 = MIL::IRNamedValueType::GetName(**v19);
  if (*(char *)(v20 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v104, *(const std::string::value_type **)v20, *(_QWORD *)(v20 + 8));
  }
  else
  {
    v21 = *(_OWORD *)v20;
    v104.__r_.__value_.__r.__words[2] = *(_QWORD *)(v20 + 16);
    *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v21;
  }
  MIL::IRTensorValueType::MakeValueFromConstExprEvaluation(v16);
  __p = v115;
  if (v115)
  {
    v62 = (_QWORD *)operator new();
    v63 = v115;
    *v62 = &unk_1EA992A68;
    v62[1] = 0;
    v62[2] = 0;
    v62[3] = v63;
  }
  else
  {
    v62 = 0;
  }
  v131 = v62;
  v115 = 0;
  v64 = v124;
  v102 = v120;
  v103 = v121;
  if (v121)
  {
    v65 = (unint64_t *)&v121->__shared_owners_;
    do
      v66 = __ldxr(v65);
    while (__stxr(v66 + 1, v65));
  }
  v67 = (*(uint64_t (**)(MIL::MILContext *))(*(_QWORD *)a1 + 176))(a1);
  v68 = MIL::IRNamedValueType::GetName(*(MIL::IRNamedValueType **)(*(_QWORD *)v67 + 16));
  if (*(char *)(v68 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v101, *(const std::string::value_type **)v68, *(_QWORD *)(v68 + 8));
  }
  else
  {
    v69 = *(_OWORD *)v68;
    v101.__r_.__value_.__r.__words[2] = *(_QWORD *)(v68 + 16);
    *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v69;
  }
  MIL::IRTensorValueType::MakeValueFromConstExprEvaluation(v64);
  v132 = v114;
  if (v114)
  {
    v70 = (_QWORD *)operator new();
    v71 = v114;
    *v70 = &unk_1EA992A68;
    v70[1] = 0;
    v70[2] = 0;
    v70[3] = v71;
  }
  else
  {
    v70 = 0;
  }
  v133 = v70;
  v114 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v126.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  v126.__r_.__value_.__s.__data_[8] = 0;
  v72 = operator new(0x20uLL);
  v73 = 0;
  *a2 = v72;
  a2[1] = v72;
  a2[2] = v72 + 2;
  do
  {
    v74 = *((_OWORD *)&__p + v73);
    *v72 = v74;
    if (*((_QWORD *)&v74 + 1))
    {
      v75 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
      do
        v76 = __ldxr(v75);
      while (__stxr(v76 + 1, v75));
    }
    ++v73;
    ++v72;
  }
  while (v73 != 2);
  a2[1] = v72;
  for (j = 16; j != -16; j -= 16)
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&__p + j);
  v78 = v114;
  v114 = 0;
  if (v78)
    (*(void (**)(void *))(*(_QWORD *)v78 + 8))(v78);
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v101.__r_.__value_.__l.__data_);
  v79 = v103;
  if (v103)
  {
    v80 = (unint64_t *)&v103->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = v115;
  v115 = 0;
  if (v82)
    (*(void (**)(void *))(*(_QWORD *)v82 + 8))(v82);
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v104.__r_.__value_.__l.__data_);
  v83 = v106;
  if (v106)
  {
    v84 = (unint64_t *)&v106->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v59 = v121;
  if (v121)
  {
    v86 = (unint64_t *)&v121->__shared_owners_;
    do
      v61 = __ldaxr(v86);
    while (__stlxr(v61 - 1, v86));
LABEL_123:
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
LABEL_125:
  v87 = v123;
  if (v123)
  {
    v88 = (unint64_t *)&v123->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v90 = (std::__shared_weak_count *)*((_QWORD *)&v127 + 1);
  if (*((_QWORD *)&v127 + 1))
  {
    v91 = (unint64_t *)(*((_QWORD *)&v127 + 1) + 8);
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
  if (*((_QWORD *)&v128 + 1))
  {
    v94 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = (std::__shared_weak_count *)*((_QWORD *)&v129 + 1);
  if (*((_QWORD *)&v129 + 1))
  {
    v97 = (unint64_t *)(*((_QWORD *)&v129 + 1) + 8);
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
}

void sub_1E094DB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,char a50,uint64_t a51,char a52,uint64_t a53,char a54,uint64_t a55,void *a56)
{
  void *v56;
  int v57;

  if (a49 < 0)
  {
    operator delete(__p);
    if ((v57 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a56);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a50);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a52);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a54);
      _Unwind_Resume(a1);
    }
  }
  else if (!v57)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v56);
  goto LABEL_6;
}

void MIL::Operators::Common::ios18::CustomValidators::ValidateConstexprSparseBlockwiseShiftScale(MIL::Operators::Common::ios18::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  uint64_t ParameterValue;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  MIL::IRTensorValueType *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  uint64_t Type;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *LocationPtr;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  int v28;
  _QWORD *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  void *__p[2];
  char v33;

  std::string::basic_string[abi:ne180100]<0>(__p, "data_mask");
  ParameterValue = MIL::IROperation::GetParameterValue(this);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)ParameterValue + 40))(ParameterValue);
  if (v33 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "nonzero_data");
  v7 = MIL::IROperation::GetParameterValue(this);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  if (v33 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "scale");
  v9 = MIL::IROperation::GetParameterValue(this);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  if (v33 < 0)
    operator delete(__p[0]);
  v11 = (MIL::IRTensorValueType *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
  std::string::basic_string[abi:ne180100]<0>(__p, "offset");
  MIL::IROperation::TryGetParameterValueSharedPtr(this, (uint64_t)__p, 0, &v30);
  if (v33 < 0)
    operator delete(__p[0]);
  if (v30)
  {
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30);
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
    v14 = 1;
  }
  else
  {
    v13 = 0;
    v14 = 0;
  }
  v15 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (*(uint64_t (**)(MIL::Operators::Common::ios18::CustomValidators *))(*(_QWORD *)this + 176))(this);
  if (*(_QWORD *)(v18 + 8) == *(_QWORD *)v18
    || (Type = MIL::IRNamedValueType::GetType(**(MIL::IRNamedValueType ***)v18),
        v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Type + 24))(Type),
        *(_QWORD *)(v18 + 8) - *(_QWORD *)v18 <= 0x10uLL))
  {
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  }
  v21 = v20;
  v22 = MIL::IRNamedValueType::GetType(*(MIL::IRNamedValueType **)(*(_QWORD *)v18 + 16));
  v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22);
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
  (*(void (**)(uint64_t))(*(_QWORD *)v25 + 88))(v25);
  v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  v27 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 96))(v26);
  v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 88))(v23);
  v29 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 96))(v21);
}

void sub_1E094E180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios18::CustomValueTypeInference::ValueTypeInferenceConstexprSparseBlockwiseShiftScale(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  MIL::IRValueType *SingleValueType;
  uint64_t v7;
  MIL::IRValueType *v8;
  uint64_t v9;
  MIL::IRValueType *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  void *__p;
  void *v17;
  uint64_t v18;

  std::string::basic_string[abi:ne180100]<0>(&__p, "nonzero_data");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)&__p);
  v7 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(v18) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "data_mask");
  v8 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)&__p);
  v9 = MIL::IRValueType::AsTensorType(v8);
  if (SHIBYTE(v18) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "scale");
  v10 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)&__p);
  v11 = MIL::IRValueType::AsTensorType(v10);
  if (SHIBYTE(v18) < 0)
    operator delete(__p);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7);
  v17 = 0;
  v18 = 0;
  __p = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v12, *(_QWORD *)(v12 + 8), (uint64_t)(*(_QWORD *)(v12 + 8) - *(_QWORD *)v12) >> 3);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 88))(v11);
  v14 = MIL::IRTensorValueType::MakeWithShape(*a1, v13, (uint64_t)&__p);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v15 = operator new(0x10uLL);
  a3[1] = v15 + 2;
  a3[2] = v15 + 2;
  *v15 = v9;
  v15[1] = v14;
  *a3 = v15;
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_1E094E310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios18::CustomGetConstant::GetConstantsConstexprSparseBlockwiseShiftScale(MIL::MILContext *a1@<X1>, _QWORD *a2@<X8>)
{
  void *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *size;
  unint64_t *v10;
  unint64_t v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  void *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  MIL::IRNamedValueType ***v24;
  uint64_t Type;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  std::string::size_type v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  MIL::IRNamedValueType ***v39;
  uint64_t Name;
  __int128 v41;
  _QWORD *v42;
  void *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  _QWORD *v50;
  uint64_t v51;
  _OWORD *v52;
  uint64_t v53;
  __int128 v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t i;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  void *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  _QWORD *v81;
  std::logic_error *exception;
  std::string v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  uint64_t v86;
  std::string v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  void *v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  std::string lpsrc;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  void *__p[2];
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(__p, "data_mask");
  MIL::IROperation::TryGetParameterValueSharedPtr(a1, (uint64_t)__p, 0, (uint64_t *)&lpsrc);
  if (lpsrc.__r_.__value_.__r.__words[0]
  {
    *(_QWORD *)&v99 = v6;
    *((_QWORD *)&v99 + 1) = lpsrc.__r_.__value_.__l.__size_;
    if (lpsrc.__r_.__value_.__l.__size_)
    {
      v7 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
  }
  else
  {
    v99 = 0uLL;
  }
  size = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
  if (lpsrc.__r_.__value_.__l.__size_)
  {
    v10 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (SHIBYTE(v101) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "nonzero_data");
  MIL::IROperation::TryGetParameterValueSharedPtr(a1, (uint64_t)__p, 0, (uint64_t *)&lpsrc);
  if (lpsrc.__r_.__value_.__r.__words[0]
  {
    *(_QWORD *)&v98 = v12;
    *((_QWORD *)&v98 + 1) = lpsrc.__r_.__value_.__l.__size_;
    if (lpsrc.__r_.__value_.__l.__size_)
    {
      v13 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
  }
  else
  {
    v98 = 0uLL;
  }
  v15 = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
  if (lpsrc.__r_.__value_.__l.__size_)
  {
    v16 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (SHIBYTE(v101) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "scale");
  MIL::IROperation::TryGetParameterValueSharedPtr(a1, (uint64_t)__p, 0, (uint64_t *)&lpsrc);
  if (lpsrc.__r_.__value_.__r.__words[0]
  {
    *(_QWORD *)&v97 = v18;
    *((_QWORD *)&v97 + 1) = lpsrc.__r_.__value_.__l.__size_;
    if (lpsrc.__r_.__value_.__l.__size_)
    {
      v19 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
  }
  else
  {
    v97 = 0uLL;
  }
  v21 = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
  if (lpsrc.__r_.__value_.__l.__size_)
  {
    v22 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (SHIBYTE(v101) < 0)
    operator delete(__p[0]);
  if ((*(uint64_t (**)(MIL::MILContext *))(*(_QWORD *)a1 + 192))(a1) != 2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"ConstexprSparseBlockwiseShiftScale should exactly have 2 outputs, but get ", 74);
    (*(void (**)(MIL::MILContext *))(*(_QWORD *)a1 + 192))(a1);
    v81 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)".", 1);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::logic_error::logic_error(exception, &lpsrc);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  v95 = 0;
  v24 = (MIL::IRNamedValueType ***)(*(uint64_t (**)(MIL::MILContext *))(*(_QWORD *)a1 + 176))(a1);
  Type = MIL::IRNamedValueType::GetType(**v24);
  v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Type + 24))(Type);
  v94 = 0;
  v95 = v26;
  v27 = (*(uint64_t (**)(MIL::MILContext *))(*(_QWORD *)a1 + 176))(a1);
  v28 = MIL::IRNamedValueType::GetType(*(MIL::IRNamedValueType **)(*(_QWORD *)v27 + 16));
  v94 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28);
  v93 = 0uLL;
  std::string::basic_string[abi:ne180100]<0>(__p, "offset");
  MIL::IROperation::TryGetParameterValueSharedPtr(a1, (uint64_t)__p, 0, (uint64_t *)&lpsrc);
  if (SHIBYTE(v101) < 0)
    operator delete(__p[0]);
  if (lpsrc.__r_.__value_.__r.__words[0])
  {
    if (v29)
    {
      v30 = lpsrc.__r_.__value_.__l.__size_;
      if (lpsrc.__r_.__value_.__l.__size_)
      {
        v31 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
      }
    }
    else
    {
      v30 = 0;
    }
    *(_QWORD *)&v93 = v29;
    *((_QWORD *)&v93 + 1) = v30;
  }
  v33 = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
  if (lpsrc.__r_.__value_.__l.__size_)
  {
    v34 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  std::allocate_shared[abi:ne180100]<MIL::Operators::Common::ios18::ConstExprs::SparseBlockwiseShiftScale,std::allocator<MIL::Operators::Common::ios18::ConstExprs::SparseBlockwiseShiftScale>,MIL::IRTensorValueType const*&,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,void>(&v95, &v94, &v99, &v98, &v97, &v93, &v91);
  v36 = v95;
  v88 = v91;
  v89 = v92;
  if (v92)
  {
    p_shared_owners = (unint64_t *)&v92->__shared_owners_;
    do
      v38 = __ldxr(p_shared_owners);
    while (__stxr(v38 + 1, p_shared_owners));
  }
  v39 = (MIL::IRNamedValueType ***)(*(uint64_t (**)(MIL::MILContext *))(*(_QWORD *)a1 + 176))(a1);
  Name = MIL::IRNamedValueType::GetName(**v39);
  if (*(char *)(Name + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v87, *(const std::string::value_type **)Name, *(_QWORD *)(Name + 8));
  }
  else
  {
    v41 = *(_OWORD *)Name;
    v87.__r_.__value_.__r.__words[2] = *(_QWORD *)(Name + 16);
    *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v41;
  }
  MIL::IRTensorValueType::MakeValueFromConstExprEvaluation(v36);
  __p[0] = v90;
  if (v90)
  {
    v42 = (_QWORD *)operator new();
    v43 = v90;
    *v42 = &unk_1EA992A68;
    v42[1] = 0;
    v42[2] = 0;
    v42[3] = v43;
  }
  else
  {
    v42 = 0;
  }
  __p[1] = v42;
  v90 = 0;
  v44 = v94;
  v84 = v91;
  v85 = v92;
  if (v92)
  {
    v45 = (unint64_t *)&v92->__shared_owners_;
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
  }
  v47 = (*(uint64_t (**)(MIL::MILContext *))(*(_QWORD *)a1 + 176))(a1);
  v48 = MIL::IRNamedValueType::GetName(*(MIL::IRNamedValueType **)(*(_QWORD *)v47 + 16));
  if (*(char *)(v48 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v83, *(const std::string::value_type **)v48, *(_QWORD *)(v48 + 8));
  }
  else
  {
    v49 = *(_OWORD *)v48;
    v83.__r_.__value_.__r.__words[2] = *(_QWORD *)(v48 + 16);
    *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v49;
  }
  MIL::IRTensorValueType::MakeValueFromConstExprEvaluation(v44);
  v101 = v86;
  if (v86)
  {
    v50 = (_QWORD *)operator new();
    v51 = v86;
    *v50 = &unk_1EA992A68;
    v50[1] = 0;
    v50[2] = 0;
    v50[3] = v51;
  }
  else
  {
    v50 = 0;
  }
  v102 = v50;
  v86 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  lpsrc.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  lpsrc.__r_.__value_.__s.__data_[8] = 0;
  v52 = operator new(0x20uLL);
  v53 = 0;
  *a2 = v52;
  a2[1] = v52;
  a2[2] = v52 + 2;
  do
  {
    v54 = *(_OWORD *)&__p[2 * v53];
    *v52 = v54;
    if (*((_QWORD *)&v54 + 1))
    {
      v55 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
    }
    ++v53;
    ++v52;
  }
  while (v53 != 2);
  a2[1] = v52;
  for (i = 2; i != -2; i -= 2)
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&__p[i]);
  v58 = v86;
  v86 = 0;
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v83.__r_.__value_.__l.__data_);
  v59 = v85;
  if (v85)
  {
    v60 = (unint64_t *)&v85->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  v62 = v90;
  v90 = 0;
  if (v62)
    (*(void (**)(void *))(*(_QWORD *)v62 + 8))(v62);
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v87.__r_.__value_.__l.__data_);
  v63 = v89;
  if (v89)
  {
    v64 = (unint64_t *)&v89->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = v92;
  if (v92)
  {
    v67 = (unint64_t *)&v92->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v69 = (std::__shared_weak_count *)*((_QWORD *)&v93 + 1);
  if (*((_QWORD *)&v93 + 1))
  {
    v70 = (unint64_t *)(*((_QWORD *)&v93 + 1) + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v72 = (std::__shared_weak_count *)*((_QWORD *)&v97 + 1);
  if (*((_QWORD *)&v97 + 1))
  {
    v73 = (unint64_t *)(*((_QWORD *)&v97 + 1) + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = (std::__shared_weak_count *)*((_QWORD *)&v98 + 1);
  if (*((_QWORD *)&v98 + 1))
  {
    v76 = (unint64_t *)(*((_QWORD *)&v98 + 1) + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v78 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
  if (*((_QWORD *)&v99 + 1))
  {
    v79 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
}

void sub_1E094EBF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40,uint64_t a41,char a42,uint64_t a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  void *v51;
  int v52;

  if (a39 < 0)
  {
    operator delete(__p);
    if ((v52 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a46);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a40);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a42);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a44);
      _Unwind_Resume(a1);
    }
  }
  else if (!v52)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v51);
  goto LABEL_6;
}

MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense *std::unique_ptr<MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense>::reset[abi:ne180100](MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense **a1, MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense *a2)
{
  MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense::~BlockwiseLutToDense(result);
    JUMPOUT(0x1E0C023A0);
  }
  return result;
}

MIL::Operators::Common::ios16::ConstExprs::Cast *std::unique_ptr<MIL::Operators::Common::ios16::ConstExprs::Cast>::reset[abi:ne180100](MIL::Operators::Common::ios16::ConstExprs::Cast **a1, MIL::Operators::Common::ios16::ConstExprs::Cast *a2)
{
  MIL::Operators::Common::ios16::ConstExprs::Cast *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    MIL::Operators::Common::ios16::ConstExprs::Cast::~Cast(result);
    JUMPOUT(0x1E0C023A0);
  }
  return result;
}

MIL::Operators::Common::ios16::ConstExprs::SparseToDense *std::unique_ptr<MIL::Operators::Common::ios16::ConstExprs::SparseToDense>::reset[abi:ne180100](MIL::Operators::Common::ios16::ConstExprs::SparseToDense **a1, MIL::Operators::Common::ios16::ConstExprs::SparseToDense *a2)
{
  MIL::Operators::Common::ios16::ConstExprs::SparseToDense *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    MIL::Operators::Common::ios16::ConstExprs::SparseToDense::~SparseToDense(result);
    JUMPOUT(0x1E0C023A0);
  }
  return result;
}

MIL::Operators::Common::ios18::ConstExprs::BlockwiseShiftScale *std::unique_ptr<MIL::Operators::Common::ios18::ConstExprs::BlockwiseShiftScale>::reset[abi:ne180100](MIL::Operators::Common::ios18::ConstExprs::BlockwiseShiftScale **a1, MIL::Operators::Common::ios18::ConstExprs::BlockwiseShiftScale *a2)
{
  MIL::Operators::Common::ios18::ConstExprs::BlockwiseShiftScale *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    MIL::Operators::Common::ios18::ConstExprs::BlockwiseShiftScale::~BlockwiseShiftScale(result);
    JUMPOUT(0x1E0C023A0);
  }
  return result;
}

_QWORD *std::allocate_shared[abi:ne180100]<MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse,std::allocator<MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse>,MIL::IRTensorValueType const*&,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,int &,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, __int128 *a3@<X3>, __int128 *a4@<X4>, __int128 *a5@<X5>, unsigned int *a6@<X6>, _QWORD *a7@<X8>)
{
  _QWORD *v14;
  _QWORD *result;

  v14 = operator new(0x28uLL);
  result = std::__shared_ptr_emplace<MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse>::__shared_ptr_emplace[abi:ne180100]<MIL::IRTensorValueType const*&,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,int &,std::allocator<MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse>,0>(v14, a1, a2, a3, a4, a5, a6);
  *a7 = v14 + 3;
  a7[1] = v14;
  return result;
}

void sub_1E094EF80(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse>::__shared_ptr_emplace[abi:ne180100]<MIL::IRTensorValueType const*&,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,int &,std::allocator<MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3, __int128 *a4, __int128 *a5, __int128 *a6, unsigned int *a7)
{
  char v9;

  a1[2] = 0;
  *a1 = &unk_1EA9A1828;
  a1[1] = 0;
  std::allocator<MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse>::construct[abi:ne180100]<MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse,MIL::IRTensorValueType const*&,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,int &>((uint64_t)&v9, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7);
  return a1;
}

void sub_1E094EFF4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A1828;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A1828;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E0C023A0);
}

void std::__shared_ptr_emplace<MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse>::__on_zero_shared(uint64_t a1)
{
  MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse::~BlockwiseLutToSparse((MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse *)(a1 + 24));
}

void std::allocator<MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse>::construct[abi:ne180100]<MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse,MIL::IRTensorValueType const*&,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,int &>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, __int128 *a5, __int128 *a6, __int128 *a7, unsigned int *a8)
{
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v9 = *a3;
  v10 = *a4;
  v11 = *a5;
  *(_QWORD *)a5 = 0;
  *((_QWORD *)a5 + 1) = 0;
  v22 = *a6;
  v23 = v11;
  *(_QWORD *)a6 = 0;
  *((_QWORD *)a6 + 1) = 0;
  v21 = *a7;
  *(_QWORD *)a7 = 0;
  *((_QWORD *)a7 + 1) = 0;
  MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse::BlockwiseLutToSparse(a2, v9, v10, &v23, &v22, &v21, *a8);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
  if (*((_QWORD *)&v21 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_1E094F164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse,std::allocator<MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse>,MIL::IRTensorValueType const*&,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, __int128 *a3@<X3>, __int128 *a4@<X4>, __int128 *a5@<X5>, _QWORD *a6@<X8>)
{
  _QWORD *v12;
  _QWORD *result;

  v12 = operator new(0x28uLL);
  result = std::__shared_ptr_emplace<MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse>::__shared_ptr_emplace[abi:ne180100]<MIL::IRTensorValueType const*&,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,std::allocator<MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse>,0>(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  return result;
}

void sub_1E094F1FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse>::__shared_ptr_emplace[abi:ne180100]<MIL::IRTensorValueType const*&,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,std::allocator<MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3, __int128 *a4, __int128 *a5, __int128 *a6)
{
  char v8;

  a1[2] = 0;
  *a1 = &unk_1EA9A1828;
  a1[1] = 0;
  std::allocator<MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse>::construct[abi:ne180100]<MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse,MIL::IRTensorValueType const*&,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>>((uint64_t)&v8, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6);
  return a1;
}

void sub_1E094F26C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse>::construct[abi:ne180100]<MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse,MIL::IRTensorValueType const*&,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, __int128 *a5, __int128 *a6, __int128 *a7)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v8 = *a3;
  v9 = *a4;
  v10 = *a5;
  *(_QWORD *)a5 = 0;
  *((_QWORD *)a5 + 1) = 0;
  v21 = *a6;
  v22 = v10;
  *(_QWORD *)a6 = 0;
  *((_QWORD *)a6 + 1) = 0;
  v20 = *a7;
  *(_QWORD *)a7 = 0;
  *((_QWORD *)a7 + 1) = 0;
  MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse::BlockwiseLutToSparse(a2, v8, v9, &v22, &v21, &v20);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
  if (*((_QWORD *)&v21 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_1E094F384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<MIL::Operators::Common::ios18::ConstExprs::SparseBlockwiseShiftScale,std::allocator<MIL::Operators::Common::ios18::ConstExprs::SparseBlockwiseShiftScale>,MIL::IRTensorValueType const*&,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, __int128 *a3@<X3>, __int128 *a4@<X4>, __int128 *a5@<X5>, __int128 *a6@<X6>, _QWORD *a7@<X8>)
{
  _QWORD *v14;
  _QWORD *result;

  v14 = operator new(0x28uLL);
  result = std::__shared_ptr_emplace<MIL::Operators::Common::ios18::ConstExprs::SparseBlockwiseShiftScale>::__shared_ptr_emplace[abi:ne180100]<MIL::IRTensorValueType const*&,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,std::allocator<MIL::Operators::Common::ios18::ConstExprs::SparseBlockwiseShiftScale>,0>(v14, a1, a2, a3, a4, a5, a6);
  *a7 = v14 + 3;
  a7[1] = v14;
  return result;
}

void sub_1E094F424(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<MIL::Operators::Common::ios18::ConstExprs::SparseBlockwiseShiftScale>::__shared_ptr_emplace[abi:ne180100]<MIL::IRTensorValueType const*&,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,std::allocator<MIL::Operators::Common::ios18::ConstExprs::SparseBlockwiseShiftScale>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3, __int128 *a4, __int128 *a5, __int128 *a6, __int128 *a7)
{
  char v9;

  a1[2] = 0;
  *a1 = &unk_1EA9A1878;
  a1[1] = 0;
  std::allocator<MIL::Operators::Common::ios18::ConstExprs::SparseBlockwiseShiftScale>::construct[abi:ne180100]<MIL::Operators::Common::ios18::ConstExprs::SparseBlockwiseShiftScale,MIL::IRTensorValueType const*&,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>>((uint64_t)&v9, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7);
  return a1;
}

void sub_1E094F498(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MIL::Operators::Common::ios18::ConstExprs::SparseBlockwiseShiftScale>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A1878;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIL::Operators::Common::ios18::ConstExprs::SparseBlockwiseShiftScale>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A1878;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E0C023A0);
}

void std::__shared_ptr_emplace<MIL::Operators::Common::ios18::ConstExprs::SparseBlockwiseShiftScale>::__on_zero_shared(uint64_t a1)
{
  MIL::Operators::Common::ios18::ConstExprs::SparseBlockwiseShiftScale::~SparseBlockwiseShiftScale((MIL::Operators::Common::ios18::ConstExprs::SparseBlockwiseShiftScale::Impl **)(a1 + 24));
}

void std::allocator<MIL::Operators::Common::ios18::ConstExprs::SparseBlockwiseShiftScale>::construct[abi:ne180100]<MIL::Operators::Common::ios18::ConstExprs::SparseBlockwiseShiftScale,MIL::IRTensorValueType const*&,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, __int128 *a5, __int128 *a6, __int128 *a7, __int128 *a8)
{
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v9 = *a3;
  v10 = *a4;
  v27 = *a5;
  *(_QWORD *)a5 = 0;
  *((_QWORD *)a5 + 1) = 0;
  v11 = *a6;
  *(_QWORD *)a6 = 0;
  *((_QWORD *)a6 + 1) = 0;
  v25 = *a7;
  v26 = v11;
  *(_QWORD *)a7 = 0;
  *((_QWORD *)a7 + 1) = 0;
  v24 = *a8;
  *(_QWORD *)a8 = 0;
  *((_QWORD *)a8 + 1) = 0;
  MIL::Operators::Common::ios18::ConstExprs::SparseBlockwiseShiftScale::SparseBlockwiseShiftScale(a2, v9, v10, &v27, &v26, &v25, &v24);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
  if (*((_QWORD *)&v25 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
  if (*((_QWORD *)&v26 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_1E094F64C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  uint64_t v13;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v13 - 32);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::ConstexprBlockwiseShiftScale::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  std::__shared_weak_count_vtbl *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  unsigned __int8 *v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  std::__shared_weak_count_vtbl *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  unsigned __int8 *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  void ***v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  void *v66;
  _QWORD *v67;
  void *v68;
  unint64_t v69;
  void **v70;
  void **v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  void **v79;
  void **v80;
  char *v81;
  __int128 v82;
  void **v83;
  uint64_t v84;
  void *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  void *v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  void **v109;
  std::__shared_weak_count *v110;
  std::__shared_weak_count_vtbl *v111;
  std::__shared_weak_count *v112;
  unint64_t *p_shared_owners;
  unint64_t v114;
  std::__shared_weak_count_vtbl *v115;
  void **v116;
  std::__shared_weak_count *v117;
  std::__shared_weak_count_vtbl *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count_vtbl *v122;
  void **v123;
  std::__shared_weak_count *v124;
  std::__shared_weak_count_vtbl *v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count_vtbl *v129;
  void **v130;
  std::__shared_weak_count *v131;
  std::__shared_weak_count_vtbl *v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count_vtbl *v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  void **v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  void **v143;
  void **v144;
  std::__shared_weak_count *v145;
  std::__shared_weak_count_vtbl *v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count_vtbl *v150;
  void **v151;
  std::__shared_weak_count *v152;
  std::__shared_weak_count_vtbl *v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count_vtbl *v157;
  void **v158;
  std::__shared_weak_count *v159;
  std::__shared_weak_count_vtbl *v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count_vtbl *v164;
  void **v165;
  std::__shared_weak_count *v166;
  std::__shared_weak_count_vtbl *v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count_vtbl *v171;
  uint64_t v172;
  std::__shared_weak_count *v173;
  void **v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  void **v178;
  uint64_t result;
  uint64_t v180;
  void **v181;
  std::__shared_weak_count *v182;
  std::__shared_weak_count_vtbl *v183;
  std::__shared_weak_count *v184;
  void *v185[2];
  char v186;
  std::__shared_weak_count_vtbl *v187;
  std::__shared_weak_count *v188;
  void *v189[2];
  char v190;
  std::__shared_weak_count_vtbl *v191;
  std::__shared_weak_count *v192;
  void *v193[2];
  char v194;
  std::__shared_weak_count_vtbl *v195;
  std::__shared_weak_count *v196;
  void **v197;
  std::__shared_weak_count *v198;
  void *v199[2];
  char v200;
  std::__shared_weak_count_vtbl *v201;
  std::__shared_weak_count *v202;
  void *v203[2];
  char v204;
  void *v205[2];
  char v206;
  std::__shared_weak_count_vtbl *v207;
  std::__shared_weak_count *v208;
  void *v209[2];
  char v210;
  void *v211[2];
  char v212;
  std::__shared_weak_count_vtbl *v213;
  std::__shared_weak_count *v214;
  void *v215[2];
  char v216;
  void *v217[2];
  char v218;
  std::__shared_weak_count_vtbl *v219;
  std::__shared_weak_count *v220;
  __int128 v221;
  __int128 v222;
  void *v223[2];
  uint64_t v224;
  __n128 v225;
  __n128 v226;
  __n128 v227;
  void *__p;
  void *v229;
  _QWORD *v230;
  void *v231;
  void *v232;
  _QWORD *v233;
  void *v234;
  void *v235;
  _QWORD *v236;
  void *v237;
  void *v238;
  _QWORD *v239;
  void *v240;
  void *v241;
  _QWORD *v242;
  void *v243;
  void *v244;
  _QWORD *v245;
  __n128 v246;
  uint64_t v247;
  _QWORD *v248;
  _QWORD v249[3];
  _QWORD *v250;
  _QWORD v251[3];
  _QWORD *v252;
  _BYTE v253[24];
  _BYTE *v254;
  _QWORD v255[3];
  _QWORD *v256;
  std::__shared_weak_count_vtbl *v257;
  uint64_t v258;
  uint64_t v259;
  void **v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;

  v267 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v248 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v257 = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v258 = (uint64_t)&v8->~__shared_weak_count_0;
  v259 = (uint64_t)&v8->~__shared_weak_count_0;
  v260 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 20, (uint64_t)&v257);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v243 = v10;
  *v10 = v9;
  v245 = v10 + 1;
  v244 = v10 + 1;
  v261 = MIL::IRTensorValueType::MakeWithShape(a1, 13, (uint64_t)&v243);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v240 = v12;
  *v12 = v11;
  v242 = v12 + 1;
  v241 = v12 + 1;
  v262 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v240);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  v237 = v14;
  *v14 = v13;
  v239 = v14 + 1;
  v238 = v14 + 1;
  v263 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v237);
  v15 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v16 = operator new(8uLL);
  v234 = v16;
  *v16 = v15;
  v236 = v16 + 1;
  v235 = v16 + 1;
  v264 = MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v234);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  v231 = v18;
  *v18 = v17;
  v233 = v18 + 1;
  v232 = v18 + 1;
  v265 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v231);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  __p = v20;
  *v20 = v19;
  v230 = v20 + 1;
  v229 = v20 + 1;
  v266 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v260, 7, &v246);
  MIL::IRParameter::Make(&v246, &v247);
  v21 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "data", &v247);
  v22 = v247;
  v247 = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = (std::__shared_weak_count *)v246.n128_u64[1];
  if (v246.n128_u64[1])
  {
    v24 = (unint64_t *)(v246.n128_u64[1] + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (__p)
  {
    v229 = __p;
    operator delete(__p);
  }
  if (v231)
  {
    v232 = v231;
    operator delete(v231);
  }
  if (v234)
  {
    v235 = v234;
    operator delete(v234);
  }
  if (v237)
  {
    v238 = v237;
    operator delete(v237);
  }
  if (v240)
  {
    v241 = v240;
    operator delete(v240);
  }
  if (v243)
  {
    v244 = v243;
    operator delete(v243);
  }
  if (v257)
  {
    v258 = (uint64_t)v257;
    operator delete(v257);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v21 + 5) + 32))(*((_QWORD *)v21 + 5), 1);
  v26 = v248;
  v27 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v28 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v257 = v28;
  v28->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v27;
  v258 = (uint64_t)&v28->~__shared_weak_count_0;
  v259 = (uint64_t)&v28->~__shared_weak_count_0;
  v260 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v257);
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = operator new(8uLL);
  v243 = v30;
  *v30 = v29;
  v245 = v30 + 1;
  v244 = v30 + 1;
  v261 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v243);
  v31 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v32 = operator new(8uLL);
  v240 = v32;
  *v32 = v31;
  v242 = v32 + 1;
  v241 = v32 + 1;
  v262 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v240);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v260, 3, &v227);
  MIL::IRParameter::Make(&v227, (uint64_t *)&v237);
  v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v26, "scale", (uint64_t *)&v237);
  v34 = v237;
  v237 = 0;
  if (v34)
    (*(void (**)(void *))(*(_QWORD *)v34 + 8))(v34);
  v35 = (std::__shared_weak_count *)v227.n128_u64[1];
  if (v227.n128_u64[1])
  {
    v36 = (unint64_t *)(v227.n128_u64[1] + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (v240)
  {
    v241 = v240;
    operator delete(v240);
  }
  if (v243)
  {
    v244 = v243;
    operator delete(v243);
  }
  if (v257)
  {
    v258 = (uint64_t)v257;
    operator delete(v257);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v33 + 5) + 32))(*((_QWORD *)v33 + 5), 1);
  v38 = v248;
  v39 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v40 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v257 = v40;
  v40->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v39;
  v258 = (uint64_t)&v40->~__shared_weak_count_0;
  v259 = (uint64_t)&v40->~__shared_weak_count_0;
  v260 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 20, (uint64_t)&v257);
  v41 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v42 = operator new(8uLL);
  v243 = v42;
  *v42 = v41;
  v245 = v42 + 1;
  v244 = v42 + 1;
  v261 = MIL::IRTensorValueType::MakeWithShape(a1, 13, (uint64_t)&v243);
  v43 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v44 = operator new(8uLL);
  v240 = v44;
  *v44 = v43;
  v242 = v44 + 1;
  v241 = v44 + 1;
  v262 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v240);
  v45 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v46 = operator new(8uLL);
  v237 = v46;
  *v46 = v45;
  v239 = v46 + 1;
  v238 = v46 + 1;
  v263 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v237);
  v47 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v48 = operator new(8uLL);
  v234 = v48;
  *v48 = v47;
  v236 = v48 + 1;
  v235 = v48 + 1;
  v264 = MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v234);
  v49 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v50 = operator new(8uLL);
  v231 = v50;
  *v50 = v49;
  v233 = v50 + 1;
  v232 = v50 + 1;
  v265 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v231);
  v51 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v52 = operator new(8uLL);
  __p = v52;
  *v52 = v51;
  v230 = v52 + 1;
  v229 = v52 + 1;
  v266 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v260, 7, &v226);
  MIL::IRParameter::Make(&v226, &v247);
  v53 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(v38, "offset", &v247);
  v54 = v247;
  v247 = 0;
  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  v55 = (std::__shared_weak_count *)v226.n128_u64[1];
  if (v226.n128_u64[1])
  {
    v56 = (unint64_t *)(v226.n128_u64[1] + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (__p)
  {
    v229 = __p;
    operator delete(__p);
  }
  if (v231)
  {
    v232 = v231;
    operator delete(v231);
  }
  if (v234)
  {
    v235 = v234;
    operator delete(v234);
  }
  if (v237)
  {
    v238 = v237;
    operator delete(v237);
  }
  if (v240)
  {
    v241 = v240;
    operator delete(v240);
  }
  if (v243)
  {
    v244 = v243;
    operator delete(v243);
  }
  if (v257)
  {
    v258 = (uint64_t)v257;
    operator delete(v257);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v53 + 5) + 32))(*((_QWORD *)v53 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v53 + 5) + 48))(*((_QWORD *)v53 + 5), 1);
  v231 = 0;
  v58 = operator new();
  *(_QWORD *)v58 = 0;
  *(_QWORD *)(v58 + 8) = 0;
  *(_QWORD *)(v58 + 16) = 0;
  v260 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v231, (void **)v58);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v260, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)v231, 1uLL);
  v59 = (void ***)v231;
  v60 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v61 = operator new(8uLL);
  v243 = v61;
  *v61 = v60;
  v245 = v61 + 1;
  v244 = v61 + 1;
  v257 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v243);
  v62 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v63 = operator new(8uLL);
  v240 = v63;
  *v63 = v62;
  v242 = v63 + 1;
  v241 = v63 + 1;
  v258 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v240);
  v64 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v65 = operator new(8uLL);
  v237 = v65;
  *v65 = v64;
  v239 = v65 + 1;
  v238 = v65 + 1;
  v259 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v237);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v257, 3, &v225);
  MIL::IRParameter::Make(&v225, (uint64_t *)&__p);
  v66 = __p;
  v234 = __p;
  if (__p)
  {
    v67 = (_QWORD *)operator new();
    v68 = __p;
    *v67 = &unk_1EA99F888;
    v67[1] = 0;
    v67[2] = 0;
    v67[3] = v68;
  }
  else
  {
    v67 = 0;
  }
  v235 = v67;
  __p = 0;
  v69 = (unint64_t)v59[2];
  v70 = v59[1];
  if ((unint64_t)v70 >= v69)
  {
    v72 = ((char *)v70 - (char *)*v59) >> 4;
    v73 = v72 + 1;
    if ((unint64_t)(v72 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v74 = v69 - (_QWORD)*v59;
    if (v74 >> 3 > v73)
      v73 = v74 >> 3;
    if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF0)
      v75 = 0xFFFFFFFFFFFFFFFLL;
    else
      v75 = v73;
    v264 = (uint64_t)(v59 + 2);
    v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v59 + 2), v75);
    v78 = &v76[16 * v72];
    *(_QWORD *)v78 = v66;
    *((_QWORD *)v78 + 1) = v67;
    v235 = 0;
    v234 = 0;
    v80 = *v59;
    v79 = v59[1];
    if (v79 == *v59)
    {
      v83 = v59[1];
      v81 = &v76[16 * v72];
    }
    else
    {
      v81 = &v76[16 * v72];
      do
      {
        v82 = *((_OWORD *)v79 - 1);
        v79 -= 2;
        *((_OWORD *)v81 - 1) = v82;
        v81 -= 16;
        *v79 = 0;
        v79[1] = 0;
      }
      while (v79 != v80);
      v83 = *v59;
      v79 = v59[1];
    }
    v71 = (void **)(v78 + 16);
    *v59 = (void **)v81;
    v260 = v83;
    v261 = (uint64_t)v83;
    v59[1] = (void **)(v78 + 16);
    v262 = (uint64_t)v79;
    v84 = (uint64_t)v59[2];
    v59[2] = (void **)&v76[16 * v77];
    v263 = v84;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v260);
  }
  else
  {
    *v70 = v66;
    v70[1] = v67;
    v71 = v70 + 2;
    v235 = 0;
    v234 = 0;
  }
  v59[1] = v71;
  v85 = __p;
  __p = 0;
  if (v85)
    (*(void (**)(void *))(*(_QWORD *)v85 + 8))(v85);
  v86 = (std::__shared_weak_count *)v225.n128_u64[1];
  if (v225.n128_u64[1])
  {
    v87 = (unint64_t *)(v225.n128_u64[1] + 8);
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  if (v237)
  {
    v238 = v237;
    operator delete(v237);
  }
  if (v240)
  {
    v241 = v240;
    operator delete(v240);
  }
  if (v243)
  {
    v244 = v243;
    operator delete(v243);
  }
  *(_OWORD *)v223 = *(_OWORD *)a2;
  v224 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v89 = (uint64_t)v248;
  *(_QWORD *)&v222 = v248;
  if (v248)
  {
    v90 = (_QWORD *)operator new();
    *v90 = &unk_1EA99F8E8;
    v90[1] = 0;
    v90[2] = 0;
    v90[3] = v89;
  }
  else
  {
    v90 = 0;
  }
  *((_QWORD *)&v222 + 1) = v90;
  v248 = 0;
  *(_QWORD *)&v221 = v231;
  if (v231)
  {
    v91 = (_QWORD *)operator new();
    v92 = v231;
    *v91 = &unk_1EA99F948;
    v91[1] = 0;
    v91[2] = 0;
    v91[3] = v92;
  }
  else
  {
    v91 = 0;
  }
  *((_QWORD *)&v221 + 1) = v91;
  v231 = 0;
  v255[0] = &unk_1EA99FAC8;
  v255[1] = MIL::Operators::Common::ios18::CustomValidators::ValidateConstexprBlockwiseShiftScale;
  v256 = v255;
  v254 = 0;
  MIL::IROperator::Make((__int128 *)v223, &v222, &v221, (uint64_t)v255, (uint64_t)v253, a3);
  v93 = v254;
  if (v254 == v253)
  {
    v94 = 4;
    v93 = v253;
  }
  else
  {
    if (!v254)
      goto LABEL_97;
    v94 = 5;
  }
  (*(void (**)(void))(*v93 + 8 * v94))();
LABEL_97:
  v95 = v256;
  if (v256 == v255)
  {
    v96 = 4;
    v95 = v255;
    goto LABEL_101;
  }
  if (v256)
  {
    v96 = 5;
LABEL_101:
    (*(void (**)(void))(*v95 + 8 * v96))();
  }
  v97 = (std::__shared_weak_count *)*((_QWORD *)&v221 + 1);
  if (*((_QWORD *)&v221 + 1))
  {
    v98 = (unint64_t *)(*((_QWORD *)&v221 + 1) + 8);
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = (std::__shared_weak_count *)*((_QWORD *)&v222 + 1);
  if (*((_QWORD *)&v222 + 1))
  {
    v101 = (unint64_t *)(*((_QWORD *)&v222 + 1) + 8);
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  if (SHIBYTE(v224) < 0)
    operator delete(v223[0]);
  v103 = *a3;
  v251[0] = &off_1EA99FBD8;
  v251[1] = MIL::Operators::Common::ios18::CustomValueTypeInference::ValueTypeInferenceConstexprBlockwiseShiftScale;
  v252 = v251;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v103 + 200))(v103, v251);
  v104 = v252;
  if (v252 == v251)
  {
    v105 = 4;
    v104 = v251;
  }
  else
  {
    if (!v252)
      goto LABEL_119;
    v105 = 5;
  }
  (*(void (**)(void))(*v104 + 8 * v105))();
LABEL_119:
  v106 = *a3;
  v249[0] = &off_1EA9A18C8;
  v249[1] = a1;
  v250 = v249;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v106 + 144))(v106, v249);
  v107 = v250;
  if (v250 == v249)
  {
    v108 = 4;
    v107 = v249;
  }
  else
  {
    if (!v250)
      goto LABEL_124;
    v108 = 5;
  }
  (*(void (**)(void))(*v107 + 8 * v108))();
LABEL_124:
  MIL::Validation::TensorDTypeConstraints::Make(&v260);
  v109 = v260;
  std::string::basic_string[abi:ne180100]<0>(v217, "data");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v217, 0, (uint64_t *)&v257);
  v219 = v257;
  if (v257)
  {
    v110 = (std::__shared_weak_count *)operator new();
    v111 = v257;
    v110->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v110->__shared_owners_ = 0;
    v110->__shared_weak_owners_ = 0;
    v110[1].__vftable = v111;
  }
  else
  {
    v110 = 0;
  }
  v220 = v110;
  v257 = 0;
  std::string::basic_string[abi:ne180100]<0>(v215, "SrcT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v109 + 3))(v109, &v219, v215);
  if (v216 < 0)
    operator delete(v215[0]);
  v112 = v220;
  if (v220)
  {
    p_shared_owners = (unint64_t *)&v220->__shared_owners_;
    do
      v114 = __ldaxr(p_shared_owners);
    while (__stlxr(v114 - 1, p_shared_owners));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = v257;
  v257 = 0;
  if (v115)
    (*((void (**)(std::__shared_weak_count_vtbl *))v115->~__shared_weak_count + 1))(v115);
  if (v218 < 0)
    operator delete(v217[0]);
  v116 = v260;
  std::string::basic_string[abi:ne180100]<0>(v211, "scale");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v211, 0, (uint64_t *)&v257);
  v213 = v257;
  if (v257)
  {
    v117 = (std::__shared_weak_count *)operator new();
    v118 = v257;
    v117->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v117->__shared_owners_ = 0;
    v117->__shared_weak_owners_ = 0;
    v117[1].__vftable = v118;
  }
  else
  {
    v117 = 0;
  }
  v214 = v117;
  v257 = 0;
  std::string::basic_string[abi:ne180100]<0>(v209, "DstT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v116 + 3))(v116, &v213, v209);
  if (v210 < 0)
    operator delete(v209[0]);
  v119 = v214;
  if (v214)
  {
    v120 = (unint64_t *)&v214->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  v122 = v257;
  v257 = 0;
  if (v122)
    (*((void (**)(std::__shared_weak_count_vtbl *))v122->~__shared_weak_count + 1))(v122);
  if (v212 < 0)
    operator delete(v211[0]);
  v123 = v260;
  std::string::basic_string[abi:ne180100]<0>(v205, "offset");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v205, 1, (uint64_t *)&v257);
  v207 = v257;
  if (v257)
  {
    v124 = (std::__shared_weak_count *)operator new();
    v125 = v257;
    v124->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v124->__shared_owners_ = 0;
    v124->__shared_weak_owners_ = 0;
    v124[1].__vftable = v125;
  }
  else
  {
    v124 = 0;
  }
  v208 = v124;
  v257 = 0;
  std::string::basic_string[abi:ne180100]<0>(v203, "OffsetT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v123 + 3))(v123, &v207, v203);
  if (v204 < 0)
    operator delete(v203[0]);
  v126 = v208;
  if (v208)
  {
    v127 = (unint64_t *)&v208->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  v129 = v257;
  v257 = 0;
  if (v129)
    (*((void (**)(std::__shared_weak_count_vtbl *))v129->~__shared_weak_count + 1))(v129);
  if (v206 < 0)
    operator delete(v205[0]);
  v130 = v260;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v257);
  v201 = v257;
  if (v257)
  {
    v131 = (std::__shared_weak_count *)operator new();
    v132 = v257;
    v131->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v131->__shared_owners_ = 0;
    v131->__shared_weak_owners_ = 0;
    v131[1].__vftable = v132;
  }
  else
  {
    v131 = 0;
  }
  v202 = v131;
  v257 = 0;
  std::string::basic_string[abi:ne180100]<0>(v199, "DstT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v130 + 3))(v130, &v201, v199);
  if (v200 < 0)
    operator delete(v199[0]);
  v133 = v202;
  if (v202)
  {
    v134 = (unint64_t *)&v202->__shared_owners_;
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
  v136 = v257;
  v257 = 0;
  if (v136)
    (*((void (**)(std::__shared_weak_count_vtbl *))v136->~__shared_weak_count + 1))(v136);
  v137 = *a3;
  v197 = v260;
  if (v260)
  {
    v138 = (std::__shared_weak_count *)operator new();
    v139 = v260;
    v138->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v138->__shared_owners_ = 0;
    v138->__shared_weak_owners_ = 0;
    v138[1].__vftable = (std::__shared_weak_count_vtbl *)v139;
  }
  else
  {
    v138 = 0;
  }
  v198 = v138;
  v260 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v137 + 56))(v137, &v197);
  v140 = v198;
  if (v198)
  {
    v141 = (unint64_t *)&v198->__shared_owners_;
    do
      v142 = __ldaxr(v141);
    while (__stlxr(v142 - 1, v141));
    if (!v142)
    {
      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
      std::__shared_weak_count::__release_weak(v140);
    }
  }
  v143 = v260;
  v260 = 0;
  if (v143)
    (*((void (**)(void **))*v143 + 1))(v143);
  MIL::Validation::TensorRankValueConstraints::Make(&v260);
  v144 = v260;
  std::string::basic_string[abi:ne180100]<0>(v193, "data");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v193, 0, (uint64_t *)&v257);
  v195 = v257;
  if (v257)
  {
    v145 = (std::__shared_weak_count *)operator new();
    v146 = v257;
    v145->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v145->__shared_owners_ = 0;
    v145->__shared_weak_owners_ = 0;
    v145[1].__vftable = v146;
  }
  else
  {
    v145 = 0;
  }
  v196 = v145;
  v257 = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))*v144 + 4))(v144, &v195, 1, 0x7FFFFFFFFFFFFFFFLL);
  v147 = v196;
  if (v196)
  {
    v148 = (unint64_t *)&v196->__shared_owners_;
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
  v150 = v257;
  v257 = 0;
  if (v150)
    (*((void (**)(std::__shared_weak_count_vtbl *))v150->~__shared_weak_count + 1))(v150);
  if (v194 < 0)
    operator delete(v193[0]);
  v151 = v260;
  std::string::basic_string[abi:ne180100]<0>(v189, "scale");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v189, 0, (uint64_t *)&v257);
  v191 = v257;
  if (v257)
  {
    v152 = (std::__shared_weak_count *)operator new();
    v153 = v257;
    v152->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v152->__shared_owners_ = 0;
    v152->__shared_weak_owners_ = 0;
    v152[1].__vftable = v153;
  }
  else
  {
    v152 = 0;
  }
  v192 = v152;
  v257 = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))*v151 + 4))(v151, &v191, 1, 0x7FFFFFFFFFFFFFFFLL);
  v154 = v192;
  if (v192)
  {
    v155 = (unint64_t *)&v192->__shared_owners_;
    do
      v156 = __ldaxr(v155);
    while (__stlxr(v156 - 1, v155));
    if (!v156)
    {
      ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
      std::__shared_weak_count::__release_weak(v154);
    }
  }
  v157 = v257;
  v257 = 0;
  if (v157)
    (*((void (**)(std::__shared_weak_count_vtbl *))v157->~__shared_weak_count + 1))(v157);
  if (v190 < 0)
    operator delete(v189[0]);
  v158 = v260;
  std::string::basic_string[abi:ne180100]<0>(v185, "offset");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v185, 1, (uint64_t *)&v257);
  v187 = v257;
  if (v257)
  {
    v159 = (std::__shared_weak_count *)operator new();
    v160 = v257;
    v159->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v159->__shared_owners_ = 0;
    v159->__shared_weak_owners_ = 0;
    v159[1].__vftable = v160;
  }
  else
  {
    v159 = 0;
  }
  v188 = v159;
  v257 = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))*v158 + 4))(v158, &v187, 1, 0x7FFFFFFFFFFFFFFFLL);
  v161 = v188;
  if (v188)
  {
    v162 = (unint64_t *)&v188->__shared_owners_;
    do
      v163 = __ldaxr(v162);
    while (__stlxr(v163 - 1, v162));
    if (!v163)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  v164 = v257;
  v257 = 0;
  if (v164)
    (*((void (**)(std::__shared_weak_count_vtbl *))v164->~__shared_weak_count + 1))(v164);
  if (v186 < 0)
    operator delete(v185[0]);
  v165 = v260;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v257);
  v183 = v257;
  if (v257)
  {
    v166 = (std::__shared_weak_count *)operator new();
    v167 = v257;
    v166->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v166->__shared_owners_ = 0;
    v166->__shared_weak_owners_ = 0;
    v166[1].__vftable = v167;
  }
  else
  {
    v166 = 0;
  }
  v184 = v166;
  v257 = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))*v165 + 4))(v165, &v183, 1, 0x7FFFFFFFFFFFFFFFLL);
  v168 = v184;
  if (v184)
  {
    v169 = (unint64_t *)&v184->__shared_owners_;
    do
      v170 = __ldaxr(v169);
    while (__stlxr(v170 - 1, v169));
    if (!v170)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
  }
  v171 = v257;
  v257 = 0;
  if (v171)
    (*((void (**)(std::__shared_weak_count_vtbl *))v171->~__shared_weak_count + 1))(v171);
  v172 = *a3;
  v181 = v260;
  if (v260)
  {
    v173 = (std::__shared_weak_count *)operator new();
    v174 = v260;
    v173->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FC78;
    v173->__shared_owners_ = 0;
    v173->__shared_weak_owners_ = 0;
    v173[1].__vftable = (std::__shared_weak_count_vtbl *)v174;
  }
  else
  {
    v173 = 0;
  }
  v182 = v173;
  v260 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v172 + 56))(v172, &v181);
  v175 = v182;
  if (v182)
  {
    v176 = (unint64_t *)&v182->__shared_owners_;
    do
      v177 = __ldaxr(v176);
    while (__stlxr(v177 - 1, v176));
    if (!v177)
    {
      ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
      std::__shared_weak_count::__release_weak(v175);
    }
  }
  v178 = v260;
  v260 = 0;
  if (v178)
    (*((void (**)(void **))*v178 + 1))(v178);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v231, 0);
  result = (uint64_t)v248;
  if (v248)
  {
    v180 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v248);
    return MEMORY[0x1E0C023A0](v180, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0950C60(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 128);
  *(_QWORD *)(v2 - 128) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x210], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x2A0], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::ConstexprCast::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  unsigned __int8 *v11;
  char **v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  unsigned __int8 *v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  char **v23;
  uint64_t v24;
  std::__shared_weak_count_vtbl *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t *v38;
  char *v39;
  char *v40;
  char *v41;
  __int128 v42;
  char *v43;
  char *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  char **v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  void *v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count_vtbl *v71;
  std::__shared_weak_count *v72;
  unint64_t *p_shared_owners;
  unint64_t v74;
  std::__shared_weak_count_vtbl *v75;
  void *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count_vtbl *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t result;
  uint64_t v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  void *v108[2];
  char v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  void *v112;
  std::__shared_weak_count *v113;
  void *v114[2];
  char v115;
  std::__shared_weak_count_vtbl *v116;
  std::__shared_weak_count *v117;
  void *v118[2];
  char v119;
  void *v120[2];
  char v121;
  std::__shared_weak_count_vtbl *v122;
  std::__shared_weak_count *v123;
  __int128 v124;
  __int128 v125;
  void *v126[2];
  uint64_t v127;
  __n128 v128;
  uint64_t v129;
  __n128 v130;
  __n128 v131;
  char **v132;
  _QWORD *v133;
  void *__p;
  void *v135;
  char *v136;
  char *v137;
  char **v138;
  _QWORD v139[3];
  _QWORD *v140;
  _QWORD v141[3];
  _QWORD *v142;
  _BYTE v143[24];
  _BYTE *v144;
  _BYTE v145[24];
  _BYTE *v146;
  uint64_t v147;
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *v149;
  void (__cdecl **v150)(std::__shared_weak_count *__hidden);
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;

  v153 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v133 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  __p = v8;
  *v8 = v7;
  v135 = v8 + 1;
  v136 = (char *)(v8 + 1);
  v151 = MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&__p);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v10;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v149 = (std::__shared_weak_count_vtbl *)&v10->~__shared_weak_count_0;
  v150 = &v10->~__shared_weak_count_0;
  v152 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v151, 2, &v131);
  MIL::IRParameter::Make(&v131, (uint64_t *)&v132);
  v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "source_val", (uint64_t *)&v132);
  v12 = v132;
  v132 = 0;
  if (v12)
    (*((void (**)(char **))*v12 + 1))(v12);
  v13 = (std::__shared_weak_count *)v131.n128_u64[1];
  if (v131.n128_u64[1])
  {
    v14 = (unint64_t *)(v131.n128_u64[1] + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (Scalar)
  {
    v149 = Scalar;
    operator delete(Scalar);
  }
  if (__p)
  {
    v135 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v11 + 5) + 32))(*((_QWORD *)v11 + 5), 1);
  v16 = v133;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v130);
  MIL::IRParameter::Make(&v130, (uint64_t *)&__p);
  v17 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v16, "output_dtype", (uint64_t *)&__p);
  v18 = __p;
  __p = 0;
  if (v18)
    (*(void (**)(void *))(*(_QWORD *)v18 + 8))(v18);
  v19 = (std::__shared_weak_count *)v130.n128_u64[1];
  if (v130.n128_u64[1])
  {
    v20 = (unint64_t *)(v130.n128_u64[1] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v17 + 5) + 32))(*((_QWORD *)v17 + 5), 1);
  v132 = 0;
  v22 = operator new();
  *(_QWORD *)v22 = 0;
  *(_QWORD *)(v22 + 8) = 0;
  *(_QWORD *)(v22 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v132, (void **)v22);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v132, 1uLL);
  v23 = v132;
  v24 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v25 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v25;
  v25->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v24;
  v149 = (std::__shared_weak_count_vtbl *)&v25->~__shared_weak_count_0;
  v150 = &v25->~__shared_weak_count_0;
  v147 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v147, 1, &v128);
  MIL::IRParameter::Make(&v128, &v129);
  v26 = v129;
  v151 = v129;
  if (v129)
  {
    v27 = (_QWORD *)operator new();
    v28 = v129;
    *v27 = &unk_1EA99F888;
    v27[1] = 0;
    v27[2] = 0;
    v27[3] = v28;
  }
  else
  {
    v27 = 0;
  }
  v152 = (uint64_t)v27;
  v129 = 0;
  v29 = v23[2];
  v30 = v23[1];
  if (v30 >= v29)
  {
    v32 = (v30 - *v23) >> 4;
    v33 = v32 + 1;
    if ((unint64_t)(v32 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v34 = v29 - *v23;
    if (v34 >> 3 > v33)
      v33 = v34 >> 3;
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
      v35 = 0xFFFFFFFFFFFFFFFLL;
    else
      v35 = v33;
    v138 = v23 + 2;
    v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v23 + 2), v35);
    v38 = (uint64_t *)&v36[16 * v32];
    *v38 = v26;
    v38[1] = (uint64_t)v27;
    v151 = 0;
    v152 = 0;
    v40 = *v23;
    v39 = v23[1];
    if (v39 == *v23)
    {
      v43 = v23[1];
      v41 = &v36[16 * v32];
    }
    else
    {
      v41 = &v36[16 * v32];
      do
      {
        v42 = *((_OWORD *)v39 - 1);
        v39 -= 16;
        *((_OWORD *)v41 - 1) = v42;
        v41 -= 16;
        *(_QWORD *)v39 = 0;
        *((_QWORD *)v39 + 1) = 0;
      }
      while (v39 != v40);
      v43 = *v23;
      v39 = v23[1];
    }
    v31 = (char *)(v38 + 2);
    *v23 = v41;
    __p = v43;
    v135 = v43;
    v23[1] = (char *)(v38 + 2);
    v136 = v39;
    v44 = v23[2];
    v23[2] = &v36[16 * v37];
    v137 = v44;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v30 = v26;
    *((_QWORD *)v30 + 1) = v27;
    v31 = v30 + 16;
    v151 = 0;
    v152 = 0;
  }
  v23[1] = v31;
  v45 = v129;
  v129 = 0;
  if (v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  v46 = (std::__shared_weak_count *)v128.n128_u64[1];
  if (v128.n128_u64[1])
  {
    v47 = (unint64_t *)(v128.n128_u64[1] + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  if (Scalar)
  {
    v149 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v126 = *(_OWORD *)a2;
  v127 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v49 = (uint64_t)v133;
  *(_QWORD *)&v125 = v133;
  if (v133)
  {
    v50 = (_QWORD *)operator new();
    *v50 = &unk_1EA99F8E8;
    v50[1] = 0;
    v50[2] = 0;
    v50[3] = v49;
  }
  else
  {
    v50 = 0;
  }
  *((_QWORD *)&v125 + 1) = v50;
  v133 = 0;
  *(_QWORD *)&v124 = v132;
  if (v132)
  {
    v51 = (_QWORD *)operator new();
    v52 = v132;
    *v51 = &unk_1EA99F948;
    v51[1] = 0;
    v51[2] = 0;
    v51[3] = v52;
  }
  else
  {
    v51 = 0;
  }
  *((_QWORD *)&v124 + 1) = v51;
  v132 = 0;
  v146 = 0;
  v144 = 0;
  MIL::IROperator::Make((__int128 *)v126, &v125, &v124, (uint64_t)v145, (uint64_t)v143, a3);
  v53 = v144;
  if (v144 == v143)
  {
    v54 = 4;
    v53 = v143;
  }
  else
  {
    if (!v144)
      goto LABEL_56;
    v54 = 5;
  }
  (*(void (**)(void))(*v53 + 8 * v54))();
LABEL_56:
  v55 = v146;
  if (v146 == v145)
  {
    v56 = 4;
    v55 = v145;
    goto LABEL_60;
  }
  if (v146)
  {
    v56 = 5;
LABEL_60:
    (*(void (**)(void))(*v55 + 8 * v56))();
  }
  v57 = (std::__shared_weak_count *)*((_QWORD *)&v124 + 1);
  if (*((_QWORD *)&v124 + 1))
  {
    v58 = (unint64_t *)(*((_QWORD *)&v124 + 1) + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v60 = (std::__shared_weak_count *)*((_QWORD *)&v125 + 1);
  if (*((_QWORD *)&v125 + 1))
  {
    v61 = (unint64_t *)(*((_QWORD *)&v125 + 1) + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  if (SHIBYTE(v127) < 0)
    operator delete(v126[0]);
  v63 = *a3;
  v141[0] = &off_1EA99FBD8;
  v141[1] = MIL::Operators::Common::ios18::CustomValueTypeInference::ValueTypeInferenceConstexprCast;
  v142 = v141;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v63 + 200))(v63, v141);
  v64 = v142;
  if (v142 == v141)
  {
    v65 = 4;
    v64 = v141;
  }
  else
  {
    if (!v142)
      goto LABEL_78;
    v65 = 5;
  }
  (*(void (**)(void))(*v64 + 8 * v65))();
LABEL_78:
  v66 = *a3;
  v139[0] = &off_1EA9A1948;
  v139[1] = a1;
  v140 = v139;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v66 + 144))(v66, v139);
  v67 = v140;
  if (v140 == v139)
  {
    v68 = 4;
    v67 = v139;
  }
  else
  {
    if (!v140)
      goto LABEL_83;
    v68 = 5;
  }
  (*(void (**)(void))(*v67 + 8 * v68))();
LABEL_83:
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v69 = __p;
  std::string::basic_string[abi:ne180100]<0>(v120, "source_val");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v120, 0, (uint64_t *)&Scalar);
  v122 = Scalar;
  if (Scalar)
  {
    v70 = (std::__shared_weak_count *)operator new();
    v71 = Scalar;
    v70->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v70->__shared_owners_ = 0;
    v70->__shared_weak_owners_ = 0;
    v70[1].__vftable = v71;
  }
  else
  {
    v70 = 0;
  }
  v123 = v70;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v118, "SrcT");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v69 + 24))(v69, &v122, v118);
  if (v119 < 0)
    operator delete(v118[0]);
  v72 = v123;
  if (v123)
  {
    p_shared_owners = (unint64_t *)&v123->__shared_owners_;
    do
      v74 = __ldaxr(p_shared_owners);
    while (__stlxr(v74 - 1, p_shared_owners));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = Scalar;
  Scalar = 0;
  if (v75)
    (*((void (**)(std::__shared_weak_count_vtbl *))v75->~__shared_weak_count + 1))(v75);
  if (v121 < 0)
    operator delete(v120[0]);
  v76 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v116 = Scalar;
  if (Scalar)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v78 = Scalar;
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v78;
  }
  else
  {
    v77 = 0;
  }
  v117 = v77;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v114, "DstT");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v76 + 24))(v76, &v116, v114);
  if (v115 < 0)
    operator delete(v114[0]);
  v79 = v117;
  if (v117)
  {
    v80 = (unint64_t *)&v117->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = Scalar;
  Scalar = 0;
  if (v82)
    (*((void (**)(std::__shared_weak_count_vtbl *))v82->~__shared_weak_count + 1))(v82);
  v83 = *a3;
  v112 = __p;
  if (__p)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = (std::__shared_weak_count_vtbl *)__p;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v113 = v84;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v83 + 56))(v83, &v112);
  v86 = v113;
  if (v113)
  {
    v87 = (unint64_t *)&v113->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = __p;
  __p = 0;
  if (v89)
    (*(void (**)(void *))(*(_QWORD *)v89 + 8))(v89);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v151);
  v90 = v151;
  std::string::basic_string[abi:ne180100]<0>(v108, "output_dtype");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v108, 0, &v129);
  v110 = v129;
  if (v129)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = v129;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = (std::__shared_weak_count_vtbl *)v92;
  }
  else
  {
    v91 = 0;
  }
  v111 = v91;
  v129 = 0;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "fp32");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&Scalar, 1);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v90 + 24))(v90, &v110, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  if (SHIBYTE(v150) < 0)
    operator delete(Scalar);
  v93 = v111;
  if (v111)
  {
    v94 = (unint64_t *)&v111->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v129;
  v129 = 0;
  if (v96)
    (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
  if (v109 < 0)
    operator delete(v108[0]);
  v97 = *a3;
  v106 = v151;
  if (v151)
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = v151;
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = (std::__shared_weak_count_vtbl *)v99;
  }
  else
  {
    v98 = 0;
  }
  v107 = v98;
  v151 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v97 + 56))(v97, &v106);
  v100 = v107;
  if (v107)
  {
    v101 = (unint64_t *)&v107->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = v151;
  v151 = 0;
  if (v103)
    (*(void (**)(uint64_t))(*(_QWORD *)v103 + 8))(v103);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v132, 0);
  result = (uint64_t)v133;
  if (v133)
  {
    v105 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v133);
    return MEMORY[0x1E0C023A0](v105, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0951E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41,uint64_t a42,char a43,uint64_t a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,char a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  uint64_t *v63;
  uint64_t v64;
  uint64_t v66;
  uint64_t v67;

  v66 = *(_QWORD *)(v64 - 88);
  *(_QWORD *)(v64 - 88) = 0;
  if (v66)
    (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
  v67 = *v63;
  *v63 = 0;
  if (v67)
    (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a60, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a61, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::ConstexprLutToDense::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count_vtbl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unsigned __int8 *v45;
  void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  unsigned __int8 *v51;
  void **v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  char **v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t *v80;
  char *v81;
  char *v82;
  char *v83;
  __int128 v84;
  void **v85;
  char *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  char **v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  void **v111;
  std::__shared_weak_count *v112;
  std::__shared_weak_count_vtbl *v113;
  std::__shared_weak_count *v114;
  unint64_t *p_shared_owners;
  unint64_t v116;
  std::__shared_weak_count_vtbl *v117;
  void **v118;
  std::__shared_weak_count *v119;
  std::__shared_weak_count_vtbl *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count_vtbl *v124;
  void **v125;
  std::__shared_weak_count *v126;
  std::__shared_weak_count_vtbl *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count_vtbl *v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  void **v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  void **v138;
  void **v139;
  std::__shared_weak_count *v140;
  std::__shared_weak_count_vtbl *v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count_vtbl *v145;
  void **v146;
  std::__shared_weak_count *v147;
  std::__shared_weak_count_vtbl *v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count_vtbl *v152;
  void **v153;
  std::__shared_weak_count *v154;
  std::__shared_weak_count_vtbl *v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count_vtbl *v159;
  uint64_t v160;
  std::__shared_weak_count *v161;
  void **v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  void **v166;
  void **v167;
  std::__shared_weak_count *v168;
  std::__shared_weak_count_vtbl *v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count_vtbl *v173;
  void **v174;
  std::__shared_weak_count *v175;
  std::__shared_weak_count_vtbl *v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count_vtbl *v180;
  uint64_t v181;
  std::__shared_weak_count *v182;
  void **v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  void **v187;
  uint64_t result;
  uint64_t v189;
  void **v190;
  std::__shared_weak_count *v191;
  void *v192[2];
  char v193;
  void *v194[2];
  char v195;
  std::__shared_weak_count_vtbl *v196;
  std::__shared_weak_count *v197;
  void *v198[2];
  char v199;
  void *v200[2];
  char v201;
  std::__shared_weak_count_vtbl *v202;
  std::__shared_weak_count *v203;
  void **v204;
  std::__shared_weak_count *v205;
  std::__shared_weak_count_vtbl *v206;
  std::__shared_weak_count *v207;
  void *v208[2];
  char v209;
  std::__shared_weak_count_vtbl *v210;
  std::__shared_weak_count *v211;
  void *v212[2];
  char v213;
  std::__shared_weak_count_vtbl *v214;
  std::__shared_weak_count *v215;
  void **v216;
  std::__shared_weak_count *v217;
  void *v218[2];
  char v219;
  std::__shared_weak_count_vtbl *v220;
  std::__shared_weak_count *v221;
  void *v222[2];
  char v223;
  void *v224[2];
  char v225;
  std::__shared_weak_count_vtbl *v226;
  std::__shared_weak_count *v227;
  void *v228[2];
  char v229;
  void *v230[2];
  char v231;
  std::__shared_weak_count_vtbl *v232;
  std::__shared_weak_count *v233;
  __int128 v234;
  __int128 v235;
  void *v236[2];
  uint64_t v237;
  __n128 v238;
  uint64_t v239;
  uint64_t v240;
  _QWORD *v241;
  char **v242;
  __n128 v243;
  __n128 v244;
  void *__p;
  void *v246;
  _QWORD *v247;
  void *v248;
  void *v249;
  _QWORD *v250;
  void *v251;
  void *v252;
  _QWORD *v253;
  void *v254;
  void *v255;
  _QWORD *v256;
  void *v257;
  void *v258;
  _QWORD *v259;
  __n128 v260;
  _QWORD *v261;
  _QWORD v262[3];
  _QWORD *v263;
  _QWORD v264[3];
  _QWORD *v265;
  _BYTE v266[24];
  _BYTE *v267;
  _QWORD v268[3];
  _QWORD *v269;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_get_deleter;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  void **v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;

  v281 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v261 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  p_get_deleter = (uint64_t)&v8->~__shared_weak_count_0;
  v272 = (uint64_t)&v8->~__shared_weak_count_0;
  v275 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v257 = v10;
  *v10 = v9;
  v259 = v10 + 1;
  v258 = v10 + 1;
  v276 = MIL::IRTensorValueType::MakeWithShape(a1, 23, (uint64_t)&v257);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v254 = v12;
  *v12 = v11;
  v256 = v12 + 1;
  v255 = v12 + 1;
  v277 = MIL::IRTensorValueType::MakeWithShape(a1, 20, (uint64_t)&v254);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  v251 = v14;
  *v14 = v13;
  v253 = v14 + 1;
  v252 = v14 + 1;
  v278 = MIL::IRTensorValueType::MakeWithShape(a1, 22, (uint64_t)&v251);
  v15 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v16 = operator new(8uLL);
  v248 = v16;
  *v16 = v15;
  v250 = v16 + 1;
  v249 = v16 + 1;
  v279 = MIL::IRTensorValueType::MakeWithShape(a1, 19, (uint64_t)&v248);
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v247 = v18 + 1;
  v246 = v18 + 1;
  v280 = MIL::IRTensorValueType::MakeWithShape(a1, 21, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v275, 6, &v260);
  MIL::IRParameter::Make(&v260, &v240);
  v19 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "indices", &v240);
  v20 = v240;
  v240 = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = (std::__shared_weak_count *)v260.n128_u64[1];
  if (v260.n128_u64[1])
  {
    v22 = (unint64_t *)(v260.n128_u64[1] + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (__p)
  {
    v246 = __p;
    operator delete(__p);
  }
  if (v248)
  {
    v249 = v248;
    operator delete(v248);
  }
  if (v251)
  {
    v252 = v251;
    operator delete(v251);
  }
  if (v254)
  {
    v255 = v254;
    operator delete(v254);
  }
  if (v257)
  {
    v258 = v257;
    operator delete(v257);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v19 + 5) + 32))(*((_QWORD *)v19 + 5), 1);
  v24 = v261;
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = MIL::IRUnknownDimension::Make(a1, 0);
  v27 = MIL::IRUnknownDimension::Make(a1, 0);
  v28 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (uint64_t)&v28->__get_deleter;
  v272 = (uint64_t)&v28->__get_deleter;
  v28->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v25;
  v28->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v26;
  v28->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v27;
  Scalar = v28;
  v275 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&Scalar);
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = MIL::IRUnknownDimension::Make(a1, 0);
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = operator new(0x18uLL);
  v259 = v32 + 3;
  *v32 = v29;
  v32[1] = v30;
  v32[2] = v31;
  v257 = v32;
  v258 = v32 + 3;
  v276 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v257);
  v33 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = MIL::IRUnknownDimension::Make(a1, 0);
  v36 = operator new(0x18uLL);
  v256 = v36 + 3;
  *v36 = v33;
  v36[1] = v34;
  v36[2] = v35;
  v254 = v36;
  v255 = v36 + 3;
  v277 = MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v254);
  v37 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v38 = MIL::IRUnknownDimension::Make(a1, 0);
  v39 = MIL::IRUnknownDimension::Make(a1, 0);
  v40 = operator new(0x18uLL);
  v253 = v40 + 3;
  *v40 = v37;
  v40[1] = v38;
  v40[2] = v39;
  v251 = v40;
  v252 = v40 + 3;
  v278 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v251);
  v41 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = MIL::IRUnknownDimension::Make(a1, 0);
  v44 = operator new(0x18uLL);
  v250 = v44 + 3;
  *v44 = v41;
  v44[1] = v42;
  v44[2] = v43;
  v248 = v44;
  v249 = v44 + 3;
  v279 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v248);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v275, 5, &v244);
  MIL::IRParameter::Make(&v244, (uint64_t *)&__p);
  v45 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[4],std::unique_ptr<MIL::IRParameter>>(v24, "lut", (uint64_t *)&__p);
  v46 = __p;
  __p = 0;
  if (v46)
    (*(void (**)(void *))(*(_QWORD *)v46 + 8))(v46);
  v47 = (std::__shared_weak_count *)v244.n128_u64[1];
  if (v244.n128_u64[1])
  {
    v48 = (unint64_t *)(v244.n128_u64[1] + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  if (v248)
  {
    v249 = v248;
    operator delete(v248);
  }
  if (v251)
  {
    v252 = v251;
    operator delete(v251);
  }
  if (v254)
  {
    v255 = v254;
    operator delete(v254);
  }
  if (v257)
  {
    v258 = v257;
    operator delete(v257);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v45 + 5) + 32))(*((_QWORD *)v45 + 5), 1);
  v50 = v261;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v243);
  MIL::IRParameter::Make(&v243, (uint64_t *)&v275);
  v51 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v50, "vector_axis", (uint64_t *)&v275);
  v52 = v275;
  v275 = 0;
  if (v52)
    (*((void (**)(void **))*v52 + 1))(v52);
  v53 = (std::__shared_weak_count *)v243.n128_u64[1];
  if (v243.n128_u64[1])
  {
    v54 = (unint64_t *)(v243.n128_u64[1] + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v51 + 5) + 32))(*((_QWORD *)v51 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v51 + 5) + 48))(*((_QWORD *)v51 + 5), 1);
  v242 = 0;
  v56 = operator new();
  *(_QWORD *)v56 = 0;
  *(_QWORD *)(v56 + 8) = 0;
  *(_QWORD *)(v56 + 16) = 0;
  v275 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v242, (void **)v56);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v275, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v242, 1uLL);
  v57 = v242;
  v58 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v59 = operator new(8uLL);
  v257 = v59;
  *v59 = v58;
  v259 = v59 + 1;
  v258 = v59 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v257);
  v60 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v61 = operator new(8uLL);
  v254 = v61;
  *v61 = v60;
  v256 = v61 + 1;
  v255 = v61 + 1;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v254);
  v62 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v63 = operator new(8uLL);
  v251 = v63;
  *v63 = v62;
  v253 = v63 + 1;
  v252 = v63 + 1;
  v272 = MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v251);
  v64 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v65 = operator new(8uLL);
  v248 = v65;
  *v65 = v64;
  v250 = v65 + 1;
  v249 = v65 + 1;
  v273 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v248);
  v66 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v67 = operator new(8uLL);
  __p = v67;
  *v67 = v66;
  v247 = v67 + 1;
  v246 = v67 + 1;
  v274 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 5, &v238);
  MIL::IRParameter::Make(&v238, &v239);
  v68 = v239;
  v240 = v239;
  if (v239)
  {
    v69 = (_QWORD *)operator new();
    v70 = v239;
    *v69 = &unk_1EA99F888;
    v69[1] = 0;
    v69[2] = 0;
    v69[3] = v70;
  }
  else
  {
    v69 = 0;
  }
  v241 = v69;
  v239 = 0;
  v71 = v57[2];
  v72 = v57[1];
  if (v72 >= v71)
  {
    v74 = (v72 - *v57) >> 4;
    v75 = v74 + 1;
    if ((unint64_t)(v74 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v76 = v71 - *v57;
    if (v76 >> 3 > v75)
      v75 = v76 >> 3;
    if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF0)
      v77 = 0xFFFFFFFFFFFFFFFLL;
    else
      v77 = v75;
    v279 = (uint64_t)(v57 + 2);
    v78 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v57 + 2), v77);
    v80 = (uint64_t *)&v78[16 * v74];
    *v80 = v68;
    v80[1] = (uint64_t)v69;
    v241 = 0;
    v240 = 0;
    v82 = *v57;
    v81 = v57[1];
    if (v81 == *v57)
    {
      v85 = (void **)v57[1];
      v83 = &v78[16 * v74];
    }
    else
    {
      v83 = &v78[16 * v74];
      do
      {
        v84 = *((_OWORD *)v81 - 1);
        v81 -= 16;
        *((_OWORD *)v83 - 1) = v84;
        v83 -= 16;
        *(_QWORD *)v81 = 0;
        *((_QWORD *)v81 + 1) = 0;
      }
      while (v81 != v82);
      v85 = (void **)*v57;
      v81 = v57[1];
    }
    v73 = (char *)(v80 + 2);
    *v57 = v83;
    v275 = v85;
    v276 = (uint64_t)v85;
    v57[1] = (char *)(v80 + 2);
    v277 = (uint64_t)v81;
    v86 = v57[2];
    v57[2] = &v78[16 * v79];
    v278 = (uint64_t)v86;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v275);
  }
  else
  {
    *(_QWORD *)v72 = v68;
    *((_QWORD *)v72 + 1) = v69;
    v73 = v72 + 16;
    v241 = 0;
    v240 = 0;
  }
  v57[1] = v73;
  v87 = v239;
  v239 = 0;
  if (v87)
    (*(void (**)(uint64_t))(*(_QWORD *)v87 + 8))(v87);
  v88 = (std::__shared_weak_count *)v238.n128_u64[1];
  if (v238.n128_u64[1])
  {
    v89 = (unint64_t *)(v238.n128_u64[1] + 8);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  if (__p)
  {
    v246 = __p;
    operator delete(__p);
  }
  if (v248)
  {
    v249 = v248;
    operator delete(v248);
  }
  if (v251)
  {
    v252 = v251;
    operator delete(v251);
  }
  if (v254)
  {
    v255 = v254;
    operator delete(v254);
  }
  if (v257)
  {
    v258 = v257;
    operator delete(v257);
  }
  *(_OWORD *)v236 = *(_OWORD *)a2;
  v237 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v91 = (uint64_t)v261;
  *(_QWORD *)&v235 = v261;
  if (v261)
  {
    v92 = (_QWORD *)operator new();
    *v92 = &unk_1EA99F8E8;
    v92[1] = 0;
    v92[2] = 0;
    v92[3] = v91;
  }
  else
  {
    v92 = 0;
  }
  *((_QWORD *)&v235 + 1) = v92;
  v261 = 0;
  *(_QWORD *)&v234 = v242;
  if (v242)
  {
    v93 = (_QWORD *)operator new();
    v94 = v242;
    *v93 = &unk_1EA99F948;
    v93[1] = 0;
    v93[2] = 0;
    v93[3] = v94;
  }
  else
  {
    v93 = 0;
  }
  *((_QWORD *)&v234 + 1) = v93;
  v242 = 0;
  v268[0] = &unk_1EA99FAC8;
  v268[1] = MIL::Operators::Common::ios18::CustomValidators::ValidateConstexprLutToDense;
  v269 = v268;
  v267 = 0;
  MIL::IROperator::Make((__int128 *)v236, &v235, &v234, (uint64_t)v268, (uint64_t)v266, a3);
  v95 = v267;
  if (v267 == v266)
  {
    v96 = 4;
    v95 = v266;
  }
  else
  {
    if (!v267)
      goto LABEL_89;
    v96 = 5;
  }
  (*(void (**)(void))(*v95 + 8 * v96))();
LABEL_89:
  v97 = v269;
  if (v269 == v268)
  {
    v98 = 4;
    v97 = v268;
    goto LABEL_93;
  }
  if (v269)
  {
    v98 = 5;
LABEL_93:
    (*(void (**)(void))(*v97 + 8 * v98))();
  }
  v99 = (std::__shared_weak_count *)*((_QWORD *)&v234 + 1);
  if (*((_QWORD *)&v234 + 1))
  {
    v100 = (unint64_t *)(*((_QWORD *)&v234 + 1) + 8);
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v102 = (std::__shared_weak_count *)*((_QWORD *)&v235 + 1);
  if (*((_QWORD *)&v235 + 1))
  {
    v103 = (unint64_t *)(*((_QWORD *)&v235 + 1) + 8);
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  if (SHIBYTE(v237) < 0)
    operator delete(v236[0]);
  v105 = *a3;
  v264[0] = &off_1EA99FBD8;
  v264[1] = MIL::Operators::Common::ios18::CustomValueTypeInference::ValueTypeInferenceConstexprLutToDense;
  v265 = v264;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v105 + 200))(v105, v264);
  v106 = v265;
  if (v265 == v264)
  {
    v107 = 4;
    v106 = v264;
  }
  else
  {
    if (!v265)
      goto LABEL_111;
    v107 = 5;
  }
  (*(void (**)(void))(*v106 + 8 * v107))();
LABEL_111:
  v108 = *a3;
  v262[0] = &off_1EA9A19C8;
  v262[1] = a1;
  v263 = v262;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v108 + 144))(v108, v262);
  v109 = v263;
  if (v263 == v262)
  {
    v110 = 4;
    v109 = v262;
  }
  else
  {
    if (!v263)
      goto LABEL_116;
    v110 = 5;
  }
  (*(void (**)(void))(*v109 + 8 * v110))();
LABEL_116:
  MIL::Validation::TensorDTypeConstraints::Make(&v275);
  v111 = v275;
  std::string::basic_string[abi:ne180100]<0>(v230, "indices");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v230, 0, (uint64_t *)&Scalar);
  v232 = Scalar;
  if (Scalar)
  {
    v112 = (std::__shared_weak_count *)operator new();
    v113 = Scalar;
    v112->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v112->__shared_owners_ = 0;
    v112->__shared_weak_owners_ = 0;
    v112[1].__vftable = v113;
  }
  else
  {
    v112 = 0;
  }
  v233 = v112;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v228, "IndicesT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v111 + 3))(v111, &v232, v228);
  if (v229 < 0)
    operator delete(v228[0]);
  v114 = v233;
  if (v233)
  {
    p_shared_owners = (unint64_t *)&v233->__shared_owners_;
    do
      v116 = __ldaxr(p_shared_owners);
    while (__stlxr(v116 - 1, p_shared_owners));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = Scalar;
  Scalar = 0;
  if (v117)
    (*((void (**)(std::__shared_weak_count_vtbl *))v117->~__shared_weak_count + 1))(v117);
  if (v231 < 0)
    operator delete(v230[0]);
  v118 = v275;
  std::string::basic_string[abi:ne180100]<0>(v224, "lut");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v224, 0, (uint64_t *)&Scalar);
  v226 = Scalar;
  if (Scalar)
  {
    v119 = (std::__shared_weak_count *)operator new();
    v120 = Scalar;
    v119->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v119->__shared_owners_ = 0;
    v119->__shared_weak_owners_ = 0;
    v119[1].__vftable = v120;
  }
  else
  {
    v119 = 0;
  }
  v227 = v119;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v222, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v118 + 3))(v118, &v226, v222);
  if (v223 < 0)
    operator delete(v222[0]);
  v121 = v227;
  if (v227)
  {
    v122 = (unint64_t *)&v227->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = Scalar;
  Scalar = 0;
  if (v124)
    (*((void (**)(std::__shared_weak_count_vtbl *))v124->~__shared_weak_count + 1))(v124);
  if (v225 < 0)
    operator delete(v224[0]);
  v125 = v275;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v220 = Scalar;
  if (Scalar)
  {
    v126 = (std::__shared_weak_count *)operator new();
    v127 = Scalar;
    v126->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v126->__shared_owners_ = 0;
    v126->__shared_weak_owners_ = 0;
    v126[1].__vftable = v127;
  }
  else
  {
    v126 = 0;
  }
  v221 = v126;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v218, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v125 + 3))(v125, &v220, v218);
  if (v219 < 0)
    operator delete(v218[0]);
  v128 = v221;
  if (v221)
  {
    v129 = (unint64_t *)&v221->__shared_owners_;
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v131 = Scalar;
  Scalar = 0;
  if (v131)
    (*((void (**)(std::__shared_weak_count_vtbl *))v131->~__shared_weak_count + 1))(v131);
  v132 = *a3;
  v216 = v275;
  if (v275)
  {
    v133 = (std::__shared_weak_count *)operator new();
    v134 = v275;
    v133->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v133->__shared_owners_ = 0;
    v133->__shared_weak_owners_ = 0;
    v133[1].__vftable = (std::__shared_weak_count_vtbl *)v134;
  }
  else
  {
    v133 = 0;
  }
  v217 = v133;
  v275 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v132 + 56))(v132, &v216);
  v135 = v217;
  if (v217)
  {
    v136 = (unint64_t *)&v217->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = v275;
  v275 = 0;
  if (v138)
    (*((void (**)(void **))*v138 + 1))(v138);
  MIL::Validation::TensorRankValueConstraints::Make(&v275);
  v139 = v275;
  std::string::basic_string[abi:ne180100]<0>(v212, "indices");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v212, 0, (uint64_t *)&Scalar);
  v214 = Scalar;
  if (Scalar)
  {
    v140 = (std::__shared_weak_count *)operator new();
    v141 = Scalar;
    v140->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v140->__shared_owners_ = 0;
    v140->__shared_weak_owners_ = 0;
    v140[1].__vftable = v141;
  }
  else
  {
    v140 = 0;
  }
  v215 = v140;
  Scalar = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))*v139 + 4))(v139, &v214, 1, 0x7FFFFFFFFFFFFFFFLL);
  v142 = v215;
  if (v215)
  {
    v143 = (unint64_t *)&v215->__shared_owners_;
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  v145 = Scalar;
  Scalar = 0;
  if (v145)
    (*((void (**)(std::__shared_weak_count_vtbl *))v145->~__shared_weak_count + 1))(v145);
  if (v213 < 0)
    operator delete(v212[0]);
  v146 = v275;
  std::string::basic_string[abi:ne180100]<0>(v208, "lut");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v208, 0, (uint64_t *)&Scalar);
  v210 = Scalar;
  if (Scalar)
  {
    v147 = (std::__shared_weak_count *)operator new();
    v148 = Scalar;
    v147->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v147->__shared_owners_ = 0;
    v147->__shared_weak_owners_ = 0;
    v147[1].__vftable = v148;
  }
  else
  {
    v147 = 0;
  }
  v211 = v147;
  Scalar = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))*v146 + 4))(v146, &v210, 3, 0x7FFFFFFFFFFFFFFFLL);
  v149 = v211;
  if (v211)
  {
    v150 = (unint64_t *)&v211->__shared_owners_;
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  v152 = Scalar;
  Scalar = 0;
  if (v152)
    (*((void (**)(std::__shared_weak_count_vtbl *))v152->~__shared_weak_count + 1))(v152);
  if (v209 < 0)
    operator delete(v208[0]);
  v153 = v275;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v206 = Scalar;
  if (Scalar)
  {
    v154 = (std::__shared_weak_count *)operator new();
    v155 = Scalar;
    v154->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v154->__shared_owners_ = 0;
    v154->__shared_weak_owners_ = 0;
    v154[1].__vftable = v155;
  }
  else
  {
    v154 = 0;
  }
  v207 = v154;
  Scalar = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))*v153 + 4))(v153, &v206, 1, 0x7FFFFFFFFFFFFFFFLL);
  v156 = v207;
  if (v207)
  {
    v157 = (unint64_t *)&v207->__shared_owners_;
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  v159 = Scalar;
  Scalar = 0;
  if (v159)
    (*((void (**)(std::__shared_weak_count_vtbl *))v159->~__shared_weak_count + 1))(v159);
  v160 = *a3;
  v204 = v275;
  if (v275)
  {
    v161 = (std::__shared_weak_count *)operator new();
    v162 = v275;
    v161->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FC78;
    v161->__shared_owners_ = 0;
    v161->__shared_weak_owners_ = 0;
    v161[1].__vftable = (std::__shared_weak_count_vtbl *)v162;
  }
  else
  {
    v161 = 0;
  }
  v205 = v161;
  v275 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v160 + 56))(v160, &v204);
  v163 = v205;
  if (v205)
  {
    v164 = (unint64_t *)&v205->__shared_owners_;
    do
      v165 = __ldaxr(v164);
    while (__stlxr(v165 - 1, v164));
    if (!v165)
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v163);
    }
  }
  v166 = v275;
  v275 = 0;
  if (v166)
    (*((void (**)(void **))*v166 + 1))(v166);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v275);
  v167 = v275;
  std::string::basic_string[abi:ne180100]<0>(v200, "lut");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v200, 0, (uint64_t *)&Scalar);
  v202 = Scalar;
  if (Scalar)
  {
    v168 = (std::__shared_weak_count *)operator new();
    v169 = Scalar;
    v168->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v168->__shared_owners_ = 0;
    v168->__shared_weak_owners_ = 0;
    v168[1].__vftable = v169;
  }
  else
  {
    v168 = 0;
  }
  v203 = v168;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v198, "NUM_PALETTES");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v167 + 3))(v167, &v202, -2, v198);
  if (v199 < 0)
    operator delete(v198[0]);
  v170 = v203;
  if (v203)
  {
    v171 = (unint64_t *)&v203->__shared_owners_;
    do
      v172 = __ldaxr(v171);
    while (__stlxr(v172 - 1, v171));
    if (!v172)
    {
      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
      std::__shared_weak_count::__release_weak(v170);
    }
  }
  v173 = Scalar;
  Scalar = 0;
  if (v173)
    (*((void (**)(std::__shared_weak_count_vtbl *))v173->~__shared_weak_count + 1))(v173);
  if (v201 < 0)
    operator delete(v200[0]);
  v174 = v275;
  std::string::basic_string[abi:ne180100]<0>(v194, "lut");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v194, 0, (uint64_t *)&Scalar);
  v196 = Scalar;
  if (Scalar)
  {
    v175 = (std::__shared_weak_count *)operator new();
    v176 = Scalar;
    v175->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v175->__shared_owners_ = 0;
    v175->__shared_weak_owners_ = 0;
    v175[1].__vftable = v176;
  }
  else
  {
    v175 = 0;
  }
  v197 = v175;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v192, "VECTOR_SIZE");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v174 + 3))(v174, &v196, -1, v192);
  if (v193 < 0)
    operator delete(v192[0]);
  v177 = v197;
  if (v197)
  {
    v178 = (unint64_t *)&v197->__shared_owners_;
    do
      v179 = __ldaxr(v178);
    while (__stlxr(v179 - 1, v178));
    if (!v179)
    {
      ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
      std::__shared_weak_count::__release_weak(v177);
    }
  }
  v180 = Scalar;
  Scalar = 0;
  if (v180)
    (*((void (**)(std::__shared_weak_count_vtbl *))v180->~__shared_weak_count + 1))(v180);
  if (v195 < 0)
    operator delete(v194[0]);
  v181 = *a3;
  v190 = v275;
  if (v275)
  {
    v182 = (std::__shared_weak_count *)operator new();
    v183 = v275;
    v182->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v182->__shared_owners_ = 0;
    v182->__shared_weak_owners_ = 0;
    v182[1].__vftable = (std::__shared_weak_count_vtbl *)v183;
  }
  else
  {
    v182 = 0;
  }
  v191 = v182;
  v275 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v181 + 56))(v181, &v190);
  v184 = v191;
  if (v191)
  {
    v185 = (unint64_t *)&v191->__shared_owners_;
    do
      v186 = __ldaxr(v185);
    while (__stlxr(v186 - 1, v185));
    if (!v186)
    {
      ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
      std::__shared_weak_count::__release_weak(v184);
    }
  }
  v187 = v275;
  v275 = 0;
  if (v187)
    (*((void (**)(void **))*v187 + 1))(v187);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v242, 0);
  result = (uint64_t)v261;
  if (v261)
  {
    v189 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v261);
    return MEMORY[0x1E0C023A0](v189, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0953868(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 120);
  *(_QWORD *)(v2 - 120) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x228], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x2D8], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::ConstexprLutToSparse::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  void **v8;
  unsigned __int8 *v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count_vtbl *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  unsigned __int8 *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count_vtbl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unsigned __int8 *v53;
  void *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _QWORD *v58;
  unsigned __int8 *v59;
  void **v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  char **v65;
  uint64_t v66;
  std::__shared_weak_count_vtbl *v67;
  void *v68;
  _QWORD *v69;
  void *v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  __int128 v84;
  void **v85;
  char *v86;
  void *v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  char **v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t *v114;
  char *v115;
  char *v116;
  char *v117;
  __int128 v118;
  void **v119;
  char *v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  _QWORD *v127;
  char **v128;
  _QWORD *v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  void **v145;
  std::__shared_weak_count *v146;
  std::__shared_weak_count_vtbl *v147;
  std::__shared_weak_count *v148;
  unint64_t *p_shared_owners;
  unint64_t v150;
  std::__shared_weak_count_vtbl *v151;
  void **v152;
  std::__shared_weak_count *v153;
  std::__shared_weak_count_vtbl *v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count_vtbl *v158;
  void **v159;
  std::__shared_weak_count *v160;
  std::__shared_weak_count_vtbl *v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count_vtbl *v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  void **v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  void **v172;
  void **v173;
  std::__shared_weak_count *v174;
  std::__shared_weak_count_vtbl *v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count_vtbl *v179;
  void **v180;
  std::__shared_weak_count *v181;
  std::__shared_weak_count_vtbl *v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count_vtbl *v186;
  void **v187;
  std::__shared_weak_count *v188;
  std::__shared_weak_count_vtbl *v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  std::__shared_weak_count_vtbl *v193;
  uint64_t v194;
  std::__shared_weak_count *v195;
  void **v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  void **v200;
  void **v201;
  std::__shared_weak_count *v202;
  std::__shared_weak_count_vtbl *v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  std::__shared_weak_count_vtbl *v207;
  void **v208;
  std::__shared_weak_count *v209;
  std::__shared_weak_count_vtbl *v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  std::__shared_weak_count_vtbl *v214;
  void **v215;
  std::__shared_weak_count *v216;
  std::__shared_weak_count_vtbl *v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  std::__shared_weak_count_vtbl *v221;
  void **v222;
  std::__shared_weak_count *v223;
  std::__shared_weak_count_vtbl *v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  std::__shared_weak_count_vtbl *v228;
  uint64_t v229;
  std::__shared_weak_count *v230;
  void **v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  void **v235;
  uint64_t result;
  uint64_t v237;
  void **v238;
  std::__shared_weak_count *v239;
  void *v240[2];
  char v241;
  std::__shared_weak_count_vtbl *v242;
  std::__shared_weak_count *v243;
  void *v244[2];
  char v245;
  void *v246[2];
  char v247;
  std::__shared_weak_count_vtbl *v248;
  std::__shared_weak_count *v249;
  void *v250[2];
  char v251;
  void *v252[2];
  char v253;
  std::__shared_weak_count_vtbl *v254;
  std::__shared_weak_count *v255;
  void *v256[2];
  char v257;
  void *v258[2];
  char v259;
  std::__shared_weak_count_vtbl *v260;
  std::__shared_weak_count *v261;
  void **v262;
  std::__shared_weak_count *v263;
  std::__shared_weak_count_vtbl *v264;
  std::__shared_weak_count *v265;
  void *v266[2];
  char v267;
  std::__shared_weak_count_vtbl *v268;
  std::__shared_weak_count *v269;
  void *v270[2];
  char v271;
  std::__shared_weak_count_vtbl *v272;
  std::__shared_weak_count *v273;
  void **v274;
  std::__shared_weak_count *v275;
  void *v276[2];
  char v277;
  std::__shared_weak_count_vtbl *v278;
  std::__shared_weak_count *v279;
  void *v280[2];
  char v281;
  void *v282[2];
  char v283;
  std::__shared_weak_count_vtbl *v284;
  std::__shared_weak_count *v285;
  void *v286[2];
  char v287;
  void *v288[2];
  char v289;
  std::__shared_weak_count_vtbl *v290;
  std::__shared_weak_count *v291;
  __int128 v292;
  __int128 v293;
  void *v294[2];
  uint64_t v295;
  __n128 v296;
  uint64_t v297;
  uint64_t v298;
  _QWORD *v299;
  __n128 v300;
  char **v301;
  __n128 v302;
  __n128 v303;
  void *__p;
  void *v305;
  _QWORD *v306;
  void *v307;
  void *v308;
  _QWORD *v309;
  void *v310;
  void *v311;
  _QWORD *v312;
  __n128 v313;
  __n128 v314;
  _QWORD *v315;
  _QWORD v316[3];
  _QWORD *v317;
  _QWORD v318[3];
  _QWORD *v319;
  _BYTE v320[24];
  _BYTE *v321;
  _QWORD v322[3];
  _QWORD *v323;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_get_deleter;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  void *v329;
  void *v330;
  _QWORD *v331;
  void *v332;
  void *v333;
  _QWORD *v334;
  void **v335;
  void **v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;

  v341 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v315 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (void **)operator new(8uLL);
  v335 = v8;
  *v8 = (void *)v7;
  v336 = v8 + 1;
  v337 = (uint64_t)(v8 + 1);
  v332 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 21, (uint64_t)&v335);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v332, 1, &v314);
  MIL::IRParameter::Make(&v314, (uint64_t *)&Scalar);
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "indices_mask", (uint64_t *)&Scalar);
  v10 = Scalar;
  Scalar = 0;
  if (v10)
    (*((void (**)(std::__shared_weak_count_vtbl *))v10->~__shared_weak_count + 1))(v10);
  v11 = (std::__shared_weak_count *)v314.n128_u64[1];
  if (v314.n128_u64[1])
  {
    v12 = (unint64_t *)(v314.n128_u64[1] + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v335)
  {
    v336 = v335;
    operator delete(v335);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v9 + 5) + 32))(*((_QWORD *)v9 + 5), 1);
  v14 = v315;
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v16;
  v16->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v15;
  p_get_deleter = (uint64_t)&v16->~__shared_weak_count_0;
  v326 = (uint64_t)&v16->~__shared_weak_count_0;
  v335 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&Scalar);
  v17 = MIL::IRUnknownDimension::Make(a1, 0);
  v18 = operator new(8uLL);
  v332 = v18;
  *v18 = v17;
  v333 = v18 + 1;
  v334 = v18 + 1;
  v336 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 23, (uint64_t)&v332);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = operator new(8uLL);
  v310 = v20;
  *v20 = v19;
  v312 = v20 + 1;
  v311 = v20 + 1;
  v337 = MIL::IRTensorValueType::MakeWithShape(a1, 20, (uint64_t)&v310);
  v21 = MIL::IRUnknownDimension::Make(a1, 0);
  v22 = operator new(8uLL);
  v329 = v22;
  *v22 = v21;
  v330 = v22 + 1;
  v331 = v22 + 1;
  v338 = MIL::IRTensorValueType::MakeWithShape(a1, 22, (uint64_t)&v329);
  v23 = MIL::IRUnknownDimension::Make(a1, 0);
  v24 = operator new(8uLL);
  v307 = v24;
  *v24 = v23;
  v309 = v24 + 1;
  v308 = v24 + 1;
  v339 = MIL::IRTensorValueType::MakeWithShape(a1, 19, (uint64_t)&v307);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = operator new(8uLL);
  __p = v26;
  *v26 = v25;
  v306 = v26 + 1;
  v305 = v26 + 1;
  v340 = MIL::IRTensorValueType::MakeWithShape(a1, 21, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v335, 6, &v313);
  MIL::IRParameter::Make(&v313, &v298);
  v27 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v14, "indices_nonzero_data", &v298);
  v28 = v298;
  v298 = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  v29 = (std::__shared_weak_count *)v313.n128_u64[1];
  if (v313.n128_u64[1])
  {
    v30 = (unint64_t *)(v313.n128_u64[1] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (__p)
  {
    v305 = __p;
    operator delete(__p);
  }
  if (v307)
  {
    v308 = v307;
    operator delete(v307);
  }
  if (v329)
  {
    v330 = v329;
    operator delete(v329);
  }
  if (v310)
  {
    v311 = v310;
    operator delete(v310);
  }
  if (v332)
  {
    v333 = v332;
    operator delete(v332);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v27 + 5) + 32))(*((_QWORD *)v27 + 5), 1);
  v32 = v315;
  v33 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = MIL::IRUnknownDimension::Make(a1, 0);
  v36 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (uint64_t)&v36->__get_deleter;
  v326 = (uint64_t)&v36->__get_deleter;
  v36->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v33;
  v36->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v34;
  v36->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v35;
  Scalar = v36;
  v335 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&Scalar);
  v37 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v38 = MIL::IRUnknownDimension::Make(a1, 0);
  v39 = MIL::IRUnknownDimension::Make(a1, 0);
  v40 = operator new(0x18uLL);
  v333 = v40 + 3;
  v334 = v40 + 3;
  *v40 = v37;
  v40[1] = v38;
  v40[2] = v39;
  v332 = v40;
  v336 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v332);
  v41 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = MIL::IRUnknownDimension::Make(a1, 0);
  v44 = operator new(0x18uLL);
  v312 = v44 + 3;
  *v44 = v41;
  v44[1] = v42;
  v44[2] = v43;
  v310 = v44;
  v311 = v44 + 3;
  v337 = MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v310);
  v45 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v46 = MIL::IRUnknownDimension::Make(a1, 0);
  v47 = MIL::IRUnknownDimension::Make(a1, 0);
  v48 = operator new(0x18uLL);
  v330 = v48 + 3;
  v331 = v48 + 3;
  *v48 = v45;
  v48[1] = v46;
  v48[2] = v47;
  v329 = v48;
  v338 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v329);
  v49 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v50 = MIL::IRUnknownDimension::Make(a1, 0);
  v51 = MIL::IRUnknownDimension::Make(a1, 0);
  v52 = operator new(0x18uLL);
  v309 = v52 + 3;
  *v52 = v49;
  v52[1] = v50;
  v52[2] = v51;
  v307 = v52;
  v308 = v52 + 3;
  v339 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v307);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v335, 5, &v303);
  MIL::IRParameter::Make(&v303, (uint64_t *)&__p);
  v53 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[4],std::unique_ptr<MIL::IRParameter>>(v32, "lut", (uint64_t *)&__p);
  v54 = __p;
  __p = 0;
  if (v54)
    (*(void (**)(void *))(*(_QWORD *)v54 + 8))(v54);
  v55 = (std::__shared_weak_count *)v303.n128_u64[1];
  if (v303.n128_u64[1])
  {
    v56 = (unint64_t *)(v303.n128_u64[1] + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (v307)
  {
    v308 = v307;
    operator delete(v307);
  }
  if (v329)
  {
    v330 = v329;
    operator delete(v329);
  }
  if (v310)
  {
    v311 = v310;
    operator delete(v310);
  }
  if (v332)
  {
    v333 = v332;
    operator delete(v332);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v53 + 5) + 32))(*((_QWORD *)v53 + 5), 1);
  v58 = v315;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v302);
  MIL::IRParameter::Make(&v302, (uint64_t *)&v335);
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v58, "vector_axis", (uint64_t *)&v335);
  v60 = v335;
  v335 = 0;
  if (v60)
    (*((void (**)(void **))*v60 + 1))(v60);
  v61 = (std::__shared_weak_count *)v302.n128_u64[1];
  if (v302.n128_u64[1])
  {
    v62 = (unint64_t *)(v302.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 32))(*((_QWORD *)v59 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 48))(*((_QWORD *)v59 + 5), 1);
  v301 = 0;
  v64 = operator new();
  *(_QWORD *)v64 = 0;
  *(_QWORD *)(v64 + 8) = 0;
  *(_QWORD *)(v64 + 16) = 0;
  v335 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v301, (void **)v64);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v335, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v301, 2uLL);
  v65 = v301;
  v66 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v67 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v67;
  v67->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v66;
  p_get_deleter = (uint64_t)&v67->~__shared_weak_count_0;
  v326 = (uint64_t)&v67->~__shared_weak_count_0;
  v329 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 21, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v329, 1, &v300);
  MIL::IRParameter::Make(&v300, (uint64_t *)&v310);
  v68 = v310;
  v332 = v310;
  if (v310)
  {
    v69 = (_QWORD *)operator new();
    v70 = v310;
    *v69 = &unk_1EA99F888;
    v69[1] = 0;
    v69[2] = 0;
    v69[3] = v70;
  }
  else
  {
    v69 = 0;
  }
  v333 = v69;
  v310 = 0;
  v71 = v65[2];
  v72 = v65[1];
  if (v72 >= v71)
  {
    v74 = (v72 - *v65) >> 4;
    v75 = v74 + 1;
    if ((unint64_t)(v74 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v76 = v71 - *v65;
    if (v76 >> 3 > v75)
      v75 = v76 >> 3;
    if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF0)
      v77 = 0xFFFFFFFFFFFFFFFLL;
    else
      v77 = v75;
    v339 = (uint64_t)(v65 + 2);
    v78 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v65 + 2), v77);
    v80 = &v78[16 * v74];
    *(_QWORD *)v80 = v68;
    *((_QWORD *)v80 + 1) = v69;
    v332 = 0;
    v333 = 0;
    v82 = *v65;
    v81 = v65[1];
    if (v81 == *v65)
    {
      v85 = (void **)v65[1];
      v83 = &v78[16 * v74];
    }
    else
    {
      v83 = &v78[16 * v74];
      do
      {
        v84 = *((_OWORD *)v81 - 1);
        v81 -= 16;
        *((_OWORD *)v83 - 1) = v84;
        v83 -= 16;
        *(_QWORD *)v81 = 0;
        *((_QWORD *)v81 + 1) = 0;
      }
      while (v81 != v82);
      v85 = (void **)*v65;
      v81 = v65[1];
    }
    v73 = v80 + 16;
    *v65 = v83;
    v335 = v85;
    v336 = v85;
    v65[1] = v80 + 16;
    v337 = (uint64_t)v81;
    v86 = v65[2];
    v65[2] = &v78[16 * v79];
    v338 = (uint64_t)v86;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v335);
  }
  else
  {
    *(_QWORD *)v72 = v68;
    *((_QWORD *)v72 + 1) = v69;
    v73 = v72 + 16;
    v332 = 0;
    v333 = 0;
  }
  v65[1] = v73;
  v87 = v310;
  v310 = 0;
  if (v87)
    (*(void (**)(void *))(*(_QWORD *)v87 + 8))(v87);
  v88 = (std::__shared_weak_count *)v300.n128_u64[1];
  if (v300.n128_u64[1])
  {
    v89 = (unint64_t *)(v300.n128_u64[1] + 8);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v91 = v301;
  v92 = MIL::IRUnknownDimension::Make(a1, 0);
  v93 = operator new(8uLL);
  v332 = v93;
  *v93 = v92;
  v333 = v93 + 1;
  v334 = v93 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v332);
  v94 = MIL::IRUnknownDimension::Make(a1, 0);
  v95 = operator new(8uLL);
  v310 = v95;
  *v95 = v94;
  v312 = v95 + 1;
  v311 = v95 + 1;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v310);
  v96 = MIL::IRUnknownDimension::Make(a1, 0);
  v97 = operator new(8uLL);
  v329 = v97;
  *v97 = v96;
  v330 = v97 + 1;
  v331 = v97 + 1;
  v326 = MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v329);
  v98 = MIL::IRUnknownDimension::Make(a1, 0);
  v99 = operator new(8uLL);
  v307 = v99;
  *v99 = v98;
  v309 = v99 + 1;
  v308 = v99 + 1;
  v327 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v307);
  v100 = MIL::IRUnknownDimension::Make(a1, 0);
  v101 = operator new(8uLL);
  __p = v101;
  *v101 = v100;
  v306 = v101 + 1;
  v305 = v101 + 1;
  v328 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 5, &v296);
  MIL::IRParameter::Make(&v296, &v297);
  v102 = v297;
  v298 = v297;
  if (v297)
  {
    v103 = (_QWORD *)operator new();
    v104 = v297;
    *v103 = &unk_1EA99F888;
    v103[1] = 0;
    v103[2] = 0;
    v103[3] = v104;
  }
  else
  {
    v103 = 0;
  }
  v299 = v103;
  v297 = 0;
  v105 = v91[2];
  v106 = v91[1];
  if (v106 >= v105)
  {
    v108 = (v106 - *v91) >> 4;
    v109 = v108 + 1;
    if ((unint64_t)(v108 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v110 = v105 - *v91;
    if (v110 >> 3 > v109)
      v109 = v110 >> 3;
    if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFF0)
      v111 = 0xFFFFFFFFFFFFFFFLL;
    else
      v111 = v109;
    v339 = (uint64_t)(v91 + 2);
    v112 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v91 + 2), v111);
    v114 = (uint64_t *)&v112[16 * v108];
    *v114 = v102;
    v114[1] = (uint64_t)v103;
    v299 = 0;
    v298 = 0;
    v116 = *v91;
    v115 = v91[1];
    if (v115 == *v91)
    {
      v119 = (void **)v91[1];
      v117 = &v112[16 * v108];
    }
    else
    {
      v117 = &v112[16 * v108];
      do
      {
        v118 = *((_OWORD *)v115 - 1);
        v115 -= 16;
        *((_OWORD *)v117 - 1) = v118;
        v117 -= 16;
        *(_QWORD *)v115 = 0;
        *((_QWORD *)v115 + 1) = 0;
      }
      while (v115 != v116);
      v119 = (void **)*v91;
      v115 = v91[1];
    }
    v107 = (char *)(v114 + 2);
    *v91 = v117;
    v335 = v119;
    v336 = v119;
    v91[1] = (char *)(v114 + 2);
    v337 = (uint64_t)v115;
    v120 = v91[2];
    v91[2] = &v112[16 * v113];
    v338 = (uint64_t)v120;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v335);
  }
  else
  {
    *(_QWORD *)v106 = v102;
    *((_QWORD *)v106 + 1) = v103;
    v107 = v106 + 16;
    v299 = 0;
    v298 = 0;
  }
  v91[1] = v107;
  v121 = v297;
  v297 = 0;
  if (v121)
    (*(void (**)(uint64_t))(*(_QWORD *)v121 + 8))(v121);
  v122 = (std::__shared_weak_count *)v296.n128_u64[1];
  if (v296.n128_u64[1])
  {
    v123 = (unint64_t *)(v296.n128_u64[1] + 8);
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  if (__p)
  {
    v305 = __p;
    operator delete(__p);
  }
  if (v307)
  {
    v308 = v307;
    operator delete(v307);
  }
  if (v329)
  {
    v330 = v329;
    operator delete(v329);
  }
  if (v310)
  {
    v311 = v310;
    operator delete(v310);
  }
  if (v332)
  {
    v333 = v332;
    operator delete(v332);
  }
  *(_OWORD *)v294 = *(_OWORD *)a2;
  v295 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v125 = (uint64_t)v315;
  *(_QWORD *)&v293 = v315;
  if (v315)
  {
    v126 = (_QWORD *)operator new();
    *v126 = &unk_1EA99F8E8;
    v126[1] = 0;
    v126[2] = 0;
    v126[3] = v125;
  }
  else
  {
    v126 = 0;
  }
  *((_QWORD *)&v293 + 1) = v126;
  v315 = 0;
  *(_QWORD *)&v292 = v301;
  if (v301)
  {
    v127 = (_QWORD *)operator new();
    v128 = v301;
    *v127 = &unk_1EA99F948;
    v127[1] = 0;
    v127[2] = 0;
    v127[3] = v128;
  }
  else
  {
    v127 = 0;
  }
  *((_QWORD *)&v292 + 1) = v127;
  v301 = 0;
  v322[0] = &unk_1EA99FAC8;
  v322[1] = MIL::Operators::Common::ios18::CustomValidators::ValidateConstexprLutToSparse;
  v323 = v322;
  v321 = 0;
  MIL::IROperator::Make((__int128 *)v294, &v293, &v292, (uint64_t)v322, (uint64_t)v320, a3);
  v129 = v321;
  if (v321 == v320)
  {
    v130 = 4;
    v129 = v320;
  }
  else
  {
    if (!v321)
      goto LABEL_124;
    v130 = 5;
  }
  (*(void (**)(void))(*v129 + 8 * v130))();
LABEL_124:
  v131 = v323;
  if (v323 == v322)
  {
    v132 = 4;
    v131 = v322;
    goto LABEL_128;
  }
  if (v323)
  {
    v132 = 5;
LABEL_128:
    (*(void (**)(void))(*v131 + 8 * v132))();
  }
  v133 = (std::__shared_weak_count *)*((_QWORD *)&v292 + 1);
  if (*((_QWORD *)&v292 + 1))
  {
    v134 = (unint64_t *)(*((_QWORD *)&v292 + 1) + 8);
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
  v136 = (std::__shared_weak_count *)*((_QWORD *)&v293 + 1);
  if (*((_QWORD *)&v293 + 1))
  {
    v137 = (unint64_t *)(*((_QWORD *)&v293 + 1) + 8);
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  if (SHIBYTE(v295) < 0)
    operator delete(v294[0]);
  v139 = *a3;
  v318[0] = &off_1EA99FBD8;
  v318[1] = MIL::Operators::Common::ios18::CustomValueTypeInference::ValueTypeInferenceConstexprLutToSparse;
  v319 = v318;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v139 + 200))(v139, v318);
  v140 = v319;
  if (v319 == v318)
  {
    v141 = 4;
    v140 = v318;
  }
  else
  {
    if (!v319)
      goto LABEL_146;
    v141 = 5;
  }
  (*(void (**)(void))(*v140 + 8 * v141))();
LABEL_146:
  v142 = *a3;
  v316[0] = &off_1EA9A1A48;
  v316[1] = a1;
  v317 = v316;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v142 + 256))(v142, v316);
  v143 = v317;
  if (v317 == v316)
  {
    v144 = 4;
    v143 = v316;
  }
  else
  {
    if (!v317)
      goto LABEL_151;
    v144 = 5;
  }
  (*(void (**)(void))(*v143 + 8 * v144))();
LABEL_151:
  MIL::Validation::TensorDTypeConstraints::Make(&v335);
  v145 = v335;
  std::string::basic_string[abi:ne180100]<0>(v288, "indices_nonzero_data");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v288, 0, (uint64_t *)&Scalar);
  v290 = Scalar;
  if (Scalar)
  {
    v146 = (std::__shared_weak_count *)operator new();
    v147 = Scalar;
    v146->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v146->__shared_owners_ = 0;
    v146->__shared_weak_owners_ = 0;
    v146[1].__vftable = v147;
  }
  else
  {
    v146 = 0;
  }
  v291 = v146;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v286, "IndicesT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v145 + 3))(v145, &v290, v286);
  if (v287 < 0)
    operator delete(v286[0]);
  v148 = v291;
  if (v291)
  {
    p_shared_owners = (unint64_t *)&v291->__shared_owners_;
    do
      v150 = __ldaxr(p_shared_owners);
    while (__stlxr(v150 - 1, p_shared_owners));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
    }
  }
  v151 = Scalar;
  Scalar = 0;
  if (v151)
    (*((void (**)(std::__shared_weak_count_vtbl *))v151->~__shared_weak_count + 1))(v151);
  if (v289 < 0)
    operator delete(v288[0]);
  v152 = v335;
  std::string::basic_string[abi:ne180100]<0>(v282, "lut");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v282, 0, (uint64_t *)&Scalar);
  v284 = Scalar;
  if (Scalar)
  {
    v153 = (std::__shared_weak_count *)operator new();
    v154 = Scalar;
    v153->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v153->__shared_owners_ = 0;
    v153->__shared_weak_owners_ = 0;
    v153[1].__vftable = v154;
  }
  else
  {
    v153 = 0;
  }
  v285 = v153;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v280, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v152 + 3))(v152, &v284, v280);
  if (v281 < 0)
    operator delete(v280[0]);
  v155 = v285;
  if (v285)
  {
    v156 = (unint64_t *)&v285->__shared_owners_;
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
  v158 = Scalar;
  Scalar = 0;
  if (v158)
    (*((void (**)(std::__shared_weak_count_vtbl *))v158->~__shared_weak_count + 1))(v158);
  if (v283 < 0)
    operator delete(v282[0]);
  v159 = v335;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 0, &Scalar);
  v278 = Scalar;
  if (Scalar)
  {
    v160 = (std::__shared_weak_count *)operator new();
    v161 = Scalar;
    v160->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v160->__shared_owners_ = 0;
    v160->__shared_weak_owners_ = 0;
    v160[1].__vftable = v161;
  }
  else
  {
    v160 = 0;
  }
  v279 = v160;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v276, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v159 + 3))(v159, &v278, v276);
  if (v277 < 0)
    operator delete(v276[0]);
  v162 = v279;
  if (v279)
  {
    v163 = (unint64_t *)&v279->__shared_owners_;
    do
      v164 = __ldaxr(v163);
    while (__stlxr(v164 - 1, v163));
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
    }
  }
  v165 = Scalar;
  Scalar = 0;
  if (v165)
    (*((void (**)(std::__shared_weak_count_vtbl *))v165->~__shared_weak_count + 1))(v165);
  v166 = *a3;
  v274 = v335;
  if (v335)
  {
    v167 = (std::__shared_weak_count *)operator new();
    v168 = v335;
    v167->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v167->__shared_owners_ = 0;
    v167->__shared_weak_owners_ = 0;
    v167[1].__vftable = (std::__shared_weak_count_vtbl *)v168;
  }
  else
  {
    v167 = 0;
  }
  v275 = v167;
  v335 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v166 + 56))(v166, &v274);
  v169 = v275;
  if (v275)
  {
    v170 = (unint64_t *)&v275->__shared_owners_;
    do
      v171 = __ldaxr(v170);
    while (__stlxr(v171 - 1, v170));
    if (!v171)
    {
      ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
      std::__shared_weak_count::__release_weak(v169);
    }
  }
  v172 = v335;
  v335 = 0;
  if (v172)
    (*((void (**)(void **))*v172 + 1))(v172);
  MIL::Validation::TensorRankValueConstraints::Make(&v335);
  v173 = v335;
  std::string::basic_string[abi:ne180100]<0>(v270, "indices_mask");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v270, 0, (uint64_t *)&Scalar);
  v272 = Scalar;
  if (Scalar)
  {
    v174 = (std::__shared_weak_count *)operator new();
    v175 = Scalar;
    v174->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v174->__shared_owners_ = 0;
    v174->__shared_weak_owners_ = 0;
    v174[1].__vftable = v175;
  }
  else
  {
    v174 = 0;
  }
  v273 = v174;
  Scalar = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))*v173 + 4))(v173, &v272, 1, 0x7FFFFFFFFFFFFFFFLL);
  v176 = v273;
  if (v273)
  {
    v177 = (unint64_t *)&v273->__shared_owners_;
    do
      v178 = __ldaxr(v177);
    while (__stlxr(v178 - 1, v177));
    if (!v178)
    {
      ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
      std::__shared_weak_count::__release_weak(v176);
    }
  }
  v179 = Scalar;
  Scalar = 0;
  if (v179)
    (*((void (**)(std::__shared_weak_count_vtbl *))v179->~__shared_weak_count + 1))(v179);
  if (v271 < 0)
    operator delete(v270[0]);
  v180 = v335;
  std::string::basic_string[abi:ne180100]<0>(v266, "lut");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v266, 0, (uint64_t *)&Scalar);
  v268 = Scalar;
  if (Scalar)
  {
    v181 = (std::__shared_weak_count *)operator new();
    v182 = Scalar;
    v181->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v181->__shared_owners_ = 0;
    v181->__shared_weak_owners_ = 0;
    v181[1].__vftable = v182;
  }
  else
  {
    v181 = 0;
  }
  v269 = v181;
  Scalar = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))*v180 + 4))(v180, &v268, 3, 0x7FFFFFFFFFFFFFFFLL);
  v183 = v269;
  if (v269)
  {
    v184 = (unint64_t *)&v269->__shared_owners_;
    do
      v185 = __ldaxr(v184);
    while (__stlxr(v185 - 1, v184));
    if (!v185)
    {
      ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
      std::__shared_weak_count::__release_weak(v183);
    }
  }
  v186 = Scalar;
  Scalar = 0;
  if (v186)
    (*((void (**)(std::__shared_weak_count_vtbl *))v186->~__shared_weak_count + 1))(v186);
  if (v267 < 0)
    operator delete(v266[0]);
  v187 = v335;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v264 = Scalar;
  if (Scalar)
  {
    v188 = (std::__shared_weak_count *)operator new();
    v189 = Scalar;
    v188->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v188->__shared_owners_ = 0;
    v188->__shared_weak_owners_ = 0;
    v188[1].__vftable = v189;
  }
  else
  {
    v188 = 0;
  }
  v265 = v188;
  Scalar = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))*v187 + 4))(v187, &v264, 1, 0x7FFFFFFFFFFFFFFFLL);
  v190 = v265;
  if (v265)
  {
    v191 = (unint64_t *)&v265->__shared_owners_;
    do
      v192 = __ldaxr(v191);
    while (__stlxr(v192 - 1, v191));
    if (!v192)
    {
      ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
      std::__shared_weak_count::__release_weak(v190);
    }
  }
  v193 = Scalar;
  Scalar = 0;
  if (v193)
    (*((void (**)(std::__shared_weak_count_vtbl *))v193->~__shared_weak_count + 1))(v193);
  v194 = *a3;
  v262 = v335;
  if (v335)
  {
    v195 = (std::__shared_weak_count *)operator new();
    v196 = v335;
    v195->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FC78;
    v195->__shared_owners_ = 0;
    v195->__shared_weak_owners_ = 0;
    v195[1].__vftable = (std::__shared_weak_count_vtbl *)v196;
  }
  else
  {
    v195 = 0;
  }
  v263 = v195;
  v335 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v194 + 56))(v194, &v262);
  v197 = v263;
  if (v263)
  {
    v198 = (unint64_t *)&v263->__shared_owners_;
    do
      v199 = __ldaxr(v198);
    while (__stlxr(v199 - 1, v198));
    if (!v199)
    {
      ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
      std::__shared_weak_count::__release_weak(v197);
    }
  }
  v200 = v335;
  v335 = 0;
  if (v200)
    (*((void (**)(void **))*v200 + 1))(v200);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v335);
  v201 = v335;
  std::string::basic_string[abi:ne180100]<0>(v258, "indices_nonzero_data");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v258, 0, (uint64_t *)&Scalar);
  v260 = Scalar;
  if (Scalar)
  {
    v202 = (std::__shared_weak_count *)operator new();
    v203 = Scalar;
    v202->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v202->__shared_owners_ = 0;
    v202->__shared_weak_owners_ = 0;
    v202[1].__vftable = v203;
  }
  else
  {
    v202 = 0;
  }
  v261 = v202;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v256, "D");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v201 + 3))(v201, &v260, 0, v256);
  if (v257 < 0)
    operator delete(v256[0]);
  v204 = v261;
  if (v261)
  {
    v205 = (unint64_t *)&v261->__shared_owners_;
    do
      v206 = __ldaxr(v205);
    while (__stlxr(v206 - 1, v205));
    if (!v206)
    {
      ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
      std::__shared_weak_count::__release_weak(v204);
    }
  }
  v207 = Scalar;
  Scalar = 0;
  if (v207)
    (*((void (**)(std::__shared_weak_count_vtbl *))v207->~__shared_weak_count + 1))(v207);
  if (v259 < 0)
    operator delete(v258[0]);
  v208 = v335;
  std::string::basic_string[abi:ne180100]<0>(v252, "lut");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v252, 0, (uint64_t *)&Scalar);
  v254 = Scalar;
  if (Scalar)
  {
    v209 = (std::__shared_weak_count *)operator new();
    v210 = Scalar;
    v209->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v209->__shared_owners_ = 0;
    v209->__shared_weak_owners_ = 0;
    v209[1].__vftable = v210;
  }
  else
  {
    v209 = 0;
  }
  v255 = v209;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v250, "NUM_PALETTES");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v208 + 3))(v208, &v254, -2, v250);
  if (v251 < 0)
    operator delete(v250[0]);
  v211 = v255;
  if (v255)
  {
    v212 = (unint64_t *)&v255->__shared_owners_;
    do
      v213 = __ldaxr(v212);
    while (__stlxr(v213 - 1, v212));
    if (!v213)
    {
      ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
      std::__shared_weak_count::__release_weak(v211);
    }
  }
  v214 = Scalar;
  Scalar = 0;
  if (v214)
    (*((void (**)(std::__shared_weak_count_vtbl *))v214->~__shared_weak_count + 1))(v214);
  if (v253 < 0)
    operator delete(v252[0]);
  v215 = v335;
  std::string::basic_string[abi:ne180100]<0>(v246, "lut");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v246, 0, (uint64_t *)&Scalar);
  v248 = Scalar;
  if (Scalar)
  {
    v216 = (std::__shared_weak_count *)operator new();
    v217 = Scalar;
    v216->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v216->__shared_owners_ = 0;
    v216->__shared_weak_owners_ = 0;
    v216[1].__vftable = v217;
  }
  else
  {
    v216 = 0;
  }
  v249 = v216;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v244, "VECTOR_SIZE");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v215 + 3))(v215, &v248, -1, v244);
  if (v245 < 0)
    operator delete(v244[0]);
  v218 = v249;
  if (v249)
  {
    v219 = (unint64_t *)&v249->__shared_owners_;
    do
      v220 = __ldaxr(v219);
    while (__stlxr(v220 - 1, v219));
    if (!v220)
    {
      ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
      std::__shared_weak_count::__release_weak(v218);
    }
  }
  v221 = Scalar;
  Scalar = 0;
  if (v221)
    (*((void (**)(std::__shared_weak_count_vtbl *))v221->~__shared_weak_count + 1))(v221);
  if (v247 < 0)
    operator delete(v246[0]);
  v222 = v335;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 0, &Scalar);
  v242 = Scalar;
  if (Scalar)
  {
    v223 = (std::__shared_weak_count *)operator new();
    v224 = Scalar;
    v223->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v223->__shared_owners_ = 0;
    v223->__shared_weak_owners_ = 0;
    v223[1].__vftable = v224;
  }
  else
  {
    v223 = 0;
  }
  v243 = v223;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v240, "VD");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v222 + 3))(v222, &v242, 0, v240);
  if (v241 < 0)
    operator delete(v240[0]);
  v225 = v243;
  if (v243)
  {
    v226 = (unint64_t *)&v243->__shared_owners_;
    do
      v227 = __ldaxr(v226);
    while (__stlxr(v227 - 1, v226));
    if (!v227)
    {
      ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
      std::__shared_weak_count::__release_weak(v225);
    }
  }
  v228 = Scalar;
  Scalar = 0;
  if (v228)
    (*((void (**)(std::__shared_weak_count_vtbl *))v228->~__shared_weak_count + 1))(v228);
  v229 = *a3;
  v238 = v335;
  if (v335)
  {
    v230 = (std::__shared_weak_count *)operator new();
    v231 = v335;
    v230->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v230->__shared_owners_ = 0;
    v230->__shared_weak_owners_ = 0;
    v230[1].__vftable = (std::__shared_weak_count_vtbl *)v231;
  }
  else
  {
    v230 = 0;
  }
  v239 = v230;
  v335 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v229 + 56))(v229, &v238);
  v232 = v239;
  if (v239)
  {
    v233 = (unint64_t *)&v239->__shared_owners_;
    do
      v234 = __ldaxr(v233);
    while (__stlxr(v234 - 1, v233));
    if (!v234)
    {
      ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
      std::__shared_weak_count::__release_weak(v232);
    }
  }
  v235 = v335;
  v335 = 0;
  if (v235)
    (*((void (**)(void **))*v235 + 1))(v235);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v301, 0);
  result = (uint64_t)v315;
  if (v315)
  {
    v237 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v315);
    return MEMORY[0x1E0C023A0](v237, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09559D0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 136);
  *(_QWORD *)(v2 - 136) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x298], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x328], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::ConstexprSparseBlockwiseShiftScale::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  void **v8;
  unsigned __int8 *v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count_vtbl *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  unsigned __int8 *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  std::__shared_weak_count_vtbl *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  unsigned __int8 *v41;
  void *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  std::__shared_weak_count_vtbl *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  unsigned __int8 *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  void ***v67;
  uint64_t v68;
  std::__shared_weak_count_vtbl *v69;
  void *v70;
  _QWORD *v71;
  void *v72;
  unint64_t v73;
  void **v74;
  void **v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  void **v83;
  void **v84;
  char *v85;
  __int128 v86;
  void **v87;
  uint64_t v88;
  void *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  void ***v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  void *v100;
  _QWORD *v101;
  void *v102;
  unint64_t v103;
  void **v104;
  void **v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  uint64_t v111;
  char *v112;
  void **v113;
  void **v114;
  char *v115;
  __int128 v116;
  void **v117;
  uint64_t v118;
  void *v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  void *v126;
  _QWORD *v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  void **v143;
  std::__shared_weak_count *v144;
  std::__shared_weak_count_vtbl *v145;
  std::__shared_weak_count *v146;
  unint64_t *p_shared_owners;
  unint64_t v148;
  std::__shared_weak_count_vtbl *v149;
  void **v150;
  std::__shared_weak_count *v151;
  std::__shared_weak_count_vtbl *v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count_vtbl *v156;
  void **v157;
  std::__shared_weak_count *v158;
  std::__shared_weak_count_vtbl *v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count_vtbl *v163;
  void **v164;
  std::__shared_weak_count *v165;
  std::__shared_weak_count_vtbl *v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count_vtbl *v170;
  uint64_t v171;
  std::__shared_weak_count *v172;
  void **v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  void **v177;
  void **v178;
  std::__shared_weak_count *v179;
  std::__shared_weak_count_vtbl *v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count_vtbl *v184;
  void **v185;
  std::__shared_weak_count *v186;
  std::__shared_weak_count_vtbl *v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  std::__shared_weak_count_vtbl *v191;
  void **v192;
  std::__shared_weak_count *v193;
  std::__shared_weak_count_vtbl *v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  std::__shared_weak_count_vtbl *v198;
  void **v199;
  std::__shared_weak_count *v200;
  std::__shared_weak_count_vtbl *v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  std::__shared_weak_count_vtbl *v205;
  uint64_t v206;
  std::__shared_weak_count *v207;
  void **v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  void **v212;
  void **v213;
  std::__shared_weak_count *v214;
  std::__shared_weak_count_vtbl *v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  std::__shared_weak_count_vtbl *v219;
  void **v220;
  std::__shared_weak_count *v221;
  std::__shared_weak_count_vtbl *v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  std::__shared_weak_count_vtbl *v226;
  uint64_t v227;
  std::__shared_weak_count *v228;
  void **v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  void **v233;
  uint64_t result;
  uint64_t v235;
  void **v236;
  std::__shared_weak_count *v237;
  void *v238[2];
  char v239;
  std::__shared_weak_count_vtbl *v240;
  std::__shared_weak_count *v241;
  void *v242[2];
  char v243;
  void *v244[2];
  char v245;
  std::__shared_weak_count_vtbl *v246;
  std::__shared_weak_count *v247;
  void **v248;
  std::__shared_weak_count *v249;
  std::__shared_weak_count_vtbl *v250;
  std::__shared_weak_count *v251;
  void *v252[2];
  char v253;
  std::__shared_weak_count_vtbl *v254;
  std::__shared_weak_count *v255;
  void *v256[2];
  char v257;
  std::__shared_weak_count_vtbl *v258;
  std::__shared_weak_count *v259;
  void *v260[2];
  char v261;
  std::__shared_weak_count_vtbl *v262;
  std::__shared_weak_count *v263;
  void **v264;
  std::__shared_weak_count *v265;
  void *v266[2];
  char v267;
  std::__shared_weak_count_vtbl *v268;
  std::__shared_weak_count *v269;
  void *v270[2];
  char v271;
  void *v272[2];
  char v273;
  std::__shared_weak_count_vtbl *v274;
  std::__shared_weak_count *v275;
  void *v276[2];
  char v277;
  void *v278[2];
  char v279;
  std::__shared_weak_count_vtbl *v280;
  std::__shared_weak_count *v281;
  void *v282[2];
  char v283;
  void *v284[2];
  char v285;
  std::__shared_weak_count_vtbl *v286;
  std::__shared_weak_count *v287;
  __int128 v288;
  __int128 v289;
  void *v290[2];
  uint64_t v291;
  __n128 v292;
  __n128 v293;
  __n128 v294;
  __n128 v295;
  void *__p;
  void *v297;
  _QWORD *v298;
  void *v299;
  void *v300;
  _QWORD *v301;
  void *v302;
  void *v303;
  _QWORD *v304;
  void *v305;
  void *v306;
  _QWORD *v307;
  __n128 v308;
  uint64_t v309;
  __n128 v310;
  _QWORD *v311;
  _QWORD v312[3];
  _QWORD *v313;
  _QWORD v314[3];
  _QWORD *v315;
  _BYTE v316[24];
  _BYTE *v317;
  _QWORD v318[3];
  _QWORD *v319;
  void *v320;
  void *v321;
  _QWORD *v322;
  void *v323;
  void *v324;
  _QWORD *v325;
  std::__shared_weak_count_vtbl *v326;
  uint64_t v327;
  uint64_t v328;
  void **v329;
  void **v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;

  v336 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v311 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (void **)operator new(8uLL);
  v329 = v8;
  *v8 = (void *)v7;
  v330 = v8 + 1;
  v331 = (uint64_t)(v8 + 1);
  v323 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 21, (uint64_t)&v329);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v323, 1, &v310);
  MIL::IRParameter::Make(&v310, (uint64_t *)&v326);
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "data_mask", (uint64_t *)&v326);
  v10 = v326;
  v326 = 0;
  if (v10)
    (*((void (**)(std::__shared_weak_count_vtbl *))v10->~__shared_weak_count + 1))(v10);
  v11 = (std::__shared_weak_count *)v310.n128_u64[1];
  if (v310.n128_u64[1])
  {
    v12 = (unint64_t *)(v310.n128_u64[1] + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v329)
  {
    v330 = v329;
    operator delete(v329);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v9 + 5) + 32))(*((_QWORD *)v9 + 5), 1);
  v14 = v311;
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v326 = v16;
  v16->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v15;
  v327 = (uint64_t)&v16->~__shared_weak_count_0;
  v328 = (uint64_t)&v16->~__shared_weak_count_0;
  v329 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 20, (uint64_t)&v326);
  v17 = MIL::IRUnknownDimension::Make(a1, 0);
  v18 = operator new(8uLL);
  v323 = v18;
  *v18 = v17;
  v324 = v18 + 1;
  v325 = v18 + 1;
  v330 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 13, (uint64_t)&v323);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = operator new(8uLL);
  v305 = v20;
  *v20 = v19;
  v307 = v20 + 1;
  v306 = v20 + 1;
  v331 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v305);
  v21 = MIL::IRUnknownDimension::Make(a1, 0);
  v22 = operator new(8uLL);
  v320 = v22;
  *v22 = v21;
  v321 = v22 + 1;
  v322 = v22 + 1;
  v332 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v320);
  v23 = MIL::IRUnknownDimension::Make(a1, 0);
  v24 = operator new(8uLL);
  v302 = v24;
  *v24 = v23;
  v304 = v24 + 1;
  v303 = v24 + 1;
  v333 = MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v302);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = operator new(8uLL);
  v299 = v26;
  *v26 = v25;
  v301 = v26 + 1;
  v300 = v26 + 1;
  v334 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v299);
  v27 = MIL::IRUnknownDimension::Make(a1, 0);
  v28 = operator new(8uLL);
  __p = v28;
  *v28 = v27;
  v298 = v28 + 1;
  v297 = v28 + 1;
  v335 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v329, 7, &v308);
  MIL::IRParameter::Make(&v308, &v309);
  v29 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v14, "nonzero_data", &v309);
  v30 = v309;
  v309 = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  v31 = (std::__shared_weak_count *)v308.n128_u64[1];
  if (v308.n128_u64[1])
  {
    v32 = (unint64_t *)(v308.n128_u64[1] + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (__p)
  {
    v297 = __p;
    operator delete(__p);
  }
  if (v299)
  {
    v300 = v299;
    operator delete(v299);
  }
  if (v302)
  {
    v303 = v302;
    operator delete(v302);
  }
  if (v320)
  {
    v321 = v320;
    operator delete(v320);
  }
  if (v305)
  {
    v306 = v305;
    operator delete(v305);
  }
  if (v323)
  {
    v324 = v323;
    operator delete(v323);
  }
  if (v326)
  {
    v327 = (uint64_t)v326;
    operator delete(v326);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v29 + 5) + 32))(*((_QWORD *)v29 + 5), 1);
  v34 = v311;
  v35 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v36 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v326 = v36;
  v36->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v35;
  v327 = (uint64_t)&v36->~__shared_weak_count_0;
  v328 = (uint64_t)&v36->~__shared_weak_count_0;
  v329 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v326);
  v37 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v38 = operator new(8uLL);
  v323 = v38;
  *v38 = v37;
  v324 = v38 + 1;
  v325 = v38 + 1;
  v330 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v323);
  v39 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v40 = operator new(8uLL);
  v305 = v40;
  *v40 = v39;
  v307 = v40 + 1;
  v306 = v40 + 1;
  v331 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v305);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v329, 3, &v295);
  MIL::IRParameter::Make(&v295, (uint64_t *)&v320);
  v41 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v34, "scale", (uint64_t *)&v320);
  v42 = v320;
  v320 = 0;
  if (v42)
    (*(void (**)(void *))(*(_QWORD *)v42 + 8))(v42);
  v43 = (std::__shared_weak_count *)v295.n128_u64[1];
  if (v295.n128_u64[1])
  {
    v44 = (unint64_t *)(v295.n128_u64[1] + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  if (v305)
  {
    v306 = v305;
    operator delete(v305);
  }
  if (v323)
  {
    v324 = v323;
    operator delete(v323);
  }
  if (v326)
  {
    v327 = (uint64_t)v326;
    operator delete(v326);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v41 + 5) + 32))(*((_QWORD *)v41 + 5), 1);
  v46 = v311;
  v47 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v48 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v326 = v48;
  v48->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v47;
  v327 = (uint64_t)&v48->~__shared_weak_count_0;
  v328 = (uint64_t)&v48->~__shared_weak_count_0;
  v329 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 20, (uint64_t)&v326);
  v49 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v50 = operator new(8uLL);
  v323 = v50;
  *v50 = v49;
  v324 = v50 + 1;
  v325 = v50 + 1;
  v330 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 13, (uint64_t)&v323);
  v51 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v52 = operator new(8uLL);
  v305 = v52;
  *v52 = v51;
  v307 = v52 + 1;
  v306 = v52 + 1;
  v331 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v305);
  v53 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v54 = operator new(8uLL);
  v320 = v54;
  *v54 = v53;
  v321 = v54 + 1;
  v322 = v54 + 1;
  v332 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v320);
  v55 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v56 = operator new(8uLL);
  v302 = v56;
  *v56 = v55;
  v304 = v56 + 1;
  v303 = v56 + 1;
  v333 = MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v302);
  v57 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v58 = operator new(8uLL);
  v299 = v58;
  *v58 = v57;
  v301 = v58 + 1;
  v300 = v58 + 1;
  v334 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v299);
  v59 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v60 = operator new(8uLL);
  __p = v60;
  *v60 = v59;
  v298 = v60 + 1;
  v297 = v60 + 1;
  v335 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v329, 7, &v294);
  MIL::IRParameter::Make(&v294, &v309);
  v61 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(v46, "offset", &v309);
  v62 = v309;
  v309 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  v63 = (std::__shared_weak_count *)v294.n128_u64[1];
  if (v294.n128_u64[1])
  {
    v64 = (unint64_t *)(v294.n128_u64[1] + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  if (__p)
  {
    v297 = __p;
    operator delete(__p);
  }
  if (v299)
  {
    v300 = v299;
    operator delete(v299);
  }
  if (v302)
  {
    v303 = v302;
    operator delete(v302);
  }
  if (v320)
  {
    v321 = v320;
    operator delete(v320);
  }
  if (v305)
  {
    v306 = v305;
    operator delete(v305);
  }
  if (v323)
  {
    v324 = v323;
    operator delete(v323);
  }
  if (v326)
  {
    v327 = (uint64_t)v326;
    operator delete(v326);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v61 + 5) + 32))(*((_QWORD *)v61 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v61 + 5) + 48))(*((_QWORD *)v61 + 5), 1);
  v299 = 0;
  v66 = operator new();
  *(_QWORD *)v66 = 0;
  *(_QWORD *)(v66 + 8) = 0;
  *(_QWORD *)(v66 + 16) = 0;
  v329 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v299, (void **)v66);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v329, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)v299, 2uLL);
  v67 = (void ***)v299;
  v68 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v69 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v326 = v69;
  v69->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v68;
  v327 = (uint64_t)&v69->~__shared_weak_count_0;
  v328 = (uint64_t)&v69->~__shared_weak_count_0;
  v320 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 21, (uint64_t)&v326);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v320, 1, &v293);
  MIL::IRParameter::Make(&v293, (uint64_t *)&v305);
  v70 = v305;
  v323 = v305;
  if (v305)
  {
    v71 = (_QWORD *)operator new();
    v72 = v305;
    *v71 = &unk_1EA99F888;
    v71[1] = 0;
    v71[2] = 0;
    v71[3] = v72;
  }
  else
  {
    v71 = 0;
  }
  v324 = v71;
  v305 = 0;
  v73 = (unint64_t)v67[2];
  v74 = v67[1];
  if ((unint64_t)v74 >= v73)
  {
    v76 = ((char *)v74 - (char *)*v67) >> 4;
    v77 = v76 + 1;
    if ((unint64_t)(v76 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v78 = v73 - (_QWORD)*v67;
    if (v78 >> 3 > v77)
      v77 = v78 >> 3;
    if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF0)
      v79 = 0xFFFFFFFFFFFFFFFLL;
    else
      v79 = v77;
    v333 = (uint64_t)(v67 + 2);
    v80 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v67 + 2), v79);
    v82 = &v80[16 * v76];
    *(_QWORD *)v82 = v70;
    *((_QWORD *)v82 + 1) = v71;
    v323 = 0;
    v324 = 0;
    v84 = *v67;
    v83 = v67[1];
    if (v83 == *v67)
    {
      v87 = v67[1];
      v85 = &v80[16 * v76];
    }
    else
    {
      v85 = &v80[16 * v76];
      do
      {
        v86 = *((_OWORD *)v83 - 1);
        v83 -= 2;
        *((_OWORD *)v85 - 1) = v86;
        v85 -= 16;
        *v83 = 0;
        v83[1] = 0;
      }
      while (v83 != v84);
      v87 = *v67;
      v83 = v67[1];
    }
    v75 = (void **)(v82 + 16);
    *v67 = (void **)v85;
    v329 = v87;
    v330 = v87;
    v67[1] = (void **)(v82 + 16);
    v331 = (uint64_t)v83;
    v88 = (uint64_t)v67[2];
    v67[2] = (void **)&v80[16 * v81];
    v332 = v88;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v329);
  }
  else
  {
    *v74 = v70;
    v74[1] = v71;
    v75 = v74 + 2;
    v323 = 0;
    v324 = 0;
  }
  v67[1] = v75;
  v89 = v305;
  v305 = 0;
  if (v89)
    (*(void (**)(void *))(*(_QWORD *)v89 + 8))(v89);
  v90 = (std::__shared_weak_count *)v293.n128_u64[1];
  if (v293.n128_u64[1])
  {
    v91 = (unint64_t *)(v293.n128_u64[1] + 8);
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  if (v326)
  {
    v327 = (uint64_t)v326;
    operator delete(v326);
  }
  v93 = (void ***)v299;
  v94 = MIL::IRUnknownDimension::Make(a1, 0);
  v95 = operator new(8uLL);
  v323 = v95;
  *v95 = v94;
  v324 = v95 + 1;
  v325 = v95 + 1;
  v326 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v323);
  v96 = MIL::IRUnknownDimension::Make(a1, 0);
  v97 = operator new(8uLL);
  v305 = v97;
  *v97 = v96;
  v307 = v97 + 1;
  v306 = v97 + 1;
  v327 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v305);
  v98 = MIL::IRUnknownDimension::Make(a1, 0);
  v99 = operator new(8uLL);
  v320 = v99;
  *v99 = v98;
  v321 = v99 + 1;
  v322 = v99 + 1;
  v328 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v320);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v326, 3, &v292);
  MIL::IRParameter::Make(&v292, (uint64_t *)&__p);
  v100 = __p;
  v302 = __p;
  if (__p)
  {
    v101 = (_QWORD *)operator new();
    v102 = __p;
    *v101 = &unk_1EA99F888;
    v101[1] = 0;
    v101[2] = 0;
    v101[3] = v102;
  }
  else
  {
    v101 = 0;
  }
  v303 = v101;
  __p = 0;
  v103 = (unint64_t)v93[2];
  v104 = v93[1];
  if ((unint64_t)v104 >= v103)
  {
    v106 = ((char *)v104 - (char *)*v93) >> 4;
    v107 = v106 + 1;
    if ((unint64_t)(v106 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v108 = v103 - (_QWORD)*v93;
    if (v108 >> 3 > v107)
      v107 = v108 >> 3;
    if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFF0)
      v109 = 0xFFFFFFFFFFFFFFFLL;
    else
      v109 = v107;
    v333 = (uint64_t)(v93 + 2);
    v110 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v93 + 2), v109);
    v112 = &v110[16 * v106];
    *(_QWORD *)v112 = v100;
    *((_QWORD *)v112 + 1) = v101;
    v303 = 0;
    v302 = 0;
    v114 = *v93;
    v113 = v93[1];
    if (v113 == *v93)
    {
      v117 = v93[1];
      v115 = &v110[16 * v106];
    }
    else
    {
      v115 = &v110[16 * v106];
      do
      {
        v116 = *((_OWORD *)v113 - 1);
        v113 -= 2;
        *((_OWORD *)v115 - 1) = v116;
        v115 -= 16;
        *v113 = 0;
        v113[1] = 0;
      }
      while (v113 != v114);
      v117 = *v93;
      v113 = v93[1];
    }
    v105 = (void **)(v112 + 16);
    *v93 = (void **)v115;
    v329 = v117;
    v330 = v117;
    v93[1] = (void **)(v112 + 16);
    v331 = (uint64_t)v113;
    v118 = (uint64_t)v93[2];
    v93[2] = (void **)&v110[16 * v111];
    v332 = v118;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v329);
  }
  else
  {
    *v104 = v100;
    v104[1] = v101;
    v105 = v104 + 2;
    v303 = 0;
    v302 = 0;
  }
  v93[1] = v105;
  v119 = __p;
  __p = 0;
  if (v119)
    (*(void (**)(void *))(*(_QWORD *)v119 + 8))(v119);
  v120 = (std::__shared_weak_count *)v292.n128_u64[1];
  if (v292.n128_u64[1])
  {
    v121 = (unint64_t *)(v292.n128_u64[1] + 8);
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  if (v320)
  {
    v321 = v320;
    operator delete(v320);
  }
  if (v305)
  {
    v306 = v305;
    operator delete(v305);
  }
  if (v323)
  {
    v324 = v323;
    operator delete(v323);
  }
  *(_OWORD *)v290 = *(_OWORD *)a2;
  v291 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v123 = (uint64_t)v311;
  *(_QWORD *)&v289 = v311;
  if (v311)
  {
    v124 = (_QWORD *)operator new();
    *v124 = &unk_1EA99F8E8;
    v124[1] = 0;
    v124[2] = 0;
    v124[3] = v123;
  }
  else
  {
    v124 = 0;
  }
  *((_QWORD *)&v289 + 1) = v124;
  v311 = 0;
  *(_QWORD *)&v288 = v299;
  if (v299)
  {
    v125 = (_QWORD *)operator new();
    v126 = v299;
    *v125 = &unk_1EA99F948;
    v125[1] = 0;
    v125[2] = 0;
    v125[3] = v126;
  }
  else
  {
    v125 = 0;
  }
  *((_QWORD *)&v288 + 1) = v125;
  v299 = 0;
  v318[0] = &unk_1EA99FAC8;
  v318[1] = MIL::Operators::Common::ios18::CustomValidators::ValidateConstexprSparseBlockwiseShiftScale;
  v319 = v318;
  v317 = 0;
  MIL::IROperator::Make((__int128 *)v290, &v289, &v288, (uint64_t)v318, (uint64_t)v316, a3);
  v127 = v317;
  if (v317 == v316)
  {
    v128 = 4;
    v127 = v316;
  }
  else
  {
    if (!v317)
      goto LABEL_132;
    v128 = 5;
  }
  (*(void (**)(void))(*v127 + 8 * v128))();
LABEL_132:
  v129 = v319;
  if (v319 == v318)
  {
    v130 = 4;
    v129 = v318;
    goto LABEL_136;
  }
  if (v319)
  {
    v130 = 5;
LABEL_136:
    (*(void (**)(void))(*v129 + 8 * v130))();
  }
  v131 = (std::__shared_weak_count *)*((_QWORD *)&v288 + 1);
  if (*((_QWORD *)&v288 + 1))
  {
    v132 = (unint64_t *)(*((_QWORD *)&v288 + 1) + 8);
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = (std::__shared_weak_count *)*((_QWORD *)&v289 + 1);
  if (*((_QWORD *)&v289 + 1))
  {
    v135 = (unint64_t *)(*((_QWORD *)&v289 + 1) + 8);
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  if (SHIBYTE(v291) < 0)
    operator delete(v290[0]);
  v137 = *a3;
  v314[0] = &off_1EA99FBD8;
  v314[1] = MIL::Operators::Common::ios18::CustomValueTypeInference::ValueTypeInferenceConstexprSparseBlockwiseShiftScale;
  v315 = v314;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v137 + 200))(v137, v314);
  v138 = v315;
  if (v315 == v314)
  {
    v139 = 4;
    v138 = v314;
  }
  else
  {
    if (!v315)
      goto LABEL_154;
    v139 = 5;
  }
  (*(void (**)(void))(*v138 + 8 * v139))();
LABEL_154:
  v140 = *a3;
  v312[0] = &off_1EA9A1AD8;
  v312[1] = a1;
  v313 = v312;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v140 + 256))(v140, v312);
  v141 = v313;
  if (v313 == v312)
  {
    v142 = 4;
    v141 = v312;
  }
  else
  {
    if (!v313)
      goto LABEL_159;
    v142 = 5;
  }
  (*(void (**)(void))(*v141 + 8 * v142))();
LABEL_159:
  MIL::Validation::TensorDTypeConstraints::Make(&v329);
  v143 = v329;
  std::string::basic_string[abi:ne180100]<0>(v284, "nonzero_data");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v284, 0, (uint64_t *)&v326);
  v286 = v326;
  if (v326)
  {
    v144 = (std::__shared_weak_count *)operator new();
    v145 = v326;
    v144->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v144->__shared_owners_ = 0;
    v144->__shared_weak_owners_ = 0;
    v144[1].__vftable = v145;
  }
  else
  {
    v144 = 0;
  }
  v287 = v144;
  v326 = 0;
  std::string::basic_string[abi:ne180100]<0>(v282, "SrcT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v143 + 3))(v143, &v286, v282);
  if (v283 < 0)
    operator delete(v282[0]);
  v146 = v287;
  if (v287)
  {
    p_shared_owners = (unint64_t *)&v287->__shared_owners_;
    do
      v148 = __ldaxr(p_shared_owners);
    while (__stlxr(v148 - 1, p_shared_owners));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  v149 = v326;
  v326 = 0;
  if (v149)
    (*((void (**)(std::__shared_weak_count_vtbl *))v149->~__shared_weak_count + 1))(v149);
  if (v285 < 0)
    operator delete(v284[0]);
  v150 = v329;
  std::string::basic_string[abi:ne180100]<0>(v278, "scale");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v278, 0, (uint64_t *)&v326);
  v280 = v326;
  if (v326)
  {
    v151 = (std::__shared_weak_count *)operator new();
    v152 = v326;
    v151->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v151->__shared_owners_ = 0;
    v151->__shared_weak_owners_ = 0;
    v151[1].__vftable = v152;
  }
  else
  {
    v151 = 0;
  }
  v281 = v151;
  v326 = 0;
  std::string::basic_string[abi:ne180100]<0>(v276, "DstT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v150 + 3))(v150, &v280, v276);
  if (v277 < 0)
    operator delete(v276[0]);
  v153 = v281;
  if (v281)
  {
    v154 = (unint64_t *)&v281->__shared_owners_;
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
      std::__shared_weak_count::__release_weak(v153);
    }
  }
  v156 = v326;
  v326 = 0;
  if (v156)
    (*((void (**)(std::__shared_weak_count_vtbl *))v156->~__shared_weak_count + 1))(v156);
  if (v279 < 0)
    operator delete(v278[0]);
  v157 = v329;
  std::string::basic_string[abi:ne180100]<0>(v272, "offset");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v272, 1, (uint64_t *)&v326);
  v274 = v326;
  if (v326)
  {
    v158 = (std::__shared_weak_count *)operator new();
    v159 = v326;
    v158->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v158->__shared_owners_ = 0;
    v158->__shared_weak_owners_ = 0;
    v158[1].__vftable = v159;
  }
  else
  {
    v158 = 0;
  }
  v275 = v158;
  v326 = 0;
  std::string::basic_string[abi:ne180100]<0>(v270, "OffsetT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v157 + 3))(v157, &v274, v270);
  if (v271 < 0)
    operator delete(v270[0]);
  v160 = v275;
  if (v275)
  {
    v161 = (unint64_t *)&v275->__shared_owners_;
    do
      v162 = __ldaxr(v161);
    while (__stlxr(v162 - 1, v161));
    if (!v162)
    {
      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
      std::__shared_weak_count::__release_weak(v160);
    }
  }
  v163 = v326;
  v326 = 0;
  if (v163)
    (*((void (**)(std::__shared_weak_count_vtbl *))v163->~__shared_weak_count + 1))(v163);
  if (v273 < 0)
    operator delete(v272[0]);
  v164 = v329;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 0, &v326);
  v268 = v326;
  if (v326)
  {
    v165 = (std::__shared_weak_count *)operator new();
    v166 = v326;
    v165->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v165->__shared_owners_ = 0;
    v165->__shared_weak_owners_ = 0;
    v165[1].__vftable = v166;
  }
  else
  {
    v165 = 0;
  }
  v269 = v165;
  v326 = 0;
  std::string::basic_string[abi:ne180100]<0>(v266, "DstT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v164 + 3))(v164, &v268, v266);
  if (v267 < 0)
    operator delete(v266[0]);
  v167 = v269;
  if (v269)
  {
    v168 = (unint64_t *)&v269->__shared_owners_;
    do
      v169 = __ldaxr(v168);
    while (__stlxr(v169 - 1, v168));
    if (!v169)
    {
      ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
      std::__shared_weak_count::__release_weak(v167);
    }
  }
  v170 = v326;
  v326 = 0;
  if (v170)
    (*((void (**)(std::__shared_weak_count_vtbl *))v170->~__shared_weak_count + 1))(v170);
  v171 = *a3;
  v264 = v329;
  if (v329)
  {
    v172 = (std::__shared_weak_count *)operator new();
    v173 = v329;
    v172->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v172->__shared_owners_ = 0;
    v172->__shared_weak_owners_ = 0;
    v172[1].__vftable = (std::__shared_weak_count_vtbl *)v173;
  }
  else
  {
    v172 = 0;
  }
  v265 = v172;
  v329 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v171 + 56))(v171, &v264);
  v174 = v265;
  if (v265)
  {
    v175 = (unint64_t *)&v265->__shared_owners_;
    do
      v176 = __ldaxr(v175);
    while (__stlxr(v176 - 1, v175));
    if (!v176)
    {
      ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
      std::__shared_weak_count::__release_weak(v174);
    }
  }
  v177 = v329;
  v329 = 0;
  if (v177)
    (*((void (**)(void **))*v177 + 1))(v177);
  MIL::Validation::TensorRankValueConstraints::Make(&v329);
  v178 = v329;
  std::string::basic_string[abi:ne180100]<0>(v260, "data_mask");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v260, 0, (uint64_t *)&v326);
  v262 = v326;
  if (v326)
  {
    v179 = (std::__shared_weak_count *)operator new();
    v180 = v326;
    v179->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v179->__shared_owners_ = 0;
    v179->__shared_weak_owners_ = 0;
    v179[1].__vftable = v180;
  }
  else
  {
    v179 = 0;
  }
  v263 = v179;
  v326 = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))*v178 + 4))(v178, &v262, 1, 0x7FFFFFFFFFFFFFFFLL);
  v181 = v263;
  if (v263)
  {
    v182 = (unint64_t *)&v263->__shared_owners_;
    do
      v183 = __ldaxr(v182);
    while (__stlxr(v183 - 1, v182));
    if (!v183)
    {
      ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
      std::__shared_weak_count::__release_weak(v181);
    }
  }
  v184 = v326;
  v326 = 0;
  if (v184)
    (*((void (**)(std::__shared_weak_count_vtbl *))v184->~__shared_weak_count + 1))(v184);
  if (v261 < 0)
    operator delete(v260[0]);
  v185 = v329;
  std::string::basic_string[abi:ne180100]<0>(v256, "scale");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v256, 0, (uint64_t *)&v326);
  v258 = v326;
  if (v326)
  {
    v186 = (std::__shared_weak_count *)operator new();
    v187 = v326;
    v186->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v186->__shared_owners_ = 0;
    v186->__shared_weak_owners_ = 0;
    v186[1].__vftable = v187;
  }
  else
  {
    v186 = 0;
  }
  v259 = v186;
  v326 = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))*v185 + 4))(v185, &v258, 1, 0x7FFFFFFFFFFFFFFFLL);
  v188 = v259;
  if (v259)
  {
    v189 = (unint64_t *)&v259->__shared_owners_;
    do
      v190 = __ldaxr(v189);
    while (__stlxr(v190 - 1, v189));
    if (!v190)
    {
      ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
      std::__shared_weak_count::__release_weak(v188);
    }
  }
  v191 = v326;
  v326 = 0;
  if (v191)
    (*((void (**)(std::__shared_weak_count_vtbl *))v191->~__shared_weak_count + 1))(v191);
  if (v257 < 0)
    operator delete(v256[0]);
  v192 = v329;
  std::string::basic_string[abi:ne180100]<0>(v252, "offset");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v252, 1, (uint64_t *)&v326);
  v254 = v326;
  if (v326)
  {
    v193 = (std::__shared_weak_count *)operator new();
    v194 = v326;
    v193->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v193->__shared_owners_ = 0;
    v193->__shared_weak_owners_ = 0;
    v193[1].__vftable = v194;
  }
  else
  {
    v193 = 0;
  }
  v255 = v193;
  v326 = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))*v192 + 4))(v192, &v254, 1, 0x7FFFFFFFFFFFFFFFLL);
  v195 = v255;
  if (v255)
  {
    v196 = (unint64_t *)&v255->__shared_owners_;
    do
      v197 = __ldaxr(v196);
    while (__stlxr(v197 - 1, v196));
    if (!v197)
    {
      ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
      std::__shared_weak_count::__release_weak(v195);
    }
  }
  v198 = v326;
  v326 = 0;
  if (v198)
    (*((void (**)(std::__shared_weak_count_vtbl *))v198->~__shared_weak_count + 1))(v198);
  if (v253 < 0)
    operator delete(v252[0]);
  v199 = v329;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v326);
  v250 = v326;
  if (v326)
  {
    v200 = (std::__shared_weak_count *)operator new();
    v201 = v326;
    v200->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v200->__shared_owners_ = 0;
    v200->__shared_weak_owners_ = 0;
    v200[1].__vftable = v201;
  }
  else
  {
    v200 = 0;
  }
  v251 = v200;
  v326 = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))*v199 + 4))(v199, &v250, 1, 0x7FFFFFFFFFFFFFFFLL);
  v202 = v251;
  if (v251)
  {
    v203 = (unint64_t *)&v251->__shared_owners_;
    do
      v204 = __ldaxr(v203);
    while (__stlxr(v204 - 1, v203));
    if (!v204)
    {
      ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
      std::__shared_weak_count::__release_weak(v202);
    }
  }
  v205 = v326;
  v326 = 0;
  if (v205)
    (*((void (**)(std::__shared_weak_count_vtbl *))v205->~__shared_weak_count + 1))(v205);
  v206 = *a3;
  v248 = v329;
  if (v329)
  {
    v207 = (std::__shared_weak_count *)operator new();
    v208 = v329;
    v207->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FC78;
    v207->__shared_owners_ = 0;
    v207->__shared_weak_owners_ = 0;
    v207[1].__vftable = (std::__shared_weak_count_vtbl *)v208;
  }
  else
  {
    v207 = 0;
  }
  v249 = v207;
  v329 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v206 + 56))(v206, &v248);
  v209 = v249;
  if (v249)
  {
    v210 = (unint64_t *)&v249->__shared_owners_;
    do
      v211 = __ldaxr(v210);
    while (__stlxr(v211 - 1, v210));
    if (!v211)
    {
      ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
      std::__shared_weak_count::__release_weak(v209);
    }
  }
  v212 = v329;
  v329 = 0;
  if (v212)
    (*((void (**)(void **))*v212 + 1))(v212);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v329);
  v213 = v329;
  std::string::basic_string[abi:ne180100]<0>(v244, "nonzero_data");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v244, 0, (uint64_t *)&v326);
  v246 = v326;
  if (v326)
  {
    v214 = (std::__shared_weak_count *)operator new();
    v215 = v326;
    v214->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v214->__shared_owners_ = 0;
    v214->__shared_weak_owners_ = 0;
    v214[1].__vftable = v215;
  }
  else
  {
    v214 = 0;
  }
  v247 = v214;
  v326 = 0;
  std::string::basic_string[abi:ne180100]<0>(v242, "D");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v213 + 3))(v213, &v246, 0, v242);
  if (v243 < 0)
    operator delete(v242[0]);
  v216 = v247;
  if (v247)
  {
    v217 = (unint64_t *)&v247->__shared_owners_;
    do
      v218 = __ldaxr(v217);
    while (__stlxr(v218 - 1, v217));
    if (!v218)
    {
      ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
      std::__shared_weak_count::__release_weak(v216);
    }
  }
  v219 = v326;
  v326 = 0;
  if (v219)
    (*((void (**)(std::__shared_weak_count_vtbl *))v219->~__shared_weak_count + 1))(v219);
  if (v245 < 0)
    operator delete(v244[0]);
  v220 = v329;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 0, &v326);
  v240 = v326;
  if (v326)
  {
    v221 = (std::__shared_weak_count *)operator new();
    v222 = v326;
    v221->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v221->__shared_owners_ = 0;
    v221->__shared_weak_owners_ = 0;
    v221[1].__vftable = v222;
  }
  else
  {
    v221 = 0;
  }
  v241 = v221;
  v326 = 0;
  std::string::basic_string[abi:ne180100]<0>(v238, "D");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v220 + 3))(v220, &v240, 0, v238);
  if (v239 < 0)
    operator delete(v238[0]);
  v223 = v241;
  if (v241)
  {
    v224 = (unint64_t *)&v241->__shared_owners_;
    do
      v225 = __ldaxr(v224);
    while (__stlxr(v225 - 1, v224));
    if (!v225)
    {
      ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
      std::__shared_weak_count::__release_weak(v223);
    }
  }
  v226 = v326;
  v326 = 0;
  if (v226)
    (*((void (**)(std::__shared_weak_count_vtbl *))v226->~__shared_weak_count + 1))(v226);
  v227 = *a3;
  v236 = v329;
  if (v329)
  {
    v228 = (std::__shared_weak_count *)operator new();
    v229 = v329;
    v228->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v228->__shared_owners_ = 0;
    v228->__shared_weak_owners_ = 0;
    v228[1].__vftable = (std::__shared_weak_count_vtbl *)v229;
  }
  else
  {
    v228 = 0;
  }
  v237 = v228;
  v329 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v227 + 56))(v227, &v236);
  v230 = v237;
  if (v237)
  {
    v231 = (unint64_t *)&v237->__shared_owners_;
    do
      v232 = __ldaxr(v231);
    while (__stlxr(v232 - 1, v231));
    if (!v232)
    {
      ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
      std::__shared_weak_count::__release_weak(v230);
    }
  }
  v233 = v329;
  v329 = 0;
  if (v233)
    (*((void (**)(void **))*v233 + 1))(v233);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v299, 0);
  result = (uint64_t)v311;
  if (v311)
  {
    v235 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v311);
    return MEMORY[0x1E0C023A0](v235, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0957C9C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 144);
  *(_QWORD *)(v2 - 144) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x2A0], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x310], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios18::ConstexprSparseToDense::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  void **v8;
  unsigned __int8 *v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  unsigned __int8 *v29;
  void *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  char **v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t *v62;
  char *v63;
  char *v64;
  char *v65;
  __int128 v66;
  char *v67;
  char *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  char **v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  void **v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count_vtbl *v95;
  std::__shared_weak_count *v96;
  unint64_t *p_shared_owners;
  unint64_t v98;
  void *v99;
  void **v100;
  std::__shared_weak_count *v101;
  std::__shared_weak_count_vtbl *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  void **v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  void **v113;
  void **v114;
  std::__shared_weak_count *v115;
  std::__shared_weak_count_vtbl *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  void *v120;
  void **v121;
  std::__shared_weak_count *v122;
  std::__shared_weak_count_vtbl *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  void **v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  void **v134;
  void **v135;
  std::__shared_weak_count *v136;
  std::__shared_weak_count_vtbl *v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  void *v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  void **v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  void **v148;
  uint64_t result;
  uint64_t v150;
  void **v151;
  std::__shared_weak_count *v152;
  void *v153[2];
  char v154;
  void *v155[2];
  char v156;
  void *v157;
  std::__shared_weak_count *v158;
  void **v159;
  std::__shared_weak_count *v160;
  void *v161;
  std::__shared_weak_count *v162;
  void *v163[2];
  char v164;
  void *v165;
  std::__shared_weak_count *v166;
  void **v167;
  std::__shared_weak_count *v168;
  void *v169[2];
  char v170;
  void *v171;
  std::__shared_weak_count *v172;
  void *v173[2];
  char v174;
  void *v175[2];
  char v176;
  void *v177;
  std::__shared_weak_count *v178;
  __int128 v179;
  __int128 v180;
  void *v181[2];
  uint64_t v182;
  void *v183;
  void *v184;
  _QWORD *v185;
  __n128 v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD *v189;
  char **v190;
  void *__p;
  void *v192;
  _QWORD *v193;
  void *v194;
  void *v195;
  _QWORD *v196;
  void *v197;
  void *v198;
  _QWORD *v199;
  void *v200;
  void *v201;
  _QWORD *v202;
  void *v203;
  void *v204;
  _QWORD *v205;
  __n128 v206;
  __n128 v207;
  _QWORD *v208;
  void *v209;
  void *v210;
  char *v211;
  char *v212;
  char **v213;
  _QWORD v214[3];
  _QWORD *v215;
  _QWORD v216[3];
  _QWORD *v217;
  _BYTE v218[24];
  _BYTE *v219;
  _QWORD v220[3];
  _QWORD *v221;
  void *v222;
  void *v223;
  _QWORD *v224;
  void **v225;
  void **v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;

  v232 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v208 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (void **)operator new(8uLL);
  v225 = v8;
  *v8 = (void *)v7;
  v226 = v8 + 1;
  v227 = (uint64_t)(v8 + 1);
  v222 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 21, (uint64_t)&v225);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v222, 1, &v207);
  MIL::IRParameter::Make(&v207, (uint64_t *)&v209);
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "mask", (uint64_t *)&v209);
  v10 = v209;
  v209 = 0;
  if (v10)
    (*(void (**)(void *))(*(_QWORD *)v10 + 8))(v10);
  v11 = (std::__shared_weak_count *)v207.n128_u64[1];
  if (v207.n128_u64[1])
  {
    v12 = (unint64_t *)(v207.n128_u64[1] + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v225)
  {
    v226 = v225;
    operator delete(v225);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v9 + 5) + 32))(*((_QWORD *)v9 + 5), 1);
  v14 = v208;
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = (char *)operator new(8uLL);
  v209 = v16;
  *(_QWORD *)v16 = v15;
  v211 = v16 + 8;
  v210 = v16 + 8;
  v225 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 13, (uint64_t)&v209);
  v17 = MIL::IRUnknownDimension::Make(a1, 0);
  v18 = operator new(8uLL);
  v222 = v18;
  *v18 = v17;
  v223 = v18 + 1;
  v224 = v18 + 1;
  v226 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 20, (uint64_t)&v222);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = operator new(8uLL);
  v203 = v20;
  *v20 = v19;
  v204 = v20 + 1;
  v205 = v20 + 1;
  v227 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v203);
  v21 = MIL::IRUnknownDimension::Make(a1, 0);
  v22 = operator new(8uLL);
  v200 = v22;
  *v22 = v21;
  v201 = v22 + 1;
  v202 = v22 + 1;
  v228 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v200);
  v23 = MIL::IRUnknownDimension::Make(a1, 0);
  v24 = operator new(8uLL);
  v197 = v24;
  *v24 = v23;
  v198 = v24 + 1;
  v199 = v24 + 1;
  v229 = MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v197);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = operator new(8uLL);
  v194 = v26;
  *v26 = v25;
  v195 = v26 + 1;
  v196 = v26 + 1;
  v230 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v194);
  v27 = MIL::IRUnknownDimension::Make(a1, 0);
  v28 = operator new(8uLL);
  __p = v28;
  *v28 = v27;
  v192 = v28 + 1;
  v193 = v28 + 1;
  v231 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v225, 7, &v206);
  MIL::IRParameter::Make(&v206, (uint64_t *)&v183);
  v29 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v14, "nonzero_data", (uint64_t *)&v183);
  v30 = v183;
  v183 = 0;
  if (v30)
    (*(void (**)(void *))(*(_QWORD *)v30 + 8))(v30);
  v31 = (std::__shared_weak_count *)v206.n128_u64[1];
  if (v206.n128_u64[1])
  {
    v32 = (unint64_t *)(v206.n128_u64[1] + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (__p)
  {
    v192 = __p;
    operator delete(__p);
  }
  if (v194)
  {
    v195 = v194;
    operator delete(v194);
  }
  if (v197)
  {
    v198 = v197;
    operator delete(v197);
  }
  if (v200)
  {
    v201 = v200;
    operator delete(v200);
  }
  if (v203)
  {
    v204 = v203;
    operator delete(v203);
  }
  if (v222)
  {
    v223 = v222;
    operator delete(v222);
  }
  if (v209)
  {
    v210 = v209;
    operator delete(v209);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v29 + 5) + 32))(*((_QWORD *)v29 + 5), 1);
  v190 = 0;
  v34 = operator new();
  *(_QWORD *)v34 = 0;
  *(_QWORD *)(v34 + 8) = 0;
  *(_QWORD *)(v34 + 16) = 0;
  v225 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v190, (void **)v34);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v225, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v190, 1uLL);
  v35 = v190;
  v36 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v37 = operator new(8uLL);
  v222 = v37;
  *v37 = v36;
  v223 = v37 + 1;
  v224 = v37 + 1;
  v225 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 13, (uint64_t)&v222);
  v38 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v39 = operator new(8uLL);
  v203 = v39;
  *v39 = v38;
  v204 = v39 + 1;
  v205 = v39 + 1;
  v226 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 20, (uint64_t)&v203);
  v40 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v41 = operator new(8uLL);
  v200 = v41;
  *v41 = v40;
  v201 = v41 + 1;
  v202 = v41 + 1;
  v227 = MIL::IRTensorValueType::MakeWithShape(a1, 9, (uint64_t)&v200);
  v42 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v43 = operator new(8uLL);
  v197 = v43;
  *v43 = v42;
  v198 = v43 + 1;
  v199 = v43 + 1;
  v228 = MIL::IRTensorValueType::MakeWithShape(a1, 14, (uint64_t)&v197);
  v44 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v45 = operator new(8uLL);
  v194 = v45;
  *v45 = v44;
  v195 = v45 + 1;
  v196 = v45 + 1;
  v229 = MIL::IRTensorValueType::MakeWithShape(a1, 7, (uint64_t)&v194);
  v46 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v47 = operator new(8uLL);
  __p = v47;
  *v47 = v46;
  v192 = v47 + 1;
  v193 = v47 + 1;
  v230 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v48 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v49 = operator new(8uLL);
  v183 = v49;
  *v49 = v48;
  v184 = v49 + 1;
  v185 = v49 + 1;
  v231 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v183);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v225, 7, &v186);
  MIL::IRParameter::Make(&v186, &v187);
  v50 = v187;
  v188 = v187;
  if (v187)
  {
    v51 = (_QWORD *)operator new();
    v52 = v187;
    *v51 = &unk_1EA99F888;
    v51[1] = 0;
    v51[2] = 0;
    v51[3] = v52;
  }
  else
  {
    v51 = 0;
  }
  v189 = v51;
  v187 = 0;
  v53 = v35[2];
  v54 = v35[1];
  if (v54 >= v53)
  {
    v56 = (v54 - *v35) >> 4;
    v57 = v56 + 1;
    if ((unint64_t)(v56 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v58 = v53 - *v35;
    if (v58 >> 3 > v57)
      v57 = v58 >> 3;
    if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF0)
      v59 = 0xFFFFFFFFFFFFFFFLL;
    else
      v59 = v57;
    v213 = v35 + 2;
    v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v35 + 2), v59);
    v62 = (uint64_t *)&v60[16 * v56];
    *v62 = v50;
    v62[1] = (uint64_t)v51;
    v188 = 0;
    v189 = 0;
    v64 = *v35;
    v63 = v35[1];
    if (v63 == *v35)
    {
      v67 = v35[1];
      v65 = &v60[16 * v56];
    }
    else
    {
      v65 = &v60[16 * v56];
      do
      {
        v66 = *((_OWORD *)v63 - 1);
        v63 -= 16;
        *((_OWORD *)v65 - 1) = v66;
        v65 -= 16;
        *(_QWORD *)v63 = 0;
        *((_QWORD *)v63 + 1) = 0;
      }
      while (v63 != v64);
      v67 = *v35;
      v63 = v35[1];
    }
    v55 = (char *)(v62 + 2);
    *v35 = v65;
    v210 = v67;
    v35[1] = (char *)(v62 + 2);
    v211 = v63;
    v68 = v35[2];
    v35[2] = &v60[16 * v61];
    v212 = v68;
    v209 = v67;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v209);
  }
  else
  {
    *(_QWORD *)v54 = v50;
    *((_QWORD *)v54 + 1) = v51;
    v55 = v54 + 16;
    v188 = 0;
    v189 = 0;
  }
  v35[1] = v55;
  v69 = v187;
  v187 = 0;
  if (v69)
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
  v70 = (std::__shared_weak_count *)v186.n128_u64[1];
  if (v186.n128_u64[1])
  {
    v71 = (unint64_t *)(v186.n128_u64[1] + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (v183)
  {
    v184 = v183;
    operator delete(v183);
  }
  if (__p)
  {
    v192 = __p;
    operator delete(__p);
  }
  if (v194)
  {
    v195 = v194;
    operator delete(v194);
  }
  if (v197)
  {
    v198 = v197;
    operator delete(v197);
  }
  if (v200)
  {
    v201 = v200;
    operator delete(v200);
  }
  if (v203)
  {
    v204 = v203;
    operator delete(v203);
  }
  if (v222)
  {
    v223 = v222;
    operator delete(v222);
  }
  *(_OWORD *)v181 = *(_OWORD *)a2;
  v182 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v73 = (uint64_t)v208;
  *(_QWORD *)&v180 = v208;
  if (v208)
  {
    v74 = (_QWORD *)operator new();
    *v74 = &unk_1EA99F8E8;
    v74[1] = 0;
    v74[2] = 0;
    v74[3] = v73;
  }
  else
  {
    v74 = 0;
  }
  *((_QWORD *)&v180 + 1) = v74;
  v208 = 0;
  *(_QWORD *)&v179 = v190;
  if (v190)
  {
    v75 = (_QWORD *)operator new();
    v76 = v190;
    *v75 = &unk_1EA99F948;
    v75[1] = 0;
    v75[2] = 0;
    v75[3] = v76;
  }
  else
  {
    v75 = 0;
  }
  *((_QWORD *)&v179 + 1) = v75;
  v190 = 0;
  v220[0] = &unk_1EA99FAC8;
  v220[1] = MIL::Operators::Common::ios18::CustomValidators::ValidateConstexprSparseToDense;
  v221 = v220;
  v219 = 0;
  MIL::IROperator::Make((__int128 *)v181, &v180, &v179, (uint64_t)v220, (uint64_t)v218, a3);
  v77 = v219;
  if (v219 == v218)
  {
    v78 = 4;
    v77 = v218;
  }
  else
  {
    if (!v219)
      goto LABEL_80;
    v78 = 5;
  }
  (*(void (**)(void))(*v77 + 8 * v78))();
LABEL_80:
  v79 = v221;
  if (v221 == v220)
  {
    v80 = 4;
    v79 = v220;
    goto LABEL_84;
  }
  if (v221)
  {
    v80 = 5;
LABEL_84:
    (*(void (**)(void))(*v79 + 8 * v80))();
  }
  v81 = (std::__shared_weak_count *)*((_QWORD *)&v179 + 1);
  if (*((_QWORD *)&v179 + 1))
  {
    v82 = (unint64_t *)(*((_QWORD *)&v179 + 1) + 8);
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = (std::__shared_weak_count *)*((_QWORD *)&v180 + 1);
  if (*((_QWORD *)&v180 + 1))
  {
    v85 = (unint64_t *)(*((_QWORD *)&v180 + 1) + 8);
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  if (SHIBYTE(v182) < 0)
    operator delete(v181[0]);
  v87 = *a3;
  v216[0] = &off_1EA99FBD8;
  v216[1] = MIL::Operators::Common::ios18::CustomValueTypeInference::ValueTypeInferenceConstexprSparseToDense;
  v217 = v216;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v87 + 200))(v87, v216);
  v88 = v217;
  if (v217 == v216)
  {
    v89 = 4;
    v88 = v216;
  }
  else
  {
    if (!v217)
      goto LABEL_102;
    v89 = 5;
  }
  (*(void (**)(void))(*v88 + 8 * v89))();
LABEL_102:
  v90 = *a3;
  v214[0] = &off_1EA9A1B58;
  v214[1] = a1;
  v215 = v214;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v90 + 144))(v90, v214);
  v91 = v215;
  if (v215 == v214)
  {
    v92 = 4;
    v91 = v214;
  }
  else
  {
    if (!v215)
      goto LABEL_107;
    v92 = 5;
  }
  (*(void (**)(void))(*v91 + 8 * v92))();
LABEL_107:
  MIL::Validation::TensorDTypeConstraints::Make(&v225);
  v93 = v225;
  std::string::basic_string[abi:ne180100]<0>(v175, "nonzero_data");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v175, 0, (uint64_t *)&v209);
  v177 = v209;
  if (v209)
  {
    v94 = (std::__shared_weak_count *)operator new();
    v95 = (std::__shared_weak_count_vtbl *)v209;
    v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v94->__shared_owners_ = 0;
    v94->__shared_weak_owners_ = 0;
    v94[1].__vftable = v95;
  }
  else
  {
    v94 = 0;
  }
  v178 = v94;
  v209 = 0;
  std::string::basic_string[abi:ne180100]<0>(v173, "T");
  (*((void (**)(void **, void **, void **))*v93 + 3))(v93, &v177, v173);
  if (v174 < 0)
    operator delete(v173[0]);
  v96 = v178;
  if (v178)
  {
    p_shared_owners = (unint64_t *)&v178->__shared_owners_;
    do
      v98 = __ldaxr(p_shared_owners);
    while (__stlxr(v98 - 1, p_shared_owners));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = v209;
  v209 = 0;
  if (v99)
    (*(void (**)(void *))(*(_QWORD *)v99 + 8))(v99);
  if (v176 < 0)
    operator delete(v175[0]);
  v100 = v225;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v209);
  v171 = v209;
  if (v209)
  {
    v101 = (std::__shared_weak_count *)operator new();
    v102 = (std::__shared_weak_count_vtbl *)v209;
    v101->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v101->__shared_owners_ = 0;
    v101->__shared_weak_owners_ = 0;
    v101[1].__vftable = v102;
  }
  else
  {
    v101 = 0;
  }
  v172 = v101;
  v209 = 0;
  std::string::basic_string[abi:ne180100]<0>(v169, "T");
  (*((void (**)(void **, void **, void **))*v100 + 3))(v100, &v171, v169);
  if (v170 < 0)
    operator delete(v169[0]);
  v103 = v172;
  if (v172)
  {
    v104 = (unint64_t *)&v172->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v106 = v209;
  v209 = 0;
  if (v106)
    (*(void (**)(void *))(*(_QWORD *)v106 + 8))(v106);
  v107 = *a3;
  v167 = v225;
  if (v225)
  {
    v108 = (std::__shared_weak_count *)operator new();
    v109 = v225;
    v108->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v108->__shared_owners_ = 0;
    v108->__shared_weak_owners_ = 0;
    v108[1].__vftable = (std::__shared_weak_count_vtbl *)v109;
  }
  else
  {
    v108 = 0;
  }
  v168 = v108;
  v225 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v107 + 56))(v107, &v167);
  v110 = v168;
  if (v168)
  {
    v111 = (unint64_t *)&v168->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  v113 = v225;
  v225 = 0;
  if (v113)
    (*((void (**)(void **))*v113 + 1))(v113);
  MIL::Validation::TensorRankValueConstraints::Make(&v225);
  v114 = v225;
  std::string::basic_string[abi:ne180100]<0>(v163, "mask");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v163, 0, (uint64_t *)&v209);
  v165 = v209;
  if (v209)
  {
    v115 = (std::__shared_weak_count *)operator new();
    v116 = (std::__shared_weak_count_vtbl *)v209;
    v115->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v115->__shared_owners_ = 0;
    v115->__shared_weak_owners_ = 0;
    v115[1].__vftable = v116;
  }
  else
  {
    v115 = 0;
  }
  v166 = v115;
  v209 = 0;
  (*((void (**)(void **, void **, uint64_t, uint64_t))*v114 + 4))(v114, &v165, 1, 0x7FFFFFFFFFFFFFFFLL);
  v117 = v166;
  if (v166)
  {
    v118 = (unint64_t *)&v166->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = v209;
  v209 = 0;
  if (v120)
    (*(void (**)(void *))(*(_QWORD *)v120 + 8))(v120);
  if (v164 < 0)
    operator delete(v163[0]);
  v121 = v225;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v209);
  v161 = v209;
  if (v209)
  {
    v122 = (std::__shared_weak_count *)operator new();
    v123 = (std::__shared_weak_count_vtbl *)v209;
    v122->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v122->__shared_owners_ = 0;
    v122->__shared_weak_owners_ = 0;
    v122[1].__vftable = v123;
  }
  else
  {
    v122 = 0;
  }
  v162 = v122;
  v209 = 0;
  (*((void (**)(void **, void **, uint64_t, uint64_t))*v121 + 4))(v121, &v161, 1, 0x7FFFFFFFFFFFFFFFLL);
  v124 = v162;
  if (v162)
  {
    v125 = (unint64_t *)&v162->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = v209;
  v209 = 0;
  if (v127)
    (*(void (**)(void *))(*(_QWORD *)v127 + 8))(v127);
  v128 = *a3;
  v159 = v225;
  if (v225)
  {
    v129 = (std::__shared_weak_count *)operator new();
    v130 = v225;
    v129->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FC78;
    v129->__shared_owners_ = 0;
    v129->__shared_weak_owners_ = 0;
    v129[1].__vftable = (std::__shared_weak_count_vtbl *)v130;
  }
  else
  {
    v129 = 0;
  }
  v160 = v129;
  v225 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v128 + 56))(v128, &v159);
  v131 = v160;
  if (v160)
  {
    v132 = (unint64_t *)&v160->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = v225;
  v225 = 0;
  if (v134)
    (*((void (**)(void **))*v134 + 1))(v134);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v225);
  v135 = v225;
  std::string::basic_string[abi:ne180100]<0>(v155, "nonzero_data");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v155, 0, (uint64_t *)&v209);
  v157 = v209;
  if (v209)
  {
    v136 = (std::__shared_weak_count *)operator new();
    v137 = (std::__shared_weak_count_vtbl *)v209;
    v136->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v136->__shared_owners_ = 0;
    v136->__shared_weak_owners_ = 0;
    v136[1].__vftable = v137;
  }
  else
  {
    v136 = 0;
  }
  v158 = v136;
  v209 = 0;
  std::string::basic_string[abi:ne180100]<0>(v153, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v135 + 3))(v135, &v157, 0, v153);
  if (v154 < 0)
    operator delete(v153[0]);
  v138 = v158;
  if (v158)
  {
    v139 = (unint64_t *)&v158->__shared_owners_;
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }
  v141 = v209;
  v209 = 0;
  if (v141)
    (*(void (**)(void *))(*(_QWORD *)v141 + 8))(v141);
  if (v156 < 0)
    operator delete(v155[0]);
  v142 = *a3;
  v151 = v225;
  if (v225)
  {
    v143 = (std::__shared_weak_count *)operator new();
    v144 = v225;
    v143->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v143->__shared_owners_ = 0;
    v143->__shared_weak_owners_ = 0;
    v143[1].__vftable = (std::__shared_weak_count_vtbl *)v144;
  }
  else
  {
    v143 = 0;
  }
  v152 = v143;
  v225 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v142 + 56))(v142, &v151);
  v145 = v152;
  if (v152)
  {
    v146 = (unint64_t *)&v152->__shared_owners_;
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  v148 = v225;
  v225 = 0;
  if (v148)
    (*((void (**)(void **))*v148 + 1))(v148);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v190, 0);
  result = (uint64_t)v208;
  if (v208)
  {
    v150 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v208);
    return MEMORY[0x1E0C023A0](v150, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E09595A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58)
{
  uint64_t *v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;

  v61 = *(_QWORD *)(v59 - 128);
  *(_QWORD *)(v59 - 128) = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  v62 = *v58;
  *v58 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x228], 0);
  _Unwind_Resume(a1);
}

void std::__function::__func<MIL::Operators::Common::ios18::ConstexprBlockwiseShiftScale::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios18::ConstexprBlockwiseShiftScale::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<MIL::Operators::Common::ios18::ConstexprBlockwiseShiftScale::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios18::ConstexprBlockwiseShiftScale::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1EA9A18C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MIL::Operators::Common::ios18::ConstexprBlockwiseShiftScale::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios18::ConstexprBlockwiseShiftScale::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1EA9A18C8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<MIL::Operators::Common::ios18::ConstexprBlockwiseShiftScale::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios18::ConstexprBlockwiseShiftScale::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::operator()(uint64_t a1@<X0>, MIL::MILContext *a2@<X1>, _QWORD *a3@<X8>)
{
  MIL::Operators::Common::ios18::CustomGetConstant::GetConstantConstexprBlockwiseShiftScale(*(void (****)(MIL::MILContextImpl *__hidden))(a1 + 8), a2, a3);
}

uint64_t std::__function::__func<MIL::Operators::Common::ios18::ConstexprBlockwiseShiftScale::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios18::ConstexprBlockwiseShiftScale::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Operators::Common::ios18::ConstexprBlockwiseShiftScale::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios18::ConstexprBlockwiseShiftScale::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::target_type()
{
}

void std::__function::__func<MIL::Operators::Common::ios18::ConstexprCast::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios18::ConstexprCast::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<MIL::Operators::Common::ios18::ConstexprCast::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios18::ConstexprCast::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1EA9A1948;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MIL::Operators::Common::ios18::ConstexprCast::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios18::ConstexprCast::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1EA9A1948;
  a2[1] = v2;
  return result;
}

void std::__function::__func<MIL::Operators::Common::ios18::ConstexprCast::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios18::ConstexprCast::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::operator()(uint64_t a1@<X0>, MIL::MILContext *a2@<X1>, MIL::IRValue **a3@<X8>)
{
  MIL::Operators::Common::ios18::CustomGetConstant::GetConstantConstexprCast(*(void (****)(MIL::MILContextImpl *__hidden))(a1 + 8), a2, a3);
}

uint64_t std::__function::__func<MIL::Operators::Common::ios18::ConstexprCast::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios18::ConstexprCast::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Operators::Common::ios18::ConstexprCast::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios18::ConstexprCast::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::target_type()
{
}

void std::__function::__func<MIL::Operators::Common::ios18::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios18::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<MIL::Operators::Common::ios18::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios18::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1EA9A19C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MIL::Operators::Common::ios18::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios18::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1EA9A19C8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<MIL::Operators::Common::ios18::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios18::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::operator()(MIL::MILContext *a1@<X1>, MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense **a2@<X8>)
{
  MIL::Operators::Common::ios18::CustomGetConstant::GetConstantConstexprLutToDense(a1, a2);
}

uint64_t std::__function::__func<MIL::Operators::Common::ios18::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios18::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Operators::Common::ios18::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios18::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::target_type()
{
}

void std::__function::__func<MIL::Operators::Common::ios18::ConstexprLutToSparse::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios18::ConstexprLutToSparse::Make(MIL::MILContext &,std::string)::$_0>,std::vector<std::shared_ptr<MIL::IRValue const>> ()(MIL::IROperation const&)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<MIL::Operators::Common::ios18::ConstexprLutToSparse::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios18::ConstexprLutToSparse::Make(MIL::MILContext &,std::string)::$_0>,std::vector<std::shared_ptr<MIL::IRValue const>> ()(MIL::IROperation const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1EA9A1A48;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MIL::Operators::Common::ios18::ConstexprLutToSparse::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios18::ConstexprLutToSparse::Make(MIL::MILContext &,std::string)::$_0>,std::vector<std::shared_ptr<MIL::IRValue const>> ()(MIL::IROperation const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1EA9A1A48;
  a2[1] = v2;
  return result;
}

void std::__function::__func<MIL::Operators::Common::ios18::ConstexprLutToSparse::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios18::ConstexprLutToSparse::Make(MIL::MILContext &,std::string)::$_0>,std::vector<std::shared_ptr<MIL::IRValue const>> ()(MIL::IROperation const&)>::operator()(MIL::MILContext *a1@<X1>, _QWORD *a2@<X8>)
{
  MIL::Operators::Common::ios18::CustomGetConstant::GetConstantsConstexprLutToSparse(a1, a2);
}

uint64_t std::__function::__func<MIL::Operators::Common::ios18::ConstexprLutToSparse::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios18::ConstexprLutToSparse::Make(MIL::MILContext &,std::string)::$_0>,std::vector<std::shared_ptr<MIL::IRValue const>> ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Operators::Common::ios18::ConstexprLutToSparse::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios18::ConstexprLutToSparse::Make(MIL::MILContext &,std::string)::$_0>,std::vector<std::shared_ptr<MIL::IRValue const>> ()(MIL::IROperation const&)>::target_type()
{
}

void std::__function::__func<MIL::Operators::Common::ios18::ConstexprSparseBlockwiseShiftScale::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios18::ConstexprSparseBlockwiseShiftScale::Make(MIL::MILContext &,std::string)::$_0>,std::vector<std::shared_ptr<MIL::IRValue const>> ()(MIL::IROperation const&)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<MIL::Operators::Common::ios18::ConstexprSparseBlockwiseShiftScale::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios18::ConstexprSparseBlockwiseShiftScale::Make(MIL::MILContext &,std::string)::$_0>,std::vector<std::shared_ptr<MIL::IRValue const>> ()(MIL::IROperation const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1EA9A1AD8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MIL::Operators::Common::ios18::ConstexprSparseBlockwiseShiftScale::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios18::ConstexprSparseBlockwiseShiftScale::Make(MIL::MILContext &,std::string)::$_0>,std::vector<std::shared_ptr<MIL::IRValue const>> ()(MIL::IROperation const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1EA9A1AD8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<MIL::Operators::Common::ios18::ConstexprSparseBlockwiseShiftScale::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios18::ConstexprSparseBlockwiseShiftScale::Make(MIL::MILContext &,std::string)::$_0>,std::vector<std::shared_ptr<MIL::IRValue const>> ()(MIL::IROperation const&)>::operator()(MIL::MILContext *a1@<X1>, _QWORD *a2@<X8>)
{
  MIL::Operators::Common::ios18::CustomGetConstant::GetConstantsConstexprSparseBlockwiseShiftScale(a1, a2);
}

uint64_t std::__function::__func<MIL::Operators::Common::ios18::ConstexprSparseBlockwiseShiftScale::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios18::ConstexprSparseBlockwiseShiftScale::Make(MIL::MILContext &,std::string)::$_0>,std::vector<std::shared_ptr<MIL::IRValue const>> ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Operators::Common::ios18::ConstexprSparseBlockwiseShiftScale::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios18::ConstexprSparseBlockwiseShiftScale::Make(MIL::MILContext &,std::string)::$_0>,std::vector<std::shared_ptr<MIL::IRValue const>> ()(MIL::IROperation const&)>::target_type()
{
}

void std::__function::__func<MIL::Operators::Common::ios18::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios18::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<MIL::Operators::Common::ios18::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios18::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1EA9A1B58;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MIL::Operators::Common::ios18::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios18::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1EA9A1B58;
  a2[1] = v2;
  return result;
}

void std::__function::__func<MIL::Operators::Common::ios18::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios18::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::operator()(uint64_t a1@<X0>, MIL::MILContext *a2@<X1>, _QWORD *a3@<X8>)
{
  MIL::Operators::Common::ios18::CustomGetConstant::GetConstantConstexprSparseToDense(*(void (****)(MIL::MILContextImpl *__hidden))(a1 + 8), a2, a3);
}

uint64_t std::__function::__func<MIL::Operators::Common::ios18::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios18::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Operators::Common::ios18::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios18::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::target_type()
{
}

uint64_t MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense::Impl::Impl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)a4;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a1 + 40) = a5;
  MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense::Impl::ValidateArgsAndTypeConstraints((MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense::Impl *)a1);
  return a1;
}

void sub_1E0959FA0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense::Impl::ValidateArgsAndTypeConstraints(MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense::Impl *this)
{
  MIL::IRValueType *v2;
  uint64_t v3;
  MIL::IRValueType *v4;
  uint64_t v5;
  MIL::IRTensorValueType *v6;
  uint64_t v7;
  MIL::IRTensorValueType *v8;
  uint64_t i;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  std::runtime_error *v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::runtime_error *v36;
  std::runtime_error *v37;
  std::runtime_error *v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  __int128 v42;
  int v43;
  const std::string::value_type *v44;
  std::string::size_type v45;
  std::string *v46;
  __int128 v47;
  std::runtime_error *exception;
  std::runtime_error *v49;
  std::runtime_error *v50;
  _QWORD v51[2];
  unsigned __int8 v52;
  std::string v53;
  std::string v54;
  std::string v55;
  std::string __p;
  void *v57;
  char v58;

  std::string::basic_string[abi:ne180100]<0>(&v57, "Constexpr-BlockwiseLutToDense");
  v2 = (MIL::IRValueType *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3));
  v3 = MIL::IRValueType::AsTensorType(v2);
  v4 = (MIL::IRValueType *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
  v5 = MIL::IRValueType::AsTensorType(v4);
  v6 = (MIL::IRTensorValueType *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3));
  v7 = MIL::IRTensorValueType::Rank(v6);
  v8 = (MIL::IRTensorValueType *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
  if (MIL::IRTensorValueType::Rank(v8) != v7 + 2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Input lut should have rank=K+2 where K is the rank of indices");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v7)
  {
    for (i = 0; i != v7; ++i)
    {
      v10 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 96))(v3);
      v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v10 + 8 * i) + 16))(*(_QWORD *)(*v10 + 8 * i));
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 48))(v11);
      v13 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 96))(v5);
      v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v13 + 8 * i) + 16))(*(_QWORD *)(*v13 + 8 * i));
      if (v12 % (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 48))(v14))
      {
        v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v36, "The first K dimensions of lut must be factors of indices dimensions");
        __cxa_throw(v36, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
    }
  }
  v15 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 96))(v5);
  v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v15 + 8 * v7) + 16))(*(_QWORD *)(*v15 + 8 * v7));
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 48))(v16);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 88))(v3) == 14 && v17 != 256
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 88))(v3) == 23 && v17 != 64
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 88))(v3) == 20 && v17 != 16
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 88))(v3) == 22 && v17 != 8
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 88))(v3) == 19 && v17 != 4
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 88))(v3) == 21 && v17 != 2)
  {
    v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v53, v17);
    v39 = std::string::insert(&v53, 0, "Provided NUM_PALETTES ");
    v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    v54.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    v41 = std::string::append(&v54, " does not match the indices dtype ");
    v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 88))(v3);
    MIL::IRDataTypeToString(v43, v51);
    if ((v52 & 0x80u) == 0)
      v44 = (const std::string::value_type *)v51;
    else
      v44 = (const std::string::value_type *)v51[0];
    if ((v52 & 0x80u) == 0)
      v45 = v52;
    else
      v45 = v51[1];
    v46 = std::string::append(&v55, v44, v45);
    v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v47;
    v46->__r_.__value_.__l.__size_ = 0;
    v46->__r_.__value_.__r.__words[2] = 0;
    v46->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v38, &__p);
    __cxa_throw(v38, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v18 = *(_QWORD *)(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 96))(v5) + 8 * v7 + 8);
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 48))(v19);
  if (v20 < 2)
  {
    if (!*((_BYTE *)this + 44))
    {
      v23 = 0;
      goto LABEL_24;
    }
  }
  else if (!*((_BYTE *)this + 44))
  {
    v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v21, "vector_axis must be provided if vector_size specified in lut > 1");
    __cxa_throw(v21, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v22 = *((_DWORD *)this + 10);
  if (!MIL::Validation::IsAxisValidForRank((MIL::Validation *)v22, v7))
  {
    v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v49, "'vector_axis' must be within range (-indices_rank - 1, indices_rank) (exclusive)");
LABEL_53:
    __cxa_throw(v49, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v23 = (v7 & (v22 >> 31)) + v22;
LABEL_24:
  v24 = MIL::IRValueType::AsTensorType(*(MIL::IRValueType **)this);
  v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 88))(v24);
  if (v25 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 88))(v5))
  {
    v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v49, "Input lut and output should have the same dtype");
    goto LABEL_53;
  }
  v26 = MIL::IRValueType::AsTensorType(*(MIL::IRValueType **)this);
  v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 96))(v26);
  memset(&__p, 0, sizeof(__p));
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v27, *(_QWORD *)(v27 + 8), (uint64_t)(*(_QWORD *)(v27 + 8) - *(_QWORD *)v27) >> 3);
  v28 = (void *)__p.__r_.__value_.__r.__words[0];
  if (v7 != (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3)
  {
    v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v50, "output must have the same rank as the input indices");
    __cxa_throw(v50, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v7)
  {
    v29 = 0;
    v30 = v23;
    do
    {
      if (v30 == v29)
        v31 = v20;
      else
        v31 = 1;
      v32 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 96))(v3);
      v33 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v32 + 8 * v29) + 16))(*(_QWORD *)(*v32 + 8 * v29));
      v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 48))(v33);
      v35 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(__p.__r_.__value_.__r.__words[0] + 8 * v29) + 16))(*(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8 * v29));
      if (v34 * v31 != (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 48))(v35))
      {
        v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v37, "The output dimension does not match the indices' dimension with vector size over vector_axis");
        __cxa_throw(v37, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      ++v29;
    }
    while (v7 != v29);
    v28 = (void *)__p.__r_.__value_.__r.__words[0];
  }
  if (v28)
  {
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v28;
    operator delete(v28);
  }
  if (v58 < 0)
    operator delete(v57);
}

void sub_1E095A5AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  void *v40;
  int v41;
  uint64_t v42;

  if (a40 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v41 & 1) == 0)
    {
LABEL_14:
      if (*(char *)(v42 - 65) < 0)
        operator delete(*(void **)(v42 - 88));
      _Unwind_Resume(a1);
    }
  }
  else if (!v41)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v40);
  goto LABEL_14;
}

void MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense::Impl::ComputeOutput(MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense::Impl *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  MIL::IRTensorValueType *v5;
  int v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  void *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t Data;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  void *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  void *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  void *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  uint64_t *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  void *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  uint64_t *v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  std::string::size_type v112;
  std::string::size_type v113;
  std::string::size_type v114;
  uint64_t v115;
  std::string::size_type v116;
  std::string::size_type v117;
  std::string::size_type v118;
  uint64_t v119;
  std::string::size_type v120;
  std::string::size_type v121;
  std::string::size_type v122;
  uint64_t v123;
  std::string::size_type v124;
  std::string::size_type v125;
  std::string::size_type v126;
  uint64_t v127;
  std::string::size_type v128;
  std::string::size_type v129;
  std::string::size_type v130;
  uint64_t v131;
  std::string::size_type v132;
  std::string::size_type v133;
  std::string::size_type v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::string::size_type v144;
  std::string::size_type v145;
  std::string::size_type v146;
  uint64_t v147;
  std::string::size_type v148;
  std::string::size_type v149;
  std::string::size_type v150;
  uint64_t v151;
  std::string::size_type v152;
  std::string::size_type v153;
  std::string::size_type v154;
  uint64_t v155;
  std::string::size_type v156;
  std::string::size_type v157;
  std::string::size_type v158;
  uint64_t v159;
  std::string::size_type v160;
  std::string::size_type v161;
  std::string::size_type v162;
  uint64_t v163;
  std::string::size_type v164;
  std::string::size_type v165;
  std::string::size_type v166;
  uint64_t v167;
  std::string::size_type v168;
  std::string::size_type v169;
  std::string::size_type v170;
  uint64_t v171;
  std::string::size_type v172;
  std::string::size_type v173;
  std::string::size_type v174;
  uint64_t v175;
  std::string::size_type v176;
  std::string::size_type v177;
  std::string::size_type v178;
  uint64_t v179;
  std::string::size_type v180;
  std::string::size_type v181;
  std::string::size_type v182;
  uint64_t v183;
  std::string::size_type v184;
  std::string::size_type v185;
  std::string::size_type v186;
  uint64_t v187;
  std::string::size_type v188;
  std::string::size_type v189;
  std::string::size_type v190;
  uint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  unint64_t *v195;
  unint64_t v196;
  unint64_t *v197;
  std::string::size_type v198;
  std::string::size_type v199;
  std::string::size_type v200;
  uint64_t v201;
  std::string::size_type v202;
  std::string::size_type v203;
  std::string::size_type v204;
  uint64_t v205;
  std::string::size_type v206;
  std::string::size_type v207;
  std::string::size_type v208;
  uint64_t v209;
  std::string::size_type v210;
  std::string::size_type v211;
  std::string::size_type v212;
  uint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  uint64_t v216;
  unint64_t *v217;
  unint64_t v218;
  unint64_t *v219;
  std::string::size_type v220;
  std::string::size_type v221;
  std::string::size_type v222;
  uint64_t v223;
  uint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  unint64_t *v227;
  unint64_t v228;
  unint64_t *v229;
  std::string::size_type v230;
  std::string::size_type v231;
  std::string::size_type v232;
  uint64_t v233;
  std::string::size_type v234;
  std::string::size_type v235;
  std::string::size_type v236;
  uint64_t v237;
  uint64_t v238;
  _QWORD *v239;
  uint64_t v240;
  unint64_t *v241;
  unint64_t v242;
  unint64_t *v243;
  std::runtime_error *v244;
  std::string *v245;
  __int128 v246;
  std::string *v247;
  __int128 v248;
  std::runtime_error *v249;
  std::string *v250;
  __int128 v251;
  std::string *v252;
  __int128 v253;
  std::runtime_error *v254;
  std::string *v255;
  __int128 v256;
  std::string *v257;
  __int128 v258;
  std::runtime_error *v259;
  std::string *v260;
  __int128 v261;
  std::string *v262;
  __int128 v263;
  std::runtime_error *v264;
  std::string *v265;
  __int128 v266;
  std::string *v267;
  __int128 v268;
  std::runtime_error *exception;
  std::string *v270;
  __int128 v271;
  std::string *v272;
  __int128 v273;
  std::__shared_weak_count *v274;
  std::__shared_weak_count *v275;
  std::__shared_weak_count *v276;
  std::__shared_weak_count *v277;
  std::__shared_weak_count *v278;
  void *v279;
  void *v280;
  uint64_t v281;
  std::string v282;
  std::string v283;
  std::string __p;
  std::string v285;
  void *v286;
  void *v287;
  void *v288;
  void *v289;
  void *v290;
  void *v291;
  std::string v292;
  std::string v293;

  if (*((_BYTE *)this + 44))
  {
    LODWORD(v4) = *((_DWORD *)this + 10);
    if ((v4 & 0x80000000) != 0)
    {
      v5 = (MIL::IRTensorValueType *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3));
      LODWORD(v4) = v4 + MIL::IRTensorValueType::Rank(v5);
    }
    v4 = (int)v4;
  }
  else
  {
    v4 = 0;
  }
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 88))(*(_QWORD *)this);
  switch(v6)
  {
    case 4:
      v7 = *(_QWORD *)this;
      v9 = (void *)*((_QWORD *)this + 3);
      v8 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
      v275 = v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      v13 = (uint64_t *)*((_QWORD *)this + 1);
      v12 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
      if (v12)
      {
        v14 = (unint64_t *)&v12->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      v16 = (*(uint64_t (**)(void *))(*(_QWORD *)v9 + 32))(v9);
      v17 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 96))(v16);
      MIL::Operators::Common::Shared::ConstExprs::ShapeToVector(v17, &v293);
      v18 = (*(uint64_t (**)(uint64_t *))(*v13 + 32))(v13);
      v19 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 96))(v18);
      MIL::Operators::Common::Shared::ConstExprs::ShapeToVector(v19, &v292);
      v20 = *(_QWORD *)(v292.__r_.__value_.__l.__size_ - 16);
      v21 = *(_QWORD *)(v292.__r_.__value_.__l.__size_ - 8);
      memset(&__p, 0, sizeof(__p));
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(&__p, v292.__r_.__value_.__l.__data_, v292.__r_.__value_.__l.__size_ - 16, (int64_t)(v292.__r_.__value_.__l.__size_ - 16 - v292.__r_.__value_.__r.__words[0]) >> 3);
      MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::BlockwiseLutToDenseIndexConverter(&v285, (uint64_t)&v293, (unint64_t **)&__p, v21, v4);
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v22 = (*(uint64_t (**)(void *))(*(_QWORD *)v9 + 32))(v9);
      v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 88))(v22);
      switch(v23)
      {
        case 14:
          Data = MIL::IRTensorValue::GetDataView<unsigned char>(v9);
          v26 = v25;
          v27 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(v13);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<MIL::Fp16,unsigned char>(Data, v26, v27, (uint64_t)&v285, v20, (uint64_t *)&v279);
          break;
        case 19:
          v184 = MIL::IRTensorValue::GetDataView<MIL::UInt2>(v9);
          v186 = v185;
          v187 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(v13);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<MIL::Fp16,MIL::UInt2>(v184, v186, v187, (uint64_t)&v285, v20, (uint64_t *)&v279);
          break;
        case 20:
          v230 = MIL::IRTensorValue::GetDataView<MIL::UInt4>(v9);
          v232 = v231;
          v233 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(v13);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<MIL::Fp16,MIL::UInt4>(v230, v232, v233, (uint64_t)&v285, v20, (uint64_t *)&v279);
          break;
        case 21:
          v234 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v9);
          v236 = v235;
          v237 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(v13);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<MIL::Fp16,MIL::UInt1>(v234, v236, v237, (uint64_t)&v285, v20, (uint64_t *)&v279);
          break;
        case 22:
          v176 = MIL::IRTensorValue::GetDataView<MIL::UInt3>(v9);
          v178 = v177;
          v179 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(v13);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<MIL::Fp16,MIL::UInt3>(v176, v178, v179, (uint64_t)&v285, v20, (uint64_t *)&v279);
          break;
        case 23:
          v206 = MIL::IRTensorValue::GetDataView<MIL::UInt6>(v9);
          v208 = v207;
          v209 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(v13);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<MIL::Fp16,MIL::UInt6>(v206, v208, v209, (uint64_t)&v285, v20, (uint64_t *)&v279);
          break;
        default:
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          MIL::IRDataTypeToString(v23, &v282);
          v270 = std::string::insert(&v282, 0, "Constexpr-BlockwiseLutToDense: Unsupported dtype ");
          v271 = *(_OWORD *)&v270->__r_.__value_.__l.__data_;
          v283.__r_.__value_.__r.__words[2] = v270->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v283.__r_.__value_.__l.__data_ = v271;
          v270->__r_.__value_.__l.__size_ = 0;
          v270->__r_.__value_.__r.__words[2] = 0;
          v270->__r_.__value_.__r.__words[0] = 0;
          v272 = std::string::append(&v283, " for indices");
          v273 = *(_OWORD *)&v272->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v272->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v273;
          v272->__r_.__value_.__l.__size_ = 0;
          v272->__r_.__value_.__r.__words[2] = 0;
          v272->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, &__p);
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      if (v290)
      {
        v291 = v290;
        operator delete(v290);
      }
      if (v288)
      {
        v289 = v288;
        operator delete(v288);
      }
      if (v286)
      {
        v287 = v286;
        operator delete(v286);
      }
      if (v285.__r_.__value_.__r.__words[0])
      {
        v285.__r_.__value_.__l.__size_ = v285.__r_.__value_.__r.__words[0];
        operator delete(v285.__r_.__value_.__l.__data_);
      }
      if (v292.__r_.__value_.__r.__words[0])
      {
        v292.__r_.__value_.__l.__size_ = v292.__r_.__value_.__r.__words[0];
        operator delete(v292.__r_.__value_.__l.__data_);
      }
      if (v293.__r_.__value_.__r.__words[0])
      {
        v293.__r_.__value_.__l.__size_ = v293.__r_.__value_.__r.__words[0];
        operator delete(v293.__r_.__value_.__l.__data_);
      }
      MIL::IRTensorValueType::MakeFloat16Value(v7, (uint64_t)&v279, &v281);
      v238 = v281;
      *a2 = v281;
      if (v238)
      {
        v239 = (_QWORD *)operator new();
        v240 = v281;
        *v239 = &unk_1EA992A68;
        v239[1] = 0;
        v239[2] = 0;
        v239[3] = v240;
      }
      else
      {
        v239 = 0;
      }
      a2[1] = v239;
      v281 = 0;
      if (v279)
      {
        v280 = v279;
        operator delete(v279);
      }
      if (v12)
      {
        v241 = (unint64_t *)&v12->__shared_owners_;
        do
          v242 = __ldaxr(v241);
        while (__stlxr(v242 - 1, v241));
        if (!v242)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v141 = v275;
      if (!v275)
        return;
      v243 = (unint64_t *)&v275->__shared_owners_;
      do
        v143 = __ldaxr(v243);
      while (__stlxr(v143 - 1, v243));
      break;
    case 5:
      v91 = *(_QWORD *)this;
      v93 = (void *)*((_QWORD *)this + 3);
      v92 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
      v274 = v92;
      if (v92)
      {
        v94 = (unint64_t *)&v92->__shared_owners_;
        do
          v95 = __ldxr(v94);
        while (__stxr(v95 + 1, v94));
      }
      v97 = (uint64_t *)*((_QWORD *)this + 1);
      v96 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
      if (v96)
      {
        v98 = (unint64_t *)&v96->__shared_owners_;
        do
          v99 = __ldxr(v98);
        while (__stxr(v99 + 1, v98));
      }
      v100 = (*(uint64_t (**)(void *))(*(_QWORD *)v93 + 32))(v93);
      v101 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v100 + 96))(v100);
      MIL::Operators::Common::Shared::ConstExprs::ShapeToVector(v101, &v293);
      v102 = (*(uint64_t (**)(uint64_t *))(*v97 + 32))(v97);
      v103 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v102 + 96))(v102);
      MIL::Operators::Common::Shared::ConstExprs::ShapeToVector(v103, &v292);
      v104 = *(_QWORD *)(v292.__r_.__value_.__l.__size_ - 16);
      v105 = *(_QWORD *)(v292.__r_.__value_.__l.__size_ - 8);
      memset(&__p, 0, sizeof(__p));
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(&__p, v292.__r_.__value_.__l.__data_, v292.__r_.__value_.__l.__size_ - 16, (int64_t)(v292.__r_.__value_.__l.__size_ - 16 - v292.__r_.__value_.__r.__words[0]) >> 3);
      MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::BlockwiseLutToDenseIndexConverter(&v285, (uint64_t)&v293, (unint64_t **)&__p, v105, v4);
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v106 = (*(uint64_t (**)(void *))(*(_QWORD *)v93 + 32))(v93);
      v107 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v106 + 88))(v106);
      switch(v107)
      {
        case 14:
          v108 = MIL::IRTensorValue::GetDataView<unsigned char>(v93);
          v110 = v109;
          v111 = MIL::IRTensorValue::GetDataView<float>(v97);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<float,unsigned char>(v108, v110, v111, (uint64_t)&v285, v104, (uint64_t *)&v279);
          break;
        case 19:
          v160 = MIL::IRTensorValue::GetDataView<MIL::UInt2>(v93);
          v162 = v161;
          v163 = MIL::IRTensorValue::GetDataView<float>(v97);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<float,MIL::UInt2>(v160, v162, v163, (uint64_t)&v285, v104, (uint64_t *)&v279);
          break;
        case 20:
          v202 = MIL::IRTensorValue::GetDataView<MIL::UInt4>(v93);
          v204 = v203;
          v205 = MIL::IRTensorValue::GetDataView<float>(v97);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<float,MIL::UInt4>(v202, v204, v205, (uint64_t)&v285, v104, (uint64_t *)&v279);
          break;
        case 21:
          v220 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v93);
          v222 = v221;
          v223 = MIL::IRTensorValue::GetDataView<float>(v97);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<float,MIL::UInt1>(v220, v222, v223, (uint64_t)&v285, v104, (uint64_t *)&v279);
          break;
        case 22:
          v152 = MIL::IRTensorValue::GetDataView<MIL::UInt3>(v93);
          v154 = v153;
          v155 = MIL::IRTensorValue::GetDataView<float>(v97);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<float,MIL::UInt3>(v152, v154, v155, (uint64_t)&v285, v104, (uint64_t *)&v279);
          break;
        case 23:
          v172 = MIL::IRTensorValue::GetDataView<MIL::UInt6>(v93);
          v174 = v173;
          v175 = MIL::IRTensorValue::GetDataView<float>(v97);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<float,MIL::UInt6>(v172, v174, v175, (uint64_t)&v285, v104, (uint64_t *)&v279);
          break;
        default:
          v264 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          MIL::IRDataTypeToString(v107, &v282);
          v265 = std::string::insert(&v282, 0, "Constexpr-BlockwiseLutToDense: Unsupported dtype ");
          v266 = *(_OWORD *)&v265->__r_.__value_.__l.__data_;
          v283.__r_.__value_.__r.__words[2] = v265->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v283.__r_.__value_.__l.__data_ = v266;
          v265->__r_.__value_.__l.__size_ = 0;
          v265->__r_.__value_.__r.__words[2] = 0;
          v265->__r_.__value_.__r.__words[0] = 0;
          v267 = std::string::append(&v283, " for indices");
          v268 = *(_OWORD *)&v267->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v267->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v268;
          v267->__r_.__value_.__l.__size_ = 0;
          v267->__r_.__value_.__r.__words[2] = 0;
          v267->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v264, &__p);
          __cxa_throw(v264, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      if (v290)
      {
        v291 = v290;
        operator delete(v290);
      }
      if (v288)
      {
        v289 = v288;
        operator delete(v288);
      }
      if (v286)
      {
        v287 = v286;
        operator delete(v286);
      }
      if (v285.__r_.__value_.__r.__words[0])
      {
        v285.__r_.__value_.__l.__size_ = v285.__r_.__value_.__r.__words[0];
        operator delete(v285.__r_.__value_.__l.__data_);
      }
      if (v292.__r_.__value_.__r.__words[0])
      {
        v292.__r_.__value_.__l.__size_ = v292.__r_.__value_.__r.__words[0];
        operator delete(v292.__r_.__value_.__l.__data_);
      }
      if (v293.__r_.__value_.__r.__words[0])
      {
        v293.__r_.__value_.__l.__size_ = v293.__r_.__value_.__r.__words[0];
        operator delete(v293.__r_.__value_.__l.__data_);
      }
      MIL::IRTensorValueType::MakeFloat32Value(v91, (uint64_t)&v279, &v281);
      v224 = v281;
      *a2 = v281;
      if (v224)
      {
        v225 = (_QWORD *)operator new();
        v226 = v281;
        *v225 = &unk_1EA992A68;
        v225[1] = 0;
        v225[2] = 0;
        v225[3] = v226;
      }
      else
      {
        v225 = 0;
      }
      a2[1] = v225;
      v281 = 0;
      if (v279)
      {
        v280 = v279;
        operator delete(v279);
      }
      if (v96)
      {
        v227 = (unint64_t *)&v96->__shared_owners_;
        do
          v228 = __ldaxr(v227);
        while (__stlxr(v228 - 1, v227));
        if (!v228)
        {
          ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
          std::__shared_weak_count::__release_weak(v96);
        }
      }
      v141 = v274;
      if (!v274)
        return;
      v229 = (unint64_t *)&v274->__shared_owners_;
      do
        v143 = __ldaxr(v229);
      while (__stlxr(v143 - 1, v229));
      break;
    case 7:
      v49 = *(_QWORD *)this;
      v51 = (void *)*((_QWORD *)this + 3);
      v50 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
      v276 = v50;
      if (v50)
      {
        v52 = (unint64_t *)&v50->__shared_owners_;
        do
          v53 = __ldxr(v52);
        while (__stxr(v53 + 1, v52));
      }
      v55 = (uint64_t *)*((_QWORD *)this + 1);
      v54 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
      if (v54)
      {
        v56 = (unint64_t *)&v54->__shared_owners_;
        do
          v57 = __ldxr(v56);
        while (__stxr(v57 + 1, v56));
      }
      v58 = (*(uint64_t (**)(void *))(*(_QWORD *)v51 + 32))(v51);
      v59 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 96))(v58);
      MIL::Operators::Common::Shared::ConstExprs::ShapeToVector(v59, &v293);
      v60 = (*(uint64_t (**)(uint64_t *))(*v55 + 32))(v55);
      v61 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 96))(v60);
      MIL::Operators::Common::Shared::ConstExprs::ShapeToVector(v61, &v292);
      v62 = *(_QWORD *)(v292.__r_.__value_.__l.__size_ - 16);
      v63 = *(_QWORD *)(v292.__r_.__value_.__l.__size_ - 8);
      memset(&__p, 0, sizeof(__p));
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(&__p, v292.__r_.__value_.__l.__data_, v292.__r_.__value_.__l.__size_ - 16, (int64_t)(v292.__r_.__value_.__l.__size_ - 16 - v292.__r_.__value_.__r.__words[0]) >> 3);
      MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::BlockwiseLutToDenseIndexConverter(&v285, (uint64_t)&v293, (unint64_t **)&__p, v63, v4);
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v64 = (*(uint64_t (**)(void *))(*(_QWORD *)v51 + 32))(v51);
      v65 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 88))(v64);
      switch(v65)
      {
        case 14:
          v66 = MIL::IRTensorValue::GetDataView<unsigned char>(v51);
          v68 = v67;
          v69 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(v55);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<MIL::Bf16,unsigned char>(v66, v68, v69, (uint64_t)&v285, v62, (uint64_t *)&v279);
          break;
        case 19:
          v148 = MIL::IRTensorValue::GetDataView<MIL::UInt2>(v51);
          v150 = v149;
          v151 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(v55);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<MIL::Bf16,MIL::UInt2>(v148, v150, v151, (uint64_t)&v285, v62, (uint64_t *)&v279);
          break;
        case 20:
          v180 = MIL::IRTensorValue::GetDataView<MIL::UInt4>(v51);
          v182 = v181;
          v183 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(v55);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<MIL::Bf16,MIL::UInt4>(v180, v182, v183, (uint64_t)&v285, v62, (uint64_t *)&v279);
          break;
        case 21:
          v188 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v51);
          v190 = v189;
          v191 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(v55);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<MIL::Bf16,MIL::UInt1>(v188, v190, v191, (uint64_t)&v285, v62, (uint64_t *)&v279);
          break;
        case 22:
          v128 = MIL::IRTensorValue::GetDataView<MIL::UInt3>(v51);
          v130 = v129;
          v131 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(v55);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<MIL::Bf16,MIL::UInt3>(v128, v130, v131, (uint64_t)&v285, v62, (uint64_t *)&v279);
          break;
        case 23:
          v164 = MIL::IRTensorValue::GetDataView<MIL::UInt6>(v51);
          v166 = v165;
          v167 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(v55);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<MIL::Bf16,MIL::UInt6>(v164, v166, v167, (uint64_t)&v285, v62, (uint64_t *)&v279);
          break;
        default:
          v254 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          MIL::IRDataTypeToString(v65, &v282);
          v255 = std::string::insert(&v282, 0, "Constexpr-BlockwiseLutToDense: Unsupported dtype ");
          v256 = *(_OWORD *)&v255->__r_.__value_.__l.__data_;
          v283.__r_.__value_.__r.__words[2] = v255->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v283.__r_.__value_.__l.__data_ = v256;
          v255->__r_.__value_.__l.__size_ = 0;
          v255->__r_.__value_.__r.__words[2] = 0;
          v255->__r_.__value_.__r.__words[0] = 0;
          v257 = std::string::append(&v283, " for indices");
          v258 = *(_OWORD *)&v257->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v257->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v258;
          v257->__r_.__value_.__l.__size_ = 0;
          v257->__r_.__value_.__r.__words[2] = 0;
          v257->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v254, &__p);
          __cxa_throw(v254, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      if (v290)
      {
        v291 = v290;
        operator delete(v290);
      }
      if (v288)
      {
        v289 = v288;
        operator delete(v288);
      }
      if (v286)
      {
        v287 = v286;
        operator delete(v286);
      }
      if (v285.__r_.__value_.__r.__words[0])
      {
        v285.__r_.__value_.__l.__size_ = v285.__r_.__value_.__r.__words[0];
        operator delete(v285.__r_.__value_.__l.__data_);
      }
      if (v292.__r_.__value_.__r.__words[0])
      {
        v292.__r_.__value_.__l.__size_ = v292.__r_.__value_.__r.__words[0];
        operator delete(v292.__r_.__value_.__l.__data_);
      }
      if (v293.__r_.__value_.__r.__words[0])
      {
        v293.__r_.__value_.__l.__size_ = v293.__r_.__value_.__r.__words[0];
        operator delete(v293.__r_.__value_.__l.__data_);
      }
      MIL::IRTensorValueType::MakeBFloat16Value(v49, (uint64_t)&v279, &v281);
      v192 = v281;
      *a2 = v281;
      if (v192)
      {
        v193 = (_QWORD *)operator new();
        v194 = v281;
        *v193 = &unk_1EA992A68;
        v193[1] = 0;
        v193[2] = 0;
        v193[3] = v194;
      }
      else
      {
        v193 = 0;
      }
      a2[1] = v193;
      v281 = 0;
      if (v279)
      {
        v280 = v279;
        operator delete(v279);
      }
      if (v54)
      {
        v195 = (unint64_t *)&v54->__shared_owners_;
        do
          v196 = __ldaxr(v195);
        while (__stlxr(v196 - 1, v195));
        if (!v196)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      v141 = v276;
      if (!v276)
        return;
      v197 = (unint64_t *)&v276->__shared_owners_;
      do
        v143 = __ldaxr(v197);
      while (__stlxr(v143 - 1, v197));
      break;
    case 9:
      v70 = *(_QWORD *)this;
      v72 = (void *)*((_QWORD *)this + 3);
      v71 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
      v277 = v71;
      if (v71)
      {
        v73 = (unint64_t *)&v71->__shared_owners_;
        do
          v74 = __ldxr(v73);
        while (__stxr(v74 + 1, v73));
      }
      v76 = (uint64_t *)*((_QWORD *)this + 1);
      v75 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
      if (v75)
      {
        v77 = (unint64_t *)&v75->__shared_owners_;
        do
          v78 = __ldxr(v77);
        while (__stxr(v78 + 1, v77));
      }
      v79 = (*(uint64_t (**)(void *))(*(_QWORD *)v72 + 32))(v72);
      v80 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 96))(v79);
      MIL::Operators::Common::Shared::ConstExprs::ShapeToVector(v80, &v293);
      v81 = (*(uint64_t (**)(uint64_t *))(*v76 + 32))(v76);
      v82 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v81 + 96))(v81);
      MIL::Operators::Common::Shared::ConstExprs::ShapeToVector(v82, &v292);
      v83 = *(_QWORD *)(v292.__r_.__value_.__l.__size_ - 16);
      v84 = *(_QWORD *)(v292.__r_.__value_.__l.__size_ - 8);
      memset(&__p, 0, sizeof(__p));
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(&__p, v292.__r_.__value_.__l.__data_, v292.__r_.__value_.__l.__size_ - 16, (int64_t)(v292.__r_.__value_.__l.__size_ - 16 - v292.__r_.__value_.__r.__words[0]) >> 3);
      MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::BlockwiseLutToDenseIndexConverter(&v285, (uint64_t)&v293, (unint64_t **)&__p, v84, v4);
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v85 = (*(uint64_t (**)(void *))(*(_QWORD *)v72 + 32))(v72);
      v86 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v85 + 88))(v85);
      switch(v86)
      {
        case 14:
          v87 = MIL::IRTensorValue::GetDataView<unsigned char>(v72);
          v89 = v88;
          v90 = MIL::IRTensorValue::GetDataView<signed char>(v76);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<signed char,unsigned char>(v87, v89, v90, (uint64_t)&v285, v83, &v279);
          break;
        case 19:
          v156 = MIL::IRTensorValue::GetDataView<MIL::UInt2>(v72);
          v158 = v157;
          v159 = MIL::IRTensorValue::GetDataView<signed char>(v76);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<signed char,MIL::UInt2>(v156, v158, v159, (uint64_t)&v285, v83, &v279);
          break;
        case 20:
          v198 = MIL::IRTensorValue::GetDataView<MIL::UInt4>(v72);
          v200 = v199;
          v201 = MIL::IRTensorValue::GetDataView<signed char>(v76);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<signed char,MIL::UInt4>(v198, v200, v201, (uint64_t)&v285, v83, &v279);
          break;
        case 21:
          v210 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v72);
          v212 = v211;
          v213 = MIL::IRTensorValue::GetDataView<signed char>(v76);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<signed char,MIL::UInt1>(v210, v212, v213, (uint64_t)&v285, v83, &v279);
          break;
        case 22:
          v144 = MIL::IRTensorValue::GetDataView<MIL::UInt3>(v72);
          v146 = v145;
          v147 = MIL::IRTensorValue::GetDataView<signed char>(v76);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<signed char,MIL::UInt3>(v144, v146, v147, (uint64_t)&v285, v83, &v279);
          break;
        case 23:
          v168 = MIL::IRTensorValue::GetDataView<MIL::UInt6>(v72);
          v170 = v169;
          v171 = MIL::IRTensorValue::GetDataView<signed char>(v76);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<signed char,MIL::UInt6>(v168, v170, v171, (uint64_t)&v285, v83, &v279);
          break;
        default:
          v259 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          MIL::IRDataTypeToString(v86, &v282);
          v260 = std::string::insert(&v282, 0, "Constexpr-BlockwiseLutToDense: Unsupported dtype ");
          v261 = *(_OWORD *)&v260->__r_.__value_.__l.__data_;
          v283.__r_.__value_.__r.__words[2] = v260->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v283.__r_.__value_.__l.__data_ = v261;
          v260->__r_.__value_.__l.__size_ = 0;
          v260->__r_.__value_.__r.__words[2] = 0;
          v260->__r_.__value_.__r.__words[0] = 0;
          v262 = std::string::append(&v283, " for indices");
          v263 = *(_OWORD *)&v262->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v262->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v263;
          v262->__r_.__value_.__l.__size_ = 0;
          v262->__r_.__value_.__r.__words[2] = 0;
          v262->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v259, &__p);
          __cxa_throw(v259, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      if (v290)
      {
        v291 = v290;
        operator delete(v290);
      }
      if (v288)
      {
        v289 = v288;
        operator delete(v288);
      }
      if (v286)
      {
        v287 = v286;
        operator delete(v286);
      }
      if (v285.__r_.__value_.__r.__words[0])
      {
        v285.__r_.__value_.__l.__size_ = v285.__r_.__value_.__r.__words[0];
        operator delete(v285.__r_.__value_.__l.__data_);
      }
      if (v292.__r_.__value_.__r.__words[0])
      {
        v292.__r_.__value_.__l.__size_ = v292.__r_.__value_.__r.__words[0];
        operator delete(v292.__r_.__value_.__l.__data_);
      }
      if (v293.__r_.__value_.__r.__words[0])
      {
        v293.__r_.__value_.__l.__size_ = v293.__r_.__value_.__r.__words[0];
        operator delete(v293.__r_.__value_.__l.__data_);
      }
      MIL::IRTensorValueType::MakeInt8Value(v70, (uint64_t)&v279, &v281);
      v214 = v281;
      *a2 = v281;
      if (v214)
      {
        v215 = (_QWORD *)operator new();
        v216 = v281;
        *v215 = &unk_1EA992A68;
        v215[1] = 0;
        v215[2] = 0;
        v215[3] = v216;
      }
      else
      {
        v215 = 0;
      }
      a2[1] = v215;
      v281 = 0;
      if (v279)
      {
        v280 = v279;
        operator delete(v279);
      }
      if (v75)
      {
        v217 = (unint64_t *)&v75->__shared_owners_;
        do
          v218 = __ldaxr(v217);
        while (__stlxr(v218 - 1, v217));
        if (!v218)
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }
      v141 = v277;
      if (!v277)
        return;
      v219 = (unint64_t *)&v277->__shared_owners_;
      do
        v143 = __ldaxr(v219);
      while (__stlxr(v143 - 1, v219));
      break;
    case 14:
      v28 = *(_QWORD *)this;
      v30 = (void *)*((_QWORD *)this + 3);
      v29 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
      v278 = v29;
      if (v29)
      {
        v31 = (unint64_t *)&v29->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
      }
      v34 = (void *)*((_QWORD *)this + 1);
      v33 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
      if (v33)
      {
        v35 = (unint64_t *)&v33->__shared_owners_;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      v37 = (*(uint64_t (**)(void *))(*(_QWORD *)v30 + 32))(v30);
      v38 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 96))(v37);
      MIL::Operators::Common::Shared::ConstExprs::ShapeToVector(v38, &v293);
      v39 = (*(uint64_t (**)(void *))(*(_QWORD *)v34 + 32))(v34);
      v40 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 96))(v39);
      MIL::Operators::Common::Shared::ConstExprs::ShapeToVector(v40, &v292);
      v41 = *(_QWORD *)(v292.__r_.__value_.__l.__size_ - 16);
      v42 = *(_QWORD *)(v292.__r_.__value_.__l.__size_ - 8);
      memset(&__p, 0, sizeof(__p));
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(&__p, v292.__r_.__value_.__l.__data_, v292.__r_.__value_.__l.__size_ - 16, (int64_t)(v292.__r_.__value_.__l.__size_ - 16 - v292.__r_.__value_.__r.__words[0]) >> 3);
      MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::BlockwiseLutToDenseIndexConverter(&v285, (uint64_t)&v293, (unint64_t **)&__p, v42, v4);
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v43 = (*(uint64_t (**)(void *))(*(_QWORD *)v30 + 32))(v30);
      v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 88))(v43);
      switch(v44)
      {
        case 14:
          v45 = MIL::IRTensorValue::GetDataView<unsigned char>(v30);
          v47 = v46;
          v48 = MIL::IRTensorValue::GetDataView<unsigned char>(v34);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<unsigned char,unsigned char>(v45, v47, v48, (uint64_t)&v285, v41, &v279);
          break;
        case 19:
          v116 = MIL::IRTensorValue::GetDataView<MIL::UInt2>(v30);
          v118 = v117;
          v119 = MIL::IRTensorValue::GetDataView<unsigned char>(v34);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<unsigned char,MIL::UInt2>(v116, v118, v119, (uint64_t)&v285, v41, &v279);
          break;
        case 20:
          v124 = MIL::IRTensorValue::GetDataView<MIL::UInt4>(v30);
          v126 = v125;
          v127 = MIL::IRTensorValue::GetDataView<unsigned char>(v34);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<unsigned char,MIL::UInt4>(v124, v126, v127, (uint64_t)&v285, v41, &v279);
          break;
        case 21:
          v132 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v30);
          v134 = v133;
          v135 = MIL::IRTensorValue::GetDataView<unsigned char>(v34);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<unsigned char,MIL::UInt1>(v132, v134, v135, (uint64_t)&v285, v41, &v279);
          break;
        case 22:
          v112 = MIL::IRTensorValue::GetDataView<MIL::UInt3>(v30);
          v114 = v113;
          v115 = MIL::IRTensorValue::GetDataView<unsigned char>(v34);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<unsigned char,MIL::UInt3>(v112, v114, v115, (uint64_t)&v285, v41, &v279);
          break;
        case 23:
          v120 = MIL::IRTensorValue::GetDataView<MIL::UInt6>(v30);
          v122 = v121;
          v123 = MIL::IRTensorValue::GetDataView<unsigned char>(v34);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<unsigned char,MIL::UInt6>(v120, v122, v123, (uint64_t)&v285, v41, &v279);
          break;
        default:
          v249 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          MIL::IRDataTypeToString(v44, &v282);
          v250 = std::string::insert(&v282, 0, "Constexpr-BlockwiseLutToDense: Unsupported dtype ");
          v251 = *(_OWORD *)&v250->__r_.__value_.__l.__data_;
          v283.__r_.__value_.__r.__words[2] = v250->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v283.__r_.__value_.__l.__data_ = v251;
          v250->__r_.__value_.__l.__size_ = 0;
          v250->__r_.__value_.__r.__words[2] = 0;
          v250->__r_.__value_.__r.__words[0] = 0;
          v252 = std::string::append(&v283, " for indices");
          v253 = *(_OWORD *)&v252->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v252->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v253;
          v252->__r_.__value_.__l.__size_ = 0;
          v252->__r_.__value_.__r.__words[2] = 0;
          v252->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v249, &__p);
          __cxa_throw(v249, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      if (v290)
      {
        v291 = v290;
        operator delete(v290);
      }
      if (v288)
      {
        v289 = v288;
        operator delete(v288);
      }
      if (v286)
      {
        v287 = v286;
        operator delete(v286);
      }
      if (v285.__r_.__value_.__r.__words[0])
      {
        v285.__r_.__value_.__l.__size_ = v285.__r_.__value_.__r.__words[0];
        operator delete(v285.__r_.__value_.__l.__data_);
      }
      if (v292.__r_.__value_.__r.__words[0])
      {
        v292.__r_.__value_.__l.__size_ = v292.__r_.__value_.__r.__words[0];
        operator delete(v292.__r_.__value_.__l.__data_);
      }
      if (v293.__r_.__value_.__r.__words[0])
      {
        v293.__r_.__value_.__l.__size_ = v293.__r_.__value_.__r.__words[0];
        operator delete(v293.__r_.__value_.__l.__data_);
      }
      MIL::IRTensorValueType::MakeUInt8Value(v28, (uint64_t)&v279, &v281);
      v136 = v281;
      *a2 = v281;
      if (v136)
      {
        v137 = (_QWORD *)operator new();
        v138 = v281;
        *v137 = &unk_1EA992A68;
        v137[1] = 0;
        v137[2] = 0;
        v137[3] = v138;
      }
      else
      {
        v137 = 0;
      }
      a2[1] = v137;
      v281 = 0;
      if (v279)
      {
        v280 = v279;
        operator delete(v279);
      }
      if (v33)
      {
        v139 = (unint64_t *)&v33->__shared_owners_;
        do
          v140 = __ldaxr(v139);
        while (__stlxr(v140 - 1, v139));
        if (!v140)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v141 = v278;
      if (!v278)
        return;
      v142 = (unint64_t *)&v278->__shared_owners_;
      do
        v143 = __ldaxr(v142);
      while (__stlxr(v143 - 1, v142));
      break;
    default:
      v244 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      MIL::IRDataTypeToString(v6, &v292);
      v245 = std::string::insert(&v292, 0, "Constexpr-BlockwiseLutToDense: Unsupported dtype ");
      v246 = *(_OWORD *)&v245->__r_.__value_.__l.__data_;
      v293.__r_.__value_.__r.__words[2] = v245->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v293.__r_.__value_.__l.__data_ = v246;
      v245->__r_.__value_.__l.__size_ = 0;
      v245->__r_.__value_.__r.__words[2] = 0;
      v245->__r_.__value_.__r.__words[0] = 0;
      v247 = std::string::append(&v293, " for output");
      v248 = *(_OWORD *)&v247->__r_.__value_.__l.__data_;
      v285.__r_.__value_.__r.__words[2] = v247->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v285.__r_.__value_.__l.__data_ = v248;
      v247->__r_.__value_.__l.__size_ = 0;
      v247->__r_.__value_.__r.__words[2] = 0;
      v247->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v244, &v285);
      __cxa_throw(v244, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (!v143)
  {
    ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
    std::__shared_weak_count::__release_weak(v141);
  }
}

void sub_1E095BD68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  void *v52;
  int v53;
  uint64_t v54;
  void *v56;
  void *v57;

  if (a52 < 0)
    operator delete(__p);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v53 & 1) == 0)
    {
LABEL_10:
      MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::~BlockwiseLutToDenseIndexConverter((MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter *)(v54 - 256));
      v56 = *(void **)(v54 - 136);
      if (v56)
      {
        *(_QWORD *)(v54 - 128) = v56;
        operator delete(v56);
      }
      v57 = *(void **)(v54 - 112);
      if (v57)
      {
        *(_QWORD *)(v54 - 104) = v57;
        operator delete(v57);
      }
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
      _Unwind_Resume(a1);
    }
  }
  else if (!v53)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v52);
  goto LABEL_10;
}

void MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense::~BlockwiseLutToDense(MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense *this)
{
  std::unique_ptr<MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense::Impl>::reset[abi:ne180100]((uint64_t *)this + 1, 0);
  MIL::AbstractConstExpr::~AbstractConstExpr(this);
}

{
  std::unique_ptr<MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense::Impl>::reset[abi:ne180100]((uint64_t *)this + 1, 0);
  MIL::AbstractConstExpr::~AbstractConstExpr(this);
}

{
  std::unique_ptr<MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense::Impl>::reset[abi:ne180100]((uint64_t *)this + 1, 0);
  MIL::AbstractConstExpr::~AbstractConstExpr(this);
  JUMPOUT(0x1E0C023A0);
}

_QWORD *MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense::BlockwiseLutToDense(_QWORD *a1, uint64_t a2, __int128 *a3, __int128 *a4, unsigned int a5)
{
  _QWORD *v8;
  unsigned int v10;
  uint64_t v11;

  v11 = a2;
  v10 = a5;
  v8 = MIL::AbstractConstExpr::AbstractConstExpr(a1);
  *v8 = &off_1EA9A1BD8;
  std::make_unique[abi:ne180100]<MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense::Impl,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,int &>(&v11, a3, a4, &v10, v8 + 1);
  return a1;
}

void sub_1E095C460(_Unwind_Exception *a1)
{
  MIL::AbstractConstExpr *v1;

  MIL::AbstractConstExpr::~AbstractConstExpr(v1);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense::Impl,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,int &>(uint64_t *a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, unsigned int *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;

  v10 = operator new();
  v11 = *a1;
  v12 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v19 = *a3;
  v20 = v12;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense::Impl::Impl(v10, v11, (uint64_t)&v20, (uint64_t)&v19, *a4 | 0x100000000);
  *a5 = v10;
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_1E095C588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  MEMORY[0x1E0C023A0](v11, 0x1060C40A071CAE4);
  _Unwind_Resume(a1);
}

_QWORD *MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense::BlockwiseLutToDense(_QWORD *a1, uint64_t a2, __int128 *a3, __int128 *a4)
{
  _QWORD *v7;
  uint64_t v9;

  v9 = a2;
  v7 = MIL::AbstractConstExpr::AbstractConstExpr(a1);
  *v7 = &off_1EA9A1BD8;
  std::make_unique[abi:ne180100]<MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense::Impl,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,std::nullopt_t const&>(&v9, a3, a4, v7 + 1);
  return a1;
}

void sub_1E095C628(_Unwind_Exception *a1)
{
  MIL::AbstractConstExpr *v1;

  MIL::AbstractConstExpr::~AbstractConstExpr(v1);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense::Impl,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,std::nullopt_t const&>(uint64_t *a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;

  v8 = operator new();
  v9 = *a1;
  v10 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v17 = *a3;
  v18 = v10;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense::Impl::Impl(v8, v9, (uint64_t)&v18, (uint64_t)&v17, 0);
  *a4 = v8;
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
  if (*((_QWORD *)&v17 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1E095C748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  MEMORY[0x1E0C023A0](v11, 0x1060C40A071CAE4);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense::ValidateArgsAndTypeConstraints(MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense::Impl **this)
{
  MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense::Impl::ValidateArgsAndTypeConstraints(this[1]);
}

void MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense::ComputeOutput(MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense::Impl **this@<X0>, _QWORD *a2@<X8>)
{
  MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense::Impl::ComputeOutput(this[1], a2);
}

void MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense::ComputeOutput(MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense::Impl **this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::runtime_error *exception;

  if (a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "BlockwiseLutToDense has a single output.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense::Impl::ComputeOutput(this[1], a3);
}

void sub_1E095C7E0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<unsigned char,unsigned char>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, _QWORD *a6@<X8>)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  void *__p[3];
  void *v19[3];
  void *v20;
  _BYTE *v21;

  v12 = *(_QWORD *)(a4 + 96);
  std::vector<unsigned char>::vector(a6, v12 * a2);
  std::vector<unsigned long>::vector(&v20, *(_QWORD *)(a4 + 96));
  std::vector<unsigned long>::vector(v19, (uint64_t)(*(_QWORD *)(a4 + 32) - *(_QWORD *)(a4 + 24)) >> 3);
  std::vector<unsigned long>::vector(__p, (uint64_t)(*(_QWORD *)(a4 + 56) - *(_QWORD *)(a4 + 48)) >> 3);
  if (a2)
  {
    v13 = 0;
    do
    {
      MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToOutputIndexes(a4, v13, &v20, (unint64_t **)v19);
      v14 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToBlockIndex((unint64_t **)a4, v13, (uint64_t)__p, (unint64_t **)v19);
      v15 = v20;
      if (v21 != v20)
      {
        v16 = 0;
        v17 = a3 + (*(unsigned __int8 *)(a1 + v13) + v14 * a5) * v12;
        do
        {
          *(_BYTE *)(*a6 + v15[v16]) = *(_BYTE *)(v17 + v16);
          ++v16;
          v15 = v20;
        }
        while (v16 < (v21 - (_BYTE *)v20) >> 3);
      }
      ++v13;
    }
    while (v13 != a2);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v19[0])
  {
    v19[1] = v19[0];
    operator delete(v19[0]);
  }
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
}

void sub_1E095C934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  uint64_t v17;
  void *v19;

  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  v19 = *(void **)v17;
  if (*(_QWORD *)v17)
  {
    *(_QWORD *)(v17 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<unsigned char,MIL::UInt6>(std::string::size_type a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, _QWORD *a6@<X8>)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int Int;
  unsigned int v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  std::runtime_error *exception;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string v26;
  std::string v27;
  std::string v28;
  void *__p[3];
  void *v30[3];
  _QWORD *v31;
  _BYTE *v32;

  v12 = *(_QWORD *)(a4 + 96);
  std::vector<unsigned char>::vector(a6, v12 * a2);
  std::vector<unsigned long>::vector(&v31, *(_QWORD *)(a4 + 96));
  std::vector<unsigned long>::vector(v30, (uint64_t)(*(_QWORD *)(a4 + 32) - *(_QWORD *)(a4 + 24)) >> 3);
  std::vector<unsigned long>::vector(__p, (uint64_t)(*(_QWORD *)(a4 + 56) - *(_QWORD *)(a4 + 48)) >> 3);
  if (a2)
  {
    v13 = 0;
    do
    {
      MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToOutputIndexes(a4, v13, &v31, (unint64_t **)v30);
      v14 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToBlockIndex((unint64_t **)a4, v13, (uint64_t)__p, (unint64_t **)v30);
      v28.__r_.__value_.__r.__words[0] = a1;
      v28.__r_.__value_.__l.__size_ = a2;
      v27.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt6 const,18446744073709551615ul>::ValueAt(&v28, v13);
      Int = MIL::UInt6::GetInt((MIL::UInt6 *)&v27);
      v16 = (int)(float)Int;
      if ((v16 & 0x80000000) != 0)
      {
        v20 = (int)(float)Int;
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v26, v20);
        v22 = std::string::insert(&v26, 0, "Index ");
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        v27.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        v24 = std::string::append(&v27, " cannot be negative");
        v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v28.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v28);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v17 = v31;
      if (v32 != (_BYTE *)v31)
      {
        v18 = 0;
        v19 = a3 + (v14 * a5 + v16) * v12;
        do
        {
          *(_BYTE *)(*a6 + v17[v18]) = *(_BYTE *)(v19 + v18);
          ++v18;
          v17 = v31;
        }
        while (v18 < (v32 - (_BYTE *)v31) >> 3);
      }
      ++v13;
    }
    while (v13 != a2);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v30[0])
  {
    v30[1] = v30[0];
    operator delete(v30[0]);
  }
  if (v31)
  {
    v32 = v31;
    operator delete(v31);
  }
}

void sub_1E095CBB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  uint64_t v33;
  uint64_t v34;
  void *v36;
  void *v37;

  if (__p)
    operator delete(__p);
  v36 = *(void **)(v34 - 104);
  if (v36)
  {
    *(_QWORD *)(v34 - 96) = v36;
    operator delete(v36);
  }
  v37 = *(void **)v33;
  if (*(_QWORD *)v33)
  {
    *(_QWORD *)(v33 + 8) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<unsigned char,MIL::UInt4>(std::string::size_type a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, _QWORD *a6@<X8>)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int Int;
  unsigned int v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  std::runtime_error *exception;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string v26;
  std::string v27;
  std::string v28;
  void *__p[3];
  void *v30[3];
  _QWORD *v31;
  _BYTE *v32;

  v12 = *(_QWORD *)(a4 + 96);
  std::vector<unsigned char>::vector(a6, v12 * a2);
  std::vector<unsigned long>::vector(&v31, *(_QWORD *)(a4 + 96));
  std::vector<unsigned long>::vector(v30, (uint64_t)(*(_QWORD *)(a4 + 32) - *(_QWORD *)(a4 + 24)) >> 3);
  std::vector<unsigned long>::vector(__p, (uint64_t)(*(_QWORD *)(a4 + 56) - *(_QWORD *)(a4 + 48)) >> 3);
  if (a2)
  {
    v13 = 0;
    do
    {
      MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToOutputIndexes(a4, v13, &v31, (unint64_t **)v30);
      v14 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToBlockIndex((unint64_t **)a4, v13, (uint64_t)__p, (unint64_t **)v30);
      v28.__r_.__value_.__r.__words[0] = a1;
      v28.__r_.__value_.__l.__size_ = a2;
      v27.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(&v28, v13);
      Int = MIL::UInt4::GetInt((MIL::UInt4 *)&v27);
      v16 = (int)(float)Int;
      if ((v16 & 0x80000000) != 0)
      {
        v20 = (int)(float)Int;
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v26, v20);
        v22 = std::string::insert(&v26, 0, "Index ");
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        v27.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        v24 = std::string::append(&v27, " cannot be negative");
        v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v28.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v28);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v17 = v31;
      if (v32 != (_BYTE *)v31)
      {
        v18 = 0;
        v19 = a3 + (v14 * a5 + v16) * v12;
        do
        {
          *(_BYTE *)(*a6 + v17[v18]) = *(_BYTE *)(v19 + v18);
          ++v18;
          v17 = v31;
        }
        while (v18 < (v32 - (_BYTE *)v31) >> 3);
      }
      ++v13;
    }
    while (v13 != a2);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v30[0])
  {
    v30[1] = v30[0];
    operator delete(v30[0]);
  }
  if (v31)
  {
    v32 = v31;
    operator delete(v31);
  }
}

void sub_1E095CEA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  uint64_t v33;
  uint64_t v34;
  void *v36;
  void *v37;

  if (__p)
    operator delete(__p);
  v36 = *(void **)(v34 - 104);
  if (v36)
  {
    *(_QWORD *)(v34 - 96) = v36;
    operator delete(v36);
  }
  v37 = *(void **)v33;
  if (*(_QWORD *)v33)
  {
    *(_QWORD *)(v33 + 8) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<unsigned char,MIL::UInt3>(std::string::size_type a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, _QWORD *a6@<X8>)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int Int;
  unsigned int v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  std::runtime_error *exception;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string v26;
  std::string v27;
  std::string v28;
  void *__p[3];
  void *v30[3];
  _QWORD *v31;
  _BYTE *v32;

  v12 = *(_QWORD *)(a4 + 96);
  std::vector<unsigned char>::vector(a6, v12 * a2);
  std::vector<unsigned long>::vector(&v31, *(_QWORD *)(a4 + 96));
  std::vector<unsigned long>::vector(v30, (uint64_t)(*(_QWORD *)(a4 + 32) - *(_QWORD *)(a4 + 24)) >> 3);
  std::vector<unsigned long>::vector(__p, (uint64_t)(*(_QWORD *)(a4 + 56) - *(_QWORD *)(a4 + 48)) >> 3);
  if (a2)
  {
    v13 = 0;
    do
    {
      MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToOutputIndexes(a4, v13, &v31, (unint64_t **)v30);
      v14 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToBlockIndex((unint64_t **)a4, v13, (uint64_t)__p, (unint64_t **)v30);
      v28.__r_.__value_.__r.__words[0] = a1;
      v28.__r_.__value_.__l.__size_ = a2;
      v27.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt3 const,18446744073709551615ul>::ValueAt(&v28, v13);
      Int = MIL::UInt3::GetInt((MIL::UInt3 *)&v27);
      v16 = (int)(float)Int;
      if ((v16 & 0x80000000) != 0)
      {
        v20 = (int)(float)Int;
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v26, v20);
        v22 = std::string::insert(&v26, 0, "Index ");
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        v27.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        v24 = std::string::append(&v27, " cannot be negative");
        v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v28.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v28);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v17 = v31;
      if (v32 != (_BYTE *)v31)
      {
        v18 = 0;
        v19 = a3 + (v14 * a5 + v16) * v12;
        do
        {
          *(_BYTE *)(*a6 + v17[v18]) = *(_BYTE *)(v19 + v18);
          ++v18;
          v17 = v31;
        }
        while (v18 < (v32 - (_BYTE *)v31) >> 3);
      }
      ++v13;
    }
    while (v13 != a2);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v30[0])
  {
    v30[1] = v30[0];
    operator delete(v30[0]);
  }
  if (v31)
  {
    v32 = v31;
    operator delete(v31);
  }
}

void sub_1E095D1A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  uint64_t v33;
  uint64_t v34;
  void *v36;
  void *v37;

  if (__p)
    operator delete(__p);
  v36 = *(void **)(v34 - 104);
  if (v36)
  {
    *(_QWORD *)(v34 - 96) = v36;
    operator delete(v36);
  }
  v37 = *(void **)v33;
  if (*(_QWORD *)v33)
  {
    *(_QWORD *)(v33 + 8) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<unsigned char,MIL::UInt2>(std::string::size_type a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, _QWORD *a6@<X8>)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int Int;
  unsigned int v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  std::runtime_error *exception;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string v26;
  std::string v27;
  std::string v28;
  void *__p[3];
  void *v30[3];
  _QWORD *v31;
  _BYTE *v32;

  v12 = *(_QWORD *)(a4 + 96);
  std::vector<unsigned char>::vector(a6, v12 * a2);
  std::vector<unsigned long>::vector(&v31, *(_QWORD *)(a4 + 96));
  std::vector<unsigned long>::vector(v30, (uint64_t)(*(_QWORD *)(a4 + 32) - *(_QWORD *)(a4 + 24)) >> 3);
  std::vector<unsigned long>::vector(__p, (uint64_t)(*(_QWORD *)(a4 + 56) - *(_QWORD *)(a4 + 48)) >> 3);
  if (a2)
  {
    v13 = 0;
    do
    {
      MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToOutputIndexes(a4, v13, &v31, (unint64_t **)v30);
      v14 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToBlockIndex((unint64_t **)a4, v13, (uint64_t)__p, (unint64_t **)v30);
      v28.__r_.__value_.__r.__words[0] = a1;
      v28.__r_.__value_.__l.__size_ = a2;
      v27.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt2 const,18446744073709551615ul>::ValueAt(&v28, v13);
      Int = MIL::UInt2::GetInt((MIL::UInt2 *)&v27);
      v16 = (int)(float)Int;
      if ((v16 & 0x80000000) != 0)
      {
        v20 = (int)(float)Int;
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v26, v20);
        v22 = std::string::insert(&v26, 0, "Index ");
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        v27.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        v24 = std::string::append(&v27, " cannot be negative");
        v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v28.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v28);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v17 = v31;
      if (v32 != (_BYTE *)v31)
      {
        v18 = 0;
        v19 = a3 + (v14 * a5 + v16) * v12;
        do
        {
          *(_BYTE *)(*a6 + v17[v18]) = *(_BYTE *)(v19 + v18);
          ++v18;
          v17 = v31;
        }
        while (v18 < (v32 - (_BYTE *)v31) >> 3);
      }
      ++v13;
    }
    while (v13 != a2);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v30[0])
  {
    v30[1] = v30[0];
    operator delete(v30[0]);
  }
  if (v31)
  {
    v32 = v31;
    operator delete(v31);
  }
}

void sub_1E095D498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  uint64_t v33;
  uint64_t v34;
  void *v36;
  void *v37;

  if (__p)
    operator delete(__p);
  v36 = *(void **)(v34 - 104);
  if (v36)
  {
    *(_QWORD *)(v34 - 96) = v36;
    operator delete(v36);
  }
  v37 = *(void **)v33;
  if (*(_QWORD *)v33)
  {
    *(_QWORD *)(v33 + 8) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<unsigned char,MIL::UInt1>(std::string::size_type a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, _QWORD *a6@<X8>)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int Int;
  unsigned int v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  std::runtime_error *exception;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string v26;
  std::string v27;
  std::string v28;
  void *__p[3];
  void *v30[3];
  _QWORD *v31;
  _BYTE *v32;

  v12 = *(_QWORD *)(a4 + 96);
  std::vector<unsigned char>::vector(a6, v12 * a2);
  std::vector<unsigned long>::vector(&v31, *(_QWORD *)(a4 + 96));
  std::vector<unsigned long>::vector(v30, (uint64_t)(*(_QWORD *)(a4 + 32) - *(_QWORD *)(a4 + 24)) >> 3);
  std::vector<unsigned long>::vector(__p, (uint64_t)(*(_QWORD *)(a4 + 56) - *(_QWORD *)(a4 + 48)) >> 3);
  if (a2)
  {
    v13 = 0;
    do
    {
      MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToOutputIndexes(a4, v13, &v31, (unint64_t **)v30);
      v14 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToBlockIndex((unint64_t **)a4, v13, (uint64_t)__p, (unint64_t **)v30);
      v28.__r_.__value_.__r.__words[0] = a1;
      v28.__r_.__value_.__l.__size_ = a2;
      v27.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt1 const,18446744073709551615ul>::ValueAt(&v28, v13);
      Int = MIL::UInt1::GetInt((MIL::UInt1 *)&v27);
      v16 = (int)(float)Int;
      if ((v16 & 0x80000000) != 0)
      {
        v20 = (int)(float)Int;
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v26, v20);
        v22 = std::string::insert(&v26, 0, "Index ");
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        v27.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        v24 = std::string::append(&v27, " cannot be negative");
        v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v28.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v28);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v17 = v31;
      if (v32 != (_BYTE *)v31)
      {
        v18 = 0;
        v19 = a3 + (v14 * a5 + v16) * v12;
        do
        {
          *(_BYTE *)(*a6 + v17[v18]) = *(_BYTE *)(v19 + v18);
          ++v18;
          v17 = v31;
        }
        while (v18 < (v32 - (_BYTE *)v31) >> 3);
      }
      ++v13;
    }
    while (v13 != a2);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v30[0])
  {
    v30[1] = v30[0];
    operator delete(v30[0]);
  }
  if (v31)
  {
    v32 = v31;
    operator delete(v31);
  }
}

void sub_1E095D790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  uint64_t v33;
  uint64_t v34;
  void *v36;
  void *v37;

  if (__p)
    operator delete(__p);
  v36 = *(void **)(v34 - 104);
  if (v36)
  {
    *(_QWORD *)(v34 - 96) = v36;
    operator delete(v36);
  }
  v37 = *(void **)v33;
  if (*(_QWORD *)v33)
  {
    *(_QWORD *)(v33 + 8) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::~BlockwiseLutToDenseIndexConverter(MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 6);
  if (v3)
  {
    *((_QWORD *)this + 7) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 4) = v4;
    operator delete(v4);
  }
  v5 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v5;
    operator delete(v5);
  }
}

_QWORD *std::vector<unsigned long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1E095D930(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::BlockwiseLutToDenseIndexConverter(_QWORD *a1, uint64_t a2, unint64_t **a3, uint64_t a4, uint64_t a5)
{
  void *v10;
  void *v11;
  __int128 v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;

  MIL::Operators::Common::Shared::ConstExprs::GetBlockSizes((uint64_t **)a2, a3, a1);
  MIL::Operators::Common::Shared::ConstExprs::GetStrides((_QWORD *)a2, a1 + 3);
  MIL::Operators::Common::Shared::ConstExprs::GetStrides(a3, a1 + 6);
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  a1[12] = a4;
  a1[13] = a5;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v15, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v15[a5] *= a4;
  MIL::Operators::Common::Shared::ConstExprs::GetStrides(&v15, &v13);
  v10 = (void *)a1[9];
  if (v10)
  {
    a1[10] = v10;
    operator delete(v10);
    a1[9] = 0;
    a1[10] = 0;
    a1[11] = 0;
  }
  *(_OWORD *)(a1 + 9) = v13;
  v11 = v15;
  a1[11] = v14;
  if (v11)
  {
    v16 = v11;
    operator delete(v11);
  }
  return a1;
}

void sub_1E095DA48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v13;
  void **v14;
  void **v15;
  void **v16;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  if (__p)
    operator delete(__p);
  v18 = *v16;
  if (*v16)
  {
    *(_QWORD *)(v13 + 80) = v18;
    operator delete(v18);
  }
  v19 = *v15;
  if (*v15)
  {
    *(_QWORD *)(v13 + 56) = v19;
    operator delete(v19);
  }
  v20 = *v14;
  if (*v14)
  {
    *(_QWORD *)(v13 + 32) = v20;
    operator delete(v20);
  }
  v21 = *(void **)v13;
  if (*(_QWORD *)v13)
  {
    *(_QWORD *)(v13 + 8) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

unint64_t MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToOutputIndexes(uint64_t a1, unint64_t a2, _QWORD *a3, unint64_t **a4)
{
  unint64_t result;
  unint64_t v8;

  result = MIL::Operators::Common::Shared::ConstExprs::UnravelIndex(a2, a1 + 24, a4);
  (*a4)[*(_QWORD *)(a1 + 104)] *= *(_QWORD *)(a1 + 96);
  if (*(_QWORD *)(a1 + 96))
  {
    v8 = 0;
    do
    {
      result = MIL::Operators::Common::Shared::ConstExprs::RavelIndex((uint64_t **)a4, a1 + 72);
      *(_QWORD *)(*a3 + 8 * v8) = result;
      ++(*a4)[*(_QWORD *)(a1 + 104)];
      ++v8;
    }
    while (v8 < *(_QWORD *)(a1 + 96));
  }
  return result;
}

uint64_t MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToBlockIndex(unint64_t **a1, unint64_t a2, uint64_t a3, unint64_t **a4)
{
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  MIL::Operators::Common::Shared::ConstExprs::UnravelIndex(a2, (uint64_t)(a1 + 3), a4);
  v7 = *(uint64_t **)a3;
  v8 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v8)
  {
    v9 = v8 >> 3;
    v10 = *a4;
    v11 = *a1;
    if (v9 <= 1)
      v9 = 1;
    do
    {
      v13 = *v10++;
      v12 = v13;
      v14 = *v11++;
      *v7++ = v12 / v14;
      --v9;
    }
    while (v9);
  }
  return MIL::Operators::Common::Shared::ConstExprs::RavelIndex((uint64_t **)a3, (uint64_t)(a1 + 6));
}

void MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<signed char,unsigned char>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, _QWORD *a6@<X8>)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  void *__p[3];
  void *v19[3];
  void *v20;
  _BYTE *v21;

  v12 = *(_QWORD *)(a4 + 96);
  std::vector<signed char>::vector(a6, v12 * a2);
  std::vector<unsigned long>::vector(&v20, *(_QWORD *)(a4 + 96));
  std::vector<unsigned long>::vector(v19, (uint64_t)(*(_QWORD *)(a4 + 32) - *(_QWORD *)(a4 + 24)) >> 3);
  std::vector<unsigned long>::vector(__p, (uint64_t)(*(_QWORD *)(a4 + 56) - *(_QWORD *)(a4 + 48)) >> 3);
  if (a2)
  {
    v13 = 0;
    do
    {
      MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToOutputIndexes(a4, v13, &v20, (unint64_t **)v19);
      v14 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToBlockIndex((unint64_t **)a4, v13, (uint64_t)__p, (unint64_t **)v19);
      v15 = v20;
      if (v21 != v20)
      {
        v16 = 0;
        v17 = a3 + (*(unsigned __int8 *)(a1 + v13) + v14 * a5) * v12;
        do
        {
          *(_BYTE *)(*a6 + v15[v16]) = *(_BYTE *)(v17 + v16);
          ++v16;
          v15 = v20;
        }
        while (v16 < (v21 - (_BYTE *)v20) >> 3);
      }
      ++v13;
    }
    while (v13 != a2);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v19[0])
  {
    v19[1] = v19[0];
    operator delete(v19[0]);
  }
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
}

void sub_1E095DD20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  uint64_t v17;
  void *v19;

  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  v19 = *(void **)v17;
  if (*(_QWORD *)v17)
  {
    *(_QWORD *)(v17 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<signed char,MIL::UInt6>(std::string::size_type a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, _QWORD *a6@<X8>)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int Int;
  unsigned int v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  std::runtime_error *exception;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string v26;
  std::string v27;
  std::string v28;
  void *__p[3];
  void *v30[3];
  _QWORD *v31;
  _BYTE *v32;

  v12 = *(_QWORD *)(a4 + 96);
  std::vector<signed char>::vector(a6, v12 * a2);
  std::vector<unsigned long>::vector(&v31, *(_QWORD *)(a4 + 96));
  std::vector<unsigned long>::vector(v30, (uint64_t)(*(_QWORD *)(a4 + 32) - *(_QWORD *)(a4 + 24)) >> 3);
  std::vector<unsigned long>::vector(__p, (uint64_t)(*(_QWORD *)(a4 + 56) - *(_QWORD *)(a4 + 48)) >> 3);
  if (a2)
  {
    v13 = 0;
    do
    {
      MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToOutputIndexes(a4, v13, &v31, (unint64_t **)v30);
      v14 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToBlockIndex((unint64_t **)a4, v13, (uint64_t)__p, (unint64_t **)v30);
      v28.__r_.__value_.__r.__words[0] = a1;
      v28.__r_.__value_.__l.__size_ = a2;
      v27.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt6 const,18446744073709551615ul>::ValueAt(&v28, v13);
      Int = MIL::UInt6::GetInt((MIL::UInt6 *)&v27);
      v16 = (int)(float)Int;
      if ((v16 & 0x80000000) != 0)
      {
        v20 = (int)(float)Int;
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v26, v20);
        v22 = std::string::insert(&v26, 0, "Index ");
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        v27.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        v24 = std::string::append(&v27, " cannot be negative");
        v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v28.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v28);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v17 = v31;
      if (v32 != (_BYTE *)v31)
      {
        v18 = 0;
        v19 = a3 + (v14 * a5 + v16) * v12;
        do
        {
          *(_BYTE *)(*a6 + v17[v18]) = *(_BYTE *)(v19 + v18);
          ++v18;
          v17 = v31;
        }
        while (v18 < (v32 - (_BYTE *)v31) >> 3);
      }
      ++v13;
    }
    while (v13 != a2);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v30[0])
  {
    v30[1] = v30[0];
    operator delete(v30[0]);
  }
  if (v31)
  {
    v32 = v31;
    operator delete(v31);
  }
}

void sub_1E095DF9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  uint64_t v33;
  uint64_t v34;
  void *v36;
  void *v37;

  if (__p)
    operator delete(__p);
  v36 = *(void **)(v34 - 104);
  if (v36)
  {
    *(_QWORD *)(v34 - 96) = v36;
    operator delete(v36);
  }
  v37 = *(void **)v33;
  if (*(_QWORD *)v33)
  {
    *(_QWORD *)(v33 + 8) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<signed char,MIL::UInt4>(std::string::size_type a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, _QWORD *a6@<X8>)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int Int;
  unsigned int v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  std::runtime_error *exception;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string v26;
  std::string v27;
  std::string v28;
  void *__p[3];
  void *v30[3];
  _QWORD *v31;
  _BYTE *v32;

  v12 = *(_QWORD *)(a4 + 96);
  std::vector<signed char>::vector(a6, v12 * a2);
  std::vector<unsigned long>::vector(&v31, *(_QWORD *)(a4 + 96));
  std::vector<unsigned long>::vector(v30, (uint64_t)(*(_QWORD *)(a4 + 32) - *(_QWORD *)(a4 + 24)) >> 3);
  std::vector<unsigned long>::vector(__p, (uint64_t)(*(_QWORD *)(a4 + 56) - *(_QWORD *)(a4 + 48)) >> 3);
  if (a2)
  {
    v13 = 0;
    do
    {
      MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToOutputIndexes(a4, v13, &v31, (unint64_t **)v30);
      v14 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToBlockIndex((unint64_t **)a4, v13, (uint64_t)__p, (unint64_t **)v30);
      v28.__r_.__value_.__r.__words[0] = a1;
      v28.__r_.__value_.__l.__size_ = a2;
      v27.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(&v28, v13);
      Int = MIL::UInt4::GetInt((MIL::UInt4 *)&v27);
      v16 = (int)(float)Int;
      if ((v16 & 0x80000000) != 0)
      {
        v20 = (int)(float)Int;
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v26, v20);
        v22 = std::string::insert(&v26, 0, "Index ");
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        v27.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        v24 = std::string::append(&v27, " cannot be negative");
        v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v28.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v28);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v17 = v31;
      if (v32 != (_BYTE *)v31)
      {
        v18 = 0;
        v19 = a3 + (v14 * a5 + v16) * v12;
        do
        {
          *(_BYTE *)(*a6 + v17[v18]) = *(_BYTE *)(v19 + v18);
          ++v18;
          v17 = v31;
        }
        while (v18 < (v32 - (_BYTE *)v31) >> 3);
      }
      ++v13;
    }
    while (v13 != a2);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v30[0])
  {
    v30[1] = v30[0];
    operator delete(v30[0]);
  }
  if (v31)
  {
    v32 = v31;
    operator delete(v31);
  }
}

void sub_1E095E294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  uint64_t v33;
  uint64_t v34;
  void *v36;
  void *v37;

  if (__p)
    operator delete(__p);
  v36 = *(void **)(v34 - 104);
  if (v36)
  {
    *(_QWORD *)(v34 - 96) = v36;
    operator delete(v36);
  }
  v37 = *(void **)v33;
  if (*(_QWORD *)v33)
  {
    *(_QWORD *)(v33 + 8) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<signed char,MIL::UInt3>(std::string::size_type a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, _QWORD *a6@<X8>)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int Int;
  unsigned int v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  std::runtime_error *exception;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string v26;
  std::string v27;
  std::string v28;
  void *__p[3];
  void *v30[3];
  _QWORD *v31;
  _BYTE *v32;

  v12 = *(_QWORD *)(a4 + 96);
  std::vector<signed char>::vector(a6, v12 * a2);
  std::vector<unsigned long>::vector(&v31, *(_QWORD *)(a4 + 96));
  std::vector<unsigned long>::vector(v30, (uint64_t)(*(_QWORD *)(a4 + 32) - *(_QWORD *)(a4 + 24)) >> 3);
  std::vector<unsigned long>::vector(__p, (uint64_t)(*(_QWORD *)(a4 + 56) - *(_QWORD *)(a4 + 48)) >> 3);
  if (a2)
  {
    v13 = 0;
    do
    {
      MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToOutputIndexes(a4, v13, &v31, (unint64_t **)v30);
      v14 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToBlockIndex((unint64_t **)a4, v13, (uint64_t)__p, (unint64_t **)v30);
      v28.__r_.__value_.__r.__words[0] = a1;
      v28.__r_.__value_.__l.__size_ = a2;
      v27.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt3 const,18446744073709551615ul>::ValueAt(&v28, v13);
      Int = MIL::UInt3::GetInt((MIL::UInt3 *)&v27);
      v16 = (int)(float)Int;
      if ((v16 & 0x80000000) != 0)
      {
        v20 = (int)(float)Int;
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v26, v20);
        v22 = std::string::insert(&v26, 0, "Index ");
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        v27.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        v24 = std::string::append(&v27, " cannot be negative");
        v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v28.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v28);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v17 = v31;
      if (v32 != (_BYTE *)v31)
      {
        v18 = 0;
        v19 = a3 + (v14 * a5 + v16) * v12;
        do
        {
          *(_BYTE *)(*a6 + v17[v18]) = *(_BYTE *)(v19 + v18);
          ++v18;
          v17 = v31;
        }
        while (v18 < (v32 - (_BYTE *)v31) >> 3);
      }
      ++v13;
    }
    while (v13 != a2);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v30[0])
  {
    v30[1] = v30[0];
    operator delete(v30[0]);
  }
  if (v31)
  {
    v32 = v31;
    operator delete(v31);
  }
}

void sub_1E095E58C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  uint64_t v33;
  uint64_t v34;
  void *v36;
  void *v37;

  if (__p)
    operator delete(__p);
  v36 = *(void **)(v34 - 104);
  if (v36)
  {
    *(_QWORD *)(v34 - 96) = v36;
    operator delete(v36);
  }
  v37 = *(void **)v33;
  if (*(_QWORD *)v33)
  {
    *(_QWORD *)(v33 + 8) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<signed char,MIL::UInt2>(std::string::size_type a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, _QWORD *a6@<X8>)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int Int;
  unsigned int v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  std::runtime_error *exception;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string v26;
  std::string v27;
  std::string v28;
  void *__p[3];
  void *v30[3];
  _QWORD *v31;
  _BYTE *v32;

  v12 = *(_QWORD *)(a4 + 96);
  std::vector<signed char>::vector(a6, v12 * a2);
  std::vector<unsigned long>::vector(&v31, *(_QWORD *)(a4 + 96));
  std::vector<unsigned long>::vector(v30, (uint64_t)(*(_QWORD *)(a4 + 32) - *(_QWORD *)(a4 + 24)) >> 3);
  std::vector<unsigned long>::vector(__p, (uint64_t)(*(_QWORD *)(a4 + 56) - *(_QWORD *)(a4 + 48)) >> 3);
  if (a2)
  {
    v13 = 0;
    do
    {
      MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToOutputIndexes(a4, v13, &v31, (unint64_t **)v30);
      v14 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToBlockIndex((unint64_t **)a4, v13, (uint64_t)__p, (unint64_t **)v30);
      v28.__r_.__value_.__r.__words[0] = a1;
      v28.__r_.__value_.__l.__size_ = a2;
      v27.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt2 const,18446744073709551615ul>::ValueAt(&v28, v13);
      Int = MIL::UInt2::GetInt((MIL::UInt2 *)&v27);
      v16 = (int)(float)Int;
      if ((v16 & 0x80000000) != 0)
      {
        v20 = (int)(float)Int;
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v26, v20);
        v22 = std::string::insert(&v26, 0, "Index ");
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        v27.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        v24 = std::string::append(&v27, " cannot be negative");
        v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v28.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v28);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v17 = v31;
      if (v32 != (_BYTE *)v31)
      {
        v18 = 0;
        v19 = a3 + (v14 * a5 + v16) * v12;
        do
        {
          *(_BYTE *)(*a6 + v17[v18]) = *(_BYTE *)(v19 + v18);
          ++v18;
          v17 = v31;
        }
        while (v18 < (v32 - (_BYTE *)v31) >> 3);
      }
      ++v13;
    }
    while (v13 != a2);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v30[0])
  {
    v30[1] = v30[0];
    operator delete(v30[0]);
  }
  if (v31)
  {
    v32 = v31;
    operator delete(v31);
  }
}

void sub_1E095E884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  uint64_t v33;
  uint64_t v34;
  void *v36;
  void *v37;

  if (__p)
    operator delete(__p);
  v36 = *(void **)(v34 - 104);
  if (v36)
  {
    *(_QWORD *)(v34 - 96) = v36;
    operator delete(v36);
  }
  v37 = *(void **)v33;
  if (*(_QWORD *)v33)
  {
    *(_QWORD *)(v33 + 8) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<signed char,MIL::UInt1>(std::string::size_type a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, _QWORD *a6@<X8>)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int Int;
  unsigned int v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  std::runtime_error *exception;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string v26;
  std::string v27;
  std::string v28;
  void *__p[3];
  void *v30[3];
  _QWORD *v31;
  _BYTE *v32;

  v12 = *(_QWORD *)(a4 + 96);
  std::vector<signed char>::vector(a6, v12 * a2);
  std::vector<unsigned long>::vector(&v31, *(_QWORD *)(a4 + 96));
  std::vector<unsigned long>::vector(v30, (uint64_t)(*(_QWORD *)(a4 + 32) - *(_QWORD *)(a4 + 24)) >> 3);
  std::vector<unsigned long>::vector(__p, (uint64_t)(*(_QWORD *)(a4 + 56) - *(_QWORD *)(a4 + 48)) >> 3);
  if (a2)
  {
    v13 = 0;
    do
    {
      MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToOutputIndexes(a4, v13, &v31, (unint64_t **)v30);
      v14 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToBlockIndex((unint64_t **)a4, v13, (uint64_t)__p, (unint64_t **)v30);
      v28.__r_.__value_.__r.__words[0] = a1;
      v28.__r_.__value_.__l.__size_ = a2;
      v27.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt1 const,18446744073709551615ul>::ValueAt(&v28, v13);
      Int = MIL::UInt1::GetInt((MIL::UInt1 *)&v27);
      v16 = (int)(float)Int;
      if ((v16 & 0x80000000) != 0)
      {
        v20 = (int)(float)Int;
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v26, v20);
        v22 = std::string::insert(&v26, 0, "Index ");
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        v27.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        v24 = std::string::append(&v27, " cannot be negative");
        v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v28.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v28);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v17 = v31;
      if (v32 != (_BYTE *)v31)
      {
        v18 = 0;
        v19 = a3 + (v14 * a5 + v16) * v12;
        do
        {
          *(_BYTE *)(*a6 + v17[v18]) = *(_BYTE *)(v19 + v18);
          ++v18;
          v17 = v31;
        }
        while (v18 < (v32 - (_BYTE *)v31) >> 3);
      }
      ++v13;
    }
    while (v13 != a2);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v30[0])
  {
    v30[1] = v30[0];
    operator delete(v30[0]);
  }
  if (v31)
  {
    v32 = v31;
    operator delete(v31);
  }
}

void sub_1E095EB7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  uint64_t v33;
  uint64_t v34;
  void *v36;
  void *v37;

  if (__p)
    operator delete(__p);
  v36 = *(void **)(v34 - 104);
  if (v36)
  {
    *(_QWORD *)(v34 - 96) = v36;
    operator delete(v36);
  }
  v37 = *(void **)v33;
  if (*(_QWORD *)v33)
  {
    *(_QWORD *)(v33 + 8) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<MIL::Bf16,unsigned char>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _WORD *v19;
  uint64_t v20;
  uint64_t v21;
  void *__p[3];
  void *v23[3];
  void *v24;
  _BYTE *v25;

  v12 = *(_QWORD *)(a4 + 96);
  std::vector<MIL::Bf16>::vector(a6, v12 * a2);
  std::vector<unsigned long>::vector(&v24, *(_QWORD *)(a4 + 96));
  std::vector<unsigned long>::vector(v23, (uint64_t)(*(_QWORD *)(a4 + 32) - *(_QWORD *)(a4 + 24)) >> 3);
  std::vector<unsigned long>::vector(__p, (uint64_t)(*(_QWORD *)(a4 + 56) - *(_QWORD *)(a4 + 48)) >> 3);
  if (a2)
  {
    v13 = 0;
    v14 = 2 * v12;
    do
    {
      MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToOutputIndexes(a4, v13, &v24, (unint64_t **)v23);
      v15 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToBlockIndex((unint64_t **)a4, v13, (uint64_t)__p, (unint64_t **)v23);
      v16 = (uint64_t *)v24;
      if (v25 != v24)
      {
        v17 = *a6;
        if ((unint64_t)((v25 - (_BYTE *)v24) >> 3) <= 1)
          v18 = 1;
        else
          v18 = (v25 - (_BYTE *)v24) >> 3;
        v19 = (_WORD *)(a3 + v14 * (*(unsigned __int8 *)(a1 + v13) + v15 * a5));
        do
        {
          v21 = *v16++;
          v20 = v21;
          LOWORD(v21) = *v19++;
          *(_WORD *)(v17 + 2 * v20) = v21;
          --v18;
        }
        while (v18);
      }
      ++v13;
    }
    while (v13 != a2);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v23[0])
  {
    v23[1] = v23[0];
    operator delete(v23[0]);
  }
  if (v24)
  {
    v25 = v24;
    operator delete(v24);
  }
}

void sub_1E095EDA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  uint64_t v17;
  void *v19;

  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  v19 = *(void **)v17;
  if (*(_QWORD *)v17)
  {
    *(_QWORD *)(v17 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<MIL::Bf16,MIL::UInt6>(std::string::size_type a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int Int;
  unsigned int v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  std::runtime_error *exception;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  std::string v31;
  std::string v32;
  std::string v33;
  void *__p[3];
  void *v35[3];
  uint64_t *v36;
  uint64_t *v37;

  v12 = *(_QWORD *)(a4 + 96);
  std::vector<MIL::Bf16>::vector(a6, v12 * a2);
  std::vector<unsigned long>::vector(&v36, *(_QWORD *)(a4 + 96));
  std::vector<unsigned long>::vector(v35, (uint64_t)(*(_QWORD *)(a4 + 32) - *(_QWORD *)(a4 + 24)) >> 3);
  std::vector<unsigned long>::vector(__p, (uint64_t)(*(_QWORD *)(a4 + 56) - *(_QWORD *)(a4 + 48)) >> 3);
  if (a2)
  {
    v13 = 0;
    v14 = 2 * v12;
    do
    {
      MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToOutputIndexes(a4, v13, &v36, (unint64_t **)v35);
      v15 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToBlockIndex((unint64_t **)a4, v13, (uint64_t)__p, (unint64_t **)v35);
      v33.__r_.__value_.__r.__words[0] = a1;
      v33.__r_.__value_.__l.__size_ = a2;
      v32.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt6 const,18446744073709551615ul>::ValueAt(&v33, v13);
      Int = MIL::UInt6::GetInt((MIL::UInt6 *)&v32);
      v17 = (int)(float)Int;
      if ((v17 & 0x80000000) != 0)
      {
        v25 = (int)(float)Int;
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v31, v25);
        v27 = std::string::insert(&v31, 0, "Index ");
        v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
        v32.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v28;
        v27->__r_.__value_.__l.__size_ = 0;
        v27->__r_.__value_.__r.__words[2] = 0;
        v27->__r_.__value_.__r.__words[0] = 0;
        v29 = std::string::append(&v32, " cannot be negative");
        v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        v33.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v33);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v18 = v36;
      if (v37 != v36)
      {
        v19 = v37 - v36;
        v20 = v15 * a5 + v17;
        v21 = *a6;
        if (v19 <= 1)
          v19 = 1;
        v22 = (_WORD *)(a3 + v14 * v20);
        do
        {
          v24 = *v18++;
          v23 = v24;
          LOWORD(v24) = *v22++;
          *(_WORD *)(v21 + 2 * v23) = v24;
          --v19;
        }
        while (v19);
      }
      ++v13;
    }
    while (v13 != a2);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v35[0])
  {
    v35[1] = v35[0];
    operator delete(v35[0]);
  }
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
}

void sub_1E095F01C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  uint64_t v33;
  uint64_t v34;
  void *v36;
  void *v37;

  if (__p)
    operator delete(__p);
  v36 = *(void **)(v34 - 104);
  if (v36)
  {
    *(_QWORD *)(v34 - 96) = v36;
    operator delete(v36);
  }
  v37 = *(void **)v33;
  if (*(_QWORD *)v33)
  {
    *(_QWORD *)(v33 + 8) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<MIL::Bf16,MIL::UInt4>(std::string::size_type a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int Int;
  unsigned int v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  std::runtime_error *exception;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  std::string v31;
  std::string v32;
  std::string v33;
  void *__p[3];
  void *v35[3];
  uint64_t *v36;
  uint64_t *v37;

  v12 = *(_QWORD *)(a4 + 96);
  std::vector<MIL::Bf16>::vector(a6, v12 * a2);
  std::vector<unsigned long>::vector(&v36, *(_QWORD *)(a4 + 96));
  std::vector<unsigned long>::vector(v35, (uint64_t)(*(_QWORD *)(a4 + 32) - *(_QWORD *)(a4 + 24)) >> 3);
  std::vector<unsigned long>::vector(__p, (uint64_t)(*(_QWORD *)(a4 + 56) - *(_QWORD *)(a4 + 48)) >> 3);
  if (a2)
  {
    v13 = 0;
    v14 = 2 * v12;
    do
    {
      MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToOutputIndexes(a4, v13, &v36, (unint64_t **)v35);
      v15 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToBlockIndex((unint64_t **)a4, v13, (uint64_t)__p, (unint64_t **)v35);
      v33.__r_.__value_.__r.__words[0] = a1;
      v33.__r_.__value_.__l.__size_ = a2;
      v32.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(&v33, v13);
      Int = MIL::UInt4::GetInt((MIL::UInt4 *)&v32);
      v17 = (int)(float)Int;
      if ((v17 & 0x80000000) != 0)
      {
        v25 = (int)(float)Int;
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v31, v25);
        v27 = std::string::insert(&v31, 0, "Index ");
        v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
        v32.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v28;
        v27->__r_.__value_.__l.__size_ = 0;
        v27->__r_.__value_.__r.__words[2] = 0;
        v27->__r_.__value_.__r.__words[0] = 0;
        v29 = std::string::append(&v32, " cannot be negative");
        v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        v33.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v33);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v18 = v36;
      if (v37 != v36)
      {
        v19 = v37 - v36;
        v20 = v15 * a5 + v17;
        v21 = *a6;
        if (v19 <= 1)
          v19 = 1;
        v22 = (_WORD *)(a3 + v14 * v20);
        do
        {
          v24 = *v18++;
          v23 = v24;
          LOWORD(v24) = *v22++;
          *(_WORD *)(v21 + 2 * v23) = v24;
          --v19;
        }
        while (v19);
      }
      ++v13;
    }
    while (v13 != a2);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v35[0])
  {
    v35[1] = v35[0];
    operator delete(v35[0]);
  }
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
}

void sub_1E095F314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  uint64_t v33;
  uint64_t v34;
  void *v36;
  void *v37;

  if (__p)
    operator delete(__p);
  v36 = *(void **)(v34 - 104);
  if (v36)
  {
    *(_QWORD *)(v34 - 96) = v36;
    operator delete(v36);
  }
  v37 = *(void **)v33;
  if (*(_QWORD *)v33)
  {
    *(_QWORD *)(v33 + 8) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<MIL::Bf16,MIL::UInt3>(std::string::size_type a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int Int;
  unsigned int v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  std::runtime_error *exception;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  std::string v31;
  std::string v32;
  std::string v33;
  void *__p[3];
  void *v35[3];
  uint64_t *v36;
  uint64_t *v37;

  v12 = *(_QWORD *)(a4 + 96);
  std::vector<MIL::Bf16>::vector(a6, v12 * a2);
  std::vector<unsigned long>::vector(&v36, *(_QWORD *)(a4 + 96));
  std::vector<unsigned long>::vector(v35, (uint64_t)(*(_QWORD *)(a4 + 32) - *(_QWORD *)(a4 + 24)) >> 3);
  std::vector<unsigned long>::vector(__p, (uint64_t)(*(_QWORD *)(a4 + 56) - *(_QWORD *)(a4 + 48)) >> 3);
  if (a2)
  {
    v13 = 0;
    v14 = 2 * v12;
    do
    {
      MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToOutputIndexes(a4, v13, &v36, (unint64_t **)v35);
      v15 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToBlockIndex((unint64_t **)a4, v13, (uint64_t)__p, (unint64_t **)v35);
      v33.__r_.__value_.__r.__words[0] = a1;
      v33.__r_.__value_.__l.__size_ = a2;
      v32.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt3 const,18446744073709551615ul>::ValueAt(&v33, v13);
      Int = MIL::UInt3::GetInt((MIL::UInt3 *)&v32);
      v17 = (int)(float)Int;
      if ((v17 & 0x80000000) != 0)
      {
        v25 = (int)(float)Int;
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v31, v25);
        v27 = std::string::insert(&v31, 0, "Index ");
        v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
        v32.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v28;
        v27->__r_.__value_.__l.__size_ = 0;
        v27->__r_.__value_.__r.__words[2] = 0;
        v27->__r_.__value_.__r.__words[0] = 0;
        v29 = std::string::append(&v32, " cannot be negative");
        v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        v33.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v33);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v18 = v36;
      if (v37 != v36)
      {
        v19 = v37 - v36;
        v20 = v15 * a5 + v17;
        v21 = *a6;
        if (v19 <= 1)
          v19 = 1;
        v22 = (_WORD *)(a3 + v14 * v20);
        do
        {
          v24 = *v18++;
          v23 = v24;
          LOWORD(v24) = *v22++;
          *(_WORD *)(v21 + 2 * v23) = v24;
          --v19;
        }
        while (v19);
      }
      ++v13;
    }
    while (v13 != a2);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v35[0])
  {
    v35[1] = v35[0];
    operator delete(v35[0]);
  }
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
}

void sub_1E095F60C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  uint64_t v33;
  uint64_t v34;
  void *v36;
  void *v37;

  if (__p)
    operator delete(__p);
  v36 = *(void **)(v34 - 104);
  if (v36)
  {
    *(_QWORD *)(v34 - 96) = v36;
    operator delete(v36);
  }
  v37 = *(void **)v33;
  if (*(_QWORD *)v33)
  {
    *(_QWORD *)(v33 + 8) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<MIL::Bf16,MIL::UInt2>(std::string::size_type a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int Int;
  unsigned int v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  std::runtime_error *exception;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  std::string v31;
  std::string v32;
  std::string v33;
  void *__p[3];
  void *v35[3];
  uint64_t *v36;
  uint64_t *v37;

  v12 = *(_QWORD *)(a4 + 96);
  std::vector<MIL::Bf16>::vector(a6, v12 * a2);
  std::vector<unsigned long>::vector(&v36, *(_QWORD *)(a4 + 96));
  std::vector<unsigned long>::vector(v35, (uint64_t)(*(_QWORD *)(a4 + 32) - *(_QWORD *)(a4 + 24)) >> 3);
  std::vector<unsigned long>::vector(__p, (uint64_t)(*(_QWORD *)(a4 + 56) - *(_QWORD *)(a4 + 48)) >> 3);
  if (a2)
  {
    v13 = 0;
    v14 = 2 * v12;
    do
    {
      MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToOutputIndexes(a4, v13, &v36, (unint64_t **)v35);
      v15 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToBlockIndex((unint64_t **)a4, v13, (uint64_t)__p, (unint64_t **)v35);
      v33.__r_.__value_.__r.__words[0] = a1;
      v33.__r_.__value_.__l.__size_ = a2;
      v32.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt2 const,18446744073709551615ul>::ValueAt(&v33, v13);
      Int = MIL::UInt2::GetInt((MIL::UInt2 *)&v32);
      v17 = (int)(float)Int;
      if ((v17 & 0x80000000) != 0)
      {
        v25 = (int)(float)Int;
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v31, v25);
        v27 = std::string::insert(&v31, 0, "Index ");
        v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
        v32.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v28;
        v27->__r_.__value_.__l.__size_ = 0;
        v27->__r_.__value_.__r.__words[2] = 0;
        v27->__r_.__value_.__r.__words[0] = 0;
        v29 = std::string::append(&v32, " cannot be negative");
        v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        v33.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v33);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v18 = v36;
      if (v37 != v36)
      {
        v19 = v37 - v36;
        v20 = v15 * a5 + v17;
        v21 = *a6;
        if (v19 <= 1)
          v19 = 1;
        v22 = (_WORD *)(a3 + v14 * v20);
        do
        {
          v24 = *v18++;
          v23 = v24;
          LOWORD(v24) = *v22++;
          *(_WORD *)(v21 + 2 * v23) = v24;
          --v19;
        }
        while (v19);
      }
      ++v13;
    }
    while (v13 != a2);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v35[0])
  {
    v35[1] = v35[0];
    operator delete(v35[0]);
  }
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
}

void sub_1E095F904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  uint64_t v33;
  uint64_t v34;
  void *v36;
  void *v37;

  if (__p)
    operator delete(__p);
  v36 = *(void **)(v34 - 104);
  if (v36)
  {
    *(_QWORD *)(v34 - 96) = v36;
    operator delete(v36);
  }
  v37 = *(void **)v33;
  if (*(_QWORD *)v33)
  {
    *(_QWORD *)(v33 + 8) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<MIL::Bf16,MIL::UInt1>(std::string::size_type a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int Int;
  unsigned int v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  std::runtime_error *exception;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  std::string v31;
  std::string v32;
  std::string v33;
  void *__p[3];
  void *v35[3];
  uint64_t *v36;
  uint64_t *v37;

  v12 = *(_QWORD *)(a4 + 96);
  std::vector<MIL::Bf16>::vector(a6, v12 * a2);
  std::vector<unsigned long>::vector(&v36, *(_QWORD *)(a4 + 96));
  std::vector<unsigned long>::vector(v35, (uint64_t)(*(_QWORD *)(a4 + 32) - *(_QWORD *)(a4 + 24)) >> 3);
  std::vector<unsigned long>::vector(__p, (uint64_t)(*(_QWORD *)(a4 + 56) - *(_QWORD *)(a4 + 48)) >> 3);
  if (a2)
  {
    v13 = 0;
    v14 = 2 * v12;
    do
    {
      MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToOutputIndexes(a4, v13, &v36, (unint64_t **)v35);
      v15 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToBlockIndex((unint64_t **)a4, v13, (uint64_t)__p, (unint64_t **)v35);
      v33.__r_.__value_.__r.__words[0] = a1;
      v33.__r_.__value_.__l.__size_ = a2;
      v32.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt1 const,18446744073709551615ul>::ValueAt(&v33, v13);
      Int = MIL::UInt1::GetInt((MIL::UInt1 *)&v32);
      v17 = (int)(float)Int;
      if ((v17 & 0x80000000) != 0)
      {
        v25 = (int)(float)Int;
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v31, v25);
        v27 = std::string::insert(&v31, 0, "Index ");
        v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
        v32.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v28;
        v27->__r_.__value_.__l.__size_ = 0;
        v27->__r_.__value_.__r.__words[2] = 0;
        v27->__r_.__value_.__r.__words[0] = 0;
        v29 = std::string::append(&v32, " cannot be negative");
        v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        v33.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v33);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v18 = v36;
      if (v37 != v36)
      {
        v19 = v37 - v36;
        v20 = v15 * a5 + v17;
        v21 = *a6;
        if (v19 <= 1)
          v19 = 1;
        v22 = (_WORD *)(a3 + v14 * v20);
        do
        {
          v24 = *v18++;
          v23 = v24;
          LOWORD(v24) = *v22++;
          *(_WORD *)(v21 + 2 * v23) = v24;
          --v19;
        }
        while (v19);
      }
      ++v13;
    }
    while (v13 != a2);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v35[0])
  {
    v35[1] = v35[0];
    operator delete(v35[0]);
  }
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
}

void sub_1E095FBFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  uint64_t v33;
  uint64_t v34;
  void *v36;
  void *v37;

  if (__p)
    operator delete(__p);
  v36 = *(void **)(v34 - 104);
  if (v36)
  {
    *(_QWORD *)(v34 - 96) = v36;
    operator delete(v36);
  }
  v37 = *(void **)v33;
  if (*(_QWORD *)v33)
  {
    *(_QWORD *)(v33 + 8) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<MIL::Fp16,unsigned char>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _WORD *v19;
  uint64_t v20;
  uint64_t v21;
  void *__p[3];
  void *v23[3];
  void *v24;
  _BYTE *v25;

  v12 = *(_QWORD *)(a4 + 96);
  std::vector<MIL::Fp16>::vector(a6, v12 * a2);
  std::vector<unsigned long>::vector(&v24, *(_QWORD *)(a4 + 96));
  std::vector<unsigned long>::vector(v23, (uint64_t)(*(_QWORD *)(a4 + 32) - *(_QWORD *)(a4 + 24)) >> 3);
  std::vector<unsigned long>::vector(__p, (uint64_t)(*(_QWORD *)(a4 + 56) - *(_QWORD *)(a4 + 48)) >> 3);
  if (a2)
  {
    v13 = 0;
    v14 = 2 * v12;
    do
    {
      MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToOutputIndexes(a4, v13, &v24, (unint64_t **)v23);
      v15 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToBlockIndex((unint64_t **)a4, v13, (uint64_t)__p, (unint64_t **)v23);
      v16 = (uint64_t *)v24;
      if (v25 != v24)
      {
        v17 = *a6;
        if ((unint64_t)((v25 - (_BYTE *)v24) >> 3) <= 1)
          v18 = 1;
        else
          v18 = (v25 - (_BYTE *)v24) >> 3;
        v19 = (_WORD *)(a3 + v14 * (*(unsigned __int8 *)(a1 + v13) + v15 * a5));
        do
        {
          v21 = *v16++;
          v20 = v21;
          LOWORD(v21) = *v19++;
          *(_WORD *)(v17 + 2 * v20) = v21;
          --v18;
        }
        while (v18);
      }
      ++v13;
    }
    while (v13 != a2);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v23[0])
  {
    v23[1] = v23[0];
    operator delete(v23[0]);
  }
  if (v24)
  {
    v25 = v24;
    operator delete(v24);
  }
}

void sub_1E095FE20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  uint64_t v17;
  void *v19;

  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  v19 = *(void **)v17;
  if (*(_QWORD *)v17)
  {
    *(_QWORD *)(v17 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<MIL::Fp16,MIL::UInt6>(std::string::size_type a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int Int;
  unsigned int v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  std::runtime_error *exception;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  std::string v31;
  std::string v32;
  std::string v33;
  void *__p[3];
  void *v35[3];
  uint64_t *v36;
  uint64_t *v37;

  v12 = *(_QWORD *)(a4 + 96);
  std::vector<MIL::Fp16>::vector(a6, v12 * a2);
  std::vector<unsigned long>::vector(&v36, *(_QWORD *)(a4 + 96));
  std::vector<unsigned long>::vector(v35, (uint64_t)(*(_QWORD *)(a4 + 32) - *(_QWORD *)(a4 + 24)) >> 3);
  std::vector<unsigned long>::vector(__p, (uint64_t)(*(_QWORD *)(a4 + 56) - *(_QWORD *)(a4 + 48)) >> 3);
  if (a2)
  {
    v13 = 0;
    v14 = 2 * v12;
    do
    {
      MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToOutputIndexes(a4, v13, &v36, (unint64_t **)v35);
      v15 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToBlockIndex((unint64_t **)a4, v13, (uint64_t)__p, (unint64_t **)v35);
      v33.__r_.__value_.__r.__words[0] = a1;
      v33.__r_.__value_.__l.__size_ = a2;
      v32.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt6 const,18446744073709551615ul>::ValueAt(&v33, v13);
      Int = MIL::UInt6::GetInt((MIL::UInt6 *)&v32);
      v17 = (int)(float)Int;
      if ((v17 & 0x80000000) != 0)
      {
        v25 = (int)(float)Int;
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v31, v25);
        v27 = std::string::insert(&v31, 0, "Index ");
        v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
        v32.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v28;
        v27->__r_.__value_.__l.__size_ = 0;
        v27->__r_.__value_.__r.__words[2] = 0;
        v27->__r_.__value_.__r.__words[0] = 0;
        v29 = std::string::append(&v32, " cannot be negative");
        v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        v33.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v33);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v18 = v36;
      if (v37 != v36)
      {
        v19 = v37 - v36;
        v20 = v15 * a5 + v17;
        v21 = *a6;
        if (v19 <= 1)
          v19 = 1;
        v22 = (_WORD *)(a3 + v14 * v20);
        do
        {
          v24 = *v18++;
          v23 = v24;
          LOWORD(v24) = *v22++;
          *(_WORD *)(v21 + 2 * v23) = v24;
          --v19;
        }
        while (v19);
      }
      ++v13;
    }
    while (v13 != a2);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v35[0])
  {
    v35[1] = v35[0];
    operator delete(v35[0]);
  }
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
}

void sub_1E096009C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  uint64_t v33;
  uint64_t v34;
  void *v36;
  void *v37;

  if (__p)
    operator delete(__p);
  v36 = *(void **)(v34 - 104);
  if (v36)
  {
    *(_QWORD *)(v34 - 96) = v36;
    operator delete(v36);
  }
  v37 = *(void **)v33;
  if (*(_QWORD *)v33)
  {
    *(_QWORD *)(v33 + 8) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<MIL::Fp16,MIL::UInt4>(std::string::size_type a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int Int;
  unsigned int v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  std::runtime_error *exception;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  std::string v31;
  std::string v32;
  std::string v33;
  void *__p[3];
  void *v35[3];
  uint64_t *v36;
  uint64_t *v37;

  v12 = *(_QWORD *)(a4 + 96);
  std::vector<MIL::Fp16>::vector(a6, v12 * a2);
  std::vector<unsigned long>::vector(&v36, *(_QWORD *)(a4 + 96));
  std::vector<unsigned long>::vector(v35, (uint64_t)(*(_QWORD *)(a4 + 32) - *(_QWORD *)(a4 + 24)) >> 3);
  std::vector<unsigned long>::vector(__p, (uint64_t)(*(_QWORD *)(a4 + 56) - *(_QWORD *)(a4 + 48)) >> 3);
  if (a2)
  {
    v13 = 0;
    v14 = 2 * v12;
    do
    {
      MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToOutputIndexes(a4, v13, &v36, (unint64_t **)v35);
      v15 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToBlockIndex((unint64_t **)a4, v13, (uint64_t)__p, (unint64_t **)v35);
      v33.__r_.__value_.__r.__words[0] = a1;
      v33.__r_.__value_.__l.__size_ = a2;
      v32.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(&v33, v13);
      Int = MIL::UInt4::GetInt((MIL::UInt4 *)&v32);
      v17 = (int)(float)Int;
      if ((v17 & 0x80000000) != 0)
      {
        v25 = (int)(float)Int;
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v31, v25);
        v27 = std::string::insert(&v31, 0, "Index ");
        v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
        v32.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v28;
        v27->__r_.__value_.__l.__size_ = 0;
        v27->__r_.__value_.__r.__words[2] = 0;
        v27->__r_.__value_.__r.__words[0] = 0;
        v29 = std::string::append(&v32, " cannot be negative");
        v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        v33.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v33);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v18 = v36;
      if (v37 != v36)
      {
        v19 = v37 - v36;
        v20 = v15 * a5 + v17;
        v21 = *a6;
        if (v19 <= 1)
          v19 = 1;
        v22 = (_WORD *)(a3 + v14 * v20);
        do
        {
          v24 = *v18++;
          v23 = v24;
          LOWORD(v24) = *v22++;
          *(_WORD *)(v21 + 2 * v23) = v24;
          --v19;
        }
        while (v19);
      }
      ++v13;
    }
    while (v13 != a2);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v35[0])
  {
    v35[1] = v35[0];
    operator delete(v35[0]);
  }
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
}

void sub_1E0960394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  uint64_t v33;
  uint64_t v34;
  void *v36;
  void *v37;

  if (__p)
    operator delete(__p);
  v36 = *(void **)(v34 - 104);
  if (v36)
  {
    *(_QWORD *)(v34 - 96) = v36;
    operator delete(v36);
  }
  v37 = *(void **)v33;
  if (*(_QWORD *)v33)
  {
    *(_QWORD *)(v33 + 8) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<MIL::Fp16,MIL::UInt3>(std::string::size_type a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int Int;
  unsigned int v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  std::runtime_error *exception;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  std::string v31;
  std::string v32;
  std::string v33;
  void *__p[3];
  void *v35[3];
  uint64_t *v36;
  uint64_t *v37;

  v12 = *(_QWORD *)(a4 + 96);
  std::vector<MIL::Fp16>::vector(a6, v12 * a2);
  std::vector<unsigned long>::vector(&v36, *(_QWORD *)(a4 + 96));
  std::vector<unsigned long>::vector(v35, (uint64_t)(*(_QWORD *)(a4 + 32) - *(_QWORD *)(a4 + 24)) >> 3);
  std::vector<unsigned long>::vector(__p, (uint64_t)(*(_QWORD *)(a4 + 56) - *(_QWORD *)(a4 + 48)) >> 3);
  if (a2)
  {
    v13 = 0;
    v14 = 2 * v12;
    do
    {
      MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToOutputIndexes(a4, v13, &v36, (unint64_t **)v35);
      v15 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToBlockIndex((unint64_t **)a4, v13, (uint64_t)__p, (unint64_t **)v35);
      v33.__r_.__value_.__r.__words[0] = a1;
      v33.__r_.__value_.__l.__size_ = a2;
      v32.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt3 const,18446744073709551615ul>::ValueAt(&v33, v13);
      Int = MIL::UInt3::GetInt((MIL::UInt3 *)&v32);
      v17 = (int)(float)Int;
      if ((v17 & 0x80000000) != 0)
      {
        v25 = (int)(float)Int;
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v31, v25);
        v27 = std::string::insert(&v31, 0, "Index ");
        v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
        v32.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v28;
        v27->__r_.__value_.__l.__size_ = 0;
        v27->__r_.__value_.__r.__words[2] = 0;
        v27->__r_.__value_.__r.__words[0] = 0;
        v29 = std::string::append(&v32, " cannot be negative");
        v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        v33.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v33);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v18 = v36;
      if (v37 != v36)
      {
        v19 = v37 - v36;
        v20 = v15 * a5 + v17;
        v21 = *a6;
        if (v19 <= 1)
          v19 = 1;
        v22 = (_WORD *)(a3 + v14 * v20);
        do
        {
          v24 = *v18++;
          v23 = v24;
          LOWORD(v24) = *v22++;
          *(_WORD *)(v21 + 2 * v23) = v24;
          --v19;
        }
        while (v19);
      }
      ++v13;
    }
    while (v13 != a2);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v35[0])
  {
    v35[1] = v35[0];
    operator delete(v35[0]);
  }
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
}

void sub_1E096068C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  uint64_t v33;
  uint64_t v34;
  void *v36;
  void *v37;

  if (__p)
    operator delete(__p);
  v36 = *(void **)(v34 - 104);
  if (v36)
  {
    *(_QWORD *)(v34 - 96) = v36;
    operator delete(v36);
  }
  v37 = *(void **)v33;
  if (*(_QWORD *)v33)
  {
    *(_QWORD *)(v33 + 8) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<MIL::Fp16,MIL::UInt2>(std::string::size_type a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int Int;
  unsigned int v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  std::runtime_error *exception;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  std::string v31;
  std::string v32;
  std::string v33;
  void *__p[3];
  void *v35[3];
  uint64_t *v36;
  uint64_t *v37;

  v12 = *(_QWORD *)(a4 + 96);
  std::vector<MIL::Fp16>::vector(a6, v12 * a2);
  std::vector<unsigned long>::vector(&v36, *(_QWORD *)(a4 + 96));
  std::vector<unsigned long>::vector(v35, (uint64_t)(*(_QWORD *)(a4 + 32) - *(_QWORD *)(a4 + 24)) >> 3);
  std::vector<unsigned long>::vector(__p, (uint64_t)(*(_QWORD *)(a4 + 56) - *(_QWORD *)(a4 + 48)) >> 3);
  if (a2)
  {
    v13 = 0;
    v14 = 2 * v12;
    do
    {
      MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToOutputIndexes(a4, v13, &v36, (unint64_t **)v35);
      v15 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToBlockIndex((unint64_t **)a4, v13, (uint64_t)__p, (unint64_t **)v35);
      v33.__r_.__value_.__r.__words[0] = a1;
      v33.__r_.__value_.__l.__size_ = a2;
      v32.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt2 const,18446744073709551615ul>::ValueAt(&v33, v13);
      Int = MIL::UInt2::GetInt((MIL::UInt2 *)&v32);
      v17 = (int)(float)Int;
      if ((v17 & 0x80000000) != 0)
      {
        v25 = (int)(float)Int;
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v31, v25);
        v27 = std::string::insert(&v31, 0, "Index ");
        v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
        v32.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v28;
        v27->__r_.__value_.__l.__size_ = 0;
        v27->__r_.__value_.__r.__words[2] = 0;
        v27->__r_.__value_.__r.__words[0] = 0;
        v29 = std::string::append(&v32, " cannot be negative");
        v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        v33.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v33);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v18 = v36;
      if (v37 != v36)
      {
        v19 = v37 - v36;
        v20 = v15 * a5 + v17;
        v21 = *a6;
        if (v19 <= 1)
          v19 = 1;
        v22 = (_WORD *)(a3 + v14 * v20);
        do
        {
          v24 = *v18++;
          v23 = v24;
          LOWORD(v24) = *v22++;
          *(_WORD *)(v21 + 2 * v23) = v24;
          --v19;
        }
        while (v19);
      }
      ++v13;
    }
    while (v13 != a2);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v35[0])
  {
    v35[1] = v35[0];
    operator delete(v35[0]);
  }
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
}

void sub_1E0960984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  uint64_t v33;
  uint64_t v34;
  void *v36;
  void *v37;

  if (__p)
    operator delete(__p);
  v36 = *(void **)(v34 - 104);
  if (v36)
  {
    *(_QWORD *)(v34 - 96) = v36;
    operator delete(v36);
  }
  v37 = *(void **)v33;
  if (*(_QWORD *)v33)
  {
    *(_QWORD *)(v33 + 8) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<MIL::Fp16,MIL::UInt1>(std::string::size_type a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int Int;
  unsigned int v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  std::runtime_error *exception;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  std::string v31;
  std::string v32;
  std::string v33;
  void *__p[3];
  void *v35[3];
  uint64_t *v36;
  uint64_t *v37;

  v12 = *(_QWORD *)(a4 + 96);
  std::vector<MIL::Fp16>::vector(a6, v12 * a2);
  std::vector<unsigned long>::vector(&v36, *(_QWORD *)(a4 + 96));
  std::vector<unsigned long>::vector(v35, (uint64_t)(*(_QWORD *)(a4 + 32) - *(_QWORD *)(a4 + 24)) >> 3);
  std::vector<unsigned long>::vector(__p, (uint64_t)(*(_QWORD *)(a4 + 56) - *(_QWORD *)(a4 + 48)) >> 3);
  if (a2)
  {
    v13 = 0;
    v14 = 2 * v12;
    do
    {
      MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToOutputIndexes(a4, v13, &v36, (unint64_t **)v35);
      v15 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToBlockIndex((unint64_t **)a4, v13, (uint64_t)__p, (unint64_t **)v35);
      v33.__r_.__value_.__r.__words[0] = a1;
      v33.__r_.__value_.__l.__size_ = a2;
      v32.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt1 const,18446744073709551615ul>::ValueAt(&v33, v13);
      Int = MIL::UInt1::GetInt((MIL::UInt1 *)&v32);
      v17 = (int)(float)Int;
      if ((v17 & 0x80000000) != 0)
      {
        v25 = (int)(float)Int;
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v31, v25);
        v27 = std::string::insert(&v31, 0, "Index ");
        v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
        v32.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v28;
        v27->__r_.__value_.__l.__size_ = 0;
        v27->__r_.__value_.__r.__words[2] = 0;
        v27->__r_.__value_.__r.__words[0] = 0;
        v29 = std::string::append(&v32, " cannot be negative");
        v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        v33.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v33);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v18 = v36;
      if (v37 != v36)
      {
        v19 = v37 - v36;
        v20 = v15 * a5 + v17;
        v21 = *a6;
        if (v19 <= 1)
          v19 = 1;
        v22 = (_WORD *)(a3 + v14 * v20);
        do
        {
          v24 = *v18++;
          v23 = v24;
          LOWORD(v24) = *v22++;
          *(_WORD *)(v21 + 2 * v23) = v24;
          --v19;
        }
        while (v19);
      }
      ++v13;
    }
    while (v13 != a2);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v35[0])
  {
    v35[1] = v35[0];
    operator delete(v35[0]);
  }
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
}

void sub_1E0960C7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  uint64_t v33;
  uint64_t v34;
  void *v36;
  void *v37;

  if (__p)
    operator delete(__p);
  v36 = *(void **)(v34 - 104);
  if (v36)
  {
    *(_QWORD *)(v34 - 96) = v36;
    operator delete(v36);
  }
  v37 = *(void **)v33;
  if (*(_QWORD *)v33)
  {
    *(_QWORD *)(v33 + 8) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<float,unsigned char>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  int v20;
  int v21;
  uint64_t v22;
  void *__p[3];
  void *v24[3];
  void *v25;
  _BYTE *v26;

  v12 = *(_QWORD *)(a4 + 96);
  std::vector<float>::vector(a6, v12 * a2);
  std::vector<unsigned long>::vector(&v25, *(_QWORD *)(a4 + 96));
  std::vector<unsigned long>::vector(v24, (uint64_t)(*(_QWORD *)(a4 + 32) - *(_QWORD *)(a4 + 24)) >> 3);
  std::vector<unsigned long>::vector(__p, (uint64_t)(*(_QWORD *)(a4 + 56) - *(_QWORD *)(a4 + 48)) >> 3);
  if (a2)
  {
    v13 = 0;
    v14 = 4 * v12;
    do
    {
      MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToOutputIndexes(a4, v13, &v25, (unint64_t **)v24);
      v15 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToBlockIndex((unint64_t **)a4, v13, (uint64_t)__p, (unint64_t **)v24);
      v16 = (uint64_t *)v25;
      if (v26 != v25)
      {
        v17 = *a6;
        if ((unint64_t)((v26 - (_BYTE *)v25) >> 3) <= 1)
          v18 = 1;
        else
          v18 = (v26 - (_BYTE *)v25) >> 3;
        v19 = (int *)(a3 + v14 * (*(unsigned __int8 *)(a1 + v13) + v15 * a5));
        do
        {
          v20 = *v19++;
          v21 = v20;
          v22 = *v16++;
          *(_DWORD *)(v17 + 4 * v22) = v21;
          --v18;
        }
        while (v18);
      }
      ++v13;
    }
    while (v13 != a2);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v24[0])
  {
    v24[1] = v24[0];
    operator delete(v24[0]);
  }
  if (v25)
  {
    v26 = v25;
    operator delete(v25);
  }
}

void sub_1E0960EA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  uint64_t v17;
  void *v19;

  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  v19 = *(void **)v17;
  if (*(_QWORD *)v17)
  {
    *(_QWORD *)(v17 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<float,MIL::UInt6>(std::string::size_type a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int Int;
  unsigned int v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  std::runtime_error *exception;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  std::string v32;
  std::string v33;
  std::string v34;
  void *__p[3];
  void *v36[3];
  uint64_t *v37;
  uint64_t *v38;

  v12 = *(_QWORD *)(a4 + 96);
  std::vector<float>::vector(a6, v12 * a2);
  std::vector<unsigned long>::vector(&v37, *(_QWORD *)(a4 + 96));
  std::vector<unsigned long>::vector(v36, (uint64_t)(*(_QWORD *)(a4 + 32) - *(_QWORD *)(a4 + 24)) >> 3);
  std::vector<unsigned long>::vector(__p, (uint64_t)(*(_QWORD *)(a4 + 56) - *(_QWORD *)(a4 + 48)) >> 3);
  if (a2)
  {
    v13 = 0;
    v14 = 4 * v12;
    do
    {
      MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToOutputIndexes(a4, v13, &v37, (unint64_t **)v36);
      v15 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToBlockIndex((unint64_t **)a4, v13, (uint64_t)__p, (unint64_t **)v36);
      v34.__r_.__value_.__r.__words[0] = a1;
      v34.__r_.__value_.__l.__size_ = a2;
      v33.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt6 const,18446744073709551615ul>::ValueAt(&v34, v13);
      Int = MIL::UInt6::GetInt((MIL::UInt6 *)&v33);
      v17 = (int)(float)Int;
      if ((v17 & 0x80000000) != 0)
      {
        v26 = (int)(float)Int;
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v32, v26);
        v28 = std::string::insert(&v32, 0, "Index ");
        v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        v33.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v29;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        v30 = std::string::append(&v33, " cannot be negative");
        v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v34.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v34);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v18 = v37;
      if (v38 != v37)
      {
        v19 = v38 - v37;
        v20 = v15 * a5 + v17;
        v21 = *a6;
        if (v19 <= 1)
          v19 = 1;
        v22 = (int *)(a3 + v14 * v20);
        do
        {
          v23 = *v22++;
          v24 = v23;
          v25 = *v18++;
          *(_DWORD *)(v21 + 4 * v25) = v24;
          --v19;
        }
        while (v19);
      }
      ++v13;
    }
    while (v13 != a2);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v36[0])
  {
    v36[1] = v36[0];
    operator delete(v36[0]);
  }
  if (v37)
  {
    v38 = v37;
    operator delete(v37);
  }
}

void sub_1E096111C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  uint64_t v33;
  uint64_t v34;
  void *v36;
  void *v37;

  if (__p)
    operator delete(__p);
  v36 = *(void **)(v34 - 104);
  if (v36)
  {
    *(_QWORD *)(v34 - 96) = v36;
    operator delete(v36);
  }
  v37 = *(void **)v33;
  if (*(_QWORD *)v33)
  {
    *(_QWORD *)(v33 + 8) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<float,MIL::UInt4>(std::string::size_type a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int Int;
  unsigned int v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  std::runtime_error *exception;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  std::string v32;
  std::string v33;
  std::string v34;
  void *__p[3];
  void *v36[3];
  uint64_t *v37;
  uint64_t *v38;

  v12 = *(_QWORD *)(a4 + 96);
  std::vector<float>::vector(a6, v12 * a2);
  std::vector<unsigned long>::vector(&v37, *(_QWORD *)(a4 + 96));
  std::vector<unsigned long>::vector(v36, (uint64_t)(*(_QWORD *)(a4 + 32) - *(_QWORD *)(a4 + 24)) >> 3);
  std::vector<unsigned long>::vector(__p, (uint64_t)(*(_QWORD *)(a4 + 56) - *(_QWORD *)(a4 + 48)) >> 3);
  if (a2)
  {
    v13 = 0;
    v14 = 4 * v12;
    do
    {
      MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToOutputIndexes(a4, v13, &v37, (unint64_t **)v36);
      v15 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToBlockIndex((unint64_t **)a4, v13, (uint64_t)__p, (unint64_t **)v36);
      v34.__r_.__value_.__r.__words[0] = a1;
      v34.__r_.__value_.__l.__size_ = a2;
      v33.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(&v34, v13);
      Int = MIL::UInt4::GetInt((MIL::UInt4 *)&v33);
      v17 = (int)(float)Int;
      if ((v17 & 0x80000000) != 0)
      {
        v26 = (int)(float)Int;
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v32, v26);
        v28 = std::string::insert(&v32, 0, "Index ");
        v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        v33.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v29;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        v30 = std::string::append(&v33, " cannot be negative");
        v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v34.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v34);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v18 = v37;
      if (v38 != v37)
      {
        v19 = v38 - v37;
        v20 = v15 * a5 + v17;
        v21 = *a6;
        if (v19 <= 1)
          v19 = 1;
        v22 = (int *)(a3 + v14 * v20);
        do
        {
          v23 = *v22++;
          v24 = v23;
          v25 = *v18++;
          *(_DWORD *)(v21 + 4 * v25) = v24;
          --v19;
        }
        while (v19);
      }
      ++v13;
    }
    while (v13 != a2);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v36[0])
  {
    v36[1] = v36[0];
    operator delete(v36[0]);
  }
  if (v37)
  {
    v38 = v37;
    operator delete(v37);
  }
}

void sub_1E0961414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  uint64_t v33;
  uint64_t v34;
  void *v36;
  void *v37;

  if (__p)
    operator delete(__p);
  v36 = *(void **)(v34 - 104);
  if (v36)
  {
    *(_QWORD *)(v34 - 96) = v36;
    operator delete(v36);
  }
  v37 = *(void **)v33;
  if (*(_QWORD *)v33)
  {
    *(_QWORD *)(v33 + 8) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<float,MIL::UInt3>(std::string::size_type a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int Int;
  unsigned int v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  std::runtime_error *exception;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  std::string v32;
  std::string v33;
  std::string v34;
  void *__p[3];
  void *v36[3];
  uint64_t *v37;
  uint64_t *v38;

  v12 = *(_QWORD *)(a4 + 96);
  std::vector<float>::vector(a6, v12 * a2);
  std::vector<unsigned long>::vector(&v37, *(_QWORD *)(a4 + 96));
  std::vector<unsigned long>::vector(v36, (uint64_t)(*(_QWORD *)(a4 + 32) - *(_QWORD *)(a4 + 24)) >> 3);
  std::vector<unsigned long>::vector(__p, (uint64_t)(*(_QWORD *)(a4 + 56) - *(_QWORD *)(a4 + 48)) >> 3);
  if (a2)
  {
    v13 = 0;
    v14 = 4 * v12;
    do
    {
      MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToOutputIndexes(a4, v13, &v37, (unint64_t **)v36);
      v15 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToBlockIndex((unint64_t **)a4, v13, (uint64_t)__p, (unint64_t **)v36);
      v34.__r_.__value_.__r.__words[0] = a1;
      v34.__r_.__value_.__l.__size_ = a2;
      v33.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt3 const,18446744073709551615ul>::ValueAt(&v34, v13);
      Int = MIL::UInt3::GetInt((MIL::UInt3 *)&v33);
      v17 = (int)(float)Int;
      if ((v17 & 0x80000000) != 0)
      {
        v26 = (int)(float)Int;
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v32, v26);
        v28 = std::string::insert(&v32, 0, "Index ");
        v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        v33.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v29;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        v30 = std::string::append(&v33, " cannot be negative");
        v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v34.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v34);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v18 = v37;
      if (v38 != v37)
      {
        v19 = v38 - v37;
        v20 = v15 * a5 + v17;
        v21 = *a6;
        if (v19 <= 1)
          v19 = 1;
        v22 = (int *)(a3 + v14 * v20);
        do
        {
          v23 = *v22++;
          v24 = v23;
          v25 = *v18++;
          *(_DWORD *)(v21 + 4 * v25) = v24;
          --v19;
        }
        while (v19);
      }
      ++v13;
    }
    while (v13 != a2);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v36[0])
  {
    v36[1] = v36[0];
    operator delete(v36[0]);
  }
  if (v37)
  {
    v38 = v37;
    operator delete(v37);
  }
}

void sub_1E096170C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  uint64_t v33;
  uint64_t v34;
  void *v36;
  void *v37;

  if (__p)
    operator delete(__p);
  v36 = *(void **)(v34 - 104);
  if (v36)
  {
    *(_QWORD *)(v34 - 96) = v36;
    operator delete(v36);
  }
  v37 = *(void **)v33;
  if (*(_QWORD *)v33)
  {
    *(_QWORD *)(v33 + 8) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<float,MIL::UInt2>(std::string::size_type a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int Int;
  unsigned int v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  std::runtime_error *exception;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  std::string v32;
  std::string v33;
  std::string v34;
  void *__p[3];
  void *v36[3];
  uint64_t *v37;
  uint64_t *v38;

  v12 = *(_QWORD *)(a4 + 96);
  std::vector<float>::vector(a6, v12 * a2);
  std::vector<unsigned long>::vector(&v37, *(_QWORD *)(a4 + 96));
  std::vector<unsigned long>::vector(v36, (uint64_t)(*(_QWORD *)(a4 + 32) - *(_QWORD *)(a4 + 24)) >> 3);
  std::vector<unsigned long>::vector(__p, (uint64_t)(*(_QWORD *)(a4 + 56) - *(_QWORD *)(a4 + 48)) >> 3);
  if (a2)
  {
    v13 = 0;
    v14 = 4 * v12;
    do
    {
      MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToOutputIndexes(a4, v13, &v37, (unint64_t **)v36);
      v15 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToBlockIndex((unint64_t **)a4, v13, (uint64_t)__p, (unint64_t **)v36);
      v34.__r_.__value_.__r.__words[0] = a1;
      v34.__r_.__value_.__l.__size_ = a2;
      v33.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt2 const,18446744073709551615ul>::ValueAt(&v34, v13);
      Int = MIL::UInt2::GetInt((MIL::UInt2 *)&v33);
      v17 = (int)(float)Int;
      if ((v17 & 0x80000000) != 0)
      {
        v26 = (int)(float)Int;
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v32, v26);
        v28 = std::string::insert(&v32, 0, "Index ");
        v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        v33.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v29;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        v30 = std::string::append(&v33, " cannot be negative");
        v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v34.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v34);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v18 = v37;
      if (v38 != v37)
      {
        v19 = v38 - v37;
        v20 = v15 * a5 + v17;
        v21 = *a6;
        if (v19 <= 1)
          v19 = 1;
        v22 = (int *)(a3 + v14 * v20);
        do
        {
          v23 = *v22++;
          v24 = v23;
          v25 = *v18++;
          *(_DWORD *)(v21 + 4 * v25) = v24;
          --v19;
        }
        while (v19);
      }
      ++v13;
    }
    while (v13 != a2);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v36[0])
  {
    v36[1] = v36[0];
    operator delete(v36[0]);
  }
  if (v37)
  {
    v38 = v37;
    operator delete(v37);
  }
}

void sub_1E0961A04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  uint64_t v33;
  uint64_t v34;
  void *v36;
  void *v37;

  if (__p)
    operator delete(__p);
  v36 = *(void **)(v34 - 104);
  if (v36)
  {
    *(_QWORD *)(v34 - 96) = v36;
    operator delete(v36);
  }
  v37 = *(void **)v33;
  if (*(_QWORD *)v33)
  {
    *(_QWORD *)(v33 + 8) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<float,MIL::UInt1>(std::string::size_type a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int Int;
  unsigned int v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  std::runtime_error *exception;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  std::string v32;
  std::string v33;
  std::string v34;
  void *__p[3];
  void *v36[3];
  uint64_t *v37;
  uint64_t *v38;

  v12 = *(_QWORD *)(a4 + 96);
  std::vector<float>::vector(a6, v12 * a2);
  std::vector<unsigned long>::vector(&v37, *(_QWORD *)(a4 + 96));
  std::vector<unsigned long>::vector(v36, (uint64_t)(*(_QWORD *)(a4 + 32) - *(_QWORD *)(a4 + 24)) >> 3);
  std::vector<unsigned long>::vector(__p, (uint64_t)(*(_QWORD *)(a4 + 56) - *(_QWORD *)(a4 + 48)) >> 3);
  if (a2)
  {
    v13 = 0;
    v14 = 4 * v12;
    do
    {
      MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToOutputIndexes(a4, v13, &v37, (unint64_t **)v36);
      v15 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToBlockIndex((unint64_t **)a4, v13, (uint64_t)__p, (unint64_t **)v36);
      v34.__r_.__value_.__r.__words[0] = a1;
      v34.__r_.__value_.__l.__size_ = a2;
      v33.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt1 const,18446744073709551615ul>::ValueAt(&v34, v13);
      Int = MIL::UInt1::GetInt((MIL::UInt1 *)&v33);
      v17 = (int)(float)Int;
      if ((v17 & 0x80000000) != 0)
      {
        v26 = (int)(float)Int;
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v32, v26);
        v28 = std::string::insert(&v32, 0, "Index ");
        v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        v33.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v29;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        v30 = std::string::append(&v33, " cannot be negative");
        v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v34.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v34);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v18 = v37;
      if (v38 != v37)
      {
        v19 = v38 - v37;
        v20 = v15 * a5 + v17;
        v21 = *a6;
        if (v19 <= 1)
          v19 = 1;
        v22 = (int *)(a3 + v14 * v20);
        do
        {
          v23 = *v22++;
          v24 = v23;
          v25 = *v18++;
          *(_DWORD *)(v21 + 4 * v25) = v24;
          --v19;
        }
        while (v19);
      }
      ++v13;
    }
    while (v13 != a2);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v36[0])
  {
    v36[1] = v36[0];
    operator delete(v36[0]);
  }
  if (v37)
  {
    v38 = v37;
    operator delete(v37);
  }
}

void sub_1E0961CFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  uint64_t v33;
  uint64_t v34;
  void *v36;
  void *v37;

  if (__p)
    operator delete(__p);
  v36 = *(void **)(v34 - 104);
  if (v36)
  {
    *(_QWORD *)(v34 - 96) = v36;
    operator delete(v36);
  }
  v37 = *(void **)v33;
  if (*(_QWORD *)v33)
  {
    *(_QWORD *)(v33 + 8) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::unique_ptr<MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToDense::Impl>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v2 + 24);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v2 + 8);
    JUMPOUT(0x1E0C023A0);
  }
  return result;
}

uint64_t MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse::Impl::Impl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a4;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)a5;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)a6;
  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a1 + 64) = a7;
  MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse::Impl::ValidateArgsAndTypeConstraints((MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse::Impl *)a1);
  return a1;
}

void sub_1E0961E98(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse::Impl::ValidateArgsAndTypeConstraints(MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse::Impl *this)
{
  MIL::IRValueType *v2;
  MIL::IRTensorValueType *v3;
  MIL::IRValueType *v4;
  uint64_t v5;
  MIL::IRValueType *v6;
  uint64_t v7;
  uint64_t v8;
  MIL::IRTensorValueType *v9;
  uint64_t i;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  std::runtime_error *v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::runtime_error *v37;
  std::runtime_error *v38;
  std::runtime_error *v39;
  std::string *v40;
  __int128 v41;
  std::string *v42;
  __int128 v43;
  int v44;
  const std::string::value_type *v45;
  std::string::size_type v46;
  std::string *v47;
  __int128 v48;
  std::runtime_error *exception;
  std::runtime_error *v50;
  std::runtime_error *v51;
  _QWORD v52[2];
  unsigned __int8 v53;
  std::string v54;
  std::string v55;
  std::string v56;
  std::string __p;
  void *v58;
  char v59;

  std::string::basic_string[abi:ne180100]<0>(&v58, "Constexpr-BlockwiseLutToSparse");
  v2 = (MIL::IRValueType *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 32))(*((_QWORD *)this + 4));
  v3 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v2);
  v4 = (MIL::IRValueType *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 32))(*((_QWORD *)this + 6));
  v5 = MIL::IRValueType::AsTensorType(v4);
  v6 = (MIL::IRValueType *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2));
  v7 = MIL::IRValueType::AsTensorType(v6);
  v8 = MIL::IRTensorValueType::Rank(v3);
  v9 = (MIL::IRTensorValueType *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2));
  if (MIL::IRTensorValueType::Rank(v9) != v8 + 2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Input lut should have rank=K+2 where K is the rank of indices");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v8)
  {
    for (i = 0; i != v8; ++i)
    {
      v11 = (_QWORD *)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v3 + 96))(v3);
      v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v11 + 8 * i) + 16))(*(_QWORD *)(*v11 + 8 * i));
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 48))(v12);
      v14 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7);
      v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v14 + 8 * i) + 16))(*(_QWORD *)(*v14 + 8 * i));
      if (v13 % (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 48))(v15))
      {
        v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v37, "The first K dimensions of lut must be factors of indices dimensions");
        __cxa_throw(v37, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
    }
  }
  v16 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7);
  v17 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v16 + 8 * v8) + 16))(*(_QWORD *)(*v16 + 8 * v8));
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 48))(v17);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 88))(v5) == 14 && v18 != 256
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 88))(v5) == 23 && v18 != 64
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 88))(v5) == 20 && v18 != 16
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 88))(v5) == 22 && v18 != 8
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 88))(v5) == 19 && v18 != 4
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 88))(v5) == 21 && v18 != 2)
  {
    v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v54, v18);
    v40 = std::string::insert(&v54, 0, "Provided NUM_PALETTES ");
    v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    v42 = std::string::append(&v55, " does not match the indices dtype ");
    v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 88))(v5);
    MIL::IRDataTypeToString(v44, v52);
    if ((v53 & 0x80u) == 0)
      v45 = (const std::string::value_type *)v52;
    else
      v45 = (const std::string::value_type *)v52[0];
    if ((v53 & 0x80u) == 0)
      v46 = v53;
    else
      v46 = v52[1];
    v47 = std::string::append(&v56, v45, v46);
    v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v39, &__p);
    __cxa_throw(v39, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v19 = *(_QWORD *)(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7) + 8 * v8 + 8);
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 48))(v20);
  if (v21 < 2)
  {
    if (!*((_BYTE *)this + 68))
    {
      v24 = 0;
      goto LABEL_24;
    }
  }
  else if (!*((_BYTE *)this + 68))
  {
    v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v22, "vector_axis must be provided if vector_size specified in lut > 1");
    __cxa_throw(v22, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v23 = *((_DWORD *)this + 16);
  if (!MIL::Validation::IsAxisValidForRank((MIL::Validation *)v23, v8))
  {
    v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v50, "'vector_axis' must be within range (-indices_rank - 1, indices_rank) (exclusive)");
LABEL_53:
    __cxa_throw(v50, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v24 = (v8 & (v23 >> 31)) + v23;
LABEL_24:
  v25 = MIL::IRValueType::AsTensorType(*((MIL::IRValueType **)this + 1));
  v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 88))(v25);
  if (v26 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 88))(v7))
  {
    v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v50, "Input lut and output should have the same dtype");
    goto LABEL_53;
  }
  v27 = MIL::IRValueType::AsTensorType(*(MIL::IRValueType **)this);
  v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 96))(v27);
  memset(&__p, 0, sizeof(__p));
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v28, *(_QWORD *)(v28 + 8), (uint64_t)(*(_QWORD *)(v28 + 8) - *(_QWORD *)v28) >> 3);
  v29 = (void *)__p.__r_.__value_.__r.__words[0];
  if (v8 != (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3)
  {
    v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v51, "output must have the same rank as the input indices");
    __cxa_throw(v51, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v8)
  {
    v30 = 0;
    v31 = v24;
    do
    {
      if (v31 == v30)
        v32 = v21;
      else
        v32 = 1;
      v33 = (_QWORD *)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v3 + 96))(v3);
      v34 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v33 + 8 * v30) + 16))(*(_QWORD *)(*v33 + 8 * v30));
      v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 48))(v34);
      v36 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(__p.__r_.__value_.__r.__words[0] + 8 * v30) + 16))(*(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8 * v30));
      if (v35 * v32 != (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 48))(v36))
      {
        v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v38, "The output dimension does not match the indices' dimension with vector size over vector_axis");
        __cxa_throw(v38, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      ++v30;
    }
    while (v8 != v30);
    v29 = (void *)__p.__r_.__value_.__r.__words[0];
  }
  if (v29)
  {
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v29;
    operator delete(v29);
  }
  if (v59 < 0)
    operator delete(v58);
}

void sub_1E09624B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  void *v40;
  int v41;
  uint64_t v42;

  if (a40 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v41 & 1) == 0)
    {
LABEL_14:
      if (*(char *)(v42 - 65) < 0)
        operator delete(*(void **)(v42 - 88));
      _Unwind_Resume(a1);
    }
  }
  else if (!v41)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v40);
  goto LABEL_14;
}

void MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse::Impl::ComputeOutput(MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse::Impl *this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  MIL::IRTensorValueType *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  const void *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t i;
  unint64_t v21;
  void *v22;
  char v23;
  unint64_t *v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  const void *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  void *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  size_t v49;
  size_t v50;
  uint64_t Data;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  std::string::size_type v56;
  _QWORD *v57;
  std::string::size_type v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  const void *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  void *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  void *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  size_t v81;
  size_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  const void *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  void *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  uint64_t *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  size_t v108;
  size_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  const void *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  void *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  uint64_t *v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  size_t v135;
  size_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  const void *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  void *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  uint64_t *v150;
  unint64_t *v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  size_t v162;
  size_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  size_t v168;
  size_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  std::string::size_type v175;
  std::string::size_type v176;
  uint64_t v177;
  size_t v178;
  size_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  std::string::size_type v185;
  std::string::size_type v186;
  uint64_t v187;
  size_t v188;
  size_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  std::string::size_type v195;
  std::string::size_type v196;
  uint64_t v197;
  size_t v198;
  size_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  std::string::size_type v205;
  std::string::size_type v206;
  uint64_t v207;
  size_t v208;
  size_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  std::string::size_type v215;
  std::string::size_type v216;
  uint64_t v217;
  size_t v218;
  size_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  std::string::size_type v225;
  std::string::size_type v226;
  uint64_t v227;
  _QWORD *v228;
  uint64_t v229;
  unint64_t *v230;
  unint64_t v231;
  unint64_t *v232;
  unint64_t v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  uint64_t v237;
  size_t v238;
  size_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  std::string::size_type v245;
  std::string::size_type v246;
  uint64_t v247;
  size_t v248;
  size_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  std::string::size_type v255;
  std::string::size_type v256;
  uint64_t v257;
  size_t v258;
  size_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  std::string::size_type v265;
  std::string::size_type v266;
  uint64_t v267;
  size_t v268;
  size_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  std::string::size_type v275;
  std::string::size_type v276;
  uint64_t v277;
  size_t v278;
  size_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  std::string::size_type v285;
  std::string::size_type v286;
  uint64_t v287;
  size_t v288;
  size_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  std::string::size_type v295;
  std::string::size_type v296;
  uint64_t v297;
  size_t v298;
  size_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  std::string::size_type v305;
  std::string::size_type v306;
  uint64_t v307;
  size_t v308;
  size_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  std::string::size_type v315;
  std::string::size_type v316;
  uint64_t v317;
  size_t v318;
  size_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  std::string::size_type v325;
  std::string::size_type v326;
  uint64_t v327;
  size_t v328;
  size_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  std::string::size_type v335;
  std::string::size_type v336;
  uint64_t v337;
  size_t v338;
  size_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  std::string::size_type v345;
  std::string::size_type v346;
  uint64_t v347;
  size_t v348;
  size_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  std::string::size_type v355;
  std::string::size_type v356;
  uint64_t v357;
  _QWORD *v358;
  uint64_t v359;
  unint64_t *v360;
  unint64_t v361;
  unint64_t *v362;
  unint64_t v363;
  unint64_t *v364;
  uint64_t v365;
  size_t v366;
  size_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  std::string::size_type v373;
  std::string::size_type v374;
  uint64_t v375;
  size_t v376;
  size_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  std::string::size_type v383;
  std::string::size_type v384;
  uint64_t v385;
  size_t v386;
  size_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  std::string::size_type v393;
  std::string::size_type v394;
  uint64_t v395;
  size_t v396;
  size_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  std::string::size_type v403;
  std::string::size_type v404;
  uint64_t v405;
  _QWORD *v406;
  uint64_t v407;
  unint64_t *v408;
  unint64_t v409;
  unint64_t *v410;
  unint64_t v411;
  unint64_t *v412;
  uint64_t v413;
  size_t v414;
  size_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  std::string::size_type v421;
  std::string::size_type v422;
  uint64_t v423;
  _QWORD *v424;
  uint64_t v425;
  unint64_t *v426;
  unint64_t v427;
  unint64_t *v428;
  unint64_t v429;
  unint64_t *v430;
  uint64_t v431;
  size_t v432;
  size_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  std::string::size_type v439;
  std::string::size_type v440;
  uint64_t v441;
  size_t v442;
  size_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  std::string::size_type v449;
  std::string::size_type v450;
  uint64_t v451;
  _QWORD *v452;
  uint64_t v453;
  unint64_t *v454;
  unint64_t v455;
  unint64_t *v456;
  unint64_t v457;
  unint64_t *v458;
  std::runtime_error *exception;
  std::runtime_error *v460;
  std::string *v461;
  __int128 v462;
  std::string *v463;
  __int128 v464;
  std::runtime_error *v465;
  std::string *v466;
  __int128 v467;
  std::string *v468;
  __int128 v469;
  std::runtime_error *v470;
  std::string *v471;
  __int128 v472;
  std::string *v473;
  __int128 v474;
  std::runtime_error *v475;
  std::string *v476;
  __int128 v477;
  std::string *v478;
  __int128 v479;
  std::runtime_error *v480;
  std::string *v481;
  __int128 v482;
  std::string *v483;
  __int128 v484;
  std::runtime_error *v485;
  std::string *v486;
  __int128 v487;
  std::string *v488;
  __int128 v489;
  std::runtime_error *v490;
  std::string *v491;
  __int128 v492;
  std::string *v493;
  __int128 v494;
  std::__shared_weak_count *v495;
  std::__shared_weak_count *v496;
  std::__shared_weak_count *v497;
  std::__shared_weak_count *v498;
  std::__shared_weak_count *v499;
  std::__shared_weak_count *v500;
  std::__shared_weak_count *v501;
  std::__shared_weak_count *v502;
  std::__shared_weak_count *v503;
  std::__shared_weak_count *v504;
  void *v505;
  void *v506;
  _QWORD v507[3];
  void *v508[3];
  std::string v509;
  void *v510;
  _BYTE *v511;
  void *v512;
  void *v513;
  void *__p;
  void *v515;
  unint64_t v516;
  void *v517;
  _QWORD *v518;
  void *v519;
  void *v520;
  std::string v521;
  std::string v522;
  std::string v523;

  if (*((_BYTE *)this + 68))
  {
    LODWORD(v6) = *((_DWORD *)this + 16);
    if ((v6 & 0x80000000) != 0)
    {
      v7 = (MIL::IRTensorValueType *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 32))(*((_QWORD *)this + 4));
      LODWORD(v6) = v6 + MIL::IRTensorValueType::Rank(v7);
    }
    v6 = (int)v6;
  }
  else
  {
    v6 = 0;
  }
  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2));
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 96))(v8);
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v9 + 8) - 8) + 16))(*(_QWORD *)(*(_QWORD *)(v9 + 8) - 8));
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10);
  v13 = (const void *)*((_QWORD *)this + 4);
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  v507[1] = v13;
  v507[2] = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v16 = (*(uint64_t (**)(const void *))(*(_QWORD *)v13 + 32))(v13);
  v17 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 96))(v16);
  MIL::Operators::Common::Shared::ConstExprs::ShapeToVector(v17, &v523);
  v521.__r_.__value_.__r.__words[0] = 1;
  std::vector<unsigned long>::vector(&v522, (uint64_t)(v523.__r_.__value_.__l.__size_ - v523.__r_.__value_.__r.__words[0]) >> 3, &v521);
  MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::BlockwiseLutToDenseIndexConverter(&v509, (uint64_t)&v523, (unint64_t **)&v522, v11, v6);
  if (v522.__r_.__value_.__r.__words[0])
  {
    v522.__r_.__value_.__l.__size_ = v522.__r_.__value_.__r.__words[0];
    operator delete(v522.__r_.__value_.__l.__data_);
  }
  v18 = (*(uint64_t (**)(const void *))(*(_QWORD *)v13 + 32))(v13);
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
  std::vector<MIL::UInt1>::vector(v508, v19 * v11);
  std::vector<unsigned long>::vector(&v522, v516);
  std::vector<unsigned long>::vector(&v521, (v511 - (_BYTE *)v510) >> 3);
  if (v19)
  {
    for (i = 0; i != v19; ++i)
    {
      MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::InputIndexToOutputIndexes((uint64_t)&v509, i, &v522, (unint64_t **)&v521);
      if (v522.__r_.__value_.__l.__size_ != v522.__r_.__value_.__r.__words[0])
      {
        v21 = 0;
        do
        {
          v519 = (void *)MIL::IRTensorValue::GetDataView<MIL::UInt1>(v13);
          v520 = v22;
          v23 = MIL::Util::Span<MIL::UInt1 const,18446744073709551615ul>::ValueAt(&v519, i);
          *((_BYTE *)v508[0] + *(_QWORD *)(v522.__r_.__value_.__r.__words[0] + 8 * v21++)) = v23;
        }
        while (v21 < (uint64_t)(v522.__r_.__value_.__l.__size_ - v522.__r_.__value_.__r.__words[0]) >> 3);
      }
    }
  }
  if (v521.__r_.__value_.__r.__words[0])
  {
    v521.__r_.__value_.__l.__size_ = v521.__r_.__value_.__r.__words[0];
    operator delete(v521.__r_.__value_.__l.__data_);
  }
  if (v522.__r_.__value_.__r.__words[0])
  {
    v522.__r_.__value_.__l.__size_ = v522.__r_.__value_.__r.__words[0];
    operator delete(v522.__r_.__value_.__l.__data_);
  }
  if (__p)
  {
    v515 = __p;
    operator delete(__p);
  }
  if (v512)
  {
    v513 = v512;
    operator delete(v512);
  }
  if (v510)
  {
    v511 = v510;
    operator delete(v510);
  }
  if (v509.__r_.__value_.__r.__words[0])
  {
    v509.__r_.__value_.__l.__size_ = v509.__r_.__value_.__r.__words[0];
    operator delete(v509.__r_.__value_.__l.__data_);
  }
  if (v523.__r_.__value_.__r.__words[0])
  {
    v523.__r_.__value_.__l.__size_ = v523.__r_.__value_.__r.__words[0];
    operator delete(v523.__r_.__value_.__l.__data_);
  }
  if (v12)
  {
    v24 = (unint64_t *)&v12->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (a2)
  {
    if (a2 != 1)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "BlockwiseLutToSparse has two outputs, index i cannot be larger than 1.");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v26 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 88))(*((_QWORD *)this + 1));
    switch(v26)
    {
      case 4:
        v27 = *((_QWORD *)this + 1);
        v29 = (const void *)*((_QWORD *)this + 4);
        v28 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
        v498 = v28;
        if (v28)
        {
          v30 = (unint64_t *)&v28->__shared_owners_;
          do
            v31 = __ldxr(v30);
          while (__stxr(v31 + 1, v30));
        }
        v33 = (void *)*((_QWORD *)this + 6);
        v32 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
        v497 = v32;
        if (v32)
        {
          v34 = (unint64_t *)&v32->__shared_owners_;
          do
            v35 = __ldxr(v34);
          while (__stxr(v35 + 1, v34));
        }
        v37 = (uint64_t *)*((_QWORD *)this + 2);
        v36 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
        if (v36)
        {
          v38 = (unint64_t *)&v36->__shared_owners_;
          do
            v39 = __ldxr(v38);
          while (__stxr(v39 + 1, v38));
        }
        v40 = (*(uint64_t (**)(const void *))(*(_QWORD *)v29 + 32))(v29);
        v41 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 96))(v40);
        MIL::Operators::Common::Shared::ConstExprs::ShapeToVector(v41, &v519);
        v42 = (*(uint64_t (**)(uint64_t *))(*v37 + 32))(v37);
        v43 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 96))(v42);
        MIL::Operators::Common::Shared::ConstExprs::ShapeToVector(v43, &v517);
        v44 = *(v518 - 2);
        v45 = *(v518 - 1);
        memset(&v523, 0, sizeof(v523));
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(&v523, v517, (uint64_t)(v518 - 2), ((char *)(v518 - 2) - (_BYTE *)v517) >> 3);
        MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::BlockwiseLutToDenseIndexConverter(&v509, (uint64_t)&v519, (unint64_t **)&v523, v45, v6);
        if (v523.__r_.__value_.__r.__words[0])
        {
          v523.__r_.__value_.__l.__size_ = v523.__r_.__value_.__r.__words[0];
          operator delete(v523.__r_.__value_.__l.__data_);
        }
        v46 = (*(uint64_t (**)(void *))(*(_QWORD *)v33 + 32))(v33);
        v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 88))(v46);
        switch(v47)
        {
          case 14:
            v48 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v29);
            v50 = v49;
            Data = MIL::IRTensorValue::GetDataView<unsigned char>(v33);
            v52 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(v37);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<unsigned char>(Data, v48, v50, &v523);
            if (v523.__r_.__value_.__l.__size_ == v523.__r_.__value_.__r.__words[0])
              v53 = 0;
            else
              v53 = v523.__r_.__value_.__r.__words[0];
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<MIL::Fp16,unsigned char>(v53, v523.__r_.__value_.__l.__size_ - v523.__r_.__value_.__r.__words[0], v52, (uint64_t)&v509, v44, (uint64_t *)&v522);
            MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<MIL::Fp16>((uint64_t *)&v522, v508, (char **)&v505);
            goto LABEL_375;
          case 19:
            v337 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v29);
            v339 = v338;
            v340 = MIL::IRTensorValue::GetDataView<MIL::UInt2>(v33);
            v342 = v341;
            v343 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(v37);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::UInt2>(v340, v342, v337, v339, &v523);
            MIL::PackSubByteVec((uint64_t *)&v523, &v522);
            if (v522.__r_.__value_.__l.__size_ == v522.__r_.__value_.__r.__words[0])
              v344 = 0;
            else
              v344 = v522.__r_.__value_.__r.__words[0];
            MIL::Util::CastToBitSpan<MIL::UInt2 const,unsigned char,true>(v344, v522.__r_.__value_.__l.__size_ - v522.__r_.__value_.__r.__words[0], v523.__r_.__value_.__l.__size_ - v523.__r_.__value_.__r.__words[0]);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<MIL::Fp16,MIL::UInt2>(v345, v346, v343, (uint64_t)&v509, v44, (uint64_t *)&v521);
            MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<MIL::Fp16>((uint64_t *)&v521, v508, (char **)&v505);
            goto LABEL_373;
          case 20:
            v431 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v29);
            v433 = v432;
            v434 = MIL::IRTensorValue::GetDataView<MIL::UInt4>(v33);
            v436 = v435;
            v437 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(v37);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::UInt4>(v434, v436, v431, v433, &v523);
            MIL::PackSubByteVec((uint64_t *)&v523, &v522);
            if (v522.__r_.__value_.__l.__size_ == v522.__r_.__value_.__r.__words[0])
              v438 = 0;
            else
              v438 = v522.__r_.__value_.__r.__words[0];
            MIL::Util::CastToBitSpan<MIL::UInt4 const,unsigned char,true>(v438, v522.__r_.__value_.__l.__size_ - v522.__r_.__value_.__r.__words[0], v523.__r_.__value_.__l.__size_ - v523.__r_.__value_.__r.__words[0]);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<MIL::Fp16,MIL::UInt4>(v439, v440, v437, (uint64_t)&v509, v44, (uint64_t *)&v521);
            MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<MIL::Fp16>((uint64_t *)&v521, v508, (char **)&v505);
            goto LABEL_373;
          case 21:
            v441 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v29);
            v443 = v442;
            v444 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v33);
            v446 = v445;
            v447 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(v37);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::UInt1>(v444, v446, v441, v443, &v523);
            MIL::PackSubByteVec((uint64_t *)&v523, &v522);
            if (v522.__r_.__value_.__l.__size_ == v522.__r_.__value_.__r.__words[0])
              v448 = 0;
            else
              v448 = v522.__r_.__value_.__r.__words[0];
            MIL::Util::CastToBitSpan<MIL::UInt1 const,unsigned char,true>(v448, v522.__r_.__value_.__l.__size_ - v522.__r_.__value_.__r.__words[0], v523.__r_.__value_.__l.__size_ - v523.__r_.__value_.__r.__words[0]);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<MIL::Fp16,MIL::UInt1>(v449, v450, v447, (uint64_t)&v509, v44, (uint64_t *)&v521);
            MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<MIL::Fp16>((uint64_t *)&v521, v508, (char **)&v505);
            goto LABEL_373;
          case 22:
            v317 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v29);
            v319 = v318;
            v320 = MIL::IRTensorValue::GetDataView<MIL::UInt3>(v33);
            v322 = v321;
            v323 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(v37);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::UInt3>(v320, v322, v317, v319, &v523);
            MIL::PackSubByteVec((unsigned __int8 **)&v523, &v522);
            if (v522.__r_.__value_.__l.__size_ == v522.__r_.__value_.__r.__words[0])
              v324 = 0;
            else
              v324 = v522.__r_.__value_.__r.__words[0];
            MIL::Util::CastToBitSpan<MIL::UInt3 const,unsigned char,true>(v324, v522.__r_.__value_.__l.__size_ - v522.__r_.__value_.__r.__words[0], v523.__r_.__value_.__l.__size_ - v523.__r_.__value_.__r.__words[0]);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<MIL::Fp16,MIL::UInt3>(v325, v326, v323, (uint64_t)&v509, v44, (uint64_t *)&v521);
            MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<MIL::Fp16>((uint64_t *)&v521, v508, (char **)&v505);
            goto LABEL_373;
          case 23:
            v385 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v29);
            v387 = v386;
            v388 = MIL::IRTensorValue::GetDataView<MIL::UInt6>(v33);
            v390 = v389;
            v391 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(v37);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::UInt6>(v388, v390, v385, v387, &v523);
            MIL::PackSubByteVec((unsigned __int8 **)&v523, &v522);
            if (v522.__r_.__value_.__l.__size_ == v522.__r_.__value_.__r.__words[0])
              v392 = 0;
            else
              v392 = v522.__r_.__value_.__r.__words[0];
            MIL::Util::CastToBitSpan<MIL::UInt6 const,unsigned char,true>(v392, v522.__r_.__value_.__l.__size_ - v522.__r_.__value_.__r.__words[0], v523.__r_.__value_.__l.__size_ - v523.__r_.__value_.__r.__words[0]);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<MIL::Fp16,MIL::UInt6>(v393, v394, v391, (uint64_t)&v509, v44, (uint64_t *)&v521);
            MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<MIL::Fp16>((uint64_t *)&v521, v508, (char **)&v505);
LABEL_373:
            if (v521.__r_.__value_.__r.__words[0])
            {
              v521.__r_.__value_.__l.__size_ = v521.__r_.__value_.__r.__words[0];
              operator delete(v521.__r_.__value_.__l.__data_);
            }
LABEL_375:
            if (v522.__r_.__value_.__r.__words[0])
            {
              v522.__r_.__value_.__l.__size_ = v522.__r_.__value_.__r.__words[0];
              operator delete(v522.__r_.__value_.__l.__data_);
            }
            if (v523.__r_.__value_.__r.__words[0])
            {
              v523.__r_.__value_.__l.__size_ = v523.__r_.__value_.__r.__words[0];
              operator delete(v523.__r_.__value_.__l.__data_);
            }
            if (__p)
            {
              v515 = __p;
              operator delete(__p);
            }
            if (v512)
            {
              v513 = v512;
              operator delete(v512);
            }
            if (v510)
            {
              v511 = v510;
              operator delete(v510);
            }
            if (v509.__r_.__value_.__r.__words[0])
            {
              v509.__r_.__value_.__l.__size_ = v509.__r_.__value_.__r.__words[0];
              operator delete(v509.__r_.__value_.__l.__data_);
            }
            if (v517)
            {
              v518 = v517;
              operator delete(v517);
            }
            if (v519)
            {
              v520 = v519;
              operator delete(v519);
            }
            MIL::IRTensorValueType::MakeFloat16Value(v27, (uint64_t)&v505, v507);
            v451 = v507[0];
            *a3 = v507[0];
            if (v451)
            {
              v452 = (_QWORD *)operator new();
              v453 = v507[0];
              *v452 = &unk_1EA992A68;
              v452[1] = 0;
              v452[2] = 0;
              v452[3] = v453;
            }
            else
            {
              v452 = 0;
            }
            a3[1] = v452;
            v507[0] = 0;
            if (v505)
            {
              v506 = v505;
              operator delete(v505);
            }
            if (v36)
            {
              v454 = (unint64_t *)&v36->__shared_owners_;
              do
                v455 = __ldaxr(v454);
              while (__stlxr(v455 - 1, v454));
              if (!v455)
              {
                ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                std::__shared_weak_count::__release_weak(v36);
              }
            }
            if (v497)
            {
              v456 = (unint64_t *)&v497->__shared_owners_;
              do
                v457 = __ldaxr(v456);
              while (__stlxr(v457 - 1, v456));
              if (!v457)
              {
                ((void (*)(std::__shared_weak_count *))v497->__on_zero_shared)(v497);
                std::__shared_weak_count::__release_weak(v497);
              }
            }
            v234 = v498;
            if (!v498)
              goto LABEL_411;
            v458 = (unint64_t *)&v498->__shared_owners_;
            do
              v236 = __ldaxr(v458);
            while (__stlxr(v236 - 1, v458));
            break;
          default:
            v490 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            MIL::IRDataTypeToString(v47, &v521);
            v491 = std::string::insert(&v521, 0, "Constexpr-BlockwiseLutToSparse: Unsupported dtype ");
            v492 = *(_OWORD *)&v491->__r_.__value_.__l.__data_;
            v522.__r_.__value_.__r.__words[2] = v491->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v522.__r_.__value_.__l.__data_ = v492;
            v491->__r_.__value_.__l.__size_ = 0;
            v491->__r_.__value_.__r.__words[2] = 0;
            v491->__r_.__value_.__r.__words[0] = 0;
            v493 = std::string::append(&v522, " for indices");
            v494 = *(_OWORD *)&v493->__r_.__value_.__l.__data_;
            v523.__r_.__value_.__r.__words[2] = v493->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v523.__r_.__value_.__l.__data_ = v494;
            v493->__r_.__value_.__l.__size_ = 0;
            v493->__r_.__value_.__r.__words[2] = 0;
            v493->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v490, &v523);
            __cxa_throw(v490, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        return;
      case 5:
        v140 = *((_QWORD *)this + 1);
        v142 = (const void *)*((_QWORD *)this + 4);
        v141 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
        v496 = v141;
        if (v141)
        {
          v143 = (unint64_t *)&v141->__shared_owners_;
          do
            v144 = __ldxr(v143);
          while (__stxr(v144 + 1, v143));
        }
        v146 = (void *)*((_QWORD *)this + 6);
        v145 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
        v495 = v145;
        if (v145)
        {
          v147 = (unint64_t *)&v145->__shared_owners_;
          do
            v148 = __ldxr(v147);
          while (__stxr(v148 + 1, v147));
        }
        v150 = (uint64_t *)*((_QWORD *)this + 2);
        v149 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
        if (v149)
        {
          v151 = (unint64_t *)&v149->__shared_owners_;
          do
            v152 = __ldxr(v151);
          while (__stxr(v152 + 1, v151));
        }
        v153 = (*(uint64_t (**)(const void *))(*(_QWORD *)v142 + 32))(v142);
        v154 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v153 + 96))(v153);
        MIL::Operators::Common::Shared::ConstExprs::ShapeToVector(v154, &v519);
        v155 = (*(uint64_t (**)(uint64_t *))(*v150 + 32))(v150);
        v156 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v155 + 96))(v155);
        MIL::Operators::Common::Shared::ConstExprs::ShapeToVector(v156, &v517);
        v157 = *(v518 - 2);
        v158 = *(v518 - 1);
        memset(&v523, 0, sizeof(v523));
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(&v523, v517, (uint64_t)(v518 - 2), ((char *)(v518 - 2) - (_BYTE *)v517) >> 3);
        MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::BlockwiseLutToDenseIndexConverter(&v509, (uint64_t)&v519, (unint64_t **)&v523, v158, v6);
        if (v523.__r_.__value_.__r.__words[0])
        {
          v523.__r_.__value_.__l.__size_ = v523.__r_.__value_.__r.__words[0];
          operator delete(v523.__r_.__value_.__l.__data_);
        }
        v159 = (*(uint64_t (**)(void *))(*(_QWORD *)v146 + 32))(v146);
        v160 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v159 + 88))(v159);
        switch(v160)
        {
          case 14:
            v161 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v142);
            v163 = v162;
            v164 = MIL::IRTensorValue::GetDataView<unsigned char>(v146);
            v165 = MIL::IRTensorValue::GetDataView<float>(v150);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<unsigned char>(v164, v161, v163, &v523);
            if (v523.__r_.__value_.__l.__size_ == v523.__r_.__value_.__r.__words[0])
              v166 = 0;
            else
              v166 = v523.__r_.__value_.__r.__words[0];
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<float,unsigned char>(v166, v523.__r_.__value_.__l.__size_ - v523.__r_.__value_.__r.__words[0], v165, (uint64_t)&v509, v157, (uint64_t *)&v522);
            MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<float>((uint64_t *)&v522, v508, (char **)&v505);
            goto LABEL_330;
          case 19:
            v277 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v142);
            v279 = v278;
            v280 = MIL::IRTensorValue::GetDataView<MIL::UInt2>(v146);
            v282 = v281;
            v283 = MIL::IRTensorValue::GetDataView<float>(v150);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::UInt2>(v280, v282, v277, v279, &v523);
            MIL::PackSubByteVec((uint64_t *)&v523, &v522);
            if (v522.__r_.__value_.__l.__size_ == v522.__r_.__value_.__r.__words[0])
              v284 = 0;
            else
              v284 = v522.__r_.__value_.__r.__words[0];
            MIL::Util::CastToBitSpan<MIL::UInt2 const,unsigned char,true>(v284, v522.__r_.__value_.__l.__size_ - v522.__r_.__value_.__r.__words[0], v523.__r_.__value_.__l.__size_ - v523.__r_.__value_.__r.__words[0]);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<float,MIL::UInt2>(v285, v286, v283, (uint64_t)&v509, v157, (uint64_t *)&v521);
            MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<float>((uint64_t *)&v521, v508, (char **)&v505);
            goto LABEL_328;
          case 20:
            v375 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v142);
            v377 = v376;
            v378 = MIL::IRTensorValue::GetDataView<MIL::UInt4>(v146);
            v380 = v379;
            v381 = MIL::IRTensorValue::GetDataView<float>(v150);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::UInt4>(v378, v380, v375, v377, &v523);
            MIL::PackSubByteVec((uint64_t *)&v523, &v522);
            if (v522.__r_.__value_.__l.__size_ == v522.__r_.__value_.__r.__words[0])
              v382 = 0;
            else
              v382 = v522.__r_.__value_.__r.__words[0];
            MIL::Util::CastToBitSpan<MIL::UInt4 const,unsigned char,true>(v382, v522.__r_.__value_.__l.__size_ - v522.__r_.__value_.__r.__words[0], v523.__r_.__value_.__l.__size_ - v523.__r_.__value_.__r.__words[0]);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<float,MIL::UInt4>(v383, v384, v381, (uint64_t)&v509, v157, (uint64_t *)&v521);
            MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<float>((uint64_t *)&v521, v508, (char **)&v505);
            goto LABEL_328;
          case 21:
            v413 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v142);
            v415 = v414;
            v416 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v146);
            v418 = v417;
            v419 = MIL::IRTensorValue::GetDataView<float>(v150);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::UInt1>(v416, v418, v413, v415, &v523);
            MIL::PackSubByteVec((uint64_t *)&v523, &v522);
            if (v522.__r_.__value_.__l.__size_ == v522.__r_.__value_.__r.__words[0])
              v420 = 0;
            else
              v420 = v522.__r_.__value_.__r.__words[0];
            MIL::Util::CastToBitSpan<MIL::UInt1 const,unsigned char,true>(v420, v522.__r_.__value_.__l.__size_ - v522.__r_.__value_.__r.__words[0], v523.__r_.__value_.__l.__size_ - v523.__r_.__value_.__r.__words[0]);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<float,MIL::UInt1>(v421, v422, v419, (uint64_t)&v509, v157, (uint64_t *)&v521);
            MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<float>((uint64_t *)&v521, v508, (char **)&v505);
            goto LABEL_328;
          case 22:
            v257 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v142);
            v259 = v258;
            v260 = MIL::IRTensorValue::GetDataView<MIL::UInt3>(v146);
            v262 = v261;
            v263 = MIL::IRTensorValue::GetDataView<float>(v150);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::UInt3>(v260, v262, v257, v259, &v523);
            MIL::PackSubByteVec((unsigned __int8 **)&v523, &v522);
            if (v522.__r_.__value_.__l.__size_ == v522.__r_.__value_.__r.__words[0])
              v264 = 0;
            else
              v264 = v522.__r_.__value_.__r.__words[0];
            MIL::Util::CastToBitSpan<MIL::UInt3 const,unsigned char,true>(v264, v522.__r_.__value_.__l.__size_ - v522.__r_.__value_.__r.__words[0], v523.__r_.__value_.__l.__size_ - v523.__r_.__value_.__r.__words[0]);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<float,MIL::UInt3>(v265, v266, v263, (uint64_t)&v509, v157, (uint64_t *)&v521);
            MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<float>((uint64_t *)&v521, v508, (char **)&v505);
            goto LABEL_328;
          case 23:
            v307 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v142);
            v309 = v308;
            v310 = MIL::IRTensorValue::GetDataView<MIL::UInt6>(v146);
            v312 = v311;
            v313 = MIL::IRTensorValue::GetDataView<float>(v150);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::UInt6>(v310, v312, v307, v309, &v523);
            MIL::PackSubByteVec((unsigned __int8 **)&v523, &v522);
            if (v522.__r_.__value_.__l.__size_ == v522.__r_.__value_.__r.__words[0])
              v314 = 0;
            else
              v314 = v522.__r_.__value_.__r.__words[0];
            MIL::Util::CastToBitSpan<MIL::UInt6 const,unsigned char,true>(v314, v522.__r_.__value_.__l.__size_ - v522.__r_.__value_.__r.__words[0], v523.__r_.__value_.__l.__size_ - v523.__r_.__value_.__r.__words[0]);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<float,MIL::UInt6>(v315, v316, v313, (uint64_t)&v509, v157, (uint64_t *)&v521);
            MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<float>((uint64_t *)&v521, v508, (char **)&v505);
LABEL_328:
            if (v521.__r_.__value_.__r.__words[0])
            {
              v521.__r_.__value_.__l.__size_ = v521.__r_.__value_.__r.__words[0];
              operator delete(v521.__r_.__value_.__l.__data_);
            }
LABEL_330:
            if (v522.__r_.__value_.__r.__words[0])
            {
              v522.__r_.__value_.__l.__size_ = v522.__r_.__value_.__r.__words[0];
              operator delete(v522.__r_.__value_.__l.__data_);
            }
            if (v523.__r_.__value_.__r.__words[0])
            {
              v523.__r_.__value_.__l.__size_ = v523.__r_.__value_.__r.__words[0];
              operator delete(v523.__r_.__value_.__l.__data_);
            }
            if (__p)
            {
              v515 = __p;
              operator delete(__p);
            }
            if (v512)
            {
              v513 = v512;
              operator delete(v512);
            }
            if (v510)
            {
              v511 = v510;
              operator delete(v510);
            }
            if (v509.__r_.__value_.__r.__words[0])
            {
              v509.__r_.__value_.__l.__size_ = v509.__r_.__value_.__r.__words[0];
              operator delete(v509.__r_.__value_.__l.__data_);
            }
            if (v517)
            {
              v518 = v517;
              operator delete(v517);
            }
            if (v519)
            {
              v520 = v519;
              operator delete(v519);
            }
            MIL::IRTensorValueType::MakeFloat32Value(v140, (uint64_t)&v505, v507);
            v423 = v507[0];
            *a3 = v507[0];
            if (v423)
            {
              v424 = (_QWORD *)operator new();
              v425 = v507[0];
              *v424 = &unk_1EA992A68;
              v424[1] = 0;
              v424[2] = 0;
              v424[3] = v425;
            }
            else
            {
              v424 = 0;
            }
            a3[1] = v424;
            v507[0] = 0;
            if (v505)
            {
              v506 = v505;
              operator delete(v505);
            }
            if (v149)
            {
              v426 = (unint64_t *)&v149->__shared_owners_;
              do
                v427 = __ldaxr(v426);
              while (__stlxr(v427 - 1, v426));
              if (!v427)
              {
                ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
                std::__shared_weak_count::__release_weak(v149);
              }
            }
            if (v495)
            {
              v428 = (unint64_t *)&v495->__shared_owners_;
              do
                v429 = __ldaxr(v428);
              while (__stlxr(v429 - 1, v428));
              if (!v429)
              {
                ((void (*)(std::__shared_weak_count *))v495->__on_zero_shared)(v495);
                std::__shared_weak_count::__release_weak(v495);
              }
            }
            v234 = v496;
            if (!v496)
              goto LABEL_411;
            v430 = (unint64_t *)&v496->__shared_owners_;
            do
              v236 = __ldaxr(v430);
            while (__stlxr(v236 - 1, v430));
            break;
          default:
            v485 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            MIL::IRDataTypeToString(v160, &v521);
            v486 = std::string::insert(&v521, 0, "Constexpr-BlockwiseLutToSparse: Unsupported dtype ");
            v487 = *(_OWORD *)&v486->__r_.__value_.__l.__data_;
            v522.__r_.__value_.__r.__words[2] = v486->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v522.__r_.__value_.__l.__data_ = v487;
            v486->__r_.__value_.__l.__size_ = 0;
            v486->__r_.__value_.__r.__words[2] = 0;
            v486->__r_.__value_.__r.__words[0] = 0;
            v488 = std::string::append(&v522, " for indices");
            v489 = *(_OWORD *)&v488->__r_.__value_.__l.__data_;
            v523.__r_.__value_.__r.__words[2] = v488->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v523.__r_.__value_.__l.__data_ = v489;
            v488->__r_.__value_.__l.__size_ = 0;
            v488->__r_.__value_.__r.__words[2] = 0;
            v488->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v485, &v523);
            __cxa_throw(v485, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        return;
      case 7:
        v86 = *((_QWORD *)this + 1);
        v88 = (const void *)*((_QWORD *)this + 4);
        v87 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
        v500 = v87;
        if (v87)
        {
          v89 = (unint64_t *)&v87->__shared_owners_;
          do
            v90 = __ldxr(v89);
          while (__stxr(v90 + 1, v89));
        }
        v92 = (void *)*((_QWORD *)this + 6);
        v91 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
        v499 = v91;
        if (v91)
        {
          v93 = (unint64_t *)&v91->__shared_owners_;
          do
            v94 = __ldxr(v93);
          while (__stxr(v94 + 1, v93));
        }
        v96 = (uint64_t *)*((_QWORD *)this + 2);
        v95 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
        if (v95)
        {
          v97 = (unint64_t *)&v95->__shared_owners_;
          do
            v98 = __ldxr(v97);
          while (__stxr(v98 + 1, v97));
        }
        v99 = (*(uint64_t (**)(const void *))(*(_QWORD *)v88 + 32))(v88);
        v100 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v99 + 96))(v99);
        MIL::Operators::Common::Shared::ConstExprs::ShapeToVector(v100, &v519);
        v101 = (*(uint64_t (**)(uint64_t *))(*v96 + 32))(v96);
        v102 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v101 + 96))(v101);
        MIL::Operators::Common::Shared::ConstExprs::ShapeToVector(v102, &v517);
        v103 = *(v518 - 2);
        v104 = *(v518 - 1);
        memset(&v523, 0, sizeof(v523));
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(&v523, v517, (uint64_t)(v518 - 2), ((char *)(v518 - 2) - (_BYTE *)v517) >> 3);
        MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::BlockwiseLutToDenseIndexConverter(&v509, (uint64_t)&v519, (unint64_t **)&v523, v104, v6);
        if (v523.__r_.__value_.__r.__words[0])
        {
          v523.__r_.__value_.__l.__size_ = v523.__r_.__value_.__r.__words[0];
          operator delete(v523.__r_.__value_.__l.__data_);
        }
        v105 = (*(uint64_t (**)(void *))(*(_QWORD *)v92 + 32))(v92);
        v106 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v105 + 88))(v105);
        switch(v106)
        {
          case 14:
            v107 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v88);
            v109 = v108;
            v110 = MIL::IRTensorValue::GetDataView<unsigned char>(v92);
            v111 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(v96);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<unsigned char>(v110, v107, v109, &v523);
            if (v523.__r_.__value_.__l.__size_ == v523.__r_.__value_.__r.__words[0])
              v112 = 0;
            else
              v112 = v523.__r_.__value_.__r.__words[0];
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<MIL::Bf16,unsigned char>(v112, v523.__r_.__value_.__l.__size_ - v523.__r_.__value_.__r.__words[0], v111, (uint64_t)&v509, v103, (uint64_t *)&v522);
            MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<MIL::Bf16>((uint64_t *)&v522, v508, (char **)&v505);
            goto LABEL_236;
          case 19:
            v247 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v88);
            v249 = v248;
            v250 = MIL::IRTensorValue::GetDataView<MIL::UInt2>(v92);
            v252 = v251;
            v253 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(v96);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::UInt2>(v250, v252, v247, v249, &v523);
            MIL::PackSubByteVec((uint64_t *)&v523, &v522);
            if (v522.__r_.__value_.__l.__size_ == v522.__r_.__value_.__r.__words[0])
              v254 = 0;
            else
              v254 = v522.__r_.__value_.__r.__words[0];
            MIL::Util::CastToBitSpan<MIL::UInt2 const,unsigned char,true>(v254, v522.__r_.__value_.__l.__size_ - v522.__r_.__value_.__r.__words[0], v523.__r_.__value_.__l.__size_ - v523.__r_.__value_.__r.__words[0]);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<MIL::Bf16,MIL::UInt2>(v255, v256, v253, (uint64_t)&v509, v103, (uint64_t *)&v521);
            MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<MIL::Bf16>((uint64_t *)&v521, v508, (char **)&v505);
            goto LABEL_234;
          case 20:
            v327 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v88);
            v329 = v328;
            v330 = MIL::IRTensorValue::GetDataView<MIL::UInt4>(v92);
            v332 = v331;
            v333 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(v96);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::UInt4>(v330, v332, v327, v329, &v523);
            MIL::PackSubByteVec((uint64_t *)&v523, &v522);
            if (v522.__r_.__value_.__l.__size_ == v522.__r_.__value_.__r.__words[0])
              v334 = 0;
            else
              v334 = v522.__r_.__value_.__r.__words[0];
            MIL::Util::CastToBitSpan<MIL::UInt4 const,unsigned char,true>(v334, v522.__r_.__value_.__l.__size_ - v522.__r_.__value_.__r.__words[0], v523.__r_.__value_.__l.__size_ - v523.__r_.__value_.__r.__words[0]);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<MIL::Bf16,MIL::UInt4>(v335, v336, v333, (uint64_t)&v509, v103, (uint64_t *)&v521);
            MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<MIL::Bf16>((uint64_t *)&v521, v508, (char **)&v505);
            goto LABEL_234;
          case 21:
            v347 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v88);
            v349 = v348;
            v350 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v92);
            v352 = v351;
            v353 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(v96);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::UInt1>(v350, v352, v347, v349, &v523);
            MIL::PackSubByteVec((uint64_t *)&v523, &v522);
            if (v522.__r_.__value_.__l.__size_ == v522.__r_.__value_.__r.__words[0])
              v354 = 0;
            else
              v354 = v522.__r_.__value_.__r.__words[0];
            MIL::Util::CastToBitSpan<MIL::UInt1 const,unsigned char,true>(v354, v522.__r_.__value_.__l.__size_ - v522.__r_.__value_.__r.__words[0], v523.__r_.__value_.__l.__size_ - v523.__r_.__value_.__r.__words[0]);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<MIL::Bf16,MIL::UInt1>(v355, v356, v353, (uint64_t)&v509, v103, (uint64_t *)&v521);
            MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<MIL::Bf16>((uint64_t *)&v521, v508, (char **)&v505);
            goto LABEL_234;
          case 22:
            v207 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v88);
            v209 = v208;
            v210 = MIL::IRTensorValue::GetDataView<MIL::UInt3>(v92);
            v212 = v211;
            v213 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(v96);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::UInt3>(v210, v212, v207, v209, &v523);
            MIL::PackSubByteVec((unsigned __int8 **)&v523, &v522);
            if (v522.__r_.__value_.__l.__size_ == v522.__r_.__value_.__r.__words[0])
              v214 = 0;
            else
              v214 = v522.__r_.__value_.__r.__words[0];
            MIL::Util::CastToBitSpan<MIL::UInt3 const,unsigned char,true>(v214, v522.__r_.__value_.__l.__size_ - v522.__r_.__value_.__r.__words[0], v523.__r_.__value_.__l.__size_ - v523.__r_.__value_.__r.__words[0]);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<MIL::Bf16,MIL::UInt3>(v215, v216, v213, (uint64_t)&v509, v103, (uint64_t *)&v521);
            MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<MIL::Bf16>((uint64_t *)&v521, v508, (char **)&v505);
            goto LABEL_234;
          case 23:
            v287 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v88);
            v289 = v288;
            v290 = MIL::IRTensorValue::GetDataView<MIL::UInt6>(v92);
            v292 = v291;
            v293 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(v96);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::UInt6>(v290, v292, v287, v289, &v523);
            MIL::PackSubByteVec((unsigned __int8 **)&v523, &v522);
            if (v522.__r_.__value_.__l.__size_ == v522.__r_.__value_.__r.__words[0])
              v294 = 0;
            else
              v294 = v522.__r_.__value_.__r.__words[0];
            MIL::Util::CastToBitSpan<MIL::UInt6 const,unsigned char,true>(v294, v522.__r_.__value_.__l.__size_ - v522.__r_.__value_.__r.__words[0], v523.__r_.__value_.__l.__size_ - v523.__r_.__value_.__r.__words[0]);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<MIL::Bf16,MIL::UInt6>(v295, v296, v293, (uint64_t)&v509, v103, (uint64_t *)&v521);
            MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<MIL::Bf16>((uint64_t *)&v521, v508, (char **)&v505);
LABEL_234:
            if (v521.__r_.__value_.__r.__words[0])
            {
              v521.__r_.__value_.__l.__size_ = v521.__r_.__value_.__r.__words[0];
              operator delete(v521.__r_.__value_.__l.__data_);
            }
LABEL_236:
            if (v522.__r_.__value_.__r.__words[0])
            {
              v522.__r_.__value_.__l.__size_ = v522.__r_.__value_.__r.__words[0];
              operator delete(v522.__r_.__value_.__l.__data_);
            }
            if (v523.__r_.__value_.__r.__words[0])
            {
              v523.__r_.__value_.__l.__size_ = v523.__r_.__value_.__r.__words[0];
              operator delete(v523.__r_.__value_.__l.__data_);
            }
            if (__p)
            {
              v515 = __p;
              operator delete(__p);
            }
            if (v512)
            {
              v513 = v512;
              operator delete(v512);
            }
            if (v510)
            {
              v511 = v510;
              operator delete(v510);
            }
            if (v509.__r_.__value_.__r.__words[0])
            {
              v509.__r_.__value_.__l.__size_ = v509.__r_.__value_.__r.__words[0];
              operator delete(v509.__r_.__value_.__l.__data_);
            }
            if (v517)
            {
              v518 = v517;
              operator delete(v517);
            }
            if (v519)
            {
              v520 = v519;
              operator delete(v519);
            }
            MIL::IRTensorValueType::MakeBFloat16Value(v86, (uint64_t)&v505, v507);
            v357 = v507[0];
            *a3 = v507[0];
            if (v357)
            {
              v358 = (_QWORD *)operator new();
              v359 = v507[0];
              *v358 = &unk_1EA992A68;
              v358[1] = 0;
              v358[2] = 0;
              v358[3] = v359;
            }
            else
            {
              v358 = 0;
            }
            a3[1] = v358;
            v507[0] = 0;
            if (v505)
            {
              v506 = v505;
              operator delete(v505);
            }
            if (v95)
            {
              v360 = (unint64_t *)&v95->__shared_owners_;
              do
                v361 = __ldaxr(v360);
              while (__stlxr(v361 - 1, v360));
              if (!v361)
              {
                ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                std::__shared_weak_count::__release_weak(v95);
              }
            }
            if (v499)
            {
              v362 = (unint64_t *)&v499->__shared_owners_;
              do
                v363 = __ldaxr(v362);
              while (__stlxr(v363 - 1, v362));
              if (!v363)
              {
                ((void (*)(std::__shared_weak_count *))v499->__on_zero_shared)(v499);
                std::__shared_weak_count::__release_weak(v499);
              }
            }
            v234 = v500;
            if (!v500)
              goto LABEL_411;
            v364 = (unint64_t *)&v500->__shared_owners_;
            do
              v236 = __ldaxr(v364);
            while (__stlxr(v236 - 1, v364));
            break;
          default:
            v475 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            MIL::IRDataTypeToString(v106, &v521);
            v476 = std::string::insert(&v521, 0, "Constexpr-BlockwiseLutToSparse: Unsupported dtype ");
            v477 = *(_OWORD *)&v476->__r_.__value_.__l.__data_;
            v522.__r_.__value_.__r.__words[2] = v476->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v522.__r_.__value_.__l.__data_ = v477;
            v476->__r_.__value_.__l.__size_ = 0;
            v476->__r_.__value_.__r.__words[2] = 0;
            v476->__r_.__value_.__r.__words[0] = 0;
            v478 = std::string::append(&v522, " for indices");
            v479 = *(_OWORD *)&v478->__r_.__value_.__l.__data_;
            v523.__r_.__value_.__r.__words[2] = v478->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v523.__r_.__value_.__l.__data_ = v479;
            v478->__r_.__value_.__l.__size_ = 0;
            v478->__r_.__value_.__r.__words[2] = 0;
            v478->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v475, &v523);
            __cxa_throw(v475, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        return;
      case 9:
        v113 = *((_QWORD *)this + 1);
        v115 = (const void *)*((_QWORD *)this + 4);
        v114 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
        v502 = v114;
        if (v114)
        {
          v116 = (unint64_t *)&v114->__shared_owners_;
          do
            v117 = __ldxr(v116);
          while (__stxr(v117 + 1, v116));
        }
        v119 = (void *)*((_QWORD *)this + 6);
        v118 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
        v501 = v118;
        if (v118)
        {
          v120 = (unint64_t *)&v118->__shared_owners_;
          do
            v121 = __ldxr(v120);
          while (__stxr(v121 + 1, v120));
        }
        v123 = (uint64_t *)*((_QWORD *)this + 2);
        v122 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
        if (v122)
        {
          v124 = (unint64_t *)&v122->__shared_owners_;
          do
            v125 = __ldxr(v124);
          while (__stxr(v125 + 1, v124));
        }
        v126 = (*(uint64_t (**)(const void *))(*(_QWORD *)v115 + 32))(v115);
        v127 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v126 + 96))(v126);
        MIL::Operators::Common::Shared::ConstExprs::ShapeToVector(v127, &v519);
        v128 = (*(uint64_t (**)(uint64_t *))(*v123 + 32))(v123);
        v129 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v128 + 96))(v128);
        MIL::Operators::Common::Shared::ConstExprs::ShapeToVector(v129, &v517);
        v130 = *(v518 - 2);
        v131 = *(v518 - 1);
        memset(&v523, 0, sizeof(v523));
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(&v523, v517, (uint64_t)(v518 - 2), ((char *)(v518 - 2) - (_BYTE *)v517) >> 3);
        MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::BlockwiseLutToDenseIndexConverter(&v509, (uint64_t)&v519, (unint64_t **)&v523, v131, v6);
        if (v523.__r_.__value_.__r.__words[0])
        {
          v523.__r_.__value_.__l.__size_ = v523.__r_.__value_.__r.__words[0];
          operator delete(v523.__r_.__value_.__l.__data_);
        }
        v132 = (*(uint64_t (**)(void *))(*(_QWORD *)v119 + 32))(v119);
        v133 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v132 + 88))(v132);
        switch(v133)
        {
          case 14:
            v134 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v115);
            v136 = v135;
            v137 = MIL::IRTensorValue::GetDataView<unsigned char>(v119);
            v138 = MIL::IRTensorValue::GetDataView<signed char>(v123);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<unsigned char>(v137, v134, v136, &v523);
            if (v523.__r_.__value_.__l.__size_ == v523.__r_.__value_.__r.__words[0])
              v139 = 0;
            else
              v139 = v523.__r_.__value_.__r.__words[0];
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<signed char,unsigned char>(v139, v523.__r_.__value_.__l.__size_ - v523.__r_.__value_.__r.__words[0], v138, (uint64_t)&v509, v130, &v522);
            MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<signed char>((uint64_t *)&v522, v508, (unint64_t *)&v505);
            goto LABEL_289;
          case 19:
            v267 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v115);
            v269 = v268;
            v270 = MIL::IRTensorValue::GetDataView<MIL::UInt2>(v119);
            v272 = v271;
            v273 = MIL::IRTensorValue::GetDataView<signed char>(v123);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::UInt2>(v270, v272, v267, v269, &v523);
            MIL::PackSubByteVec((uint64_t *)&v523, &v522);
            if (v522.__r_.__value_.__l.__size_ == v522.__r_.__value_.__r.__words[0])
              v274 = 0;
            else
              v274 = v522.__r_.__value_.__r.__words[0];
            MIL::Util::CastToBitSpan<MIL::UInt2 const,unsigned char,true>(v274, v522.__r_.__value_.__l.__size_ - v522.__r_.__value_.__r.__words[0], v523.__r_.__value_.__l.__size_ - v523.__r_.__value_.__r.__words[0]);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<signed char,MIL::UInt2>(v275, v276, v273, (uint64_t)&v509, v130, &v521);
            MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<signed char>((uint64_t *)&v521, v508, (unint64_t *)&v505);
            goto LABEL_287;
          case 20:
            v365 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v115);
            v367 = v366;
            v368 = MIL::IRTensorValue::GetDataView<MIL::UInt4>(v119);
            v370 = v369;
            v371 = MIL::IRTensorValue::GetDataView<signed char>(v123);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::UInt4>(v368, v370, v365, v367, &v523);
            MIL::PackSubByteVec((uint64_t *)&v523, &v522);
            if (v522.__r_.__value_.__l.__size_ == v522.__r_.__value_.__r.__words[0])
              v372 = 0;
            else
              v372 = v522.__r_.__value_.__r.__words[0];
            MIL::Util::CastToBitSpan<MIL::UInt4 const,unsigned char,true>(v372, v522.__r_.__value_.__l.__size_ - v522.__r_.__value_.__r.__words[0], v523.__r_.__value_.__l.__size_ - v523.__r_.__value_.__r.__words[0]);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<signed char,MIL::UInt4>(v373, v374, v371, (uint64_t)&v509, v130, &v521);
            MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<signed char>((uint64_t *)&v521, v508, (unint64_t *)&v505);
            goto LABEL_287;
          case 21:
            v395 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v115);
            v397 = v396;
            v398 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v119);
            v400 = v399;
            v401 = MIL::IRTensorValue::GetDataView<signed char>(v123);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::UInt1>(v398, v400, v395, v397, &v523);
            MIL::PackSubByteVec((uint64_t *)&v523, &v522);
            if (v522.__r_.__value_.__l.__size_ == v522.__r_.__value_.__r.__words[0])
              v402 = 0;
            else
              v402 = v522.__r_.__value_.__r.__words[0];
            MIL::Util::CastToBitSpan<MIL::UInt1 const,unsigned char,true>(v402, v522.__r_.__value_.__l.__size_ - v522.__r_.__value_.__r.__words[0], v523.__r_.__value_.__l.__size_ - v523.__r_.__value_.__r.__words[0]);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<signed char,MIL::UInt1>(v403, v404, v401, (uint64_t)&v509, v130, &v521);
            MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<signed char>((uint64_t *)&v521, v508, (unint64_t *)&v505);
            goto LABEL_287;
          case 22:
            v237 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v115);
            v239 = v238;
            v240 = MIL::IRTensorValue::GetDataView<MIL::UInt3>(v119);
            v242 = v241;
            v243 = MIL::IRTensorValue::GetDataView<signed char>(v123);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::UInt3>(v240, v242, v237, v239, &v523);
            MIL::PackSubByteVec((unsigned __int8 **)&v523, &v522);
            if (v522.__r_.__value_.__l.__size_ == v522.__r_.__value_.__r.__words[0])
              v244 = 0;
            else
              v244 = v522.__r_.__value_.__r.__words[0];
            MIL::Util::CastToBitSpan<MIL::UInt3 const,unsigned char,true>(v244, v522.__r_.__value_.__l.__size_ - v522.__r_.__value_.__r.__words[0], v523.__r_.__value_.__l.__size_ - v523.__r_.__value_.__r.__words[0]);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<signed char,MIL::UInt3>(v245, v246, v243, (uint64_t)&v509, v130, &v521);
            MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<signed char>((uint64_t *)&v521, v508, (unint64_t *)&v505);
            goto LABEL_287;
          case 23:
            v297 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v115);
            v299 = v298;
            v300 = MIL::IRTensorValue::GetDataView<MIL::UInt6>(v119);
            v302 = v301;
            v303 = MIL::IRTensorValue::GetDataView<signed char>(v123);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::UInt6>(v300, v302, v297, v299, &v523);
            MIL::PackSubByteVec((unsigned __int8 **)&v523, &v522);
            if (v522.__r_.__value_.__l.__size_ == v522.__r_.__value_.__r.__words[0])
              v304 = 0;
            else
              v304 = v522.__r_.__value_.__r.__words[0];
            MIL::Util::CastToBitSpan<MIL::UInt6 const,unsigned char,true>(v304, v522.__r_.__value_.__l.__size_ - v522.__r_.__value_.__r.__words[0], v523.__r_.__value_.__l.__size_ - v523.__r_.__value_.__r.__words[0]);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<signed char,MIL::UInt6>(v305, v306, v303, (uint64_t)&v509, v130, &v521);
            MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<signed char>((uint64_t *)&v521, v508, (unint64_t *)&v505);
LABEL_287:
            if (v521.__r_.__value_.__r.__words[0])
            {
              v521.__r_.__value_.__l.__size_ = v521.__r_.__value_.__r.__words[0];
              operator delete(v521.__r_.__value_.__l.__data_);
            }
LABEL_289:
            if (v522.__r_.__value_.__r.__words[0])
            {
              v522.__r_.__value_.__l.__size_ = v522.__r_.__value_.__r.__words[0];
              operator delete(v522.__r_.__value_.__l.__data_);
            }
            if (v523.__r_.__value_.__r.__words[0])
            {
              v523.__r_.__value_.__l.__size_ = v523.__r_.__value_.__r.__words[0];
              operator delete(v523.__r_.__value_.__l.__data_);
            }
            if (__p)
            {
              v515 = __p;
              operator delete(__p);
            }
            if (v512)
            {
              v513 = v512;
              operator delete(v512);
            }
            if (v510)
            {
              v511 = v510;
              operator delete(v510);
            }
            if (v509.__r_.__value_.__r.__words[0])
            {
              v509.__r_.__value_.__l.__size_ = v509.__r_.__value_.__r.__words[0];
              operator delete(v509.__r_.__value_.__l.__data_);
            }
            if (v517)
            {
              v518 = v517;
              operator delete(v517);
            }
            if (v519)
            {
              v520 = v519;
              operator delete(v519);
            }
            MIL::IRTensorValueType::MakeInt8Value(v113, (uint64_t)&v505, v507);
            v405 = v507[0];
            *a3 = v507[0];
            if (v405)
            {
              v406 = (_QWORD *)operator new();
              v407 = v507[0];
              *v406 = &unk_1EA992A68;
              v406[1] = 0;
              v406[2] = 0;
              v406[3] = v407;
            }
            else
            {
              v406 = 0;
            }
            a3[1] = v406;
            v507[0] = 0;
            if (v505)
            {
              v506 = v505;
              operator delete(v505);
            }
            if (v122)
            {
              v408 = (unint64_t *)&v122->__shared_owners_;
              do
                v409 = __ldaxr(v408);
              while (__stlxr(v409 - 1, v408));
              if (!v409)
              {
                ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                std::__shared_weak_count::__release_weak(v122);
              }
            }
            if (v501)
            {
              v410 = (unint64_t *)&v501->__shared_owners_;
              do
                v411 = __ldaxr(v410);
              while (__stlxr(v411 - 1, v410));
              if (!v411)
              {
                ((void (*)(std::__shared_weak_count *))v501->__on_zero_shared)(v501);
                std::__shared_weak_count::__release_weak(v501);
              }
            }
            v234 = v502;
            if (!v502)
              goto LABEL_411;
            v412 = (unint64_t *)&v502->__shared_owners_;
            do
              v236 = __ldaxr(v412);
            while (__stlxr(v236 - 1, v412));
            break;
          default:
            v480 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            MIL::IRDataTypeToString(v133, &v521);
            v481 = std::string::insert(&v521, 0, "Constexpr-BlockwiseLutToSparse: Unsupported dtype ");
            v482 = *(_OWORD *)&v481->__r_.__value_.__l.__data_;
            v522.__r_.__value_.__r.__words[2] = v481->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v522.__r_.__value_.__l.__data_ = v482;
            v481->__r_.__value_.__l.__size_ = 0;
            v481->__r_.__value_.__r.__words[2] = 0;
            v481->__r_.__value_.__r.__words[0] = 0;
            v483 = std::string::append(&v522, " for indices");
            v484 = *(_OWORD *)&v483->__r_.__value_.__l.__data_;
            v523.__r_.__value_.__r.__words[2] = v483->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v523.__r_.__value_.__l.__data_ = v484;
            v483->__r_.__value_.__l.__size_ = 0;
            v483->__r_.__value_.__r.__words[2] = 0;
            v483->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v480, &v523);
            __cxa_throw(v480, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        return;
      case 14:
        v59 = *((_QWORD *)this + 1);
        v61 = (const void *)*((_QWORD *)this + 4);
        v60 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
        v504 = v60;
        if (v60)
        {
          v62 = (unint64_t *)&v60->__shared_owners_;
          do
            v63 = __ldxr(v62);
          while (__stxr(v63 + 1, v62));
        }
        v65 = (void *)*((_QWORD *)this + 6);
        v64 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
        v503 = v64;
        if (v64)
        {
          v66 = (unint64_t *)&v64->__shared_owners_;
          do
            v67 = __ldxr(v66);
          while (__stxr(v67 + 1, v66));
        }
        v69 = (void *)*((_QWORD *)this + 2);
        v68 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
        if (v68)
        {
          v70 = (unint64_t *)&v68->__shared_owners_;
          do
            v71 = __ldxr(v70);
          while (__stxr(v71 + 1, v70));
        }
        v72 = (*(uint64_t (**)(const void *))(*(_QWORD *)v61 + 32))(v61);
        v73 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v72 + 96))(v72);
        MIL::Operators::Common::Shared::ConstExprs::ShapeToVector(v73, &v519);
        v74 = (*(uint64_t (**)(void *))(*(_QWORD *)v69 + 32))(v69);
        v75 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 96))(v74);
        MIL::Operators::Common::Shared::ConstExprs::ShapeToVector(v75, &v517);
        v76 = *(v518 - 2);
        v77 = *(v518 - 1);
        memset(&v523, 0, sizeof(v523));
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(&v523, v517, (uint64_t)(v518 - 2), ((char *)(v518 - 2) - (_BYTE *)v517) >> 3);
        MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::BlockwiseLutToDenseIndexConverter(&v509, (uint64_t)&v519, (unint64_t **)&v523, v77, v6);
        if (v523.__r_.__value_.__r.__words[0])
        {
          v523.__r_.__value_.__l.__size_ = v523.__r_.__value_.__r.__words[0];
          operator delete(v523.__r_.__value_.__l.__data_);
        }
        v78 = (*(uint64_t (**)(void *))(*(_QWORD *)v65 + 32))(v65);
        v79 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v78 + 88))(v78);
        switch(v79)
        {
          case 14:
            v80 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v61);
            v82 = v81;
            v83 = MIL::IRTensorValue::GetDataView<unsigned char>(v65);
            v84 = MIL::IRTensorValue::GetDataView<unsigned char>(v69);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<unsigned char>(v83, v80, v82, &v523);
            if (v523.__r_.__value_.__l.__size_ == v523.__r_.__value_.__r.__words[0])
              v85 = 0;
            else
              v85 = v523.__r_.__value_.__r.__words[0];
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<unsigned char,unsigned char>(v85, v523.__r_.__value_.__l.__size_ - v523.__r_.__value_.__r.__words[0], v84, (uint64_t)&v509, v76, &v522);
            MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<unsigned char>((uint64_t *)&v522, v508, (unint64_t *)&v505);
            goto LABEL_151;
          case 19:
            v177 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v61);
            v179 = v178;
            v180 = MIL::IRTensorValue::GetDataView<MIL::UInt2>(v65);
            v182 = v181;
            v183 = MIL::IRTensorValue::GetDataView<unsigned char>(v69);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::UInt2>(v180, v182, v177, v179, &v523);
            MIL::PackSubByteVec((uint64_t *)&v523, &v522);
            if (v522.__r_.__value_.__l.__size_ == v522.__r_.__value_.__r.__words[0])
              v184 = 0;
            else
              v184 = v522.__r_.__value_.__r.__words[0];
            MIL::Util::CastToBitSpan<MIL::UInt2 const,unsigned char,true>(v184, v522.__r_.__value_.__l.__size_ - v522.__r_.__value_.__r.__words[0], v523.__r_.__value_.__l.__size_ - v523.__r_.__value_.__r.__words[0]);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<unsigned char,MIL::UInt2>(v185, v186, v183, (uint64_t)&v509, v76, &v521);
            MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<unsigned char>((uint64_t *)&v521, v508, (unint64_t *)&v505);
            goto LABEL_149;
          case 20:
            v197 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v61);
            v199 = v198;
            v200 = MIL::IRTensorValue::GetDataView<MIL::UInt4>(v65);
            v202 = v201;
            v203 = MIL::IRTensorValue::GetDataView<unsigned char>(v69);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::UInt4>(v200, v202, v197, v199, &v523);
            MIL::PackSubByteVec((uint64_t *)&v523, &v522);
            if (v522.__r_.__value_.__l.__size_ == v522.__r_.__value_.__r.__words[0])
              v204 = 0;
            else
              v204 = v522.__r_.__value_.__r.__words[0];
            MIL::Util::CastToBitSpan<MIL::UInt4 const,unsigned char,true>(v204, v522.__r_.__value_.__l.__size_ - v522.__r_.__value_.__r.__words[0], v523.__r_.__value_.__l.__size_ - v523.__r_.__value_.__r.__words[0]);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<unsigned char,MIL::UInt4>(v205, v206, v203, (uint64_t)&v509, v76, &v521);
            MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<unsigned char>((uint64_t *)&v521, v508, (unint64_t *)&v505);
            goto LABEL_149;
          case 21:
            v217 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v61);
            v219 = v218;
            v220 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v65);
            v222 = v221;
            v223 = MIL::IRTensorValue::GetDataView<unsigned char>(v69);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::UInt1>(v220, v222, v217, v219, &v523);
            MIL::PackSubByteVec((uint64_t *)&v523, &v522);
            if (v522.__r_.__value_.__l.__size_ == v522.__r_.__value_.__r.__words[0])
              v224 = 0;
            else
              v224 = v522.__r_.__value_.__r.__words[0];
            MIL::Util::CastToBitSpan<MIL::UInt1 const,unsigned char,true>(v224, v522.__r_.__value_.__l.__size_ - v522.__r_.__value_.__r.__words[0], v523.__r_.__value_.__l.__size_ - v523.__r_.__value_.__r.__words[0]);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<unsigned char,MIL::UInt1>(v225, v226, v223, (uint64_t)&v509, v76, &v521);
            MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<unsigned char>((uint64_t *)&v521, v508, (unint64_t *)&v505);
            goto LABEL_149;
          case 22:
            v167 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v61);
            v169 = v168;
            v170 = MIL::IRTensorValue::GetDataView<MIL::UInt3>(v65);
            v172 = v171;
            v173 = MIL::IRTensorValue::GetDataView<unsigned char>(v69);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::UInt3>(v170, v172, v167, v169, &v523);
            MIL::PackSubByteVec((unsigned __int8 **)&v523, &v522);
            if (v522.__r_.__value_.__l.__size_ == v522.__r_.__value_.__r.__words[0])
              v174 = 0;
            else
              v174 = v522.__r_.__value_.__r.__words[0];
            MIL::Util::CastToBitSpan<MIL::UInt3 const,unsigned char,true>(v174, v522.__r_.__value_.__l.__size_ - v522.__r_.__value_.__r.__words[0], v523.__r_.__value_.__l.__size_ - v523.__r_.__value_.__r.__words[0]);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<unsigned char,MIL::UInt3>(v175, v176, v173, (uint64_t)&v509, v76, &v521);
            MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<unsigned char>((uint64_t *)&v521, v508, (unint64_t *)&v505);
            goto LABEL_149;
          case 23:
            v187 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v61);
            v189 = v188;
            v190 = MIL::IRTensorValue::GetDataView<MIL::UInt6>(v65);
            v192 = v191;
            v193 = MIL::IRTensorValue::GetDataView<unsigned char>(v69);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::UInt6>(v190, v192, v187, v189, &v523);
            MIL::PackSubByteVec((unsigned __int8 **)&v523, &v522);
            if (v522.__r_.__value_.__l.__size_ == v522.__r_.__value_.__r.__words[0])
              v194 = 0;
            else
              v194 = v522.__r_.__value_.__r.__words[0];
            MIL::Util::CastToBitSpan<MIL::UInt6 const,unsigned char,true>(v194, v522.__r_.__value_.__l.__size_ - v522.__r_.__value_.__r.__words[0], v523.__r_.__value_.__l.__size_ - v523.__r_.__value_.__r.__words[0]);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseLutToDense<unsigned char,MIL::UInt6>(v195, v196, v193, (uint64_t)&v509, v76, &v521);
            MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<unsigned char>((uint64_t *)&v521, v508, (unint64_t *)&v505);
LABEL_149:
            if (v521.__r_.__value_.__r.__words[0])
            {
              v521.__r_.__value_.__l.__size_ = v521.__r_.__value_.__r.__words[0];
              operator delete(v521.__r_.__value_.__l.__data_);
            }
LABEL_151:
            if (v522.__r_.__value_.__r.__words[0])
            {
              v522.__r_.__value_.__l.__size_ = v522.__r_.__value_.__r.__words[0];
              operator delete(v522.__r_.__value_.__l.__data_);
            }
            if (v523.__r_.__value_.__r.__words[0])
            {
              v523.__r_.__value_.__l.__size_ = v523.__r_.__value_.__r.__words[0];
              operator delete(v523.__r_.__value_.__l.__data_);
            }
            if (__p)
            {
              v515 = __p;
              operator delete(__p);
            }
            if (v512)
            {
              v513 = v512;
              operator delete(v512);
            }
            if (v510)
            {
              v511 = v510;
              operator delete(v510);
            }
            if (v509.__r_.__value_.__r.__words[0])
            {
              v509.__r_.__value_.__l.__size_ = v509.__r_.__value_.__r.__words[0];
              operator delete(v509.__r_.__value_.__l.__data_);
            }
            if (v517)
            {
              v518 = v517;
              operator delete(v517);
            }
            if (v519)
            {
              v520 = v519;
              operator delete(v519);
            }
            MIL::IRTensorValueType::MakeUInt8Value(v59, (uint64_t)&v505, v507);
            v227 = v507[0];
            *a3 = v507[0];
            if (v227)
            {
              v228 = (_QWORD *)operator new();
              v229 = v507[0];
              *v228 = &unk_1EA992A68;
              v228[1] = 0;
              v228[2] = 0;
              v228[3] = v229;
            }
            else
            {
              v228 = 0;
            }
            a3[1] = v228;
            v507[0] = 0;
            if (v505)
            {
              v506 = v505;
              operator delete(v505);
            }
            if (v68)
            {
              v230 = (unint64_t *)&v68->__shared_owners_;
              do
                v231 = __ldaxr(v230);
              while (__stlxr(v231 - 1, v230));
              if (!v231)
              {
                ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                std::__shared_weak_count::__release_weak(v68);
              }
            }
            if (v503)
            {
              v232 = (unint64_t *)&v503->__shared_owners_;
              do
                v233 = __ldaxr(v232);
              while (__stlxr(v233 - 1, v232));
              if (!v233)
              {
                ((void (*)(std::__shared_weak_count *))v503->__on_zero_shared)(v503);
                std::__shared_weak_count::__release_weak(v503);
              }
            }
            v234 = v504;
            if (!v504)
              goto LABEL_411;
            v235 = (unint64_t *)&v504->__shared_owners_;
            do
              v236 = __ldaxr(v235);
            while (__stlxr(v236 - 1, v235));
            break;
          default:
            v470 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            MIL::IRDataTypeToString(v79, &v521);
            v471 = std::string::insert(&v521, 0, "Constexpr-BlockwiseLutToSparse: Unsupported dtype ");
            v472 = *(_OWORD *)&v471->__r_.__value_.__l.__data_;
            v522.__r_.__value_.__r.__words[2] = v471->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v522.__r_.__value_.__l.__data_ = v472;
            v471->__r_.__value_.__l.__size_ = 0;
            v471->__r_.__value_.__r.__words[2] = 0;
            v471->__r_.__value_.__r.__words[0] = 0;
            v473 = std::string::append(&v522, " for indices");
            v474 = *(_OWORD *)&v473->__r_.__value_.__l.__data_;
            v523.__r_.__value_.__r.__words[2] = v473->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v523.__r_.__value_.__l.__data_ = v474;
            v473->__r_.__value_.__l.__size_ = 0;
            v473->__r_.__value_.__r.__words[2] = 0;
            v473->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v470, &v523);
            __cxa_throw(v470, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        return;
      default:
        v465 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        MIL::IRDataTypeToString(v26, &v522);
        v466 = std::string::insert(&v522, 0, "Constexpr-BlockwiseLutToSparse: Unsupported dtype ");
        v467 = *(_OWORD *)&v466->__r_.__value_.__l.__data_;
        v523.__r_.__value_.__r.__words[2] = v466->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v523.__r_.__value_.__l.__data_ = v467;
        v466->__r_.__value_.__l.__size_ = 0;
        v466->__r_.__value_.__r.__words[2] = 0;
        v466->__r_.__value_.__r.__words[0] = 0;
        v468 = std::string::append(&v523, " for nonzero data output");
        v469 = *(_OWORD *)&v468->__r_.__value_.__l.__data_;
        v509.__r_.__value_.__r.__words[2] = v468->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v509.__r_.__value_.__l.__data_ = v469;
        v468->__r_.__value_.__l.__size_ = 0;
        v468->__r_.__value_.__r.__words[2] = 0;
        v468->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v465, &v509);
        __cxa_throw(v465, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (!v236)
    {
      ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
      std::__shared_weak_count::__release_weak(v234);
    }
  }
  else
  {
    v54 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 88))(*(_QWORD *)this);
    if (v54 != 21)
    {
      v460 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      MIL::IRDataTypeToString(v54, &v522);
      v461 = std::string::insert(&v522, 0, "Constexpr-BlockwiseLutToSparse: Unsupported dtype ");
      v462 = *(_OWORD *)&v461->__r_.__value_.__l.__data_;
      v523.__r_.__value_.__r.__words[2] = v461->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v523.__r_.__value_.__l.__data_ = v462;
      v461->__r_.__value_.__l.__size_ = 0;
      v461->__r_.__value_.__r.__words[2] = 0;
      v461->__r_.__value_.__r.__words[0] = 0;
      v463 = std::string::append(&v523, " for mask output");
      v464 = *(_OWORD *)&v463->__r_.__value_.__l.__data_;
      v509.__r_.__value_.__r.__words[2] = v463->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v509.__r_.__value_.__l.__data_ = v464;
      v463->__r_.__value_.__l.__size_ = 0;
      v463->__r_.__value_.__r.__words[2] = 0;
      v463->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v460, &v509);
      __cxa_throw(v460, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v55 = *(_QWORD *)this;
    MIL::PackSubByteVec((uint64_t *)v508, &v509);
    MIL::IRTensorValueType::MakeUInt1Value(v55, (uint64_t)&v509, &v523);
    v56 = v523.__r_.__value_.__r.__words[0];
    *a3 = v523.__r_.__value_.__r.__words[0];
    if (v56)
    {
      v57 = (_QWORD *)operator new();
      v58 = v523.__r_.__value_.__r.__words[0];
      *v57 = &unk_1EA992A68;
      v57[1] = 0;
      v57[2] = 0;
      v57[3] = v58;
    }
    else
    {
      v57 = 0;
    }
    a3[1] = v57;
    v523.__r_.__value_.__r.__words[0] = 0;
    if (v509.__r_.__value_.__r.__words[0])
    {
      v509.__r_.__value_.__l.__size_ = v509.__r_.__value_.__r.__words[0];
      operator delete(v509.__r_.__value_.__l.__data_);
    }
  }
LABEL_411:
  if (v508[0])
  {
    v508[1] = v508[0];
    operator delete(v508[0]);
  }
}

void sub_1E0964D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,void *__p,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  void *v54;
  int v55;
  uint64_t v56;
  void *v58;
  void *v59;

  if (*(char *)(v56 - 105) < 0)
    operator delete(*(void **)(v56 - 128));
  if (*(char *)(v56 - 137) < 0)
    operator delete(*(void **)(v56 - 160));
  if (*(char *)(v56 - 161) < 0)
  {
    operator delete(*(void **)(v56 - 184));
    if ((v55 & 1) == 0)
    {
LABEL_10:
      MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter::~BlockwiseLutToDenseIndexConverter((MIL::Operators::Common::Shared::ConstExprs::BlockwiseLutToDenseIndexConverter *)&a49);
      v58 = *(void **)(v56 - 232);
      if (v58)
      {
        *(_QWORD *)(v56 - 224) = v58;
        operator delete(v58);
      }
      v59 = *(void **)(v56 - 208);
      if (v59)
      {
        *(_QWORD *)(v56 - 200) = v59;
        operator delete(v59);
      }
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
      if (__p)
      {
        a47 = (uint64_t)__p;
        operator delete(__p);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v55)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v54);
  goto LABEL_10;
}

void MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse::~BlockwiseLutToSparse(MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *((_QWORD *)this + 1);
  v2 = (_QWORD *)((char *)this + 8);
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse::Impl>::operator()[abi:ne180100]((uint64_t)v2, v3);
  MIL::AbstractConstExpr::~AbstractConstExpr(this);
}

{
  MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse::~BlockwiseLutToSparse(this);
  JUMPOUT(0x1E0C023A0);
}

_QWORD *MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse::BlockwiseLutToSparse(_QWORD *a1, uint64_t a2, uint64_t a3, __int128 *a4, __int128 *a5, __int128 *a6, unsigned int a7)
{
  _QWORD *v11;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;

  v14 = a3;
  v15 = a2;
  v13 = a7;
  v11 = MIL::AbstractConstExpr::AbstractConstExpr(a1);
  *v11 = &off_1EA9A1C28;
  std::make_unique[abi:ne180100]<MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse::Impl,MIL::IRTensorValueType const*&,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,int &>(&v15, &v14, a4, a5, a6, &v13, v11 + 1);
  return a1;
}

void sub_1E0965808(_Unwind_Exception *a1)
{
  MIL::AbstractConstExpr *v1;

  MIL::AbstractConstExpr::~AbstractConstExpr(v1);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse::Impl,MIL::IRTensorValueType const*&,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,int &>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, __int128 *a5@<X4>, unsigned int *a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  v14 = operator new();
  v15 = *a1;
  v16 = *a2;
  v17 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v28 = *a4;
  v29 = v17;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  v27 = *a5;
  *(_QWORD *)a5 = 0;
  *((_QWORD *)a5 + 1) = 0;
  MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse::Impl::Impl(v14, v15, v16, (uint64_t)&v29, (uint64_t)&v28, (uint64_t)&v27, *a6 | 0x100000000);
  *a7 = v14;
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
  if (*((_QWORD *)&v28 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
  if (*((_QWORD *)&v29 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_1E0965990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  uint64_t v13;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  MEMORY[0x1E0C023A0](v13, 0x1060C40DB7734AFLL);
  _Unwind_Resume(a1);
}

_QWORD *MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse::BlockwiseLutToSparse(_QWORD *a1, uint64_t a2, uint64_t a3, __int128 *a4, __int128 *a5, __int128 *a6)
{
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;

  v12 = a3;
  v13 = a2;
  v10 = MIL::AbstractConstExpr::AbstractConstExpr(a1);
  *v10 = &off_1EA9A1C28;
  std::make_unique[abi:ne180100]<MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse::Impl,MIL::IRTensorValueType const*&,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,std::nullopt_t const&>(&v13, &v12, a4, a5, a6, v10 + 1);
  return a1;
}

void sub_1E0965A44(_Unwind_Exception *a1)
{
  MIL::AbstractConstExpr *v1;

  MIL::AbstractConstExpr::~AbstractConstExpr(v1);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse::Impl,MIL::IRTensorValueType const*&,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,std::nullopt_t const&>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, __int128 *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v12 = operator new();
  v13 = *a1;
  v14 = *a2;
  v15 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v26 = *a4;
  v27 = v15;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  v25 = *a5;
  *(_QWORD *)a5 = 0;
  *((_QWORD *)a5 + 1) = 0;
  MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse::Impl::Impl(v12, v13, v14, (uint64_t)&v27, (uint64_t)&v26, (uint64_t)&v25, 0);
  *a6 = v12;
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
  if (*((_QWORD *)&v25 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
  if (*((_QWORD *)&v26 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_1E0965BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  uint64_t v13;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  MEMORY[0x1E0C023A0](v13, 0x1060C40DB7734AFLL);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse::ValidateArgsAndTypeConstraints(MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse::Impl **this)
{
  MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse::Impl::ValidateArgsAndTypeConstraints(this[1]);
}

void MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse::ComputeOutput(MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse *this)
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Cannot compute to get a single output since BlockwiseLutToSparse has two outputs.");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_1E0965C48(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse::ComputeOutput(MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse::Impl **this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse::Impl::ComputeOutput(this[1], a2, a3);
}

_QWORD *std::vector<unsigned long>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long long>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1E0965CC8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<unsigned char>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v8;
  unint64_t v9;
  int Int;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  char *v19;
  char *v20;
  _BYTE *v21;
  _BYTE *v22;
  char v23;
  std::runtime_error *exception;

  v5 = *a1;
  v4 = a1[1];
  if (v4 - *a1 != a2[1] - *a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "It should be guaranteed that the sizes of the input data and mask are the same");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (v4 != v5)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      Int = MIL::UInt1::GetInt((MIL::UInt1 *)(*a2 + v9));
      v11 = *a1;
      if (Int)
      {
        v12 = a3[2];
        if ((unint64_t)v8 >= v12)
        {
          v14 = *a3;
          v15 = &v8[-*a3];
          v16 = (unint64_t)(v15 + 1);
          if ((uint64_t)(v15 + 1) < 0)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v17 = v12 - v14;
          if (2 * v17 > v16)
            v16 = 2 * v17;
          if (v17 >= 0x3FFFFFFFFFFFFFFFLL)
            v18 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v18 = v16;
          if (v18)
            v19 = (char *)operator new(v18);
          else
            v19 = 0;
          v20 = &v15[(_QWORD)v19];
          v21 = &v15[(_QWORD)v19];
          *v21 = *(_BYTE *)(v11 + v9);
          v13 = v21 + 1;
          if (v8 != (_BYTE *)v14)
          {
            v22 = &v8[~v14];
            do
            {
              v23 = *--v8;
              (v22--)[(_QWORD)v19] = v23;
            }
            while (v8 != (_BYTE *)v14);
            v8 = (_BYTE *)*a3;
            v20 = v19;
          }
          *a3 = (unint64_t)v20;
          a3[1] = (unint64_t)v13;
          a3[2] = (unint64_t)&v19[v18];
          if (v8)
            operator delete(v8);
        }
        else
        {
          *v8 = *(_BYTE *)(v11 + v9);
          v13 = v8 + 1;
        }
        a3[1] = (unint64_t)v13;
        v11 = *a1;
        v8 = v13;
      }
      ++v9;
    }
    while (v9 < a1[1] - v11);
  }
}

void sub_1E0965E7C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::UInt6>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, size_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  char v9;
  _QWORD v10[2];
  _QWORD v11[2];

  v11[0] = a1;
  v11[1] = a2;
  v10[0] = a3;
  v10[1] = a4;
  result = (uint64_t)std::vector<MIL::UInt6>::vector(a5, a4);
  if (a5[1] != *a5)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = MIL::Util::Span<MIL::UInt1 const,18446744073709551615ul>::ValueAt(v10, v8);
      if (MIL::UInt1::GetInt((MIL::UInt1 *)&v9))
      {
        result = MIL::Util::Span<MIL::UInt6 const,18446744073709551615ul>::ValueAt(v11, v7++);
        *(_BYTE *)(*a5 + v8) = result;
      }
      else
      {
        result = MIL::UInt6::UInt6((MIL::UInt6 *)&v9, 0);
        *(_BYTE *)(*a5 + v8) = v9;
      }
      ++v8;
    }
    while (v8 < a5[1] - *a5);
  }
  return result;
}

void sub_1E0965F64(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Util::CastToBitSpan<MIL::UInt6 const,unsigned char,true>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::logic_error *exception;

  if (a2 != vcvtpd_u64_f64((double)(unint64_t)(6 * a3) * 0.125))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "BitSpanCast to sub-byte type span has invalid number of elements. Sub-byte span with NumElements requires exactly Span<uint8_t>.Size() bytes.");
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
}

void sub_1E0965FFC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Util::CastToBitSpan<MIL::UInt4 const,unsigned char,true>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::logic_error *exception;

  if (a2 != vcvtpd_u64_f64((double)(unint64_t)(4 * a3) * 0.125))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "BitSpanCast to sub-byte type span has invalid number of elements. Sub-byte span with NumElements requires exactly Span<uint8_t>.Size() bytes.");
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
}

void sub_1E0966080(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::UInt3>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, size_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  char v9;
  _QWORD v10[2];
  _QWORD v11[2];

  v11[0] = a1;
  v11[1] = a2;
  v10[0] = a3;
  v10[1] = a4;
  result = (uint64_t)std::vector<MIL::UInt3>::vector(a5, a4);
  if (a5[1] != *a5)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = MIL::Util::Span<MIL::UInt1 const,18446744073709551615ul>::ValueAt(v10, v8);
      if (MIL::UInt1::GetInt((MIL::UInt1 *)&v9))
      {
        result = MIL::Util::Span<MIL::UInt3 const,18446744073709551615ul>::ValueAt(v11, v7++);
        *(_BYTE *)(*a5 + v8) = result;
      }
      else
      {
        result = MIL::UInt3::UInt3((MIL::UInt3 *)&v9, 0);
        *(_BYTE *)(*a5 + v8) = v9;
      }
      ++v8;
    }
    while (v8 < a5[1] - *a5);
  }
  return result;
}

void sub_1E096614C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Util::CastToBitSpan<MIL::UInt3 const,unsigned char,true>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::logic_error *exception;

  if (a2 != vcvtpd_u64_f64((double)(unint64_t)(3 * a3) * 0.125))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "BitSpanCast to sub-byte type span has invalid number of elements. Sub-byte span with NumElements requires exactly Span<uint8_t>.Size() bytes.");
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
}

void sub_1E09661E0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::UInt2>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, size_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  char v9;
  _QWORD v10[2];
  _QWORD v11[2];

  v11[0] = a1;
  v11[1] = a2;
  v10[0] = a3;
  v10[1] = a4;
  result = (uint64_t)std::vector<MIL::UInt2>::vector(a5, a4);
  if (a5[1] != *a5)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = MIL::Util::Span<MIL::UInt1 const,18446744073709551615ul>::ValueAt(v10, v8);
      if (MIL::UInt1::GetInt((MIL::UInt1 *)&v9))
      {
        result = MIL::Util::Span<MIL::UInt2 const,18446744073709551615ul>::ValueAt(v11, v7++);
        *(_BYTE *)(*a5 + v8) = result;
      }
      else
      {
        result = MIL::UInt2::UInt2((MIL::UInt2 *)&v9, 0);
        *(_BYTE *)(*a5 + v8) = v9;
      }
      ++v8;
    }
    while (v8 < a5[1] - *a5);
  }
  return result;
}

void sub_1E09662AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Util::CastToBitSpan<MIL::UInt2 const,unsigned char,true>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::logic_error *exception;

  if (a2 != vcvtpd_u64_f64((double)(unint64_t)(2 * a3) * 0.125))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "BitSpanCast to sub-byte type span has invalid number of elements. Sub-byte span with NumElements requires exactly Span<uint8_t>.Size() bytes.");
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
}

void sub_1E0966340(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::UInt1>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, size_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  char v9;
  _QWORD v10[2];
  _QWORD v11[2];

  v11[0] = a1;
  v11[1] = a2;
  v10[0] = a3;
  v10[1] = a4;
  result = (uint64_t)std::vector<MIL::UInt1>::vector(a5, a4);
  if (a5[1] != *a5)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = MIL::Util::Span<MIL::UInt1 const,18446744073709551615ul>::ValueAt(v10, v8);
      if (MIL::UInt1::GetInt((MIL::UInt1 *)&v9))
      {
        result = MIL::Util::Span<MIL::UInt1 const,18446744073709551615ul>::ValueAt(v11, v7++);
        *(_BYTE *)(*a5 + v8) = result;
      }
      else
      {
        result = MIL::UInt1::UInt1((MIL::UInt1 *)&v9, 0);
        *(_BYTE *)(*a5 + v8) = v9;
      }
      ++v8;
    }
    while (v8 < a5[1] - *a5);
  }
  return result;
}

void sub_1E096640C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Util::CastToBitSpan<MIL::UInt1 const,unsigned char,true>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  std::logic_error *exception;

  if (a2 != vcvtpd_u64_f64((double)a3 * 0.125))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "BitSpanCast to sub-byte type span has invalid number of elements. Sub-byte span with NumElements requires exactly Span<uint8_t>.Size() bytes.");
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
}

void sub_1E096649C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<signed char>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v8;
  unint64_t v9;
  int Int;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  char *v19;
  char *v20;
  _BYTE *v21;
  _BYTE *v22;
  char v23;
  std::runtime_error *exception;

  v5 = *a1;
  v4 = a1[1];
  if (v4 - *a1 != a2[1] - *a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "It should be guaranteed that the sizes of the input data and mask are the same");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (v4 != v5)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      Int = MIL::UInt1::GetInt((MIL::UInt1 *)(*a2 + v9));
      v11 = *a1;
      if (Int)
      {
        v12 = a3[2];
        if ((unint64_t)v8 >= v12)
        {
          v14 = *a3;
          v15 = &v8[-*a3];
          v16 = (unint64_t)(v15 + 1);
          if ((uint64_t)(v15 + 1) < 0)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v17 = v12 - v14;
          if (2 * v17 > v16)
            v16 = 2 * v17;
          if (v17 >= 0x3FFFFFFFFFFFFFFFLL)
            v18 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v18 = v16;
          if (v18)
            v19 = (char *)operator new(v18);
          else
            v19 = 0;
          v20 = &v15[(_QWORD)v19];
          v21 = &v15[(_QWORD)v19];
          *v21 = *(_BYTE *)(v11 + v9);
          v13 = v21 + 1;
          if (v8 != (_BYTE *)v14)
          {
            v22 = &v8[~v14];
            do
            {
              v23 = *--v8;
              (v22--)[(_QWORD)v19] = v23;
            }
            while (v8 != (_BYTE *)v14);
            v8 = (_BYTE *)*a3;
            v20 = v19;
          }
          *a3 = (unint64_t)v20;
          a3[1] = (unint64_t)v13;
          a3[2] = (unint64_t)&v19[v18];
          if (v8)
            operator delete(v8);
        }
        else
        {
          *v8 = *(_BYTE *)(v11 + v9);
          v13 = v8 + 1;
        }
        a3[1] = (unint64_t)v13;
        v11 = *a1;
        v8 = v13;
      }
      ++v9;
    }
    while (v9 < a1[1] - v11);
  }
}

void sub_1E0966648(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<MIL::Bf16>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, char **a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v8;
  int Int;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int16 v22;
  std::runtime_error *exception;

  v5 = *a1;
  v4 = a1[1];
  if (a2[1] - *a2 != (v4 - *a1) >> 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "It should be guaranteed that the sizes of the input data and mask are the same");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (v4 != v5)
  {
    v8 = 0;
    do
    {
      Int = MIL::UInt1::GetInt((MIL::UInt1 *)(*a2 + v8));
      v10 = *a1;
      if (Int)
      {
        v12 = a3[1];
        v11 = (unint64_t)a3[2];
        if ((unint64_t)v12 >= v11)
        {
          v14 = *a3;
          v15 = v12 - *a3;
          if (v15 <= -3)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v16 = v15 >> 1;
          v17 = v11 - (_QWORD)v14;
          if (v17 <= (v15 >> 1) + 1)
            v18 = v16 + 1;
          else
            v18 = v17;
          if (v17 >= 0x7FFFFFFFFFFFFFFELL)
            v19 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v19 = v18;
          if (v19)
          {
            v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>((uint64_t)(a3 + 2), v19);
            v14 = *a3;
            v12 = a3[1];
          }
          else
          {
            v20 = 0;
          }
          v21 = &v20[2 * v16];
          *(_WORD *)v21 = *(_WORD *)(v10 + 2 * v8);
          v13 = v21 + 2;
          while (v12 != v14)
          {
            v22 = *((_WORD *)v12 - 1);
            v12 -= 2;
            *((_WORD *)v21 - 1) = v22;
            v21 -= 2;
          }
          *a3 = v21;
          a3[1] = v13;
          a3[2] = &v20[2 * v19];
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_WORD *)v12 = *(_WORD *)(v10 + 2 * v8);
          v13 = v12 + 2;
        }
        a3[1] = v13;
        v10 = *a1;
      }
      ++v8;
    }
    while (v8 < (a1[1] - v10) >> 1);
  }
}

void sub_1E09667FC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<MIL::Fp16>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, char **a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v8;
  int Int;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int16 v22;
  std::runtime_error *exception;

  v5 = *a1;
  v4 = a1[1];
  if (a2[1] - *a2 != (v4 - *a1) >> 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "It should be guaranteed that the sizes of the input data and mask are the same");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (v4 != v5)
  {
    v8 = 0;
    do
    {
      Int = MIL::UInt1::GetInt((MIL::UInt1 *)(*a2 + v8));
      v10 = *a1;
      if (Int)
      {
        v12 = a3[1];
        v11 = (unint64_t)a3[2];
        if ((unint64_t)v12 >= v11)
        {
          v14 = *a3;
          v15 = v12 - *a3;
          if (v15 <= -3)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v16 = v15 >> 1;
          v17 = v11 - (_QWORD)v14;
          if (v17 <= (v15 >> 1) + 1)
            v18 = v16 + 1;
          else
            v18 = v17;
          if (v17 >= 0x7FFFFFFFFFFFFFFELL)
            v19 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v19 = v18;
          if (v19)
          {
            v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>((uint64_t)(a3 + 2), v19);
            v14 = *a3;
            v12 = a3[1];
          }
          else
          {
            v20 = 0;
          }
          v21 = &v20[2 * v16];
          *(_WORD *)v21 = *(_WORD *)(v10 + 2 * v8);
          v13 = v21 + 2;
          while (v12 != v14)
          {
            v22 = *((_WORD *)v12 - 1);
            v12 -= 2;
            *((_WORD *)v21 - 1) = v22;
            v21 -= 2;
          }
          *a3 = v21;
          a3[1] = v13;
          a3[2] = &v20[2 * v19];
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_WORD *)v12 = *(_WORD *)(v10 + 2 * v8);
          v13 = v12 + 2;
        }
        a3[1] = v13;
        v10 = *a1;
      }
      ++v8;
    }
    while (v8 < (a1[1] - v10) >> 1);
  }
}

void sub_1E09669B0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::Shared::ConstExprs::ExtractMaskedData<float>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, char **a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v8;
  int Int;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  int v21;
  std::runtime_error *exception;

  v5 = *a1;
  v4 = a1[1];
  if (a2[1] - *a2 != (v4 - *a1) >> 2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "It should be guaranteed that the sizes of the input data and mask are the same");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (v4 != v5)
  {
    v8 = 0;
    do
    {
      Int = MIL::UInt1::GetInt((MIL::UInt1 *)(*a2 + v8));
      v10 = *a1;
      if (Int)
      {
        v12 = a3[1];
        v11 = (unint64_t)a3[2];
        if ((unint64_t)v12 >= v11)
        {
          v14 = *a3;
          v15 = (v12 - *a3) >> 2;
          v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 62)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v17 = v11 - (_QWORD)v14;
          if (v17 >> 1 > v16)
            v16 = v17 >> 1;
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
            v18 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v18 = v16;
          if (v18)
          {
            v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a3 + 2), v18);
            v14 = *a3;
            v12 = a3[1];
          }
          else
          {
            v19 = 0;
          }
          v20 = &v19[4 * v15];
          *(_DWORD *)v20 = *(_DWORD *)(v10 + 4 * v8);
          v13 = v20 + 4;
          while (v12 != v14)
          {
            v21 = *((_DWORD *)v12 - 1);
            v12 -= 4;
            *((_DWORD *)v20 - 1) = v21;
            v20 -= 4;
          }
          *a3 = v20;
          a3[1] = v13;
          a3[2] = &v19[4 * v18];
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_DWORD *)v12 = *(_DWORD *)(v10 + 4 * v8);
          v13 = v12 + 4;
        }
        a3[1] = v13;
        v10 = *a1;
      }
      ++v8;
    }
    while (v8 < (a1[1] - v10) >> 2);
  }
}

void sub_1E0966B68(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::default_delete<MIL::Operators::Common::ios18::ConstExprs::BlockwiseLutToSparse::Impl>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](a2 + 48);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](a2 + 32);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](a2 + 16);
    JUMPOUT(0x1E0C023A0);
  }
}

uint64_t MIL::Operators::Common::ios18::ConstExprs::BlockwiseShiftScale::Impl::Impl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)a4;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)a5;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  MIL::Operators::Common::ios18::ConstExprs::BlockwiseShiftScale::Impl::ValidateArgsAndTypeConstraints((MIL::Operators::Common::ios18::ConstExprs::BlockwiseShiftScale::Impl *)a1);
  return a1;
}

void sub_1E0966C48(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::ConstExprs::BlockwiseShiftScale::Impl::ValidateArgsAndTypeConstraints(MIL::Operators::Common::ios18::ConstExprs::BlockwiseShiftScale::Impl *this)
{
  uint64_t v2;
  uint64_t v3;
  MIL::IRTensorValueType *v4;
  MIL::IRTensorValueType *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  MIL::IRDimension **v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type size;
  std::string *v23;
  __int128 v24;
  std::runtime_error *exception;
  void *__p;
  char v27;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;
  void *v32;
  void *v33;
  uint64_t v34;
  MIL::IRDimension **v35;
  MIL::IRDimension **v36;
  uint64_t v37;

  std::string::basic_string[abi:ne180100]<0>(&__p, "Constexpr-BlockwiseShiftScale");
  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
  std::string::basic_string[abi:ne180100]<0>(&v35, "data");
  MIL::Operators::Common::Shared::ConstExprs::AssertIsShapeConstant(v2, (uint64_t)&v35);
  if (SHIBYTE(v37) < 0)
    operator delete(v35);
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3));
  std::string::basic_string[abi:ne180100]<0>(&v35, "scale");
  MIL::Operators::Common::Shared::ConstExprs::AssertIsShapeConstant(v3, (uint64_t)&v35);
  if (SHIBYTE(v37) < 0)
    operator delete(v35);
  v4 = (MIL::IRTensorValueType *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
  v5 = (MIL::IRTensorValueType *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3));
  std::string::basic_string[abi:ne180100]<0>(&v35, "data");
  std::string::basic_string[abi:ne180100]<0>(&v32, "scale");
  MIL::Operators::Common::Shared::ConstExprs::AssertSameRank(v4, v5, (uint64_t)&v35, (uint64_t)&v32);
  if (SHIBYTE(v34) < 0)
    operator delete(v32);
  if (SHIBYTE(v37) < 0)
    operator delete(v35);
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 96))(v6);
  v35 = 0;
  v36 = 0;
  v37 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v35, *(const void **)v7, *(_QWORD *)(v7 + 8), (uint64_t)(*(_QWORD *)(v7 + 8) - *(_QWORD *)v7) >> 3);
  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3));
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 96))(v8);
  v32 = 0;
  v33 = 0;
  v34 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v32, *(const void **)v9, *(_QWORD *)(v9 + 8), (uint64_t)(*(_QWORD *)(v9 + 8) - *(_QWORD *)v9) >> 3);
  v10 = v36;
  if (v36 != v35)
  {
    v11 = 0;
    v10 = v35;
    do
    {
      v12 = MIL::IRDimension::AsConstant(v10[v11]);
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 48))(v12);
      v14 = MIL::IRDimension::AsConstant(*((MIL::IRDimension **)v32 + v11));
      if (v13 % (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 48))(v14))
      {
        std::operator+<char>();
        v19 = std::string::append(&v29, ", number of scales along each dimension should be a factor of corresponding dimension size of data. Assertion error along dimension ");
        v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        v30.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v28, v11);
        if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v21 = &v28;
        else
          v21 = (std::string *)v28.__r_.__value_.__r.__words[0];
        if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
        else
          size = v28.__r_.__value_.__l.__size_;
        v23 = std::string::append(&v30, (const std::string::value_type *)v21, size);
        v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v31.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v28.__r_.__value_.__l.__data_);
        if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v30.__r_.__value_.__l.__data_);
        if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v29.__r_.__value_.__l.__data_);
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, &v31);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      ++v11;
      v10 = v35;
    }
    while (v11 < v36 - v35);
  }
  if (v32)
  {
    v33 = v32;
    operator delete(v32);
    v10 = v35;
  }
  if (v10)
  {
    v36 = v10;
    operator delete(v10);
  }
  v15 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3));
  MIL::Operators::Common::Shared::ConstExprs::AssertExpectedOutputDType(v15, *(_QWORD *)this);
  v16 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
  MIL::Operators::Common::Shared::ConstExprs::AssertExpectedOutputShape(v16, *(_QWORD *)this);
  if (*((_QWORD *)this + 5))
  {
    v17 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3));
    v18 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
    std::string::basic_string[abi:ne180100]<0>(&v35, "scale");
    std::string::basic_string[abi:ne180100]<0>(&v32, "offset");
    MIL::Operators::Common::Shared::ConstExprs::AssertConstantAndSameShape(v17, v18, (uint64_t)&v35, (uint64_t)&v32);
    if (SHIBYTE(v34) < 0)
      operator delete(v32);
    if (SHIBYTE(v37) < 0)
      operator delete(v35);
  }
  if (v27 < 0)
    operator delete(__p);
}

void sub_1E096705C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;
  void *v42;
  void *v43;

  if (a40 < 0)
    operator delete(__p);
  v42 = *(void **)(v40 - 80);
  if (v42)
  {
    *(_QWORD *)(v40 - 72) = v42;
    operator delete(v42);
  }
  v43 = *(void **)(v40 - 56);
  if (v43)
  {
    *(_QWORD *)(v40 - 48) = v43;
    operator delete(v43);
  }
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios18::ConstExprs::BlockwiseShiftScale::Impl::ComputeOutput(MIL::Operators::Common::ios18::ConstExprs::BlockwiseShiftScale::Impl *this@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t *v12;
  unint64_t *v13;
  unint64_t v14;
  std::string::size_type v15;
  std::string::size_type v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  MIL::Fp16 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t *v38;
  unint64_t *v39;
  unint64_t v40;
  std::string::size_type v41;
  std::string::size_type v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  int v50;
  MIL::Fp16 *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  std::__shared_weak_count *v60;
  unint64_t *p_shared_owners;
  unint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t *v64;
  unint64_t *v65;
  unint64_t v66;
  std::string::size_type v67;
  std::string::size_type v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  int v76;
  MIL::Fp16 *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *size;
  unint64_t *v82;
  unint64_t v83;
  MIL::Fp16 *v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  MIL::Fp16 *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  MIL::Fp16 *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  std::string::size_type v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t *v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t *v105;
  std::string::size_type v106;
  std::string::size_type v107;
  std::string::size_type v108;
  uint64_t v109;
  unint64_t *v110;
  uint64_t Data;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t *v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t *v120;
  std::string::size_type v121;
  std::string::size_type v122;
  std::string::size_type v123;
  uint64_t v124;
  unint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t *v135;
  MIL::Bf16 *v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t *v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t *v150;
  MIL::Bf16 *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t *v160;
  MIL::Bf16 *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t *v170;
  std::string::size_type v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t *v175;
  std::string::size_type v176;
  std::string::size_type v177;
  std::string::size_type v178;
  uint64_t v179;
  unint64_t *v180;
  std::string::size_type v181;
  std::string::size_type v182;
  std::string::size_type v183;
  uint64_t v184;
  unint64_t *v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  MIL::Bf16 *v218;
  unint64_t v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;
  MIL::Bf16 *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  MIL::Bf16 *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  _QWORD *v251;
  uint64_t v252;
  unint64_t *v253;
  unint64_t v254;
  unint64_t *v255;
  unint64_t v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  _QWORD *v265;
  uint64_t v266;
  unint64_t *v267;
  unint64_t v268;
  unint64_t *v269;
  unint64_t v270;
  unint64_t *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  _QWORD *v277;
  uint64_t v278;
  unint64_t *v279;
  unint64_t v280;
  unint64_t *v281;
  unint64_t v282;
  unint64_t *v283;
  std::runtime_error *v284;
  std::string *v285;
  __int128 v286;
  std::string *v287;
  __int128 v288;
  std::runtime_error *v289;
  std::string *v290;
  __int128 v291;
  std::string *v292;
  __int128 v293;
  std::runtime_error *exception;
  std::string *v295;
  __int128 v296;
  std::string *v297;
  __int128 v298;
  std::runtime_error *v299;
  std::string *v300;
  __int128 v301;
  std::string *v302;
  __int128 v303;
  std::runtime_error *v304;
  std::string *v305;
  __int128 v306;
  std::string *v307;
  __int128 v308;
  std::runtime_error *v309;
  std::string *v310;
  __int128 v311;
  std::string *v312;
  __int128 v313;
  std::runtime_error *v314;
  std::string *v315;
  __int128 v316;
  std::string *v317;
  __int128 v318;
  std::__shared_weak_count *v319;
  std::__shared_weak_count *v320;
  std::__shared_weak_count *v321;
  std::__shared_weak_count *v322;
  std::__shared_weak_count *v323;
  std::__shared_weak_count *v324;
  std::__shared_weak_count *v325;
  std::__shared_weak_count *v326;
  std::__shared_weak_count *v327;
  void *__p;
  void *v329;
  uint64_t v330;
  std::string v331;
  std::string v332;
  std::string v333;
  std::string v334;
  void *v335;
  void *v336;
  void *v337;
  void *v338;
  std::string v339;
  std::string v340;

  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 88))(*(_QWORD *)this);
  if (v4 == 4)
  {
    v58 = *(_QWORD *)this;
    v59 = (uint64_t *)*((_QWORD *)this + 1);
    v60 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    v324 = v60;
    if (v60)
    {
      p_shared_owners = (unint64_t *)&v60->__shared_owners_;
      do
        v62 = __ldxr(p_shared_owners);
      while (__stxr(v62 + 1, p_shared_owners));
    }
    v64 = (uint64_t *)*((_QWORD *)this + 3);
    v63 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
    v323 = v63;
    if (v63)
    {
      v65 = (unint64_t *)&v63->__shared_owners_;
      do
        v66 = __ldxr(v65);
      while (__stxr(v66 + 1, v65));
    }
    v68 = *((_QWORD *)this + 5);
    v67 = *((_QWORD *)this + 6);
    v322 = (std::__shared_weak_count *)v67;
    if (v67)
    {
      v69 = (unint64_t *)(v67 + 8);
      do
        v70 = __ldxr(v69);
      while (__stxr(v70 + 1, v69));
    }
    v71 = (*(uint64_t (**)(uint64_t *))(*v59 + 32))(v59);
    v72 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v71 + 96))(v71);
    MIL::Operators::Common::Shared::ConstExprs::ShapeToVector(v72, &v340);
    v73 = (*(uint64_t (**)(uint64_t *))(*v64 + 32))(v64);
    v74 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 96))(v73);
    MIL::Operators::Common::Shared::ConstExprs::ShapeToVector(v74, &v339);
    MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::BlockwiseShiftScaleIndexConverter(&v334, (uint64_t **)&v340, (unint64_t **)&v339);
    v75 = (*(uint64_t (**)(uint64_t *))(*v59 + 32))(v59);
    v76 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v75 + 88))(v75);
    if (v68)
    {
      switch(v76)
      {
        case 4:
          v77 = (MIL::Fp16 *)MIL::IRTensorValue::GetDataView<MIL::Fp16>(v59);
          v79 = v78;
          v80 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(v64);
          v333.__r_.__value_.__r.__words[0] = v68;
          v333.__r_.__value_.__l.__size_ = v67;
          v322 = 0;
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Fp16,MIL::Fp16>(v77, v79, v80, (uint64_t **)&v333, (unint64_t **)&v334, (uint64_t *)&__p);
          size = (std::__shared_weak_count *)v333.__r_.__value_.__l.__size_;
          if (!v333.__r_.__value_.__l.__size_)
            goto LABEL_176;
          v82 = (unint64_t *)(v333.__r_.__value_.__l.__size_ + 8);
          do
            v83 = __ldaxr(v82);
          while (__stlxr(v83 - 1, v82));
          break;
        case 5:
          Data = MIL::IRTensorValue::GetDataView<float>(v59);
          v113 = v112;
          v114 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(v64);
          v333.__r_.__value_.__r.__words[0] = v68;
          v333.__r_.__value_.__l.__size_ = v67;
          v322 = 0;
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Fp16,float>(Data, v113, v114, (uint64_t **)&v333, (unint64_t **)&v334, (uint64_t *)&__p);
          size = (std::__shared_weak_count *)v333.__r_.__value_.__l.__size_;
          if (!v333.__r_.__value_.__l.__size_)
            goto LABEL_176;
          v115 = (unint64_t *)(v333.__r_.__value_.__l.__size_ + 8);
          do
            v83 = __ldaxr(v115);
          while (__stlxr(v83 - 1, v115));
          break;
        case 7:
          v151 = (MIL::Bf16 *)MIL::IRTensorValue::GetDataView<MIL::Bf16>(v59);
          v153 = v152;
          v154 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(v64);
          v333.__r_.__value_.__r.__words[0] = v68;
          v333.__r_.__value_.__l.__size_ = v67;
          v322 = 0;
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Fp16,MIL::Bf16>(v151, v153, v154, (uint64_t **)&v333, (unint64_t **)&v334, (uint64_t *)&__p);
          size = (std::__shared_weak_count *)v333.__r_.__value_.__l.__size_;
          if (!v333.__r_.__value_.__l.__size_)
            goto LABEL_176;
          v155 = (unint64_t *)(v333.__r_.__value_.__l.__size_ + 8);
          do
            v83 = __ldaxr(v155);
          while (__stlxr(v83 - 1, v155));
          break;
        case 9:
          v156 = MIL::IRTensorValue::GetDataView<signed char>(v59);
          v158 = v157;
          v159 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(v64);
          v333.__r_.__value_.__r.__words[0] = v68;
          v333.__r_.__value_.__l.__size_ = v67;
          v322 = 0;
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Fp16,signed char>(v156, v158, v159, (uint64_t **)&v333, (unint64_t **)&v334, (uint64_t *)&__p);
          size = (std::__shared_weak_count *)v333.__r_.__value_.__l.__size_;
          if (!v333.__r_.__value_.__l.__size_)
            goto LABEL_176;
          v160 = (unint64_t *)(v333.__r_.__value_.__l.__size_ + 8);
          do
            v83 = __ldaxr(v160);
          while (__stlxr(v83 - 1, v160));
          break;
        case 13:
          v106 = MIL::IRTensorValue::GetDataView<MIL::Int4>(v59);
          v108 = v107;
          v109 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(v64);
          v333.__r_.__value_.__r.__words[0] = v68;
          v333.__r_.__value_.__l.__size_ = v67;
          v322 = 0;
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Fp16,MIL::Int4>(v106, v108, v109, (uint64_t **)&v333, (unint64_t **)&v334, (uint64_t *)&__p);
          size = (std::__shared_weak_count *)v333.__r_.__value_.__l.__size_;
          if (!v333.__r_.__value_.__l.__size_)
            goto LABEL_176;
          v110 = (unint64_t *)(v333.__r_.__value_.__l.__size_ + 8);
          do
            v83 = __ldaxr(v110);
          while (__stlxr(v83 - 1, v110));
          break;
        case 14:
          v131 = MIL::IRTensorValue::GetDataView<unsigned char>(v59);
          v133 = v132;
          v134 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(v64);
          v333.__r_.__value_.__r.__words[0] = v68;
          v333.__r_.__value_.__l.__size_ = v67;
          v322 = 0;
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Fp16,unsigned char>(v131, v133, v134, (uint64_t **)&v333, (unint64_t **)&v334, (uint64_t *)&__p);
          size = (std::__shared_weak_count *)v333.__r_.__value_.__l.__size_;
          if (!v333.__r_.__value_.__l.__size_)
            goto LABEL_176;
          v135 = (unint64_t *)(v333.__r_.__value_.__l.__size_ + 8);
          do
            v83 = __ldaxr(v135);
          while (__stlxr(v83 - 1, v135));
          break;
        case 20:
          v176 = MIL::IRTensorValue::GetDataView<MIL::UInt4>(v59);
          v178 = v177;
          v179 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(v64);
          v333.__r_.__value_.__r.__words[0] = v68;
          v333.__r_.__value_.__l.__size_ = v67;
          v322 = 0;
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Fp16,MIL::UInt4>(v176, v178, v179, (uint64_t **)&v333, (unint64_t **)&v334, (uint64_t *)&__p);
          size = (std::__shared_weak_count *)v333.__r_.__value_.__l.__size_;
          if (!v333.__r_.__value_.__l.__size_)
            goto LABEL_176;
          v180 = (unint64_t *)(v333.__r_.__value_.__l.__size_ + 8);
          do
            v83 = __ldaxr(v180);
          while (__stlxr(v83 - 1, v180));
          break;
        default:
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          MIL::IRDataTypeToString(v76, &v331);
          v295 = std::string::insert(&v331, 0, "Constexpr-BlockwiseShiftScale: Unsupported dType (");
          v296 = *(_OWORD *)&v295->__r_.__value_.__l.__data_;
          v332.__r_.__value_.__r.__words[2] = v295->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v332.__r_.__value_.__l.__data_ = v296;
          v295->__r_.__value_.__l.__size_ = 0;
          v295->__r_.__value_.__r.__words[2] = 0;
          v295->__r_.__value_.__r.__words[0] = 0;
          v297 = std::string::append(&v332, ") for data.");
          v298 = *(_OWORD *)&v297->__r_.__value_.__l.__data_;
          v333.__r_.__value_.__r.__words[2] = v297->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v333.__r_.__value_.__l.__data_ = v298;
          v297->__r_.__value_.__l.__size_ = 0;
          v297->__r_.__value_.__r.__words[2] = 0;
          v297->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, &v333);
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      if (!v83)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    else
    {
      switch(v76)
      {
        case 4:
          v88 = (MIL::Fp16 *)MIL::IRTensorValue::GetDataView<MIL::Fp16>(v59);
          v90 = v89;
          v91 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(v64);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Fp16,MIL::Fp16>(v88, v90, v91, (unint64_t **)&v334, (uint64_t *)&__p);
          break;
        case 5:
          v198 = MIL::IRTensorValue::GetDataView<float>(v59);
          v200 = v199;
          v201 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(v64);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Fp16,float>(v198, v200, v201, (unint64_t **)&v334, (uint64_t *)&__p);
          break;
        case 7:
          v230 = (MIL::Bf16 *)MIL::IRTensorValue::GetDataView<MIL::Bf16>(v59);
          v232 = v231;
          v233 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(v64);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Fp16,MIL::Bf16>(v230, v232, v233, (unint64_t **)&v334, (uint64_t *)&__p);
          break;
        case 9:
          v234 = MIL::IRTensorValue::GetDataView<signed char>(v59);
          v236 = v235;
          v237 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(v64);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Fp16,signed char>(v234, v236, v237, (unint64_t **)&v334, (uint64_t *)&__p);
          break;
        case 13:
          v194 = MIL::IRTensorValue::GetDataView<MIL::Int4>(v59);
          v196 = v195;
          v197 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(v64);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Fp16,MIL::Int4>(v194, v196, v197, (unint64_t **)&v334, (uint64_t *)&__p);
          break;
        case 14:
          v214 = MIL::IRTensorValue::GetDataView<unsigned char>(v59);
          v216 = v215;
          v217 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(v64);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Fp16,unsigned char>(v214, v216, v217, (unint64_t **)&v334, (uint64_t *)&__p);
          break;
        case 20:
          v260 = MIL::IRTensorValue::GetDataView<MIL::UInt4>(v59);
          v262 = v261;
          v263 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(v64);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Fp16,MIL::UInt4>(v260, v262, v263, (unint64_t **)&v334, (uint64_t *)&__p);
          break;
        default:
          v309 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          MIL::IRDataTypeToString(v76, &v331);
          v310 = std::string::insert(&v331, 0, "Constexpr-BlockwiseShiftScale: Unsupported dType (");
          v311 = *(_OWORD *)&v310->__r_.__value_.__l.__data_;
          v332.__r_.__value_.__r.__words[2] = v310->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v332.__r_.__value_.__l.__data_ = v311;
          v310->__r_.__value_.__l.__size_ = 0;
          v310->__r_.__value_.__r.__words[2] = 0;
          v310->__r_.__value_.__r.__words[0] = 0;
          v312 = std::string::append(&v332, ") for data.");
          v313 = *(_OWORD *)&v312->__r_.__value_.__l.__data_;
          v333.__r_.__value_.__r.__words[2] = v312->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v333.__r_.__value_.__l.__data_ = v313;
          v312->__r_.__value_.__l.__size_ = 0;
          v312->__r_.__value_.__r.__words[2] = 0;
          v312->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v309, &v333);
          __cxa_throw(v309, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
    }
LABEL_176:
    if (v337)
    {
      v338 = v337;
      operator delete(v337);
    }
    if (v335)
    {
      v336 = v335;
      operator delete(v335);
    }
    if (v334.__r_.__value_.__r.__words[0])
    {
      v334.__r_.__value_.__l.__size_ = v334.__r_.__value_.__r.__words[0];
      operator delete(v334.__r_.__value_.__l.__data_);
    }
    if (v339.__r_.__value_.__r.__words[0])
    {
      v339.__r_.__value_.__l.__size_ = v339.__r_.__value_.__r.__words[0];
      operator delete(v339.__r_.__value_.__l.__data_);
    }
    if (v340.__r_.__value_.__r.__words[0])
    {
      v340.__r_.__value_.__l.__size_ = v340.__r_.__value_.__r.__words[0];
      operator delete(v340.__r_.__value_.__l.__data_);
    }
    MIL::IRTensorValueType::MakeFloat16Value(v58, (uint64_t)&__p, &v330);
    v264 = v330;
    *a2 = v330;
    if (v264)
    {
      v265 = (_QWORD *)operator new();
      v266 = v330;
      *v265 = &unk_1EA992A68;
      v265[1] = 0;
      v265[2] = 0;
      v265[3] = v266;
    }
    else
    {
      v265 = 0;
    }
    a2[1] = v265;
    v330 = 0;
    if (__p)
    {
      v329 = __p;
      operator delete(__p);
    }
    if (v322)
    {
      v267 = (unint64_t *)&v322->__shared_owners_;
      do
        v268 = __ldaxr(v267);
      while (__stlxr(v268 - 1, v267));
      if (!v268)
      {
        ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
        std::__shared_weak_count::__release_weak(v322);
      }
    }
    if (v323)
    {
      v269 = (unint64_t *)&v323->__shared_owners_;
      do
        v270 = __ldaxr(v269);
      while (__stlxr(v270 - 1, v269));
      if (!v270)
      {
        ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
        std::__shared_weak_count::__release_weak(v323);
      }
    }
    v257 = v324;
    if (v324)
    {
      v271 = (unint64_t *)&v324->__shared_owners_;
      do
        v259 = __ldaxr(v271);
      while (__stlxr(v259 - 1, v271));
      goto LABEL_234;
    }
  }
  else
  {
    v5 = v4;
    if (v4 == 5)
    {
      v32 = *(_QWORD *)this;
      v33 = (uint64_t *)*((_QWORD *)this + 1);
      v34 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
      v321 = v34;
      if (v34)
      {
        v35 = (unint64_t *)&v34->__shared_owners_;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      v38 = (uint64_t *)*((_QWORD *)this + 3);
      v37 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
      v320 = v37;
      if (v37)
      {
        v39 = (unint64_t *)&v37->__shared_owners_;
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
      v42 = *((_QWORD *)this + 5);
      v41 = *((_QWORD *)this + 6);
      v319 = (std::__shared_weak_count *)v41;
      if (v41)
      {
        v43 = (unint64_t *)(v41 + 8);
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
      }
      v45 = (*(uint64_t (**)(uint64_t *))(*v33 + 32))(v33);
      v46 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 96))(v45);
      MIL::Operators::Common::Shared::ConstExprs::ShapeToVector(v46, &v340);
      v47 = (*(uint64_t (**)(uint64_t *))(*v38 + 32))(v38);
      v48 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 96))(v47);
      MIL::Operators::Common::Shared::ConstExprs::ShapeToVector(v48, &v339);
      MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::BlockwiseShiftScaleIndexConverter(&v334, (uint64_t **)&v340, (unint64_t **)&v339);
      v49 = (*(uint64_t (**)(uint64_t *))(*v33 + 32))(v33);
      v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 88))(v49);
      if (v42)
      {
        switch(v50)
        {
          case 4:
            v51 = (MIL::Fp16 *)MIL::IRTensorValue::GetDataView<MIL::Fp16>(v33);
            v53 = v52;
            v54 = MIL::IRTensorValue::GetDataView<float>(v38);
            v333.__r_.__value_.__r.__words[0] = v42;
            v333.__r_.__value_.__l.__size_ = v41;
            v319 = 0;
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<float,MIL::Fp16>(v51, v53, v54, (uint64_t **)&v333, (unint64_t **)&v334, (uint64_t *)&__p);
            v55 = (std::__shared_weak_count *)v333.__r_.__value_.__l.__size_;
            if (!v333.__r_.__value_.__l.__size_)
              goto LABEL_146;
            v56 = (unint64_t *)(v333.__r_.__value_.__l.__size_ + 8);
            do
              v57 = __ldaxr(v56);
            while (__stlxr(v57 - 1, v56));
            break;
          case 5:
            v101 = MIL::IRTensorValue::GetDataView<float>(v33);
            v103 = v102;
            v104 = MIL::IRTensorValue::GetDataView<float>(v38);
            v333.__r_.__value_.__r.__words[0] = v42;
            v333.__r_.__value_.__l.__size_ = v41;
            v319 = 0;
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<float,float>(v101, v103, v104, (uint64_t **)&v333, (unint64_t **)&v334, (uint64_t *)&__p);
            v55 = (std::__shared_weak_count *)v333.__r_.__value_.__l.__size_;
            if (!v333.__r_.__value_.__l.__size_)
              goto LABEL_146;
            v105 = (unint64_t *)(v333.__r_.__value_.__l.__size_ + 8);
            do
              v57 = __ldaxr(v105);
            while (__stlxr(v57 - 1, v105));
            break;
          case 7:
            v136 = (MIL::Bf16 *)MIL::IRTensorValue::GetDataView<MIL::Bf16>(v33);
            v138 = v137;
            v139 = MIL::IRTensorValue::GetDataView<float>(v38);
            v333.__r_.__value_.__r.__words[0] = v42;
            v333.__r_.__value_.__l.__size_ = v41;
            v319 = 0;
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<float,MIL::Bf16>(v136, v138, v139, (uint64_t **)&v333, (unint64_t **)&v334, (uint64_t *)&__p);
            v55 = (std::__shared_weak_count *)v333.__r_.__value_.__l.__size_;
            if (!v333.__r_.__value_.__l.__size_)
              goto LABEL_146;
            v140 = (unint64_t *)(v333.__r_.__value_.__l.__size_ + 8);
            do
              v57 = __ldaxr(v140);
            while (__stlxr(v57 - 1, v140));
            break;
          case 9:
            v146 = MIL::IRTensorValue::GetDataView<signed char>(v33);
            v148 = v147;
            v149 = MIL::IRTensorValue::GetDataView<float>(v38);
            v333.__r_.__value_.__r.__words[0] = v42;
            v333.__r_.__value_.__l.__size_ = v41;
            v319 = 0;
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<float,signed char>(v146, v148, v149, (uint64_t **)&v333, (unint64_t **)&v334, (uint64_t *)&__p);
            v55 = (std::__shared_weak_count *)v333.__r_.__value_.__l.__size_;
            if (!v333.__r_.__value_.__l.__size_)
              goto LABEL_146;
            v150 = (unint64_t *)(v333.__r_.__value_.__l.__size_ + 8);
            do
              v57 = __ldaxr(v150);
            while (__stlxr(v57 - 1, v150));
            break;
          case 13:
            v96 = MIL::IRTensorValue::GetDataView<MIL::Int4>(v33);
            v98 = v97;
            v99 = MIL::IRTensorValue::GetDataView<float>(v38);
            v333.__r_.__value_.__r.__words[0] = v42;
            v333.__r_.__value_.__l.__size_ = v41;
            v319 = 0;
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<float,MIL::Int4>(v96, v98, v99, (uint64_t **)&v333, (unint64_t **)&v334, (uint64_t *)&__p);
            v55 = (std::__shared_weak_count *)v333.__r_.__value_.__l.__size_;
            if (!v333.__r_.__value_.__l.__size_)
              goto LABEL_146;
            v100 = (unint64_t *)(v333.__r_.__value_.__l.__size_ + 8);
            do
              v57 = __ldaxr(v100);
            while (__stlxr(v57 - 1, v100));
            break;
          case 14:
            v116 = MIL::IRTensorValue::GetDataView<unsigned char>(v33);
            v118 = v117;
            v119 = MIL::IRTensorValue::GetDataView<float>(v38);
            v333.__r_.__value_.__r.__words[0] = v42;
            v333.__r_.__value_.__l.__size_ = v41;
            v319 = 0;
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<float,unsigned char>(v116, v118, v119, (uint64_t **)&v333, (unint64_t **)&v334, (uint64_t *)&__p);
            v55 = (std::__shared_weak_count *)v333.__r_.__value_.__l.__size_;
            if (!v333.__r_.__value_.__l.__size_)
              goto LABEL_146;
            v120 = (unint64_t *)(v333.__r_.__value_.__l.__size_ + 8);
            do
              v57 = __ldaxr(v120);
            while (__stlxr(v57 - 1, v120));
            break;
          case 20:
            v171 = MIL::IRTensorValue::GetDataView<MIL::UInt4>(v33);
            v173 = v172;
            v174 = MIL::IRTensorValue::GetDataView<float>(v38);
            v333.__r_.__value_.__r.__words[0] = v42;
            v333.__r_.__value_.__l.__size_ = v41;
            v319 = 0;
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<float,MIL::UInt4>(v171, v173, v174, (uint64_t **)&v333, (unint64_t **)&v334, (uint64_t *)&__p);
            v55 = (std::__shared_weak_count *)v333.__r_.__value_.__l.__size_;
            if (!v333.__r_.__value_.__l.__size_)
              goto LABEL_146;
            v175 = (unint64_t *)(v333.__r_.__value_.__l.__size_ + 8);
            do
              v57 = __ldaxr(v175);
            while (__stlxr(v57 - 1, v175));
            break;
          default:
            v289 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            MIL::IRDataTypeToString(v50, &v331);
            v290 = std::string::insert(&v331, 0, "Constexpr-BlockwiseShiftScale: Unsupported dType (");
            v291 = *(_OWORD *)&v290->__r_.__value_.__l.__data_;
            v332.__r_.__value_.__r.__words[2] = v290->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v332.__r_.__value_.__l.__data_ = v291;
            v290->__r_.__value_.__l.__size_ = 0;
            v290->__r_.__value_.__r.__words[2] = 0;
            v290->__r_.__value_.__r.__words[0] = 0;
            v292 = std::string::append(&v332, ") for data.");
            v293 = *(_OWORD *)&v292->__r_.__value_.__l.__data_;
            v333.__r_.__value_.__r.__words[2] = v292->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v333.__r_.__value_.__l.__data_ = v293;
            v292->__r_.__value_.__l.__size_ = 0;
            v292->__r_.__value_.__r.__words[2] = 0;
            v292->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v289, &v333);
            __cxa_throw(v289, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      else
      {
        switch(v50)
        {
          case 4:
            v84 = (MIL::Fp16 *)MIL::IRTensorValue::GetDataView<MIL::Fp16>(v33);
            v86 = v85;
            v87 = MIL::IRTensorValue::GetDataView<float>(v38);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<float,MIL::Fp16>(v84, v86, v87, (unint64_t **)&v334, (uint64_t *)&__p);
            break;
          case 5:
            v190 = MIL::IRTensorValue::GetDataView<float>(v33);
            v192 = v191;
            v193 = MIL::IRTensorValue::GetDataView<float>(v38);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<float,float>(v190, v192, v193, (unint64_t **)&v334, (uint64_t *)&__p);
            break;
          case 7:
            v218 = (MIL::Bf16 *)MIL::IRTensorValue::GetDataView<MIL::Bf16>(v33);
            v220 = v219;
            v221 = MIL::IRTensorValue::GetDataView<float>(v38);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<float,MIL::Bf16>(v218, v220, v221, (unint64_t **)&v334, (uint64_t *)&__p);
            break;
          case 9:
            v226 = MIL::IRTensorValue::GetDataView<signed char>(v33);
            v228 = v227;
            v229 = MIL::IRTensorValue::GetDataView<float>(v38);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<float,signed char>(v226, v228, v229, (unint64_t **)&v334, (uint64_t *)&__p);
            break;
          case 13:
            v186 = MIL::IRTensorValue::GetDataView<MIL::Int4>(v33);
            v188 = v187;
            v189 = MIL::IRTensorValue::GetDataView<float>(v38);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<float,MIL::Int4>(v186, v188, v189, (unint64_t **)&v334, (uint64_t *)&__p);
            break;
          case 14:
            v202 = MIL::IRTensorValue::GetDataView<unsigned char>(v33);
            v204 = v203;
            v205 = MIL::IRTensorValue::GetDataView<float>(v38);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<float,unsigned char>(v202, v204, v205, (unint64_t **)&v334, (uint64_t *)&__p);
            break;
          case 20:
            v246 = MIL::IRTensorValue::GetDataView<MIL::UInt4>(v33);
            v248 = v247;
            v249 = MIL::IRTensorValue::GetDataView<float>(v38);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<float,MIL::UInt4>(v246, v248, v249, (unint64_t **)&v334, (uint64_t *)&__p);
            break;
          default:
            v304 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            MIL::IRDataTypeToString(v50, &v331);
            v305 = std::string::insert(&v331, 0, "Constexpr-BlockwiseShiftScale: Unsupported dType (");
            v306 = *(_OWORD *)&v305->__r_.__value_.__l.__data_;
            v332.__r_.__value_.__r.__words[2] = v305->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v332.__r_.__value_.__l.__data_ = v306;
            v305->__r_.__value_.__l.__size_ = 0;
            v305->__r_.__value_.__r.__words[2] = 0;
            v305->__r_.__value_.__r.__words[0] = 0;
            v307 = std::string::append(&v332, ") for data.");
            v308 = *(_OWORD *)&v307->__r_.__value_.__l.__data_;
            v333.__r_.__value_.__r.__words[2] = v307->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v333.__r_.__value_.__l.__data_ = v308;
            v307->__r_.__value_.__l.__size_ = 0;
            v307->__r_.__value_.__r.__words[2] = 0;
            v307->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v304, &v333);
            __cxa_throw(v304, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
      }
LABEL_146:
      if (v337)
      {
        v338 = v337;
        operator delete(v337);
      }
      if (v335)
      {
        v336 = v335;
        operator delete(v335);
      }
      if (v334.__r_.__value_.__r.__words[0])
      {
        v334.__r_.__value_.__l.__size_ = v334.__r_.__value_.__r.__words[0];
        operator delete(v334.__r_.__value_.__l.__data_);
      }
      if (v339.__r_.__value_.__r.__words[0])
      {
        v339.__r_.__value_.__l.__size_ = v339.__r_.__value_.__r.__words[0];
        operator delete(v339.__r_.__value_.__l.__data_);
      }
      if (v340.__r_.__value_.__r.__words[0])
      {
        v340.__r_.__value_.__l.__size_ = v340.__r_.__value_.__r.__words[0];
        operator delete(v340.__r_.__value_.__l.__data_);
      }
      MIL::IRTensorValueType::MakeFloat32Value(v32, (uint64_t)&__p, &v330);
      v250 = v330;
      *a2 = v330;
      if (v250)
      {
        v251 = (_QWORD *)operator new();
        v252 = v330;
        *v251 = &unk_1EA992A68;
        v251[1] = 0;
        v251[2] = 0;
        v251[3] = v252;
      }
      else
      {
        v251 = 0;
      }
      a2[1] = v251;
      v330 = 0;
      if (__p)
      {
        v329 = __p;
        operator delete(__p);
      }
      if (v319)
      {
        v253 = (unint64_t *)&v319->__shared_owners_;
        do
          v254 = __ldaxr(v253);
        while (__stlxr(v254 - 1, v253));
        if (!v254)
        {
          ((void (*)(std::__shared_weak_count *))v319->__on_zero_shared)(v319);
          std::__shared_weak_count::__release_weak(v319);
        }
      }
      if (v320)
      {
        v255 = (unint64_t *)&v320->__shared_owners_;
        do
          v256 = __ldaxr(v255);
        while (__stlxr(v256 - 1, v255));
        if (!v256)
        {
          ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
          std::__shared_weak_count::__release_weak(v320);
        }
      }
      v257 = v321;
      if (v321)
      {
        v258 = (unint64_t *)&v321->__shared_owners_;
        do
          v259 = __ldaxr(v258);
        while (__stlxr(v259 - 1, v258));
        goto LABEL_234;
      }
    }
    else
    {
      if (v4 != 7)
      {
        v284 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        MIL::IRDataTypeToString(v5, &v339);
        v285 = std::string::insert(&v339, 0, "Constexpr-BlockwiseShiftScale: Unsupported ");
        v286 = *(_OWORD *)&v285->__r_.__value_.__l.__data_;
        v340.__r_.__value_.__r.__words[2] = v285->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v340.__r_.__value_.__l.__data_ = v286;
        v285->__r_.__value_.__l.__size_ = 0;
        v285->__r_.__value_.__r.__words[2] = 0;
        v285->__r_.__value_.__r.__words[0] = 0;
        v287 = std::string::append(&v340, " output type");
        v288 = *(_OWORD *)&v287->__r_.__value_.__l.__data_;
        v334.__r_.__value_.__r.__words[2] = v287->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v334.__r_.__value_.__l.__data_ = v288;
        v287->__r_.__value_.__l.__size_ = 0;
        v287->__r_.__value_.__r.__words[2] = 0;
        v287->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v284, &v334);
        __cxa_throw(v284, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v6 = *(_QWORD *)this;
      v7 = (uint64_t *)*((_QWORD *)this + 1);
      v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
      v327 = v8;
      if (v8)
      {
        v9 = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      v12 = (uint64_t *)*((_QWORD *)this + 3);
      v11 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
      v326 = v11;
      if (v11)
      {
        v13 = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      v16 = *((_QWORD *)this + 5);
      v15 = *((_QWORD *)this + 6);
      v325 = (std::__shared_weak_count *)v15;
      if (v15)
      {
        v17 = (unint64_t *)(v15 + 8);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      v19 = (*(uint64_t (**)(uint64_t *))(*v7 + 32))(v7);
      v20 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 96))(v19);
      MIL::Operators::Common::Shared::ConstExprs::ShapeToVector(v20, &v340);
      v21 = (*(uint64_t (**)(uint64_t *))(*v12 + 32))(v12);
      v22 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 96))(v21);
      MIL::Operators::Common::Shared::ConstExprs::ShapeToVector(v22, &v339);
      MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::BlockwiseShiftScaleIndexConverter(&v334, (uint64_t **)&v340, (unint64_t **)&v339);
      v23 = (*(uint64_t (**)(uint64_t *))(*v7 + 32))(v7);
      v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 88))(v23);
      if (v16)
      {
        switch(v24)
        {
          case 4:
            v25 = (MIL::Fp16 *)MIL::IRTensorValue::GetDataView<MIL::Fp16>(v7);
            v27 = v26;
            v28 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(v12);
            v333.__r_.__value_.__r.__words[0] = v16;
            v333.__r_.__value_.__l.__size_ = v15;
            v325 = 0;
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Bf16,MIL::Fp16>(v25, v27, v28, (uint64_t **)&v333, (unint64_t **)&v334, (uint64_t *)&__p);
            v29 = (std::__shared_weak_count *)v333.__r_.__value_.__l.__size_;
            if (!v333.__r_.__value_.__l.__size_)
              goto LABEL_206;
            v30 = (unint64_t *)(v333.__r_.__value_.__l.__size_ + 8);
            do
              v31 = __ldaxr(v30);
            while (__stlxr(v31 - 1, v30));
            break;
          case 5:
            v126 = MIL::IRTensorValue::GetDataView<float>(v7);
            v128 = v127;
            v129 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(v12);
            v333.__r_.__value_.__r.__words[0] = v16;
            v333.__r_.__value_.__l.__size_ = v15;
            v325 = 0;
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Bf16,float>(v126, v128, v129, (uint64_t **)&v333, (unint64_t **)&v334, (uint64_t *)&__p);
            v29 = (std::__shared_weak_count *)v333.__r_.__value_.__l.__size_;
            if (!v333.__r_.__value_.__l.__size_)
              goto LABEL_206;
            v130 = (unint64_t *)(v333.__r_.__value_.__l.__size_ + 8);
            do
              v31 = __ldaxr(v130);
            while (__stlxr(v31 - 1, v130));
            break;
          case 7:
            v161 = (MIL::Bf16 *)MIL::IRTensorValue::GetDataView<MIL::Bf16>(v7);
            v163 = v162;
            v164 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(v12);
            v333.__r_.__value_.__r.__words[0] = v16;
            v333.__r_.__value_.__l.__size_ = v15;
            v325 = 0;
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Bf16,MIL::Bf16>(v161, v163, v164, (uint64_t **)&v333, (unint64_t **)&v334, (uint64_t *)&__p);
            v29 = (std::__shared_weak_count *)v333.__r_.__value_.__l.__size_;
            if (!v333.__r_.__value_.__l.__size_)
              goto LABEL_206;
            v165 = (unint64_t *)(v333.__r_.__value_.__l.__size_ + 8);
            do
              v31 = __ldaxr(v165);
            while (__stlxr(v31 - 1, v165));
            break;
          case 9:
            v166 = MIL::IRTensorValue::GetDataView<signed char>(v7);
            v168 = v167;
            v169 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(v12);
            v333.__r_.__value_.__r.__words[0] = v16;
            v333.__r_.__value_.__l.__size_ = v15;
            v325 = 0;
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Bf16,signed char>(v166, v168, v169, (uint64_t **)&v333, (unint64_t **)&v334, (uint64_t *)&__p);
            v29 = (std::__shared_weak_count *)v333.__r_.__value_.__l.__size_;
            if (!v333.__r_.__value_.__l.__size_)
              goto LABEL_206;
            v170 = (unint64_t *)(v333.__r_.__value_.__l.__size_ + 8);
            do
              v31 = __ldaxr(v170);
            while (__stlxr(v31 - 1, v170));
            break;
          case 13:
            v121 = MIL::IRTensorValue::GetDataView<MIL::Int4>(v7);
            v123 = v122;
            v124 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(v12);
            v333.__r_.__value_.__r.__words[0] = v16;
            v333.__r_.__value_.__l.__size_ = v15;
            v325 = 0;
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Bf16,MIL::Int4>(v121, v123, v124, (uint64_t **)&v333, (unint64_t **)&v334, (uint64_t *)&__p);
            v29 = (std::__shared_weak_count *)v333.__r_.__value_.__l.__size_;
            if (!v333.__r_.__value_.__l.__size_)
              goto LABEL_206;
            v125 = (unint64_t *)(v333.__r_.__value_.__l.__size_ + 8);
            do
              v31 = __ldaxr(v125);
            while (__stlxr(v31 - 1, v125));
            break;
          case 14:
            v141 = MIL::IRTensorValue::GetDataView<unsigned char>(v7);
            v143 = v142;
            v144 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(v12);
            v333.__r_.__value_.__r.__words[0] = v16;
            v333.__r_.__value_.__l.__size_ = v15;
            v325 = 0;
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Bf16,unsigned char>(v141, v143, v144, (uint64_t **)&v333, (unint64_t **)&v334, (uint64_t *)&__p);
            v29 = (std::__shared_weak_count *)v333.__r_.__value_.__l.__size_;
            if (!v333.__r_.__value_.__l.__size_)
              goto LABEL_206;
            v145 = (unint64_t *)(v333.__r_.__value_.__l.__size_ + 8);
            do
              v31 = __ldaxr(v145);
            while (__stlxr(v31 - 1, v145));
            break;
          case 20:
            v181 = MIL::IRTensorValue::GetDataView<MIL::UInt4>(v7);
            v183 = v182;
            v184 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(v12);
            v333.__r_.__value_.__r.__words[0] = v16;
            v333.__r_.__value_.__l.__size_ = v15;
            v325 = 0;
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Bf16,MIL::UInt4>(v181, v183, v184, (uint64_t **)&v333, (unint64_t **)&v334, (uint64_t *)&__p);
            v29 = (std::__shared_weak_count *)v333.__r_.__value_.__l.__size_;
            if (!v333.__r_.__value_.__l.__size_)
              goto LABEL_206;
            v185 = (unint64_t *)(v333.__r_.__value_.__l.__size_ + 8);
            do
              v31 = __ldaxr(v185);
            while (__stlxr(v31 - 1, v185));
            break;
          default:
            v299 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            MIL::IRDataTypeToString(v24, &v331);
            v300 = std::string::insert(&v331, 0, "Constexpr-BlockwiseShiftScale: Unsupported dType (");
            v301 = *(_OWORD *)&v300->__r_.__value_.__l.__data_;
            v332.__r_.__value_.__r.__words[2] = v300->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v332.__r_.__value_.__l.__data_ = v301;
            v300->__r_.__value_.__l.__size_ = 0;
            v300->__r_.__value_.__r.__words[2] = 0;
            v300->__r_.__value_.__r.__words[0] = 0;
            v302 = std::string::append(&v332, ") for data.");
            v303 = *(_OWORD *)&v302->__r_.__value_.__l.__data_;
            v333.__r_.__value_.__r.__words[2] = v302->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v333.__r_.__value_.__l.__data_ = v303;
            v302->__r_.__value_.__l.__size_ = 0;
            v302->__r_.__value_.__r.__words[2] = 0;
            v302->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v299, &v333);
            __cxa_throw(v299, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      else
      {
        switch(v24)
        {
          case 4:
            v92 = (MIL::Fp16 *)MIL::IRTensorValue::GetDataView<MIL::Fp16>(v7);
            v94 = v93;
            v95 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(v12);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Bf16,MIL::Fp16>(v92, v94, v95, (unint64_t **)&v334, (uint64_t *)&__p);
            break;
          case 5:
            v210 = MIL::IRTensorValue::GetDataView<float>(v7);
            v212 = v211;
            v213 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(v12);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Bf16,float>(v210, v212, v213, (unint64_t **)&v334, (uint64_t *)&__p);
            break;
          case 7:
            v238 = (MIL::Bf16 *)MIL::IRTensorValue::GetDataView<MIL::Bf16>(v7);
            v240 = v239;
            v241 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(v12);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Bf16,MIL::Bf16>(v238, v240, v241, (unint64_t **)&v334, (uint64_t *)&__p);
            break;
          case 9:
            v242 = MIL::IRTensorValue::GetDataView<signed char>(v7);
            v244 = v243;
            v245 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(v12);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Bf16,signed char>(v242, v244, v245, (unint64_t **)&v334, (uint64_t *)&__p);
            break;
          case 13:
            v206 = MIL::IRTensorValue::GetDataView<MIL::Int4>(v7);
            v208 = v207;
            v209 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(v12);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Bf16,MIL::Int4>(v206, v208, v209, (unint64_t **)&v334, (uint64_t *)&__p);
            break;
          case 14:
            v222 = MIL::IRTensorValue::GetDataView<unsigned char>(v7);
            v224 = v223;
            v225 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(v12);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Bf16,unsigned char>(v222, v224, v225, (unint64_t **)&v334, (uint64_t *)&__p);
            break;
          case 20:
            v272 = MIL::IRTensorValue::GetDataView<MIL::UInt4>(v7);
            v274 = v273;
            v275 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(v12);
            MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Bf16,MIL::UInt4>(v272, v274, v275, (unint64_t **)&v334, (uint64_t *)&__p);
            break;
          default:
            v314 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            MIL::IRDataTypeToString(v24, &v331);
            v315 = std::string::insert(&v331, 0, "Constexpr-BlockwiseShiftScale: Unsupported dType (");
            v316 = *(_OWORD *)&v315->__r_.__value_.__l.__data_;
            v332.__r_.__value_.__r.__words[2] = v315->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v332.__r_.__value_.__l.__data_ = v316;
            v315->__r_.__value_.__l.__size_ = 0;
            v315->__r_.__value_.__r.__words[2] = 0;
            v315->__r_.__value_.__r.__words[0] = 0;
            v317 = std::string::append(&v332, ") for data.");
            v318 = *(_OWORD *)&v317->__r_.__value_.__l.__data_;
            v333.__r_.__value_.__r.__words[2] = v317->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v333.__r_.__value_.__l.__data_ = v318;
            v317->__r_.__value_.__l.__size_ = 0;
            v317->__r_.__value_.__r.__words[2] = 0;
            v317->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v314, &v333);
            __cxa_throw(v314, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
      }
LABEL_206:
      if (v337)
      {
        v338 = v337;
        operator delete(v337);
      }
      if (v335)
      {
        v336 = v335;
        operator delete(v335);
      }
      if (v334.__r_.__value_.__r.__words[0])
      {
        v334.__r_.__value_.__l.__size_ = v334.__r_.__value_.__r.__words[0];
        operator delete(v334.__r_.__value_.__l.__data_);
      }
      if (v339.__r_.__value_.__r.__words[0])
      {
        v339.__r_.__value_.__l.__size_ = v339.__r_.__value_.__r.__words[0];
        operator delete(v339.__r_.__value_.__l.__data_);
      }
      if (v340.__r_.__value_.__r.__words[0])
      {
        v340.__r_.__value_.__l.__size_ = v340.__r_.__value_.__r.__words[0];
        operator delete(v340.__r_.__value_.__l.__data_);
      }
      MIL::IRTensorValueType::MakeBFloat16Value(v6, (uint64_t)&__p, &v330);
      v276 = v330;
      *a2 = v330;
      if (v276)
      {
        v277 = (_QWORD *)operator new();
        v278 = v330;
        *v277 = &unk_1EA992A68;
        v277[1] = 0;
        v277[2] = 0;
        v277[3] = v278;
      }
      else
      {
        v277 = 0;
      }
      a2[1] = v277;
      v330 = 0;
      if (__p)
      {
        v329 = __p;
        operator delete(__p);
      }
      if (v325)
      {
        v279 = (unint64_t *)&v325->__shared_owners_;
        do
          v280 = __ldaxr(v279);
        while (__stlxr(v280 - 1, v279));
        if (!v280)
        {
          ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
          std::__shared_weak_count::__release_weak(v325);
        }
      }
      if (v326)
      {
        v281 = (unint64_t *)&v326->__shared_owners_;
        do
          v282 = __ldaxr(v281);
        while (__stlxr(v282 - 1, v281));
        if (!v282)
        {
          ((void (*)(std::__shared_weak_count *))v326->__on_zero_shared)(v326);
          std::__shared_weak_count::__release_weak(v326);
        }
      }
      v257 = v327;
      if (v327)
      {
        v283 = (unint64_t *)&v327->__shared_owners_;
        do
          v259 = __ldaxr(v283);
        while (__stlxr(v259 - 1, v283));
LABEL_234:
        if (!v259)
        {
          ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
          std::__shared_weak_count::__release_weak(v257);
        }
      }
    }
  }
}

void sub_1E0968A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  void *v50;
  int v51;
  uint64_t v52;
  void *v54;
  void *v55;

  if (a50 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
  {
    operator delete(a32);
    if ((v51 & 1) == 0)
    {
LABEL_10:
      v54 = *(void **)(v52 - 136);
      if (v54)
      {
        *(_QWORD *)(v52 - 128) = v54;
        operator delete(v54);
      }
      v55 = *(void **)(v52 - 112);
      if (v55)
      {
        *(_QWORD *)(v52 - 104) = v55;
        operator delete(v55);
      }
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
      _Unwind_Resume(a1);
    }
  }
  else if (!v51)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v50);
  goto LABEL_10;
}

void MIL::Operators::Common::ios18::ConstExprs::BlockwiseShiftScale::~BlockwiseShiftScale(MIL::Operators::Common::ios18::ConstExprs::BlockwiseShiftScale *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *((_QWORD *)this + 1);
  v2 = (_QWORD *)((char *)this + 8);
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<MIL::Operators::Common::ios18::ConstExprs::BlockwiseShiftScale::Impl>::operator()[abi:ne180100]((uint64_t)v2, v3);
  MIL::AbstractConstExpr::~AbstractConstExpr(this);
}

{
  MIL::Operators::Common::ios18::ConstExprs::BlockwiseShiftScale::~BlockwiseShiftScale(this);
  JUMPOUT(0x1E0C023A0);
}

_QWORD *MIL::Operators::Common::ios18::ConstExprs::BlockwiseShiftScale::BlockwiseShiftScale(_QWORD *a1, uint64_t a2, __int128 *a3, __int128 *a4, __int128 *a5)
{
  _QWORD *v9;
  uint64_t v11;

  v11 = a2;
  v9 = MIL::AbstractConstExpr::AbstractConstExpr(a1);
  *v9 = &off_1EA9A1C78;
  std::make_unique[abi:ne180100]<MIL::Operators::Common::ios18::ConstExprs::BlockwiseShiftScale::Impl,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>>(&v11, a3, a4, a5, v9 + 1);
  return a1;
}

void sub_1E0968F40(_Unwind_Exception *a1)
{
  MIL::AbstractConstExpr *v1;

  MIL::AbstractConstExpr::~AbstractConstExpr(v1);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<MIL::Operators::Common::ios18::ConstExprs::BlockwiseShiftScale::Impl,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>>(uint64_t *a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v10 = operator new();
  v11 = *a1;
  v12 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v23 = *a3;
  v24 = v12;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v22 = *a4;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  MIL::Operators::Common::ios18::ConstExprs::BlockwiseShiftScale::Impl::Impl(v10, v11, (uint64_t)&v24, (uint64_t)&v23, (uint64_t)&v22);
  *a5 = v10;
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_1E09690A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  uint64_t v13;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  MEMORY[0x1E0C023A0](v13, 0x60C40767ABE8BLL);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::ConstExprs::BlockwiseShiftScale::ValidateArgsAndTypeConstraints(MIL::Operators::Common::ios18::ConstExprs::BlockwiseShiftScale::Impl **this)
{
  MIL::Operators::Common::ios18::ConstExprs::BlockwiseShiftScale::Impl::ValidateArgsAndTypeConstraints(this[1]);
}

void MIL::Operators::Common::ios18::ConstExprs::BlockwiseShiftScale::ComputeOutput(MIL::Operators::Common::ios18::ConstExprs::BlockwiseShiftScale::Impl **this@<X0>, _QWORD *a2@<X8>)
{
  MIL::Operators::Common::ios18::ConstExprs::BlockwiseShiftScale::Impl::ComputeOutput(this[1], a2);
}

void MIL::Operators::Common::ios18::ConstExprs::BlockwiseShiftScale::ComputeOutput(MIL::Operators::Common::ios18::ConstExprs::BlockwiseShiftScale::Impl **this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::runtime_error *exception;

  if (a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "BlockwiseLutToDense has a single output.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  MIL::Operators::Common::ios18::ConstExprs::BlockwiseShiftScale::Impl::ComputeOutput(this[1], a3);
}

void sub_1E0969148(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Bf16,MIL::UInt4>@<X0>(std::string::size_type a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X4>, unint64_t **a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD *result;
  unint64_t v16;
  uint64_t v17;
  int Int;
  float Float;
  float v20;
  MIL::Bf16 *v21;
  uint64_t v22;
  uint64_t v23;
  std::string::size_type v24;
  std::string::size_type v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  float v29;
  MIL::Bf16 *v30;
  uint64_t v31;
  uint64_t Data;
  unint64_t v33;
  uint64_t v34;
  int v35;
  float v36;
  MIL::Bf16 *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  float v43;
  unsigned int v44;
  MIL::Bf16 *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  float v51;
  float v52;
  MIL::Bf16 *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  float v59;
  MIL::Bf16 *v60;
  uint64_t v61;
  uint64_t v62;
  std::string::size_type v63;
  std::string::size_type v64;
  unint64_t v65;
  unint64_t v66;
  int v67;
  float v68;
  MIL::Bf16 *v69;
  uint64_t v70;
  std::runtime_error *exception;
  std::string *v72;
  __int128 v73;
  std::string *v74;
  __int128 v75;
  std::string v76;
  std::string v77;
  std::string v78;

  v12 = (*(uint64_t (**)(uint64_t *))(**a4 + 32))(*a4);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 88))(v12);
  switch(v13)
  {
    case 4:
      v14 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(*a4);
      result = std::vector<MIL::Bf16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v16 = 0;
        do
        {
          v17 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v16);
          v78.__r_.__value_.__r.__words[0] = a1;
          v78.__r_.__value_.__l.__size_ = a2;
          v77.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(&v78, v16);
          Int = MIL::UInt4::GetInt((MIL::UInt4 *)&v77);
          Float = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v17));
          v20 = MIL::Fp16::GetFloat((MIL::Fp16 *)(v14 + 2 * v17));
          result = (_QWORD *)MIL::Bf16::FromFloat(v21, Float * (float)((float)Int - v20));
          v22 = *a6;
          *(_WORD *)(*a6 + 2 * v16++) = (_WORD)result;
        }
        while (v16 < (a6[1] - v22) >> 1);
      }
      break;
    case 5:
      Data = MIL::IRTensorValue::GetDataView<float>(*a4);
      result = std::vector<MIL::Bf16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v33 = 0;
        do
        {
          v34 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v33);
          v78.__r_.__value_.__r.__words[0] = a1;
          v78.__r_.__value_.__l.__size_ = a2;
          v77.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(&v78, v33);
          v35 = MIL::UInt4::GetInt((MIL::UInt4 *)&v77);
          v36 = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v34));
          result = (_QWORD *)MIL::Bf16::FromFloat(v37, v36 * (float)((float)v35 - *(float *)(Data + 4 * v34)));
          v38 = *a6;
          *(_WORD *)(*a6 + 2 * v33++) = (_WORD)result;
        }
        while (v33 < (a6[1] - v38) >> 1);
      }
      break;
    case 7:
      v47 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(*a4);
      result = std::vector<MIL::Bf16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v48 = 0;
        do
        {
          v49 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v48);
          v78.__r_.__value_.__r.__words[0] = a1;
          v78.__r_.__value_.__l.__size_ = a2;
          v77.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(&v78, v48);
          v50 = MIL::UInt4::GetInt((MIL::UInt4 *)&v77);
          v51 = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v49));
          v52 = MIL::Bf16::GetFloat((MIL::Bf16 *)(v47 + 2 * v49));
          result = (_QWORD *)MIL::Bf16::FromFloat(v53, v51 * (float)((float)v50 - v52));
          v54 = *a6;
          *(_WORD *)(*a6 + 2 * v48++) = (_WORD)result;
        }
        while (v48 < (a6[1] - v54) >> 1);
      }
      break;
    case 9:
      v55 = MIL::IRTensorValue::GetDataView<signed char>(*a4);
      result = std::vector<MIL::Bf16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v56 = 0;
        do
        {
          v57 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v56);
          v78.__r_.__value_.__r.__words[0] = a1;
          v78.__r_.__value_.__l.__size_ = a2;
          v77.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(&v78, v56);
          v58 = MIL::UInt4::GetInt((MIL::UInt4 *)&v77);
          v59 = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v57));
          result = (_QWORD *)MIL::Bf16::FromFloat(v60, v59 * (float)((float)v58 - (float)*(char *)(v55 + v57)));
          v61 = *a6;
          *(_WORD *)(*a6 + 2 * v56++) = (_WORD)result;
        }
        while (v56 < (a6[1] - v61) >> 1);
      }
      break;
    case 13:
      v23 = MIL::IRTensorValue::GetDataView<MIL::Int4>(*a4);
      v25 = v24;
      result = std::vector<MIL::Bf16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v26 = 0;
        do
        {
          v27 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v26);
          v78.__r_.__value_.__r.__words[0] = a1;
          v78.__r_.__value_.__l.__size_ = a2;
          v77.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(&v78, v26);
          v28 = MIL::UInt4::GetInt((MIL::UInt4 *)&v77);
          v29 = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v27));
          v78.__r_.__value_.__r.__words[0] = v23;
          v78.__r_.__value_.__l.__size_ = v25;
          v77.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::Int4 const,18446744073709551615ul>::ValueAt(&v78, v27);
          v30 = (MIL::Bf16 *)MIL::Int4::GetInt((MIL::Int4 *)&v77);
          result = (_QWORD *)MIL::Bf16::FromFloat(v30, v29 * (float)((float)v28 - (float)(int)v30));
          v31 = *a6;
          *(_WORD *)(*a6 + 2 * v26++) = (_WORD)result;
        }
        while (v26 < (a6[1] - v31) >> 1);
      }
      break;
    case 14:
      v39 = MIL::IRTensorValue::GetDataView<unsigned char>(*a4);
      result = std::vector<MIL::Bf16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v40 = 0;
        do
        {
          v41 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v40);
          v78.__r_.__value_.__r.__words[0] = a1;
          v78.__r_.__value_.__l.__size_ = a2;
          v77.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(&v78, v40);
          v42 = MIL::UInt4::GetInt((MIL::UInt4 *)&v77);
          v43 = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v41));
          LOBYTE(v44) = *(_BYTE *)(v39 + v41);
          result = (_QWORD *)MIL::Bf16::FromFloat(v45, v43 * (float)((float)v42 - (float)v44));
          v46 = *a6;
          *(_WORD *)(*a6 + 2 * v40++) = (_WORD)result;
        }
        while (v40 < (a6[1] - v46) >> 1);
      }
      break;
    case 20:
      v62 = MIL::IRTensorValue::GetDataView<MIL::UInt4>(*a4);
      v64 = v63;
      result = std::vector<MIL::Bf16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v65 = 0;
        do
        {
          v66 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v65);
          v78.__r_.__value_.__r.__words[0] = a1;
          v78.__r_.__value_.__l.__size_ = a2;
          v77.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(&v78, v65);
          v67 = MIL::UInt4::GetInt((MIL::UInt4 *)&v77);
          v68 = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v66));
          v78.__r_.__value_.__r.__words[0] = v62;
          v78.__r_.__value_.__l.__size_ = v64;
          v77.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(&v78, v66);
          v69 = (MIL::Bf16 *)MIL::UInt4::GetInt((MIL::UInt4 *)&v77);
          result = (_QWORD *)MIL::Bf16::FromFloat(v69, v68 * (float)((float)v67 - (float)(int)v69));
          v70 = *a6;
          *(_WORD *)(*a6 + 2 * v65++) = (_WORD)result;
        }
        while (v65 < (a6[1] - v70) >> 1);
      }
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      MIL::IRDataTypeToString(v13, &v76);
      v72 = std::string::insert(&v76, 0, "Unsupported dType (");
      v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
      v77.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v73;
      v72->__r_.__value_.__l.__size_ = 0;
      v72->__r_.__value_.__r.__words[2] = 0;
      v72->__r_.__value_.__r.__words[0] = 0;
      v74 = std::string::append(&v77, ") for offset.");
      v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
      v78.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v75;
      v74->__r_.__value_.__l.__size_ = 0;
      v74->__r_.__value_.__r.__words[2] = 0;
      v74->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v78);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1E0969704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;

  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v29 & 1) == 0)
LABEL_10:
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v28);
  goto LABEL_10;
}

_QWORD *MIL::Operators::Common::Shared::ConstExprs::EvaluateBlockwiseShiftScale<MIL::Bf16,MIL::Int4>@<X0>(std::string::size_type a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X4>, unint64_t **a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD *result;
  unint64_t v16;
  uint64_t v17;
  int Int;
  float Float;
  float v20;
  MIL::Bf16 *v21;
  uint64_t v22;
  uint64_t v23;
  std::string::size_type v24;
  std::string::size_type v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  float v29;
  MIL::Bf16 *v30;
  uint64_t v31;
  uint64_t Data;
  unint64_t v33;
  uint64_t v34;
  int v35;
  float v36;
  MIL::Bf16 *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  float v43;
  unsigned int v44;
  MIL::Bf16 *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  float v51;
  float v52;
  MIL::Bf16 *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  float v59;
  MIL::Bf16 *v60;
  uint64_t v61;
  uint64_t v62;
  std::string::size_type v63;
  std::string::size_type v64;
  unint64_t v65;
  unint64_t v66;
  int v67;
  float v68;
  MIL::Bf16 *v69;
  uint64_t v70;
  std::runtime_error *exception;
  std::string *v72;
  __int128 v73;
  std::string *v74;
  __int128 v75;
  std::string v76;
  std::string v77;
  std::string v78;

  v12 = (*(uint64_t (**)(uint64_t *))(**a4 + 32))(*a4);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 88))(v12);
  switch(v13)
  {
    case 4:
      v14 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(*a4);
      result = std::vector<MIL::Bf16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v16 = 0;
        do
        {
          v17 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v16);
          v78.__r_.__value_.__r.__words[0] = a1;
          v78.__r_.__value_.__l.__size_ = a2;
          v77.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::Int4 const,18446744073709551615ul>::ValueAt(&v78, v16);
          Int = MIL::Int4::GetInt((MIL::Int4 *)&v77);
          Float = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v17));
          v20 = MIL::Fp16::GetFloat((MIL::Fp16 *)(v14 + 2 * v17));
          result = (_QWORD *)MIL::Bf16::FromFloat(v21, Float * (float)((float)Int - v20));
          v22 = *a6;
          *(_WORD *)(*a6 + 2 * v16++) = (_WORD)result;
        }
        while (v16 < (a6[1] - v22) >> 1);
      }
      break;
    case 5:
      Data = MIL::IRTensorValue::GetDataView<float>(*a4);
      result = std::vector<MIL::Bf16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v33 = 0;
        do
        {
          v34 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v33);
          v78.__r_.__value_.__r.__words[0] = a1;
          v78.__r_.__value_.__l.__size_ = a2;
          v77.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::Int4 const,18446744073709551615ul>::ValueAt(&v78, v33);
          v35 = MIL::Int4::GetInt((MIL::Int4 *)&v77);
          v36 = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v34));
          result = (_QWORD *)MIL::Bf16::FromFloat(v37, v36 * (float)((float)v35 - *(float *)(Data + 4 * v34)));
          v38 = *a6;
          *(_WORD *)(*a6 + 2 * v33++) = (_WORD)result;
        }
        while (v33 < (a6[1] - v38) >> 1);
      }
      break;
    case 7:
      v47 = MIL::IRTensorValue::GetDataView<MIL::Bf16>(*a4);
      result = std::vector<MIL::Bf16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v48 = 0;
        do
        {
          v49 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v48);
          v78.__r_.__value_.__r.__words[0] = a1;
          v78.__r_.__value_.__l.__size_ = a2;
          v77.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::Int4 const,18446744073709551615ul>::ValueAt(&v78, v48);
          v50 = MIL::Int4::GetInt((MIL::Int4 *)&v77);
          v51 = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v49));
          v52 = MIL::Bf16::GetFloat((MIL::Bf16 *)(v47 + 2 * v49));
          result = (_QWORD *)MIL::Bf16::FromFloat(v53, v51 * (float)((float)v50 - v52));
          v54 = *a6;
          *(_WORD *)(*a6 + 2 * v48++) = (_WORD)result;
        }
        while (v48 < (a6[1] - v54) >> 1);
      }
      break;
    case 9:
      v55 = MIL::IRTensorValue::GetDataView<signed char>(*a4);
      result = std::vector<MIL::Bf16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v56 = 0;
        do
        {
          v57 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v56);
          v78.__r_.__value_.__r.__words[0] = a1;
          v78.__r_.__value_.__l.__size_ = a2;
          v77.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::Int4 const,18446744073709551615ul>::ValueAt(&v78, v56);
          v58 = MIL::Int4::GetInt((MIL::Int4 *)&v77);
          v59 = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v57));
          result = (_QWORD *)MIL::Bf16::FromFloat(v60, v59 * (float)((float)v58 - (float)*(char *)(v55 + v57)));
          v61 = *a6;
          *(_WORD *)(*a6 + 2 * v56++) = (_WORD)result;
        }
        while (v56 < (a6[1] - v61) >> 1);
      }
      break;
    case 13:
      v23 = MIL::IRTensorValue::GetDataView<MIL::Int4>(*a4);
      v25 = v24;
      result = std::vector<MIL::Bf16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v26 = 0;
        do
        {
          v27 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v26);
          v78.__r_.__value_.__r.__words[0] = a1;
          v78.__r_.__value_.__l.__size_ = a2;
          v77.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::Int4 const,18446744073709551615ul>::ValueAt(&v78, v26);
          v28 = MIL::Int4::GetInt((MIL::Int4 *)&v77);
          v29 = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v27));
          v78.__r_.__value_.__r.__words[0] = v23;
          v78.__r_.__value_.__l.__size_ = v25;
          v77.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::Int4 const,18446744073709551615ul>::ValueAt(&v78, v27);
          v30 = (MIL::Bf16 *)MIL::Int4::GetInt((MIL::Int4 *)&v77);
          result = (_QWORD *)MIL::Bf16::FromFloat(v30, v29 * (float)((float)v28 - (float)(int)v30));
          v31 = *a6;
          *(_WORD *)(*a6 + 2 * v26++) = (_WORD)result;
        }
        while (v26 < (a6[1] - v31) >> 1);
      }
      break;
    case 14:
      v39 = MIL::IRTensorValue::GetDataView<unsigned char>(*a4);
      result = std::vector<MIL::Bf16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v40 = 0;
        do
        {
          v41 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v40);
          v78.__r_.__value_.__r.__words[0] = a1;
          v78.__r_.__value_.__l.__size_ = a2;
          v77.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::Int4 const,18446744073709551615ul>::ValueAt(&v78, v40);
          v42 = MIL::Int4::GetInt((MIL::Int4 *)&v77);
          v43 = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v41));
          LOBYTE(v44) = *(_BYTE *)(v39 + v41);
          result = (_QWORD *)MIL::Bf16::FromFloat(v45, v43 * (float)((float)v42 - (float)v44));
          v46 = *a6;
          *(_WORD *)(*a6 + 2 * v40++) = (_WORD)result;
        }
        while (v40 < (a6[1] - v46) >> 1);
      }
      break;
    case 20:
      v62 = MIL::IRTensorValue::GetDataView<MIL::UInt4>(*a4);
      v64 = v63;
      result = std::vector<MIL::Bf16>::vector(a6, a2);
      if (a6[1] != *a6)
      {
        v65 = 0;
        do
        {
          v66 = MIL::Operators::Common::Shared::ConstExprs::BlockwiseShiftScaleIndexConverter::DataIndexToScaleIndex(a5, v65);
          v78.__r_.__value_.__r.__words[0] = a1;
          v78.__r_.__value_.__l.__size_ = a2;
          v77.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::Int4 const,18446744073709551615ul>::ValueAt(&v78, v65);
          v67 = MIL::Int4::GetInt((MIL::Int4 *)&v77);
          v68 = MIL::Bf16::GetFloat((MIL::Bf16 *)(a3 + 2 * v66));
          v78.__r_.__value_.__r.__words[0] = v62;
          v78.__r_.__value_.__l.__size_ = v64;
          v77.__r_.__value_.__s.__data_[0] = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(&v78, v66);
          v69 = (MIL::Bf16 *)MIL::UInt4::GetInt((MIL::UInt4 *)&v77);
          result = (_QWORD *)MIL::Bf16::FromFloat(v69, v68 * (float)((float)v67 - (float)(int)v69));
          v70 = *a6;
          *(_WORD *)(*a6 + 2 * v65++) = (_WORD)result;
        }
        while (v65 < (a6[1] - v70) >> 1);
      }
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      MIL::IRDataTypeToString(v13, &v76);
      v72 = std::string::insert(&v76, 0, "Unsupported dType (");
      v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
      v77.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v73;
      v72->__r_.__value_.__l.__size_ = 0;
      v72->__r_.__value_.__r.__words[2] = 0;
      v72->__r_.__value_.__r.__words[0] = 0;
      v74 = std::string::append(&v77, ") for offset.");
      v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
      v78.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v75;
      v74->__r_.__value_.__l.__size_ = 0;
      v74->__r_.__value_.__r.__words[2] = 0;
      v74->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v78);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

